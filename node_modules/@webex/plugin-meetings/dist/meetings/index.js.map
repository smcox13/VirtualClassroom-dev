{"version":3,"sources":["index.js"],"names":["Meetings","args","namespace","MEETINGS","meetingInfo","MeetingInfo","parent","webex","request","Request","meetingCollection","MeetingCollection","personalMeetingRoom","PersonalMeetingRoom","reachability","registered","onReady","Metrics","initialSetup","version","data","meeting","getByKey","LOCUS_URL","locusUrl","CORRELATION_ID","MeetingsUtil","checkForCorrelationId","internal","device","url","locus","SIP_URI","self","callbackInfo","callbackAddress","fullState","state","LOCUS","STATE","INACTIVE","LoggerProxy","logger","warn","_LEFT_","removed","create","_LOCUS_ID_","then","newMeeting","eventType","LOCUSEVENT","DIFFERENCE","locusInfo","finally","getMeetingByType","_ID_","id","postEvent","event","NOTIFICATION_RECEIVED","trigger","MERCURY_EVENT","REMOTE_STARTED","Trigger","file","function","EVENT_TRIGGERS","MEETING_ADDED","type","_MEETING_","_JOIN_","_INCOMING_","parse","envelope","MESSAGE_ROAP","handleLocusEvent","mercury","on","LOCUS_MERCURY","handleLocusMercury","ROAP","ROAP_MERCURY","handleRoapMercury","ONLINE","syncMeetings","off","once","READY","StaticConfig","set","config","LoggerConfig","logging","MEETINGS_READY","canAuthorize","error","reject","Error","info","resolve","register","connect","listenForEvents","MEETINGS_REGISTERED","catch","message","stopListeningForEvents","disconnect","unregister","MEETINGS_UNREGISTERED","Reachability","setReachability","getReachability","gatherReachability","meetingId","reason","delete","MEETING_REMOVED","destination","createMeeting","EVENTS","DESTROY_MEETING","payload","destroy","Meeting","userId","deviceUrl","roapSeq","fetchMeetingInfo","extractDestination","parseMeetingInfo","body","debug","sipUri","setSipUri","meetingAddedType","getMeetingAddedType","value","options","getAll","getActiveMeetings","locusArray","activeLocusUrl","loci","length","forEach","push","includes","MEETING_REMOVED_REASON","NO_MEETINGS_TO_SYNC","scheduled","get","StatsAnalyzer","StatsCalculator","WebexPlugin"],"mappings":"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","file":"index.js","sourcesContent":["/*!\n  * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n*/\n\nimport '@webex/internal-plugin-mercury';\nimport {forEach} from 'lodash';\nimport {WebexPlugin} from '@webex/webex-core';\n\nimport Metrics from '../metrics';\nimport {trigger, eventType} from '../metrics/config';\nimport LoggerConfig from '../common/logs/logger-config';\nimport StaticConfig from '../common/config';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport Trigger from '../common/events/trigger-proxy';\nimport {\n  MEETINGS,\n  EVENTS,\n  EVENT_TRIGGERS,\n  READY,\n  LOCUSEVENT,\n  LOCUS_URL,\n  ROAP,\n  ONLINE,\n  _MEETING_,\n  _JOIN_,\n  _LOCUS_ID_,\n  _INCOMING_,\n  LOCUS,\n  CORRELATION_ID,\n  SIP_URI,\n  _LEFT_,\n  _ID_,\n  MEETING_REMOVED_REASON\n} from '../constants';\nimport MeetingInfo from '../meeting-info';\nimport Meeting from '../meeting';\nimport PersonalMeetingRoom from '../personal-meeting-room';\nimport Reachability from '../reachability';\nimport Request from '../meetings/request';\nimport StatsAnalyzer from '../analyzer/analyzer';\nimport StatsCalculator from '../analyzer/calculator';\n\nimport MeetingCollection from './collection';\nimport MeetingsUtil from './util';\n\n\n/**\n   * Meetings Ready Event\n   * Emitted when the meetings instance on webex is ready\n   * @event meetings:ready\n   * @instance\n   * @memberof Meetings\n   */\n\n/**\n * Meetings Registered Event\n * Emitted when the meetings instance has been registered and listening\n * @event meetings:registered\n * @instance\n * @memberof Meetings\n */\n\n/**\n    * Meeting Removed Event\n    * Emitted when a meeting was removed from the cache of meetings\n    * @event meeting:removed\n    * @instance\n    * @type {Object}\n    * @property {String} meetingId the removed meeting\n    * @property {Object} response the server response\n    * @property {String} type what type of meeting it was\n    * @memberof Meetings\n    */\n\n/**\n    * Meeting Added Event\n    * Emitted when a meeting was added to the cache of meetings\n    * @event meeting:added\n    * @instance\n    * @type {Object}\n    * @property {String} meetingId the added meeting\n    * @property {String} type what type of meeting it was\n    * @memberof Meetings\n    */\n\n/**\n   * Maintain a cache of meetings and sync with services.\n   * @class\n   */\nexport default class Meetings extends WebexPlugin {\n    namespace = MEETINGS;\n\n    /**\n     * Initializes the Meetings Plugin\n     * @constructor\n     * @public\n     * @memberof Meetings\n     */\n    constructor(...args) {\n      super(...args);\n      /**\n       * The MeetingInfo object to interact with server\n       * @instance\n       * @type {Object}\n       * @private\n       * @memberof Meetings\n       */\n      this.meetingInfo = new MeetingInfo({}, {parent: this.webex});\n      /**\n       * The Meetings request to interact with server\n       * @instance\n       * @type {Object}\n       * @private\n       * @memberof Meetings\n       */\n      this.request = new Request({}, {parent: this.webex});\n      this.meetingCollection = new MeetingCollection();\n      /**\n       * The PersonalMeetingRoom object to interact with server\n       * @instance\n       * @type {Object}\n       * @public\n       * @memberof Meetings\n       */\n      this.personalMeetingRoom = new PersonalMeetingRoom({}, {parent: this.webex});\n      /**\n       * The Reachability object to interact with server, starts as null until {@link Meeting#setReachability} is called\n       * starts as null\n       * @instance\n       * @type {Object}\n       * @private\n       * @memberof Meetings\n       */\n      this.reachability = null;\n\n      /**\n       * If the meetings plugin has been registered and listening via {@link Meetings#register}\n       * @instance\n       * @type {Boolean}\n       * @public\n       * @memberof Meetings\n       */\n      this.registered = false;\n\n      this.onReady();\n      Metrics.initialSetup(this.meetingCollection, this.webex.version);\n    }\n\n    /**\n     * handle locus events and takes meeting actions with them as they come in\n     * @param {Object} data a locus event\n     * @param {String} data.locusUrl\n     * @param {Object} data.locus\n     * @param {String} data.eventType\n     * @returns {undefined}\n     * @private\n     * @memberof Meetings\n     */\n    handleLocusEvent(data) {\n      let meeting = null;\n\n      // getting meeting by correlationId. This will happen for the new event\n      // Either the locus\n      // TODO : Add check for the callBack Address\n      meeting = this.meetingCollection.getByKey(LOCUS_URL, data.locusUrl) ||\n      this.meetingCollection.getByKey(CORRELATION_ID, MeetingsUtil.checkForCorrelationId(this.webex.internal.device.url, data.locus)) ||\n      this.meetingCollection.getByKey(SIP_URI, data.locus.self && data.locus.self.callbackInfo && data.locus.self.callbackInfo.callbackAddress);\n\n      if (!meeting) {\n        // TODO: create meeting when we get a meeting object\n        // const checkForEnded = (locus) => {\n        // TODO: you already ended the meeting but you got an event later\n        // Mainly for 1:1 Callsor meeting\n        // Happens mainly after refresh\n\n        // 1:1 Meeting\n        // 1)  You ended a call before but you got a mercury event\n        // Make sure end the call and cleanup the meeting only if the mercury\n        // event says so\n        // 2) Maintain lastSync time in the meetings object which helps to compare\n        // If the meeting came befor or after the sync . ANy meeting start time before the sync time is invalid\n\n        // For space Meeting\n        // Check the locus object and see who has joined\n\n        // };\n        // rather then locus object change to locus url\n\n        if (data.locus && data.locus.fullState && data.locus.fullState.state === LOCUS.STATE.INACTIVE) {\n          // just ignore the event as its already ended and not active\n          LoggerProxy.logger.warn('Meetings->handleLocusEvent#Locus event received for meeting, after it was ended.');\n\n          return;\n        }\n\n\n        // When its wireless share or guest and user leaves the meeting we dont have to keep the meeting object\n        // Any future events will be neglected\n\n        if (data.locus && data.locus.self && (data.locus.self.state === _LEFT_ && data.locus.self.removed === true)) {\n          // just ignore the event as its already ended and not active\n          LoggerProxy.logger.warn('Meetings->handleLocusEvent#Locus event received for meeting, after it was ended.');\n\n          return;\n        }\n\n        this.create(data.locus, _LOCUS_ID_).then((newMeeting) => {\n          meeting = newMeeting;\n\n          if (data.eventType === LOCUSEVENT.DIFFERENCE) {\n            // its a delta object and we have a new meeting\n            meeting.locusInfo.initialSetup(data.locus, meeting);\n          }\n          else {\n            // Its a new meeting and have a fresh locus object\n            meeting.locusInfo.initialSetup(data.locus);\n          }\n        })\n          .finally(() => {\n            // There will be cases where locus event comes in gets created and deleted because its a 1:1 and meeting gets deleted\n            // because the other user left so before sending 'added' event make sure it exists in the collection\n\n            if (this.getMeetingByType(_ID_, meeting.id)) {\n            // Had to put `meeting:added here as the parsing of the locus object is done here\n              Metrics.postEvent({event: eventType.NOTIFICATION_RECEIVED, meeting, data: {trigger: trigger.MERCURY_EVENT}});\n\n              Metrics.postEvent({event: eventType.REMOTE_STARTED, meeting, data: {trigger: trigger.MERCURY_EVENT}});\n              Trigger.trigger(\n                this,\n                {\n                  file: 'meetings',\n                  function: 'handleLocusEvent'\n                },\n                EVENT_TRIGGERS.MEETING_ADDED,\n                {\n                  meeting,\n                  type: meeting.type === _MEETING_ ? _JOIN_ : _INCOMING_\n                }\n              );\n            }\n            else {\n              // Meeting got added but was not found in the collection. It might have got destroyed\n              LoggerProxy.logger.warn('Meetings->handleLocusEvent#Created and destroyed meeting object before sending an event');\n            }\n          });\n      }\n      else {\n        Metrics.postEvent({event: eventType.NOTIFICATION_RECEIVED, meeting, data: {trigger: trigger.MERCURY_EVENT}});\n        meeting.locusInfo.parse(meeting, data);\n      }\n    }\n\n    /**\n     * handles locus events through mercury that are not roap\n     * @param {Object} envelope\n     * @param {Object} envelope.data\n     * @param {String} envelope.data.eventType\n     * @returns {undefined}\n     * @private\n     * @memberof Meetings\n     */\n    handleLocusMercury(envelope) {\n      const {data} = envelope;\n      const {eventType} = data;\n\n      if (eventType && eventType !== LOCUSEVENT.MESSAGE_ROAP) {\n        this.handleLocusEvent(data);\n      }\n    }\n\n    /**\n     * registers for locus and roap mercury events\n     * @returns {undefined}\n     * @private\n     * @memberof Meetings\n     */\n    listenForEvents() {\n      this.webex.internal.mercury.on(LOCUSEVENT.LOCUS_MERCURY, (envelope) => {\n        this.handleLocusMercury(envelope);\n      });\n      this.webex.internal.mercury.on(ROAP.ROAP_MERCURY, (envelope) => {\n        MeetingsUtil.handleRoapMercury(envelope, this.meetingCollection);\n      });\n\n      this.webex.internal.mercury.on(ONLINE, () => {\n        this.syncMeetings();\n      });\n    }\n\n    /**\n     * stops listening for locus and roap mercury events\n     * @returns {undefined}\n     * @private\n     * @memberof Meetings\n     */\n    stopListeningForEvents() {\n      this.webex.internal.mercury.off(LOCUSEVENT.LOCUS_MERCURY);\n      this.webex.internal.mercury.off(ROAP.ROAP_MERCURY);\n      this.webex.internal.mercury.off(ONLINE);\n    }\n\n    /**\n     * @returns {undefined}\n     * @private\n     * @memberof Meetings\n     */\n    onReady() {\n      this.webex.once(READY, () => {\n        StaticConfig.set(this.config);\n        LoggerConfig.set(this.config.logging);\n        LoggerProxy.set(this.webex.logger);\n        Trigger.trigger(\n          this,\n          {\n            file: 'meetings',\n            function: 'onReady'\n          },\n          EVENT_TRIGGERS.MEETINGS_READY\n        );\n      });\n    }\n\n    /**\n     * Explicitly sets up the meetings plugin by registering\n     * the device, connecting to mercury, and listening for locus events.\n     *\n     * @returns {Promise}\n     * @public\n     * @memberof Meetings\n     */\n    register() {\n      if (!this.webex.canAuthorize) {\n        LoggerProxy.logger.error('meetings->register#ERROR, Unable to register, SDK cannot authorize');\n\n        return Promise.reject(new Error('SDK cannot authorize'));\n      }\n\n      if (this.registered) {\n        LoggerProxy.logger.info('meetings->register#INFO, Meetings plugin already registered');\n\n        return Promise.resolve();\n      }\n\n      return this.webex.internal.device.register()\n        .then(() => this.webex.internal.mercury.connect())\n        .then(() => {\n          this.listenForEvents();\n          Trigger.trigger(\n            this,\n            {\n              file: 'meetings',\n              function: 'register'\n            },\n            EVENT_TRIGGERS.MEETINGS_REGISTERED\n          );\n          this.registered = true;\n        })\n        .catch((error) => {\n          LoggerProxy.logger.error(`meetings->register#ERROR, Unable to register, ${error.message}`);\n\n          return Promise.reject(error);\n        });\n    }\n\n    /**\n     * Explicitly tears down the meetings plugin by deregistering\n     * the device, disconnecting from mercury, and stops listening to locus events\n     *\n     * @returns {Promise}\n     * @public\n     * @memberof Meetings\n     */\n    unregister() {\n      if (!this.registered) {\n        LoggerProxy.logger.info('meetings->unregister#INFO, Meetings plugin already unregistered');\n\n        return Promise.resolve();\n      }\n\n      this.stopListeningForEvents();\n\n      return this.webex.internal.mercury.disconnect()\n        .then(() => this.webex.internal.device.unregister())\n        .then(() => {\n          Trigger.trigger(\n            this,\n            {\n              file: 'meetings',\n              function: 'unregister'\n            },\n            EVENT_TRIGGERS.MEETINGS_UNREGISTERED\n          );\n          this.registered = false;\n        });\n    }\n\n    /**\n     * initializes the reachability instance for Meetings\n     * @returns {undefined}\n     * @public\n     * @memberof Meetings\n     */\n    setReachability() {\n      this.reachability = new Reachability({}, {parent: this.webex});\n    }\n\n    /**\n     * gets the reachability instance for Meetings\n     * @returns {Reachability}\n     * @public\n     * @memberof Meetings\n     */\n    getReachability() {\n      return this.reachability;\n    }\n\n    /**\n     * initializes and starts gathering reachability for Meetings\n     * @returns {undefined}\n     * @public\n     * @memberof Meetings\n     */\n    startReachability() {\n      if (!this.reachability) {\n        this.setReachability();\n      }\n      this.getReachability().gatherReachability();\n    }\n\n    /**\n     * gets the personal meeting room instance, for saved PMR values for this user\n     * @returns {PersonalMeetingRoom}\n     * @public\n     * @memberof Meetings\n     */\n    getPersonalMeetingRoom() {\n      return this.personalMeetingRoom;\n    }\n\n    /**\n     * @param {String} meetingId\n     * @param {Object} reason\n     * @param {String} type\n     * @returns {Undefined}\n     * @private\n     * @memberof Meetings\n     */\n    destroy(meetingId, reason) {\n      this.meetingCollection.delete(meetingId);\n      Trigger.trigger(\n        this,\n        {\n          file: 'meetings',\n          function: 'destroy'\n        },\n        EVENT_TRIGGERS.MEETING_REMOVED,\n        {\n          meetingId,\n          reason\n        }\n      );\n    }\n\n    /**\n     * Create a meeting.\n     * @param {string} destination - sipURL, spaceId, phonenumber, meeting link, or locus object}\n     * @param {string} [type] - the optional specified type, such as locusId\n     * @returns {Promise} A new Meeting.\n     * @public\n     * @memberof Meetings\n     */\n    create(destination, type = null) {\n      // TODO: type should be from a dictionary\n      // Check if there is already meeting\n      const meeting = this.meetingCollection.getByKey(SIP_URI, destination);\n\n      if (!meeting) {\n        return this.createMeeting(destination, type)\n          .then((meeting) => {\n            if (meeting && meeting.on) {\n              meeting.on(EVENTS.DESTROY_MEETING, (payload) => {\n                this.destroy(payload.meetingId, payload.reason);\n              });\n            }\n            else {\n              LoggerProxy.logger.error(`meetings->create#ERROR, meeting does not have on method, will not be destroyed, meeting cleanup impossible for meeting: ${meeting}`);\n            }\n\n            return Promise.resolve(meeting);\n          });\n      }\n\n      return Promise.resolve(meeting);\n    }\n\n    /**\n     * @param {String} destination see create()\n     * @param {String} type see create()\n     * @returns {Promise} a new meeting instance complete with meeting info and destination\n     * @private\n     * @memberof Meetings\n     */\n    async createMeeting(destination, type = null) {\n      const meeting = new Meeting(\n        {\n          userId: this.webex.internal.device.userId,\n          deviceUrl: this.webex.internal.device.url,\n          roapSeq: 0,\n          locus: type === _LOCUS_ID_ ? destination : null // pass the locus object if present\n        },\n        {\n          parent: this.webex\n        }\n      );\n\n      this.meetingCollection.set(meeting);\n\n      try {\n        const info = await this.meetingInfo.fetchMeetingInfo(MeetingsUtil.extractDestination(destination, type), type);\n\n        meeting.parseMeetingInfo(info);\n        meeting.meetingInfo = info ? info.body : null;\n      }\n      catch (err) {\n        // if there is no meeting info we assume its a 1:1 call or wireless share\n        LoggerProxy.logger.info(`Meetings->createMeeting#Info Unable to fetch meeting info for ${destination}.`);\n        LoggerProxy.logger.info('Meetings->createMeeting#Info assuming this destination is a 1:1 or wireless share');\n        LoggerProxy.logger.debug(`Meetings->createMeeting#Debug ${err} fetching /meetingInfo for creation.`);\n        // We need to save this info for future reference\n        meeting.destination = destination;\n      }\n      finally {\n        // For type LOCUS_ID we need to parse the locus object to get the information\n        // about the caller and callee\n        // Meeting Added event will be created in `handleLocusEvent`\n        if (type !== _LOCUS_ID_) {\n          if (!meeting.sipUri) {\n            meeting.setSipUri(destination);\n          }\n\n          // TODO: check if we have to move this to parser\n          const meetingAddedType = MeetingsUtil.getMeetingAddedType(type);\n\n          // We typically shouldn't need to trigger both and event and return a promise.\n          // Is this a special case? We want to make the public API usage as simple as possible.\n          Trigger.trigger(\n            this,\n            {\n              file: 'meetings',\n              function: 'createMeeting'\n            },\n            EVENT_TRIGGERS.MEETING_ADDED,\n            {\n              meeting,\n              type: meetingAddedType\n            }\n          );\n        }\n      }\n\n      return meeting;\n\n      // Create the meeting calling the necessary service endpoints.\n\n      // Internally, there are many more destinations:\n      //\n      // - locusID\n      // - meetingURL\n      // - globalMeetingID, e.g, *00*meetingID\n      // - meetingID\n      // - meetingURL\n      // - PSTN\n      // - phone number\n      //\n      // Our job is to determine the appropriate one\n      // and its corresponding service so that developers\n      // need only sipURL or spaceID to get a meeting\n      // and its ID, but have the option to use createWithType()\n      // and specify those types to get meetingInfo\n    }\n\n    /**\n     * get a specifc meeting given it's type matched to the value, i.e., locus url\n     * @param {String} type\n     * @param {Object} value\n     * @returns {Meeting}\n     * @public\n     * @memberof Meetings\n     */\n    getMeetingByType(type, value) {\n      return this.meetingCollection.getByKey(type, value);\n    }\n\n    /**\n     * Get all meetings.\n     * @param {object} options\n     * @param {object} options.startDate - get meetings after this start date\n     * @param {object} options.endDate - get meetings before this end date\n     * @returns {Object} All active and scheduled meetings.\n     * @public\n     * @memberof Meetings\n     */\n    getAllMeetings(options = {}) {\n      // Options may include other parameters to filter this collection\n      // of meetings.\n      return this.meetingCollection.getAll(options);\n    }\n\n    /**\n     * syncs all the meeting from server\n     * @returns {undefined}\n     * @public\n     * @memberof Meetings\n     */\n    syncMeetings() {\n      return this.request.getActiveMeetings().then((locusArray) => {\n        const activeLocusUrl = [];\n\n        if (locusArray.loci && locusArray.loci.length > 0) {\n          locusArray.loci.forEach((locus) => {\n            activeLocusUrl.push(locus.url);\n            this.handleLocusEvent({\n              locus,\n              locusUrl: locus.url\n            });\n          });\n        }\n        if (Object.keys(this.meetingCollection.getAll()).length > 0) {\n          // Some time the mercury event is missed after mercury reconnect\n          // if sync returns no locus then clear all the meetings\n          forEach(this.meetingCollection.getAll(), (meeting) => {\n            if (!activeLocusUrl.includes(meeting.locusUrl)) {\n              this.destroy(meeting.id, MEETING_REMOVED_REASON.NO_MEETINGS_TO_SYNC);\n            }\n          });\n        }\n      });\n    }\n\n    /**\n     * Get all scheduled meetings.\n     * @param {object} options\n     * @param {object} options.startDate - get meetings after this start date\n     * @param {object} options.endDate - get meetings before this end date\n     * @returns {Object} All scheduled meetings.\n     * @memberof Meetings\n     */\n    getScheduledMeetings() {\n      return this.meetingCollection.getAll({scheduled: true});\n    }\n\n    /**\n     * Get the logger instance for plugin-meetings\n     * @returns {Logger}\n     */\n    getLogger() {\n      return LoggerProxy.get();\n    }\n\n    /**\n     * Get the Stats Analyzer singleton\n     * @returns {StatsAnalyzer}\n     * @public\n     * @memberof Meetings\n     */\n    getAnalyzer() {\n      return StatsAnalyzer;\n    }\n\n    /**\n     * Get the Stats Calculator singleton\n     * @returns {StatsCalculator}\n     * @public\n     * @memberof Meetings\n     */\n    getCalculator() {\n      return StatsCalculator;\n    }\n}\n"]}