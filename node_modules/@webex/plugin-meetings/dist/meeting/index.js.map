{"version":3,"sources":["index.js"],"names":["Meeting","attrs","options","namespace","MEETINGS","getMediaStreams","mediaDirection","audioVideo","sharePreferences","sendAudio","sendVideo","sendShare","Media","getUserMedia","then","response","reject","MediaError","resolve","getDevices","id","uuid","v4","correlationId","userId","resource","deviceUrl","roapSeq","ROAP_SEQ_PRE","meetingInfo","members","Members","locusUrl","locus","url","parent","webex","roap","Roap","reconnectionManager","ReconnectionManager","audio","video","meetingFiniteStateMachine","MeetingStateMachine","create","stats","internalStats","convoUrl","sipUri","partner","type","owner","hostId","policy","meetingRequest","MeetingRequest","locusInfo","LocusInfo","updateMeetingObject","bind","mediaProperties","MediaProperties","inMeetingActions","InMeetingActions","isSharing","callEvents","floorGrantPending","mediaQualityMetrics","mqaProcessor","setUpLocusInfoListeners","setUpLocusInfoSelfListener","setUpLocusInfoMeetingListener","setUpLocusFullStateListener","setUpLocusUrlListener","setUpLocusHostListener","setUpLocusSelfListener","setUpLocusParticipantsListener","setUpLocusMediaSharesListener","setUpLocusInfoMeetingInfoListener","setUpLocusInfoAssignHostListener","on","EVENTS","LOCUS_INFO_CAN_ASSIGN_HOST","payload","Trigger","trigger","file","function","EVENT_TRIGGERS","MEETING_ACTIONS_UPDATE","canAssignHost","canLock","getCanLock","canUnlock","getCanUnlock","setCanAssignHost","LOCUSINFO","FULL_STATE_MEETING_STATE_CHANGE","MEETING_STATE_CHANGE","FULL_STATE_TYPE_UPDATE","locusFullStateTypeUpdate","event","trackingId","LoggerProxy","logger","error","identifiers","deviceId","locusId","split","pop","locusStartTime","fullState","lastActive","MQA_STATS","CA_TYPE","Metrics","initMediaPayload","initPayload","getAnalyzerMetricsPrePayload","internal","metrics","submitCallDiagnosticEvents","clientType","config","LOCUS_INFO_UPDATE_SELF","locusSelfUpdate","newSelf","state","MEETING_STATE","STATES","JOINED","share","LOCUS_INFO_UPDATE_HOST","locusHostUpdate","LOCUS_INFO_UPDATE_PARTICIPANTS","locusParticipantsUpdate","LOCUS_INFO_UPDATE_MEDIA_SHARES","locusMediaSharesUpdate","LOCUS_INFO_UPDATE_URL","locusUrlUpdate","MEETING_LOCKED","MEETING_UNLOCKED","MEETING_INFO_UPDATED","info","newCanLock","newCanUnlock","self","moderator","MeetingUtil","canUserLock","canUserUnlock","getCanAssignHost","setCanLock","setCanUnlock","SELF_MUTED_BY_OTHERS","MEETING_SELF_MUTED_BY_OTHERS","SELF_UNADMITTED_GUEST","MEETING_SELF_LOBBY_WAITING","postEvent","eventType","LOBBY_ENTERED","meeting","SELF_ADMITTED_GUEST","MEETING_SELF_GUEST_ADMITTED","LOBBY_EXITED","REMOTE_ANSWERED_DECLINED","remote","DESTROY_MEETING","wirelessShare","shareTrack","onended","stop","shouldLeave","leave","reason","warn","catch","cleanUp","meetingId","object","length","forEach","key","invitee","alertIfActive","addMember","memberIds","admitMembers","memberId","removeMember","mute","muteMember","transferHostToMember","mqaInterval","clearInterval","automaticMetrics","StatsMetrics","getStats","initialize","setStats","setInterval","processMQAData","mqaMetricsInterval","MQAProcessor","DATA_PLACEMENTS","sendRecvData","toLowerCase","endsWith","STATS","SENDER","getSender","RECEIVER","getReceiver","mqa","getMQA","interval","getSlice","process","MEDIA_QUALITY","data","intervalData","getData","override","createStats","log","StatsUtil","generateOptions","CONFIG","WebRTCStats","destroySenders","destroyReceivers","isMuted","isSelf","body","errors","conversationUrl","setSipUri","sipMeetingUri","setLocus","participants","getLocusPartner","_CALL_","person","sipUrl","emailAddress","email","seq","mtgLocus","mediaConnections","selfId","mediaId","host","initialSetup","pc","ontrack","streams","remoteStream","MEDIA_READY","EVENT_TYPES","REMOTE_AUDIO","stream","MediaUtil","createMediaStream","getAudioTracks","REMOTE_VIDEO","getVideoTracks","setRemoteShare","REMOTE_SHARE","remoteShare","unsetRemoteStream","stopStream","MEDIA_STOPPED","REMOTE","localStream","getTrack","audioTrack","videoTrack","settings","getSettings","setMediaSettings","echoCancellation","noiseSuppression","mediaSettings","setLocalAudioTrack","setLocalVideoTrack","aspectRatio","frameRate","height","width","LOCAL","localShare","setLocalShareTrack","contentTracks","displaySurface","cursor","screen","MEETING_REMOVED_REASON","USER_ENDED_SHARE_STREAMS","stopShare","LOCAL_SHARE","stopTracks","unsetLocalVideoTrack","unsetLocalShareTrack","reconnection","detection","mercury","ONLINE","reconnect","PeerConnectionManager","close","peerConnection","unsetPeerConnection","off","toggle","ParameterError","MUTED","USER_INTERACTION","mediaType","AUDIO","e","UNMUTED","VIDEO","joinOptions","audioVideoOptions","join","joinResponse","addMedia","mediaResponse","media","local","MEETING_RECONNECTION_STARTING","MEDIA_RECONNECTING","MEETING_RECONNECTION_SUCCESS","MEDIA_RECOVERED","MEETING_RECONNECTION_FAILURE","ReconnectionError","MEDIA_RECONNECTION_FAILED","finally","reset","CALL_INITIATED","pstnAudioType","hostPin","pinCollection","MEETING_STATE_MACHINE","ENDED","RINGING","ring","_JOIN_","resourceId","destination","joinMeetingOptions","fail","mediaCapabilities","rx","share_audio","whiteboard","tx","moveMedia","moveToResource","updateMedia","receiveVideo","receiveAudio","receiveShare","oldCorrelationId","meetings","meetingCollection","set","leaveMeeting","moveMeeting","delete","isGuestUnjoined","guest","MEDIA_CAPABILITIES","validateOptions","setMediaPeerConnection","createPeerConnection","setReconnectListener","setPeerConnectionEvents","preMedia","attachMedia","setRemoteStream","autoSendMQA","startMediaQualityMetrics","startInternalStats","err","timerCount","joiningTimer","meetingState","FULL_STATE","ACTIVE","Error","sendRoapMediaRequest","sdp","signalingState","SDP","STABLE","canUpdateMedia","previousSendShareStatus","setContentSlides","checkForStopShare","startShare","audioTransceiver","track","previousMediaDirection","sendTrack","receiveTrack","updateTransceiver","transceiver","setLocalTracks","AudioStateMachine","videoTransceiver","VideoStateMachine","previousShareStatus","shareTransceiver","setMediaDirection","_INCOMING_","acknowledgeMeeting","ALERT_DISPLAYED","message","_BUSY_","declineMeeting","decline","LEAVE","canProceed","leaveReason","CLIENT_LEAVE_REQUEST","content","mediaShares","find","element","name","CONTENT","SHARE_INITIATED","changeMeetingFloor","disposition","FLOOR_ACTION","GRANTED","personUrl","uri","resourceUrl","MEETING_STARTED_SHARING_LOCAL","LOCAL_SHARE_FLOOR_GRANTED","SHARE_STOPPED","RELEASED","MEETING_STOPPED_SHARING_LOCAL","startRecording","stopRecording","pauseRecording","resumeRecording","lockMeeting","unlockMeeting","tones","enableDTMF","sendDTMF","level","VIDEO_RESOLUTIONS","errorMessage","updateVideo","StatelessWebexPlugin"],"mappings":"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","file":"index.js","sourcesContent":["import uuid from 'uuid';\nimport {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport Trigger from '../common/events/trigger-proxy';\nimport Roap from '../roap/index';\nimport Media from '../media';\nimport MediaProperties from '../media/properties';\nimport MeetingStateMachine from '../meeting/state';\nimport AudioStateMachine from '../meeting/audio';\nimport VideoStateMachine from '../meeting/video';\nimport LocusInfo from '../locus-info';\nimport PeerConnectionManager from '../peer-connection-manager';\nimport Metrics from '../metrics';\nimport {trigger, mediaType, eventType} from '../metrics/config';\nimport ReconnectionManager from '../reconnection-manager';\nimport MeetingRequest from '../meeting/request';\nimport Members from '../members/index';\nimport MeetingUtil from '../meeting/util';\nimport MediaUtil from '../media/util';\nimport WebRTCStats from '../stats/index';\nimport StatsMetrics from '../stats/metrics';\nimport StatsUtil from '../stats/util';\nimport ReconnectionError from '../common/errors/reconnection';\nimport {\n  MEETINGS,\n  EVENT_TRIGGERS,\n  EVENT_TYPES,\n  EVENTS,\n  FLOOR_ACTION,\n  _BUSY_,\n  _INCOMING_,\n  ONLINE,\n  _CALL_,\n  CONTENT,\n  ROAP_SEQ_PRE,\n  LOCUSINFO,\n  MEETING_STATE_MACHINE,\n  _JOIN_,\n  STATS,\n  MQA_STATS,\n  MEETING_STATE,\n  FULL_STATE,\n  MEETING_REMOVED_REASON,\n  SDP,\n  VIDEO_RESOLUTIONS\n} from '../constants';\nimport ParameterError from '../common/errors/parameter';\nimport MediaError from '../common/errors/media';\nimport MQAProcessor from '../metrics/mqa-processor';\n\nimport InMeetingActions from './in-meeting-actions';\n\n\n/**\n * MediaDirection\n * @typedef {Object} MediaDirection\n * @property {boolean} sendAudio\n * @property {boolean} receiveAudio\n * @property {boolean} sendVideo\n * @property {boolean} receiveVideo\n * @property {boolean} sendShare\n * @property {boolean} receiveShare\n */\n\n/**\n  * AudioVideo\n  * @typedef {Object} AudioVideo\n  * @property {Object} audio\n  * @property {String} audio.deviceId\n  * @property {Object} video\n  * @property {String} video.deviceId\n  */\n\n/**\n   * SharePreferences\n   * @typedef {Object} SharePreferences\n   * @property {Object} [shareConstraints]\n   * @property {Boolean} [highFrameRate]\n   */\n\n/**\n * JoinOptions\n * @typedef {Object} JoinOptions\n * @property {String} [resourceId]\n * @property {String} [hostPin]\n * @property {Boolean} [moderator]\n */\n\n/**\n * SendOptions\n * @typedef {Object} SendOptions\n * @property {Boolean} sendAudio\n * @property {Boolean} sendVideo\n * @property {Boolean} sendShare\n */\n\n/**\n  * Meeting State Change Event\n  * Emitted when ever there is a meeting state change\n  * @event meeting:stateChange\n  * @instance\n  * @type {Object}\n  * @property {String} currentState current state of the meeting\n  * @property {String} previousState previous state of the meeting\n  * @memberof Meeting\n  */\n\n/**\n  * Media Ready Event\n  * Emitted when a stream is ready to be rendered\n  * @event media:ready\n  * @instance\n  * @type {Object}\n  * @property {MediaStream} stream the media stream\n  * @property {String} type what type of stream, remote, local\n  * @memberof Meeting\n  */\n\n/**\n  * Media Stopped Event\n  * Emitted when a stream has stopped sending\n  * @event media:stopped\n  * @instance\n  * @type {Object}\n  * @property {String} type what type of stream, remote, local\n  * @memberof Meeting\n  */\n\n/**\n * Meeting Ringing Event\n * Emitted when this client should play a ringing sound, because this member is getting an incoming meeting\n * or sending out an incoming meeting\n * @event meeting:ringing\n * @instance\n * @type {Object}\n * @property {String} type // INCOMING or JOIN\n * @property {String} id\n * @memberof Meeting\n */\n\n/**\n * Meeting Ringing Stop Event\n * Emitted when this client should stop playing a ringing sound\n * @event meeting:ringingStop\n * @instance\n * @type {Object}\n * @property {Object} type\n * @property {Boolean} type.remoteAnswered\n * @property {Boolean} type.remoteDeclined\n * @property {String} id\n * @memberof Meeting\n */\n\n/**\n * Meeting Started Sharing Local Event\n * Emitted when this member starts sharing\n * @event meeting:startedSharingLocal\n * @instance\n * @type {Object}\n * @memberof Meeting\n */\n\n/**\n * Meeting Stopped Sharing Local Event\n * Emitted when this member stops sharing\n * @event meeting:stoppedSharingLocal\n * @instance\n * @type {Object}\n * @memberof Meeting\n */\n\n/**\n * Meeting Locked Event\n * Emitted when a meeting is locked\n * @event meeting:locked\n * @instance\n * @type {Object}\n * @property {Object} info\n * @memberof Meeting\n */\n\n/**\n * Meeting Unlocked Event\n * Emitted when a meeting is unlocked\n * @event meeting:unlocked\n * @instance\n * @type {Object}\n * @property {Object} info\n * @memberof Meeting\n */\n\n/**\n * Meeting Actions Update Event\n * Emitted when a user can take actions on a meeting such as lock, unlock, assign host\n * @event meeting:actionsUpdate\n * @instance\n * @type {Object}\n * @property {Boolean} canLock\n * @property {Boolean} canUnlock\n * @property {Boolean} canAssignHost\n * @memberof Meeting\n */\n\n/**\n * Meeting Muted By Others Event\n * Emitted when a member is muted by another member\n * @event meeting:self:mutedByOthers\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n * Meeting Self Guest Admitted Event\n * Emitted when a member admitted to the meeting by another member\n * @event meeting:self:guestAdmitted\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n * Meeting Self Lobby Waiting Event\n * Emitted when this member enters the lobby and is waiting for the webex meeting to begin\n * @event meeting:self:lobbyWaiting\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n  * Reconnection Starting Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionStarting\n  * @instance\n  * @memberof Meeting\n  */\n\n/**\n  * Reconnection Success Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionSuccess\n  * @instance\n  * @type {Object}\n  * @property {Object} reconnect\n  * @memberof Meeting\n  */\n\n/**\n  * Reconnection Failure Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionFailure\n  * @instance\n  * @type {Object}\n  * @property {Error} error\n  * @memberof Meeting\n  */\n\n/**\n * @description Meeting is the crux of the plugin\n * @export\n * @class Meeting\n */\nexport default class Meeting extends StatelessWebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n   * @param {Object} attrs\n   * @param {Object} options\n   * @constructor\n   * @memberof Meeting\n  */\n  constructor(attrs, options) {\n    super({}, options);\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.attrs = attrs;\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.options = options;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.id = uuid.v4();\n    this.correlationId = this.id;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.userId = attrs.userId;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.resource = attrs.resource;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.deviceUrl = attrs.deviceUrl;\n    /**\n     * @description set you -1 as default values is 0 (used to idenfify if 1st roap request was sent)\n     * @instance\n     * @type {Number}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.roapSeq = ROAP_SEQ_PRE;\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    // TODO: needs to be defined as a class\n    this.meetingInfo = {};\n    /**\n     * @instance\n     * @type {Members}\n     * @public\n     * @memberof Meeting\n     */\n    this.members = new Members({locusUrl: (attrs.locus && attrs.locus.url)}, {parent: this.webex});\n    /**\n     * @instance\n     * @type {Roap}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.roap = new Roap({}, {parent: this.webex});\n    /**\n     * created later\n     * @instance\n     * @type {ReconnectionManager}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.reconnectionManager = new ReconnectionManager(this);\n    /**\n     * created later\n     * @instance\n     * @type {AudioStateMachine}\n     * @public\n     * @memberof Meeting\n     */\n    this.audio = null;\n    /**\n     * created later\n     * @instance\n     * @type {VideoStateMachine}\n     * @public\n     * @memberof Meeting\n     */\n    this.video = null;\n    /**\n     * @instance\n     * @type {MeetingStateMachine}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.meetingFiniteStateMachine = MeetingStateMachine.create(this);\n    /**\n     * @instance\n     * @type {WebRTCStats}\n     * @public\n     * @memberof Meeting\n     */\n    this.stats = null;\n    /**\n     * @instance\n     * @type {WebRTCStats}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.internalStats = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.convoUrl = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.locusUrl = (attrs.locus && attrs.locus.url) || null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.sipUri = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.partner = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.type = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.owner = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.hostId = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.policy = null;\n    /**\n     * @instance\n     * @type {MeetingRequest}\n     * @private\n     * @memberof Meeting\n     */\n    this.meetingRequest = new MeetingRequest({}, options);\n    /**\n     * Passing only info as we send basic info for meeting added event\n     * @instance\n     * @type {MeetingRequest}\n     * @private\n     * @memberof Meeting\n     */\n    this.locusInfo = new LocusInfo(this.updateMeetingObject.bind(this), attrs.locus ? attrs.locus : {}, this.webex, this.id);\n    /**\n     * Passing only info as we send basic info for meeting added event\n     * @instance\n     * @type {MediaProperties}\n     * @public\n     * @memberof Meeting\n     */\n    this.mediaProperties = new MediaProperties();\n    /**\n     * @instance\n     * @type {InMeetingActions}\n     * @public\n     * @memberof Meeting\n    */\n    this.inMeetingActions = new InMeetingActions();\n    /**\n     * @instance\n     * @type {Boolean}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.isSharing = false;\n    /**\n     * @instance\n     * @type {Array}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.callEvents = [];\n    /**\n     * There is a pending floor requested by the user\n     * @instance\n     * @type {floorGrantPending}\n     * @private\n     * @memberof Meeting\n     */\n    this.floorGrantPending = false;\n    /**\n     * @instance\n     * @type {MediaMetrics}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.mediaQualityMetrics = null;\n    /**\n     * @instance\n     * @type {MQAProcessor}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.mqaProcessor = null;\n    this.setUpLocusInfoListeners();\n  }\n\n  /**\n   * Proxy function for all the listener set ups\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoListeners() {\n    // meeting update listeners\n    this.setUpLocusInfoSelfListener();\n    this.setUpLocusInfoMeetingListener();\n    // members update listeners\n    this.setUpLocusFullStateListener();\n    this.setUpLocusUrlListener();\n    this.setUpLocusHostListener();\n    this.setUpLocusSelfListener();\n    this.setUpLocusParticipantsListener();\n    this.setUpLocusMediaSharesListener();\n    this.setUpLocusInfoMeetingInfoListener();\n    this.setUpLocusInfoAssignHostListener();\n  }\n\n  /**\n   * Set up the locus info listener for assign host permissions on a meeting\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoAssignHostListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_CAN_ASSIGN_HOST, (payload) => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setUpLocusInfoAssignHostListener'\n        },\n        EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE,\n        {\n          canAssignHost: payload.canAssignHost,\n          canLock: this.inMeetingActions.getCanLock(),\n          canUnlock: this.inMeetingActions.getCanUnlock()\n        }\n      );\n      this.inMeetingActions.setCanAssignHost(payload.canAssignHost);\n    });\n  }\n\n  /**\n   * Set up the internal locus info full state object listener\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusFullStateListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.FULL_STATE_MEETING_STATE_CHANGE, (payload) => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setUpLocusFullStateListener'\n        },\n        EVENT_TRIGGERS.MEETING_STATE_CHANGE,\n        {\n          payload\n        }\n      );\n    });\n\n    this.locusInfo.on(LOCUSINFO.EVENTS.FULL_STATE_TYPE_UPDATE, (payload) => {\n      this.members.locusFullStateTypeUpdate(payload);\n    });\n  }\n\n  /**\n   * get the metrics payload pre\n   * @param {Object} options\n   * @param {String} options.event\n   * @param {String} options.trackingId\n   * @param {Object} options.locus\n   * @returns {Object}\n   * @memberof Meeting\n   */\n  getAnalyzerMetricsPrePayload(options) {\n    if (options) {\n      const {event, trackingId, locus} = options;\n\n      if (!event) {\n        LoggerProxy.logger.error('Error [Call Analyzer Event', event || '', `]: invalid identifers or event type! ${this.correlationId}`);\n\n        return null;\n      }\n\n      const identifiers = {\n        correlationId: this.correlationId,\n        userId: this.userId,\n        deviceId: this.deviceUrl\n      };\n\n      // If locus is passed take the value from there else use meeting object\n      if (locus) {\n        identifiers.locusId = locus.url.split('/').pop();\n        identifiers.locusStartTime = locus.fullState.lastActive;\n      }\n      else if (this.locusUrl && this.locusInfo.fullState) {\n        identifiers.locusId = this.locusUrl && this.locusUrl.split('/').pop();\n        identifiers.locusStartTime = this.locusInfo.fullState && this.locusInfo.fullState.lastActive;\n      }\n\n      if (options.trackingId) {\n        identifiers.trackingId = trackingId;\n      }\n\n      let payload = {};\n\n      if (options.type === MQA_STATS.CA_TYPE) {\n        payload = Metrics.initMediaPayload(options.event, identifiers, options);\n      }\n\n      else {\n        payload = Metrics.initPayload(options.event, identifiers, options);\n      }\n\n      return payload;\n    }\n\n    return null;\n  }\n\n  /**\n   * Send the metrics to call-analyzer dashboard\n   * @param {Object} options\n   * @param {String} options.event\n   * @param {String} options.trackingId\n   * @param {Object} options.locus\n   * @returns {Promise}\n   * @private\n   * @memberof Meeting\n   */\n  sendCallAnalyzerMetrics(options) {\n    const payload = this.getAnalyzerMetricsPrePayload(options);\n\n    return this.webex.internal.metrics.submitCallDiagnosticEvents(payload);\n  }\n\n  /**\n   * Send the metrics to Media Quality Analyzer dashboard\n   * @param {Object} options\n   * @param {String} options.event\n   * @param {String} options.trackingId\n   * @param {Object} options.locus\n   * @returns {Promise}\n   * @private\n   * @memberof Meeting\n   */\n  sendMediaQualityAnalyzerMetrics(options) {\n    options.type = MQA_STATS.CA_TYPE;\n    options.clientType = this.config.metrics.clientType;\n    const payload = this.getAnalyzerMetricsPrePayload(options);\n\n    return this.webex.internal.metrics.submitCallDiagnosticEvents(payload);\n  }\n\n  /**\n   * Set up the locus info self listener\n   * update self value for members and updates the member\n   * notifies consumer with members:self:update {activeSelfId endedSelfId}\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusSelfListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_SELF, (payload) => {\n      this.members.locusSelfUpdate(payload);\n\n      // If user moved to a JOINED state and there is a pending floor grant trigger it\n      if (this.floorGrantPending && payload.newSelf.state === MEETING_STATE.STATES.JOINED) {\n        this.share()\n          .then(() => { this.floorGrantPending = false; });\n      }\n    });\n  }\n\n  /**\n   * Set up the locus info host listener\n   * update host value for members and updates the member\n   * notifies consumer with members:host:update: {activeHostId, endedHostId}\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusHostListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_HOST, (payload) => {\n      this.members.locusHostUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info participants update listener\n   * update members collection value for members\n   * notifies consumer with members:update\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusParticipantsListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_PARTICIPANTS, (payload) => {\n      this.members.locusParticipantsUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info media shares listener\n   * update content sharing id value for members, and updates the member\n   * notifies consumer with members:content:update {activeContentSharingId, endedContentSharingId}\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusMediaSharesListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_MEDIA_SHARES, (payload) => {\n      this.members.locusMediaSharesUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info url listener\n   * update locus_url value for members\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusUrlListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_URL, (payload) => {\n      this.members.locusUrlUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info meeting info listener\n   * @returns {undefined}\n   * @private\n   * @memberof meeting\n   */\n  setUpLocusInfoMeetingInfoListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEETING_LOCKED, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingInfoListener'\n          },\n          EVENT_TRIGGERS.MEETING_LOCKED,\n          {\n            payload\n          }\n        );\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEETING_UNLOCKED, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingInfoListener'\n          },\n          EVENT_TRIGGERS.MEETING_UNLOCKED,\n          {\n            payload\n          }\n        );\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEETING_INFO_UPDATED, (payload) => {\n      if (payload && payload.info) {\n        let newCanLock;\n        let newCanUnlock;\n\n        if (payload.self && !payload.self.moderator) {\n          newCanLock = false;\n          newCanUnlock = false;\n        }\n        else {\n          newCanLock = MeetingUtil.canUserLock(payload.info.moderator, payload.info.policy);\n          newCanUnlock = MeetingUtil.canUserUnlock(payload.info.moderator, payload.info.policy);\n        }\n\n        if (newCanLock && !this.inMeetingActions.canLock) {\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'setUpLocusInfoMeetingInfoListener'\n            },\n            EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE,\n            {\n              canLock: true,\n              canUnlock: false,\n              canAssignHost: this.inMeetingActions.getCanAssignHost()\n            }\n          );\n        }\n        if (newCanUnlock && !this.inMeetingActions.canUnlock || !newCanLock) {\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'setUpLocusInfoMeetingInfoListener'\n            },\n            EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE,\n            {\n              canLock: false,\n              canUnlock: true,\n              canAssignHost: this.inMeetingActions.getCanAssignHost()\n            }\n          );\n        }\n        this.inMeetingActions.setCanLock(newCanLock || false);\n        this.inMeetingActions.setCanUnlock(newCanUnlock || false);\n      }\n    });\n  }\n\n  /**\n   * Internal function to listen to the self object changes\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoSelfListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.SELF_MUTED_BY_OTHERS, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_MUTED_BY_OTHERS,\n          {\n            payload\n          }\n        );\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.SELF_UNADMITTED_GUEST, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_LOBBY_WAITING,\n          {\n            payload\n          }\n        );\n\n        Metrics.postEvent({\n          event: eventType.LOBBY_ENTERED,\n          meeting: this\n        });\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.SELF_ADMITTED_GUEST, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_GUEST_ADMITTED,\n          {\n            payload\n          }\n        );\n\n        Metrics.postEvent({\n          event: eventType.LOBBY_EXITED,\n          meeting: this\n        });\n      }\n    });\n  }\n\n  /**\n   * Add LocusInfo nested object listeners (from child to parent)\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoMeetingListener() {\n    this.locusInfo.on(EVENTS.REMOTE_ANSWERED_DECLINED, (payload) => {\n      this.meetingFiniteStateMachine.remote(payload);\n    });\n    this.locusInfo.on(EVENTS.DESTROY_MEETING, (payload) => {\n      // if self state is NOT left\n\n      // TODO: Handle sharing and wireless sharing when meeting end\n      if (this.wirelessShare) {\n        if (this.mediaProperties.shareTrack) {\n          this.mediaProperties.shareTrack.onended = null;\n          this.mediaProperties.shareTrack.stop();\n        }\n      }\n      // when multiple WEB deviceType join with same user\n      // and some of the devices are joined and some are left\n      // when your own device is still connected you want to leave and destroy\n      // else you want to just destroy\n      // this looks odd because when it leaves it should destroy, but we get a\n      // leave response and we should destroy it on the next event loop\n      // the leave response gets parsed and we decide if we want to destroy the meeting\n      // the first time we just leave it, the second time it comes it destroys it from the collection\n      if (payload.shouldLeave) {\n        // TODO:  We should do cleaning of meeting object if the shouldLeave: false because there might be meeting object which we are not cleaning\n\n        this.leave({reason: payload.reason}).then(() => {\n          LoggerProxy.logger.warn('meeting/index->setUpLocusInfoMeetingListener:DESTROY_MEETING#The meeting has been left, but has not been destroyed, you should see a later event for leave.');\n        }).catch((error) => {\n          LoggerProxy.logger.error(`meeting/index->setUpLocusInfoMeetingListener:DESTROY_MEETING#Issue with leave for meeting, meeting still in collection: ${this.meeting}, error: ${error}`);\n        });\n      }\n      else {\n        LoggerProxy.logger.info('MEETING_REMOVED_REASON', payload.reason);\n        MeetingUtil.cleanUp(this);\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingListener'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: payload.reason,\n            meetingId: this.id\n          }\n        );\n      }\n    });\n  }\n\n  /**\n   * Set meeting values rather than events\n   * @param {Object} object\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   * // TODO: is this function necessary?\n   */\n  updateMeetingObject(object) {\n    // Validate if these are valid meeting object property\n    // TODO: add a check to make sure the value passed in the constructor\n    // is not changed by any delta event\n    if (object && Object.keys(object).length) {\n      Object.keys(object).forEach((key) => {\n        this[key] = object[key];\n      });\n    }\n  }\n\n  /**\n   * Invite a guest to the call that isn't normally part of this call\n   * @param {Object} invitee\n   * @param {String} invitee.emailAddress\n   * @param {String} invitee.email\n   * @param {Boolean} [alertIfActive]\n   * @returns {Promise} see #members.addMember\n   * @public\n   * @memberof Meeting\n   */\n  invite(invitee, alertIfActive = true) {\n    return this.members.addMember(invitee, alertIfActive);\n  }\n\n  /**\n   * Admit the guest(s) to the call once they are waiting\n   * @param {Array} memberIds\n   * @returns {Promise} see #members.admitMembers\n   * @public\n   * @memberof Meeting\n   */\n  admit(memberIds) {\n    return this.members.admitMembers(memberIds);\n  }\n\n  /**\n   * Remove the member from the meeting, boot them\n   * @param {String} memberId\n   * @returns {Promise} see #members.removeMember\n   * @public\n   * @memberof Meeting\n   */\n  remove(memberId) {\n    return this.members.removeMember(memberId);\n  }\n\n  /**\n   * Mute another member from the meeting\n   * @param {String} memberId\n   * @param {Boolean} mute\n   * @returns {Promise} see #members.muteMember\n   * @public\n   * @memberof Meeting\n   */\n  mute(memberId, mute = true) {\n    return this.members.muteMember(memberId, mute);\n  }\n\n  /**\n   * Transfer the moderator role to another eligible member\n   * @param {String} memberId\n   * @param {Boolean} moderator\n   * @returns {Promise} see #members.transferHostToMember\n   * @public\n   * @memberof Meeting\n   */\n  transfer(memberId, moderator = true) {\n    return this.members.transferHostToMember(memberId, moderator);\n  }\n\n  /**\n   * Reference to the Members object\n   * @returns {Members}\n   * @public\n   * @memberof Meeting\n   */\n  getMembers() {\n    return this.members;\n  }\n\n  /**\n   * If this gets turned off mid meeting after attaching media, it will shut down the MQA metrics and they will\n   * not restart unless the start function is called again\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  cleanMQAInterval() {\n    if (this.mqaInterval) {\n      clearInterval(this.mqaInterval);\n    }\n  }\n\n  /**\n   * Automatically publishes media metrics data and on a config interval\n   * uses the existing getStats data filter, so no new streams are created\n   * but it is separate than history, so history will not be available\n   * @returns {MediaMetrics}\n   * @public\n   * @memberof Meeting\n   */\n  startMediaQualityMetrics() {\n    const automaticMetrics = new StatsMetrics({config: this.config});\n\n    const stats = this.getStats(automaticMetrics.initialize(), true);\n\n    this.mediaQualityMetrics = automaticMetrics;\n\n    this.mediaQualityMetrics.setStats(stats);\n\n    this.mqaInterval = setInterval(() => this.processMQAData(), this.config.metrics.mqaMetricsInterval);\n\n    return automaticMetrics;\n  }\n\n  /**\n   * @private\n   * @returns {undefined}\n   * @memberof Meeting\n   */\n  processMQAData() {\n    if (!this.mqaProcessor) {\n      this.mqaProcessor = new MQAProcessor();\n    }\n\n    MQA_STATS.DATA_PLACEMENTS.forEach((key) => {\n      if (this.mediaQualityMetrics && this.mediaQualityMetrics.stats) {\n        let sendRecvData;\n\n        if (key.toLowerCase().endsWith(STATS.SENDER)) {\n          sendRecvData = this.mediaQualityMetrics.stats.getSender(key);\n        }\n        else if (key.toLowerCase().endsWith(STATS.RECEIVER)) {\n          sendRecvData = this.mediaQualityMetrics.stats.getReceiver(key);\n        }\n        let mqa;\n\n        if (sendRecvData) {\n          mqa = sendRecvData.getMQA();\n        }\n        if (mqa) {\n          const interval = mqa.getSlice(this.config.metrics.mqaMetricsInterval / 1000); // milliseconds -> second based intervals\n\n          this.mqaProcessor.process(key, interval);\n        }\n      }\n    });\n    Metrics.postEvent({event: eventType.MEDIA_QUALITY, meetingId: this.id, data: {intervalData: this.mqaProcessor.getData()}});\n  }\n\n  /**\n   * Reference to the stats builder object\n   * @param {Object} options - see #createStats\n   * @param {Boolean} override - override the previous getStats\n   * @returns {WebRTCStats}\n   * @public\n   * @memberof Meeting\n   */\n  getStats(options, override) {\n    if (!this.stats) {\n      return this.createStats(options);\n    }\n    if (override) {\n      if (this.stats) {\n        LoggerProxy.logger.log('Meeting:index#getStats --> Overriding the previous stats object without destroying first can result in memory leaks.');\n      }\n\n      return this.createStats(options);\n    }\n\n    return this.stats;\n  }\n\n  /**\n   * write the stats builder object and assign to meeting property\n   * @param {Object} options\n   * @returns {WebRTCStats}\n   * @public\n   * @memberof Meeting\n   */\n  createStats(options = {}) {\n    StatsUtil.generateOptions(options, STATS.CONFIG, this);\n\n    options.config = STATS.CONFIG;\n\n    this.stats = new WebRTCStats(this.attrs, this.options, options);\n\n    return this.stats;\n  }\n\n  /**\n   * if you have started a stats instance, here's how you can stop it\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  stopStats() {\n    if (this.stats) {\n      this.stats.destroySenders();\n      this.stats.destroyReceivers();\n      this.stats = null;\n    }\n  }\n\n  /**\n   * Convenience function to tell whether a meeting is muted\n   * @returns {Boolean} if meeting audio muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isAudioMuted() {\n    return this.audio && this.audio.isMuted();\n  }\n\n  /**\n   * Convenience function to tell if the end user last changed the audio state\n   * @returns {Boolean} if audio was manipulated by the end user\n   * @public\n   * @memberof Meeting\n   */\n  isAudioSelf() {\n    return this.audio && this.audio.isSelf();\n  }\n\n  /**\n   * Convenience function to tell whether video is muted\n   * @returns {Boolean} if meeting video is muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isVideoMuted() {\n    return this.video && this.video.isMuted();\n  }\n\n  /**\n   * Convenience function to tell whether the end user changed the video state\n   * @returns {Boolean} if meeting video is muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isVideoSelf() {\n    return this.video && this.video.isSelf();\n  }\n\n  /**\n   * Sets the meeting info on the class instance\n   * @param {Object} meetingInfo\n   * @param {Object} meetingInfo.body\n   * @param {String} meetingInfo.body.conversationUrl\n   * @param {String} meetingInfo.body.locusUrl\n   * @param {String} meetingInfo.body.sipUri\n   * @param {Object} meetingInfo.body.owner\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  parseMeetingInfo(meetingInfo) {\n    // MeetingInfo will be undefined for 1:1 calls\n    if (meetingInfo && meetingInfo.body && !(meetingInfo.errors && meetingInfo.errors.length > 0)) {\n      this.convoUrl = meetingInfo.body.conversationUrl || this.convoUrl;\n      this.locusUrl = meetingInfo.body.locusUrl || this.locusUrl;\n      this.setSipUri(meetingInfo.body.sipMeetingUri || this.sipUri);\n      this.owner = meetingInfo.body.owner || this.owner;\n    }\n  }\n\n  /**\n   * Sets the first locus info on the class instance\n   * @param {Object} locus\n   * @param {String} locus.url\n   * @param {Array} locus.participants\n   * @param {Object} locus.self\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  parseLocus(locus) {\n    if (locus) {\n      this.locusUrl = locus.url;\n      // TODO: move this to parse participants module\n      this.setLocus(locus);\n\n      // check if we can extract this info from partner\n      // Parsing of locus object must be finished at this state\n      if (locus.participants && locus.self) {\n        this.partner = MeetingUtil.getLocusPartner(locus.participants, locus.self);\n      }\n\n      // For webex meeting the sipUrl gets updated in info parser\n      if (!this.sipUri && this.partner && this.type === _CALL_) {\n        this.setSipUri(this.partner.person.sipUrl || this.partner.person.emailAddress || this.partner.person.email);\n      }\n    }\n  }\n\n  /**\n   * Sets the sip uri on the class instance\n   * uses meeting info as precedence\n   * @param {String} sipUri\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setSipUri(sipUri) {\n    // This can be tel no, device id or a sip uri, user Id\n    this.sipUri = sipUri;\n  }\n\n  /**\n   * Set the roap seq on the class instance\n   * @param {Number} seq\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setRoapSeq(seq) {\n    if (seq >= 0) {\n      this.roapSeq = seq;\n    }\n  }\n\n  /**\n   * Set the locus info the class instance\n   * @param {Object} locus\n   * @param {Array} locus.mediaConnections\n   * @param {String} locus.locusUrl\n   * @param {String} locus.locusId\n   * @param {String} locus.mediaId\n   * @param {Object} locus.host\n   * @todo change name to genertic parser\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setLocus(locus) {\n    const mtgLocus = locus.locus || locus;\n\n    // LocusInfo object saves the locus object\n    // this.locus = mtgLocus;\n    this.mediaConnections = locus.mediaConnections;\n    this.locusUrl = locus.locusUrl || locus.url;\n    this.locusId = locus.locusId;\n    this.selfId = locus.selfId;\n    this.mediaId = locus.mediaId;\n    this.hostId = mtgLocus.host ? mtgLocus.host.id : this.hostId;\n    this.locusInfo.initialSetup(mtgLocus);\n  }\n\n  /**\n   * Sets the remote stream on the class instance and emits and\n   * event to developers\n   * @param {Object} pc The remote stream peer connection\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setRemoteStream(pc) {\n    if (!pc) {\n      return;\n    }\n    // eslint-disable-next-line no-param-reassign\n    pc.ontrack = (event) => {\n      // eslint-disable-next-line no-warning-comments\n      // TODO: It's possible for media to not be present\n      // so we might need to either\n      // A) wait until we have media flowing\n      // B) trigger a second event when video is flowing\n      LoggerProxy.logger.log(`Meeting:index->setRemoteStream/ontrack#Event received for peerConnection: ${event}`);\n      // const {transceiver} = event;\n      const streams = event.streams[0];\n\n      this.mediaProperties.remoteStream = streams;\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setRemoteStream:pc.ontrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.REMOTE_AUDIO,\n          stream: MediaUtil.createMediaStream([this.mediaProperties.remoteStream.getAudioTracks()[0]])\n        }\n      );\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setRemoteStream:pc.ontrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.REMOTE_VIDEO,\n          stream: MediaUtil.createMediaStream([this.mediaProperties.remoteStream.getVideoTracks()[0]])\n        }\n      );\n\n      if (this.mediaProperties.remoteStream.getVideoTracks()[1]) {\n        this.mediaProperties.setRemoteShare(MediaUtil.createMediaStream([this.mediaProperties.remoteStream.getVideoTracks()[1]]));\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setRemoteStream:pc.ontrack'\n          },\n          EVENT_TRIGGERS.MEDIA_READY,\n          {\n            type: EVENT_TYPES.REMOTE_SHARE,\n            stream: this.mediaProperties.remoteShare\n          }\n        );\n      }\n    };\n  }\n\n  /**\n   * Removes the remote stream on the class instance and triggers an event\n   * to developers\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetRemoteStream() {\n    this.mediaProperties.unsetRemoteStream();\n  }\n\n  /**\n   * Removes the remote stream on the class instance and triggers an event\n   * to developers\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  closeRemoteStream() {\n    return Media.stopStream(this.mediaProperties.remoteStream).then(() => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'closeRemoteStream'\n        },\n        EVENT_TRIGGERS.MEDIA_STOPPED,\n        {\n          type: EVENT_TYPES.REMOTE\n        }\n      );\n    });\n  }\n\n  /**\n   * Sets the sceen stream on the class instance and triggers and event to developers\n   * @param {Object} pc a peer connection instance for the screen\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setShareStream(pc) {\n    if (!pc) {\n      return;\n    }\n    // eslint-disable-next-line no-param-reassign\n    pc.ontrack = (event) => {\n      [this.mediaProperties.remoteShare] = event.streams;\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setShareStream:pc.ontrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.REMOTE_SHARE,\n          stream: this.mediaProperties.remoteShare\n        }\n      );\n    };\n  }\n\n  /**\n   * Sets the local media stream on the class and emits an event to the developer\n   * @param {Stream} localStream the local media stream\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setLocalTracks(localStream) {\n    if (localStream) {\n      const {audioTrack, videoTrack} = MeetingUtil.getTrack(localStream);\n      let settings = null;\n\n      if (audioTrack) {\n        settings = audioTrack.getSettings();\n        this.mediaProperties.setMediaSettings('audio', {\n          echoCancellation: settings.echoCancellation,\n          noiseSuppression: settings.noiseSuppression\n        });\n\n        LoggerProxy.logger.log('meeting/setLocalTracks: Audio settings.', JSON.stringify(this.mediaProperties.mediaSettings.audio));\n        this.mediaProperties.setLocalAudioTrack(audioTrack);\n      }\n\n      if (videoTrack) {\n        settings = videoTrack.getSettings();\n        this.mediaProperties.setLocalVideoTrack(videoTrack);\n        this.mediaProperties.setMediaSettings('video', {\n          aspectRatio: settings.aspectRatio,\n          frameRate: settings.frameRate,\n          height: settings.height,\n          width: settings.width\n        });\n        LoggerProxy.logger.log('meeting/setLocalTracks: Video settings.', JSON.stringify(this.mediaProperties.mediaSettings.video));\n      }\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setLocalTracks'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.LOCAL,\n          stream: MediaUtil.createMediaStream([this.mediaProperties.audioTrack, this.mediaProperties.videoTrack])\n        }\n      );\n    }\n  }\n\n  /**\n   * Sets the local media stream on the class and emits an event to the developer\n   * @param {Stream} localShare the local media stream\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setLocalShareTrack(localShare) {\n    let settings = null;\n\n    if (localShare) {\n      this.mediaProperties.setLocalShareTrack(MeetingUtil.getTrack(localShare).videoTrack);\n      const contentTracks = this.mediaProperties.shareTrack;\n\n      if (contentTracks) {\n        settings = contentTracks.getSettings();\n        this.mediaProperties.setMediaSettings('screen', {\n          aspectRatio: settings.aspectRatio,\n          frameRate: settings.frameRate,\n          height: settings.height,\n          width: settings.width,\n          displaySurface: settings.displaySurface,\n          cursor: settings.cursor\n        });\n        LoggerProxy.logger.log('meeting/setLocalTracks: Screen settings.', JSON.stringify(this.mediaProperties.mediaSettings.screen));\n      }\n\n      contentTracks.onended = () => {\n        if (this.wirelessShare) {\n          this.leave({reason: MEETING_REMOVED_REASON.USER_ENDED_SHARE_STREAMS});\n        }\n        else {\n          this.stopShare();\n        }\n      };\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setLocalShareTrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.LOCAL_SHARE,\n          stream: localShare\n        }\n      );\n    }\n  }\n\n  /**\n   * Closes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @event media:stopped\n   * @public\n   * @memberof Meeting\n   */\n  closeLocalStream() {\n    return Media.stopTracks(this.mediaProperties.audioTrack)\n      .then(() => Media.stopTracks(this.mediaProperties.videoTrack))\n      .then(() => {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'closeLocalStream'\n          },\n          EVENT_TRIGGERS.MEDIA_STOPPED, {\n            type: EVENT_TYPES.LOCAL\n          }\n        );\n      });\n  }\n\n  /**\n   * Closes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @event media:stopped\n   * @public\n   * @memberof Meeting\n   */\n  closeLocalShare() {\n    return Media.stopTracks(this.mediaProperties.shareTrack).then(() => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'closeLocalShare'\n        },\n        EVENT_TRIGGERS.MEDIA_STOPPED, {\n          type: EVENT_TYPES.LOCAL_SHARE\n        }\n      );\n    });\n  }\n\n  /**\n   * Removes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetLocalVideoTrack() {\n    this.mediaProperties.unsetLocalVideoTrack();\n  }\n\n  /**\n   * Removes the local share from the class and emits an event to the developer\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetLocalShareTrack() {\n    this.mediaProperties.unsetLocalShareTrack();\n  }\n\n  /**\n   * sets up reconnection logic\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   * @todo remove\n   * // TODO: remove??\n   */\n  setReconnectListener() {\n    // TODO: need to test more with the triggers for reconnect, we also need to add triggers based on getStats reports\n    if (this.config.reconnection.detection) {\n      // Client will have a socket manager and handle reconnecting to mercury, when we reconnect to mercury\n      // if the meeting has active peer connections, it should try to reconnect.\n      this.webex.internal.mercury.on(ONLINE, () => {\n        this.reconnect();\n      });\n    }\n  }\n\n  /**\n   * Close the peer connections and remove them from the class. Triggers an event\n   * when each is closed.\n   * @returns {Promise} returns a resolved promise with an array of closed peer connections\n   * @public\n   * @memberof Meeting\n   */\n  closePeerConnections() {\n    return PeerConnectionManager.close(this.mediaProperties.peerConnection);\n  }\n\n  /**\n   * Unsets the peer connections on the class\n   * warning DO NOT CALL WITHOUT CLOSING PEER CONNECTIONS FIRST\n   * @param {PeerConnection} peerConnection\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetPeerConnections() {\n    this.mediaProperties.unsetPeerConnection();\n    if (this.config.reconnection.detection) {\n      this.webex.internal.mercury.off(ONLINE);\n    }\n  }\n\n  /**\n   * Convenience method to set the correlation id for the Meeting\n   * @param {String} id correlation id to set on the class\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setCorrelationId(id) {\n    this.correlationId = id;\n  }\n\n  /**\n   * Mute the audio for a meeting\n   * @returns {Promise} resolves the data from muting audio {mute, self} or rejects if there is no audio set\n   * @public\n   * @memberof Meeting\n   */\n  muteAudio() {\n    if (!this.audio || (this.audio && !this.audio.toggle)) {\n      return Promise.reject(new ParameterError('no audio control associated to the meeting'));\n    }\n\n    return this.audio.toggle({\n      mute: true,\n      self: true\n    })\n      .then(() => {\n        LoggerProxy.logger.info('meeting/index->muteAudio#Audio mute successful.');\n        Metrics.postEvent({\n          event: eventType.MUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.AUDIO}\n        });\n\n        return Promise.resolve();\n      })\n      .catch((e) => {\n        LoggerProxy.logger.error(`meeting/index->muteAudio#Audio mute error ${e}`);\n      });\n  }\n\n  /**\n   * Unmute meeting audio\n   * @returns {Promise} resolves data from muting audio {mute, self} or rejects if there is no audio set\n   * @public\n   * @memberof Meeting\n   */\n  unmuteAudio() {\n    if (!this.audio || (this.audio && !this.audio.toggle)) {\n      return Promise.reject(new ParameterError('no audio control associated to the meeting'));\n    }\n\n    return this.audio.toggle({\n      mute: false,\n      self: true\n    })\n      .then(() => {\n        Metrics.postEvent({\n          event: eventType.UNMUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.AUDIO}\n        });\n      });\n  }\n\n  /**\n   * Mute the video for a meeting\n   * @returns {Promise} resolves data from muting video {mute, self} or rejects if there is no video set\n   * @public\n   * @memberof Meeting\n   */\n  muteVideo() {\n    if (!this.video || (this.video && !this.video.toggle)) {\n      return Promise.reject(new ParameterError('no video control associated to the meeting'));\n    }\n\n    return this.video.toggle({\n      mute: true,\n      self: true\n    })\n      .then(() => {\n        Metrics.postEvent({\n          event: eventType.MUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.VIDEO}\n        });\n      });\n  }\n\n  /**\n   * Unmute meeting video\n   * @returns {Promise} resolves data from muting video {mute, self} or rejects if there is no video set\n   * @public\n   * @memberof Meeting\n   */\n  unmuteVideo() {\n    if (!this.video || (this.video && !this.video.toggle)) {\n      return Promise.reject(new ParameterError('no audio control associated to the meeting'));\n    }\n    const options = {};\n\n    options.mute = false;\n    options.self = true;\n\n    return this.video.toggle({\n      mute: false,\n      self: true\n    })\n      .then(() => {\n        Metrics.postEvent({\n          event: eventType.UNMUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.VIDEO}\n        });\n      });\n  }\n\n  /**\n   * Shorthand function to join AND set up media\n   * @param {Object} options - options to join with media\n   * @param {JoinOptions} [options.joinOptions] - see #join()\n   * @param {MediaDirection} options.mediaSettings - see #addMedia()\n   * @param {AudioVideo} [options.audioVideoOptions] - see #getMediaStreams()\n   * @returns {Promise} -- {join: see join(), media: see addMedia(), local: see getMediaStreams()}\n   * @public\n   * @memberof Meeting\n   * @example\n   * joinWithMedia({\n   *  joinOptions: {resourceId: 'resourceId' },\n   *  mediaSettings: {\n   *   sendAudio: true,\n   *   sendVideo: true,\n   *   sendShare: false,\n   *   receiveVideo:true,\n   *   receiveAudio: true,\n   *   receiveShare: true\n   * }\n   * audioVideoOptions: {\n   *   audio: 'audioDeviceId',\n   *   video: 'videoDeviceId'\n   * }})\n   */\n  joinWithMedia(options = {}) {\n    // TODO: add validations for parameters\n    const {mediaSettings, joinOptions, audioVideoOptions} = options;\n\n    return this.join(joinOptions)\n      .then((joinResponse) =>\n        this.getMediaStreams(mediaSettings, audioVideoOptions).then(([localStream, localShare]) =>\n          this.addMedia({\n            mediaSettings,\n            localShare,\n            localStream\n          }).then((mediaResponse) => ({\n            join: joinResponse,\n            media: mediaResponse,\n            local: [localStream, localShare]\n          }))))\n      .catch((error) => Promise.reject(error));\n  }\n\n  /**\n   * Initiates the reconnection of the media in the meeting\n   * @returns {Promise} resolves with {reconnect} or errors with {error}\n   * @public\n   * @memberof Meeting\n   */\n  reconnect() {\n    if (!this.reconnectionManager || !this.reconnectionManager.reconnect) {\n      throw new ParameterError('Cannot reconnect, ReconnectionManager must first be defined.');\n    }\n    Trigger.trigger(\n      this,\n      {\n        file: 'meeting/index',\n        function: 'reconnect'\n      },\n      EVENT_TRIGGERS.MEETING_RECONNECTION_STARTING\n    );\n    Metrics.postEvent({event: eventType.MEDIA_RECONNECTING, meeting: this});\n\n    return this.reconnectionManager\n      .reconnect(this)\n      .then((reconnect) => {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'reconnect'\n          },\n          EVENT_TRIGGERS.MEETING_RECONNECTION_SUCCESS,\n          {\n            reconnect\n          }\n        );\n        Metrics.postEvent({\n          event: eventType.MEDIA_RECOVERED,\n          meeting: this\n        });\n\n        return Promise.resolve(reconnect);\n      })\n      .catch((error) => {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'reconnect'\n          },\n          EVENT_TRIGGERS.MEETING_RECONNECTION_FAILURE,\n          {\n            error: new ReconnectionError('Reconnection failure event', error)\n          }\n        );\n        Metrics.postEvent({\n          event: eventType.MEDIA_RECONNECTION_FAILED,\n          meeting: this\n        });\n\n        return Promise.reject(new ReconnectionError('Reconnection failure event', error));\n      })\n      .finally((reconnect) => {\n        this.reconnectionManager.reset();\n\n        return Promise.resolve(reconnect);\n      });\n  }\n\n  /**\n   * Specify joining via audio (option: pstn), video, screenshare\n   * @param {JoinOptions} options A configurable options object for joining a meeting\n   * @returns {Promise} the join response\n   * @public\n   * @memberof Meeting\n   * Scenario A: Joining own claimed personal meeting room, don't pass hostPin, do pass moderator\n   * Scenario B: Joining other's claimed personal meeting room, do pass hostPin (if desired to join as host, or nullify), do pass moderator\n   * Scenario C: Joining an unclaimed personal meeting room, -do not- pass hostPin or moderator on first try, -do- pass hostPin and moderator\n   *             if joining as host on second loop, -do not- pass hostPin do pass moderator if joining as guest on second loop\n   * Scenario D: Joining any other way (sip, pstn, convoUrl, link just need to specify resourceId)\n   */\n  join(options = {}) {\n    // If Move or PSTN try merging into one\n    if (false) {\n      Metrics.postEvent({\n        event: eventType.CALL_INITIATED,\n        meeting: this,\n        data: {pstnAudioType: 'DIAL_IN'}\n      });\n    }\n    else {\n      Metrics.postEvent({\n        event: eventType.CALL_INITIATED,\n        meeting: this,\n        data: {trigger: trigger.USER_INTERACTION}\n      });\n    }\n\n    // Should PIN collection be followed by pin propt ???\n    if (options.hostPin) {\n      Metrics.pinCollection({meeting: this});\n    }\n\n    if (this.meetingFiniteStateMachine.state === MEETING_STATE_MACHINE.STATES.ENDED) {\n      this.meetingFiniteStateMachine.reset();\n    }\n    if (this.meetingFiniteStateMachine.state !== MEETING_STATE_MACHINE.STATES.RINGING) {\n      this.meetingFiniteStateMachine.ring(_JOIN_);\n    }\n\n    // TODO: does this really need to be here?\n    if (options.resourceId && this.destination && options.resourceId === this.destination) {\n      this.wirelessShare = true;\n    }\n\n    return MeetingUtil.joinMeetingOptions(this, options).then((join) => {\n      this.meetingFiniteStateMachine.join();\n\n      return Promise.resolve(join);\n    }).catch((error) => {\n      this.meetingFiniteStateMachine.fail(error);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Moves the call to the specified resourceId\n   * @param {String} resourceId\n   * @returns {Promise} once the move has been completed\n   * @public\n   * @memberof Meeting\n   */\n  moveTo(resourceId) {\n    if (!resourceId) {\n      throw new ParameterError('Cannot move call without a resourceId.');\n    }\n\n    Metrics.mediaCapabilities({\n      meeting: this,\n      data: {\n        mediaCapabilities: {\n          rx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          },\n          tx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          }\n        }\n      }\n    });\n    Metrics.moveMedia({meeting: this});\n\n    return MeetingUtil.joinMeetingOptions(this, {resourceId, moveToResource: true}).then(() => {\n      this.meetingFiniteStateMachine.join();\n\n      return this.updateMedia({\n        mediaSettings: {\n          sendVideo: false, receiveVideo: false, sendAudio: false, receiveAudio: false, sendShare: false, receiveShare: false\n        }\n      }).then(() => Promise.resolve(this));\n    }).catch((error) => {\n      this.meetingFiniteStateMachine.fail(error);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Moves the call from the specified resourceId, back to computer\n   * @param {String} resourceId\n   * @returns {Promise} once the move has been completed\n   * @public\n   * @memberof Meeting\n   */\n  moveFrom(resourceId) {\n    if (!resourceId) {\n      throw new ParameterError('Cannot move call without a resourceId.');\n    }\n    const oldCorrelationId = this.correlationId;\n\n    this.id = uuid.v4();\n\n    this.webex.meetings.meetingCollection.set(this);\n\n    Metrics.mediaCapabilities({\n      meeting: this,\n      data: {\n        mediaCapabilities: {\n          rx: {\n            audio: true,\n            share: true,\n            share_audio: true,\n            video: true,\n            whiteboard: true\n          },\n          tx: {\n            audio: true,\n            share: true,\n            share_audio: true,\n            video: true,\n            whiteboard: true\n          }\n        }\n      }\n    });\n    Metrics.moveMedia({meeting: this});\n\n    return MeetingUtil.joinMeetingOptions(this).then((join) => this.getMediaStreams({sendAudio: true, sendVideo: true, sendShare: false})\n      .then(([localStream, localShare]) =>\n        this.updateMedia({\n          mediaSettings: {\n            sendAudio: true, receiveAudio: true, sendVideo: true, receiveVideo: true, sendShare: false, receiveShare: false\n          },\n          localStream,\n          localShare\n        })\n          .then(() => Promise.resolve(join)))\n      .then(() => MeetingUtil.leaveMeeting(this, {resourceId, correlationId: oldCorrelationId, moveMeeting: true})))\n      .then(() => {\n        this.webex.meetings.meetingCollection.delete(oldCorrelationId);\n\n        return Promise.resolve();\n      });\n  }\n\n  /**\n   * Get local media streams based on options passed\n   * @param {MediaDirection} mediaDirection A configurable options object for joining a meeting\n   * @param {AudioVideo} [audioVideo] audio/video object to set audioinput and videoinput devices, see #Media.getUserMedia\n   * @param {SharePreferences} [sharePreferences] audio/video object to set audioinput and videoinput devices, see #Media.getUserMedia\n   * @returns {Promise} see #Media.getUserMedia\n   * @public\n   * @todo should be static, or moved so can be called outside of a meeting\n   * @memberof Meeting\n   */\n  getMediaStreams = (mediaDirection, audioVideo = {}, sharePreferences) => {\n    if (mediaDirection && (mediaDirection.sendAudio || mediaDirection.sendVideo || mediaDirection.sendShare)) {\n      return Media.getUserMedia(mediaDirection, audioVideo, sharePreferences)\n        .then((response) => {\n          if (!response[0] && !response[1]) {\n            return Promise.reject(new MediaError('Was not able to retrive media Stream'));\n          }\n\n          return Promise.resolve(response);\n        });\n    }\n\n    return Promise.reject(new MediaError('Atleaset one of the mediaDirection value should be true'));\n  }\n\n  /**\n   * Get the devices from the Media module\n   * @returns {Promise} resolves to an array of DeviceInfo\n   * @memberof Meetings\n   */\n  getDevices = () => Media.getDevices();\n\n  /**\n   * Specify joining via audio (option: pstn), video, screenshare\n   * @param {Object} options A configurable options object for joining a meeting\n   * @param {Object} options.resourceId pass the deviceId\n   * @param {MediaDirection} options.mediaSettings pass media options\n   * @param {MediaStream} options.localStream\n   * @param {MediaStream} options.localShare\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  addMedia(options = {}) {\n    if (MeetingUtil.isGuestUnjoined(this.locusInfo) && !this.wirelessShare) {\n      return Promise.reject(new MediaError(`To add media, the ${this.guest ? 'guest' : ''} user must be ${this.guest ? 'admitted. Wait to be admitted' : 'joined to the meeting'} to call addMedia`));\n    }\n    const {localStream, localShare, mediaSettings} = options;\n\n    Metrics.postEvent({\n      event: eventType.MEDIA_CAPABILITIES,\n      meeting: this,\n      data: {\n        mediaCapabilities: {\n          rx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          },\n          tx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          }\n        }\n      }\n    });\n\n    return MeetingUtil.validateOptions(options)\n      .then(() => {\n        if (!this.mediaProperties.peerConnection) {\n          this.mediaProperties.setMediaPeerConnection(MediaUtil.createPeerConnection());\n        }\n        this.setReconnectListener();\n        MeetingUtil.setPeerConnectionEvents(this);\n\n        return this.preMedia(localStream, localShare, mediaSettings);\n      })\n      .then(() => Media.attachMedia(this.mediaProperties, this.id)\n        .then((peerConnection) => {\n          LoggerProxy.logger.log(`Meeting:index->addMedia#PeerConnection Received from attachMedia ${peerConnection}`);\n          this.setRemoteStream(peerConnection);\n          if (this.config.metrics.autoSendMQA) {\n            this.startMediaQualityMetrics();\n          }\n          MeetingUtil.startInternalStats(this);\n        })\n        .catch((err) => {\n          this.logger.error('Meeting:index#join --> Error joining the call on roap initialization, ', err);\n          throw err;\n        })\n        .then(() => new Promise((resolve, reject) => {\n          let timerCount = 0;\n\n          // eslint-disable-next-line func-names\n          // eslint-disable-next-line prefer-arrow-callback\n          if (this.type === _CALL_) {\n            resolve();\n          }\n          const joiningTimer = setInterval(() => {\n            timerCount += 1;\n            if (this.meetingState === FULL_STATE.ACTIVE) {\n              clearInterval(joiningTimer);\n              resolve();\n            }\n\n            if (timerCount === 4) {\n              clearInterval(joiningTimer);\n              reject(new Error('Meeting is still not active '));\n            }\n          }, 1000);\n        }))\n        .then(() => this.roap\n          .sendRoapMediaRequest({\n            sdp: this.mediaProperties.peerConnection.sdp,\n            roapSeq: this.roapSeq,\n            meeting: this // or can pass meeting ID\n          })\n          .catch((err) => {\n            this.logger.error('Meeting:index#join --> Error joining the call on send roap media request, ', err);\n            throw err;\n          }))\n\n        .then(() => {\n          if (mediaSettings && mediaSettings.sendShare && localShare) {\n            if (this.state === MEETING_STATE.STATES.JOINED) {\n              return this.share();\n            }\n\n            // When the self state changes to JOINED then request the floor\n            this.floorGrantPending = true;\n          }\n\n          return Promise.resolve();\n        }));\n  }\n\n  /**\n   * Informs if the peer connection is in a state that can be updated with updateMedia (audio/video/share)\n   * @returns {Boolean}\n   */\n  canUpdateMedia() {\n    return this.mediaProperties.peerConnection.signalingState === SDP.STABLE;\n  }\n\n  /**\n   * A confluence of updateAudio, updateVideo, and updateShare\n   * this function re-establishes all of the media streams with new options\n   * @param {Object} options\n   * @param {MediaStream} options.localStream\n   * @param {MediaStream} options.localShare\n   * @param {MediaDirection} options.mediaSettings\n   * @returns {Promise}\n   * @todo fix setRemoteStream for updateMedia\n   * @public\n   * @memberof Meeting\n   */\n  updateMedia(options = {}) {\n    if (!this.canUpdateMedia()) {\n      return Promise.reject(new MediaError('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n    }\n    const {localStream, localShare, mediaSettings} = options;\n\n    const previousSendShareStatus = this.mediaProperties.mediaDirection.sendShare;\n\n    return MeetingUtil.validateOptions(options)\n      .then(() => this.preMedia(localStream, localShare, mediaSettings))\n      .then(() => Media.updateMedia(this.mediaProperties, this.id)\n        .then((peerConnection) => {\n          LoggerProxy.logger.log(`Meeting:index->updateMedia#PeerConnection received from updateMedia, ${peerConnection}`);\n          this.setRemoteStream(peerConnection);\n          if (mediaSettings.receiveShare || localShare) {\n            PeerConnectionManager.setContentSlides(peerConnection);\n          }\n        })\n        .catch((err) => {\n          LoggerProxy.logger.error('Meeting:index#updateMedia --> Error updatedMedia, ', err);\n          throw err;\n        })\n        .then(() =>\n          this.roap\n            .sendRoapMediaRequest({\n              sdp: this.mediaProperties.peerConnection.sdp,\n              roapSeq: this.roapSeq,\n              meeting: this // or can pass meeting ID\n            })\n            .catch((err) => {\n              LoggerProxy.logger.error('Meeting:index#updateMedia --> Error updateMedia on send roap media request, ', err);\n              throw err;\n            }))\n        .then(() => this.checkForStopShare(mediaSettings.sendShare, previousSendShareStatus))\n        .then((startShare) => {\n          // This is a special case if we do an /floor grant followed by /media\n          // we actually get a OFFER from the server and a GLAR condition happens\n          if (startShare) {\n            // We are assuming that the clients are connected when doing an update\n            return this.share();\n          }\n\n          return Promise.resolve();\n        }));\n  }\n\n  /**\n   * Update the main audio streams with new parameters\n   * @param {Object} options\n   * @param {boolean} options.sendAudio\n   * @param {boolean} options.receiveAudio\n   * @param {MediaStream} [stream]\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  updateAudio(options) {\n    if (!this.canUpdateMedia()) {\n      return Promise.reject(new MediaError('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n    }\n    const {sendAudio, receiveAudio, stream} = options;\n    const {audioTransceiver} = this.mediaProperties.peerConnection;\n    const track = MeetingUtil.getTrack(stream).audioTrack;\n\n    if (typeof sendAudio !== 'boolean' || typeof receiveAudio !== 'boolean') {\n      return Promise.reject(new ParameterError('Pass sendVideo and receiveVideo parameter'));\n    }\n\n    return MeetingUtil.validateOptions({sendAudio, localStream: stream})\n      .then(() => {\n        let previousMediaDirection = {};\n\n        if (this.mediaProperties.mediaDirection) {\n          previousMediaDirection = {\n            sendTrack: this.mediaProperties.mediaDirection.sendAudio,\n            receiveTrack: this.mediaProperties.mediaDirection.receiveAudio\n          };\n        }\n        else {\n          this.mediaProperties.mediaDirection = {};\n        }\n\n        return MeetingUtil.updateTransceiver(\n          {\n            type: 'audio',\n            sendTrack: options.sendAudio,\n            receiveTrack: options.receiveAudio,\n            track,\n            transceiver: audioTransceiver,\n            peerConnection: this.mediaProperties.peerConnection,\n            previousMediaDirection\n          },\n          {\n            mediaProperties: this.mediaProperties,\n            roapSeq: this.roapSeq,\n            meeting: this,\n            id: this.id\n          }\n        );\n      })\n      .then(() => {\n        this.setLocalTracks(stream);\n        this.mediaProperties.mediaDirection.sendAudio = sendAudio;\n        this.mediaProperties.mediaDirection.receiveAudio = receiveAudio;\n\n        // audio state could be undefined if you have not sent audio before\n        this.audio = this.audio || AudioStateMachine.create(this.mediaProperties.mediaDirection, this);\n      });\n  }\n\n  /**\n   * Update the main video streams with new parameters\n   * @param {Object} options\n   * @param {boolean} options.sendVideo\n   * @param {boolean} options.receiveVideo\n   * @param {MediaStream} options.stream\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  updateVideo(options) {\n    if (!this.canUpdateMedia()) {\n      return Promise.reject(new MediaError('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n    }\n    const {sendVideo, receiveVideo, stream} = options;\n    const {videoTransceiver} = this.mediaProperties.peerConnection;\n    const track = MeetingUtil.getTrack(stream).videoTrack;\n\n    if (typeof sendVideo !== 'boolean' || typeof receiveVideo !== 'boolean') {\n      return Promise.reject(new ParameterError('Pass sendVideo and receiveVideo parameter'));\n    }\n\n    return MeetingUtil.validateOptions({sendVideo, localStream: stream})\n      .then(() => MeetingUtil.updateTransceiver({\n        type: 'video',\n        sendTrack: options.sendVideo,\n        receiveTrack: options.receiveVideo,\n        track,\n        transceiver: videoTransceiver,\n        peerConnection: this.mediaProperties.peerConnection,\n        previousMediaDirection: {\n          sendTrack: this.mediaProperties.mediaDirection.sendVideo,\n          receiveTrack: this.mediaProperties.mediaDirection.receiveVideo\n        }\n      },\n      {\n        mediaProperties: this.mediaProperties,\n        roapSeq: this.roapSeq,\n        meeting: this,\n        id: this.id\n      }))\n      .then(() => {\n        this.setLocalTracks(stream);\n        this.mediaProperties.mediaDirection.sendVideo = sendVideo;\n        this.mediaProperties.mediaDirection.receiveVideo = receiveVideo;\n\n        // video state could be undefined if you have not sent video before\n        this.video = this.video || VideoStateMachine.create(this.mediaProperties.mediaDirection, this);\n      });\n  }\n\n  /**\n   * Internal function when stopping a share stream, cleanup\n   * @param {boolean} sendShare\n   * @param {boolean} previousShareStatus\n   * @returns {Promise}\n   * @private\n   * @memberof Meeting\n   */\n  checkForStopShare(sendShare, previousShareStatus) {\n    if (!this.isSharing && sendShare &&\n      !previousShareStatus) {\n      // When user starts sharing\n      // return this.share();\n      return Promise.resolve(true);\n    }\n    if (this.isSharing && !sendShare &&\n      previousShareStatus) {\n      // When user stops sharing\n      return this.stopShare()\n        .then(() => Promise.resolve(false));\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Update the share streams, can be used to start sharing\n   * @param {Object} options\n   * @param {boolean} options.sendShare\n   * @param {boolean} options.receiveShare\n   * @param {MediaStream} [stream]\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  updateShare(options) {\n    if (!this.canUpdateMedia()) {\n      return Promise.reject(new MediaError('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n    }\n    const {sendShare, receiveShare, stream} = options;\n    const {shareTransceiver} = this.mediaProperties.peerConnection;\n    const track = MeetingUtil.getTrack(stream).videoTrack;\n\n    if (typeof sendShare !== 'boolean' || typeof receiveShare !== 'boolean') {\n      return Promise.reject(new ParameterError('Pass sendShare and receiveShare parameter'));\n    }\n    const previousSendShareStatus = this.mediaProperties.mediaDirection.sendShare;\n\n    return MeetingUtil.validateOptions({sendShare, localShare: stream})\n      .then(() => this.checkForStopShare(sendShare, previousSendShareStatus))\n      .then((startShare) => MeetingUtil.updateTransceiver({\n        type: 'video',\n        sendTrack: sendShare,\n        receiveTrack: receiveShare,\n        track,\n        transceiver: shareTransceiver,\n        peerConnection: this.mediaProperties.peerConnection,\n        previousMediaDirection: {\n          sendTrack: this.mediaProperties.mediaDirection.sendShare,\n          receiveTrack: this.mediaProperties.mediaDirection.receiveShare\n        }\n      },\n      {\n        mediaProperties: this.mediaProperties,\n        roapSeq: this.roapSeq,\n        meeting: this,\n        id: this.id\n      })\n        .then(() => {\n          if (startShare) {\n            return this.share();\n          }\n\n          return Promise.resolve();\n        }))\n      .then(() => {\n        this.setLocalShareTrack(stream);\n        this.mediaProperties.mediaDirection.sendShare = sendShare;\n        this.mediaProperties.mediaDirection.receiveShare = receiveShare;\n      });\n  }\n\n  /**\n   * Do all the attach media pre set up before executing the actual attach\n   * @param {MediaStream} localStream\n   * @param {MediaStream} localShare\n   * @param {MediaDirection} mediaSettings\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  preMedia(localStream, localShare, mediaSettings) {\n    // eslint-disable-next-line no-warning-comments\n    // TODO wire into default config. There's currently an issue with the stateless plugin or how we register\n    this.mediaProperties.setMediaDirection(Object.assign(this.config.mediaSettings, mediaSettings));\n    // add a setup a function move the create and setup media in future\n    // TODO: delete old audio and video if stale\n    this.audio = this.audio || AudioStateMachine.create(this.mediaProperties.mediaDirection, this);\n    this.video = this.video || VideoStateMachine.create(this.mediaProperties.mediaDirection, this);\n    // Validation is already done in addMedia so no need to check if the lenght is greater then 0\n    this.setLocalTracks(localStream);\n    this.setLocalShareTrack(localShare);\n  }\n\n  /**\n   * Acknowledge the meeting, outgoing or incoming\n   * @param {String} type\n   * @returns {Promise} resolve {message, ringing, response}\n   * @public\n   * @memberof Meeting\n   */\n  acknowledge(type) {\n    if (!type) {\n      return Promise.reject(new ParameterError('Type must be set to acknowledge the meeting.'));\n    }\n    if (type === _INCOMING_) {\n      return this.meetingRequest\n        .acknowledgeMeeting({\n          locusUrl: this.locusUrl,\n          deviceUrl: this.deviceUrl,\n          id: this.id\n        })\n        .then((response) => Promise.resolve(response))\n        .then((response) => {\n          this.meetingFiniteStateMachine.ring(type);\n          Metrics.postEvent({event: eventType.ALERT_DISPLAYED, meeting: this});\n\n          return Promise.resolve({\n            response\n          });\n        });\n    }\n\n    // TODO: outside of 1:1 incoming, and all outgoing calls\n    return Promise.resolve({\n      message: 'noop'\n    });\n  }\n\n  /**\n   * Decline this meeting\n   * @param {String} reason\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  decline(reason = _BUSY_) {\n    return MeetingUtil.declineMeeting(this, reason).then((decline) => {\n      this.meetingFiniteStateMachine.decline();\n\n      return Promise.resolve(decline);\n    }).catch((error) => {\n      this.meetingFiniteStateMachine.fail(error);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Leave the current meeting\n   * @param {Object} options leave options\n   * @param {String} options.resourceId the device with which to leave from, empty if just the computer\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  leave(options = {}) {\n    Metrics.postEvent({event: eventType.LEAVE, meeting: this, data: {trigger: trigger.USER_INTERACTION, canProceed: false}});\n    const leaveReason = options.reason || MEETING_REMOVED_REASON.CLIENT_LEAVE_REQUEST;\n\n    return MeetingUtil.leaveMeeting(this, options)\n      .then((leave) => {\n        this.meetingFiniteStateMachine.leave();\n        // TODO: more testing before we remove this code, we are not sure the scenarios for destroy here\n        if (this.wirelessShare || this.guest) {\n          // If screen sharing clean the meeting object\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'leave'\n            },\n            EVENTS.DESTROY_MEETING,\n            {\n              reason: options.reason,\n              meetingId: this.id\n            }\n          );\n        }\n        LoggerProxy.logger.log('LEAVE REASON ', leaveReason);\n\n        return Promise.resolve(leave);\n      }).catch((error) => {\n        this.meetingFiniteStateMachine.fail(error);\n\n        return Promise.reject(error);\n      });\n  }\n\n  /**\n   * Start sharing content with server\n   * @returns {Promise} see #meetingRequest.changeMeetingFloor\n   * @private\n   * @memberof Meeting\n   */\n  share() {\n    const content = this.locusInfo.mediaShares.find((element) => element.name === CONTENT);\n\n    if (content && !this.isSharing) {\n      Metrics.postEvent({event: eventType.SHARE_INITIATED, meeting: this});\n\n      return this.meetingRequest.changeMeetingFloor({\n        disposition: FLOOR_ACTION.GRANTED,\n        personUrl: this.locusInfo.self.url,\n        deviceUrl: this.deviceUrl,\n        uri: content.url,\n        resourceUrl: this.resourceUrl\n      })\n        .then(() => {\n          this.isSharing = true;\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'share'\n            },\n            EVENT_TRIGGERS.MEETING_STARTED_SHARING_LOCAL,\n          );\n          Metrics.postEvent({event: eventType.LOCAL_SHARE_FLOOR_GRANTED, meeting: this});\n\n          return Promise.resolve();\n        })\n        .catch((e) => {\n          LoggerProxy.logger.error('Meeting/index->share#Error ', e);\n\n          return Promise.reject(e);\n        });\n    }\n\n    return Promise.reject(new ParameterError('Cannot share without content.'));\n  }\n\n  /**\n   * Stops the screen share\n   * @returns {Promise} see #meetingRequest.changeMeetingFloor\n   * @public\n   * @memberof Meeting\n   */\n  stopShare() {\n    const content = this.locusInfo.mediaShares.find((element) => element.name === CONTENT);\n\n    if (content && this.isSharing) {\n      Metrics.postEvent({event: eventType.SHARE_STOPPED, meeting: this});\n      Media.stopTracks(this.mediaProperties.shareTrack);\n\n      return this.meetingRequest.changeMeetingFloor({\n        disposition: FLOOR_ACTION.RELEASED,\n        personUrl: this.locusInfo.self.url,\n        deviceUrl: this.deviceUrl,\n        uri: content.url,\n        resourceUrl: this.resourceUrl\n      })\n        .catch((e) => {\n          LoggerProxy.logger.error('Meeting/index->stopShare#Error ', e);\n\n          return Promise.reject(e);\n        })\n        .finally(() => {\n          this.isSharing = false;\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'stopShare'\n            },\n            EVENT_TRIGGERS.MEETING_STOPPED_SHARING_LOCAL,\n          );\n        });\n    }\n\n    return Promise.reject(new ParameterError('Cannot stop share without content'));\n  }\n\n  /**\n   * Intiate a recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  startRecording() {\n    return MeetingUtil.startRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * End the recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  stopRecording() {\n    return MeetingUtil.stopRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * Pauses the recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  pauseRecording() {\n    return MeetingUtil.pauseRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * Resumes the recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  resumeRecording() {\n    return MeetingUtil.resumeRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * Locks the current meeting if possible\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  lockMeeting() {\n    return MeetingUtil.lockMeeting(this.inMeetingActions, this.meetingRequest, this.locusUrl);\n  }\n\n  /**\n   * Unlocks the current meeting if possible\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  unlockMeeting() {\n    return MeetingUtil.unlockMeeting(this.inMeetingActions, this.meetingRequest, this.locusUrl);\n  }\n\n  /**\n   * Sends DTMF tones to the current meeting\n   * @param {String} tones a string of one or more DTMF tones to send\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  sendDTMF(tones) {\n    const reject = (message) => {\n      LoggerProxy.logger.error(message);\n\n      return Promise.reject(new Error(message));\n    };\n\n    if (this.locusInfo && this.locusInfo.self) {\n      if (this.locusInfo.self.enableDTMF) {\n        return this.meetingRequest\n          .sendDTMF({\n            locusUrl: this.locusInfo.self.url,\n            deviceUrl: this.deviceUrl,\n            tones\n          });\n      }\n\n      return reject('Meeting:index#sendDTMF --> cannot send DTMF, meeting does not have DTMF enabled');\n    }\n\n    return reject('Meeting:index#sendDTMF --> cannot send DTMF, meeting does not have a connection to the \"locus\" call control service. Have you joined?');\n  }\n\n  /**\n   * Sets the quality of the local video stream\n   * @param {String} level {LOW|MEDIUM|HIGH}\n   * @returns {Promise}\n   */\n  setLocalVideoQuality(level) {\n    LoggerProxy.logger.log(`Meeting:index#setLocalVideoQuality --> Setting quality to ${level}`);\n\n    if (!VIDEO_RESOLUTIONS[level]) {\n      const errorMessage = `Meeting:index#setLocalVideoQuality --> ${level} not defined`;\n\n      LoggerProxy.logger.error(errorMessage);\n\n      return Promise.reject(new Error(errorMessage));\n    }\n\n    if (!this.mediaProperties.mediaDirection.sendVideo) {\n      const errorMessage = 'Meeting:index#setLocalVideoQuality --> unable to change video quality, sendVideo is disabled';\n\n      LoggerProxy.logger.error(errorMessage);\n\n      return Promise.reject(new Error(errorMessage));\n    }\n\n    const mediaDirection = {\n      sendAudio: this.mediaProperties.mediaDirection.sendAudio,\n      sendVideo: this.mediaProperties.mediaDirection.sendVideo,\n      sendShare: this.mediaProperties.mediaDirection.sendShare\n    };\n\n    return this.getMediaStreams(mediaDirection, VIDEO_RESOLUTIONS[level])\n      .then(([localStream]) =>\n        this.updateVideo({\n          sendVideo: true,\n          receiveVideo: true,\n          stream: localStream\n        }));\n  }\n}\n"]}