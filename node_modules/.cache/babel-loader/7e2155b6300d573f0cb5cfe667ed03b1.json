{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\nimport { getCrypto, getAlgorithmByOID } from \"./common.js\";\nimport MessageImprint from \"./MessageImprint.js\";\nimport Accuracy from \"./Accuracy.js\";\nimport GeneralName from \"./GeneralName.js\";\nimport Extension from \"./Extension.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC3161\r\n */\n\nexport default class TSTInfo {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for TSTInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", TSTInfo.defaultValues(\"version\"));\n    /**\r\n     * @type {string}\r\n     * @desc policy\r\n     */\n\n    this.policy = getParametersValue(parameters, \"policy\", TSTInfo.defaultValues(\"policy\"));\n    /**\r\n     * @type {MessageImprint}\r\n     * @desc messageImprint\r\n     */\n\n    this.messageImprint = getParametersValue(parameters, \"messageImprint\", TSTInfo.defaultValues(\"messageImprint\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc serialNumber\r\n     */\n\n    this.serialNumber = getParametersValue(parameters, \"serialNumber\", TSTInfo.defaultValues(\"serialNumber\"));\n    /**\r\n     * @type {Date}\r\n     * @desc genTime\r\n     */\n\n    this.genTime = getParametersValue(parameters, \"genTime\", TSTInfo.defaultValues(\"genTime\"));\n    if (\"accuracy\" in parameters)\n      /**\r\n       * @type {Accuracy}\r\n       * @desc accuracy\r\n       */\n      this.accuracy = getParametersValue(parameters, \"accuracy\", TSTInfo.defaultValues(\"accuracy\"));\n    if (\"ordering\" in parameters)\n      /**\r\n       * @type {boolean}\r\n       * @desc ordering\r\n       */\n      this.ordering = getParametersValue(parameters, \"ordering\", TSTInfo.defaultValues(\"ordering\"));\n    if (\"nonce\" in parameters)\n      /**\r\n       * @type {Integer}\r\n       * @desc nonce\r\n       */\n      this.nonce = getParametersValue(parameters, \"nonce\", TSTInfo.defaultValues(\"nonce\"));\n    if (\"tsa\" in parameters)\n      /**\r\n       * @type {GeneralName}\r\n       * @desc tsa\r\n       */\n      this.tsa = getParametersValue(parameters, \"tsa\", TSTInfo.defaultValues(\"tsa\"));\n    if (\"extensions\" in parameters)\n      /**\r\n       * @type {Array.<Extension>}\r\n       * @desc extensions\r\n       */\n      this.extensions = getParametersValue(parameters, \"extensions\", TSTInfo.defaultValues(\"extensions\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"version\":\n        return 0;\n\n      case \"policy\":\n        return \"\";\n\n      case \"messageImprint\":\n        return new MessageImprint();\n\n      case \"serialNumber\":\n        return new asn1js.Integer();\n\n      case \"genTime\":\n        return new Date(0, 0, 0);\n\n      case \"accuracy\":\n        return new Accuracy();\n\n      case \"ordering\":\n        return false;\n\n      case \"nonce\":\n        return new asn1js.Integer();\n\n      case \"tsa\":\n        return new GeneralName();\n\n      case \"extensions\":\n        return [];\n\n      default:\n        throw new Error(`Invalid member name for TSTInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"version\":\n      case \"policy\":\n      case \"genTime\":\n      case \"ordering\":\n        return memberValue === TSTInfo.defaultValues(memberName);\n\n      case \"messageImprint\":\n        return MessageImprint.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm) && MessageImprint.compareWithDefault(\"hashedMessage\", memberValue.hashedMessage);\n\n      case \"serialNumber\":\n      case \"nonce\":\n        return memberValue.isEqual(TSTInfo.defaultValues(memberName));\n\n      case \"accuracy\":\n        return Accuracy.compareWithDefault(\"seconds\", memberValue.seconds) && Accuracy.compareWithDefault(\"millis\", memberValue.millis) && Accuracy.compareWithDefault(\"micros\", memberValue.micros);\n\n      case \"tsa\":\n        return GeneralName.compareWithDefault(\"type\", memberValue.type) && GeneralName.compareWithDefault(\"value\", memberValue.value);\n\n      case \"extensions\":\n        return memberValue.length === 0;\n\n      default:\n        throw new Error(`Invalid member name for TSTInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * TSTInfo ::= SEQUENCE  {\r\n   *   version                      INTEGER  { v1(1) },\r\n   *   policy                       TSAPolicyId,\r\n   *   messageImprint               MessageImprint,\r\n   *   serialNumber                 INTEGER,\r\n   *   genTime                      GeneralizedTime,\r\n   *   accuracy                     Accuracy                 OPTIONAL,\r\n   *   ordering                     BOOLEAN             DEFAULT FALSE,\r\n   *   nonce                        INTEGER                  OPTIONAL,\r\n   *   tsa                          [0] GeneralName          OPTIONAL,\r\n   *   extensions                   [1] IMPLICIT Extensions  OPTIONAL  }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [version]\r\n     * @property {string} [policy]\r\n     * @property {string} [messageImprint]\r\n     * @property {string} [serialNumber]\r\n     * @property {string} [genTime]\r\n     * @property {string} [accuracy]\r\n     * @property {string} [ordering]\r\n     * @property {string} [nonce]\r\n     * @property {string} [tsa]\r\n     * @property {string} [extensions]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"TSTInfo\",\n      value: [new asn1js.Integer({\n        name: names.version || \"TSTInfo.version\"\n      }), new asn1js.ObjectIdentifier({\n        name: names.policy || \"TSTInfo.policy\"\n      }), MessageImprint.schema(names.messageImprint || {\n        names: {\n          blockName: \"TSTInfo.messageImprint\"\n        }\n      }), new asn1js.Integer({\n        name: names.serialNumber || \"TSTInfo.serialNumber\"\n      }), new asn1js.GeneralizedTime({\n        name: names.genTime || \"TSTInfo.genTime\"\n      }), Accuracy.schema(names.accuracy || {\n        names: {\n          blockName: \"TSTInfo.accuracy\"\n        }\n      }), new asn1js.Boolean({\n        name: names.ordering || \"TSTInfo.ordering\",\n        optional: true\n      }), new asn1js.Integer({\n        name: names.nonce || \"TSTInfo.nonce\",\n        optional: true\n      }), new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [GeneralName.schema(names.tsa || {\n          names: {\n            blockName: \"TSTInfo.tsa\"\n          }\n        })]\n      }), new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: [new asn1js.Repeated({\n          name: names.extensions || \"TSTInfo.extensions\",\n          value: Extension.schema(names.extension || {})\n        })]\n      }) // IMPLICIT Extensions\n      ]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"TSTInfo.version\", \"TSTInfo.policy\", \"TSTInfo.messageImprint\", \"TSTInfo.serialNumber\", \"TSTInfo.genTime\", \"TSTInfo.accuracy\", \"TSTInfo.ordering\", \"TSTInfo.nonce\", \"TSTInfo.tsa\", \"TSTInfo.extensions\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, TSTInfo.schema());\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for TSTInfo\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.version = asn1.result[\"TSTInfo.version\"].valueBlock.valueDec;\n    this.policy = asn1.result[\"TSTInfo.policy\"].valueBlock.toString();\n    this.messageImprint = new MessageImprint({\n      schema: asn1.result[\"TSTInfo.messageImprint\"]\n    });\n    this.serialNumber = asn1.result[\"TSTInfo.serialNumber\"];\n    this.genTime = asn1.result[\"TSTInfo.genTime\"].toDate();\n    if (\"TSTInfo.accuracy\" in asn1.result) this.accuracy = new Accuracy({\n      schema: asn1.result[\"TSTInfo.accuracy\"]\n    });\n    if (\"TSTInfo.ordering\" in asn1.result) this.ordering = asn1.result[\"TSTInfo.ordering\"].valueBlock.value;\n    if (\"TSTInfo.nonce\" in asn1.result) this.nonce = asn1.result[\"TSTInfo.nonce\"];\n    if (\"TSTInfo.tsa\" in asn1.result) this.tsa = new GeneralName({\n      schema: asn1.result[\"TSTInfo.tsa\"]\n    });\n    if (\"TSTInfo.extensions\" in asn1.result) this.extensions = Array.from(asn1.result[\"TSTInfo.extensions\"], element => new Extension({\n      schema: element\n    })); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n    outputArray.push(new asn1js.Integer({\n      value: this.version\n    }));\n    outputArray.push(new asn1js.ObjectIdentifier({\n      value: this.policy\n    }));\n    outputArray.push(this.messageImprint.toSchema());\n    outputArray.push(this.serialNumber);\n    outputArray.push(new asn1js.GeneralizedTime({\n      valueDate: this.genTime\n    }));\n    if (\"accuracy\" in this) outputArray.push(this.accuracy.toSchema());\n    if (\"ordering\" in this) outputArray.push(new asn1js.Boolean({\n      value: this.ordering\n    }));\n    if (\"nonce\" in this) outputArray.push(this.nonce);\n\n    if (\"tsa\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [this.tsa.toSchema()]\n      }));\n    } //region Create array of extensions\n\n\n    if (\"extensions\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: Array.from(this.extensions, element => element.toSchema())\n      }));\n    } //endregion\n    //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const _object = {\n      version: this.version,\n      policy: this.policy,\n      messageImprint: this.messageImprint.toJSON(),\n      serialNumber: this.serialNumber.toJSON(),\n      genTime: this.genTime\n    };\n    if (\"accuracy\" in this) _object.accuracy = this.accuracy.toJSON();\n    if (\"ordering\" in this) _object.ordering = this.ordering;\n    if (\"nonce\" in this) _object.nonce = this.nonce.toJSON();\n    if (\"tsa\" in this) _object.tsa = this.tsa.toJSON();\n    if (\"extensions\" in this) _object.extensions = Array.from(this.extensions, element => element.toJSON());\n    return _object;\n  } //**********************************************************************************\n\n  /**\r\n   * Verify current TST Info value\r\n   * @param {{data: ArrayBuffer, notBefore: Date, notAfter: Date}} parameters Input parameters\r\n   * @returns {Promise}\r\n   */\n\n\n  verify(parameters = {}) {\n    //region Initial variables\n    let sequence = Promise.resolve();\n    let data;\n    let notBefore = null;\n    let notAfter = null; //endregion\n    //region Get a \"crypto\" extension\n\n    const crypto = getCrypto();\n    if (typeof crypto === \"undefined\") return Promise.reject(\"Unable to create WebCrypto object\"); //endregion\n    //region Get initial parameters\n\n    if (\"data\" in parameters) data = parameters.data;else return Promise.reject(\"\\\"data\\\" is a mandatory attribute for TST_INFO verification\");\n    if (\"notBefore\" in parameters) notBefore = parameters.notBefore;\n    if (\"notAfter\" in parameters) notAfter = parameters.notAfter; //endregion\n    //region Check date\n\n    if (notBefore !== null) {\n      if (this.genTime < notBefore) return Promise.reject(\"Generation time for TSTInfo object is less than notBefore value\");\n    }\n\n    if (notAfter !== null) {\n      if (this.genTime > notAfter) return Promise.reject(\"Generation time for TSTInfo object is more than notAfter value\");\n    } //endregion\n    //region Find hashing algorithm\n\n\n    const shaAlgorithm = getAlgorithmByOID(this.messageImprint.hashAlgorithm.algorithmId);\n    if (\"name\" in shaAlgorithm === false) return Promise.reject(`Unsupported signature algorithm: ${this.messageImprint.hashAlgorithm.algorithmId}`); //endregion\n    //region Calculate message digest for input \"data\" buffer\n    // noinspection JSCheckFunctionSignatures\n\n    sequence = sequence.then(() => crypto.digest(shaAlgorithm.name, new Uint8Array(data))).then(result => isEqualBuffer(result, this.messageImprint.hashedMessage.valueBlock.valueHex)); //endregion\n\n    return sequence;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/TSTInfo.js"],"names":["asn1js","getParametersValue","isEqualBuffer","clearProps","getCrypto","getAlgorithmByOID","MessageImprint","Accuracy","GeneralName","Extension","TSTInfo","constructor","parameters","version","defaultValues","policy","messageImprint","serialNumber","genTime","accuracy","ordering","nonce","tsa","extensions","fromSchema","schema","memberName","Integer","Date","Error","compareWithDefault","memberValue","hashAlgorithm","hashedMessage","isEqual","seconds","millis","micros","type","value","length","names","Sequence","name","blockName","ObjectIdentifier","GeneralizedTime","Boolean","optional","Constructed","idBlock","tagClass","tagNumber","Repeated","extension","asn1","compareSchema","verified","result","valueBlock","valueDec","toString","toDate","Array","from","element","toSchema","outputArray","push","valueDate","toJSON","_object","verify","sequence","Promise","resolve","data","notBefore","notAfter","crypto","reject","shaAlgorithm","algorithmId","then","digest","Uint8Array","valueHex"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { getCrypto, getAlgorithmByOID } from \"./common.js\";\r\nimport MessageImprint from \"./MessageImprint.js\";\r\nimport Accuracy from \"./Accuracy.js\";\r\nimport GeneralName from \"./GeneralName.js\";\r\nimport Extension from \"./Extension.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class TSTInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TSTInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", TSTInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc policy\r\n\t\t */\r\n\t\tthis.policy = getParametersValue(parameters, \"policy\", TSTInfo.defaultValues(\"policy\"));\r\n\t\t/**\r\n\t\t * @type {MessageImprint}\r\n\t\t * @desc messageImprint\r\n\t\t */\r\n\t\tthis.messageImprint = getParametersValue(parameters, \"messageImprint\", TSTInfo.defaultValues(\"messageImprint\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", TSTInfo.defaultValues(\"serialNumber\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @desc genTime\r\n\t\t */\r\n\t\tthis.genTime = getParametersValue(parameters, \"genTime\", TSTInfo.defaultValues(\"genTime\"));\r\n\r\n\t\tif(\"accuracy\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Accuracy}\r\n\t\t\t * @desc accuracy\r\n\t\t\t */\r\n\t\t\tthis.accuracy = getParametersValue(parameters, \"accuracy\", TSTInfo.defaultValues(\"accuracy\"));\r\n\r\n\t\tif(\"ordering\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {boolean}\r\n\t\t\t * @desc ordering\r\n\t\t\t */\r\n\t\t\tthis.ordering = getParametersValue(parameters, \"ordering\", TSTInfo.defaultValues(\"ordering\"));\r\n\r\n\t\tif(\"nonce\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Integer}\r\n\t\t\t * @desc nonce\r\n\t\t\t */\r\n\t\t\tthis.nonce = getParametersValue(parameters, \"nonce\", TSTInfo.defaultValues(\"nonce\"));\r\n\r\n\t\tif(\"tsa\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralName}\r\n\t\t\t * @desc tsa\r\n\t\t\t */\r\n\t\t\tthis.tsa = getParametersValue(parameters, \"tsa\", TSTInfo.defaultValues(\"tsa\"));\r\n\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @desc extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", TSTInfo.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"policy\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"messageImprint\":\r\n\t\t\t\treturn new MessageImprint();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"genTime\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tcase \"accuracy\":\r\n\t\t\t\treturn new Accuracy();\r\n\t\t\tcase \"ordering\":\r\n\t\t\t\treturn false;\r\n\t\t\tcase \"nonce\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"tsa\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TSTInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\tcase \"policy\":\r\n\t\t\tcase \"genTime\":\r\n\t\t\tcase \"ordering\":\r\n\t\t\t\treturn (memberValue === TSTInfo.defaultValues(memberName));\r\n\t\t\tcase \"messageImprint\":\r\n\t\t\t\treturn ((MessageImprint.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\r\n\t\t\t\t\t\t(MessageImprint.compareWithDefault(\"hashedMessage\", memberValue.hashedMessage)));\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\tcase \"nonce\":\r\n\t\t\t\treturn (memberValue.isEqual(TSTInfo.defaultValues(memberName)));\r\n\t\t\tcase \"accuracy\":\r\n\t\t\t\treturn ((Accuracy.compareWithDefault(\"seconds\", memberValue.seconds)) &&\r\n\t\t\t\t\t\t(Accuracy.compareWithDefault(\"millis\", memberValue.millis)) &&\r\n\t\t\t\t\t\t(Accuracy.compareWithDefault(\"micros\", memberValue.micros)));\r\n\t\t\tcase \"tsa\":\r\n\t\t\t\treturn ((GeneralName.compareWithDefault(\"type\", memberValue.type)) &&\r\n\t\t\t\t\t\t(GeneralName.compareWithDefault(\"value\", memberValue.value)));\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TSTInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * TSTInfo ::= SEQUENCE  {\r\n\t *   version                      INTEGER  { v1(1) },\r\n\t *   policy                       TSAPolicyId,\r\n\t *   messageImprint               MessageImprint,\r\n\t *   serialNumber                 INTEGER,\r\n\t *   genTime                      GeneralizedTime,\r\n\t *   accuracy                     Accuracy                 OPTIONAL,\r\n\t *   ordering                     BOOLEAN             DEFAULT FALSE,\r\n\t *   nonce                        INTEGER                  OPTIONAL,\r\n\t *   tsa                          [0] GeneralName          OPTIONAL,\r\n\t *   extensions                   [1] IMPLICIT Extensions  OPTIONAL  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [policy]\r\n\t\t * @property {string} [messageImprint]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t * @property {string} [genTime]\r\n\t\t * @property {string} [accuracy]\r\n\t\t * @property {string} [ordering]\r\n\t\t * @property {string} [nonce]\r\n\t\t * @property {string} [tsa]\r\n\t\t * @property {string} [extensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TSTInfo\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"TSTInfo.version\") }),\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.policy || \"TSTInfo.policy\") }),\r\n\t\t\t\tMessageImprint.schema(names.messageImprint || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TSTInfo.messageImprint\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"TSTInfo.serialNumber\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.genTime || \"TSTInfo.genTime\") }),\r\n\t\t\t\tAccuracy.schema(names.accuracy || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TSTInfo.accuracy\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Boolean({\r\n\t\t\t\t\tname: (names.ordering || \"TSTInfo.ordering\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\tname: (names.nonce || \"TSTInfo.nonce\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [GeneralName.schema(names.tsa || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"TSTInfo.tsa\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.extensions || \"TSTInfo.extensions\"),\r\n\t\t\t\t\t\t\tvalue: Extension.schema(names.extension || {})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}) // IMPLICIT Extensions\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"TSTInfo.version\",\r\n\t\t\t\"TSTInfo.policy\",\r\n\t\t\t\"TSTInfo.messageImprint\",\r\n\t\t\t\"TSTInfo.serialNumber\",\r\n\t\t\t\"TSTInfo.genTime\",\r\n\t\t\t\"TSTInfo.accuracy\",\r\n\t\t\t\"TSTInfo.ordering\",\r\n\t\t\t\"TSTInfo.nonce\",\r\n\t\t\t\"TSTInfo.tsa\",\r\n\t\t\t\"TSTInfo.extensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTSTInfo.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TSTInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"TSTInfo.version\"].valueBlock.valueDec;\r\n\t\tthis.policy = asn1.result[\"TSTInfo.policy\"].valueBlock.toString();\r\n\t\tthis.messageImprint = new MessageImprint({ schema: asn1.result[\"TSTInfo.messageImprint\"] });\r\n\t\tthis.serialNumber = asn1.result[\"TSTInfo.serialNumber\"];\r\n\t\tthis.genTime = asn1.result[\"TSTInfo.genTime\"].toDate();\r\n\t\tif(\"TSTInfo.accuracy\" in asn1.result)\r\n\t\t\tthis.accuracy = new Accuracy({ schema: asn1.result[\"TSTInfo.accuracy\"] });\r\n\t\tif(\"TSTInfo.ordering\" in asn1.result)\r\n\t\t\tthis.ordering = asn1.result[\"TSTInfo.ordering\"].valueBlock.value;\r\n\t\tif(\"TSTInfo.nonce\" in asn1.result)\r\n\t\t\tthis.nonce = asn1.result[\"TSTInfo.nonce\"];\r\n\t\tif(\"TSTInfo.tsa\" in asn1.result)\r\n\t\t\tthis.tsa = new GeneralName({ schema: asn1.result[\"TSTInfo.tsa\"] });\r\n\t\tif(\"TSTInfo.extensions\" in asn1.result)\r\n\t\t\tthis.extensions = Array.from(asn1.result[\"TSTInfo.extensions\"], element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.policy }));\r\n\t\toutputArray.push(this.messageImprint.toSchema());\r\n\t\toutputArray.push(this.serialNumber);\r\n\t\toutputArray.push(new asn1js.GeneralizedTime({ valueDate: this.genTime }));\r\n\t\tif(\"accuracy\" in this)\r\n\t\t\toutputArray.push(this.accuracy.toSchema());\r\n\t\tif(\"ordering\" in this)\r\n\t\t\toutputArray.push(new asn1js.Boolean({ value: this.ordering }));\r\n\t\tif(\"nonce\" in this)\r\n\t\t\toutputArray.push(this.nonce);\r\n\t\tif(\"tsa\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.tsa.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\t//region Create array of extensions\r\n\t\tif(\"extensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tpolicy: this.policy,\r\n\t\t\tmessageImprint: this.messageImprint.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON(),\r\n\t\t\tgenTime: this.genTime\r\n\t\t};\r\n\r\n\t\tif(\"accuracy\" in this)\r\n\t\t\t_object.accuracy = this.accuracy.toJSON();\r\n\r\n\t\tif(\"ordering\" in this)\r\n\t\t\t_object.ordering = this.ordering;\r\n\r\n\t\tif(\"nonce\" in this)\r\n\t\t\t_object.nonce = this.nonce.toJSON();\r\n\r\n\t\tif(\"tsa\" in this)\r\n\t\t\t_object.tsa = this.tsa.toJSON();\r\n\r\n\t\tif(\"extensions\" in this)\r\n\t\t\t_object.extensions = Array.from(this.extensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current TST Info value\r\n\t * @param {{data: ArrayBuffer, notBefore: Date, notAfter: Date}} parameters Input parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\r\n\t\tlet data;\r\n\r\n\t\tlet notBefore = null;\r\n\t\tlet notAfter = null;\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get initial parameters\r\n\t\tif(\"data\" in parameters)\r\n\t\t\tdata = parameters.data;\r\n\t\telse\r\n\t\t\treturn Promise.reject(\"\\\"data\\\" is a mandatory attribute for TST_INFO verification\");\r\n\r\n\t\tif(\"notBefore\" in parameters)\r\n\t\t\tnotBefore = parameters.notBefore;\r\n\r\n\t\tif(\"notAfter\" in parameters)\r\n\t\t\tnotAfter = parameters.notAfter;\r\n\t\t//endregion\r\n\r\n\t\t//region Check date\r\n\t\tif(notBefore !== null)\r\n\t\t{\r\n\t\t\tif(this.genTime < notBefore)\r\n\t\t\t\treturn Promise.reject(\"Generation time for TSTInfo object is less than notBefore value\");\r\n\t\t}\r\n\t\t\r\n\t\tif(notAfter !== null)\r\n\t\t{\r\n\t\t\tif(this.genTime > notAfter)\r\n\t\t\t\treturn Promise.reject(\"Generation time for TSTInfo object is more than notAfter value\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find hashing algorithm\r\n\t\tconst shaAlgorithm = getAlgorithmByOID(this.messageImprint.hashAlgorithm.algorithmId);\r\n\t\tif((\"name\" in shaAlgorithm) === false)\r\n\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.messageImprint.hashAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Calculate message digest for input \"data\" buffer\r\n\t\t// noinspection JSCheckFunctionSignatures\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.digest(shaAlgorithm.name, new Uint8Array(data))\r\n\t\t).then(\r\n\t\t\tresult => isEqualBuffer(result, this.messageImprint.hashedMessage.valueBlock.valueHex)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}