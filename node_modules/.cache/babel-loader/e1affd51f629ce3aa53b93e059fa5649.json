{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _loggerProxy = require('../common/logs/logger-proxy');\n\nvar _loggerProxy2 = _interopRequireDefault(_loggerProxy);\n\nvar _constants = require('../constants');\n\nvar _metrics = require('../metrics');\n\nvar _metrics2 = _interopRequireDefault(_metrics);\n\nvar _config = require('../metrics/config');\n\nvar _parameter = require('../common/errors/parameter');\n\nvar _parameter2 = _interopRequireDefault(_parameter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @class RoapRequest\n */\n\n/* global window */\n\n\nvar RoapRequest = function (_StatelessWebexPlugin) {\n  (0, _inherits3.default)(RoapRequest, _StatelessWebexPlugin);\n\n  function RoapRequest() {\n    (0, _classCallCheck3.default)(this, RoapRequest);\n    return (0, _possibleConstructorReturn3.default)(this, (RoapRequest.__proto__ || (0, _getPrototypeOf2.default)(RoapRequest)).apply(this, arguments));\n  }\n\n  (0, _createClass3.default)(RoapRequest, [{\n    key: 'attachRechabilityData',\n\n    /**\n     * Joins a meeting via ROAP\n     * @param {Object} options\n     * @returns {Promise} returns a promise that resolves/rejects whatever the request does\n     */\n    value: function attachRechabilityData(localSdp) {\n      var reachabilityData = window.localStorage.getItem(_constants.REACHABILITY.localStorage);\n\n      if (reachabilityData) {\n        try {\n          var reachabilityResult = JSON.parse(reachabilityData);\n          /* istanbul ignore else */\n\n          if (reachabilityResult && (0, _keys2.default)(reachabilityResult).length) {\n            localSdp.reachability = reachabilityResult;\n          }\n        } catch (e) {\n          _loggerProxy2.default.logger.error('RoapRequest->attachReachabilityData#Error in parsing reachability data: ' + e);\n        }\n      }\n\n      return localSdp;\n    }\n  }, {\n    key: 'joinMeetingWithRoap',\n    value: function joinMeetingWithRoap(options) {\n      var _this2 = this;\n\n      _loggerProxy2.default.logger.info('RoapRequest->joinMeetingWithRoap#Join locus with roap');\n\n      _loggerProxy2.default.logger.info('RoapRequest->joinMeetingWithRoap#Clocal SDP: ' + options.roapMessage);\n\n      return _promise2.default.resolve().then((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n        var deviceUrl, url, body;\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                deviceUrl = _this2.webex.internal.device.url;\n                url = '';\n                body = {\n                  deviceUrl: deviceUrl,\n                  usingResource: options.resourceId || null,\n                  correlationId: options.correlationId,\n                  localMedias: [{\n                    localSdp: (0, _stringify2.default)(_this2.attachRechabilityData({\n                      roapMessage: options.roapMessage,\n                      audioMuted: false,\n                      videoMuted: false\n                    }))\n                  }]\n                };\n\n                if (!options.locusUrl) {\n                  _context.next = 7;\n                  break;\n                }\n\n                url = options.locusUrl + '/' + _constants.PARTICIPANT;\n                _context.next = 15;\n                break;\n\n              case 7:\n                if (!options.sipUrl) {\n                  _context.next = 14;\n                  break;\n                }\n\n                _context.next = 10;\n                return _this2.webex.internal.services.waitForCatalog('postauth');\n\n              case 10:\n                url = _this2.webex.internal.services.get('locus') + '/' + _constants.LOCI + '/' + _constants.CALL;\n                body.invitee = {\n                  address: options.sipTarget\n                };\n                _context.next = 15;\n                break;\n\n              case 14:\n                throw new _parameter2.default('Must provide a locusUrl or sipTarget');\n\n              case 15:\n                return _context.abrupt('return', _this2.webex.request({\n                  method: _constants.HTTP_VERBS.POST,\n                  uri: url,\n                  body: body\n                }).then(function (res) {\n                  var locus = res.body.locus;\n                  locus.roapSeq = options.roapMessage.seq;\n                  locus.id = locus.url.split('/').pop();\n\n                  _loggerProxy2.default.logger.info('RoapRequest->joinMeetingWithRoap#Joined locus [' + locus.id + '][' + locus.fullState.lastActive + ']');\n\n                  return locus;\n                }).catch(function (err) {\n                  _loggerProxy2.default.logger.error('RoapRequest->joinMeetingWithRoap#failed with error: ' + err);\n\n                  throw err;\n                }));\n\n              case 16:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, _this2);\n      })));\n    }\n    /**\n     * Sends a ROAP message\n     * @param {Object} options\n     * @param {String} options.roapMessage\n     * @param {String} options.locusId\n     * @param {String} options.locusSelfId\n     * @param {String} options.mediaId\n     * @param {String} options.correlationId\n     * @returns {Promise} returns the response/failure of the request\n     */\n\n  }, {\n    key: 'sendRoap',\n    value: function sendRoap(options) {\n      var roapMessage = options.roapMessage,\n          locusSelfUrl = options.locusSelfUrl,\n          mediaId = options.mediaId,\n          correlationId = options.correlationId,\n          meetingId = options.meetingId;\n\n      if (!mediaId) {\n        _loggerProxy2.default.logger.info('RoapRequest->sendRoap#Race Condition /call mediaID not present');\n      }\n\n      var mediaUrl = locusSelfUrl + '/' + _constants.MEDIA;\n      var deviceUrl = this.webex.internal.device.url;\n\n      _loggerProxy2.default.logger.info('RoapRequest->sendRoap#' + mediaUrl + ' \\n ' + roapMessage.messageType + ' \\n seq:' + roapMessage.seq);\n\n      _metrics2.default.postEvent({\n        event: _config.eventType.MEDIA_REQUEST,\n        meetingId: meetingId\n      });\n\n      return this.webex.request({\n        uri: mediaUrl,\n        method: _constants.HTTP_VERBS.PUT,\n        body: {\n          device: {\n            url: deviceUrl,\n            deviceType: this.config.meetings.deviceType\n          },\n          correlationId: correlationId,\n          localMedias: [{\n            localSdp: (0, _stringify2.default)(this.attachRechabilityData({\n              roapMessage: roapMessage,\n              // eslint-disable-next-line no-warning-comments\n              // TODO: check whats the need for video and audiomute\n              audioMuted: !!options.audioMuted,\n              videoMuted: !!options.videoMuted\n            })),\n            mediaId: options.mediaId\n          }]\n        }\n      }).then(function (res) {\n        _metrics2.default.postEvent({\n          event: _config.eventType.MEDIA_RESPONSE,\n          meetingId: meetingId\n        }); // always it will be the first mediaConnection Object\n\n\n        var mediaConnection = res.body.mediaConnections && res.body.mediaConnections.length > 0 && res.body.mediaConnections[0];\n\n        _loggerProxy2.default.logger.info('RoapRequest->sendRoap#:response:' + (0, _stringify2.default)(mediaConnection, null, 2) + '\\'\\n StatusCode:\\'' + res.statusCode);\n\n        var locus = res.body.locus;\n        locus.roapSeq = options.roapMessage.seq;\n        return locus;\n      }).catch(function (err) {\n        _metrics2.default.postEvent({\n          event: _config.eventType.MEDIA_RESPONSE,\n          meetingId: meetingId,\n          data: {\n            error: _metrics2.default.parseLocusError(err, true)\n          }\n        });\n\n        _loggerProxy2.default.logger.error('RoapRequest->sendRoap#Error:' + (0, _stringify2.default)(err, null, 2));\n\n        _loggerProxy2.default.logger.error('RoapRequest->sendRoapRequest#errorBody:' + (0, _stringify2.default)(roapMessage, null, 2) + ' + \\'\\\\n mediaId:\\'' + options.mediaId);\n\n        throw err;\n      });\n    }\n  }]);\n  return RoapRequest;\n}(_webexCore.StatelessWebexPlugin);\n\nexports.default = RoapRequest;","map":{"version":3,"sources":["request.js"],"names":["RoapRequest","StatelessWebexPlugin","localSdp","reachabilityData","window","REACHABILITY","reachabilityResult","JSON","LoggerProxy","options","deviceUrl","url","body","usingResource","correlationId","localMedias","roapMessage","audioMuted","videoMuted","PARTICIPANT","LOCI","CALL","address","sipTarget","ParameterError","method","HTTP_VERBS","uri","locus","res","locusSelfUrl","mediaId","meetingId","mediaUrl","MEDIA","Metrics","event","eventType","device","deviceType","mediaConnection","data","error"],"mappings":"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","sourcesContent":["\n/* global window */\nimport {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {\n  PARTICIPANT,\n  LOCI,\n  CALL,\n  MEDIA,\n  HTTP_VERBS,\n  REACHABILITY\n} from '../constants';\nimport Metrics from '../metrics';\nimport {eventType} from '../metrics/config';\nimport ParameterError from '../common/errors/parameter';\n/**\n * @class RoapRequest\n */\nexport default class RoapRequest extends StatelessWebexPlugin {\n  /**\n   * Joins a meeting via ROAP\n   * @param {Object} options\n   * @returns {Promise} returns a promise that resolves/rejects whatever the request does\n   */\n\n\n  attachRechabilityData(localSdp) {\n    const reachabilityData = window.localStorage.getItem(REACHABILITY.localStorage);\n\n    if (reachabilityData) {\n      try {\n        const reachabilityResult = JSON.parse(reachabilityData);\n\n        /* istanbul ignore else */\n        if (reachabilityResult && Object.keys(reachabilityResult).length) {\n          localSdp.reachability = reachabilityResult;\n        }\n      }\n      catch (e) {\n        LoggerProxy.logger.error(`RoapRequest->attachReachabilityData#Error in parsing reachability data: ${e}`);\n      }\n    }\n\n    return localSdp;\n  }\n\n  joinMeetingWithRoap(options) {\n    LoggerProxy.logger.info('RoapRequest->joinMeetingWithRoap#Join locus with roap');\n    LoggerProxy.logger.info(`RoapRequest->joinMeetingWithRoap#Clocal SDP: ${options.roapMessage}`);\n\n    return Promise.resolve().then(async () => {\n      const deviceUrl = this.webex.internal.device.url;\n      let url = '';\n\n      const body = {\n        deviceUrl,\n        usingResource: options.resourceId || null,\n        correlationId: options.correlationId,\n        localMedias: [\n          {\n            localSdp: JSON.stringify(this.attachRechabilityData({\n              roapMessage: options.roapMessage,\n              audioMuted: false,\n              videoMuted: false\n            }))\n          }\n        ]\n      };\n\n      if (options.locusUrl) {\n        url = `${options.locusUrl}/${PARTICIPANT}`;\n      }\n      else if (options.sipUrl) {\n        await this.webex.internal.services.waitForCatalog('postauth');\n        url = `${this.webex.internal.services.get('locus')}/${LOCI}/${CALL}`;\n        body.invitee = {\n          address: options.sipTarget\n        };\n      }\n      else {\n        throw new ParameterError('Must provide a locusUrl or sipTarget');\n      }\n\n      return this.webex\n        .request({\n          method: HTTP_VERBS.POST,\n          uri: url,\n          body\n        })\n        .then((res) => {\n          const {locus} = res.body;\n\n          locus.roapSeq = options.roapMessage.seq;\n          locus.id = locus.url.split('/').pop();\n          LoggerProxy.logger.info(`RoapRequest->joinMeetingWithRoap#Joined locus [${locus.id}][${locus.fullState.lastActive}]`);\n\n          return locus;\n        })\n        .catch((err) => {\n          LoggerProxy.logger.error(`RoapRequest->joinMeetingWithRoap#failed with error: ${err}`);\n          throw err;\n        });\n    });\n  }\n\n  /**\n   * Sends a ROAP message\n   * @param {Object} options\n   * @param {String} options.roapMessage\n   * @param {String} options.locusId\n   * @param {String} options.locusSelfId\n   * @param {String} options.mediaId\n   * @param {String} options.correlationId\n   * @returns {Promise} returns the response/failure of the request\n   */\n  sendRoap(options) {\n    const {\n      roapMessage, locusSelfUrl, mediaId, correlationId, meetingId\n    } = options;\n\n    if (!mediaId) {\n      LoggerProxy.logger.info('RoapRequest->sendRoap#Race Condition /call mediaID not present');\n    }\n\n    const mediaUrl = `${locusSelfUrl}/${MEDIA}`;\n    const deviceUrl = this.webex.internal.device.url;\n\n    LoggerProxy.logger.info(`RoapRequest->sendRoap#${mediaUrl} \\n ${roapMessage.messageType} \\n seq:${roapMessage.seq}`);\n\n    Metrics.postEvent({event: eventType.MEDIA_REQUEST, meetingId});\n\n    return this.webex\n      .request({\n        uri: mediaUrl,\n        method: HTTP_VERBS.PUT,\n        body: {\n          device: {\n            url: deviceUrl,\n            deviceType: this.config.meetings.deviceType\n          },\n          correlationId,\n          localMedias: [\n            {\n              localSdp: JSON.stringify(this.attachRechabilityData({\n                roapMessage,\n                // eslint-disable-next-line no-warning-comments\n                // TODO: check whats the need for video and audiomute\n                audioMuted: !!options.audioMuted,\n                videoMuted: !!options.videoMuted\n              })),\n              mediaId: options.mediaId\n            }\n          ]\n        }\n      })\n      .then((res) => {\n        Metrics.postEvent({event: eventType.MEDIA_RESPONSE, meetingId});\n\n        // always it will be the first mediaConnection Object\n        const mediaConnection = res.body.mediaConnections && res.body.mediaConnections.length > 0 && res.body.mediaConnections[0];\n\n        LoggerProxy.logger.info(\n          `RoapRequest->sendRoap#:response:${JSON.stringify(mediaConnection, null, 2)}'\\n StatusCode:'${res.statusCode}`\n        );\n        const {locus} = res.body;\n\n        locus.roapSeq = options.roapMessage.seq;\n\n        return locus;\n      })\n      .catch((err) => {\n        Metrics.postEvent({event: eventType.MEDIA_RESPONSE, meetingId, data: {error: Metrics.parseLocusError(err, true)}});\n        LoggerProxy.logger.error(`RoapRequest->sendRoap#Error:${JSON.stringify(err, null, 2)}`);\n        LoggerProxy.logger.error(\n          `RoapRequest->sendRoapRequest#errorBody:${JSON.stringify(roapMessage, null, 2)} + '\\\\n mediaId:'${options.mediaId}`\n        );\n        throw err;\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}