{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC4055\r\n */\n\nexport default class RSASSAPSSParams {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for RSASSAPSSParams class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc Algorithms of hashing (DEFAULT sha1)\r\n     */\n    this.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", RSASSAPSSParams.defaultValues(\"hashAlgorithm\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc Algorithm of \"mask generaion function (MGF)\" (DEFAULT mgf1SHA1)\r\n     */\n\n    this.maskGenAlgorithm = getParametersValue(parameters, \"maskGenAlgorithm\", RSASSAPSSParams.defaultValues(\"maskGenAlgorithm\"));\n    /**\r\n     * @type {number}\r\n     * @desc Salt length (DEFAULT 20)\r\n     */\n\n    this.saltLength = getParametersValue(parameters, \"saltLength\", RSASSAPSSParams.defaultValues(\"saltLength\"));\n    /**\r\n     * @type {number}\r\n     * @desc (DEFAULT 1)\r\n     */\n\n    this.trailerField = getParametersValue(parameters, \"trailerField\", RSASSAPSSParams.defaultValues(\"trailerField\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"hashAlgorithm\":\n        return new AlgorithmIdentifier({\n          algorithmId: \"1.3.14.3.2.26\",\n          // SHA-1\n          algorithmParams: new asn1js.Null()\n        });\n\n      case \"maskGenAlgorithm\":\n        return new AlgorithmIdentifier({\n          algorithmId: \"1.2.840.113549.1.1.8\",\n          // MGF1\n          algorithmParams: new AlgorithmIdentifier({\n            algorithmId: \"1.3.14.3.2.26\",\n            // SHA-1\n            algorithmParams: new asn1js.Null()\n          }).toSchema()\n        });\n\n      case \"saltLength\":\n        return 20;\n\n      case \"trailerField\":\n        return 1;\n\n      default:\n        throw new Error(`Invalid member name for RSASSAPSSParams class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * RSASSA-PSS-params  ::=  Sequence  {\r\n   *    hashAlgorithm      [0] HashAlgorithm DEFAULT sha1Identifier,\r\n   *    maskGenAlgorithm   [1] MaskGenAlgorithm DEFAULT mgf1SHA1Identifier,\r\n   *    saltLength         [2] Integer DEFAULT 20,\r\n   *    trailerField       [3] Integer DEFAULT 1  }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [hashAlgorithm]\r\n     * @property {string} [maskGenAlgorithm]\r\n     * @property {string} [saltLength]\r\n     * @property {string} [trailerField]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        optional: true,\n        value: [AlgorithmIdentifier.schema(names.hashAlgorithm || {})]\n      }), new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        optional: true,\n        value: [AlgorithmIdentifier.schema(names.maskGenAlgorithm || {})]\n      }), new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 2 // [2]\n\n        },\n        optional: true,\n        value: [new asn1js.Integer({\n          name: names.saltLength || \"\"\n        })]\n      }), new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 3 // [3]\n\n        },\n        optional: true,\n        value: [new asn1js.Integer({\n          name: names.trailerField || \"\"\n        })]\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"hashAlgorithm\", \"maskGenAlgorithm\", \"saltLength\", \"trailerField\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, RSASSAPSSParams.schema({\n      names: {\n        hashAlgorithm: {\n          names: {\n            blockName: \"hashAlgorithm\"\n          }\n        },\n        maskGenAlgorithm: {\n          names: {\n            blockName: \"maskGenAlgorithm\"\n          }\n        },\n        saltLength: \"saltLength\",\n        trailerField: \"trailerField\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for RSASSAPSSParams\"); //endregion\n    //region Get internal properties from parsed schema\n\n    if (\"hashAlgorithm\" in asn1.result) this.hashAlgorithm = new AlgorithmIdentifier({\n      schema: asn1.result.hashAlgorithm\n    });\n    if (\"maskGenAlgorithm\" in asn1.result) this.maskGenAlgorithm = new AlgorithmIdentifier({\n      schema: asn1.result.maskGenAlgorithm\n    });\n    if (\"saltLength\" in asn1.result) this.saltLength = asn1.result.saltLength.valueBlock.valueDec;\n    if (\"trailerField\" in asn1.result) this.trailerField = asn1.result.trailerField.valueBlock.valueDec; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n\n    if (!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(\"hashAlgorithm\"))) {\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [this.hashAlgorithm.toSchema()]\n      }));\n    }\n\n    if (!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(\"maskGenAlgorithm\"))) {\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: [this.maskGenAlgorithm.toSchema()]\n      }));\n    }\n\n    if (this.saltLength !== RSASSAPSSParams.defaultValues(\"saltLength\")) {\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 2 // [2]\n\n        },\n        value: [new asn1js.Integer({\n          value: this.saltLength\n        })]\n      }));\n    }\n\n    if (this.trailerField !== RSASSAPSSParams.defaultValues(\"trailerField\")) {\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 3 // [3]\n\n        },\n        value: [new asn1js.Integer({\n          value: this.trailerField\n        })]\n      }));\n    } //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const object = {};\n    if (!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(\"hashAlgorithm\"))) object.hashAlgorithm = this.hashAlgorithm.toJSON();\n    if (!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(\"maskGenAlgorithm\"))) object.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();\n    if (this.saltLength !== RSASSAPSSParams.defaultValues(\"saltLength\")) object.saltLength = this.saltLength;\n    if (this.trailerField !== RSASSAPSSParams.defaultValues(\"trailerField\")) object.trailerField = this.trailerField;\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/RSASSAPSSParams.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","RSASSAPSSParams","constructor","parameters","hashAlgorithm","defaultValues","maskGenAlgorithm","saltLength","trailerField","fromSchema","schema","memberName","algorithmId","algorithmParams","Null","toSchema","Error","names","Sequence","name","blockName","value","Constructed","idBlock","tagClass","tagNumber","optional","Integer","asn1","compareSchema","verified","result","valueBlock","valueDec","outputArray","isEqual","push","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC4055\r\n */\r\nexport default class RSASSAPSSParams\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RSASSAPSSParams class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc Algorithms of hashing (DEFAULT sha1)\r\n\t\t */\r\n\t\tthis.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", RSASSAPSSParams.defaultValues(\"hashAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc Algorithm of \"mask generaion function (MGF)\" (DEFAULT mgf1SHA1)\r\n\t\t */\r\n\t\tthis.maskGenAlgorithm = getParametersValue(parameters, \"maskGenAlgorithm\", RSASSAPSSParams.defaultValues(\"maskGenAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc Salt length (DEFAULT 20)\r\n\t\t */\r\n\t\tthis.saltLength = getParametersValue(parameters, \"saltLength\", RSASSAPSSParams.defaultValues(\"saltLength\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc (DEFAULT 1)\r\n\t\t */\r\n\t\tthis.trailerField = getParametersValue(parameters, \"trailerField\", RSASSAPSSParams.defaultValues(\"trailerField\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: \"1.3.14.3.2.26\", // SHA-1\r\n\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t});\r\n\t\t\tcase \"maskGenAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // MGF1\r\n\t\t\t\t\talgorithmParams: (new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.3.14.3.2.26\", // SHA-1\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t})).toSchema()\r\n\t\t\t\t});\r\n\t\t\tcase \"saltLength\":\r\n\t\t\t\treturn 20;\r\n\t\t\tcase \"trailerField\":\r\n\t\t\t\treturn 1;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RSASSAPSSParams class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RSASSA-PSS-params  ::=  Sequence  {\r\n\t *    hashAlgorithm      [0] HashAlgorithm DEFAULT sha1Identifier,\r\n\t *    maskGenAlgorithm   [1] MaskGenAlgorithm DEFAULT mgf1SHA1Identifier,\r\n\t *    saltLength         [2] Integer DEFAULT 20,\r\n\t *    trailerField       [3] Integer DEFAULT 1  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [hashAlgorithm]\r\n\t\t * @property {string} [maskGenAlgorithm]\r\n\t\t * @property {string} [saltLength]\r\n\t\t * @property {string} [trailerField]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [AlgorithmIdentifier.schema(names.hashAlgorithm || {})]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [AlgorithmIdentifier.schema(names.maskGenAlgorithm || {})]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.saltLength || \"\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t\t},\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.trailerField || \"\") })]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"hashAlgorithm\",\r\n\t\t\t\"maskGenAlgorithm\",\r\n\t\t\t\"saltLength\",\r\n\t\t\t\"trailerField\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRSASSAPSSParams.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\thashAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"hashAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmaskGenAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"maskGenAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsaltLength: \"saltLength\",\r\n\t\t\t\t\ttrailerField: \"trailerField\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RSASSAPSSParams\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"hashAlgorithm\" in asn1.result)\r\n\t\t\tthis.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\r\n\r\n\t\tif(\"maskGenAlgorithm\" in asn1.result)\r\n\t\t\tthis.maskGenAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.maskGenAlgorithm });\r\n\r\n\t\tif(\"saltLength\" in asn1.result)\r\n\t\t\tthis.saltLength = asn1.result.saltLength.valueBlock.valueDec;\r\n\r\n\t\tif(\"trailerField\" in asn1.result)\r\n\t\t\tthis.trailerField = asn1.result.trailerField.valueBlock.valueDec;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(\"hashAlgorithm\")))\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.hashAlgorithm.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(\"maskGenAlgorithm\")))\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.maskGenAlgorithm.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(this.saltLength !== RSASSAPSSParams.defaultValues(\"saltLength\"))\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.Integer({ value: this.saltLength })]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(this.trailerField !== RSASSAPSSParams.defaultValues(\"trailerField\"))\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.Integer({ value: this.trailerField })]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\r\n\t\tif(!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(\"hashAlgorithm\")))\r\n\t\t\tobject.hashAlgorithm = this.hashAlgorithm.toJSON();\r\n\r\n\t\tif(!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(\"maskGenAlgorithm\")))\r\n\t\t\tobject.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();\r\n\r\n\t\tif(this.saltLength !== RSASSAPSSParams.defaultValues(\"saltLength\"))\r\n\t\t\tobject.saltLength = this.saltLength;\r\n\r\n\t\tif(this.trailerField !== RSASSAPSSParams.defaultValues(\"trailerField\"))\r\n\t\t\tobject.trailerField = this.trailerField;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}