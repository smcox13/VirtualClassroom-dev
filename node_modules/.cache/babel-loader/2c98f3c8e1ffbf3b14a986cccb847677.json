{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _constants = require('../constants');\n\nvar _util = require('./util.js');\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @class Member\n */\n\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar Member = function () {\n  /**\n   * @param {Object} participant - the locus participant\n   * @param {Object} [options] - constructor params\n   * @param {String} options.selfId\n   * @param {String} options.hostId\n   * @param {String} options.contentSharingId\n   * @param {String} options.type\n   * @returns {Member}\n   * @memberof Member\n   */\n  function Member(participant) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    (0, _classCallCheck3.default)(this, Member);\n    this.namespace = _constants.MEETINGS;\n    /**\n     * The server participant object\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof Member\n    */\n\n    this.participant = null;\n    /**\n     * The member id\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof Member\n    */\n\n    this.id = null;\n    /**\n     * The member name\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof Member\n    */\n\n    this.name = null;\n    /**\n     * The member email\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof Member\n    */\n\n    this.email = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n\n    this.isAudioMuted = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n\n    this.isVideoMuted = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n\n    this.isSelf = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n\n    this.isHost = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n\n    this.isGuest = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n\n    this.isInLobby = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n\n    this.isInMeeting = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n\n    this.isNotAdmitted = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n\n    this.isContentSharing = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n\n    this.status = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n\n    this.isDevice = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n\n    this.isUser = null;\n    /**\n         * Is this member associated to another user by way of pairing (typical of devices)\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof Member\n    */\n\n    this.associatedUser = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n\n    this.isRecording = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n\n    this.isMutable = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n\n    this.isRemovable = null;\n    /**\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Member\n    */\n\n    this.type = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n\n    this.isModerator = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n\n    this.isModeratorAssignmentProhibited = null; // TODO: more participant types\n    // such as native client, web client, is a device, what type of phone, etc\n\n    this.processParticipant(participant);\n    this.processParticipantOptions(participant, options);\n    this.processMember();\n  }\n  /**\n   * set all the participant values extracted directly from locus participant\n   * @param {Object} participant the locus participant object\n   * @returns {undefined}\n   * @private\n   * @memberof Member\n   */\n\n\n  (0, _createClass3.default)(Member, [{\n    key: 'processParticipant',\n    value: function processParticipant(participant) {\n      this.participant = participant;\n\n      if (participant) {\n        this.id = _util2.default.extractId(participant);\n        this.name = _util2.default.extractName(participant);\n        this.email = _util2.default.extractEmail(participant);\n        this.isAudioMuted = _util2.default.isAudioMuted(participant);\n        this.isVideoMuted = _util2.default.isVideoMuted(participant);\n        this.isGuest = _util2.default.isGuest(participant);\n        this.isUser = _util2.default.isUser(participant);\n        this.isDevice = _util2.default.isDevice(participant);\n        this.isModerator = _util2.default.isModerator(participant);\n        this.isModeratorAssignmentProhibited = _util2.default.isModeratorAssignmentProhibited(participant);\n        this.processStatus(participant); // must be done last\n\n        this.isNotAdmitted = _util2.default.isNotAdmitted(participant, this.isGuest, this.status);\n      }\n    }\n    /**\n     * Use the members options and participant values to set on the member\n     * @param {Object} participant the locus participant object\n     * @param {Object} options the passed in options, what was set on members\n     * @returns {undefined}\n     * @private\n     * @memberof Member\n     */\n\n  }, {\n    key: 'processParticipantOptions',\n    value: function processParticipantOptions(participant, options) {\n      if (participant && options) {\n        this.processIsSelf(participant, options.selfId);\n        this.processIsHost(participant, options.hostId);\n        this.processIsContentSharing(participant, options.contentSharingId);\n        this.processType(options.type);\n        this.processIsRecording(participant, options.recordingId);\n      }\n    }\n    /**\n     * processes what already exists on the member to determine other info about the member\n     * @returns {undefined}\n     * @private\n     * @memberof Member\n     */\n\n  }, {\n    key: 'processMember',\n    value: function processMember() {\n      // must occur after self, guest, meeting, and type properties are calculated\n      this.isRemovable = _util2.default.isRemovable(this.isSelf, this.isGuest, this.isInMeeting, this.type); // must occur after self, device, meeting, mute status, and type properties are calculated\n\n      this.isMutable = _util2.default.isMutable(this.isSelf, this.isDevice, this.isInMeeting, this.isAudioMuted, this.type);\n    }\n    /**\n     * set the status on member object\n     * @param {Object} participant the locus participant object\n     * @returns {undefined}\n     * @private\n     * @memberof Member\n     */\n\n  }, {\n    key: 'processStatus',\n    value: function processStatus(participant) {\n      this.status = _util2.default.extractStatus(participant);\n\n      switch (this.status) {\n        case _constants._IN_LOBBY_:\n          this.isInLobby = true;\n          this.isInMeeting = false;\n          break;\n\n        case _constants._IN_MEETING_:\n          this.isInLobby = false;\n          this.isInMeeting = true;\n          break;\n\n        case _constants._NOT_IN_MEETING_:\n          this.isInLobby = false;\n          this.isInMeeting = false;\n          break;\n\n        default:\n          this.isInLobby = false;\n          this.isInMeeting = false;\n      }\n    }\n    /**\n     * set the isContentSharing on member\n     * @param {Boolean} flag\n     * @returns {undefined}\n     * @public\n     * @memberof Member\n     */\n\n  }, {\n    key: 'setIsContentSharing',\n    value: function setIsContentSharing(flag) {\n      this.isContentSharing = flag;\n    }\n    /**\n     * set the isHost on member\n     * @param {Boolean} flag\n     * @returns {undefined}\n     * @public\n     * @memberof Member\n     */\n\n  }, {\n    key: 'setIsHost',\n    value: function setIsHost(flag) {\n      this.isHost = flag;\n    }\n    /**\n     * set the isSelf on member\n     * @param {Boolean} flag\n     * @returns {undefined}\n     * @public\n     * @memberof Member\n     */\n\n  }, {\n    key: 'setIsSelf',\n    value: function setIsSelf(flag) {\n      this.isSelf = flag;\n    }\n    /**\n     * determine if this member is content sharing\n     * @param {Object} participant\n     * @param {String} sharingId\n     * @returns {undefined}\n     * @public\n     * @memberof Member\n     */\n\n  }, {\n    key: 'processIsContentSharing',\n    value: function processIsContentSharing(participant, sharingId) {\n      if (_util2.default.isUser(participant)) {\n        this.isContentSharing = _util2.default.isSame(participant, sharingId);\n      } else if (_util2.default.isDevice(participant)) {\n        this.isContentSharing = _util2.default.isAssociatedSame(participant, sharingId);\n      }\n    }\n    /**\n     * Determine if this member is recording\n     * @param {Object} participant\n     * @param {String} recordingId\n     * @returns {undefined}\n     * @public\n     * @memberof Member\n     */\n\n  }, {\n    key: 'processIsRecording',\n    value: function processIsRecording(participant, recordingId) {\n      this.isRecording = _util2.default.isSame(participant, recordingId);\n    }\n    /**\n     * determine if this member is the self\n     * @param {Object} participant\n     * @param {String} selfId\n     * @returns {undefined}\n     * @private\n     * @memberof Member\n     */\n\n  }, {\n    key: 'processIsSelf',\n    value: function processIsSelf(participant, selfId) {\n      if (_util2.default.isUser(participant)) {\n        this.isSelf = _util2.default.isSame(participant, selfId);\n      } else if (_util2.default.isDevice(participant)) {\n        this.isSelf = _util2.default.isAssociatedSame(participant, selfId);\n        this.associatedUser = selfId;\n      }\n    }\n    /**\n     * determine if this member is the host\n     * @param {Object} participant\n     * @param {String} hostId\n     * @returns {undefined}\n     * @private\n     * @memberof Member\n     */\n\n  }, {\n    key: 'processIsHost',\n    value: function processIsHost(participant, hostId) {\n      if (_util2.default.isUser(participant)) {\n        this.isHost = _util2.default.isSame(participant, hostId);\n      } else if (_util2.default.isDevice(participant)) {\n        this.isHost = _util2.default.isAssociatedSame(participant, hostId);\n      }\n    }\n    /**\n     * set the type for the member, could be MEETING or CALL\n     * @param {String} type\n     * @returns {undefined}\n     * @private\n     * @memberof Member\n     */\n\n  }, {\n    key: 'processType',\n    value: function processType(type) {\n      this.type = type;\n    }\n  }]);\n  return Member;\n}();\n\nexports.default = Member;","map":{"version":3,"sources":["index.js"],"names":["Member","namespace","MEETINGS","options","participant","MemberUtil","_IN_LOBBY_","_IN_MEETING_","_NOT_IN_MEETING_","flag","sharingId","recordingId","selfId","hostId","type"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\nimport {\n  MEETINGS,\n  _IN_LOBBY_,\n  _NOT_IN_MEETING_,\n  _IN_MEETING_\n} from '../constants';\n\nimport MemberUtil from './util.js';\n\n/**\n * @class Member\n */\nexport default class Member {\n  namespace = MEETINGS;\n\n  /**\n   * @param {Object} participant - the locus participant\n   * @param {Object} [options] - constructor params\n   * @param {String} options.selfId\n   * @param {String} options.hostId\n   * @param {String} options.contentSharingId\n   * @param {String} options.type\n   * @returns {Member}\n   * @memberof Member\n   */\n  constructor(participant, options = {}) {\n    /**\n     * The server participant object\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof Member\n    */\n    this.participant = null;\n    /**\n     * The member id\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof Member\n    */\n    this.id = null;\n    /**\n     * The member name\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof Member\n    */\n    this.name = null;\n    /**\n     * The member email\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof Member\n    */\n    this.email = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isAudioMuted = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isVideoMuted = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isSelf = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isHost = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isGuest = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isInLobby = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isInMeeting = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isNotAdmitted = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isContentSharing = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.status = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isDevice = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isUser = null;\n    /**\n         * Is this member associated to another user by way of pairing (typical of devices)\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof Member\n    */\n    this.associatedUser = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isRecording = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isMutable = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isRemovable = null;\n    /**\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Member\n    */\n    this.type = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isModerator = null;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @public\n     * @memberof Member\n    */\n    this.isModeratorAssignmentProhibited = null;\n    // TODO: more participant types\n    // such as native client, web client, is a device, what type of phone, etc\n    this.processParticipant(participant);\n    this.processParticipantOptions(participant, options);\n    this.processMember();\n  }\n\n  /**\n   * set all the participant values extracted directly from locus participant\n   * @param {Object} participant the locus participant object\n   * @returns {undefined}\n   * @private\n   * @memberof Member\n   */\n  processParticipant(participant) {\n    this.participant = participant;\n    if (participant) {\n      this.id = MemberUtil.extractId(participant);\n      this.name = MemberUtil.extractName(participant);\n      this.email = MemberUtil.extractEmail(participant);\n      this.isAudioMuted = MemberUtil.isAudioMuted(participant);\n      this.isVideoMuted = MemberUtil.isVideoMuted(participant);\n      this.isGuest = MemberUtil.isGuest(participant);\n      this.isUser = MemberUtil.isUser(participant);\n      this.isDevice = MemberUtil.isDevice(participant);\n      this.isModerator = MemberUtil.isModerator(participant);\n      this.isModeratorAssignmentProhibited = MemberUtil.isModeratorAssignmentProhibited(participant);\n      this.processStatus(participant);\n      // must be done last\n      this.isNotAdmitted = MemberUtil.isNotAdmitted(participant, this.isGuest, this.status);\n    }\n  }\n\n  /**\n   * Use the members options and participant values to set on the member\n   * @param {Object} participant the locus participant object\n   * @param {Object} options the passed in options, what was set on members\n   * @returns {undefined}\n   * @private\n   * @memberof Member\n   */\n  processParticipantOptions(participant, options) {\n    if (participant && options) {\n      this.processIsSelf(participant, options.selfId);\n      this.processIsHost(participant, options.hostId);\n      this.processIsContentSharing(participant, options.contentSharingId);\n      this.processType(options.type);\n      this.processIsRecording(participant, options.recordingId);\n    }\n  }\n\n  /**\n   * processes what already exists on the member to determine other info about the member\n   * @returns {undefined}\n   * @private\n   * @memberof Member\n   */\n  processMember() {\n    // must occur after self, guest, meeting, and type properties are calculated\n    this.isRemovable = MemberUtil.isRemovable(this.isSelf, this.isGuest, this.isInMeeting, this.type);\n    // must occur after self, device, meeting, mute status, and type properties are calculated\n    this.isMutable = MemberUtil.isMutable(this.isSelf, this.isDevice, this.isInMeeting, this.isAudioMuted, this.type);\n  }\n\n  /**\n   * set the status on member object\n   * @param {Object} participant the locus participant object\n   * @returns {undefined}\n   * @private\n   * @memberof Member\n   */\n  processStatus(participant) {\n    this.status = MemberUtil.extractStatus(participant);\n    switch (this.status) {\n      case _IN_LOBBY_:\n        this.isInLobby = true;\n        this.isInMeeting = false;\n        break;\n      case _IN_MEETING_:\n        this.isInLobby = false;\n        this.isInMeeting = true;\n        break;\n      case _NOT_IN_MEETING_:\n        this.isInLobby = false;\n        this.isInMeeting = false;\n        break;\n      default:\n        this.isInLobby = false;\n        this.isInMeeting = false;\n    }\n  }\n\n  /**\n   * set the isContentSharing on member\n   * @param {Boolean} flag\n   * @returns {undefined}\n   * @public\n   * @memberof Member\n   */\n  setIsContentSharing(flag) {\n    this.isContentSharing = flag;\n  }\n\n  /**\n   * set the isHost on member\n   * @param {Boolean} flag\n   * @returns {undefined}\n   * @public\n   * @memberof Member\n   */\n  setIsHost(flag) {\n    this.isHost = flag;\n  }\n\n  /**\n   * set the isSelf on member\n   * @param {Boolean} flag\n   * @returns {undefined}\n   * @public\n   * @memberof Member\n   */\n  setIsSelf(flag) {\n    this.isSelf = flag;\n  }\n\n  /**\n   * determine if this member is content sharing\n   * @param {Object} participant\n   * @param {String} sharingId\n   * @returns {undefined}\n   * @public\n   * @memberof Member\n   */\n  processIsContentSharing(participant, sharingId) {\n    if (MemberUtil.isUser(participant)) {\n      this.isContentSharing = MemberUtil.isSame(participant, sharingId);\n    }\n    else if (MemberUtil.isDevice(participant)) {\n      this.isContentSharing = MemberUtil.isAssociatedSame(participant, sharingId);\n    }\n  }\n\n  /**\n   * Determine if this member is recording\n   * @param {Object} participant\n   * @param {String} recordingId\n   * @returns {undefined}\n   * @public\n   * @memberof Member\n   */\n  processIsRecording(participant, recordingId) {\n    this.isRecording = MemberUtil.isSame(participant, recordingId);\n  }\n\n  /**\n   * determine if this member is the self\n   * @param {Object} participant\n   * @param {String} selfId\n   * @returns {undefined}\n   * @private\n   * @memberof Member\n   */\n  processIsSelf(participant, selfId) {\n    if (MemberUtil.isUser(participant)) {\n      this.isSelf = MemberUtil.isSame(participant, selfId);\n    }\n    else if (MemberUtil.isDevice(participant)) {\n      this.isSelf = MemberUtil.isAssociatedSame(participant, selfId);\n      this.associatedUser = selfId;\n    }\n  }\n\n  /**\n   * determine if this member is the host\n   * @param {Object} participant\n   * @param {String} hostId\n   * @returns {undefined}\n   * @private\n   * @memberof Member\n   */\n  processIsHost(participant, hostId) {\n    if (MemberUtil.isUser(participant)) {\n      this.isHost = MemberUtil.isSame(participant, hostId);\n    }\n    else if (MemberUtil.isDevice(participant)) {\n      this.isHost = MemberUtil.isAssociatedSame(participant, hostId);\n    }\n  }\n\n  /**\n   * set the type for the member, could be MEETING or CALL\n   * @param {String} type\n   * @returns {undefined}\n   * @private\n   * @memberof Member\n   */\n  processType(type) {\n    this.type = type;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}