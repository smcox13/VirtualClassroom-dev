{"ast":null,"code":"/**\n * Copyright (c) 2020, Peculiar Ventures, All rights reserved.\n */\nimport * as asn1 from 'asn1js';\nimport { Null, fromBER, Integer, Enumerated, BitString, ObjectIdentifier, Boolean, OctetString, BmpString, UniversalString, NumericString, PrintableString, TeletexString, VideotexString, IA5String, GraphicString, VisibleString, GeneralString, CharacterString, UTCTime, GeneralizedTime, Utf8String, Any, Repeated, Primitive, Constructed, Choice, Set, Sequence, compareSchema } from 'asn1js';\nconst AsnAnyConverter = {\n  fromASN: value => value instanceof Null ? null : value.valueBeforeDecode,\n  toASN: value => {\n    if (value === null) {\n      return new Null();\n    }\n\n    const schema = fromBER(value);\n\n    if (schema.result.error) {\n      throw new Error(schema.result.error);\n    }\n\n    return schema.result;\n  }\n};\nconst AsnIntegerConverter = {\n  fromASN: value => !value.valueBlock.valueDec && value.valueBlock.valueHex.byteLength > 0 ? value.valueBlock.toString() : value.valueBlock.valueDec,\n  toASN: value => new Integer({\n    value\n  })\n};\nconst AsnEnumeratedConverter = {\n  fromASN: value => value.valueBlock.valueDec,\n  toASN: value => new Enumerated({\n    value\n  })\n};\nconst AsnIntegerArrayBufferConverter = {\n  fromASN: value => value.valueBlock.valueHex,\n  toASN: value => new Integer({\n    valueHex: value\n  })\n};\nconst AsnBitStringConverter = {\n  fromASN: value => value.valueBlock.valueHex,\n  toASN: value => new BitString({\n    valueHex: value\n  })\n};\nconst AsnObjectIdentifierConverter = {\n  fromASN: value => value.valueBlock.toString(),\n  toASN: value => new ObjectIdentifier({\n    value\n  })\n};\nconst AsnBooleanConverter = {\n  fromASN: value => value.valueBlock.value,\n  toASN: value => new Boolean({\n    value\n  })\n};\nconst AsnOctetStringConverter = {\n  fromASN: value => value.valueBlock.valueHex,\n  toASN: value => new OctetString({\n    valueHex: value\n  })\n};\n\nfunction createStringConverter(Asn1Type) {\n  return {\n    fromASN: value => value.valueBlock.value,\n    toASN: value => new Asn1Type({\n      value\n    })\n  };\n}\n\nconst AsnUtf8StringConverter = createStringConverter(Utf8String);\nconst AsnBmpStringConverter = createStringConverter(BmpString);\nconst AsnUniversalStringConverter = createStringConverter(UniversalString);\nconst AsnNumericStringConverter = createStringConverter(NumericString);\nconst AsnPrintableStringConverter = createStringConverter(PrintableString);\nconst AsnTeletexStringConverter = createStringConverter(TeletexString);\nconst AsnVideotexStringConverter = createStringConverter(VideotexString);\nconst AsnIA5StringConverter = createStringConverter(IA5String);\nconst AsnGraphicStringConverter = createStringConverter(GraphicString);\nconst AsnVisibleStringConverter = createStringConverter(VisibleString);\nconst AsnGeneralStringConverter = createStringConverter(GeneralString);\nconst AsnCharacterStringConverter = createStringConverter(CharacterString);\nconst AsnUTCTimeConverter = {\n  fromASN: value => value.toDate(),\n  toASN: value => new UTCTime({\n    valueDate: value\n  })\n};\nconst AsnGeneralizedTimeConverter = {\n  fromASN: value => value.toDate(),\n  toASN: value => new GeneralizedTime({\n    valueDate: value\n  })\n};\nvar defaultConverters = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  AsnAnyConverter: AsnAnyConverter,\n  AsnIntegerConverter: AsnIntegerConverter,\n  AsnEnumeratedConverter: AsnEnumeratedConverter,\n  AsnIntegerArrayBufferConverter: AsnIntegerArrayBufferConverter,\n  AsnBitStringConverter: AsnBitStringConverter,\n  AsnObjectIdentifierConverter: AsnObjectIdentifierConverter,\n  AsnBooleanConverter: AsnBooleanConverter,\n  AsnOctetStringConverter: AsnOctetStringConverter,\n  AsnUtf8StringConverter: AsnUtf8StringConverter,\n  AsnBmpStringConverter: AsnBmpStringConverter,\n  AsnUniversalStringConverter: AsnUniversalStringConverter,\n  AsnNumericStringConverter: AsnNumericStringConverter,\n  AsnPrintableStringConverter: AsnPrintableStringConverter,\n  AsnTeletexStringConverter: AsnTeletexStringConverter,\n  AsnVideotexStringConverter: AsnVideotexStringConverter,\n  AsnIA5StringConverter: AsnIA5StringConverter,\n  AsnGraphicStringConverter: AsnGraphicStringConverter,\n  AsnVisibleStringConverter: AsnVisibleStringConverter,\n  AsnGeneralStringConverter: AsnGeneralStringConverter,\n  AsnCharacterStringConverter: AsnCharacterStringConverter,\n  AsnUTCTimeConverter: AsnUTCTimeConverter,\n  AsnGeneralizedTimeConverter: AsnGeneralizedTimeConverter\n});\nvar AsnTypeTypes;\n\n(function (AsnTypeTypes) {\n  AsnTypeTypes[AsnTypeTypes[\"Sequence\"] = 0] = \"Sequence\";\n  AsnTypeTypes[AsnTypeTypes[\"Set\"] = 1] = \"Set\";\n  AsnTypeTypes[AsnTypeTypes[\"Choice\"] = 2] = \"Choice\";\n})(AsnTypeTypes || (AsnTypeTypes = {}));\n\nvar AsnPropTypes;\n\n(function (AsnPropTypes) {\n  AsnPropTypes[AsnPropTypes[\"Any\"] = 0] = \"Any\";\n  AsnPropTypes[AsnPropTypes[\"Boolean\"] = 1] = \"Boolean\";\n  AsnPropTypes[AsnPropTypes[\"OctetString\"] = 2] = \"OctetString\";\n  AsnPropTypes[AsnPropTypes[\"BitString\"] = 3] = \"BitString\";\n  AsnPropTypes[AsnPropTypes[\"Integer\"] = 4] = \"Integer\";\n  AsnPropTypes[AsnPropTypes[\"Enumerated\"] = 5] = \"Enumerated\";\n  AsnPropTypes[AsnPropTypes[\"ObjectIdentifier\"] = 6] = \"ObjectIdentifier\";\n  AsnPropTypes[AsnPropTypes[\"Utf8String\"] = 7] = \"Utf8String\";\n  AsnPropTypes[AsnPropTypes[\"BmpString\"] = 8] = \"BmpString\";\n  AsnPropTypes[AsnPropTypes[\"UniversalString\"] = 9] = \"UniversalString\";\n  AsnPropTypes[AsnPropTypes[\"NumericString\"] = 10] = \"NumericString\";\n  AsnPropTypes[AsnPropTypes[\"PrintableString\"] = 11] = \"PrintableString\";\n  AsnPropTypes[AsnPropTypes[\"TeletexString\"] = 12] = \"TeletexString\";\n  AsnPropTypes[AsnPropTypes[\"VideotexString\"] = 13] = \"VideotexString\";\n  AsnPropTypes[AsnPropTypes[\"IA5String\"] = 14] = \"IA5String\";\n  AsnPropTypes[AsnPropTypes[\"GraphicString\"] = 15] = \"GraphicString\";\n  AsnPropTypes[AsnPropTypes[\"VisibleString\"] = 16] = \"VisibleString\";\n  AsnPropTypes[AsnPropTypes[\"GeneralString\"] = 17] = \"GeneralString\";\n  AsnPropTypes[AsnPropTypes[\"CharacterString\"] = 18] = \"CharacterString\";\n  AsnPropTypes[AsnPropTypes[\"UTCTime\"] = 19] = \"UTCTime\";\n  AsnPropTypes[AsnPropTypes[\"GeneralizedTime\"] = 20] = \"GeneralizedTime\";\n  AsnPropTypes[AsnPropTypes[\"DATE\"] = 21] = \"DATE\";\n  AsnPropTypes[AsnPropTypes[\"TimeOfDay\"] = 22] = \"TimeOfDay\";\n  AsnPropTypes[AsnPropTypes[\"DateTime\"] = 23] = \"DateTime\";\n  AsnPropTypes[AsnPropTypes[\"Duration\"] = 24] = \"Duration\";\n  AsnPropTypes[AsnPropTypes[\"TIME\"] = 25] = \"TIME\";\n  AsnPropTypes[AsnPropTypes[\"Null\"] = 26] = \"Null\";\n})(AsnPropTypes || (AsnPropTypes = {}));\n\nclass AsnSchemaStorage {\n  constructor() {\n    this.items = new Map();\n  }\n\n  has(target) {\n    return this.items.has(target);\n  }\n\n  get(target) {\n    const schema = this.items.get(target);\n\n    if (!schema) {\n      throw new Error(\"Cannot get schema for current target\");\n    }\n\n    return schema;\n  }\n\n  cache(target) {\n    const schema = this.get(target);\n\n    if (!schema.schema) {\n      schema.schema = this.create(target, true);\n    }\n  }\n\n  createDefault(target) {\n    const schema = {\n      type: AsnTypeTypes.Sequence,\n      items: {}\n    };\n    const parentSchema = this.findParentSchema(target);\n\n    if (parentSchema) {\n      Object.assign(schema, parentSchema);\n      schema.items = Object.assign({}, schema.items, parentSchema.items);\n    }\n\n    return schema;\n  }\n\n  create(target, useNames) {\n    const schema = this.items.get(target) || this.createDefault(target);\n    const asn1Value = [];\n\n    for (const key in schema.items) {\n      const item = schema.items[key];\n      const name = useNames ? key : \"\";\n      let asn1Item;\n\n      if (typeof item.type === \"number\") {\n        const Asn1TypeName = AsnPropTypes[item.type];\n        const Asn1Type = asn1[Asn1TypeName];\n\n        if (!Asn1Type) {\n          throw new Error(`Cannot get ASN1 class by name '${Asn1TypeName}'`);\n        }\n\n        asn1Item = new Asn1Type({\n          name\n        });\n      } else {\n        asn1Item = new Any({\n          name\n        });\n      }\n\n      const optional = !!item.optional || item.defaultValue !== undefined;\n\n      if (item.repeated) {\n        asn1Item.name = \"\";\n        asn1Item = new Repeated({\n          name,\n          value: asn1Item\n        });\n      }\n\n      if (item.context !== null && item.context !== undefined) {\n        if (item.implicit) {\n          if (typeof item.type === \"number\") {\n            asn1Value.push(new Primitive({\n              name,\n              optional,\n              idBlock: {\n                tagClass: 3,\n                tagNumber: item.context\n              }\n            }));\n          } else {\n            this.cache(item.type);\n            const value = this.get(item.type).schema.valueBlock.value;\n            asn1Value.push(new Constructed({\n              name,\n              optional,\n              idBlock: {\n                tagClass: 3,\n                tagNumber: item.context\n              },\n              value\n            }));\n          }\n        } else {\n          asn1Value.push(new Constructed({\n            optional,\n            idBlock: {\n              tagClass: 3,\n              tagNumber: item.context\n            },\n            value: [asn1Item]\n          }));\n        }\n      } else {\n        asn1Item.optional = optional;\n        asn1Value.push(asn1Item);\n      }\n    }\n\n    switch (schema.type) {\n      case AsnTypeTypes.Sequence:\n        return new Sequence({\n          value: asn1Value,\n          name: \"\"\n        });\n\n      case AsnTypeTypes.Set:\n        return new Set({\n          value: asn1Value,\n          name: \"\"\n        });\n\n      case AsnTypeTypes.Choice:\n        return new Choice({\n          value: asn1Value,\n          name: \"\"\n        });\n\n      default:\n        throw new Error(`Unsupported ASN1 type in use`);\n    }\n  }\n\n  set(target, schema) {\n    this.items.set(target, schema);\n    return this;\n  }\n\n  findParentSchema(target) {\n    const parent = target.__proto__;\n\n    if (parent) {\n      const schema = this.items.get(parent);\n      return schema || this.findParentSchema(parent);\n    }\n\n    return null;\n  }\n\n}\n\nconst schemaStorage = new AsnSchemaStorage();\n\nconst AsnType = options => target => {\n  const schema = schemaStorage.get(target);\n  Object.assign(schema, options);\n};\n\nconst AsnProp = options => (target, propertyKey) => {\n  let schema;\n\n  if (!schemaStorage.has(target.constructor)) {\n    schema = schemaStorage.createDefault(target.constructor);\n    schemaStorage.set(target.constructor, schema);\n  } else {\n    schema = schemaStorage.get(target.constructor);\n  }\n\n  const copyOptions = Object.assign({}, options);\n\n  if (typeof copyOptions.type === \"number\" && !copyOptions.converter) {\n    const converterName = `Asn${AsnPropTypes[options.type]}Converter`;\n    const defaultConverter = defaultConverters[converterName];\n\n    if (!defaultConverter) {\n      throw new Error(`Cannot get '${converterName}' for property '${propertyKey}' of ${target.constructor.name}`);\n    }\n\n    copyOptions.converter = defaultConverter;\n  }\n\n  schema.items[propertyKey] = copyOptions;\n};\n\nfunction isConvertible(target) {\n  if (target && target.prototype) {\n    if (target.prototype.toASN && target.prototype.fromASN) {\n      return true;\n    } else {\n      return isConvertible(target.prototype);\n    }\n  } else {\n    return !!(target && target.toASN && target.fromASN);\n  }\n}\n\nclass AsnParser {\n  static parse(data, target) {\n    let buf;\n\n    if (data instanceof ArrayBuffer) {\n      buf = data;\n    } else if (typeof Buffer !== undefined && Buffer.isBuffer(data)) {\n      buf = new Uint8Array(data).buffer;\n    } else if (ArrayBuffer.isView(data)) {\n      buf = data.buffer;\n    } else {\n      throw new TypeError(\"Wrong type of 'data' argument\");\n    }\n\n    const asn1Parsed = fromBER(buf);\n\n    if (asn1Parsed.result.error) {\n      throw new Error(asn1Parsed.result.error);\n    }\n\n    const res = this.fromASN(asn1Parsed.result, target);\n    return res;\n  }\n\n  static fromASN(asn1Schema, target) {\n    if (isConvertible(target)) {\n      const value = new target();\n      return value.fromASN(asn1Schema);\n    }\n\n    const schema = schemaStorage.get(target);\n    schemaStorage.cache(target);\n    let targetSchema = schema.schema;\n\n    if (asn1Schema.constructor === Constructed && schema.type !== AsnTypeTypes.Choice) {\n      targetSchema = new Constructed({\n        idBlock: {\n          tagClass: 3,\n          tagNumber: asn1Schema.idBlock.tagNumber\n        },\n        value: schema.schema.valueBlock.value\n      });\n\n      for (const key in schema.items) {\n        delete asn1Schema[key];\n      }\n    }\n\n    const asn1ComparedSchema = compareSchema(asn1Schema, asn1Schema, targetSchema);\n\n    if (!asn1ComparedSchema.verified) {\n      throw new Error(`Data does not match to ${target.name} ASN1 schema. ${asn1ComparedSchema.result.error}`);\n    }\n\n    const res = new target();\n\n    for (const key in schema.items) {\n      if (!asn1Schema[key]) {\n        continue;\n      }\n\n      const schemaItem = schema.items[key];\n\n      if (typeof schemaItem.type === \"number\") {\n        const converter = schemaItem.converter;\n\n        if (!converter) {\n          throw new Error(\"Converter is empty\");\n        }\n\n        if (schemaItem.repeated) {\n          res[key] = Array.from(asn1Schema[key], element => converter.fromASN(element));\n        } else {\n          let value = asn1Schema[key];\n\n          if (schemaItem.implicit) {\n            const Asn1TypeName = AsnPropTypes[schemaItem.type];\n            const Asn1Type = asn1[Asn1TypeName];\n\n            if (!Asn1Type) {\n              throw new Error(`Cannot get '${Asn1TypeName}' class from asn1js module`);\n            }\n\n            const newItem = new Asn1Type();\n            newItem.valueBlock = value.valueBlock;\n            value = fromBER(newItem.toBER(false)).result;\n          }\n\n          res[key] = converter.fromASN(value);\n        }\n      } else {\n        if (schemaItem.repeated) {\n          res[key] = Array.from(asn1Schema[key], element => this.fromASN(element, schemaItem.type));\n        } else {\n          res[key] = this.fromASN(asn1Schema[key], schemaItem.type);\n        }\n      }\n    }\n\n    res._cache = {\n      asn1: asn1Schema\n    };\n    return res;\n  }\n\n}\n\nclass AsnSerializer {\n  static serialize(obj) {\n    return this.toASN(obj).toBER(false);\n  }\n\n  static toASN(obj) {\n    if (obj && isConvertible(obj.constructor)) {\n      return obj.toASN();\n    }\n\n    const target = obj.constructor;\n    const schema = schemaStorage.get(target);\n    schemaStorage.cache(target);\n    let asn1Value = [];\n\n    for (const key in schema.items) {\n      const item = schema.items[key];\n      const objProp = obj[key];\n\n      if (objProp === undefined || item.defaultValue === objProp) {\n        continue;\n      }\n\n      let asn1Item;\n\n      if (typeof item.type === \"number\") {\n        const converter = item.converter;\n\n        if (!converter) {\n          throw new Error(`Property '${key}' doesn't have converter for type ${AsnPropTypes[item.type]} in schema '${target.name}'`);\n        }\n\n        if (item.repeated) {\n          asn1Item = Array.from(objProp, element => converter.toASN(element));\n        } else {\n          asn1Item = converter.toASN(objProp);\n        }\n      } else {\n        if (item.repeated) {\n          asn1Item = Array.from(objProp, element => this.toASN(element));\n        } else {\n          asn1Item = this.toASN(objProp);\n        }\n      }\n\n      if (item.context !== null && item.context !== undefined) {\n        if (item.implicit) {\n          if (typeof item.type === \"number\") {\n            const value = {};\n            value.valueHex = asn1Item.valueBlock.toBER();\n            asn1Value.push(new Primitive(Object.assign({\n              optional: item.optional,\n              idBlock: {\n                tagClass: 3,\n                tagNumber: item.context\n              }\n            }, value)));\n          } else {\n            asn1Value.push(new Constructed({\n              optional: item.optional,\n              idBlock: {\n                tagClass: 3,\n                tagNumber: item.context\n              },\n              value: asn1Item.valueBlock.value\n            }));\n          }\n        } else {\n          asn1Value.push(new Constructed({\n            optional: item.optional,\n            idBlock: {\n              tagClass: 3,\n              tagNumber: item.context\n            },\n            value: [asn1Item]\n          }));\n        }\n      } else if (item.repeated) {\n        asn1Value = asn1Value.concat(asn1Item);\n      } else {\n        asn1Value.push(asn1Item);\n      }\n    }\n\n    let asnSchema;\n\n    switch (schema.type) {\n      case AsnTypeTypes.Sequence:\n        asnSchema = new Sequence({\n          value: asn1Value\n        });\n        break;\n\n      case AsnTypeTypes.Set:\n        asnSchema = new Set({\n          value: asn1Value\n        });\n        break;\n\n      case AsnTypeTypes.Choice:\n        if (!asn1Value[0]) {\n          throw new Error(`Schema '${target.name}' has wrong data. Choice cannot be empty.`);\n        }\n\n        asnSchema = asn1Value[0];\n        break;\n    }\n\n    return asnSchema;\n  }\n\n}\n\nexport { AsnAnyConverter, AsnBitStringConverter, AsnBmpStringConverter, AsnBooleanConverter, AsnCharacterStringConverter, AsnEnumeratedConverter, AsnGeneralStringConverter, AsnGeneralizedTimeConverter, AsnGraphicStringConverter, AsnIA5StringConverter, AsnIntegerArrayBufferConverter, AsnIntegerConverter, AsnNumericStringConverter, AsnObjectIdentifierConverter, AsnOctetStringConverter, AsnParser, AsnPrintableStringConverter, AsnProp, AsnPropTypes, AsnSerializer, AsnTeletexStringConverter, AsnType, AsnTypeTypes, AsnUTCTimeConverter, AsnUniversalStringConverter, AsnUtf8StringConverter, AsnVideotexStringConverter, AsnVisibleStringConverter };","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/@peculiar/asn1-schema/build/index.es.js"],"names":["asn1","Null","fromBER","Integer","Enumerated","BitString","ObjectIdentifier","Boolean","OctetString","BmpString","UniversalString","NumericString","PrintableString","TeletexString","VideotexString","IA5String","GraphicString","VisibleString","GeneralString","CharacterString","UTCTime","GeneralizedTime","Utf8String","Any","Repeated","Primitive","Constructed","Choice","Set","Sequence","compareSchema","AsnAnyConverter","fromASN","value","valueBeforeDecode","toASN","schema","result","error","Error","AsnIntegerConverter","valueBlock","valueDec","valueHex","byteLength","toString","AsnEnumeratedConverter","AsnIntegerArrayBufferConverter","AsnBitStringConverter","AsnObjectIdentifierConverter","AsnBooleanConverter","AsnOctetStringConverter","createStringConverter","Asn1Type","AsnUtf8StringConverter","AsnBmpStringConverter","AsnUniversalStringConverter","AsnNumericStringConverter","AsnPrintableStringConverter","AsnTeletexStringConverter","AsnVideotexStringConverter","AsnIA5StringConverter","AsnGraphicStringConverter","AsnVisibleStringConverter","AsnGeneralStringConverter","AsnCharacterStringConverter","AsnUTCTimeConverter","toDate","valueDate","AsnGeneralizedTimeConverter","defaultConverters","Object","freeze","__proto__","AsnTypeTypes","AsnPropTypes","AsnSchemaStorage","constructor","items","Map","has","target","get","cache","create","createDefault","type","parentSchema","findParentSchema","assign","useNames","asn1Value","key","item","name","asn1Item","Asn1TypeName","optional","defaultValue","undefined","repeated","context","implicit","push","idBlock","tagClass","tagNumber","set","parent","schemaStorage","AsnType","options","AsnProp","propertyKey","copyOptions","converter","converterName","defaultConverter","isConvertible","prototype","AsnParser","parse","data","buf","ArrayBuffer","Buffer","isBuffer","Uint8Array","buffer","isView","TypeError","asn1Parsed","res","asn1Schema","targetSchema","asn1ComparedSchema","verified","schemaItem","Array","from","element","newItem","toBER","_cache","AsnSerializer","serialize","obj","objProp","concat","asnSchema"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2020, Peculiar Ventures, All rights reserved.\n */\n\nimport * as asn1 from 'asn1js';\nimport { Null, fromBER, Integer, Enumerated, BitString, ObjectIdentifier, Boolean, OctetString, BmpString, UniversalString, NumericString, PrintableString, TeletexString, VideotexString, IA5String, GraphicString, VisibleString, GeneralString, CharacterString, UTCTime, GeneralizedTime, Utf8String, Any, Repeated, Primitive, Constructed, Choice, Set, Sequence, compareSchema } from 'asn1js';\n\nconst AsnAnyConverter = {\r\n    fromASN: (value) => value instanceof Null ? null : value.valueBeforeDecode,\r\n    toASN: (value) => {\r\n        if (value === null) {\r\n            return new Null();\r\n        }\r\n        const schema = fromBER(value);\r\n        if (schema.result.error) {\r\n            throw new Error(schema.result.error);\r\n        }\r\n        return schema.result;\r\n    },\r\n};\r\nconst AsnIntegerConverter = {\r\n    fromASN: (value) => !value.valueBlock.valueDec && value.valueBlock.valueHex.byteLength > 0 ?\r\n        value.valueBlock.toString()\r\n        : value.valueBlock.valueDec,\r\n    toASN: (value) => new Integer({ value }),\r\n};\r\nconst AsnEnumeratedConverter = {\r\n    fromASN: (value) => value.valueBlock.valueDec,\r\n    toASN: (value) => new Enumerated({ value }),\r\n};\r\nconst AsnIntegerArrayBufferConverter = {\r\n    fromASN: (value) => value.valueBlock.valueHex,\r\n    toASN: (value) => new Integer({ valueHex: value }),\r\n};\r\nconst AsnBitStringConverter = {\r\n    fromASN: (value) => value.valueBlock.valueHex,\r\n    toASN: (value) => new BitString({ valueHex: value }),\r\n};\r\nconst AsnObjectIdentifierConverter = {\r\n    fromASN: (value) => value.valueBlock.toString(),\r\n    toASN: (value) => new ObjectIdentifier({ value }),\r\n};\r\nconst AsnBooleanConverter = {\r\n    fromASN: (value) => value.valueBlock.value,\r\n    toASN: (value) => new Boolean({ value }),\r\n};\r\nconst AsnOctetStringConverter = {\r\n    fromASN: (value) => value.valueBlock.valueHex,\r\n    toASN: (value) => new OctetString({ valueHex: value }),\r\n};\r\nfunction createStringConverter(Asn1Type) {\r\n    return {\r\n        fromASN: (value) => value.valueBlock.value,\r\n        toASN: (value) => new Asn1Type({ value }),\r\n    };\r\n}\r\nconst AsnUtf8StringConverter = createStringConverter(Utf8String);\r\nconst AsnBmpStringConverter = createStringConverter(BmpString);\r\nconst AsnUniversalStringConverter = createStringConverter(UniversalString);\r\nconst AsnNumericStringConverter = createStringConverter(NumericString);\r\nconst AsnPrintableStringConverter = createStringConverter(PrintableString);\r\nconst AsnTeletexStringConverter = createStringConverter(TeletexString);\r\nconst AsnVideotexStringConverter = createStringConverter(VideotexString);\r\nconst AsnIA5StringConverter = createStringConverter(IA5String);\r\nconst AsnGraphicStringConverter = createStringConverter(GraphicString);\r\nconst AsnVisibleStringConverter = createStringConverter(VisibleString);\r\nconst AsnGeneralStringConverter = createStringConverter(GeneralString);\r\nconst AsnCharacterStringConverter = createStringConverter(CharacterString);\r\nconst AsnUTCTimeConverter = {\r\n    fromASN: (value) => value.toDate(),\r\n    toASN: (value) => new UTCTime({ valueDate: value }),\r\n};\r\nconst AsnGeneralizedTimeConverter = {\r\n    fromASN: (value) => value.toDate(),\r\n    toASN: (value) => new GeneralizedTime({ valueDate: value }),\r\n};\n\nvar defaultConverters = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  AsnAnyConverter: AsnAnyConverter,\n  AsnIntegerConverter: AsnIntegerConverter,\n  AsnEnumeratedConverter: AsnEnumeratedConverter,\n  AsnIntegerArrayBufferConverter: AsnIntegerArrayBufferConverter,\n  AsnBitStringConverter: AsnBitStringConverter,\n  AsnObjectIdentifierConverter: AsnObjectIdentifierConverter,\n  AsnBooleanConverter: AsnBooleanConverter,\n  AsnOctetStringConverter: AsnOctetStringConverter,\n  AsnUtf8StringConverter: AsnUtf8StringConverter,\n  AsnBmpStringConverter: AsnBmpStringConverter,\n  AsnUniversalStringConverter: AsnUniversalStringConverter,\n  AsnNumericStringConverter: AsnNumericStringConverter,\n  AsnPrintableStringConverter: AsnPrintableStringConverter,\n  AsnTeletexStringConverter: AsnTeletexStringConverter,\n  AsnVideotexStringConverter: AsnVideotexStringConverter,\n  AsnIA5StringConverter: AsnIA5StringConverter,\n  AsnGraphicStringConverter: AsnGraphicStringConverter,\n  AsnVisibleStringConverter: AsnVisibleStringConverter,\n  AsnGeneralStringConverter: AsnGeneralStringConverter,\n  AsnCharacterStringConverter: AsnCharacterStringConverter,\n  AsnUTCTimeConverter: AsnUTCTimeConverter,\n  AsnGeneralizedTimeConverter: AsnGeneralizedTimeConverter\n});\n\nvar AsnTypeTypes;\r\n(function (AsnTypeTypes) {\r\n    AsnTypeTypes[AsnTypeTypes[\"Sequence\"] = 0] = \"Sequence\";\r\n    AsnTypeTypes[AsnTypeTypes[\"Set\"] = 1] = \"Set\";\r\n    AsnTypeTypes[AsnTypeTypes[\"Choice\"] = 2] = \"Choice\";\r\n})(AsnTypeTypes || (AsnTypeTypes = {}));\r\nvar AsnPropTypes;\r\n(function (AsnPropTypes) {\r\n    AsnPropTypes[AsnPropTypes[\"Any\"] = 0] = \"Any\";\r\n    AsnPropTypes[AsnPropTypes[\"Boolean\"] = 1] = \"Boolean\";\r\n    AsnPropTypes[AsnPropTypes[\"OctetString\"] = 2] = \"OctetString\";\r\n    AsnPropTypes[AsnPropTypes[\"BitString\"] = 3] = \"BitString\";\r\n    AsnPropTypes[AsnPropTypes[\"Integer\"] = 4] = \"Integer\";\r\n    AsnPropTypes[AsnPropTypes[\"Enumerated\"] = 5] = \"Enumerated\";\r\n    AsnPropTypes[AsnPropTypes[\"ObjectIdentifier\"] = 6] = \"ObjectIdentifier\";\r\n    AsnPropTypes[AsnPropTypes[\"Utf8String\"] = 7] = \"Utf8String\";\r\n    AsnPropTypes[AsnPropTypes[\"BmpString\"] = 8] = \"BmpString\";\r\n    AsnPropTypes[AsnPropTypes[\"UniversalString\"] = 9] = \"UniversalString\";\r\n    AsnPropTypes[AsnPropTypes[\"NumericString\"] = 10] = \"NumericString\";\r\n    AsnPropTypes[AsnPropTypes[\"PrintableString\"] = 11] = \"PrintableString\";\r\n    AsnPropTypes[AsnPropTypes[\"TeletexString\"] = 12] = \"TeletexString\";\r\n    AsnPropTypes[AsnPropTypes[\"VideotexString\"] = 13] = \"VideotexString\";\r\n    AsnPropTypes[AsnPropTypes[\"IA5String\"] = 14] = \"IA5String\";\r\n    AsnPropTypes[AsnPropTypes[\"GraphicString\"] = 15] = \"GraphicString\";\r\n    AsnPropTypes[AsnPropTypes[\"VisibleString\"] = 16] = \"VisibleString\";\r\n    AsnPropTypes[AsnPropTypes[\"GeneralString\"] = 17] = \"GeneralString\";\r\n    AsnPropTypes[AsnPropTypes[\"CharacterString\"] = 18] = \"CharacterString\";\r\n    AsnPropTypes[AsnPropTypes[\"UTCTime\"] = 19] = \"UTCTime\";\r\n    AsnPropTypes[AsnPropTypes[\"GeneralizedTime\"] = 20] = \"GeneralizedTime\";\r\n    AsnPropTypes[AsnPropTypes[\"DATE\"] = 21] = \"DATE\";\r\n    AsnPropTypes[AsnPropTypes[\"TimeOfDay\"] = 22] = \"TimeOfDay\";\r\n    AsnPropTypes[AsnPropTypes[\"DateTime\"] = 23] = \"DateTime\";\r\n    AsnPropTypes[AsnPropTypes[\"Duration\"] = 24] = \"Duration\";\r\n    AsnPropTypes[AsnPropTypes[\"TIME\"] = 25] = \"TIME\";\r\n    AsnPropTypes[AsnPropTypes[\"Null\"] = 26] = \"Null\";\r\n})(AsnPropTypes || (AsnPropTypes = {}));\n\nclass AsnSchemaStorage {\r\n    constructor() {\r\n        this.items = new Map();\r\n    }\r\n    has(target) {\r\n        return this.items.has(target);\r\n    }\r\n    get(target) {\r\n        const schema = this.items.get(target);\r\n        if (!schema) {\r\n            throw new Error(\"Cannot get schema for current target\");\r\n        }\r\n        return schema;\r\n    }\r\n    cache(target) {\r\n        const schema = this.get(target);\r\n        if (!schema.schema) {\r\n            schema.schema = this.create(target, true);\r\n        }\r\n    }\r\n    createDefault(target) {\r\n        const schema = {\r\n            type: AsnTypeTypes.Sequence,\r\n            items: {},\r\n        };\r\n        const parentSchema = this.findParentSchema(target);\r\n        if (parentSchema) {\r\n            Object.assign(schema, parentSchema);\r\n            schema.items = Object.assign({}, schema.items, parentSchema.items);\r\n        }\r\n        return schema;\r\n    }\r\n    create(target, useNames) {\r\n        const schema = this.items.get(target) || this.createDefault(target);\r\n        const asn1Value = [];\r\n        for (const key in schema.items) {\r\n            const item = schema.items[key];\r\n            const name = useNames ? key : \"\";\r\n            let asn1Item;\r\n            if (typeof (item.type) === \"number\") {\r\n                const Asn1TypeName = AsnPropTypes[item.type];\r\n                const Asn1Type = asn1[Asn1TypeName];\r\n                if (!Asn1Type) {\r\n                    throw new Error(`Cannot get ASN1 class by name '${Asn1TypeName}'`);\r\n                }\r\n                asn1Item = new Asn1Type({ name });\r\n            }\r\n            else {\r\n                asn1Item = new Any({ name });\r\n            }\r\n            const optional = !!item.optional || item.defaultValue !== undefined;\r\n            if (item.repeated) {\r\n                asn1Item.name = \"\";\r\n                asn1Item = new Repeated({\r\n                    name,\r\n                    value: asn1Item,\r\n                });\r\n            }\r\n            if (item.context !== null && item.context !== undefined) {\r\n                if (item.implicit) {\r\n                    if (typeof item.type === \"number\") {\r\n                        asn1Value.push(new Primitive({\r\n                            name,\r\n                            optional,\r\n                            idBlock: {\r\n                                tagClass: 3,\r\n                                tagNumber: item.context,\r\n                            },\r\n                        }));\r\n                    }\r\n                    else {\r\n                        this.cache(item.type);\r\n                        const value = this.get(item.type).schema.valueBlock.value;\r\n                        asn1Value.push(new Constructed({\r\n                            name,\r\n                            optional,\r\n                            idBlock: {\r\n                                tagClass: 3,\r\n                                tagNumber: item.context,\r\n                            },\r\n                            value,\r\n                        }));\r\n                    }\r\n                }\r\n                else {\r\n                    asn1Value.push(new Constructed({\r\n                        optional,\r\n                        idBlock: {\r\n                            tagClass: 3,\r\n                            tagNumber: item.context,\r\n                        },\r\n                        value: [asn1Item],\r\n                    }));\r\n                }\r\n            }\r\n            else {\r\n                asn1Item.optional = optional;\r\n                asn1Value.push(asn1Item);\r\n            }\r\n        }\r\n        switch (schema.type) {\r\n            case AsnTypeTypes.Sequence:\r\n                return new Sequence({ value: asn1Value, name: \"\" });\r\n            case AsnTypeTypes.Set:\r\n                return new Set({ value: asn1Value, name: \"\" });\r\n            case AsnTypeTypes.Choice:\r\n                return new Choice({ value: asn1Value, name: \"\" });\r\n            default:\r\n                throw new Error(`Unsupported ASN1 type in use`);\r\n        }\r\n    }\r\n    set(target, schema) {\r\n        this.items.set(target, schema);\r\n        return this;\r\n    }\r\n    findParentSchema(target) {\r\n        const parent = target.__proto__;\r\n        if (parent) {\r\n            const schema = this.items.get(parent);\r\n            return schema || this.findParentSchema(parent);\r\n        }\r\n        return null;\r\n    }\r\n}\n\nconst schemaStorage = new AsnSchemaStorage();\n\nconst AsnType = (options) => (target) => {\r\n    const schema = schemaStorage.get(target);\r\n    Object.assign(schema, options);\r\n};\r\nconst AsnProp = (options) => (target, propertyKey) => {\r\n    let schema;\r\n    if (!schemaStorage.has(target.constructor)) {\r\n        schema = schemaStorage.createDefault(target.constructor);\r\n        schemaStorage.set(target.constructor, schema);\r\n    }\r\n    else {\r\n        schema = schemaStorage.get(target.constructor);\r\n    }\r\n    const copyOptions = Object.assign({}, options);\r\n    if (typeof copyOptions.type === \"number\" && !copyOptions.converter) {\r\n        const converterName = `Asn${AsnPropTypes[options.type]}Converter`;\r\n        const defaultConverter = defaultConverters[converterName];\r\n        if (!defaultConverter) {\r\n            throw new Error(`Cannot get '${converterName}' for property '${propertyKey}' of ${target.constructor.name}`);\r\n        }\r\n        copyOptions.converter = defaultConverter;\r\n    }\r\n    schema.items[propertyKey] = copyOptions;\r\n};\n\nfunction isConvertible(target) {\r\n    if (target && target.prototype) {\r\n        if (target.prototype.toASN && target.prototype.fromASN) {\r\n            return true;\r\n        }\r\n        else {\r\n            return isConvertible(target.prototype);\r\n        }\r\n    }\r\n    else {\r\n        return !!(target && target.toASN && target.fromASN);\r\n    }\r\n}\n\nclass AsnParser {\r\n    static parse(data, target) {\r\n        let buf;\r\n        if (data instanceof ArrayBuffer) {\r\n            buf = data;\r\n        }\r\n        else if (typeof Buffer !== undefined && Buffer.isBuffer(data)) {\r\n            buf = new Uint8Array(data).buffer;\r\n        }\r\n        else if (ArrayBuffer.isView(data)) {\r\n            buf = data.buffer;\r\n        }\r\n        else {\r\n            throw new TypeError(\"Wrong type of 'data' argument\");\r\n        }\r\n        const asn1Parsed = fromBER(buf);\r\n        if (asn1Parsed.result.error) {\r\n            throw new Error(asn1Parsed.result.error);\r\n        }\r\n        const res = this.fromASN(asn1Parsed.result, target);\r\n        return res;\r\n    }\r\n    static fromASN(asn1Schema, target) {\r\n        if (isConvertible(target)) {\r\n            const value = new target();\r\n            return value.fromASN(asn1Schema);\r\n        }\r\n        const schema = schemaStorage.get(target);\r\n        schemaStorage.cache(target);\r\n        let targetSchema = schema.schema;\r\n        if (asn1Schema.constructor === Constructed && schema.type !== AsnTypeTypes.Choice) {\r\n            targetSchema = new Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: asn1Schema.idBlock.tagNumber,\r\n                },\r\n                value: schema.schema.valueBlock.value,\r\n            });\r\n            for (const key in schema.items) {\r\n                delete asn1Schema[key];\r\n            }\r\n        }\r\n        const asn1ComparedSchema = compareSchema(asn1Schema, asn1Schema, targetSchema);\r\n        if (!asn1ComparedSchema.verified) {\r\n            throw new Error(`Data does not match to ${target.name} ASN1 schema. ${asn1ComparedSchema.result.error}`);\r\n        }\r\n        const res = new target();\r\n        for (const key in schema.items) {\r\n            if (!asn1Schema[key]) {\r\n                continue;\r\n            }\r\n            const schemaItem = schema.items[key];\r\n            if (typeof (schemaItem.type) === \"number\") {\r\n                const converter = schemaItem.converter;\r\n                if (!converter) {\r\n                    throw new Error(\"Converter is empty\");\r\n                }\r\n                if (schemaItem.repeated) {\r\n                    res[key] = Array.from(asn1Schema[key], (element) => converter.fromASN(element));\r\n                }\r\n                else {\r\n                    let value = asn1Schema[key];\r\n                    if (schemaItem.implicit) {\r\n                        const Asn1TypeName = AsnPropTypes[schemaItem.type];\r\n                        const Asn1Type = asn1[Asn1TypeName];\r\n                        if (!Asn1Type) {\r\n                            throw new Error(`Cannot get '${Asn1TypeName}' class from asn1js module`);\r\n                        }\r\n                        const newItem = new Asn1Type();\r\n                        newItem.valueBlock = value.valueBlock;\r\n                        value = fromBER(newItem.toBER(false)).result;\r\n                    }\r\n                    res[key] = converter.fromASN(value);\r\n                }\r\n            }\r\n            else {\r\n                if (schemaItem.repeated) {\r\n                    res[key] = Array.from(asn1Schema[key], (element) => this.fromASN(element, schemaItem.type));\r\n                }\r\n                else {\r\n                    res[key] = this.fromASN(asn1Schema[key], schemaItem.type);\r\n                }\r\n            }\r\n        }\r\n        res._cache = { asn1: asn1Schema };\r\n        return res;\r\n    }\r\n}\n\nclass AsnSerializer {\r\n    static serialize(obj) {\r\n        return this.toASN(obj).toBER(false);\r\n    }\r\n    static toASN(obj) {\r\n        if (obj && isConvertible(obj.constructor)) {\r\n            return obj.toASN();\r\n        }\r\n        const target = obj.constructor;\r\n        const schema = schemaStorage.get(target);\r\n        schemaStorage.cache(target);\r\n        let asn1Value = [];\r\n        for (const key in schema.items) {\r\n            const item = schema.items[key];\r\n            const objProp = obj[key];\r\n            if (objProp === undefined || item.defaultValue === objProp) {\r\n                continue;\r\n            }\r\n            let asn1Item;\r\n            if (typeof (item.type) === \"number\") {\r\n                const converter = item.converter;\r\n                if (!converter) {\r\n                    throw new Error(`Property '${key}' doesn't have converter for type ${AsnPropTypes[item.type]} in schema '${target.name}'`);\r\n                }\r\n                if (item.repeated) {\r\n                    asn1Item = Array.from(objProp, (element) => converter.toASN(element));\r\n                }\r\n                else {\r\n                    asn1Item = converter.toASN(objProp);\r\n                }\r\n            }\r\n            else {\r\n                if (item.repeated) {\r\n                    asn1Item = Array.from(objProp, (element) => this.toASN(element));\r\n                }\r\n                else {\r\n                    asn1Item = this.toASN(objProp);\r\n                }\r\n            }\r\n            if (item.context !== null && item.context !== undefined) {\r\n                if (item.implicit) {\r\n                    if (typeof item.type === \"number\") {\r\n                        const value = {};\r\n                        value.valueHex = asn1Item.valueBlock.toBER();\r\n                        asn1Value.push(new Primitive(Object.assign({ optional: item.optional, idBlock: {\r\n                                tagClass: 3,\r\n                                tagNumber: item.context,\r\n                            } }, value)));\r\n                    }\r\n                    else {\r\n                        asn1Value.push(new Constructed({\r\n                            optional: item.optional,\r\n                            idBlock: {\r\n                                tagClass: 3,\r\n                                tagNumber: item.context,\r\n                            },\r\n                            value: asn1Item.valueBlock.value,\r\n                        }));\r\n                    }\r\n                }\r\n                else {\r\n                    asn1Value.push(new Constructed({\r\n                        optional: item.optional,\r\n                        idBlock: {\r\n                            tagClass: 3,\r\n                            tagNumber: item.context,\r\n                        },\r\n                        value: [asn1Item],\r\n                    }));\r\n                }\r\n            }\r\n            else if (item.repeated) {\r\n                asn1Value = asn1Value.concat(asn1Item);\r\n            }\r\n            else {\r\n                asn1Value.push(asn1Item);\r\n            }\r\n        }\r\n        let asnSchema;\r\n        switch (schema.type) {\r\n            case AsnTypeTypes.Sequence:\r\n                asnSchema = new Sequence({ value: asn1Value });\r\n                break;\r\n            case AsnTypeTypes.Set:\r\n                asnSchema = new Set({ value: asn1Value });\r\n                break;\r\n            case AsnTypeTypes.Choice:\r\n                if (!asn1Value[0]) {\r\n                    throw new Error(`Schema '${target.name}' has wrong data. Choice cannot be empty.`);\r\n                }\r\n                asnSchema = asn1Value[0];\r\n                break;\r\n        }\r\n        return asnSchema;\r\n    }\r\n}\n\nexport { AsnAnyConverter, AsnBitStringConverter, AsnBmpStringConverter, AsnBooleanConverter, AsnCharacterStringConverter, AsnEnumeratedConverter, AsnGeneralStringConverter, AsnGeneralizedTimeConverter, AsnGraphicStringConverter, AsnIA5StringConverter, AsnIntegerArrayBufferConverter, AsnIntegerConverter, AsnNumericStringConverter, AsnObjectIdentifierConverter, AsnOctetStringConverter, AsnParser, AsnPrintableStringConverter, AsnProp, AsnPropTypes, AsnSerializer, AsnTeletexStringConverter, AsnType, AsnTypeTypes, AsnUTCTimeConverter, AsnUniversalStringConverter, AsnUtf8StringConverter, AsnVideotexStringConverter, AsnVisibleStringConverter };\n"]},"metadata":{},"sourceType":"module"}