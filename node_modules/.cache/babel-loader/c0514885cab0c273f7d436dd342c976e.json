{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar InfoUtils = {};\n\nInfoUtils.parse = function (info) {\n  var parsed = {\n    policy: InfoUtils.parsePolicy(info),\n    moderator: InfoUtils.parseModerator(info)\n  };\n\n  if (info.sipUri) {\n    parsed.sipUri = info.sipUri;\n  }\n\n  return parsed;\n};\n\nInfoUtils.parsePolicy = function (info) {\n  var policy = {}; // Parses the policy to show valid uses\n\n  if (info && info.displayHints && info.displayHints.joined && info.displayHints.joined.length > 0) {\n    // TODO: find a better way\n    info.displayHints.joined.forEach(function (key) {\n      policy[key] = true;\n    });\n  }\n\n  return policy;\n};\n\nInfoUtils.parseModerator = function (info) {\n  var moderator = {};\n\n  if (info && info.displayHints && info.displayHints.moderator && info.displayHints.moderator.length > 0) {\n    info.displayHints.moderator.forEach(function (key) {\n      moderator[key] = true;\n    });\n  }\n\n  return moderator;\n};\n\nInfoUtils.isLocked = function (policy) {\n  return policy.LOCK_STATUS_LOCKED || false;\n};\n\nInfoUtils.isUnlocked = function (policy) {\n  return policy.LOCK_STATUS_UNLOCKED || false;\n};\n\nInfoUtils.getInfos = function (oldInfo, newInfo) {\n  var previous = null;\n\n  if (oldInfo) {\n    previous = oldInfo;\n  }\n\n  var current = newInfo && InfoUtils.parse(newInfo);\n  var updates = {};\n\n  if (current) {\n    current.isLocked = InfoUtils.isLocked(current.policy);\n    current.isUnlocked = InfoUtils.isUnlocked(current.policy);\n\n    if (previous && previous.isUnlocked && current.isLocked || !previous && current.isLocked) {\n      updates.isLocked = current.isLocked;\n    }\n\n    if (previous && previous.isLocked && current.isUnlocked || !previous && current.isUnlocked) {\n      updates.isUnlocked = current.isUnlocked;\n    }\n  }\n\n  return {\n    previous: previous,\n    current: current,\n    updates: {\n      isLocked: InfoUtils.isLocked(current),\n      isUnlocked: InfoUtils.isUnlocked(current)\n    }\n  };\n};\n\nexports.default = InfoUtils;","map":{"version":3,"sources":["infoUtils.js"],"names":["InfoUtils","parsed","policy","moderator","info","previous","current","newInfo","updates","isLocked","isUnlocked"],"mappings":"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","sourcesContent":["\nconst InfoUtils = {};\n\nInfoUtils.parse = (info) => {\n  const parsed = {\n    policy: InfoUtils.parsePolicy(info),\n    moderator: InfoUtils.parseModerator(info)\n  };\n\n  if (info.sipUri) {\n    parsed.sipUri = info.sipUri;\n  }\n\n  return parsed;\n};\nInfoUtils.parsePolicy = (info) => {\n  const policy = {};\n\n  // Parses the policy to show valid uses\n  if (info && info.displayHints && info.displayHints.joined && info.displayHints.joined.length > 0) {\n    // TODO: find a better way\n    info.displayHints.joined.forEach((key) => {\n      policy[key] = true;\n    });\n  }\n\n  return policy;\n};\n\nInfoUtils.parseModerator = (info) => {\n  const moderator = {};\n\n  if (info && info.displayHints && info.displayHints.moderator && info.displayHints.moderator.length > 0) {\n    info.displayHints.moderator.forEach((key) => {\n      moderator[key] = true;\n    });\n  }\n\n  return moderator;\n};\n\nInfoUtils.isLocked = (policy) => policy.LOCK_STATUS_LOCKED || false;\n\nInfoUtils.isUnlocked = (policy) => policy.LOCK_STATUS_UNLOCKED || false;\n\nInfoUtils.getInfos = (oldInfo, newInfo) => {\n  let previous = null;\n\n  if (oldInfo) {\n    previous = oldInfo;\n  }\n  const current = newInfo && InfoUtils.parse(newInfo);\n  const updates = {};\n\n  if (current) {\n    current.isLocked = InfoUtils.isLocked(current.policy);\n    current.isUnlocked = InfoUtils.isUnlocked(current.policy);\n\n    if (previous && previous.isUnlocked && current.isLocked || !previous && current.isLocked) {\n      updates.isLocked = current.isLocked;\n    }\n    if (previous && previous.isLocked && current.isUnlocked || !previous && current.isUnlocked) {\n      updates.isUnlocked = current.isUnlocked;\n    }\n  }\n\n  return {\n    previous,\n    current,\n    updates: {\n      isLocked: InfoUtils.isLocked(current),\n      isUnlocked: InfoUtils.isUnlocked(current)\n    }\n  };\n};\n\nexport default InfoUtils;\n"]},"metadata":{},"sourceType":"script"}