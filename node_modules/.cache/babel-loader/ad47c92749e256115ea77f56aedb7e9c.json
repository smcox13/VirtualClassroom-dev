{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * The state of a specific catalog to be used by {@link ServiceState}.\n *\n * @typedef {Record<string, boolean>} CatalogState\n * @property {boolean} CatalogState.collecting - If the catalog is collecting.\n * @property {boolean} CatalogState.ready - If the catalog is ready.\n */\n\n/**\n * @class\n * @classdesc - Manages the state of the service catalogs for a webex instance.\n */\n\n\nvar ServiceState = function () {\n  /**\n   * Generate a new {@link ServiceState}.\n   *\n   * @public\n   * @constructor\n   * @memberof ServiceState\n   */\n  function ServiceState() {\n    var _this = this;\n\n    (0, _classCallCheck3.default)(this, ServiceState); // Iterate over the possible catalog names and generate their states.\n\n    _constants.SERVICE_CATALOGS.forEach(function (catalog) {\n      _this[catalog] = ServiceState.generateCatalogState();\n    });\n  }\n  /**\n   * Set a catalog to be collecting or not.\n   *\n   * @public\n   * @memberof ServiceState\n   * @param {string} catalog - Catalog to target.\n   * @param {boolean} collecting - If the target is collecting or not.\n   * @returns {undefined}\n   */\n\n\n  (0, _createClass3.default)(ServiceState, [{\n    key: 'setCollecting',\n    value: function setCollecting(catalog, collecting) {\n      // Validate that the catalog state exists.\n      if (this[catalog]) {\n        // Set the 'collecting' status of the catalog state.\n        this[catalog].collecting = collecting;\n      }\n    }\n    /**\n     * Set a catalog to be ready or not.\n     *\n     * @public\n     * @memberof ServiceState\n     * @param {string} catalog - Catalog to target.\n     * @param {boolean} ready - If the target is ready or not.\n     * @returns {undefined}\n     */\n\n  }, {\n    key: 'setReady',\n    value: function setReady(catalog, ready) {\n      // Validate that the catalog state exists.\n      if (this[catalog]) {\n        // Set the 'ready' status of the catalog state.\n        this[catalog].ready = ready;\n      }\n    }\n    /**\n     * Generate a {@link CatalogState}.\n     *\n     * @public\n     * @static\n     * @memberof ServiceState\n     * @returns {CatalogState} - The generated {@link CatalogState}.\n     */\n\n  }], [{\n    key: 'generateCatalogState',\n    value: function generateCatalogState() {\n      return {\n        collecting: false,\n        ready: false\n      };\n    }\n  }]);\n  return ServiceState;\n}();\n\nexports.default = ServiceState;","map":{"version":3,"sources":["service-state.js"],"names":["ServiceState","SERVICE_CATALOGS","catalog","collecting","ready"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;;;;;;AAEA;;;;;;;;AAQA;;;;;;IAIqBA,Y;AACnB;;;;;;;AAOA,WAAA,YAAA,GAAc;AAAA,QAAA,KAAA,GAAA,IAAA;;AAAA,KAAA,GAAA,gBAAA,CAAA,OAAA,EAAA,IAAA,EAAA,YAAA,EAAA,CACZ;;AACAC,IAAAA,UAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,CACE,UAAA,OAAA,EAAa;AACX,MAAA,KAAA,CAAA,OAAA,CAAA,GAAgBD,YAAAA,CAAhB,oBAAgBA,EAAhB;AAFJC,KAAAA;AAKD;AAED;;;;;;;;;;;;;kCAScC,O,EAASC,U,EAAY;AACjC;AACA,UAAI,KAAJ,OAAI,CAAJ,EAAmB;AACjB;AACA,aAAA,OAAA,EAAA,UAAA,GAAA,UAAA;AACD;AACF;AAED;;;;;;;;;;;;6BASSD,O,EAASE,K,EAAO;AACvB;AACA,UAAI,KAAJ,OAAI,CAAJ,EAAmB;AACjB;AACA,aAAA,OAAA,EAAA,KAAA,GAAA,KAAA;AACD;AACF;AAED;;;;;;;;;;;2CAQ8B;AAC5B,aAAO;AACLD,QAAAA,UAAAA,EADK,KAAA;AAELC,QAAAA,KAAAA,EAAO;AAFF,OAAP;AAID;;;;;kBAhEkBJ,Y","sourcesContent":["import {SERVICE_CATALOGS} from './constants';\n\n/**\n * The state of a specific catalog to be used by {@link ServiceState}.\n *\n * @typedef {Record<string, boolean>} CatalogState\n * @property {boolean} CatalogState.collecting - If the catalog is collecting.\n * @property {boolean} CatalogState.ready - If the catalog is ready.\n */\n\n/**\n * @class\n * @classdesc - Manages the state of the service catalogs for a webex instance.\n */\nexport default class ServiceState {\n  /**\n   * Generate a new {@link ServiceState}.\n   *\n   * @public\n   * @constructor\n   * @memberof ServiceState\n   */\n  constructor() {\n    // Iterate over the possible catalog names and generate their states.\n    SERVICE_CATALOGS.forEach(\n      (catalog) => {\n        this[catalog] = ServiceState.generateCatalogState();\n      }\n    );\n  }\n\n  /**\n   * Set a catalog to be collecting or not.\n   *\n   * @public\n   * @memberof ServiceState\n   * @param {string} catalog - Catalog to target.\n   * @param {boolean} collecting - If the target is collecting or not.\n   * @returns {undefined}\n   */\n  setCollecting(catalog, collecting) {\n    // Validate that the catalog state exists.\n    if (this[catalog]) {\n      // Set the 'collecting' status of the catalog state.\n      this[catalog].collecting = collecting;\n    }\n  }\n\n  /**\n   * Set a catalog to be ready or not.\n   *\n   * @public\n   * @memberof ServiceState\n   * @param {string} catalog - Catalog to target.\n   * @param {boolean} ready - If the target is ready or not.\n   * @returns {undefined}\n   */\n  setReady(catalog, ready) {\n    // Validate that the catalog state exists.\n    if (this[catalog]) {\n      // Set the 'ready' status of the catalog state.\n      this[catalog].ready = ready;\n    }\n  }\n\n  /**\n   * Generate a {@link CatalogState}.\n   *\n   * @public\n   * @static\n   * @memberof ServiceState\n   * @returns {CatalogState} - The generated {@link CatalogState}.\n   */\n  static generateCatalogState() {\n    return {\n      collecting: false,\n      ready: false\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"script"}