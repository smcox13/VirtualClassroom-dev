{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport CertID from \"./CertID.js\";\nimport Extension from \"./Extension.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC6960\r\n */\n\nexport default class Request {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for Request class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {CertID}\r\n     * @desc reqCert\r\n     */\n    this.reqCert = getParametersValue(parameters, \"reqCert\", Request.defaultValues(\"reqCert\"));\n    if (\"singleRequestExtensions\" in parameters)\n      /**\r\n       * @type {Array.<Extension>}\r\n       * @desc singleRequestExtensions\r\n       */\n      this.singleRequestExtensions = getParametersValue(parameters, \"singleRequestExtensions\", Request.defaultValues(\"singleRequestExtensions\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"reqCert\":\n        return new CertID();\n\n      case \"singleRequestExtensions\":\n        return [];\n\n      default:\n        throw new Error(`Invalid member name for Request class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"reqCert\":\n        return memberValue.isEqual(Request.defaultValues(memberName));\n\n      case \"singleRequestExtensions\":\n        return memberValue.length === 0;\n\n      default:\n        throw new Error(`Invalid member name for Request class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * Request         ::=     SEQUENCE {\r\n   *    reqCert                     CertID,\r\n   *    singleRequestExtensions     [0] EXPLICIT Extensions OPTIONAL }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [reqCert]\r\n     * @property {string} [extensions]\r\n     * @property {string} [singleRequestExtensions]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [CertID.schema(names.reqCert || {}), new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [Extension.schema(names.extensions || {\n          names: {\n            blockName: names.singleRequestExtensions || \"\"\n          }\n        })]\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"reqCert\", \"singleRequestExtensions\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, Request.schema({\n      names: {\n        reqCert: {\n          names: {\n            blockName: \"reqCert\"\n          }\n        },\n        singleRequestExtensions: {\n          names: {\n            blockName: \"singleRequestExtensions\"\n          }\n        }\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for Request\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.reqCert = new CertID({\n      schema: asn1.result.reqCert\n    });\n    if (\"singleRequestExtensions\" in asn1.result) this.singleRequestExtensions = Array.from(asn1.result.singleRequestExtensions.valueBlock.value, element => new Extension({\n      schema: element\n    })); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n    outputArray.push(this.reqCert.toSchema());\n\n    if (\"singleRequestExtensions\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [new asn1js.Sequence({\n          value: Array.from(this.singleRequestExtensions, element => element.toSchema())\n        })]\n      }));\n    } //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const _object = {\n      reqCert: this.reqCert.toJSON()\n    };\n    if (\"singleRequestExtensions\" in this) _object.singleRequestExtensions = Array.from(this.singleRequestExtensions, element => element.toJSON());\n    return _object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/Request.js"],"names":["asn1js","getParametersValue","clearProps","CertID","Extension","Request","constructor","parameters","reqCert","defaultValues","singleRequestExtensions","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","isEqual","length","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","extensions","asn1","compareSchema","verified","result","Array","from","valueBlock","element","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport CertID from \"./CertID.js\";\r\nimport Extension from \"./Extension.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class Request\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Request class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {CertID}\r\n\t\t * @desc reqCert\r\n\t\t */\r\n\t\tthis.reqCert = getParametersValue(parameters, \"reqCert\", Request.defaultValues(\"reqCert\"));\r\n\r\n\t\tif(\"singleRequestExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @desc singleRequestExtensions\r\n\t\t\t */\r\n\t\t\tthis.singleRequestExtensions = getParametersValue(parameters, \"singleRequestExtensions\", Request.defaultValues(\"singleRequestExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"reqCert\":\r\n\t\t\t\treturn new CertID();\r\n\t\t\tcase \"singleRequestExtensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Request class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"reqCert\":\r\n\t\t\t\treturn (memberValue.isEqual(Request.defaultValues(memberName)));\r\n\t\t\tcase \"singleRequestExtensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Request class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Request         ::=     SEQUENCE {\r\n\t *    reqCert                     CertID,\r\n\t *    singleRequestExtensions     [0] EXPLICIT Extensions OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [reqCert]\r\n\t\t * @property {string} [extensions]\r\n\t\t * @property {string} [singleRequestExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tCertID.schema(names.reqCert || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [Extension.schema(names.extensions || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: (names.singleRequestExtensions || \"\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"reqCert\",\r\n\t\t\t\"singleRequestExtensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRequest.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\treqCert: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"reqCert\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsingleRequestExtensions: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"singleRequestExtensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Request\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.reqCert = new CertID({ schema: asn1.result.reqCert });\r\n\r\n\t\tif(\"singleRequestExtensions\" in asn1.result)\r\n\t\t\tthis.singleRequestExtensions = Array.from(asn1.result.singleRequestExtensions.valueBlock.value, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.reqCert.toSchema());\r\n\r\n\t\tif(\"singleRequestExtensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.singleRequestExtensions, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\treqCert: this.reqCert.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"singleRequestExtensions\" in this)\r\n\t\t\t_object.singleRequestExtensions = Array.from(this.singleRequestExtensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}