{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\nimport SingleResponse from \"./SingleResponse.js\";\nimport Extension from \"./Extension.js\";\nimport Extensions from \"./Extensions.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC6960\r\n */\n\nexport default class ResponseData {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for ResponseData class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {ArrayBuffer}\r\n     * @desc tbs\r\n     */\n    this.tbs = getParametersValue(parameters, \"tbs\", ResponseData.defaultValues(\"tbs\"));\n    /**\r\n     * @type {Object}\r\n     * @desc responderID\r\n     */\n\n    this.responderID = getParametersValue(parameters, \"responderID\", ResponseData.defaultValues(\"responderID\"));\n    /**\r\n     * @type {Date}\r\n     * @desc producedAt\r\n     */\n\n    this.producedAt = getParametersValue(parameters, \"producedAt\", ResponseData.defaultValues(\"producedAt\"));\n    /**\r\n     * @type {Array.<SingleResponse>}\r\n     * @desc responses\r\n     */\n\n    this.responses = getParametersValue(parameters, \"responses\", ResponseData.defaultValues(\"responses\"));\n    if (\"responseExtensions\" in parameters)\n      /**\r\n       * @type {Array.<Extension>}\r\n       * @desc responseExtensions\r\n       */\n      this.responseExtensions = getParametersValue(parameters, \"responseExtensions\", ResponseData.defaultValues(\"responseExtensions\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"tbs\":\n        return new ArrayBuffer(0);\n\n      case \"responderID\":\n        return {};\n\n      case \"producedAt\":\n        return new Date(0, 0, 0);\n\n      case \"responses\":\n      case \"responseExtensions\":\n        return [];\n\n      default:\n        throw new Error(`Invalid member name for ResponseData class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"tbs\":\n        return memberValue.byteLength === 0;\n\n      case \"responderID\":\n        return Object.keys(memberValue).length === 0;\n\n      case \"producedAt\":\n        return memberValue === ResponseData.defaultValues(memberName);\n\n      case \"responses\":\n      case \"responseExtensions\":\n        return memberValue.length === 0;\n\n      default:\n        throw new Error(`Invalid member name for ResponseData class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * ResponseData ::= SEQUENCE {\r\n   *    version              [0] EXPLICIT Version DEFAULT v1,\r\n   *    responderID              ResponderID,\r\n   *    producedAt               GeneralizedTime,\r\n   *    responses                SEQUENCE OF SingleResponse,\r\n   *    responseExtensions   [1] EXPLICIT Extensions OPTIONAL }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [version]\r\n     * @property {string} [ResponseDataByName]\r\n     * @property {string} [ResponseDataByKey]\r\n     * @property {string} [producedAt]\r\n     * @property {string} [response]\r\n     * @property {string} [extensions]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"ResponseData\",\n      value: [new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [new asn1js.Integer({\n          name: names.version || \"ResponseData.version\"\n        })]\n      }), new asn1js.Choice({\n        value: [new asn1js.Constructed({\n          name: names.responderID || \"ResponseData.responderID\",\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: [RelativeDistinguishedNames.schema(names.ResponseDataByName || {\n            names: {\n              blockName: \"ResponseData.byName\"\n            }\n          })]\n        }), new asn1js.Constructed({\n          name: names.responderID || \"ResponseData.responderID\",\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 2 // [2]\n\n          },\n          value: [new asn1js.OctetString({\n            name: names.ResponseDataByKey || \"ResponseData.byKey\"\n          })]\n        })]\n      }), new asn1js.GeneralizedTime({\n        name: names.producedAt || \"ResponseData.producedAt\"\n      }), new asn1js.Sequence({\n        value: [new asn1js.Repeated({\n          name: \"ResponseData.responses\",\n          value: SingleResponse.schema(names.response || {})\n        })]\n      }), new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: [Extensions.schema(names.extensions || {\n          names: {\n            blockName: \"ResponseData.responseExtensions\"\n          }\n        })]\n      }) // EXPLICIT SEQUENCE value\n      ]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"ResponseData\", \"ResponseData.version\", \"ResponseData.responderID\", \"ResponseData.producedAt\", \"ResponseData.responses\", \"ResponseData.responseExtensions\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, ResponseData.schema());\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for ResponseData\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.tbs = asn1.result.ResponseData.valueBeforeDecode;\n    if (\"ResponseData.version\" in asn1.result) this.version = asn1.result[\"ResponseData.version\"].valueBlock.valueDec;\n    if (asn1.result[\"ResponseData.responderID\"].idBlock.tagNumber === 1) this.responderID = new RelativeDistinguishedNames({\n      schema: asn1.result[\"ResponseData.responderID\"].valueBlock.value[0]\n    });else this.responderID = asn1.result[\"ResponseData.responderID\"].valueBlock.value[0]; // OCTETSTRING\n\n    this.producedAt = asn1.result[\"ResponseData.producedAt\"].toDate();\n    this.responses = Array.from(asn1.result[\"ResponseData.responses\"], element => new SingleResponse({\n      schema: element\n    }));\n    if (\"ResponseData.responseExtensions\" in asn1.result) this.responseExtensions = Array.from(asn1.result[\"ResponseData.responseExtensions\"].valueBlock.value, element => new Extension({\n      schema: element\n    })); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema(encodeFlag = false) {\n    //region Decode stored TBS value \n    let tbsSchema;\n\n    if (encodeFlag === false) {\n      if (this.tbs.length === 0) // No stored certificate TBS part\n        return ResponseData.schema();\n      tbsSchema = asn1js.fromBER(this.tbs).result;\n    } //endregion \n    //region Create TBS schema via assembling from TBS parts\n    else {\n        const outputArray = [];\n\n        if (\"version\" in this) {\n          outputArray.push(new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 0 // [0]\n\n            },\n            value: [new asn1js.Integer({\n              value: this.version\n            })]\n          }));\n        }\n\n        if (this.responderID instanceof RelativeDistinguishedNames) {\n          outputArray.push(new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 1 // [1]\n\n            },\n            value: [this.responderID.toSchema()]\n          }));\n        } else {\n          outputArray.push(new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 2 // [2]\n\n            },\n            value: [this.responderID]\n          }));\n        }\n\n        outputArray.push(new asn1js.GeneralizedTime({\n          valueDate: this.producedAt\n        }));\n        outputArray.push(new asn1js.Sequence({\n          value: Array.from(this.responses, element => element.toSchema())\n        }));\n\n        if (\"responseExtensions\" in this) {\n          outputArray.push(new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 1 // [1]\n\n            },\n            value: [new asn1js.Sequence({\n              value: Array.from(this.responseExtensions, element => element.toSchema())\n            })]\n          }));\n        }\n\n        tbsSchema = new asn1js.Sequence({\n          value: outputArray\n        });\n      } //endregion \n    //region Construct and return new ASN.1 schema for this object \n\n\n    return tbsSchema; //endregion \n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const _object = {};\n    if (\"version\" in this) _object.version = this.version;\n    if (\"responderID\" in this) _object.responderID = this.responderID;\n    if (\"producedAt\" in this) _object.producedAt = this.producedAt;\n    if (\"responses\" in this) _object.responses = Array.from(this.responses, element => element.toJSON());\n    if (\"responseExtensions\" in this) _object.responseExtensions = Array.from(this.responseExtensions, element => element.toJSON());\n    return _object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/ResponseData.js"],"names":["asn1js","getParametersValue","clearProps","RelativeDistinguishedNames","SingleResponse","Extension","Extensions","ResponseData","constructor","parameters","tbs","defaultValues","responderID","producedAt","responses","responseExtensions","fromSchema","schema","memberName","ArrayBuffer","Date","Error","compareWithDefault","memberValue","byteLength","Object","keys","length","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Integer","version","Choice","ResponseDataByName","OctetString","ResponseDataByKey","GeneralizedTime","Repeated","response","extensions","asn1","compareSchema","verified","result","valueBeforeDecode","valueBlock","valueDec","toDate","Array","from","element","toSchema","encodeFlag","tbsSchema","fromBER","outputArray","push","valueDate","toJSON","_object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport SingleResponse from \"./SingleResponse.js\";\r\nimport Extension from \"./Extension.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class ResponseData\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ResponseData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", ResponseData.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc responderID\r\n\t\t */\r\n\t\tthis.responderID = getParametersValue(parameters, \"responderID\", ResponseData.defaultValues(\"responderID\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @desc producedAt\r\n\t\t */\r\n\t\tthis.producedAt = getParametersValue(parameters, \"producedAt\", ResponseData.defaultValues(\"producedAt\"));\r\n\t\t/**\r\n\t\t * @type {Array.<SingleResponse>}\r\n\t\t * @desc responses\r\n\t\t */\r\n\t\tthis.responses = getParametersValue(parameters, \"responses\", ResponseData.defaultValues(\"responses\"));\r\n\r\n\t\tif(\"responseExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @desc responseExtensions\r\n\t\t\t */\r\n\t\t\tthis.responseExtensions = getParametersValue(parameters, \"responseExtensions\", ResponseData.defaultValues(\"responseExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"responderID\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"producedAt\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tcase \"responses\":\r\n\t\t\tcase \"responseExtensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ResponseData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tcase \"responderID\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tcase \"producedAt\":\r\n\t\t\t\treturn (memberValue === ResponseData.defaultValues(memberName));\r\n\t\t\tcase \"responses\":\r\n\t\t\tcase \"responseExtensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ResponseData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * ResponseData ::= SEQUENCE {\r\n\t *    version              [0] EXPLICIT Version DEFAULT v1,\r\n\t *    responderID              ResponderID,\r\n\t *    producedAt               GeneralizedTime,\r\n\t *    responses                SEQUENCE OF SingleResponse,\r\n\t *    responseExtensions   [1] EXPLICIT Extensions OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [ResponseDataByName]\r\n\t\t * @property {string} [ResponseDataByKey]\r\n\t\t * @property {string} [producedAt]\r\n\t\t * @property {string} [response]\r\n\t\t * @property {string} [extensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"ResponseData\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.version || \"ResponseData.version\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.responderID || \"ResponseData.responderID\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: [RelativeDistinguishedNames.schema(names.ResponseDataByName || {\r\n\t\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\t\tblockName: \"ResponseData.byName\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.responderID || \"ResponseData.responderID\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: [new asn1js.OctetString({ name: (names.ResponseDataByKey || \"ResponseData.byKey\") })]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.producedAt || \"ResponseData.producedAt\") }),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: \"ResponseData.responses\",\r\n\t\t\t\t\t\t\tvalue: SingleResponse.schema(names.response || {})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [Extensions.schema(names.extensions || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"ResponseData.responseExtensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"ResponseData\",\r\n\t\t\t\"ResponseData.version\",\r\n\t\t\t\"ResponseData.responderID\",\r\n\t\t\t\"ResponseData.producedAt\",\r\n\t\t\t\"ResponseData.responses\",\r\n\t\t\t\"ResponseData.responseExtensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tResponseData.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ResponseData\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.ResponseData.valueBeforeDecode;\r\n\r\n\t\tif(\"ResponseData.version\" in asn1.result)\r\n\t\t\tthis.version = asn1.result[\"ResponseData.version\"].valueBlock.valueDec;\r\n\r\n\t\tif(asn1.result[\"ResponseData.responderID\"].idBlock.tagNumber === 1)\r\n\t\t\tthis.responderID = new RelativeDistinguishedNames({ schema: asn1.result[\"ResponseData.responderID\"].valueBlock.value[0] });\r\n\t\telse\r\n\t\t\tthis.responderID = asn1.result[\"ResponseData.responderID\"].valueBlock.value[0]; // OCTETSTRING\r\n\r\n\t\tthis.producedAt = asn1.result[\"ResponseData.producedAt\"].toDate();\r\n\t\tthis.responses = Array.from(asn1.result[\"ResponseData.responses\"], element => new SingleResponse({ schema: element }));\r\n\r\n\t\tif(\"ResponseData.responseExtensions\" in asn1.result)\r\n\t\t\tthis.responseExtensions = Array.from(asn1.result[\"ResponseData.responseExtensions\"].valueBlock.value, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Decode stored TBS value \r\n\t\tlet tbsSchema;\r\n\t\t\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.length === 0) // No stored certificate TBS part\r\n\t\t\t\treturn ResponseData.schema();\r\n\t\t\t\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion \r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t{\r\n\t\t\tconst outputArray = [];\r\n\t\t\t\r\n\t\t\tif(\"version\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ value: this.version })]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(this.responderID instanceof RelativeDistinguishedNames)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.responderID.toSchema()]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.responderID]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.GeneralizedTime({ valueDate: this.producedAt }));\r\n\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.responses, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t\t\r\n\t\t\tif(\"responseExtensions\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.responseExtensions, element => element.toSchema())\r\n\t\t\t\t\t})]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttbsSchema = new asn1js.Sequence({\r\n\t\t\t\tvalue: outputArray\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn tbsSchema;\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {};\r\n\r\n\t\tif(\"version\" in this)\r\n\t\t\t_object.version = this.version;\r\n\r\n\t\tif(\"responderID\" in this)\r\n\t\t\t_object.responderID = this.responderID;\r\n\r\n\t\tif(\"producedAt\" in this)\r\n\t\t\t_object.producedAt = this.producedAt;\r\n\r\n\t\tif(\"responses\" in this)\r\n\t\t\t_object.responses = Array.from(this.responses, element => element.toJSON());\r\n\r\n\t\tif(\"responseExtensions\" in this)\r\n\t\t\t_object.responseExtensions = Array.from(this.responseExtensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}