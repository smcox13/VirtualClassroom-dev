{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _javascriptStateMachine = require('javascript-state-machine');\n\nvar _javascriptStateMachine2 = _interopRequireDefault(_javascriptStateMachine);\n\nvar _history = require('javascript-state-machine/lib/history');\n\nvar _history2 = _interopRequireDefault(_history);\n\nvar _loggerProxy = require('../common/logs/logger-proxy');\n\nvar _loggerProxy2 = _interopRequireDefault(_loggerProxy);\n\nvar _triggerProxy = require('../common/events/trigger-proxy');\n\nvar _triggerProxy2 = _interopRequireDefault(_triggerProxy);\n\nvar _constants = require('../constants');\n\nvar _parameter = require('../common/errors/parameter');\n\nvar _parameter2 = _interopRequireDefault(_parameter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // TODO: ensure that meeting can be destroyed when in an error state\n\n\nvar MeetingStateMachine = {\n  /**\n   * Initializes the StateMachine for the meeting\n   * @param {Meeting} meetingRef A reference to a meeting instance\n   * @returns {StateMachine}\n   */\n  create: function create(meetingRef) {\n    if (!meetingRef) {\n      throw new _parameter2.default('You must initialize the meeting state machine with a meeting reference.');\n    }\n\n    return new _javascriptStateMachine2.default({\n      init: _constants.MEETING_STATE_MACHINE.STATES.IDLE,\n      transitions: [// when ringing a meeting, it must be first IDLE, because all other states are invalid, it transitions to the RINGING state\n      {\n        name: _constants.MEETING_STATE_MACHINE.TRANSITIONS.RING,\n        from: [_constants.MEETING_STATE_MACHINE.STATES.IDLE, _constants.MEETING_STATE_MACHINE.STATES.SAFE, _constants.MEETING_STATE_MACHINE.STATES.JOINED],\n        to: _constants.MEETING_STATE_MACHINE.STATES.RINGING\n      }, // when joining a meeting, it must be from the RINGING or IDLE state, transitions to JOINED state, 1:1 will go to RINGING,\n      // others will go straight to JOINED with this transition\n      {\n        name: _constants.MEETING_STATE_MACHINE.TRANSITIONS.JOIN,\n        from: [_constants.MEETING_STATE_MACHINE.STATES.JOINED, _constants.MEETING_STATE_MACHINE.STATES.IDLE, _constants.MEETING_STATE_MACHINE.STATES.RINGING, _constants.MEETING_STATE_MACHINE.STATES.SAFE],\n        to: _constants.MEETING_STATE_MACHINE.STATES.JOINED\n      }, // signify that ringing has stopped and somebody else answered, move state to DECLINED, ANSWERED\n      {\n        name: _constants.MEETING_STATE_MACHINE.TRANSITIONS.REMOTE,\n        from: [_constants.MEETING_STATE_MACHINE.STATES.JOINED, _constants.MEETING_STATE_MACHINE.STATES.SAFE],\n\n        /**\n        * @param {Object} remote\n        * @param {Boolean} remote.remoteAnswered\n        * @param {Boolean} remote.remoteDeclined\n        * @returns {String}\n        */\n        to: function to(remote) {\n          // other user answered the call\n          if (remote.remoteAnswered) {\n            return _constants.MEETING_STATE_MACHINE.STATES.ANSWERED;\n          } // other user declined the call\n\n\n          if (remote.remoteDeclined) {\n            return _constants.MEETING_STATE_MACHINE.STATES.DECLINED;\n          } // default\n\n\n          return _constants.MEETING_STATE_MACHINE.STATES.ERROR;\n        }\n      }, // when leaving a meeting it must be from either the RINGING, JOINED, or ERROR states, and transitions it to the ENDED state\n      {\n        name: _constants.MEETING_STATE_MACHINE.TRANSITIONS.LEAVE,\n        from: [_constants.MEETING_STATE_MACHINE.STATES.RINGING, _constants.MEETING_STATE_MACHINE.STATES.JOINED, _constants.MEETING_STATE_MACHINE.STATES.ANSWERED, _constants.MEETING_STATE_MACHINE.STATES.DECLINED, _constants.MEETING_STATE_MACHINE.STATES.ERROR, _constants.MEETING_STATE_MACHINE.STATES.SAFE],\n        to: _constants.MEETING_STATE_MACHINE.STATES.ENDED\n      }, // when declining an incoming meeting it must be from the ringing state, and it moves to DECLINED state\n      {\n        name: _constants.MEETING_STATE_MACHINE.TRANSITIONS.DECLINE,\n        from: [_constants.MEETING_STATE_MACHINE.STATES.RINGING, _constants.MEETING_STATE_MACHINE.STATES.SAFE],\n        to: _constants.MEETING_STATE_MACHINE.STATES.ENDED\n      }, // transition from ANY state to ERROR state\n      {\n        name: _constants.MEETING_STATE_MACHINE.TRANSITIONS.FAIL,\n        from: '*',\n        to: _constants.MEETING_STATE_MACHINE.STATES.ERROR\n      }, {\n        name: _constants.MEETING_STATE_MACHINE.TRANSITIONS.SAFE,\n        from: _constants.MEETING_STATE_MACHINE.STATES.ERROR,\n        to: _constants.MEETING_STATE_MACHINE.STATES.SAFE\n      }, // fail safe, transition from ANY state to IDLE state\n      {\n        name: _constants.MEETING_STATE_MACHINE.TRANSITIONS.RESET,\n        from: '*',\n        to: _constants.MEETING_STATE_MACHINE.STATES.IDLE\n      }],\n      data: {\n        /**\n         * The meeting instance to execute all state changes on\n         */\n        meeting: meetingRef\n      },\n      methods: {\n        /**\n         * Ring stop transition, to end the ring event for the meeting, and transition the state to ANSWERED OR DECLINED, only for outgoing meetings\n         * @param {Object} transition -- FiniteStateMachine automatically passed, not used\n         * @param {Object} stop -- {remoteAnswered: {Boolean}, remoteDeclined: {Boolean}}\n         * @returns {Boolean}\n         */\n        onRemote: function onRemote(transition, stop) {\n          if (this.meeting) {\n            _triggerProxy2.default.trigger(this.meeting, {\n              file: 'meeting/state',\n              function: 'onRemote'\n            }, _constants.EVENT_TRIGGERS.MEETING_RINGING_STOP, {\n              id: this.meeting.id,\n              type: stop\n            });\n          }\n        },\n\n        /**\n         * Ring transition, to cause the ring event for the meeting, and transition the state to RINGING, for both incoming, and outgoing meetings\n         * @param {Object} transition -- FiniteStateMachine automatically passed, not used\n         * @param {String} type -- incoming call === INCOMING / or other meetings have a ring type of JOIN\n         * @returns {Boolean}\n         */\n        onRing: function onRing(transition, type) {\n          if (this.meeting) {\n            _triggerProxy2.default.trigger(this.meeting, {\n              file: 'meeting/state',\n              function: 'onRing'\n            }, _constants.EVENT_TRIGGERS.MEETING_RINGING, {\n              type: type,\n              id: this.meeting.id\n            });\n          }\n        },\n\n        /**\n         * handle the error transition stage\n         * @param {Object} transition\n         * @param {Error} error\n         * @returns {Boolean}\n         */\n        onBeforeError: function onBeforeError(transition, error) {\n          _loggerProxy2.default.logger.error('meeting/state->onError#meeting.id: ' + this.meeting.id + ' | Transition \\'' + transition.transition + '\\' : ' + transition.from + ' -> ' + transition.to + ' failed after last state transition, with error ' + error + '. Moving to a non-informative state. Last states: ' + this.history);\n        },\n        onAfterError: function onAfterError() {\n          this.safe();\n        },\n\n        /**\n         * After ANY transition occurs, we want to know what state the meeting moved to for debugging\n         * @param {Object} transition\n         * @returns {Boolean}\n         */\n        onAfterTransition: function onAfterTransition(transition) {\n          _loggerProxy2.default.logger.log('meeting/state->onAfterTransition#meeting.id: ' + this.meeting.id + ' | Transition \\'' + transition.transition + '\\' : ' + transition.from + ' -> ' + transition.to + ' executed. Last states: ' + this.history);\n        }\n      },\n      // track the last 25 states entered\n      plugins: [new _history2.default({\n        max: 25\n      })]\n    });\n  }\n};\nexports.default = MeetingStateMachine;","map":{"version":3,"sources":["state.js"],"names":["MeetingStateMachine","create","ParameterError","StateMachine","init","MEETING_STATE_MACHINE","transitions","name","from","to","RINGING","JOINED","remote","ENDED","ERROR","SAFE","IDLE","data","meeting","meetingRef","methods","onRemote","Trigger","file","function","EVENT_TRIGGERS","id","type","stop","onRing","onBeforeError","LoggerProxy","transition","onAfterError","onAfterTransition","plugins","StateMachineHistory","max"],"mappings":"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","sourcesContent":["import StateMachine from 'javascript-state-machine';\nimport StateMachineHistory from 'javascript-state-machine/lib/history';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport Trigger from '../common/events/trigger-proxy';\nimport {MEETING_STATE_MACHINE, EVENT_TRIGGERS} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\n// TODO: ensure that meeting can be destroyed when in an error state\nconst MeetingStateMachine = {\n  /**\n   * Initializes the StateMachine for the meeting\n   * @param {Meeting} meetingRef A reference to a meeting instance\n   * @returns {StateMachine}\n   */\n  create(meetingRef) {\n    if (!meetingRef) {\n      throw new ParameterError('You must initialize the meeting state machine with a meeting reference.');\n    }\n\n    return new StateMachine({\n      init: MEETING_STATE_MACHINE.STATES.IDLE,\n      transitions: [\n        // when ringing a meeting, it must be first IDLE, because all other states are invalid, it transitions to the RINGING state\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.RING,\n          from: [MEETING_STATE_MACHINE.STATES.IDLE, MEETING_STATE_MACHINE.STATES.SAFE, MEETING_STATE_MACHINE.STATES.JOINED],\n          to: MEETING_STATE_MACHINE.STATES.RINGING\n        },\n        // when joining a meeting, it must be from the RINGING or IDLE state, transitions to JOINED state, 1:1 will go to RINGING,\n        // others will go straight to JOINED with this transition\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.JOIN,\n          from: [MEETING_STATE_MACHINE.STATES.JOINED, MEETING_STATE_MACHINE.STATES.IDLE, MEETING_STATE_MACHINE.STATES.RINGING, MEETING_STATE_MACHINE.STATES.SAFE],\n          to: MEETING_STATE_MACHINE.STATES.JOINED\n        },\n        // signify that ringing has stopped and somebody else answered, move state to DECLINED, ANSWERED\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.REMOTE,\n          from: [MEETING_STATE_MACHINE.STATES.JOINED, MEETING_STATE_MACHINE.STATES.SAFE],\n          /**\n         * @param {Object} remote\n         * @param {Boolean} remote.remoteAnswered\n         * @param {Boolean} remote.remoteDeclined\n         * @returns {String}\n         */\n          to(remote) {\n            // other user answered the call\n            if (remote.remoteAnswered) {\n              return MEETING_STATE_MACHINE.STATES.ANSWERED;\n            }\n            // other user declined the call\n            if (remote.remoteDeclined) {\n              return MEETING_STATE_MACHINE.STATES.DECLINED;\n            }\n\n            // default\n            return MEETING_STATE_MACHINE.STATES.ERROR;\n          }\n        },\n        // when leaving a meeting it must be from either the RINGING, JOINED, or ERROR states, and transitions it to the ENDED state\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.LEAVE,\n          from: [\n            MEETING_STATE_MACHINE.STATES.RINGING,\n            MEETING_STATE_MACHINE.STATES.JOINED,\n            MEETING_STATE_MACHINE.STATES.ANSWERED,\n            MEETING_STATE_MACHINE.STATES.DECLINED,\n            MEETING_STATE_MACHINE.STATES.ERROR,\n            MEETING_STATE_MACHINE.STATES.SAFE\n          ],\n          to: MEETING_STATE_MACHINE.STATES.ENDED\n        },\n        // when declining an incoming meeting it must be from the ringing state, and it moves to DECLINED state\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.DECLINE,\n          from: [MEETING_STATE_MACHINE.STATES.RINGING, MEETING_STATE_MACHINE.STATES.SAFE],\n          to: MEETING_STATE_MACHINE.STATES.ENDED\n        },\n        // transition from ANY state to ERROR state\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.FAIL,\n          from: '*',\n          to: MEETING_STATE_MACHINE.STATES.ERROR\n        },\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.SAFE,\n          from: MEETING_STATE_MACHINE.STATES.ERROR,\n          to: MEETING_STATE_MACHINE.STATES.SAFE\n        },\n        // fail safe, transition from ANY state to IDLE state\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.RESET,\n          from: '*',\n          to: MEETING_STATE_MACHINE.STATES.IDLE\n        }\n      ],\n      data: {\n        /**\n         * The meeting instance to execute all state changes on\n         */\n        meeting: meetingRef\n      },\n      methods: {\n        /**\n         * Ring stop transition, to end the ring event for the meeting, and transition the state to ANSWERED OR DECLINED, only for outgoing meetings\n         * @param {Object} transition -- FiniteStateMachine automatically passed, not used\n         * @param {Object} stop -- {remoteAnswered: {Boolean}, remoteDeclined: {Boolean}}\n         * @returns {Boolean}\n         */\n        onRemote(transition, stop) {\n          if (this.meeting) {\n            Trigger.trigger(\n              this.meeting,\n              {\n                file: 'meeting/state',\n                function: 'onRemote'\n              },\n              EVENT_TRIGGERS.MEETING_RINGING_STOP,\n              {\n                id: this.meeting.id,\n                type: stop\n              }\n            );\n          }\n        },\n        /**\n         * Ring transition, to cause the ring event for the meeting, and transition the state to RINGING, for both incoming, and outgoing meetings\n         * @param {Object} transition -- FiniteStateMachine automatically passed, not used\n         * @param {String} type -- incoming call === INCOMING / or other meetings have a ring type of JOIN\n         * @returns {Boolean}\n         */\n        onRing(transition, type) {\n          if (this.meeting) {\n            Trigger.trigger(\n              this.meeting,\n              {\n                file: 'meeting/state',\n                function: 'onRing'\n              },\n              EVENT_TRIGGERS.MEETING_RINGING,\n              {\n                type,\n                id: this.meeting.id\n              }\n            );\n          }\n        },\n        /**\n         * handle the error transition stage\n         * @param {Object} transition\n         * @param {Error} error\n         * @returns {Boolean}\n         */\n        onBeforeError(transition, error) {\n          LoggerProxy.logger.error(`meeting/state->onError#meeting.id: ${this.meeting.id} | Transition '${transition.transition}' : ${transition.from} -> ${transition.to} failed after last state transition, with error ${error}. Moving to a non-informative state. Last states: ${this.history}`);\n        },\n        onAfterError() {\n          this.safe();\n        },\n        /**\n         * After ANY transition occurs, we want to know what state the meeting moved to for debugging\n         * @param {Object} transition\n         * @returns {Boolean}\n         */\n        onAfterTransition(transition) {\n          LoggerProxy.logger.log(`meeting/state->onAfterTransition#meeting.id: ${this.meeting.id} | Transition '${transition.transition}' : ${transition.from} -> ${transition.to} executed. Last states: ${this.history}`);\n        }\n      },\n      // track the last 25 states entered\n      plugins: [new StateMachineHistory({max: 25})]\n    });\n  }\n};\n\nexport default MeetingStateMachine;\n"]},"metadata":{},"sourceType":"script"}