{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport Certificate from \"./Certificate.js\";\nimport AttributeCertificateV1 from \"./AttributeCertificateV1.js\";\nimport AttributeCertificateV2 from \"./AttributeCertificateV2.js\";\nimport OtherCertificateFormat from \"./OtherCertificateFormat.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nexport default class CertificateSet {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for CertificateSet class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Array}\r\n     * @desc certificates\r\n     */\n    this.certificates = getParametersValue(parameters, \"certificates\", CertificateSet.defaultValues(\"certificates\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"certificates\":\n        return [];\n\n      default:\n        throw new Error(`Invalid member name for Attribute class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * CertificateSet ::= SET OF CertificateChoices\r\n   *\r\n   * CertificateChoices ::= CHOICE {\r\n   *    certificate Certificate,\r\n   *    extendedCertificate [0] IMPLICIT ExtendedCertificate,  -- Obsolete\r\n   *    v1AttrCert [1] IMPLICIT AttributeCertificateV1,        -- Obsolete\r\n   *    v2AttrCert [2] IMPLICIT AttributeCertificateV2,\r\n   *    other [3] IMPLICIT OtherCertificateFormat }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Set({\n      name: names.blockName || \"\",\n      value: [new asn1js.Repeated({\n        name: names.certificates || \"certificates\",\n        value: new asn1js.Choice({\n          value: [Certificate.schema(), new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 0 // [0]\n\n            },\n            value: [new asn1js.Any()]\n          }), // JUST A STUB\n          new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 1 // [1]\n\n            },\n            value: AttributeCertificateV1.schema().valueBlock.value\n          }), new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 2 // [2]\n\n            },\n            value: AttributeCertificateV2.schema().valueBlock.value\n          }), new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 3 // [3]\n\n            },\n            value: OtherCertificateFormat.schema().valueBlock.value\n          })]\n        })\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"certificates\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, CertificateSet.schema());\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for CertificateSet\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.certificates = Array.from(asn1.result.certificates || [], element => {\n      const initialTagNumber = element.idBlock.tagNumber;\n      if (element.idBlock.tagClass === 1) return new Certificate({\n        schema: element\n      }); //region Making \"Sequence\" from \"Constructed\" value\n\n      const elementSequence = new asn1js.Sequence({\n        value: element.valueBlock.value\n      }); //endregion\n\n      switch (initialTagNumber) {\n        case 1:\n          return new AttributeCertificateV1({\n            schema: elementSequence\n          });\n\n        case 2:\n          return new AttributeCertificateV2({\n            schema: elementSequence\n          });\n\n        case 3:\n          return new OtherCertificateFormat({\n            schema: elementSequence\n          });\n\n        case 0:\n        default:\n      }\n\n      return element;\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Set({\n      value: Array.from(this.certificates, element => {\n        switch (true) {\n          case element instanceof Certificate:\n            return element.toSchema();\n\n          case element instanceof AttributeCertificateV1:\n            return new asn1js.Constructed({\n              idBlock: {\n                tagClass: 3,\n                tagNumber: 1 // [1]\n\n              },\n              value: element.toSchema().valueBlock.value\n            });\n\n          case element instanceof AttributeCertificateV2:\n            return new asn1js.Constructed({\n              idBlock: {\n                tagClass: 3,\n                tagNumber: 2 // [2]\n\n              },\n              value: element.toSchema().valueBlock.value\n            });\n\n          case element instanceof OtherCertificateFormat:\n            return new asn1js.Constructed({\n              idBlock: {\n                tagClass: 3,\n                tagNumber: 3 // [3]\n\n              },\n              value: element.toSchema().valueBlock.value\n            });\n\n          default:\n        }\n\n        return element;\n      })\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      certificates: Array.from(this.certificates, element => element.toJSON())\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/CertificateSet.js"],"names":["asn1js","getParametersValue","clearProps","Certificate","AttributeCertificateV1","AttributeCertificateV2","OtherCertificateFormat","CertificateSet","constructor","parameters","certificates","defaultValues","fromSchema","schema","memberName","Error","names","Set","name","blockName","value","Repeated","Choice","Constructed","idBlock","tagClass","tagNumber","Any","valueBlock","asn1","compareSchema","verified","Array","from","result","element","initialTagNumber","elementSequence","Sequence","toSchema","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport AttributeCertificateV1 from \"./AttributeCertificateV1.js\";\r\nimport AttributeCertificateV2 from \"./AttributeCertificateV2.js\";\r\nimport OtherCertificateFormat from \"./OtherCertificateFormat.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class CertificateSet\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertificateSet class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @desc certificates\r\n\t\t */\r\n\t\tthis.certificates = getParametersValue(parameters, \"certificates\", CertificateSet.defaultValues(\"certificates\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Attribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CertificateSet ::= SET OF CertificateChoices\r\n\t *\r\n\t * CertificateChoices ::= CHOICE {\r\n\t *    certificate Certificate,\r\n\t *    extendedCertificate [0] IMPLICIT ExtendedCertificate,  -- Obsolete\r\n\t *    v1AttrCert [1] IMPLICIT AttributeCertificateV1,        -- Obsolete\r\n\t *    v2AttrCert [2] IMPLICIT AttributeCertificateV2,\r\n\t *    other [3] IMPLICIT OtherCertificateFormat }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (\r\n\t\t\tnew asn1js.Set({\r\n\t\t\t\tname: (names.blockName || \"\"),\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\tname: (names.certificates || \"certificates\"),\r\n\t\t\t\t\t\tvalue: new asn1js.Choice({\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tCertificate.schema(),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Any()\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t}), // JUST A STUB\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: AttributeCertificateV1.schema().valueBlock.value\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: AttributeCertificateV2.schema().valueBlock.value\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: OtherCertificateFormat.schema().valueBlock.value\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"certificates\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificateSet.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificateSet\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.certificates = Array.from(asn1.result.certificates || [], element =>\r\n\t\t{\r\n\t\t\tconst initialTagNumber = element.idBlock.tagNumber;\r\n\r\n\t\t\tif(element.idBlock.tagClass === 1)\r\n\t\t\t\treturn new Certificate({ schema: element });\r\n\t\t\t\r\n\t\t\t//region Making \"Sequence\" from \"Constructed\" value\r\n\t\t\tconst elementSequence = new asn1js.Sequence({\r\n\t\t\t\tvalue: element.valueBlock.value\r\n\t\t\t});\r\n\t\t\t//endregion\r\n\r\n\t\t\tswitch(initialTagNumber)\r\n\t\t\t{\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\treturn new AttributeCertificateV1({ schema: elementSequence });\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn new AttributeCertificateV2({ schema: elementSequence });\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\treturn new OtherCertificateFormat({ schema: elementSequence });\r\n\t\t\t\tcase 0:\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn element;\r\n\t\t});\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.certificates, element =>\r\n\t\t\t{\r\n\t\t\t\tswitch(true)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase (element instanceof Certificate):\r\n\t\t\t\t\t\treturn element.toSchema();\r\n\t\t\t\t\tcase (element instanceof AttributeCertificateV1):\r\n\t\t\t\t\t\treturn new asn1js.Constructed({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: element.toSchema().valueBlock.value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tcase (element instanceof AttributeCertificateV2):\r\n\t\t\t\t\t\treturn new asn1js.Constructed({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: element.toSchema().valueBlock.value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tcase (element instanceof OtherCertificateFormat):\r\n\t\t\t\t\t\treturn new asn1js.Constructed({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: element.toSchema().valueBlock.value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn element;\r\n\t\t\t})\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcertificates: Array.from(this.certificates, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}