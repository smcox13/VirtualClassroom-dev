{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _webexCore = require('@webex/webex-core');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @class\n * @ignore\n */\n\n\nvar PersonUUIDRequestBatcher = _webexCore.Batcher.extend({\n  namespace: 'People',\n\n  /**\n   * @instance\n   * @memberof PersonUUIDRequestBatcher\n   * @param {HttpResponseObject} res\n   * @returns {Promise}\n   */\n  handleHttpSuccess: function handleHttpSuccess(res) {\n    var _this = this;\n\n    return _promise2.default.all(res.body.items.map(function (personResponse) {\n      return _this.handleItemSuccess(personResponse.id, personResponse);\n    }));\n  },\n  handleItemFailure: function handleItemFailure(email, response) {\n    return this.getDeferredForResponse(email).then(function (defer) {\n      defer.reject(response);\n    });\n  },\n\n  /**\n   * @instance\n   * @memberof PersonUUIDRequestBatcher\n   * @param {string} email\n   * @param {Object} response\n   * @returns {Promise}\n   */\n  handleItemSuccess: function handleItemSuccess(email, response) {\n    return this.getDeferredForResponse(email).then(function (defer) {\n      defer.resolve(response);\n    });\n  },\n\n  /**\n   * @instance\n   * @memberof PersonUUIDRequestBatcher\n   * @param {string} uuidOrHydraId\n   * @returns {Promise<string>}\n   */\n  fingerprintRequest: function fingerprintRequest(uuidOrHydraId) {\n    var hydraId = this.webex.people.inferPersonIdFromUuid(uuidOrHydraId);\n    return _promise2.default.resolve(hydraId);\n  },\n\n  /**\n   * @instance\n   * @memberof PersonUUIDRequestBatcher\n   * @param {string} hydraId\n   * @returns {Promise<string>}\n   */\n  fingerprintResponse: function fingerprintResponse(hydraId) {\n    return _promise2.default.resolve(hydraId);\n  },\n  prepareRequest: function prepareRequest(ids) {\n    return _promise2.default.resolve(ids.join());\n  },\n\n  /**\n   * @instance\n   * @memberof PersonUUIDRequestBatcher\n   * @param {Object} ids\n   * @returns {Promise<HttpResponseObject>}\n   */\n  submitHttpRequest: function submitHttpRequest(ids) {\n    return this.webex.request({\n      service: 'hydra',\n      resource: 'people/?id=' + ids + '&showAllTypes=' + this.config.showAllTypes\n    });\n  }\n});\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nexports.default = PersonUUIDRequestBatcher;","map":{"version":3,"sources":["people-batcher.js"],"names":["PersonUUIDRequestBatcher","namespace","handleHttpSuccess","personResponse","handleItemFailure","defer","handleItemSuccess","fingerprintRequest","hydraId","fingerprintResponse","prepareRequest","ids","submitHttpRequest","service","resource","showAllTypes"],"mappings":";;;;;;;;;;AAIA,IAAA,UAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;;;;;;AAEA;;;;;;AAIA,IAAMA,wBAAAA,GAA2B,UAAA,CAAA,OAAA,CAAA,MAAA,CAAe;AAC9CC,EAAAA,SAAAA,EAD8C,QAAA;;AAG9C;;;;;;AAMAC,EAAAA,iBAT8C,EAAA,SAAA,iBAAA,CAAA,GAAA,EASvB;AAAA,QAAA,KAAA,GAAA,IAAA;;AACrB,WAAO,SAAA,CAAA,OAAA,CAAA,GAAA,CAAY,GAAA,CAAA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAmB,UAAA,cAAA,EAAA;AAAA,aACpC,KAAA,CAAA,iBAAA,CAAuBC,cAAAA,CAAvB,EAAA,EADoC,cACpC,CADoC;AAAtC,KAAmB,CAAZ,CAAP;AAV4C,GAAA;AAc9CC,EAAAA,iBAd8C,EAAA,SAAA,iBAAA,CAAA,KAAA,EAAA,QAAA,EAcX;AACjC,WAAO,KAAA,sBAAA,CAAA,KAAA,EAAA,IAAA,CACC,UAAA,KAAA,EAAW;AACfC,MAAAA,KAAAA,CAAAA,MAAAA,CAAAA,QAAAA;AAFJ,KAAO,CAAP;AAf4C,GAAA;;AAqB9C;;;;;;;AAOAC,EAAAA,iBA5B8C,EAAA,SAAA,iBAAA,CAAA,KAAA,EAAA,QAAA,EA4BX;AACjC,WAAO,KAAA,sBAAA,CAAA,KAAA,EAAA,IAAA,CACC,UAAA,KAAA,EAAW;AACfD,MAAAA,KAAAA,CAAAA,OAAAA,CAAAA,QAAAA;AAFJ,KAAO,CAAP;AA7B4C,GAAA;;AAmC9C;;;;;;AAMAE,EAAAA,kBAzC8C,EAAA,SAAA,kBAAA,CAAA,aAAA,EAyCZ;AAChC,QAAMC,OAAAA,GAAU,KAAA,KAAA,CAAA,MAAA,CAAA,qBAAA,CAAhB,aAAgB,CAAhB;AAEA,WAAO,SAAA,CAAA,OAAA,CAAA,OAAA,CAAP,OAAO,CAAP;AA5C4C,GAAA;;AA+C9C;;;;;;AAMAC,EAAAA,mBArD8C,EAAA,SAAA,mBAAA,CAAA,OAAA,EAqDjB;AAC3B,WAAO,SAAA,CAAA,OAAA,CAAA,OAAA,CAAP,OAAO,CAAP;AAtD4C,GAAA;AAyD9CC,EAAAA,cAzD8C,EAAA,SAAA,cAAA,CAAA,GAAA,EAyD1B;AAClB,WAAO,SAAA,CAAA,OAAA,CAAA,OAAA,CAAgBC,GAAAA,CAAvB,IAAuBA,EAAhB,CAAP;AA1D4C,GAAA;;AA6D9C;;;;;;AAMAC,EAAAA,iBAnE8C,EAAA,SAAA,iBAAA,CAAA,GAAA,EAmEvB;AACrB,WAAO,KAAA,KAAA,CAAA,OAAA,CAAmB;AACxBC,MAAAA,OAAAA,EADwB,OAAA;AAExBC,MAAAA,QAAAA,EAAAA,gBAAAA,GAAAA,GAAAA,gBAAAA,GAA4C,KAAA,MAAA,CAAYC;AAFhC,KAAnB,CAAP;AAID;AAxE6C,CAAf,CAAjC;AAVA;;;;;kBAqFef,wB","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {Batcher} from '@webex/webex-core';\n\n/**\n * @class\n * @ignore\n */\nconst PersonUUIDRequestBatcher = Batcher.extend({\n  namespace: 'People',\n\n  /**\n   * @instance\n   * @memberof PersonUUIDRequestBatcher\n   * @param {HttpResponseObject} res\n   * @returns {Promise}\n   */\n  handleHttpSuccess(res) {\n    return Promise.all(res.body.items.map((personResponse) =>\n      this.handleItemSuccess(personResponse.id, personResponse)));\n  },\n\n  handleItemFailure(email, response) {\n    return this.getDeferredForResponse(email)\n      .then((defer) => {\n        defer.reject(response);\n      });\n  },\n\n  /**\n   * @instance\n   * @memberof PersonUUIDRequestBatcher\n   * @param {string} email\n   * @param {Object} response\n   * @returns {Promise}\n   */\n  handleItemSuccess(email, response) {\n    return this.getDeferredForResponse(email)\n      .then((defer) => {\n        defer.resolve(response);\n      });\n  },\n\n  /**\n   * @instance\n   * @memberof PersonUUIDRequestBatcher\n   * @param {string} uuidOrHydraId\n   * @returns {Promise<string>}\n   */\n  fingerprintRequest(uuidOrHydraId) {\n    const hydraId = this.webex.people.inferPersonIdFromUuid(uuidOrHydraId);\n\n    return Promise.resolve(hydraId);\n  },\n\n  /**\n   * @instance\n   * @memberof PersonUUIDRequestBatcher\n   * @param {string} hydraId\n   * @returns {Promise<string>}\n   */\n  fingerprintResponse(hydraId) {\n    return Promise.resolve(hydraId);\n  },\n\n  prepareRequest(ids) {\n    return Promise.resolve(ids.join());\n  },\n\n  /**\n   * @instance\n   * @memberof PersonUUIDRequestBatcher\n   * @param {Object} ids\n   * @returns {Promise<HttpResponseObject>}\n   */\n  submitHttpRequest(ids) {\n    return this.webex.request({\n      service: 'hydra',\n      resource: `people/?id=${ids}&showAllTypes=${this.config.showAllTypes}`\n    });\n  }\n});\n\nexport default PersonUUIDRequestBatcher;\n"]},"metadata":{},"sourceType":"script"}