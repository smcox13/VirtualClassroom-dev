{"ast":null,"code":"//**************************************************************************************\n\n/**\r\n * Making UTC date from local date\r\n * @param {Date} date Date to convert from\r\n * @returns {Date}\r\n */\nexport function getUTCDate(date) {\n  // noinspection NestedFunctionCallJS, MagicNumberJS\n  return new Date(date.getTime() + date.getTimezoneOffset() * 60000);\n} //**************************************************************************************\n// noinspection FunctionWithMultipleReturnPointsJS\n\n/**\r\n * Get value for input parameters, or set a default value\r\n * @param {Object} parameters\r\n * @param {string} name\r\n * @param defaultValue\r\n */\n\nexport function getParametersValue(parameters, name, defaultValue) {\n  // noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS\n  if (parameters instanceof Object === false) return defaultValue; // noinspection NonBlockStatementBodyJS\n\n  if (name in parameters) return parameters[name];\n  return defaultValue;\n} //**************************************************************************************\n\n/**\r\n * Converts \"ArrayBuffer\" into a hexdecimal string\r\n * @param {ArrayBuffer} inputBuffer\r\n * @param {number} [inputOffset=0]\r\n * @param {number} [inputLength=inputBuffer.byteLength]\r\n * @param {boolean} [insertSpace=false]\r\n * @returns {string}\r\n */\n\nexport function bufferToHexCodes(inputBuffer, inputOffset = 0, inputLength = inputBuffer.byteLength - inputOffset, insertSpace = false) {\n  let result = \"\";\n\n  for (const item of new Uint8Array(inputBuffer, inputOffset, inputLength)) {\n    // noinspection ChainedFunctionCallJS\n    const str = item.toString(16).toUpperCase(); // noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS\n\n    if (str.length === 1) result += \"0\";\n    result += str; // noinspection NonBlockStatementBodyJS\n\n    if (insertSpace) result += \" \";\n  }\n\n  return result.trim();\n} //**************************************************************************************\n// noinspection JSValidateJSDoc, FunctionWithMultipleReturnPointsJS\n\n/**\r\n * Check input \"ArrayBuffer\" for common functions\r\n * @param {LocalBaseBlock} baseBlock\r\n * @param {ArrayBuffer} inputBuffer\r\n * @param {number} inputOffset\r\n * @param {number} inputLength\r\n * @returns {boolean}\r\n */\n\nexport function checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\n  // noinspection ConstantOnRightSideOfComparisonJS\n  if (inputBuffer instanceof ArrayBuffer === false) {\n    // noinspection JSUndefinedPropertyAssignment\n    baseBlock.error = \"Wrong parameter: inputBuffer must be \\\"ArrayBuffer\\\"\";\n    return false;\n  } // noinspection ConstantOnRightSideOfComparisonJS\n\n\n  if (inputBuffer.byteLength === 0) {\n    // noinspection JSUndefinedPropertyAssignment\n    baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\n    return false;\n  } // noinspection ConstantOnRightSideOfComparisonJS\n\n\n  if (inputOffset < 0) {\n    // noinspection JSUndefinedPropertyAssignment\n    baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\n    return false;\n  } // noinspection ConstantOnRightSideOfComparisonJS\n\n\n  if (inputLength < 0) {\n    // noinspection JSUndefinedPropertyAssignment\n    baseBlock.error = \"Wrong parameter: inputLength less than zero\";\n    return false;\n  } // noinspection ConstantOnRightSideOfComparisonJS\n\n\n  if (inputBuffer.byteLength - inputOffset - inputLength < 0) {\n    // noinspection JSUndefinedPropertyAssignment\n    baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\n    return false;\n  }\n\n  return true;\n} //**************************************************************************************\n// noinspection FunctionWithMultipleReturnPointsJS\n\n/**\r\n * Convert number from 2^base to 2^10\r\n * @param {Uint8Array} inputBuffer\r\n * @param {number} inputBase\r\n * @returns {number}\r\n */\n\nexport function utilFromBase(inputBuffer, inputBase) {\n  let result = 0; // noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS\n\n  if (inputBuffer.length === 1) return inputBuffer[0]; // noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS\n\n  for (let i = inputBuffer.length - 1; i >= 0; i--) result += inputBuffer[inputBuffer.length - 1 - i] * Math.pow(2, inputBase * i);\n\n  return result;\n} //**************************************************************************************\n// noinspection FunctionWithMultipleLoopsJS, FunctionWithMultipleReturnPointsJS\n\n/**\r\n * Convert number from 2^10 to 2^base\r\n * @param {!number} value The number to convert\r\n * @param {!number} base The base for 2^base\r\n * @param {number} [reserved=0] Pre-defined number of bytes in output array (-1 = limited by function itself)\r\n * @returns {ArrayBuffer}\r\n */\n\nexport function utilToBase(value, base, reserved = -1) {\n  const internalReserved = reserved;\n  let internalValue = value;\n  let result = 0;\n  let biggest = Math.pow(2, base); // noinspection ConstantOnRightSideOfComparisonJS\n\n  for (let i = 1; i < 8; i++) {\n    if (value < biggest) {\n      let retBuf; // noinspection ConstantOnRightSideOfComparisonJS\n\n      if (internalReserved < 0) {\n        retBuf = new ArrayBuffer(i);\n        result = i;\n      } else {\n        // noinspection NonBlockStatementBodyJS\n        if (internalReserved < i) return new ArrayBuffer(0);\n        retBuf = new ArrayBuffer(internalReserved);\n        result = internalReserved;\n      }\n\n      const retView = new Uint8Array(retBuf); // noinspection ConstantOnRightSideOfComparisonJS\n\n      for (let j = i - 1; j >= 0; j--) {\n        const basis = Math.pow(2, j * base);\n        retView[result - j - 1] = Math.floor(internalValue / basis);\n        internalValue -= retView[result - j - 1] * basis;\n      }\n\n      return retBuf;\n    }\n\n    biggest *= Math.pow(2, base);\n  }\n\n  return new ArrayBuffer(0);\n} //**************************************************************************************\n// noinspection FunctionWithMultipleLoopsJS\n\n/**\r\n * Concatenate two ArrayBuffers\r\n * @param {...ArrayBuffer} buffers Set of ArrayBuffer\r\n */\n\nexport function utilConcatBuf(...buffers) {\n  //region Initial variables\n  let outputLength = 0;\n  let prevLength = 0; //endregion\n  //region Calculate output length\n  // noinspection NonBlockStatementBodyJS\n\n  for (const buffer of buffers) outputLength += buffer.byteLength; //endregion\n\n\n  const retBuf = new ArrayBuffer(outputLength);\n  const retView = new Uint8Array(retBuf);\n\n  for (const buffer of buffers) {\n    // noinspection NestedFunctionCallJS\n    retView.set(new Uint8Array(buffer), prevLength);\n    prevLength += buffer.byteLength;\n  }\n\n  return retBuf;\n} //**************************************************************************************\n// noinspection FunctionWithMultipleLoopsJS\n\n/**\r\n * Concatenate two Uint8Array\r\n * @param {...Uint8Array} views Set of Uint8Array\r\n */\n\nexport function utilConcatView(...views) {\n  //region Initial variables\n  let outputLength = 0;\n  let prevLength = 0; //endregion\n  //region Calculate output length\n  // noinspection NonBlockStatementBodyJS\n\n  for (const view of views) outputLength += view.length; //endregion\n\n\n  const retBuf = new ArrayBuffer(outputLength);\n  const retView = new Uint8Array(retBuf);\n\n  for (const view of views) {\n    retView.set(view, prevLength);\n    prevLength += view.length;\n  }\n\n  return retView;\n} //**************************************************************************************\n// noinspection FunctionWithMultipleLoopsJS\n\n/**\r\n * Decoding of \"two complement\" values\r\n * The function must be called in scope of instance of \"hexBlock\" class (\"valueHex\" and \"warnings\" properties must be present)\r\n * @returns {number}\r\n */\n\nexport function utilDecodeTC() {\n  const buf = new Uint8Array(this.valueHex); // noinspection ConstantOnRightSideOfComparisonJS\n\n  if (this.valueHex.byteLength >= 2) {\n    //noinspection JSBitwiseOperatorUsage, ConstantOnRightSideOfComparisonJS, LocalVariableNamingConventionJS, MagicNumberJS, NonShortCircuitBooleanExpressionJS\n    const condition1 = buf[0] === 0xFF && buf[1] & 0x80; // noinspection ConstantOnRightSideOfComparisonJS, LocalVariableNamingConventionJS, MagicNumberJS, NonShortCircuitBooleanExpressionJS\n\n    const condition2 = buf[0] === 0x00 && (buf[1] & 0x80) === 0x00; // noinspection NonBlockStatementBodyJS\n\n    if (condition1 || condition2) this.warnings.push(\"Needlessly long format\");\n  } //region Create big part of the integer\n\n\n  const bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\n  const bigIntView = new Uint8Array(bigIntBuffer); // noinspection NonBlockStatementBodyJS\n\n  for (let i = 0; i < this.valueHex.byteLength; i++) bigIntView[i] = 0; // noinspection MagicNumberJS, NonShortCircuitBooleanExpressionJS\n\n\n  bigIntView[0] = buf[0] & 0x80; // mask only the biggest bit\n\n  const bigInt = utilFromBase(bigIntView, 8); //endregion\n  //region Create small part of the integer\n\n  const smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\n  const smallIntView = new Uint8Array(smallIntBuffer); // noinspection NonBlockStatementBodyJS\n\n  for (let j = 0; j < this.valueHex.byteLength; j++) smallIntView[j] = buf[j]; // noinspection MagicNumberJS\n\n\n  smallIntView[0] &= 0x7F; // mask biggest bit\n\n  const smallInt = utilFromBase(smallIntView, 8); //endregion\n\n  return smallInt - bigInt;\n} //**************************************************************************************\n// noinspection FunctionWithMultipleLoopsJS, FunctionWithMultipleReturnPointsJS\n\n/**\r\n * Encode integer value to \"two complement\" format\r\n * @param {number} value Value to encode\r\n * @returns {ArrayBuffer}\r\n */\n\nexport function utilEncodeTC(value) {\n  // noinspection ConstantOnRightSideOfComparisonJS, ConditionalExpressionJS\n  const modValue = value < 0 ? value * -1 : value;\n  let bigInt = 128; // noinspection ConstantOnRightSideOfComparisonJS\n\n  for (let i = 1; i < 8; i++) {\n    if (modValue <= bigInt) {\n      // noinspection ConstantOnRightSideOfComparisonJS\n      if (value < 0) {\n        const smallInt = bigInt - modValue;\n        const retBuf = utilToBase(smallInt, 8, i);\n        const retView = new Uint8Array(retBuf); // noinspection MagicNumberJS\n\n        retView[0] |= 0x80;\n        return retBuf;\n      }\n\n      let retBuf = utilToBase(modValue, 8, i);\n      let retView = new Uint8Array(retBuf); //noinspection JSBitwiseOperatorUsage, MagicNumberJS, NonShortCircuitBooleanExpressionJS\n\n      if (retView[0] & 0x80) {\n        //noinspection JSCheckFunctionSignatures\n        const tempBuf = retBuf.slice(0);\n        const tempView = new Uint8Array(tempBuf);\n        retBuf = new ArrayBuffer(retBuf.byteLength + 1); // noinspection ReuseOfLocalVariableJS\n\n        retView = new Uint8Array(retBuf); // noinspection NonBlockStatementBodyJS\n\n        for (let k = 0; k < tempBuf.byteLength; k++) retView[k + 1] = tempView[k]; // noinspection MagicNumberJS\n\n\n        retView[0] = 0x00;\n      }\n\n      return retBuf;\n    }\n\n    bigInt *= Math.pow(2, 8);\n  }\n\n  return new ArrayBuffer(0);\n} //**************************************************************************************\n// noinspection FunctionWithMultipleReturnPointsJS, ParameterNamingConventionJS\n\n/**\r\n * Compare two array buffers\r\n * @param {!ArrayBuffer} inputBuffer1\r\n * @param {!ArrayBuffer} inputBuffer2\r\n * @returns {boolean}\r\n */\n\nexport function isEqualBuffer(inputBuffer1, inputBuffer2) {\n  // noinspection NonBlockStatementBodyJS\n  if (inputBuffer1.byteLength !== inputBuffer2.byteLength) return false; // noinspection LocalVariableNamingConventionJS\n\n  const view1 = new Uint8Array(inputBuffer1); // noinspection LocalVariableNamingConventionJS\n\n  const view2 = new Uint8Array(inputBuffer2);\n\n  for (let i = 0; i < view1.length; i++) {\n    // noinspection NonBlockStatementBodyJS\n    if (view1[i] !== view2[i]) return false;\n  }\n\n  return true;\n} //**************************************************************************************\n// noinspection FunctionWithMultipleReturnPointsJS\n\n/**\r\n * Pad input number with leade \"0\" if needed\r\n * @returns {string}\r\n * @param {number} inputNumber\r\n * @param {number} fullLength\r\n */\n\nexport function padNumber(inputNumber, fullLength) {\n  const str = inputNumber.toString(10); // noinspection NonBlockStatementBodyJS\n\n  if (fullLength < str.length) return \"\";\n  const dif = fullLength - str.length;\n  const padding = new Array(dif); // noinspection NonBlockStatementBodyJS\n\n  for (let i = 0; i < dif; i++) padding[i] = \"0\";\n\n  const paddingString = padding.join(\"\");\n  return paddingString.concat(str);\n} //**************************************************************************************\n\nconst base64Template = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nconst base64UrlTemplate = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\"; //**************************************************************************************\n// noinspection FunctionWithMultipleLoopsJS, OverlyComplexFunctionJS, FunctionTooLongJS, FunctionNamingConventionJS\n\n/**\r\n * Encode string into BASE64 (or \"base64url\")\r\n * @param {string} input\r\n * @param {boolean} useUrlTemplate If \"true\" then output would be encoded using \"base64url\"\r\n * @param {boolean} skipPadding Skip BASE-64 padding or not\r\n * @param {boolean} skipLeadingZeros Skip leading zeros in input data or not\r\n * @returns {string}\r\n */\n\nexport function toBase64(input, useUrlTemplate = false, skipPadding = false, skipLeadingZeros = false) {\n  let i = 0; // noinspection LocalVariableNamingConventionJS\n\n  let flag1 = 0; // noinspection LocalVariableNamingConventionJS\n\n  let flag2 = 0;\n  let output = \"\"; // noinspection ConditionalExpressionJS\n\n  const template = useUrlTemplate ? base64UrlTemplate : base64Template;\n\n  if (skipLeadingZeros) {\n    let nonZeroPosition = 0;\n\n    for (let i = 0; i < input.length; i++) {\n      // noinspection ConstantOnRightSideOfComparisonJS\n      if (input.charCodeAt(i) !== 0) {\n        nonZeroPosition = i; // noinspection BreakStatementJS\n\n        break;\n      }\n    } // noinspection AssignmentToFunctionParameterJS\n\n\n    input = input.slice(nonZeroPosition);\n  }\n\n  while (i < input.length) {\n    // noinspection LocalVariableNamingConventionJS, IncrementDecrementResultUsedJS\n    const chr1 = input.charCodeAt(i++); // noinspection NonBlockStatementBodyJS\n\n    if (i >= input.length) flag1 = 1; // noinspection LocalVariableNamingConventionJS, IncrementDecrementResultUsedJS\n\n    const chr2 = input.charCodeAt(i++); // noinspection NonBlockStatementBodyJS\n\n    if (i >= input.length) flag2 = 1; // noinspection LocalVariableNamingConventionJS, IncrementDecrementResultUsedJS\n\n    const chr3 = input.charCodeAt(i++); // noinspection LocalVariableNamingConventionJS\n\n    const enc1 = chr1 >> 2; // noinspection LocalVariableNamingConventionJS, MagicNumberJS, NonShortCircuitBooleanExpressionJS\n\n    const enc2 = (chr1 & 0x03) << 4 | chr2 >> 4; // noinspection LocalVariableNamingConventionJS, MagicNumberJS, NonShortCircuitBooleanExpressionJS\n\n    let enc3 = (chr2 & 0x0F) << 2 | chr3 >> 6; // noinspection LocalVariableNamingConventionJS, MagicNumberJS, NonShortCircuitBooleanExpressionJS\n\n    let enc4 = chr3 & 0x3F; // noinspection ConstantOnRightSideOfComparisonJS\n\n    if (flag1 === 1) {\n      // noinspection NestedAssignmentJS, AssignmentResultUsedJS, MagicNumberJS\n      enc3 = enc4 = 64;\n    } else {\n      // noinspection ConstantOnRightSideOfComparisonJS\n      if (flag2 === 1) {\n        // noinspection MagicNumberJS\n        enc4 = 64;\n      }\n    } // noinspection NonBlockStatementBodyJS\n\n\n    if (skipPadding) {\n      // noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS, MagicNumberJS\n      if (enc3 === 64) output += `${template.charAt(enc1)}${template.charAt(enc2)}`;else {\n        // noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS, MagicNumberJS\n        if (enc4 === 64) output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}`;else output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\n      }\n    } else output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\n  }\n\n  return output;\n} //**************************************************************************************\n// noinspection FunctionWithMoreThanThreeNegationsJS, FunctionWithMultipleLoopsJS, OverlyComplexFunctionJS, FunctionNamingConventionJS\n\n/**\r\n * Decode string from BASE64 (or \"base64url\")\r\n * @param {string} input\r\n * @param {boolean} [useUrlTemplate=false] If \"true\" then output would be encoded using \"base64url\"\r\n * @param {boolean} [cutTailZeros=false] If \"true\" then cut tailing zeroz from function result\r\n * @returns {string}\r\n */\n\nexport function fromBase64(input, useUrlTemplate = false, cutTailZeros = false) {\n  // noinspection ConditionalExpressionJS\n  const template = useUrlTemplate ? base64UrlTemplate : base64Template; //region Aux functions\n  // noinspection FunctionWithMultipleReturnPointsJS, NestedFunctionJS\n\n  function indexof(toSearch) {\n    // noinspection ConstantOnRightSideOfComparisonJS, MagicNumberJS\n    for (let i = 0; i < 64; i++) {\n      // noinspection NonBlockStatementBodyJS\n      if (template.charAt(i) === toSearch) return i;\n    } // noinspection MagicNumberJS\n\n\n    return 64;\n  } // noinspection NestedFunctionJS\n\n\n  function test(incoming) {\n    // noinspection ConstantOnRightSideOfComparisonJS, ConditionalExpressionJS, MagicNumberJS\n    return incoming === 64 ? 0x00 : incoming;\n  } //endregion\n\n\n  let i = 0;\n  let output = \"\";\n\n  while (i < input.length) {\n    // noinspection NestedFunctionCallJS, LocalVariableNamingConventionJS, IncrementDecrementResultUsedJS\n    const enc1 = indexof(input.charAt(i++)); // noinspection NestedFunctionCallJS, LocalVariableNamingConventionJS, ConditionalExpressionJS, MagicNumberJS, IncrementDecrementResultUsedJS\n\n    const enc2 = i >= input.length ? 0x00 : indexof(input.charAt(i++)); // noinspection NestedFunctionCallJS, LocalVariableNamingConventionJS, ConditionalExpressionJS, MagicNumberJS, IncrementDecrementResultUsedJS\n\n    const enc3 = i >= input.length ? 0x00 : indexof(input.charAt(i++)); // noinspection NestedFunctionCallJS, LocalVariableNamingConventionJS, ConditionalExpressionJS, MagicNumberJS, IncrementDecrementResultUsedJS\n\n    const enc4 = i >= input.length ? 0x00 : indexof(input.charAt(i++)); // noinspection LocalVariableNamingConventionJS, NonShortCircuitBooleanExpressionJS\n\n    const chr1 = test(enc1) << 2 | test(enc2) >> 4; // noinspection LocalVariableNamingConventionJS, MagicNumberJS, NonShortCircuitBooleanExpressionJS\n\n    const chr2 = (test(enc2) & 0x0F) << 4 | test(enc3) >> 2; // noinspection LocalVariableNamingConventionJS, MagicNumberJS, NonShortCircuitBooleanExpressionJS\n\n    const chr3 = (test(enc3) & 0x03) << 6 | test(enc4);\n    output += String.fromCharCode(chr1); // noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS, MagicNumberJS\n\n    if (enc3 !== 64) output += String.fromCharCode(chr2); // noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS, MagicNumberJS\n\n    if (enc4 !== 64) output += String.fromCharCode(chr3);\n  }\n\n  if (cutTailZeros) {\n    const outputLength = output.length;\n    let nonZeroStart = -1; // noinspection ConstantOnRightSideOfComparisonJS\n\n    for (let i = outputLength - 1; i >= 0; i--) {\n      // noinspection ConstantOnRightSideOfComparisonJS\n      if (output.charCodeAt(i) !== 0) {\n        nonZeroStart = i; // noinspection BreakStatementJS\n\n        break;\n      }\n    } // noinspection NonBlockStatementBodyJS, NegatedIfStatementJS\n\n\n    if (nonZeroStart !== -1) output = output.slice(0, nonZeroStart + 1);else output = \"\";\n  }\n\n  return output;\n} //**************************************************************************************\n\nexport function arrayBufferToString(buffer) {\n  let resultString = \"\";\n  const view = new Uint8Array(buffer); // noinspection NonBlockStatementBodyJS\n\n  for (const element of view) resultString += String.fromCharCode(element);\n\n  return resultString;\n} //**************************************************************************************\n\nexport function stringToArrayBuffer(str) {\n  const stringLength = str.length;\n  const resultBuffer = new ArrayBuffer(stringLength);\n  const resultView = new Uint8Array(resultBuffer); // noinspection NonBlockStatementBodyJS\n\n  for (let i = 0; i < stringLength; i++) resultView[i] = str.charCodeAt(i);\n\n  return resultBuffer;\n} //**************************************************************************************\n\nconst log2 = Math.log(2); //**************************************************************************************\n// noinspection FunctionNamingConventionJS\n\n/**\r\n * Get nearest to input length power of 2\r\n * @param {number} length Current length of existing array\r\n * @returns {number}\r\n */\n\nexport function nearestPowerOf2(length) {\n  const base = Math.log(length) / log2;\n  const floor = Math.floor(base);\n  const round = Math.round(base); // noinspection ConditionalExpressionJS\n\n  return floor === round ? floor : round;\n} //**************************************************************************************\n\n/**\r\n * Delete properties by name from specified object\r\n * @param {Object} object Object to delete properties from\r\n * @param {Array.<string>} propsArray Array of properties names\r\n */\n\nexport function clearProps(object, propsArray) {\n  for (const prop of propsArray) delete object[prop];\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pvutils/src/utils.js"],"names":["getUTCDate","date","Date","getTime","getTimezoneOffset","getParametersValue","parameters","name","defaultValue","Object","bufferToHexCodes","inputBuffer","inputOffset","inputLength","byteLength","insertSpace","result","item","Uint8Array","str","toString","toUpperCase","length","trim","checkBufferParams","baseBlock","ArrayBuffer","error","utilFromBase","inputBase","i","Math","pow","utilToBase","value","base","reserved","internalReserved","internalValue","biggest","retBuf","retView","j","basis","floor","utilConcatBuf","buffers","outputLength","prevLength","buffer","set","utilConcatView","views","view","utilDecodeTC","buf","valueHex","condition1","condition2","warnings","push","bigIntBuffer","bigIntView","bigInt","smallIntBuffer","smallIntView","smallInt","utilEncodeTC","modValue","tempBuf","slice","tempView","k","isEqualBuffer","inputBuffer1","inputBuffer2","view1","view2","padNumber","inputNumber","fullLength","dif","padding","Array","paddingString","join","concat","base64Template","base64UrlTemplate","toBase64","input","useUrlTemplate","skipPadding","skipLeadingZeros","flag1","flag2","output","template","nonZeroPosition","charCodeAt","chr1","chr2","chr3","enc1","enc2","enc3","enc4","charAt","fromBase64","cutTailZeros","indexof","toSearch","test","incoming","String","fromCharCode","nonZeroStart","arrayBufferToString","resultString","element","stringToArrayBuffer","stringLength","resultBuffer","resultView","log2","log","nearestPowerOf2","round","clearProps","object","propsArray","prop"],"mappings":"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","sourcesContent":["//**************************************************************************************\r\n/**\r\n * Making UTC date from local date\r\n * @param {Date} date Date to convert from\r\n * @returns {Date}\r\n */\r\nexport function getUTCDate(date)\r\n{\r\n\t// noinspection NestedFunctionCallJS, MagicNumberJS\r\n\treturn new Date(date.getTime() + (date.getTimezoneOffset() * 60000));\r\n}\r\n//**************************************************************************************\r\n// noinspection FunctionWithMultipleReturnPointsJS\r\n/**\r\n * Get value for input parameters, or set a default value\r\n * @param {Object} parameters\r\n * @param {string} name\r\n * @param defaultValue\r\n */\r\nexport function getParametersValue(parameters, name, defaultValue)\r\n{\r\n\t// noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS\r\n\tif((parameters instanceof Object) === false)\r\n\t\treturn defaultValue;\r\n\t\r\n\t// noinspection NonBlockStatementBodyJS\r\n\tif(name in parameters)\r\n\t\treturn parameters[name];\r\n\t\r\n\treturn defaultValue;\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Converts \"ArrayBuffer\" into a hexdecimal string\r\n * @param {ArrayBuffer} inputBuffer\r\n * @param {number} [inputOffset=0]\r\n * @param {number} [inputLength=inputBuffer.byteLength]\r\n * @param {boolean} [insertSpace=false]\r\n * @returns {string}\r\n */\r\nexport function bufferToHexCodes(inputBuffer, inputOffset = 0, inputLength = (inputBuffer.byteLength - inputOffset), insertSpace = false)\r\n{\r\n\tlet result = \"\";\r\n\t\r\n\tfor(const item of (new Uint8Array(inputBuffer, inputOffset, inputLength)))\r\n\t{\r\n\t\t// noinspection ChainedFunctionCallJS\r\n\t\tconst str = item.toString(16).toUpperCase();\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tif(str.length === 1)\r\n\t\t\tresult += \"0\";\r\n\t\t\r\n\t\tresult += str;\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(insertSpace)\r\n\t\t\tresult += \" \";\r\n\t}\r\n\t\r\n\treturn result.trim();\r\n}\r\n//**************************************************************************************\r\n// noinspection JSValidateJSDoc, FunctionWithMultipleReturnPointsJS\r\n/**\r\n * Check input \"ArrayBuffer\" for common functions\r\n * @param {LocalBaseBlock} baseBlock\r\n * @param {ArrayBuffer} inputBuffer\r\n * @param {number} inputOffset\r\n * @param {number} inputLength\r\n * @returns {boolean}\r\n */\r\nexport function checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength)\r\n{\r\n\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\tif((inputBuffer instanceof ArrayBuffer) === false)\r\n\t{\r\n\t\t// noinspection JSUndefinedPropertyAssignment\r\n\t\tbaseBlock.error = \"Wrong parameter: inputBuffer must be \\\"ArrayBuffer\\\"\";\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\tif(inputBuffer.byteLength === 0)\r\n\t{\r\n\t\t// noinspection JSUndefinedPropertyAssignment\r\n\t\tbaseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\tif(inputOffset < 0)\r\n\t{\r\n\t\t// noinspection JSUndefinedPropertyAssignment\r\n\t\tbaseBlock.error = \"Wrong parameter: inputOffset less than zero\";\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\tif(inputLength < 0)\r\n\t{\r\n\t\t// noinspection JSUndefinedPropertyAssignment\r\n\t\tbaseBlock.error = \"Wrong parameter: inputLength less than zero\";\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\tif((inputBuffer.byteLength - inputOffset - inputLength) < 0)\r\n\t{\r\n\t\t// noinspection JSUndefinedPropertyAssignment\r\n\t\tbaseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\treturn true;\r\n}\r\n//**************************************************************************************\r\n// noinspection FunctionWithMultipleReturnPointsJS\r\n/**\r\n * Convert number from 2^base to 2^10\r\n * @param {Uint8Array} inputBuffer\r\n * @param {number} inputBase\r\n * @returns {number}\r\n */\r\nexport function utilFromBase(inputBuffer, inputBase)\r\n{\r\n\tlet result = 0;\r\n\t\r\n\t// noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS\r\n\tif(inputBuffer.length === 1)\r\n\t\treturn inputBuffer[0];\r\n\t\r\n\t// noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS\r\n\tfor(let i = (inputBuffer.length - 1); i >= 0; i--)\r\n\t\tresult += inputBuffer[(inputBuffer.length - 1) - i] * Math.pow(2, inputBase * i);\r\n\t\r\n\treturn result;\r\n}\r\n//**************************************************************************************\r\n// noinspection FunctionWithMultipleLoopsJS, FunctionWithMultipleReturnPointsJS\r\n/**\r\n * Convert number from 2^10 to 2^base\r\n * @param {!number} value The number to convert\r\n * @param {!number} base The base for 2^base\r\n * @param {number} [reserved=0] Pre-defined number of bytes in output array (-1 = limited by function itself)\r\n * @returns {ArrayBuffer}\r\n */\r\nexport function utilToBase(value, base, reserved = (-1))\r\n{\r\n\tconst internalReserved = reserved;\r\n\tlet internalValue = value;\r\n\t\r\n\tlet result = 0;\r\n\tlet biggest = Math.pow(2, base);\r\n\t\r\n\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\tfor(let i = 1; i < 8; i++)\r\n\t{\r\n\t\tif(value < biggest)\r\n\t\t{\r\n\t\t\tlet retBuf;\r\n\t\t\t\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\t\t\tif(internalReserved < 0)\r\n\t\t\t{\r\n\t\t\t\tretBuf = new ArrayBuffer(i);\r\n\t\t\t\tresult = i;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// noinspection NonBlockStatementBodyJS\r\n\t\t\t\tif(internalReserved < i)\r\n\t\t\t\t\treturn (new ArrayBuffer(0));\r\n\t\t\t\t\r\n\t\t\t\tretBuf = new ArrayBuffer(internalReserved);\r\n\t\t\t\t\r\n\t\t\t\tresult = internalReserved;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconst retView = new Uint8Array(retBuf);\r\n\t\t\t\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\t\t\tfor(let j = (i - 1); j >= 0; j--)\r\n\t\t\t{\r\n\t\t\t\tconst basis = Math.pow(2, j * base);\r\n\t\t\t\t\r\n\t\t\t\tretView[result - j - 1] = Math.floor(internalValue / basis);\r\n\t\t\t\tinternalValue -= (retView[result - j - 1]) * basis;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\t\t\r\n\t\tbiggest *= Math.pow(2, base);\r\n\t}\r\n\t\r\n\treturn new ArrayBuffer(0);\r\n}\r\n//**************************************************************************************\r\n// noinspection FunctionWithMultipleLoopsJS\r\n/**\r\n * Concatenate two ArrayBuffers\r\n * @param {...ArrayBuffer} buffers Set of ArrayBuffer\r\n */\r\nexport function utilConcatBuf(...buffers)\r\n{\r\n\t//region Initial variables\r\n\tlet outputLength = 0;\r\n\tlet prevLength = 0;\r\n\t//endregion\r\n\t\r\n\t//region Calculate output length\r\n\t\r\n\t// noinspection NonBlockStatementBodyJS\r\n\tfor(const buffer of buffers)\r\n\t\toutputLength += buffer.byteLength;\r\n\t//endregion\r\n\t\r\n\tconst retBuf = new ArrayBuffer(outputLength);\r\n\tconst retView = new Uint8Array(retBuf);\r\n\t\r\n\tfor(const buffer of buffers)\r\n\t{\r\n\t\t// noinspection NestedFunctionCallJS\r\n\t\tretView.set(new Uint8Array(buffer), prevLength);\r\n\t\tprevLength += buffer.byteLength;\r\n\t}\r\n\t\r\n\treturn retBuf;\r\n}\r\n//**************************************************************************************\r\n// noinspection FunctionWithMultipleLoopsJS\r\n/**\r\n * Concatenate two Uint8Array\r\n * @param {...Uint8Array} views Set of Uint8Array\r\n */\r\nexport function utilConcatView(...views)\r\n{\r\n\t//region Initial variables\r\n\tlet outputLength = 0;\r\n\tlet prevLength = 0;\r\n\t//endregion\r\n\t\r\n\t//region Calculate output length\r\n\t// noinspection NonBlockStatementBodyJS\r\n\tfor(const view of views)\r\n\t\toutputLength += view.length;\r\n\t//endregion\r\n\t\r\n\tconst retBuf = new ArrayBuffer(outputLength);\r\n\tconst retView = new Uint8Array(retBuf);\r\n\t\r\n\tfor(const view of views)\r\n\t{\r\n\t\tretView.set(view, prevLength);\r\n\t\tprevLength += view.length;\r\n\t}\r\n\t\r\n\treturn retView;\r\n}\r\n//**************************************************************************************\r\n// noinspection FunctionWithMultipleLoopsJS\r\n/**\r\n * Decoding of \"two complement\" values\r\n * The function must be called in scope of instance of \"hexBlock\" class (\"valueHex\" and \"warnings\" properties must be present)\r\n * @returns {number}\r\n */\r\nexport function utilDecodeTC()\r\n{\r\n\tconst buf = new Uint8Array(this.valueHex);\r\n\t\r\n\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\tif(this.valueHex.byteLength >= 2)\r\n\t{\r\n\t\t//noinspection JSBitwiseOperatorUsage, ConstantOnRightSideOfComparisonJS, LocalVariableNamingConventionJS, MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\tconst condition1 = (buf[0] === 0xFF) && (buf[1] & 0x80);\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, LocalVariableNamingConventionJS, MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\tconst condition2 = (buf[0] === 0x00) && ((buf[1] & 0x80) === 0x00);\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(condition1 || condition2)\r\n\t\t\tthis.warnings.push(\"Needlessly long format\");\r\n\t}\r\n\t\r\n\t//region Create big part of the integer\r\n\tconst bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n\tconst bigIntView = new Uint8Array(bigIntBuffer);\r\n\t// noinspection NonBlockStatementBodyJS\r\n\tfor(let i = 0; i < this.valueHex.byteLength; i++)\r\n\t\tbigIntView[i] = 0;\r\n\t\r\n\t// noinspection MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\tbigIntView[0] = (buf[0] & 0x80); // mask only the biggest bit\r\n\t\r\n\tconst bigInt = utilFromBase(bigIntView, 8);\r\n\t//endregion\r\n\t\r\n\t//region Create small part of the integer\r\n\tconst smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n\tconst smallIntView = new Uint8Array(smallIntBuffer);\r\n\t// noinspection NonBlockStatementBodyJS\r\n\tfor(let j = 0; j < this.valueHex.byteLength; j++)\r\n\t\tsmallIntView[j] = buf[j];\r\n\t\r\n\t// noinspection MagicNumberJS\r\n\tsmallIntView[0] &= 0x7F; // mask biggest bit\r\n\t\r\n\tconst smallInt = utilFromBase(smallIntView, 8);\r\n\t//endregion\r\n\t\r\n\treturn (smallInt - bigInt);\r\n}\r\n//**************************************************************************************\r\n// noinspection FunctionWithMultipleLoopsJS, FunctionWithMultipleReturnPointsJS\r\n/**\r\n * Encode integer value to \"two complement\" format\r\n * @param {number} value Value to encode\r\n * @returns {ArrayBuffer}\r\n */\r\nexport function utilEncodeTC(value)\r\n{\r\n\t// noinspection ConstantOnRightSideOfComparisonJS, ConditionalExpressionJS\r\n\tconst modValue = (value < 0) ? (value * (-1)) : value;\r\n\tlet bigInt = 128;\r\n\t\r\n\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\tfor(let i = 1; i < 8; i++)\r\n\t{\r\n\t\tif(modValue <= bigInt)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\t\t\tif(value < 0)\r\n\t\t\t{\r\n\t\t\t\tconst smallInt = bigInt - modValue;\r\n\t\t\t\t\r\n\t\t\t\tconst retBuf = utilToBase(smallInt, 8, i);\r\n\t\t\t\tconst retView = new Uint8Array(retBuf);\r\n\t\t\t\t\r\n\t\t\t\t// noinspection MagicNumberJS\r\n\t\t\t\tretView[0] |= 0x80;\r\n\t\t\t\t\r\n\t\t\t\treturn retBuf;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet retBuf = utilToBase(modValue, 8, i);\r\n\t\t\tlet retView = new Uint8Array(retBuf);\r\n\t\t\t\r\n\t\t\t//noinspection JSBitwiseOperatorUsage, MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\t\tif(retView[0] & 0x80)\r\n\t\t\t{\r\n\t\t\t\t//noinspection JSCheckFunctionSignatures\r\n\t\t\t\tconst tempBuf = retBuf.slice(0);\r\n\t\t\t\tconst tempView = new Uint8Array(tempBuf);\r\n\t\t\t\t\r\n\t\t\t\tretBuf = new ArrayBuffer(retBuf.byteLength + 1);\r\n\t\t\t\t// noinspection ReuseOfLocalVariableJS\r\n\t\t\t\tretView = new Uint8Array(retBuf);\r\n\t\t\t\t\r\n\t\t\t\t// noinspection NonBlockStatementBodyJS\r\n\t\t\t\tfor(let k = 0; k < tempBuf.byteLength; k++)\r\n\t\t\t\t\tretView[k + 1] = tempView[k];\r\n\t\t\t\t\r\n\t\t\t\t// noinspection MagicNumberJS\r\n\t\t\t\tretView[0] = 0x00;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\t\t\r\n\t\tbigInt *= Math.pow(2, 8);\r\n\t}\r\n\t\r\n\treturn (new ArrayBuffer(0));\r\n}\r\n//**************************************************************************************\r\n// noinspection FunctionWithMultipleReturnPointsJS, ParameterNamingConventionJS\r\n/**\r\n * Compare two array buffers\r\n * @param {!ArrayBuffer} inputBuffer1\r\n * @param {!ArrayBuffer} inputBuffer2\r\n * @returns {boolean}\r\n */\r\nexport function isEqualBuffer(inputBuffer1, inputBuffer2)\r\n{\r\n\t// noinspection NonBlockStatementBodyJS\r\n\tif(inputBuffer1.byteLength !== inputBuffer2.byteLength)\r\n\t\treturn false;\r\n\t\r\n\t// noinspection LocalVariableNamingConventionJS\r\n\tconst view1 = new Uint8Array(inputBuffer1);\r\n\t// noinspection LocalVariableNamingConventionJS\r\n\tconst view2 = new Uint8Array(inputBuffer2);\r\n\t\r\n\tfor(let i = 0; i < view1.length; i++)\r\n\t{\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(view1[i] !== view2[i])\r\n\t\t\treturn false;\r\n\t}\r\n\t\r\n\treturn true;\r\n}\r\n//**************************************************************************************\r\n// noinspection FunctionWithMultipleReturnPointsJS\r\n/**\r\n * Pad input number with leade \"0\" if needed\r\n * @returns {string}\r\n * @param {number} inputNumber\r\n * @param {number} fullLength\r\n */\r\nexport function padNumber(inputNumber, fullLength)\r\n{\r\n\tconst str = inputNumber.toString(10);\r\n\t\r\n\t// noinspection NonBlockStatementBodyJS\r\n\tif(fullLength < str.length)\r\n\t\treturn \"\";\r\n\t\r\n\tconst dif = fullLength - str.length;\r\n\t\r\n\tconst padding = new Array(dif);\r\n\t// noinspection NonBlockStatementBodyJS\r\n\tfor(let i = 0; i < dif; i++)\r\n\t\tpadding[i] = \"0\";\r\n\t\r\n\tconst paddingString = padding.join(\"\");\r\n\t\r\n\treturn paddingString.concat(str);\r\n}\r\n//**************************************************************************************\r\nconst base64Template = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\nconst base64UrlTemplate = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\";\r\n//**************************************************************************************\r\n// noinspection FunctionWithMultipleLoopsJS, OverlyComplexFunctionJS, FunctionTooLongJS, FunctionNamingConventionJS\r\n/**\r\n * Encode string into BASE64 (or \"base64url\")\r\n * @param {string} input\r\n * @param {boolean} useUrlTemplate If \"true\" then output would be encoded using \"base64url\"\r\n * @param {boolean} skipPadding Skip BASE-64 padding or not\r\n * @param {boolean} skipLeadingZeros Skip leading zeros in input data or not\r\n * @returns {string}\r\n */\r\nexport function toBase64(input, useUrlTemplate = false, skipPadding = false, skipLeadingZeros = false)\r\n{\r\n\tlet i = 0;\r\n\t\r\n\t// noinspection LocalVariableNamingConventionJS\r\n\tlet flag1 = 0;\r\n\t// noinspection LocalVariableNamingConventionJS\r\n\tlet flag2 = 0;\r\n\t\r\n\tlet output = \"\";\r\n\t\r\n\t// noinspection ConditionalExpressionJS\r\n\tconst template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n\t\r\n\tif(skipLeadingZeros)\r\n\t{\r\n\t\tlet nonZeroPosition = 0;\r\n\t\t\r\n\t\tfor(let i = 0; i < input.length; i++)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\t\t\tif(input.charCodeAt(i) !== 0)\r\n\t\t\t{\r\n\t\t\t\tnonZeroPosition = i;\r\n\t\t\t\t// noinspection BreakStatementJS\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\tinput = input.slice(nonZeroPosition);\r\n\t}\r\n\t\r\n\twhile(i < input.length)\r\n\t{\r\n\t\t// noinspection LocalVariableNamingConventionJS, IncrementDecrementResultUsedJS\r\n\t\tconst chr1 = input.charCodeAt(i++);\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(i >= input.length)\r\n\t\t\tflag1 = 1;\r\n\t\t// noinspection LocalVariableNamingConventionJS, IncrementDecrementResultUsedJS\r\n\t\tconst chr2 = input.charCodeAt(i++);\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(i >= input.length)\r\n\t\t\tflag2 = 1;\r\n\t\t// noinspection LocalVariableNamingConventionJS, IncrementDecrementResultUsedJS\r\n\t\tconst chr3 = input.charCodeAt(i++);\r\n\t\t\r\n\t\t// noinspection LocalVariableNamingConventionJS\r\n\t\tconst enc1 = chr1 >> 2;\r\n\t\t// noinspection LocalVariableNamingConventionJS, MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\tconst enc2 = ((chr1 & 0x03) << 4) | (chr2 >> 4);\r\n\t\t// noinspection LocalVariableNamingConventionJS, MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\tlet enc3 = ((chr2 & 0x0F) << 2) | (chr3 >> 6);\r\n\t\t// noinspection LocalVariableNamingConventionJS, MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\tlet enc4 = chr3 & 0x3F;\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\t\tif(flag1 === 1)\r\n\t\t{\r\n\t\t\t// noinspection NestedAssignmentJS, AssignmentResultUsedJS, MagicNumberJS\r\n\t\t\tenc3 = enc4 = 64;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\t\t\tif(flag2 === 1)\r\n\t\t\t{\r\n\t\t\t\t// noinspection MagicNumberJS\r\n\t\t\t\tenc4 = 64;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(skipPadding)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS, MagicNumberJS\r\n\t\t\tif(enc3 === 64)\r\n\t\t\t\toutput += `${template.charAt(enc1)}${template.charAt(enc2)}`;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS, MagicNumberJS\r\n\t\t\t\tif(enc4 === 64)\r\n\t\t\t\t\toutput += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}`;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t\toutput += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n\t}\r\n\t\r\n\treturn output;\r\n}\r\n//**************************************************************************************\r\n// noinspection FunctionWithMoreThanThreeNegationsJS, FunctionWithMultipleLoopsJS, OverlyComplexFunctionJS, FunctionNamingConventionJS\r\n/**\r\n * Decode string from BASE64 (or \"base64url\")\r\n * @param {string} input\r\n * @param {boolean} [useUrlTemplate=false] If \"true\" then output would be encoded using \"base64url\"\r\n * @param {boolean} [cutTailZeros=false] If \"true\" then cut tailing zeroz from function result\r\n * @returns {string}\r\n */\r\nexport function fromBase64(input, useUrlTemplate = false, cutTailZeros = false)\r\n{\r\n\t// noinspection ConditionalExpressionJS\r\n\tconst template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n\t\r\n\t//region Aux functions\r\n\t// noinspection FunctionWithMultipleReturnPointsJS, NestedFunctionJS\r\n\tfunction indexof(toSearch)\r\n\t{\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, MagicNumberJS\r\n\t\tfor(let i = 0; i < 64; i++)\r\n\t\t{\r\n\t\t\t// noinspection NonBlockStatementBodyJS\r\n\t\t\tif(template.charAt(i) === toSearch)\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection MagicNumberJS\r\n\t\treturn 64;\r\n\t}\r\n\t\r\n\t// noinspection NestedFunctionJS\r\n\tfunction test(incoming)\r\n\t{\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConditionalExpressionJS, MagicNumberJS\r\n\t\treturn ((incoming === 64) ? 0x00 : incoming);\r\n\t}\r\n\t//endregion\r\n\t\r\n\tlet i = 0;\r\n\t\r\n\tlet output = \"\";\r\n\t\r\n\twhile(i < input.length)\r\n\t{\r\n\t\t// noinspection NestedFunctionCallJS, LocalVariableNamingConventionJS, IncrementDecrementResultUsedJS\r\n\t\tconst enc1 = indexof(input.charAt(i++));\r\n\t\t// noinspection NestedFunctionCallJS, LocalVariableNamingConventionJS, ConditionalExpressionJS, MagicNumberJS, IncrementDecrementResultUsedJS\r\n\t\tconst enc2 = (i >= input.length) ? 0x00 : indexof(input.charAt(i++));\r\n\t\t// noinspection NestedFunctionCallJS, LocalVariableNamingConventionJS, ConditionalExpressionJS, MagicNumberJS, IncrementDecrementResultUsedJS\r\n\t\tconst enc3 = (i >= input.length) ? 0x00 : indexof(input.charAt(i++));\r\n\t\t// noinspection NestedFunctionCallJS, LocalVariableNamingConventionJS, ConditionalExpressionJS, MagicNumberJS, IncrementDecrementResultUsedJS\r\n\t\tconst enc4 = (i >= input.length) ? 0x00 : indexof(input.charAt(i++));\r\n\t\t\r\n\t\t// noinspection LocalVariableNamingConventionJS, NonShortCircuitBooleanExpressionJS\r\n\t\tconst chr1 = (test(enc1) << 2) | (test(enc2) >> 4);\r\n\t\t// noinspection LocalVariableNamingConventionJS, MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\tconst chr2 = ((test(enc2) & 0x0F) << 4) | (test(enc3) >> 2);\r\n\t\t// noinspection LocalVariableNamingConventionJS, MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\tconst chr3 = ((test(enc3) & 0x03) << 6) | test(enc4);\r\n\t\t\r\n\t\toutput += String.fromCharCode(chr1);\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS, MagicNumberJS\r\n\t\tif(enc3 !== 64)\r\n\t\t\toutput += String.fromCharCode(chr2);\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, NonBlockStatementBodyJS, MagicNumberJS\r\n\t\tif(enc4 !== 64)\r\n\t\t\toutput += String.fromCharCode(chr3);\r\n\t}\r\n\t\r\n\tif(cutTailZeros)\r\n\t{\r\n\t\tconst outputLength = output.length;\r\n\t\tlet nonZeroStart = (-1);\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\t\tfor(let i = (outputLength - 1); i >= 0; i--)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS\r\n\t\t\tif(output.charCodeAt(i) !== 0)\r\n\t\t\t{\r\n\t\t\t\tnonZeroStart = i;\r\n\t\t\t\t// noinspection BreakStatementJS\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS, NegatedIfStatementJS\r\n\t\tif(nonZeroStart !== (-1))\r\n\t\t\toutput = output.slice(0, nonZeroStart + 1);\r\n\t\telse\r\n\t\t\toutput = \"\";\r\n\t}\r\n\t\r\n\treturn output;\r\n}\r\n//**************************************************************************************\r\nexport function arrayBufferToString(buffer)\r\n{\r\n\tlet resultString = \"\";\r\n\tconst view = new Uint8Array(buffer);\r\n\t\r\n\t// noinspection NonBlockStatementBodyJS\r\n\tfor(const element of view)\r\n\t\tresultString += String.fromCharCode(element);\r\n\t\r\n\treturn resultString;\r\n}\r\n//**************************************************************************************\r\nexport function stringToArrayBuffer(str)\r\n{\r\n\tconst stringLength = str.length;\r\n\t\r\n\tconst resultBuffer = new ArrayBuffer(stringLength);\r\n\tconst resultView = new Uint8Array(resultBuffer);\r\n\t\r\n\t// noinspection NonBlockStatementBodyJS\r\n\tfor(let i = 0; i < stringLength; i++)\r\n\t\tresultView[i] = str.charCodeAt(i);\r\n\t\r\n\treturn resultBuffer;\r\n}\r\n//**************************************************************************************\r\nconst log2 = Math.log(2);\r\n//**************************************************************************************\r\n// noinspection FunctionNamingConventionJS\r\n/**\r\n * Get nearest to input length power of 2\r\n * @param {number} length Current length of existing array\r\n * @returns {number}\r\n */\r\nexport function nearestPowerOf2(length)\r\n{\r\n\tconst base = (Math.log(length) / log2);\r\n\t\r\n\tconst floor = Math.floor(base);\r\n\tconst round = Math.round(base);\r\n\t\r\n\t// noinspection ConditionalExpressionJS\r\n\treturn ((floor === round) ? floor : round);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Delete properties by name from specified object\r\n * @param {Object} object Object to delete properties from\r\n * @param {Array.<string>} propsArray Array of properties names\r\n */\r\nexport function clearProps(object, propsArray)\r\n{\r\n\tfor(const prop of propsArray)\r\n\t\tdelete object[prop];\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}