{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _loggerProxy = require('../common/logs/logger-proxy');\n\nvar _loggerProxy2 = _interopRequireDefault(_loggerProxy);\n\nvar _constants = require('../constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @class MeetingRequest\n */\n\n\nvar MeetingRequest = function (_StatelessWebexPlugin) {\n  (0, _inherits3.default)(MeetingRequest, _StatelessWebexPlugin);\n\n  function MeetingRequest() {\n    (0, _classCallCheck3.default)(this, MeetingRequest);\n    return (0, _possibleConstructorReturn3.default)(this, (MeetingRequest.__proto__ || (0, _getPrototypeOf2.default)(MeetingRequest)).apply(this, arguments));\n  }\n\n  (0, _createClass3.default)(MeetingRequest, [{\n    key: 'getActiveMeetings',\n\n    /**\n       *  get all the active meetings for the user\n       * @returns {Array} return locus array\n      */\n    value: function getActiveMeetings() {\n      var _this2 = this;\n\n      return this.request({\n        api: _constants.API.LOCUS,\n        resource: _constants.RESOURCE.LOCI\n      }).then(function (res) {\n        return _this2.determineRedirections(res.body);\n      }).catch(function (error) {\n        _loggerProxy2.default.logger.error('MeetingRequest->getActiveMeetings# failed to get locus details, ' + error);\n      });\n    } // locus federation, determines and populate locus if the responseBody has remote URLs to fetch locus details\n\n    /**\n     *  Fetches indivdual locus rather then getting all at once\n     * @param {object} responseBody determine the locus and fetch them if a remoteUrl is given\n     * @returns {Promise}  returns locusObject array\n     */\n\n  }, {\n    key: 'determineRedirections',\n    value: function determineRedirections(responseBody) {\n      var _this3 = this;\n\n      if (responseBody.remoteLocusClusterUrls && responseBody.remoteLocusClusterUrls.length) {\n        return _promise2.default.all(responseBody.remoteLocusClusterUrls.map(function (url) {\n          return _this3.request({\n            method: _constants.HTTP_VERBS.GET,\n            url: url,\n            runWhitelistedDomains: true // allows auth token for whitelisted domain\n\n          }).then(function (res) {\n            responseBody.loci = responseBody.loci.concat(res.body.loci);\n            responseBody.locusUrls = responseBody.locusUrls.concat(res.body.locusUrls);\n            return _promise2.default.resolve(responseBody);\n          }).catch(function (error) {\n            _loggerProxy2.default.logger.error('MeetingRequest->determineRedirections# failed to get locus details from url: ' + url + ', reason: ' + error);\n          });\n        })).then(function () {\n          return _promise2.default.resolve(responseBody);\n        });\n      }\n\n      return _promise2.default.resolve(responseBody);\n    }\n  }]);\n  return MeetingRequest;\n}(_webexCore.StatelessWebexPlugin);\n\nexports.default = MeetingRequest;","map":{"version":3,"sources":["request.js"],"names":["MeetingRequest","StatelessWebexPlugin","api","API","resource","RESOURCE","LOCI","res","LoggerProxy","responseBody","method","HTTP_VERBS","url","runWhitelistedDomains"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,IAAA,YAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;;;;;;AAMA;;;;;IAGqBA,c;;;;;;;;;;;AACnB;;;;wCAIoB;AAAA,UAAA,MAAA,GAAA,IAAA;;AAClB,aAAO,KAAA,OAAA,CAAa;AAClBE,QAAAA,GAAAA,EAAKC,UAAAA,CAAAA,GAAAA,CADa,KAAA;AAElBC,QAAAA,QAAAA,EAAUC,UAAAA,CAAAA,QAAAA,CAASC;AAFD,OAAb,EAAA,IAAA,CAIC,UAAA,GAAA,EAAA;AAAA,eAAS,MAAA,CAAA,qBAAA,CAA2BC,GAAAA,CAApC,IAAS,CAAT;AAJD,OAAA,EAAA,KAAA,CAKE,UAAA,KAAA,EAAW;AAChBC,QAAAA,aAAAA,CAAAA,OAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAAA,qEAAAA,KAAAA;AANJ,OAAO,CAAP;AAQD,K,CAED;;AAEA;;;;;;;;0CAKsBC,Y,EAAc;AAAA,UAAA,MAAA,GAAA,IAAA;;AAClC,UAAIA,YAAAA,CAAAA,sBAAAA,IAAuCA,YAAAA,CAAAA,sBAAAA,CAA3C,MAAA,EAAuF;AACrF,eAAO,SAAA,CAAA,OAAA,CAAA,GAAA,CAAY,YAAA,CAAA,sBAAA,CAAA,GAAA,CAAwC,UAAA,GAAA,EAAA;AAAA,iBAAS,MAAA,CAAA,OAAA,CAAa;AAC/EC,YAAAA,MAAAA,EAAQC,UAAAA,CAAAA,UAAAA,CADuE,GAAA;AAE/EC,YAAAA,GAAAA,EAF+E,GAAA;AAG/EC,YAAAA,qBAAAA,EAH+E,IAAA,CAGnD;;AAHmD,WAAb,EAAA,IAAA,CAK5D,UAAA,GAAA,EAAS;AACbJ,YAAAA,YAAAA,CAAAA,IAAAA,GAAoBA,YAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAyBF,GAAAA,CAAAA,IAAAA,CAA7CE,IAAoBA,CAApBA;AACAA,YAAAA,YAAAA,CAAAA,SAAAA,GAAyBA,YAAAA,CAAAA,SAAAA,CAAAA,MAAAA,CAA8BF,GAAAA,CAAAA,IAAAA,CAAvDE,SAAyBA,CAAzBA;AAEA,mBAAO,SAAA,CAAA,OAAA,CAAA,OAAA,CAAP,YAAO,CAAP;AATgE,WAAA,EAAA,KAAA,CAW3D,UAAA,KAAA,EAAW;AAChBD,YAAAA,aAAAA,CAAAA,OAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAAA,kFAAAA,GAAAA,GAAAA,YAAAA,GAAAA,KAAAA;AAZuD,WAAS,CAAT;AAApD,SAAY,CAAZ,EAAA,IAAA,CAcC,YAAA;AAAA,iBAAM,SAAA,CAAA,OAAA,CAAA,OAAA,CAAN,YAAM,CAAN;AAdR,SAAO,CAAP;AAeD;;AAED,aAAO,SAAA,CAAA,OAAA,CAAA,OAAA,CAAP,YAAO,CAAP;AACD;;;EA3CyCP,UAAAA,CAAAA,oB;;kBAAvBD,c","sourcesContent":["import {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {\n  HTTP_VERBS,\n  API,\n  RESOURCE\n} from '../constants';\n\n/**\n * @class MeetingRequest\n */\nexport default class MeetingRequest extends StatelessWebexPlugin {\n  /**\n     *  get all the active meetings for the user\n     * @returns {Array} return locus array\n    */\n  getActiveMeetings() {\n    return this.request({\n      api: API.LOCUS,\n      resource: RESOURCE.LOCI\n    })\n      .then((res) => this.determineRedirections(res.body))\n      .catch((error) => {\n        LoggerProxy.logger.error(`MeetingRequest->getActiveMeetings# failed to get locus details, ${error}`);\n      });\n  }\n\n  // locus federation, determines and populate locus if the responseBody has remote URLs to fetch locus details\n\n  /**\n   *  Fetches indivdual locus rather then getting all at once\n   * @param {object} responseBody determine the locus and fetch them if a remoteUrl is given\n   * @returns {Promise}  returns locusObject array\n   */\n  determineRedirections(responseBody) {\n    if (responseBody.remoteLocusClusterUrls && responseBody.remoteLocusClusterUrls.length) {\n      return Promise.all(responseBody.remoteLocusClusterUrls.map((url) => this.request({\n        method: HTTP_VERBS.GET,\n        url,\n        runWhitelistedDomains: true // allows auth token for whitelisted domain\n      })\n        .then((res) => {\n          responseBody.loci = responseBody.loci.concat(res.body.loci);\n          responseBody.locusUrls = responseBody.locusUrls.concat(res.body.locusUrls);\n\n          return Promise.resolve(responseBody);\n        })\n        .catch((error) => {\n          LoggerProxy.logger.error(`MeetingRequest->determineRedirections# failed to get locus details from url: ${url}, reason: ${error}`);\n        })))\n        .then(() => Promise.resolve(responseBody));\n    }\n\n    return Promise.resolve(responseBody);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}