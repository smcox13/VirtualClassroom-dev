{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\nimport AttributeTypeAndValue from \"./AttributeTypeAndValue.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nexport default class RelativeDistinguishedNames {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for RelativeDistinguishedNames class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   * @property {Array.<AttributeTypeAndValue>} [typesAndValues] Array of \"type and value\" objects\r\n   * @property {ArrayBuffer} [valueBeforeDecode] Value of the RDN before decoding from schema\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Array.<AttributeTypeAndValue>}\r\n     * @desc Array of \"type and value\" objects\r\n     */\n    this.typesAndValues = getParametersValue(parameters, \"typesAndValues\", RelativeDistinguishedNames.defaultValues(\"typesAndValues\"));\n    /**\r\n     * @type {ArrayBuffer}\r\n     * @desc Value of the RDN before decoding from schema\r\n     */\n\n    this.valueBeforeDecode = getParametersValue(parameters, \"valueBeforeDecode\", RelativeDistinguishedNames.defaultValues(\"valueBeforeDecode\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"typesAndValues\":\n        return [];\n\n      case \"valueBeforeDecode\":\n        return new ArrayBuffer(0);\n\n      default:\n        throw new Error(`Invalid member name for RelativeDistinguishedNames class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"typesAndValues\":\n        return memberValue.length === 0;\n\n      case \"valueBeforeDecode\":\n        return memberValue.byteLength === 0;\n\n      default:\n        throw new Error(`Invalid member name for RelativeDistinguishedNames class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * RDNSequence ::= Sequence OF RelativeDistinguishedName\r\n   *\r\n   * RelativeDistinguishedName ::=\r\n   * SET SIZE (1..MAX) OF AttributeTypeAndValue\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName] Name for entire block\r\n     * @property {string} [repeatedSequence] Name for \"repeatedSequence\" block\r\n     * @property {string} [repeatedSet] Name for \"repeatedSet\" block\r\n     * @property {string} [typeAndValue] Name for \"typeAndValue\" block\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Repeated({\n        name: names.repeatedSequence || \"\",\n        value: new asn1js.Set({\n          value: [new asn1js.Repeated({\n            name: names.repeatedSet || \"\",\n            value: AttributeTypeAndValue.schema(names.typeAndValue || {})\n          })]\n        })\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"RDN\", \"typesAndValues\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, RelativeDistinguishedNames.schema({\n      names: {\n        blockName: \"RDN\",\n        repeatedSet: \"typesAndValues\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for RelativeDistinguishedNames\"); //endregion\n    //region Get internal properties from parsed schema\n\n    if (\"typesAndValues\" in asn1.result) // Could be a case when there is no \"types and values\"\n      this.typesAndValues = Array.from(asn1.result.typesAndValues, element => new AttributeTypeAndValue({\n        schema: element\n      })); // noinspection JSUnresolvedVariable\n\n    this.valueBeforeDecode = asn1.result.RDN.valueBeforeDecode; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Decode stored TBS value\n    if (this.valueBeforeDecode.byteLength === 0) // No stored encoded array, create \"from scratch\"\n      {\n        return new asn1js.Sequence({\n          value: [new asn1js.Set({\n            value: Array.from(this.typesAndValues, element => element.toSchema())\n          })]\n        });\n      }\n\n    const asn1 = asn1js.fromBER(this.valueBeforeDecode); //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n    return asn1.result; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      typesAndValues: Array.from(this.typesAndValues, element => element.toJSON())\n    };\n  } //**********************************************************************************\n\n  /**\r\n   * Compare two RDN values, or RDN with ArrayBuffer value\r\n   * @param {(RelativeDistinguishedNames|ArrayBuffer)} compareTo The value compare to current\r\n   * @returns {boolean}\r\n   */\n\n\n  isEqual(compareTo) {\n    if (compareTo instanceof RelativeDistinguishedNames) {\n      if (this.typesAndValues.length !== compareTo.typesAndValues.length) return false;\n\n      for (const [index, typeAndValue] of this.typesAndValues.entries()) {\n        if (typeAndValue.isEqual(compareTo.typesAndValues[index]) === false) return false;\n      }\n\n      return true;\n    }\n\n    if (compareTo instanceof ArrayBuffer) return isEqualBuffer(this.valueBeforeDecode, compareTo);\n    return false;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/RelativeDistinguishedNames.js"],"names":["asn1js","getParametersValue","isEqualBuffer","clearProps","AttributeTypeAndValue","RelativeDistinguishedNames","constructor","parameters","typesAndValues","defaultValues","valueBeforeDecode","fromSchema","schema","memberName","ArrayBuffer","Error","compareWithDefault","memberValue","length","byteLength","names","Sequence","name","blockName","value","Repeated","repeatedSequence","Set","repeatedSet","typeAndValue","asn1","compareSchema","verified","result","Array","from","element","RDN","toSchema","fromBER","toJSON","isEqual","compareTo","index","entries"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport AttributeTypeAndValue from \"./AttributeTypeAndValue.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class RelativeDistinguishedNames\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RelativeDistinguishedNames class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {Array.<AttributeTypeAndValue>} [typesAndValues] Array of \"type and value\" objects\r\n\t * @property {ArrayBuffer} [valueBeforeDecode] Value of the RDN before decoding from schema\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<AttributeTypeAndValue>}\r\n\t\t * @desc Array of \"type and value\" objects\r\n\t\t */\r\n\t\tthis.typesAndValues = getParametersValue(parameters, \"typesAndValues\", RelativeDistinguishedNames.defaultValues(\"typesAndValues\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc Value of the RDN before decoding from schema\r\n\t\t */\r\n\t\tthis.valueBeforeDecode = getParametersValue(parameters, \"valueBeforeDecode\", RelativeDistinguishedNames.defaultValues(\"valueBeforeDecode\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"typesAndValues\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"valueBeforeDecode\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RelativeDistinguishedNames class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"typesAndValues\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"valueBeforeDecode\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RelativeDistinguishedNames class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RDNSequence ::= Sequence OF RelativeDistinguishedName\r\n\t *\r\n\t * RelativeDistinguishedName ::=\r\n\t * SET SIZE (1..MAX) OF AttributeTypeAndValue\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName] Name for entire block\r\n\t\t * @property {string} [repeatedSequence] Name for \"repeatedSequence\" block\r\n\t\t * @property {string} [repeatedSet] Name for \"repeatedSet\" block\r\n\t\t * @property {string} [typeAndValue] Name for \"typeAndValue\" block\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.repeatedSequence || \"\"),\r\n\t\t\t\t\tvalue: new asn1js.Set({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: (names.repeatedSet || \"\"),\r\n\t\t\t\t\t\t\t\tvalue: AttributeTypeAndValue.schema(names.typeAndValue || {})\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"RDN\",\r\n\t\t\t\"typesAndValues\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRelativeDistinguishedNames.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"RDN\",\r\n\t\t\t\t\trepeatedSet: \"typesAndValues\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RelativeDistinguishedNames\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"typesAndValues\" in asn1.result) // Could be a case when there is no \"types and values\"\r\n\t\t\tthis.typesAndValues = Array.from(asn1.result.typesAndValues, element => new AttributeTypeAndValue({ schema: element }));\r\n\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tthis.valueBeforeDecode = asn1.result.RDN.valueBeforeDecode;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tif(this.valueBeforeDecode.byteLength === 0) // No stored encoded array, create \"from scratch\"\r\n\t\t{\r\n\t\t\treturn (new asn1js.Sequence({\r\n\t\t\t\tvalue: [new asn1js.Set({\r\n\t\t\t\t\tvalue: Array.from(this.typesAndValues, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tconst asn1 = asn1js.fromBER(this.valueBeforeDecode);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn asn1.result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\ttypesAndValues: Array.from(this.typesAndValues, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare two RDN values, or RDN with ArrayBuffer value\r\n\t * @param {(RelativeDistinguishedNames|ArrayBuffer)} compareTo The value compare to current\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(compareTo)\r\n\t{\r\n\t\tif(compareTo instanceof RelativeDistinguishedNames)\r\n\t\t{\r\n\t\t\tif(this.typesAndValues.length !== compareTo.typesAndValues.length)\r\n\t\t\t\treturn false;\r\n\r\n\t\t\tfor(const [index, typeAndValue] of this.typesAndValues.entries())\r\n\t\t\t{\r\n\t\t\t\tif(typeAndValue.isEqual(compareTo.typesAndValues[index]) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(compareTo instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.valueBeforeDecode, compareTo);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}