{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport EncryptedData from \"./EncryptedData.js\";\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC7292\r\n */\n\nexport default class PKCS8ShroudedKeyBag {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for PKCS8ShroudedKeyBag class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc encryptionAlgorithm\r\n     */\n    this.encryptionAlgorithm = getParametersValue(parameters, \"encryptionAlgorithm\", PKCS8ShroudedKeyBag.defaultValues(\"encryptionAlgorithm\"));\n    /**\r\n     * @type {OctetString}\r\n     * @desc encryptedData\r\n     */\n\n    this.encryptedData = getParametersValue(parameters, \"encryptedData\", PKCS8ShroudedKeyBag.defaultValues(\"encryptedData\"));\n    if (\"parsedValue\" in parameters)\n      /**\r\n       * @type {*}\r\n       * @desc parsedValue\r\n       */\n      this.parsedValue = getParametersValue(parameters, \"parsedValue\", PKCS8ShroudedKeyBag.defaultValues(\"parsedValue\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"encryptionAlgorithm\":\n        return new AlgorithmIdentifier();\n\n      case \"encryptedData\":\n        return new asn1js.OctetString();\n\n      case \"parsedValue\":\n        return {};\n\n      default:\n        throw new Error(`Invalid member name for PKCS8ShroudedKeyBag class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"encryptionAlgorithm\":\n        return AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId) && \"algorithmParams\" in memberValue === false;\n\n      case \"encryptedData\":\n        return memberValue.isEqual(PKCS8ShroudedKeyBag.defaultValues(memberName));\n\n      case \"parsedValue\":\n        return memberValue instanceof Object && Object.keys(memberValue).length === 0;\n\n      default:\n        throw new Error(`Invalid member name for PKCS8ShroudedKeyBag class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * PKCS8ShroudedKeyBag ::= EncryptedPrivateKeyInfo\r\n   *\r\n   * EncryptedPrivateKeyInfo ::= SEQUENCE {\r\n   *    encryptionAlgorithm AlgorithmIdentifier {{KeyEncryptionAlgorithms}},\r\n   *    encryptedData EncryptedData\r\n   * }\r\n   *\r\n   * EncryptedData ::= OCTET STRING\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [encryptionAlgorithm]\r\n     * @property {string} [encryptedData]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [AlgorithmIdentifier.schema(names.encryptionAlgorithm || {\n        names: {\n          blockName: \"encryptionAlgorithm\"\n        }\n      }), new asn1js.Choice({\n        value: [new asn1js.OctetString({\n          name: names.encryptedData || \"encryptedData\"\n        }), new asn1js.OctetString({\n          idBlock: {\n            isConstructed: true\n          },\n          name: names.encryptedData || \"encryptedData\"\n        })]\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"encryptionAlgorithm\", \"encryptedData\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, PKCS8ShroudedKeyBag.schema({\n      names: {\n        encryptionAlgorithm: {\n          names: {\n            blockName: \"encryptionAlgorithm\"\n          }\n        },\n        encryptedData: \"encryptedData\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PKCS8ShroudedKeyBag\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.encryptionAlgorithm = new AlgorithmIdentifier({\n      schema: asn1.result.encryptionAlgorithm\n    });\n    this.encryptedData = asn1.result.encryptedData; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [this.encryptionAlgorithm.toSchema(), this.encryptedData]\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      encryptionAlgorithm: this.encryptionAlgorithm.toJSON(),\n      encryptedData: this.encryptedData.toJSON()\n    };\n  } //**********************************************************************************\n\n\n  parseInternalValues(parameters) {\n    //region Initial variables \n    let sequence = Promise.resolve();\n    const cmsEncrypted = new EncryptedData({\n      encryptedContentInfo: new EncryptedContentInfo({\n        contentEncryptionAlgorithm: this.encryptionAlgorithm,\n        encryptedContent: this.encryptedData\n      })\n    }); //endregion \n    //region Decrypt internal data \n\n    sequence = sequence.then(() => cmsEncrypted.decrypt(parameters), error => Promise.reject(error)); //endregion \n    //region Initialize \"parsedValue\" with decrypted PKCS#8 private key \n\n    sequence = sequence.then(\n    /**\r\n     * @param {ArrayBuffer} result\r\n     */\n    result => {\n      const asn1 = asn1js.fromBER(result);\n      if (asn1.offset === -1) return Promise.reject(\"Error during parsing ASN.1 data\");\n      this.parsedValue = new PrivateKeyInfo({\n        schema: asn1.result\n      });\n      return Promise.resolve();\n    }, error => Promise.reject(error)); //endregion \n\n    return sequence;\n  } //**********************************************************************************\n\n\n  makeInternalValues(parameters) {\n    //region Check that we do have \"parsedValue\" \n    if (\"parsedValue\" in this === false) return Promise.reject(\"Please initialize \\\"parsedValue\\\" first\"); //endregion \n    //region Initial variables \n\n    let sequence = Promise.resolve();\n    const cmsEncrypted = new EncryptedData(); //endregion \n    //region Encrypt internal data \n\n    sequence = sequence.then(() => {\n      parameters.contentToEncrypt = this.parsedValue.toSchema().toBER(false);\n      return cmsEncrypted.encrypt(parameters);\n    }, error => Promise.reject(error)); //endregion \n    //region Initialize internal values \n\n    sequence = sequence.then(() => {\n      this.encryptionAlgorithm = cmsEncrypted.encryptedContentInfo.contentEncryptionAlgorithm;\n      this.encryptedData = cmsEncrypted.encryptedContentInfo.encryptedContent;\n    }); //endregion \n\n    return sequence;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/PKCS8ShroudedKeyBag.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","EncryptedData","EncryptedContentInfo","PrivateKeyInfo","PKCS8ShroudedKeyBag","constructor","parameters","encryptionAlgorithm","defaultValues","encryptedData","parsedValue","fromSchema","schema","memberName","OctetString","Error","compareWithDefault","memberValue","algorithmId","isEqual","Object","keys","length","names","Sequence","name","blockName","value","Choice","idBlock","isConstructed","asn1","compareSchema","verified","result","toSchema","toJSON","parseInternalValues","sequence","Promise","resolve","cmsEncrypted","encryptedContentInfo","contentEncryptionAlgorithm","encryptedContent","then","decrypt","error","reject","fromBER","offset","makeInternalValues","contentToEncrypt","toBER","encrypt"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport EncryptedData from \"./EncryptedData.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class PKCS8ShroudedKeyBag \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PKCS8ShroudedKeyBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc encryptionAlgorithm\r\n\t\t */\r\n\t\tthis.encryptionAlgorithm = getParametersValue(parameters, \"encryptionAlgorithm\", PKCS8ShroudedKeyBag.defaultValues(\"encryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc encryptedData\r\n\t\t */\r\n\t\tthis.encryptedData = getParametersValue(parameters, \"encryptedData\", PKCS8ShroudedKeyBag.defaultValues(\"encryptedData\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", PKCS8ShroudedKeyBag.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"encryptionAlgorithm\":\r\n\t\t\t\treturn (new AlgorithmIdentifier());\r\n\t\t\tcase \"encryptedData\":\r\n\t\t\t\treturn (new asn1js.OctetString());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKCS8ShroudedKeyBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"encryptionAlgorithm\":\r\n\t\t\t\treturn ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\r\n\t\t\t\t((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedData\":\r\n\t\t\t\treturn (memberValue.isEqual(PKCS8ShroudedKeyBag.defaultValues(memberName)));\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKCS8ShroudedKeyBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PKCS8ShroudedKeyBag ::= EncryptedPrivateKeyInfo\r\n\t *\r\n\t * EncryptedPrivateKeyInfo ::= SEQUENCE {\r\n\t *    encryptionAlgorithm AlgorithmIdentifier {{KeyEncryptionAlgorithms}},\r\n\t *    encryptedData EncryptedData\r\n\t * }\r\n\t *\r\n\t * EncryptedData ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [encryptionAlgorithm]\r\n\t\t * @property {string} [encryptedData]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.encryptionAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"encryptionAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedData || \"encryptedData\") }),\r\n\t\t\t\t\t\tnew asn1js.OctetString({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\tisConstructed: true\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tname: (names.encryptedData || \"encryptedData\")\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"encryptionAlgorithm\",\r\n\t\t\t\"encryptedData\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPKCS8ShroudedKeyBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tencryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedData: \"encryptedData\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PKCS8ShroudedKeyBag\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.encryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.encryptionAlgorithm });\r\n\t\tthis.encryptedData = asn1.result.encryptedData;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.encryptionAlgorithm.toSchema(),\r\n\t\t\t\tthis.encryptedData\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tencryptionAlgorithm: this.encryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedData: this.encryptedData.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\tparseInternalValues(parameters)\r\n\t{\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst cmsEncrypted = new EncryptedData({\r\n\t\t\tencryptedContentInfo: new EncryptedContentInfo({\r\n\t\t\t\tcontentEncryptionAlgorithm: this.encryptionAlgorithm,\r\n\t\t\t\tencryptedContent: this.encryptedData\r\n\t\t\t})\r\n\t\t});\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Decrypt internal data \r\n\t\tsequence = sequence.then(\r\n\t\t\t() => cmsEncrypted.decrypt(parameters),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize \"parsedValue\" with decrypted PKCS#8 private key \r\n\t\tsequence = sequence.then(\r\n\t\t\t/**\r\n\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t */\r\n\t\t\tresult =>\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(result);\r\n\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\treturn Promise.reject(\"Error during parsing ASN.1 data\");\r\n\t\t\t\t\r\n\t\t\t\tthis.parsedValue = new PrivateKeyInfo({ schema: asn1.result });\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tmakeInternalValues(parameters)\r\n\t{\r\n\t\t//region Check that we do have \"parsedValue\" \r\n\t\tif((\"parsedValue\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Please initialize \\\"parsedValue\\\" first\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst cmsEncrypted = new EncryptedData();\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Encrypt internal data \r\n\t\tsequence = sequence.then(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tparameters.contentToEncrypt = this.parsedValue.toSchema().toBER(false);\r\n\t\t\t\t\r\n\t\t\t\treturn cmsEncrypted.encrypt(parameters);\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize internal values \r\n\t\tsequence = sequence.then(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tthis.encryptionAlgorithm = cmsEncrypted.encryptedContentInfo.contentEncryptionAlgorithm;\r\n\t\t\t\tthis.encryptedData = cmsEncrypted.encryptedContentInfo.encryptedContent;\r\n\t\t\t}\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}