{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _uuid = require('uuid');\n\nvar _constants = require('../constants');\n\nvar _history = require('../stats/history');\n\nvar _history2 = _interopRequireDefault(_history);\n\nvar _stream = require('../stats/stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\nvar _filter = require('../stats/filter');\n\nvar _filter2 = _interopRequireDefault(_filter);\n\nvar _events = require('../stats/events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _stats = require('../common/errors/stats');\n\nvar _stats2 = _interopRequireDefault(_stats);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @class MeetingStats\n */\n\n\nvar MeetingStats = function (_StatelessWebexPlugin) {\n  (0, _inherits3.default)(MeetingStats, _StatelessWebexPlugin);\n  /**\n   * @param {Object} attrs\n   * @param {Object} options\n   * @param {Object} [optionalCreateOptions]\n   * @param {Boolean} optionalCreateOptions.history\n   * @param {Boolean} optionalCreateOptions.mqa\n   * @param {RTCRtpSender|RTCRtpReceiver} optionalCreateOptions.stream\n   * @param {RTCRtpSender|RTCRtpReceiver} optionalCreateOptions.filter\n   * @param {RTCPeerConnection} optionalCreateOptions.media\n   * @param {String} optionalCreateOptions.id\n   * @param {Function} optionalCreateOptions.onClose\n   * @param {Function} optionalCreateOptions.onEvent\n   * @param {Function} optionalCreateOptions.onData\n   * if using filter or stream, media must also exist\n   */\n\n  function MeetingStats(attrs, options, optionalCreateOptions) {\n    (0, _classCallCheck3.default)(this, MeetingStats);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (MeetingStats.__proto__ || (0, _getPrototypeOf2.default)(MeetingStats)).call(this, {}, options));\n\n    _this.namespace = _constants.MEETINGS;\n    _this.attrs = attrs;\n    _this.options = options; // what this stats object is configured to work with\n\n    /**\n     * @instance\n     * @type {RTCPeerConnection}\n     * @private\n     * @memberof MeetingStats\n     */\n\n    _this.peerConnection = null;\n    /**\n     * @instance\n     * @type {RTCRtpSender|RTCRtpReceiver}\n     * @private\n     * @memberof MeetingStats\n     */\n\n    _this.RTCRtpDirection = null; // usable values\n\n    /**\n     * @instance\n     * @type {StatsHistory}\n     * @readonly\n     * @private\n     * @memberof MeetingStats\n     */\n\n    _this.history = null;\n    /**\n     * @instance\n     * @type {StatsHistory}\n     * @readonly\n     * @private\n     * @memberof MeetingStats\n     */\n\n    _this.mqa = null;\n    /**\n     * @instance\n     * @type {ReadableStream}\n     * @readonly\n     * @private\n     * @memberof MeetingStats\n     */\n\n    _this.stream = null;\n    /**\n     * @instance\n     * @type {TransformStream}\n     * @readonly\n     * @private\n     * @memberof MeetingStats\n     */\n\n    _this.filter = null;\n    /**\n     * @instance\n     * @type {StatsEvents}\n     * @readonly\n     * @private\n     * @memberof MeetingStats\n     */\n\n    _this.events = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @private\n     * @memberof MeetingStats\n     */\n\n    _this.id = null;\n\n    _this.populate(optionalCreateOptions);\n\n    return _this;\n  }\n  /**\n   * @param {Object} [optionalCreateOptions]\n   * @returns {undefined}\n   * @private\n   * @memberof MeetingStats\n   */\n\n\n  (0, _createClass3.default)(MeetingStats, [{\n    key: 'populate',\n    value: function populate(optionalCreateOptions) {\n      if (optionalCreateOptions) {\n        if (optionalCreateOptions.history) {\n          this.withHistory();\n        }\n\n        if (optionalCreateOptions.mqa) {\n          this.withMQA();\n        }\n\n        if (optionalCreateOptions.filter && !optionalCreateOptions.stream && optionalCreateOptions.media) {\n          this.withFilter(optionalCreateOptions.filter, optionalCreateOptions.media);\n        }\n\n        if (optionalCreateOptions.stream && !optionalCreateOptions.filter && optionalCreateOptions.media) {\n          this.withStream(optionalCreateOptions.stream, optionalCreateOptions.media);\n        }\n\n        if (optionalCreateOptions.id) {\n          this.withId(optionalCreateOptions.id);\n        }\n\n        if (optionalCreateOptions.onClose) {\n          if (!(0, _isFunction3.default)(optionalCreateOptions.onClose)) {\n            throw new TypeError('stats->populate#onClose must be a callback function for filtered data.');\n          }\n\n          this.onClose(optionalCreateOptions.onClose);\n        }\n\n        if (optionalCreateOptions.onEvent) {\n          if (!(0, _isFunction3.default)(optionalCreateOptions.onEvent)) {\n            throw new TypeError('stats->populate#onEvent must be a callback function for filtered data.');\n          }\n\n          if (this.history) {\n            this.withEventsHistory(this.history, optionalCreateOptions.onEvent);\n          } else {\n            this.withEvents(optionalCreateOptions.onEvent);\n          }\n        }\n\n        if (optionalCreateOptions.onData) {\n          if (!(0, _isFunction3.default)(optionalCreateOptions.onData)) {\n            throw new TypeError('stats->populate#onData must be a callback function for filtered data.');\n          }\n\n          this.onData(optionalCreateOptions.onData);\n        }\n      }\n\n      return this;\n    }\n    /**\n     * @param {WebRTCData} data\n     * @returns {undefined}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'doHistory',\n    value: function doHistory(data) {\n      if (this.history) {\n        this.history.add(data);\n      }\n    }\n    /**\n     * @param {WebRTCData} data\n     * @returns {undefined}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'doMQA',\n    value: function doMQA(data) {\n      if (this.mqa && data.data) {\n        if (!data.data.isEmpty()) {\n          this.mqa.add(data.data.omit());\n        }\n      }\n    }\n    /**\n     * @param {WebRTCData} data\n     * @returns {undefined}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'doEvents',\n    value: function doEvents(data) {\n      if (this.events) {\n        this.events.event(data);\n      }\n    }\n    /**\n     * does all the work for the built properties\n     * calls back a function with data from piped stream filter\n     * @param {Function} cbFn\n     * @returns {undefined}\n     * @throws {Error} if the filter stream does not exist\n     * @private\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'onData',\n    value: function onData(cbFn) {\n      var _this2 = this;\n\n      if (!this.filter) {\n        throw new TypeError('The stats sender/receiver filter must be set up before data can be processed.');\n      }\n\n      this.filter.on(_constants.STATS.DATA, function (filtered) {\n        _this2.doHistory(filtered);\n\n        _this2.doMQA(filtered);\n\n        _this2.doEvents(filtered);\n\n        cbFn(filtered);\n      });\n      return this;\n    }\n    /**\n     * triggered if the data stream closes\n     * calls back a function with error\n     * @param {Function} cbFn\n     * @returns {undefined}\n     * @private\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'onClose',\n    value: function onClose(cbFn) {\n      var _this3 = this;\n\n      if (!this.filter) {\n        throw new TypeError('the stats sender/receiver filter must be set up before data can be closed.');\n      }\n\n      this.stream.on(_constants.STATS.END, function (err) {\n        if (!err) {\n          err = new _stats2.default('The stats stream for id: ' + _this3.id + ' ended.');\n        }\n\n        cbFn(err);\n      });\n      return this;\n    }\n    /**\n     * constructs an event object on this instance\n     * @param {StatsHistory} history\n     * @param {Function} cb\n     * @returns {MeetingStats}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'withEventsHistory',\n    value: function withEventsHistory(history, cb) {\n      var events = new _events2.default(history, cb);\n      this.setEvents(events);\n      return this;\n    }\n    /**\n     * constructs an event object on this instance\n     * @param {Function} cb\n     * @returns {MeetingStats}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'withEvents',\n    value: function withEvents(cb) {\n      var events = new _events2.default(null, cb);\n      this.setEvents(events);\n      return this;\n    }\n    /**\n     * constructs a history object on this instance\n     * @returns {MeetingStats}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'withHistory',\n    value: function withHistory() {\n      var history = new _history2.default(this.config.stats.historyMax);\n      this.setHistory(history);\n      return this;\n    }\n    /**\n     * constructs a history object on this instance\n     * @returns {MeetingStats}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'withMQA',\n    value: function withMQA() {\n      var mqa = new _history2.default(_constants.MQA_STATS.MQA_SIZE);\n      this.setMQA(mqa);\n      return this;\n    }\n    /**\n     * constructs a readable stream object on this instance\n     * @param {RTCRtpReceiver|RTCRtpSender} transceiverDirection\n     * @param {RTCPeerConnection} peerConnection\n     * @returns {MeetingStats}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'withStream',\n    value: function withStream(transceiverDirection, peerConnection) {\n      var stream = new _stream2.default({\n        rTCRtpDirection: transceiverDirection,\n        peerConnection: peerConnection,\n        interval: this.config.stats.interval\n      });\n      this.setStream(stream);\n      return this;\n    }\n    /**\n     * @param {RTCRtpReceiver|RTCRtpSender} transceiverDirection\n     * @param {RTCPeerConnection} peerConnection\n     * @returns {MeetingStats}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'withFilter',\n    value: function withFilter(transceiverDirection, peerConnection) {\n      this.withStream(transceiverDirection, peerConnection);\n      this.setFilter(new _filter2.default());\n      this.getStream().pipe(this.getFilter());\n      return this;\n    }\n    /**\n     * constructs an id to match this stats object\n     * takes params as precedence\n     * @param {String} id\n     * @returns {MeetingStats}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'withId',\n    value: function withId(id) {\n      if (id) {\n        this.setId(id);\n      } else {\n        this.setId(_uuid.uuid.v4());\n      }\n\n      return this;\n    }\n    /**\n     * @returns {MeetingStats}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'build',\n    value: function build() {\n      return this;\n    }\n    /**\n     * @param {String} id\n     * @returns {undefined}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'setId',\n    value: function setId(id) {\n      this.id = id;\n    }\n    /**\n     * @param {StatsHistory} history\n     * @returns {undefined}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'setHistory',\n    value: function setHistory(history) {\n      this.history = history;\n    }\n    /**\n     * @param {StatsHistory} mqa\n     * @returns {undefined}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'setMQA',\n    value: function setMQA(mqa) {\n      this.mqa = mqa;\n    }\n    /**\n     * @param {StatsEvent} events\n     * @returns {undefined}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'setEvents',\n    value: function setEvents(events) {\n      this.events = events;\n    }\n    /**\n     * @param {Readable} stream\n     * @returns {undefined}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'setStream',\n    value: function setStream(stream) {\n      this.stream = stream;\n    }\n    /**\n     * @param {Transform} filter\n     * @returns {undefined}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'setFilter',\n    value: function setFilter(filter) {\n      this.filter = filter;\n    }\n    /**\n     * @returns {String}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'getId',\n    value: function getId() {\n      return this.id;\n    }\n    /**\n     * @returns {StatsHistory}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'getHistory',\n    value: function getHistory() {\n      return this.history;\n    }\n    /**\n     * @returns {StatsHistory}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'getMQA',\n    value: function getMQA() {\n      return this.mqa;\n    }\n    /**\n     * @returns {StatsEvents}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'getEvents',\n    value: function getEvents() {\n      return this.events;\n    }\n    /**\n     * @returns {Readable}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'getStream',\n    value: function getStream() {\n      return this.stream;\n    }\n    /**\n     * @returns {Transform}\n     * @public\n     * @memberof MeetingStats\n     */\n\n  }, {\n    key: 'getFilter',\n    value: function getFilter() {\n      return this.filter;\n    }\n  }]);\n  return MeetingStats;\n}(_webexCore.StatelessWebexPlugin);\n\nexports.default = MeetingStats;","map":{"version":3,"sources":["stats.js"],"names":["MeetingStats","StatelessWebexPlugin","namespace","MEETINGS","optionalCreateOptions","data","cbFn","STATS","err","StatsError","history","cb","events","StatsEvents","StatsHistory","mqa","MQA_STATS","transceiverDirection","peerConnection","stream","StatsStream","rTCRtpDirection","interval","StatsFilter","id","uuid","filter"],"mappings":"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","sourcesContent":["import {StatelessWebexPlugin} from '@webex/webex-core';\nimport {isFunction} from 'lodash';\nimport {uuid} from 'uuid';\n\nimport {\n  MEETINGS,\n  STATS,\n  MQA_STATS\n} from '../constants';\nimport StatsHistory from '../stats/history';\nimport StatsStream from '../stats/stream';\nimport StatsFilter from '../stats/filter';\nimport StatsEvents from '../stats/events';\nimport StatsError from '../common/errors/stats';\n\n/**\n * @class MeetingStats\n */\nexport default class MeetingStats extends StatelessWebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n   * @param {Object} attrs\n   * @param {Object} options\n   * @param {Object} [optionalCreateOptions]\n   * @param {Boolean} optionalCreateOptions.history\n   * @param {Boolean} optionalCreateOptions.mqa\n   * @param {RTCRtpSender|RTCRtpReceiver} optionalCreateOptions.stream\n   * @param {RTCRtpSender|RTCRtpReceiver} optionalCreateOptions.filter\n   * @param {RTCPeerConnection} optionalCreateOptions.media\n   * @param {String} optionalCreateOptions.id\n   * @param {Function} optionalCreateOptions.onClose\n   * @param {Function} optionalCreateOptions.onEvent\n   * @param {Function} optionalCreateOptions.onData\n   * if using filter or stream, media must also exist\n   */\n  constructor(attrs, options, optionalCreateOptions) {\n    super({}, options);\n    this.attrs = attrs;\n    this.options = options;\n    // what this stats object is configured to work with\n    /**\n     * @instance\n     * @type {RTCPeerConnection}\n     * @private\n     * @memberof MeetingStats\n     */\n    this.peerConnection = null;\n    /**\n     * @instance\n     * @type {RTCRtpSender|RTCRtpReceiver}\n     * @private\n     * @memberof MeetingStats\n     */\n    this.RTCRtpDirection = null;\n    // usable values\n    /**\n     * @instance\n     * @type {StatsHistory}\n     * @readonly\n     * @private\n     * @memberof MeetingStats\n     */\n    this.history = null;\n    /**\n     * @instance\n     * @type {StatsHistory}\n     * @readonly\n     * @private\n     * @memberof MeetingStats\n     */\n    this.mqa = null;\n    /**\n     * @instance\n     * @type {ReadableStream}\n     * @readonly\n     * @private\n     * @memberof MeetingStats\n     */\n    this.stream = null;\n    /**\n     * @instance\n     * @type {TransformStream}\n     * @readonly\n     * @private\n     * @memberof MeetingStats\n     */\n    this.filter = null;\n    /**\n     * @instance\n     * @type {StatsEvents}\n     * @readonly\n     * @private\n     * @memberof MeetingStats\n     */\n    this.events = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @private\n     * @memberof MeetingStats\n     */\n    this.id = null;\n    this.populate(optionalCreateOptions);\n  }\n\n  /**\n   * @param {Object} [optionalCreateOptions]\n   * @returns {undefined}\n   * @private\n   * @memberof MeetingStats\n   */\n  populate(optionalCreateOptions) {\n    if (optionalCreateOptions) {\n      if (optionalCreateOptions.history) {\n        this.withHistory();\n      }\n      if (optionalCreateOptions.mqa) {\n        this.withMQA();\n      }\n      if (optionalCreateOptions.filter && !optionalCreateOptions.stream && optionalCreateOptions.media) {\n        this.withFilter(optionalCreateOptions.filter, optionalCreateOptions.media);\n      }\n      if (optionalCreateOptions.stream && !optionalCreateOptions.filter && optionalCreateOptions.media) {\n        this.withStream(optionalCreateOptions.stream, optionalCreateOptions.media);\n      }\n      if (optionalCreateOptions.id) {\n        this.withId(optionalCreateOptions.id);\n      }\n      if (optionalCreateOptions.onClose) {\n        if (!isFunction(optionalCreateOptions.onClose)) {\n          throw new TypeError('stats->populate#onClose must be a callback function for filtered data.');\n        }\n        this.onClose(optionalCreateOptions.onClose);\n      }\n      if (optionalCreateOptions.onEvent) {\n        if (!isFunction(optionalCreateOptions.onEvent)) {\n          throw new TypeError('stats->populate#onEvent must be a callback function for filtered data.');\n        }\n        if (this.history) {\n          this.withEventsHistory(this.history, optionalCreateOptions.onEvent);\n        }\n        else {\n          this.withEvents(optionalCreateOptions.onEvent);\n        }\n      }\n      if (optionalCreateOptions.onData) {\n        if (!isFunction(optionalCreateOptions.onData)) {\n          throw new TypeError('stats->populate#onData must be a callback function for filtered data.');\n        }\n        this.onData(optionalCreateOptions.onData);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @param {WebRTCData} data\n   * @returns {undefined}\n   * @public\n   * @memberof MeetingStats\n   */\n  doHistory(data) {\n    if (this.history) {\n      this.history.add(data);\n    }\n  }\n\n  /**\n   * @param {WebRTCData} data\n   * @returns {undefined}\n   * @public\n   * @memberof MeetingStats\n   */\n  doMQA(data) {\n    if (this.mqa && data.data) {\n      if (!data.data.isEmpty()) {\n        this.mqa.add(data.data.omit());\n      }\n    }\n  }\n\n  /**\n   * @param {WebRTCData} data\n   * @returns {undefined}\n   * @public\n   * @memberof MeetingStats\n   */\n  doEvents(data) {\n    if (this.events) {\n      this.events.event(data);\n    }\n  }\n\n  /**\n   * does all the work for the built properties\n   * calls back a function with data from piped stream filter\n   * @param {Function} cbFn\n   * @returns {undefined}\n   * @throws {Error} if the filter stream does not exist\n   * @private\n   * @memberof MeetingStats\n   */\n  onData(cbFn) {\n    if (!this.filter) {\n      throw new TypeError('The stats sender/receiver filter must be set up before data can be processed.');\n    }\n    this.filter.on(STATS.DATA, (filtered) => {\n      this.doHistory(filtered);\n      this.doMQA(filtered);\n      this.doEvents(filtered);\n      cbFn(filtered);\n    });\n\n    return this;\n  }\n\n  /**\n   * triggered if the data stream closes\n   * calls back a function with error\n   * @param {Function} cbFn\n   * @returns {undefined}\n   * @private\n   * @memberof MeetingStats\n   */\n  onClose(cbFn) {\n    if (!this.filter) {\n      throw new TypeError('the stats sender/receiver filter must be set up before data can be closed.');\n    }\n    this.stream.on(STATS.END, (err) => {\n      if (!err) {\n        err = new StatsError(`The stats stream for id: ${this.id} ended.`);\n      }\n      cbFn(err);\n    });\n\n    return this;\n  }\n\n  /**\n   * constructs an event object on this instance\n   * @param {StatsHistory} history\n   * @param {Function} cb\n   * @returns {MeetingStats}\n   * @public\n   * @memberof MeetingStats\n   */\n  withEventsHistory(history, cb) {\n    const events = new StatsEvents(history, cb);\n\n    this.setEvents(events);\n\n    return this;\n  }\n\n  /**\n   * constructs an event object on this instance\n   * @param {Function} cb\n   * @returns {MeetingStats}\n   * @public\n   * @memberof MeetingStats\n   */\n  withEvents(cb) {\n    const events = new StatsEvents(null, cb);\n\n    this.setEvents(events);\n\n    return this;\n  }\n\n  /**\n   * constructs a history object on this instance\n   * @returns {MeetingStats}\n   * @public\n   * @memberof MeetingStats\n   */\n  withHistory() {\n    const history = new StatsHistory(this.config.stats.historyMax);\n\n    this.setHistory(history);\n\n    return this;\n  }\n\n  /**\n   * constructs a history object on this instance\n   * @returns {MeetingStats}\n   * @public\n   * @memberof MeetingStats\n   */\n  withMQA() {\n    const mqa = new StatsHistory(MQA_STATS.MQA_SIZE);\n\n    this.setMQA(mqa);\n\n    return this;\n  }\n\n  /**\n   * constructs a readable stream object on this instance\n   * @param {RTCRtpReceiver|RTCRtpSender} transceiverDirection\n   * @param {RTCPeerConnection} peerConnection\n   * @returns {MeetingStats}\n   * @public\n   * @memberof MeetingStats\n   */\n  withStream(transceiverDirection, peerConnection) {\n    const stream = new StatsStream({\n      rTCRtpDirection: transceiverDirection,\n      peerConnection,\n      interval: this.config.stats.interval\n    });\n\n    this.setStream(stream);\n\n    return this;\n  }\n\n  /**\n   * @param {RTCRtpReceiver|RTCRtpSender} transceiverDirection\n   * @param {RTCPeerConnection} peerConnection\n   * @returns {MeetingStats}\n   * @public\n   * @memberof MeetingStats\n   */\n  withFilter(transceiverDirection, peerConnection) {\n    this.withStream(transceiverDirection, peerConnection);\n    this.setFilter(new StatsFilter());\n    this.getStream().pipe(this.getFilter());\n\n    return this;\n  }\n\n  /**\n   * constructs an id to match this stats object\n   * takes params as precedence\n   * @param {String} id\n   * @returns {MeetingStats}\n   * @public\n   * @memberof MeetingStats\n   */\n  withId(id) {\n    if (id) {\n      this.setId(id);\n    }\n    else {\n      this.setId(uuid.v4());\n    }\n\n    return this;\n  }\n\n  /**\n   * @returns {MeetingStats}\n   * @public\n   * @memberof MeetingStats\n   */\n  build() {\n    return this;\n  }\n\n  /**\n   * @param {String} id\n   * @returns {undefined}\n   * @public\n   * @memberof MeetingStats\n   */\n  setId(id) {\n    this.id = id;\n  }\n\n  /**\n   * @param {StatsHistory} history\n   * @returns {undefined}\n   * @public\n   * @memberof MeetingStats\n   */\n  setHistory(history) {\n    this.history = history;\n  }\n\n  /**\n   * @param {StatsHistory} mqa\n   * @returns {undefined}\n   * @public\n   * @memberof MeetingStats\n   */\n  setMQA(mqa) {\n    this.mqa = mqa;\n  }\n\n  /**\n   * @param {StatsEvent} events\n   * @returns {undefined}\n   * @public\n   * @memberof MeetingStats\n   */\n  setEvents(events) {\n    this.events = events;\n  }\n\n  /**\n   * @param {Readable} stream\n   * @returns {undefined}\n   * @public\n   * @memberof MeetingStats\n   */\n  setStream(stream) {\n    this.stream = stream;\n  }\n\n  /**\n   * @param {Transform} filter\n   * @returns {undefined}\n   * @public\n   * @memberof MeetingStats\n   */\n  setFilter(filter) {\n    this.filter = filter;\n  }\n\n  /**\n   * @returns {String}\n   * @public\n   * @memberof MeetingStats\n   */\n  getId() {\n    return this.id;\n  }\n\n  /**\n   * @returns {StatsHistory}\n   * @public\n   * @memberof MeetingStats\n   */\n  getHistory() {\n    return this.history;\n  }\n\n  /**\n   * @returns {StatsHistory}\n   * @public\n   * @memberof MeetingStats\n   */\n  getMQA() {\n    return this.mqa;\n  }\n\n  /**\n   * @returns {StatsEvents}\n   * @public\n   * @memberof MeetingStats\n   */\n  getEvents() {\n    return this.events;\n  }\n\n  /**\n   * @returns {Readable}\n   * @public\n   * @memberof MeetingStats\n   */\n  getStream() {\n    return this.stream;\n  }\n\n  /**\n   * @returns {Transform}\n   * @public\n   * @memberof MeetingStats\n   */\n  getFilter() {\n    return this.filter;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}