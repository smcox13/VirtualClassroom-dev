{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detect = undefined;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nexports.default = detect;\nexports.detectSync = detectSync;\n\nvar _fileType = require('file-type');\n\nvar _fileType2 = _interopRequireDefault(_fileType);\n\nvar _common = require('@webex/common');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Determine mimeType for the specified buffer;\n * @param {Buffer} buffer\n * @returns {Promise<string>}\n */\n\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nfunction detect(buffer) {\n  return new _promise2.default(function (resolve) {\n    resolve(detectSync(buffer));\n  });\n}\n\nexports.detect = detect;\n/**\n * Synchronous implementation of {@link detect}\n * @param {Buffer} buffer\n * @returns {string}\n */\n\nfunction detectSync(buffer) {\n  /* global Blob */\n  var b = buffer;\n\n  if (_common.inBrowser) {\n    if (buffer instanceof Blob) {\n      return buffer.type;\n    }\n\n    if (buffer instanceof ArrayBuffer) {\n      b = new Uint8Array(buffer);\n    } else if (!(buffer instanceof Uint8Array)) {\n      throw new Error('`detect` requires a buffer of type Blob, ArrayBuffer, or Uint8Array');\n    }\n  }\n\n  var type = (0, _fileType2.default)(b);\n\n  if (!type) {\n    return 'application/octet-stream';\n  }\n\n  return type.mime;\n}","map":{"version":3,"sources":["detect.js"],"names":["detect","resolve","detectSync","b","inBrowser","buffer","type"],"mappings":";;;;;;;;;;;kBAYwBA,M;QAaRE,U,GAAAA,U;;AArBhB,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;;;;;;AAEA;;;;;;AAPA;;;;;AAYe,SAAA,MAAA,CAAA,MAAA,EAAwB;AACrC,SAAO,IAAA,SAAA,CAAA,OAAA,CAAY,UAAA,OAAA,EAAa;AAC9BD,IAAAA,OAAAA,CAAQC,UAAAA,CAARD,MAAQC,CAARD,CAAAA;AADF,GAAO,CAAP;AAGD;;QAEOD,M,GAAAA,M;AAER;;;;;;AAKO,SAAA,UAAA,CAAA,MAAA,EAA4B;AACjC;AACA,MAAIG,CAAAA,GAAJ,MAAA;;AAEA,MAAIC,OAAAA,CAAJ,SAAA,EAAe;AACb,QAAIC,MAAAA,YAAJ,IAAA,EAA4B;AAC1B,aAAOA,MAAAA,CAAP,IAAA;AACD;;AACD,QAAIA,MAAAA,YAAJ,WAAA,EAAmC;AACjCF,MAAAA,CAAAA,GAAI,IAAA,UAAA,CAAJA,MAAI,CAAJA;AADF,KAAA,MAGK,IAAI,EAAEE,MAAAA,YAAN,UAAI,CAAJ,EAAqC;AACxC,YAAM,IAAA,KAAA,CAAN,qEAAM,CAAN;AACD;AACF;;AAED,MAAMC,IAAAA,GAAO,CAAA,GAAA,UAAA,CAAA,OAAA,EAAb,CAAa,CAAb;;AAEA,MAAI,CAAJ,IAAA,EAAW;AACT,WAAA,0BAAA;AACD;;AAED,SAAOA,IAAAA,CAAP,IAAA;AACD","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport fileType from 'file-type';\nimport {inBrowser} from '@webex/common';\n\n/**\n * Determine mimeType for the specified buffer;\n * @param {Buffer} buffer\n * @returns {Promise<string>}\n */\nexport default function detect(buffer) {\n  return new Promise((resolve) => {\n    resolve(detectSync(buffer));\n  });\n}\n\nexport {detect};\n\n/**\n * Synchronous implementation of {@link detect}\n * @param {Buffer} buffer\n * @returns {string}\n */\nexport function detectSync(buffer) {\n  /* global Blob */\n  let b = buffer;\n\n  if (inBrowser) {\n    if (buffer instanceof Blob) {\n      return buffer.type;\n    }\n    if (buffer instanceof ArrayBuffer) {\n      b = new Uint8Array(buffer);\n    }\n    else if (!(buffer instanceof Uint8Array)) {\n      throw new Error('`detect` requires a buffer of type Blob, ArrayBuffer, or Uint8Array');\n    }\n  }\n\n  const type = fileType(b);\n\n  if (!type) {\n    return 'application/octet-stream';\n  }\n\n  return type.mime;\n}\n"]},"metadata":{},"sourceType":"script"}