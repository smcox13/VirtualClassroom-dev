{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _constants = require('../constants');\n\nvar _collection = require('./collection');\n\nvar _collection2 = _interopRequireDefault(_collection);\n\nvar _request = require('./request');\n\nvar _request2 = _interopRequireDefault(_request);\n\nvar _util = require('./util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @class MeetingInfo\n */\n\n\nvar MeetingInfo = function (_StatelessWebexPlugin) {\n  (0, _inherits3.default)(MeetingInfo, _StatelessWebexPlugin);\n  /**\n   *\n   * @param {Object} attrs\n   * @param {Object} options\n   */\n\n  function MeetingInfo(attrs, options) {\n    (0, _classCallCheck3.default)(this, MeetingInfo);\n    /**\n     * The meeting info request server interface\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof MeetingInfo\n    */\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (MeetingInfo.__proto__ || (0, _getPrototypeOf2.default)(MeetingInfo)).call(this, {}, options));\n\n    _this.namespace = _constants.MEETINGS;\n    _this.meetingInfoRequest = new _request2.default({}, options);\n    /**\n     * The meeting information collection interface\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof MeetingInfo\n    */\n\n    _this.meetingInfoCollection = new _collection2.default();\n    return _this;\n  }\n  /**\n   * @param {string} id\n   * @returns {object}\n   * @public\n   * @memberof MeetingInfo\n   */\n\n\n  (0, _createClass3.default)(MeetingInfo, [{\n    key: 'getMeetingInfo',\n    value: function getMeetingInfo(id) {\n      return this.meetingInfoCollection.get(id);\n    }\n    /**\n     * @param {string} id\n     * @param {object} info\n     * @returns {null}\n     * @public\n     * @memberof MeetingInfo\n     */\n\n  }, {\n    key: 'setMeetingInfo',\n    value: function setMeetingInfo(id, info) {\n      this.meetingInfoCollection.set(id, info);\n    }\n    /**\n     * Helper to make the actual MeetingInfo request and set the meetingInfo if successful, else reject\n     * @param {Object} options\n     * @returns {Promise}\n     * @private\n     * @memberof MeetingInfo\n     */\n\n  }, {\n    key: 'requestFetchInfo',\n    value: function requestFetchInfo(options) {\n      var _this2 = this;\n\n      return this.meetingInfoRequest.fetchMeetingInfo(options).then(function (info) {\n        if (info && info.body) {\n          _this2.setMeetingInfo(info.body.sipMeetingUri || info.body.meetingLink, info.body);\n        }\n\n        return info;\n      }).catch(function (error) {\n        return _promise2.default.reject(error);\n      });\n    }\n    /**\n     * Helper to generate the options for the MeetingInfo request\n     * @param {String} destination\n     * @param {String} type\n     * @returns {Promise}\n     * @private\n     * @memberof MeetingInfo\n     */\n\n  }, {\n    key: 'fetchInfoOptions',\n    value: function fetchInfoOptions(destination, type) {\n      return _util2.default.generateOptions({\n        destination: destination,\n        type: type,\n        webex: this.webex\n      });\n    }\n    /**\n     * Fetches meeting info from the server\n     * @param {String} destination one of many different types of destinations to look up info for\n     * @param {String} [type] to match up with the destination value\n     * @returns {Promise} returns a meeting info object\n     * @public\n     * @memberof MeetingInfo\n     */\n\n  }, {\n    key: 'fetchMeetingInfo',\n    value: function fetchMeetingInfo(destination) {\n      var _this3 = this;\n\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return this.fetchInfoOptions(destination, type).then(function (options) {\n        return (// fetch meeting info\n          _this3.requestFetchInfo(options).catch(function (error) {\n            // if it failed the first time as meeting link\n            if (options.type === _constants._MEETING_LINK_) {\n              // convert the meeting link to sip URI and retry\n              return _this3.requestFetchInfo(_this3.fetchInfoOptions(_util2.default.convertLinkToSip(destination), _constants._SIP_URI_));\n            }\n\n            return _promise2.default.reject(error);\n          })\n        );\n      });\n    }\n  }]);\n  return MeetingInfo;\n}(_webexCore.StatelessWebexPlugin);\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nexports.default = MeetingInfo;","map":{"version":3,"sources":["index.js"],"names":["MeetingInfo","StatelessWebexPlugin","namespace","MEETINGS","MeetingInfoRequest","MeetingInfoCollection","id","info","options","destination","type","webex","_MEETING_LINK_","MeetingInfoUtil","_SIP_URI_"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport {\n  MEETINGS,\n  _MEETING_LINK_,\n  _SIP_URI_\n} from '../constants';\n\nimport MeetingInfoCollection from './collection';\nimport MeetingInfoRequest from './request';\nimport MeetingInfoUtil from './util';\n\n/**\n * @class MeetingInfo\n */\nexport default class MeetingInfo extends StatelessWebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n   *\n   * @param {Object} attrs\n   * @param {Object} options\n   */\n  constructor(attrs, options) {\n    super({}, options);\n    /**\n     * The meeting info request server interface\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof MeetingInfo\n    */\n    this.meetingInfoRequest = new MeetingInfoRequest({}, options);\n    /**\n     * The meeting information collection interface\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof MeetingInfo\n    */\n    this.meetingInfoCollection = new MeetingInfoCollection();\n  }\n\n  /**\n   * @param {string} id\n   * @returns {object}\n   * @public\n   * @memberof MeetingInfo\n   */\n  getMeetingInfo(id) {\n    return this.meetingInfoCollection.get(id);\n  }\n\n  /**\n   * @param {string} id\n   * @param {object} info\n   * @returns {null}\n   * @public\n   * @memberof MeetingInfo\n   */\n  setMeetingInfo(id, info) {\n    this.meetingInfoCollection.set(id, info);\n  }\n\n  /**\n   * Helper to make the actual MeetingInfo request and set the meetingInfo if successful, else reject\n   * @param {Object} options\n   * @returns {Promise}\n   * @private\n   * @memberof MeetingInfo\n   */\n  requestFetchInfo(options) {\n    return this.meetingInfoRequest.fetchMeetingInfo(options).then((info) => {\n      if (info && info.body) {\n        this.setMeetingInfo(info.body.sipMeetingUri || info.body.meetingLink, info.body);\n      }\n\n      return info;\n    }).catch((error) => Promise.reject(error));\n  }\n\n  /**\n   * Helper to generate the options for the MeetingInfo request\n   * @param {String} destination\n   * @param {String} type\n   * @returns {Promise}\n   * @private\n   * @memberof MeetingInfo\n   */\n  fetchInfoOptions(destination, type) {\n    return MeetingInfoUtil.generateOptions({\n      destination,\n      type,\n      webex: this.webex\n    });\n  }\n\n  /**\n   * Fetches meeting info from the server\n   * @param {String} destination one of many different types of destinations to look up info for\n   * @param {String} [type] to match up with the destination value\n   * @returns {Promise} returns a meeting info object\n   * @public\n   * @memberof MeetingInfo\n   */\n  fetchMeetingInfo(destination, type = null) {\n    return this.fetchInfoOptions(destination, type).then((options) =>\n    // fetch meeting info\n      this.requestFetchInfo(options).catch((error) => {\n      // if it failed the first time as meeting link\n        if (options.type === _MEETING_LINK_) {\n        // convert the meeting link to sip URI and retry\n          return this.requestFetchInfo(this.fetchInfoOptions(MeetingInfoUtil.convertLinkToSip(destination), _SIP_URI_));\n        }\n\n        return Promise.reject(error);\n      }));\n  }\n}\n"]},"metadata":{},"sourceType":"script"}