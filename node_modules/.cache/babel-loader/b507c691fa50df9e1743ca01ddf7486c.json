{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC2898\r\n */\n\nexport default class PBES2Params {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for PBES2Params class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc keyDerivationFunc\r\n     */\n    this.keyDerivationFunc = getParametersValue(parameters, \"keyDerivationFunc\", PBES2Params.defaultValues(\"keyDerivationFunc\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc encryptionScheme\r\n     */\n\n    this.encryptionScheme = getParametersValue(parameters, \"encryptionScheme\", PBES2Params.defaultValues(\"encryptionScheme\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"keyDerivationFunc\":\n        return new AlgorithmIdentifier();\n\n      case \"encryptionScheme\":\n        return new AlgorithmIdentifier();\n\n      default:\n        throw new Error(`Invalid member name for PBES2Params class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * PBES2-params ::= SEQUENCE {\r\n   *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},\r\n   *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}} }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [keyDerivationFunc]\r\n     * @property {string} [encryptionScheme]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [AlgorithmIdentifier.schema(names.keyDerivationFunc || {}), AlgorithmIdentifier.schema(names.encryptionScheme || {})]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"keyDerivationFunc\", \"encryptionScheme\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, PBES2Params.schema({\n      names: {\n        keyDerivationFunc: {\n          names: {\n            blockName: \"keyDerivationFunc\"\n          }\n        },\n        encryptionScheme: {\n          names: {\n            blockName: \"encryptionScheme\"\n          }\n        }\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PBES2Params\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.keyDerivationFunc = new AlgorithmIdentifier({\n      schema: asn1.result.keyDerivationFunc\n    });\n    this.encryptionScheme = new AlgorithmIdentifier({\n      schema: asn1.result.encryptionScheme\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [this.keyDerivationFunc.toSchema(), this.encryptionScheme.toSchema()]\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      keyDerivationFunc: this.keyDerivationFunc.toJSON(),\n      encryptionScheme: this.encryptionScheme.toJSON()\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/PBES2Params.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","PBES2Params","constructor","parameters","keyDerivationFunc","defaultValues","encryptionScheme","fromSchema","schema","memberName","Error","names","Sequence","name","blockName","value","asn1","compareSchema","verified","result","toSchema","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2898\r\n */\r\nexport default class PBES2Params\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PBES2Params class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc keyDerivationFunc\r\n\t\t */\r\n\t\tthis.keyDerivationFunc = getParametersValue(parameters, \"keyDerivationFunc\", PBES2Params.defaultValues(\"keyDerivationFunc\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc encryptionScheme\r\n\t\t */\r\n\t\tthis.encryptionScheme = getParametersValue(parameters, \"encryptionScheme\", PBES2Params.defaultValues(\"encryptionScheme\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyDerivationFunc\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptionScheme\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PBES2Params class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PBES2-params ::= SEQUENCE {\r\n\t *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},\r\n\t *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}} }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyDerivationFunc]\r\n\t\t * @property {string} [encryptionScheme]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyDerivationFunc || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.encryptionScheme || {})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"keyDerivationFunc\",\r\n\t\t\t\"encryptionScheme\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPBES2Params.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyDerivationFunc: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyDerivationFunc\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptionScheme: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptionScheme\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PBES2Params\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.keyDerivationFunc = new AlgorithmIdentifier({ schema: asn1.result.keyDerivationFunc });\r\n\t\tthis.encryptionScheme = new AlgorithmIdentifier({ schema: asn1.result.encryptionScheme });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.keyDerivationFunc.toSchema(),\r\n\t\t\t\tthis.encryptionScheme.toSchema()\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tkeyDerivationFunc: this.keyDerivationFunc.toJSON(),\r\n\t\t\tencryptionScheme: this.encryptionScheme.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}