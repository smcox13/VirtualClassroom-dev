{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, utilConcatBuf, clearProps } from \"pvutils\";\nimport { getOIDByAlgorithm, getRandomValues, getCrypto, getAlgorithmByOID, kdf } from \"./common.js\";\nimport OriginatorInfo from \"./OriginatorInfo.js\";\nimport RecipientInfo from \"./RecipientInfo.js\";\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\nimport Attribute from \"./Attribute.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport RSAESOAEPParams from \"./RSAESOAEPParams.js\";\nimport KeyTransRecipientInfo from \"./KeyTransRecipientInfo.js\";\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\nimport RecipientEncryptedKey from \"./RecipientEncryptedKey.js\";\nimport KeyAgreeRecipientIdentifier from \"./KeyAgreeRecipientIdentifier.js\";\nimport KeyAgreeRecipientInfo from \"./KeyAgreeRecipientInfo.js\";\nimport RecipientEncryptedKeys from \"./RecipientEncryptedKeys.js\";\nimport KEKRecipientInfo from \"./KEKRecipientInfo.js\";\nimport KEKIdentifier from \"./KEKIdentifier.js\";\nimport PBKDF2Params from \"./PBKDF2Params.js\";\nimport PasswordRecipientinfo from \"./PasswordRecipientinfo.js\";\nimport ECCCMSSharedInfo from \"./ECCCMSSharedInfo.js\";\nimport OriginatorIdentifierOrKey from \"./OriginatorIdentifierOrKey.js\";\nimport OriginatorPublicKey from \"./OriginatorPublicKey.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nexport default class EnvelopedData {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for EnvelopedData class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", EnvelopedData.defaultValues(\"version\"));\n    if (\"originatorInfo\" in parameters)\n      /**\r\n       * @type {OriginatorInfo}\r\n       * @desc originatorInfo\r\n       */\n      this.originatorInfo = getParametersValue(parameters, \"originatorInfo\", EnvelopedData.defaultValues(\"originatorInfo\"));\n    /**\r\n     * @type {Array.<RecipientInfo>}\r\n     * @desc recipientInfos\r\n     */\n\n    this.recipientInfos = getParametersValue(parameters, \"recipientInfos\", EnvelopedData.defaultValues(\"recipientInfos\"));\n    /**\r\n     * @type {EncryptedContentInfo}\r\n     * @desc encryptedContentInfo\r\n     */\n\n    this.encryptedContentInfo = getParametersValue(parameters, \"encryptedContentInfo\", EnvelopedData.defaultValues(\"encryptedContentInfo\"));\n    if (\"unprotectedAttrs\" in parameters)\n      /**\r\n       * @type {Array.<Attribute>}\r\n       * @desc unprotectedAttrs\r\n       */\n      this.unprotectedAttrs = getParametersValue(parameters, \"unprotectedAttrs\", EnvelopedData.defaultValues(\"unprotectedAttrs\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"version\":\n        return 0;\n\n      case \"originatorInfo\":\n        return new OriginatorInfo();\n\n      case \"recipientInfos\":\n        return [];\n\n      case \"encryptedContentInfo\":\n        return new EncryptedContentInfo();\n\n      case \"unprotectedAttrs\":\n        return [];\n\n      default:\n        throw new Error(`Invalid member name for EnvelopedData class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"version\":\n        return memberValue === EnvelopedData.defaultValues(memberName);\n\n      case \"originatorInfo\":\n        return memberValue.certs.certificates.length === 0 && memberValue.crls.crls.length === 0;\n\n      case \"recipientInfos\":\n      case \"unprotectedAttrs\":\n        return memberValue.length === 0;\n\n      case \"encryptedContentInfo\":\n        return EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType) && EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm) && EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent);\n\n      default:\n        throw new Error(`Invalid member name for EnvelopedData class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * EnvelopedData ::= SEQUENCE {\r\n   *    version CMSVersion,\r\n   *    originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,\r\n   *    recipientInfos RecipientInfos,\r\n   *    encryptedContentInfo EncryptedContentInfo,\r\n   *    unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [version]\r\n     * @property {string} [originatorInfo]\r\n     * @property {string} [recipientInfos]\r\n     * @property {string} [encryptedContentInfo]\r\n     * @property {string} [unprotectedAttrs]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Integer({\n        name: names.version || \"\"\n      }), new asn1js.Constructed({\n        name: names.originatorInfo || \"\",\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: OriginatorInfo.schema().valueBlock.value\n      }), new asn1js.Set({\n        value: [new asn1js.Repeated({\n          name: names.recipientInfos || \"\",\n          value: RecipientInfo.schema()\n        })]\n      }), EncryptedContentInfo.schema(names.encryptedContentInfo || {}), new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: [new asn1js.Repeated({\n          name: names.unprotectedAttrs || \"\",\n          value: Attribute.schema()\n        })]\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"version\", \"originatorInfo\", \"recipientInfos\", \"encryptedContentInfo\", \"unprotectedAttrs\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, EnvelopedData.schema({\n      names: {\n        version: \"version\",\n        originatorInfo: \"originatorInfo\",\n        recipientInfos: \"recipientInfos\",\n        encryptedContentInfo: {\n          names: {\n            blockName: \"encryptedContentInfo\"\n          }\n        },\n        unprotectedAttrs: \"unprotectedAttrs\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for EnvelopedData\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.version = asn1.result.version.valueBlock.valueDec;\n\n    if (\"originatorInfo\" in asn1.result) {\n      this.originatorInfo = new OriginatorInfo({\n        schema: new asn1js.Sequence({\n          value: asn1.result.originatorInfo.valueBlock.value\n        })\n      });\n    }\n\n    this.recipientInfos = Array.from(asn1.result.recipientInfos, element => new RecipientInfo({\n      schema: element\n    }));\n    this.encryptedContentInfo = new EncryptedContentInfo({\n      schema: asn1.result.encryptedContentInfo\n    });\n    if (\"unprotectedAttrs\" in asn1.result) this.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({\n      schema: element\n    })); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n    outputArray.push(new asn1js.Integer({\n      value: this.version\n    }));\n\n    if (\"originatorInfo\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: this.originatorInfo.toSchema().valueBlock.value\n      }));\n    }\n\n    outputArray.push(new asn1js.Set({\n      value: Array.from(this.recipientInfos, element => element.toSchema())\n    }));\n    outputArray.push(this.encryptedContentInfo.toSchema());\n\n    if (\"unprotectedAttrs\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: Array.from(this.unprotectedAttrs, element => element.toSchema())\n      }));\n    } //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const _object = {\n      version: this.version\n    };\n    if (\"originatorInfo\" in this) _object.originatorInfo = this.originatorInfo.toJSON();\n    _object.recipientInfos = Array.from(this.recipientInfos, element => element.toJSON());\n    _object.encryptedContentInfo = this.encryptedContentInfo.toJSON();\n    if (\"unprotectedAttrs\" in this) _object.unprotectedAttrs = Array.from(this.unprotectedAttrs, element => element.toJSON());\n    return _object;\n  } //**********************************************************************************\n\n  /**\r\n   * Helpers function for filling \"RecipientInfo\" based on recipient's certificate.\r\n   * Problem with WebCrypto is that for RSA certificates we have only one option - \"key transport\" and\r\n   * for ECC certificates we also have one option - \"key agreement\". As soon as Google will implement\r\n   * DH algorithm it would be possible to use \"key agreement\" also for RSA certificates.\r\n   * @param {Certificate} [certificate] Recipient's certificate\r\n   * @param {Object} [parameters] Additional parameters neccessary for \"fine tunning\" of encryption process\r\n   * @param {number} [variant] Variant = 1 is for \"key transport\", variant = 2 is for \"key agreement\". In fact the \"variant\" is unneccessary now because Google has no DH algorithm implementation. Thus key encryption scheme would be choosen by certificate type only: \"key transport\" for RSA and \"key agreement\" for ECC certificates.\r\n   */\n\n\n  addRecipientByCertificate(certificate, parameters, variant) {\n    //region Initial variables \n    const encryptionParameters = parameters || {}; //endregion \n    //region Check type of certificate\n\n    if (certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.113549\") !== -1) variant = 1; // For the moment it is the only variant for RSA-based certificates\n    else {\n        if (certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.10045\") !== -1) variant = 2; // For the moment it is the only variant for ECC-based certificates\n        else throw new Error(`Unknown type of certificate's public key: ${certificate.subjectPublicKeyInfo.algorithm.algorithmId}`);\n      } //endregion \n    //region Initialize encryption parameters \n\n    if (\"oaepHashAlgorithm\" in encryptionParameters === false) encryptionParameters.oaepHashAlgorithm = \"SHA-512\";\n    if (\"kdfAlgorithm\" in encryptionParameters === false) encryptionParameters.kdfAlgorithm = \"SHA-512\";\n    if (\"kekEncryptionLength\" in encryptionParameters === false) encryptionParameters.kekEncryptionLength = 256; //endregion \n    //region Add new \"recipient\" depends on \"variant\" and certificate type \n\n    switch (variant) {\n      case 1:\n        // Key transport scheme\n        {\n          //region keyEncryptionAlgorithm\n          const oaepOID = getOIDByAlgorithm({\n            name: \"RSA-OAEP\"\n          });\n          if (oaepOID === \"\") throw new Error(\"Can not find OID for OAEP\"); //endregion\n          //region RSAES-OAEP-params\n\n          const hashOID = getOIDByAlgorithm({\n            name: encryptionParameters.oaepHashAlgorithm\n          });\n          if (hashOID === \"\") throw new Error(`Unknown OAEP hash algorithm: ${encryptionParameters.oaepHashAlgorithm}`);\n          const hashAlgorithm = new AlgorithmIdentifier({\n            algorithmId: hashOID,\n            algorithmParams: new asn1js.Null()\n          });\n          const rsaOAEPParams = new RSAESOAEPParams({\n            hashAlgorithm,\n            maskGenAlgorithm: new AlgorithmIdentifier({\n              algorithmId: \"1.2.840.113549.1.1.8\",\n              // id-mgf1\n              algorithmParams: hashAlgorithm.toSchema()\n            })\n          }); //endregion\n          //region KeyTransRecipientInfo\n\n          const keyInfo = new KeyTransRecipientInfo({\n            version: 0,\n            rid: new IssuerAndSerialNumber({\n              issuer: certificate.issuer,\n              serialNumber: certificate.serialNumber\n            }),\n            keyEncryptionAlgorithm: new AlgorithmIdentifier({\n              algorithmId: oaepOID,\n              algorithmParams: rsaOAEPParams.toSchema()\n            }),\n            recipientCertificate: certificate // \"encryptedKey\" will be calculated in \"encrypt\" function\n\n          }); //endregion\n          //region Final values for \"CMS_ENVELOPED_DATA\"\n\n          this.recipientInfos.push(new RecipientInfo({\n            variant: 1,\n            value: keyInfo\n          })); //endregion\n        }\n        break;\n\n      case 2:\n        // Key agreement scheme\n        {\n          //region RecipientEncryptedKey\n          const encryptedKey = new RecipientEncryptedKey({\n            rid: new KeyAgreeRecipientIdentifier({\n              variant: 1,\n              value: new IssuerAndSerialNumber({\n                issuer: certificate.issuer,\n                serialNumber: certificate.serialNumber\n              })\n            }) // \"encryptedKey\" will be calculated in \"encrypt\" function\n\n          }); //endregion\n          //region keyEncryptionAlgorithm\n\n          const aesKWoid = getOIDByAlgorithm({\n            name: \"AES-KW\",\n            length: encryptionParameters.kekEncryptionLength\n          });\n          if (aesKWoid === \"\") throw new Error(`Unknown length for key encryption algorithm: ${encryptionParameters.kekEncryptionLength}`);\n          const aesKW = new AlgorithmIdentifier({\n            algorithmId: aesKWoid,\n            algorithmParams: new asn1js.Null()\n          }); //endregion\n          //region KeyAgreeRecipientInfo\n\n          const ecdhOID = getOIDByAlgorithm({\n            name: \"ECDH\",\n            kdf: encryptionParameters.kdfAlgorithm\n          });\n          if (ecdhOID === \"\") throw new Error(`Unknown KDF algorithm: ${encryptionParameters.kdfAlgorithm}`); // In fact there is no need in so long UKM, but RFC2631\n          // has requirement that \"UserKeyMaterial\" must be 512 bits long\n\n          const ukmBuffer = new ArrayBuffer(64);\n          const ukmView = new Uint8Array(ukmBuffer);\n          getRandomValues(ukmView); // Generate random values in 64 bytes long buffer\n\n          const keyInfo = new KeyAgreeRecipientInfo({\n            version: 3,\n            // \"originator\" will be calculated in \"encrypt\" function because ephemeral key would be generated there\n            ukm: new asn1js.OctetString({\n              valueHex: ukmBuffer\n            }),\n            keyEncryptionAlgorithm: new AlgorithmIdentifier({\n              algorithmId: ecdhOID,\n              algorithmParams: aesKW.toSchema()\n            }),\n            recipientEncryptedKeys: new RecipientEncryptedKeys({\n              encryptedKeys: [encryptedKey]\n            }),\n            recipientCertificate: certificate\n          }); //endregion\n          //region Final values for \"CMS_ENVELOPED_DATA\"\n\n          this.recipientInfos.push(new RecipientInfo({\n            variant: 2,\n            value: keyInfo\n          })); //endregion\n        }\n        break;\n\n      default:\n        throw new Error(`Unknown \"variant\" value: ${variant}`);\n    } //endregion \n\n\n    return true;\n  } //**********************************************************************************\n\n  /**\r\n   * Add recipient based on pre-defined data like password or KEK\r\n   * @param {ArrayBuffer} preDefinedData ArrayBuffer with pre-defined data\r\n   * @param {Object} parameters Additional parameters neccessary for \"fine tunning\" of encryption process\r\n   * @param {number} variant Variant = 1 for pre-defined \"key encryption key\" (KEK). Variant = 2 for password-based encryption.\r\n   */\n\n\n  addRecipientByPreDefinedData(preDefinedData, parameters, variant) {\n    //region Initial variables\n    const encryptionParameters = parameters || {}; //endregion\n    //region Check initial parameters\n\n    if (preDefinedData instanceof ArrayBuffer === false) throw new Error(\"Please pass \\\"preDefinedData\\\" in ArrayBuffer type\");\n    if (preDefinedData.byteLength === 0) throw new Error(\"Pre-defined data could have zero length\"); //endregion\n    //region Initialize encryption parameters\n\n    if (\"keyIdentifier\" in encryptionParameters === false) {\n      const keyIdentifierBuffer = new ArrayBuffer(16);\n      const keyIdentifierView = new Uint8Array(keyIdentifierBuffer);\n      getRandomValues(keyIdentifierView);\n      encryptionParameters.keyIdentifier = keyIdentifierBuffer;\n    }\n\n    if (\"hmacHashAlgorithm\" in encryptionParameters === false) encryptionParameters.hmacHashAlgorithm = \"SHA-512\";\n    if (\"iterationCount\" in encryptionParameters === false) encryptionParameters.iterationCount = 2048;\n\n    if (\"keyEncryptionAlgorithm\" in encryptionParameters === false) {\n      encryptionParameters.keyEncryptionAlgorithm = {\n        name: \"AES-KW\",\n        length: 256\n      };\n    }\n\n    if (\"keyEncryptionAlgorithmParams\" in encryptionParameters === false) encryptionParameters.keyEncryptionAlgorithmParams = new asn1js.Null(); //endregion\n    //region Add new recipient based on passed variant\n\n    switch (variant) {\n      case 1:\n        // KEKRecipientInfo\n        {\n          //region keyEncryptionAlgorithm\n          const kekOID = getOIDByAlgorithm(encryptionParameters.keyEncryptionAlgorithm);\n          if (kekOID === \"\") throw new Error(\"Incorrect value for \\\"keyEncryptionAlgorithm\\\"\"); //endregion\n          //region KEKRecipientInfo\n\n          const keyInfo = new KEKRecipientInfo({\n            version: 4,\n            kekid: new KEKIdentifier({\n              keyIdentifier: new asn1js.OctetString({\n                valueHex: encryptionParameters.keyIdentifier\n              })\n            }),\n            keyEncryptionAlgorithm: new AlgorithmIdentifier({\n              algorithmId: kekOID,\n\n              /*\r\n               For AES-KW params are NULL, but for other algorithm could another situation.\r\n               */\n              algorithmParams: encryptionParameters.keyEncryptionAlgorithmParams\n            }),\n            preDefinedKEK: preDefinedData // \"encryptedKey\" would be set in \"ecrypt\" function\n\n          }); //endregion\n          //region Final values for \"CMS_ENVELOPED_DATA\"\n\n          this.recipientInfos.push(new RecipientInfo({\n            variant: 3,\n            value: keyInfo\n          })); //endregion\n        }\n        break;\n\n      case 2:\n        // PasswordRecipientinfo\n        {\n          //region keyDerivationAlgorithm\n          const pbkdf2OID = getOIDByAlgorithm({\n            name: \"PBKDF2\"\n          });\n          if (pbkdf2OID === \"\") throw new Error(\"Can not find OID for PBKDF2\"); //endregion\n          //region Salt\n\n          const saltBuffer = new ArrayBuffer(64);\n          const saltView = new Uint8Array(saltBuffer);\n          getRandomValues(saltView); //endregion\n          //region HMAC-based algorithm\n\n          const hmacOID = getOIDByAlgorithm({\n            name: \"HMAC\",\n            hash: {\n              name: encryptionParameters.hmacHashAlgorithm\n            }\n          });\n          if (hmacOID === \"\") throw new Error(`Incorrect value for \"hmacHashAlgorithm\": ${encryptionParameters.hmacHashAlgorithm}`); //endregion\n          //region PBKDF2-params\n\n          const pbkdf2Params = new PBKDF2Params({\n            salt: new asn1js.OctetString({\n              valueHex: saltBuffer\n            }),\n            iterationCount: encryptionParameters.iterationCount,\n            prf: new AlgorithmIdentifier({\n              algorithmId: hmacOID,\n              algorithmParams: new asn1js.Null()\n            })\n          }); //endregion\n          //region keyEncryptionAlgorithm\n\n          const kekOID = getOIDByAlgorithm(encryptionParameters.keyEncryptionAlgorithm);\n          if (kekOID === \"\") throw new Error(\"Incorrect value for \\\"keyEncryptionAlgorithm\\\"\"); //endregion\n          //region PasswordRecipientinfo\n\n          const keyInfo = new PasswordRecipientinfo({\n            version: 0,\n            keyDerivationAlgorithm: new AlgorithmIdentifier({\n              algorithmId: pbkdf2OID,\n              algorithmParams: pbkdf2Params.toSchema()\n            }),\n            keyEncryptionAlgorithm: new AlgorithmIdentifier({\n              algorithmId: kekOID,\n\n              /*\r\n               For AES-KW params are NULL, but for other algorithm could be another situation.\r\n               */\n              algorithmParams: encryptionParameters.keyEncryptionAlgorithmParams\n            }),\n            password: preDefinedData // \"encryptedKey\" would be set in \"ecrypt\" function\n\n          }); //endregion\n          //region Final values for \"CMS_ENVELOPED_DATA\"\n\n          this.recipientInfos.push(new RecipientInfo({\n            variant: 4,\n            value: keyInfo\n          })); //endregion\n        }\n        break;\n\n      default:\n        throw new Error(`Unknown value for \"variant\": ${variant}`);\n    } //endregion\n\n  } //**********************************************************************************\n\n  /**\r\n   * Create a new CMS Enveloped Data content with encrypted data\r\n   * @param {Object} contentEncryptionAlgorithm WebCrypto algorithm. For the moment here could be only \"AES-CBC\" or \"AES-GCM\" algorithms.\r\n   * @param {ArrayBuffer} contentToEncrypt Content to encrypt\r\n   * @returns {Promise}\r\n   */\n\n\n  encrypt(contentEncryptionAlgorithm, contentToEncrypt) {\n    //region Initial variables\n    let sequence = Promise.resolve();\n    const ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long\n\n    const ivView = new Uint8Array(ivBuffer);\n    getRandomValues(ivView);\n    const contentView = new Uint8Array(contentToEncrypt);\n    let sessionKey;\n    let encryptedContent;\n    let exportedSessionKey;\n    const recipientsPromises = [];\n\n    const _this = this; //endregion\n    //region Check for input parameters\n\n\n    const contentEncryptionOID = getOIDByAlgorithm(contentEncryptionAlgorithm);\n    if (contentEncryptionOID === \"\") return Promise.reject(\"Wrong \\\"contentEncryptionAlgorithm\\\" value\"); //endregion\n    //region Get a \"crypto\" extension\n\n    const crypto = getCrypto();\n    if (typeof crypto === \"undefined\") return Promise.reject(\"Unable to create WebCrypto object\"); //endregion\n    //region Generate new content encryption key\n\n    sequence = sequence.then(() => crypto.generateKey(contentEncryptionAlgorithm, true, [\"encrypt\"])); //endregion\n    //region Encrypt content\n\n    sequence = sequence.then(result => {\n      sessionKey = result;\n      return crypto.encrypt({\n        name: contentEncryptionAlgorithm.name,\n        iv: ivView\n      }, sessionKey, contentView);\n    }, error => Promise.reject(error)); //endregion\n    //region Export raw content of content encryption key\n\n    sequence = sequence.then(result => {\n      //region Create output OCTETSTRING with encrypted content\n      encryptedContent = result; //endregion\n\n      return crypto.exportKey(\"raw\", sessionKey);\n    }, error => Promise.reject(error)).then(result => {\n      exportedSessionKey = result;\n      return true;\n    }, error => Promise.reject(error)); //endregion\n    //region Append common information to CMS_ENVELOPED_DATA\n\n    sequence = sequence.then(() => {\n      this.version = 2;\n      this.encryptedContentInfo = new EncryptedContentInfo({\n        contentType: \"1.2.840.113549.1.7.1\",\n        // \"data\"\n        contentEncryptionAlgorithm: new AlgorithmIdentifier({\n          algorithmId: contentEncryptionOID,\n          algorithmParams: new asn1js.OctetString({\n            valueHex: ivBuffer\n          })\n        }),\n        encryptedContent: new asn1js.OctetString({\n          valueHex: encryptedContent\n        })\n      });\n    }, error => Promise.reject(error)); //endregion\n    //region Special sub-functions to work with each recipient's type\n\n    function SubKeyAgreeRecipientInfo(index) {\n      //region Initial variables\n      let currentSequence = Promise.resolve();\n      let ecdhPublicKey;\n      let ecdhPrivateKey;\n      let recipientCurve;\n      let recipientCurveLength;\n      let exportedECDHPublicKey; //endregion\n      //region Get \"namedCurve\" parameter from recipient's certificate\n\n      currentSequence = currentSequence.then(() => {\n        const curveObject = _this.recipientInfos[index].value.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\n        if (curveObject.constructor.blockName() !== asn1js.ObjectIdentifier.blockName()) return Promise.reject(`Incorrect \"recipientCertificate\" for index ${index}`);\n        const curveOID = curveObject.valueBlock.toString();\n\n        switch (curveOID) {\n          case \"1.2.840.10045.3.1.7\":\n            recipientCurve = \"P-256\";\n            recipientCurveLength = 256;\n            break;\n\n          case \"1.3.132.0.34\":\n            recipientCurve = \"P-384\";\n            recipientCurveLength = 384;\n            break;\n\n          case \"1.3.132.0.35\":\n            recipientCurve = \"P-521\";\n            recipientCurveLength = 528;\n            break;\n\n          default:\n            return Promise.reject(`Incorrect curve OID for index ${index}`);\n        }\n\n        return recipientCurve;\n      }, error => Promise.reject(error)); //endregion\n      //region Generate ephemeral ECDH key\n\n      currentSequence = currentSequence.then(result => crypto.generateKey({\n        name: \"ECDH\",\n        namedCurve: result\n      }, true, [\"deriveBits\"]), error => Promise.reject(error)); //endregion\n      //region Export public key of ephemeral ECDH key pair\n\n      currentSequence = currentSequence.then(result => {\n        ecdhPublicKey = result.publicKey;\n        ecdhPrivateKey = result.privateKey;\n        return crypto.exportKey(\"spki\", ecdhPublicKey);\n      }, error => Promise.reject(error)); //endregion\n      //region Import recipient's public key\n\n      currentSequence = currentSequence.then(result => {\n        exportedECDHPublicKey = result;\n        return _this.recipientInfos[index].value.recipientCertificate.getPublicKey({\n          algorithm: {\n            algorithm: {\n              name: \"ECDH\",\n              namedCurve: recipientCurve\n            },\n            usages: []\n          }\n        });\n      }, error => Promise.reject(error)); //endregion\n      //region Create shared secret\n\n      currentSequence = currentSequence.then(result => crypto.deriveBits({\n        name: \"ECDH\",\n        public: result\n      }, ecdhPrivateKey, recipientCurveLength), error => Promise.reject(error)); //endregion\n      //region Apply KDF function to shared secret\n\n      currentSequence = currentSequence.then(\n      /**\r\n       * @param {ArrayBuffer} result\r\n       */\n      result => {\n        //region Get length of used AES-KW algorithm\n        const aesKWAlgorithm = new AlgorithmIdentifier({\n          schema: _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams\n        });\n        const KWalgorithm = getAlgorithmByOID(aesKWAlgorithm.algorithmId);\n        if (\"name\" in KWalgorithm === false) return Promise.reject(`Incorrect OID for key encryption algorithm: ${aesKWAlgorithm.algorithmId}`); //endregion\n        //region Translate AES-KW length to ArrayBuffer\n\n        let kwLength = KWalgorithm.length;\n        const kwLengthBuffer = new ArrayBuffer(4);\n        const kwLengthView = new Uint8Array(kwLengthBuffer);\n\n        for (let j = 3; j >= 0; j--) {\n          kwLengthView[j] = kwLength;\n          kwLength >>= 8;\n        } //endregion\n        //region Create and encode \"ECC-CMS-SharedInfo\" structure\n\n\n        const eccInfo = new ECCCMSSharedInfo({\n          keyInfo: new AlgorithmIdentifier({\n            algorithmId: aesKWAlgorithm.algorithmId,\n\n            /*\r\n             Initially RFC5753 says that AES algorithms have absent parameters.\r\n             But since early implementations all put NULL here. Thus, in order to be\r\n             \"backward compatible\", index also put NULL here.\r\n             */\n            algorithmParams: new asn1js.Null()\n          }),\n          entityUInfo: _this.recipientInfos[index].value.ukm,\n          suppPubInfo: new asn1js.OctetString({\n            valueHex: kwLengthBuffer\n          })\n        });\n        const encodedInfo = eccInfo.toSchema().toBER(false); //endregion\n        //region Get SHA algorithm used together with ECDH\n\n        const ecdhAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\n        if (\"name\" in ecdhAlgorithm === false) return Promise.reject(`Incorrect OID for key encryption algorithm: ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`); //endregion\n\n        return kdf(ecdhAlgorithm.kdf, result, KWalgorithm.length, encodedInfo);\n      }, error => Promise.reject(error)); //endregion\n      //region Import AES-KW key from result of KDF function\n\n      currentSequence = currentSequence.then(result => crypto.importKey(\"raw\", result, {\n        name: \"AES-KW\"\n      }, true, [\"wrapKey\"]), error => Promise.reject(error)); //endregion\n      //region Finally wrap session key by using AES-KW algorithm\n\n      currentSequence = currentSequence.then(result => crypto.wrapKey(\"raw\", sessionKey, result, {\n        name: \"AES-KW\"\n      }), error => Promise.reject(error)); //endregion\n      //region Append all neccessary data to current CMS_RECIPIENT_INFO object\n\n      currentSequence = currentSequence.then(result => {\n        //region OriginatorIdentifierOrKey\n        const asn1 = asn1js.fromBER(exportedECDHPublicKey);\n        const originator = new OriginatorIdentifierOrKey();\n        originator.variant = 3;\n        originator.value = new OriginatorPublicKey({\n          schema: asn1.result\n        }); // There is option when we can stay with ECParameters, but here index prefer to avoid the params\n\n        if (\"algorithmParams\" in originator.value.algorithm) delete originator.value.algorithm.algorithmParams;\n        _this.recipientInfos[index].value.originator = originator; //endregion\n        //region RecipientEncryptedKey\n\n        /*\r\n         We will not support using of same ephemeral key for many recipients\r\n         */\n\n        _this.recipientInfos[index].value.recipientEncryptedKeys.encryptedKeys[0].encryptedKey = new asn1js.OctetString({\n          valueHex: result\n        }); //endregion\n\n        return {\n          ecdhPrivateKey\n        };\n      }, error => Promise.reject(error)); //endregion\n\n      return currentSequence;\n    }\n\n    function SubKeyTransRecipientInfo(index) {\n      //region Initial variables\n      let currentSequence = Promise.resolve(); //endregion\n      //region Get recipient's public key\n\n      currentSequence = currentSequence.then(() => {\n        //region Check we have a correct algorithm here\n        const oaepOID = getOIDByAlgorithm({\n          name: \"RSA-OAEP\"\n        });\n        if (oaepOID === \"\") throw new Error(\"Can not find OID for OAEP\");\n        if (_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId !== oaepOID) throw new Error(\"Not supported encryption scheme, only RSA-OAEP is supported for key transport encryption scheme\"); //endregion\n        //region Get current used SHA algorithm\n\n        const schema = _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams;\n        const rsaOAEPParams = new RSAESOAEPParams({\n          schema\n        });\n        const hashAlgorithm = getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\n        if (\"name\" in hashAlgorithm === false) return Promise.reject(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`); //endregion\n\n        return _this.recipientInfos[index].value.recipientCertificate.getPublicKey({\n          algorithm: {\n            algorithm: {\n              name: \"RSA-OAEP\",\n              hash: {\n                name: hashAlgorithm.name\n              }\n            },\n            usages: [\"encrypt\", \"wrapKey\"]\n          }\n        });\n      }, error => Promise.reject(error)); //endregion\n      //region Encrypt early exported session key on recipient's public key\n\n      currentSequence = currentSequence.then(result => crypto.encrypt(result.algorithm, result, exportedSessionKey), error => Promise.reject(error)); //endregion\n      //region Append all neccessary data to current CMS_RECIPIENT_INFO object\n\n      currentSequence = currentSequence.then(result => {\n        //region RecipientEncryptedKey\n        _this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({\n          valueHex: result\n        }); //endregion\n      }, error => Promise.reject(error)); //endregion\n\n      return currentSequence;\n    }\n\n    function SubKEKRecipientInfo(index) {\n      //region Initial variables\n      let currentSequence = Promise.resolve();\n      let kekAlgorithm; //endregion\n      //region Import KEK from pre-defined data\n\n      currentSequence = currentSequence.then(() => {\n        //region Get WebCrypto form of \"keyEncryptionAlgorithm\"\n        kekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\n        if (\"name\" in kekAlgorithm === false) return Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`); //endregion\n\n        return crypto.importKey(\"raw\", new Uint8Array(_this.recipientInfos[index].value.preDefinedKEK), kekAlgorithm, true, [\"wrapKey\"]); // Too specific for AES-KW\n      }, error => Promise.reject(error)); //endregion\n      //region Wrap previously exported session key\n\n      currentSequence = currentSequence.then(result => crypto.wrapKey(\"raw\", sessionKey, result, kekAlgorithm), error => Promise.reject(error)); //endregion\n      //region Append all neccessary data to current CMS_RECIPIENT_INFO object\n\n      currentSequence = currentSequence.then(result => {\n        //region RecipientEncryptedKey\n        _this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({\n          valueHex: result\n        }); //endregion\n      }, error => Promise.reject(error)); //endregion\n\n      return currentSequence;\n    }\n\n    function SubPasswordRecipientinfo(index) {\n      //region Initial variables\n      let currentSequence = Promise.resolve();\n      let pbkdf2Params;\n      let kekAlgorithm; //endregion\n      //region Check that we have encoded \"keyDerivationAlgorithm\" plus \"PBKDF2_params\" in there\n\n      currentSequence = currentSequence.then(() => {\n        if (\"keyDerivationAlgorithm\" in _this.recipientInfos[index].value === false) return Promise.reject(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\n        if (\"algorithmParams\" in _this.recipientInfos[index].value.keyDerivationAlgorithm === false) return Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\n\n        try {\n          pbkdf2Params = new PBKDF2Params({\n            schema: _this.recipientInfos[index].value.keyDerivationAlgorithm.algorithmParams\n          });\n        } catch (ex) {\n          return Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\n        }\n\n        return Promise.resolve();\n      }, error => Promise.reject(error)); //endregion\n      //region Derive PBKDF2 key from \"password\" buffer\n\n      currentSequence = currentSequence.then(() => {\n        const passwordView = new Uint8Array(_this.recipientInfos[index].value.password);\n        return crypto.importKey(\"raw\", passwordView, \"PBKDF2\", false, [\"deriveKey\"]);\n      }, error => Promise.reject(error)); //endregion\n      //region Derive key for \"keyEncryptionAlgorithm\"\n\n      currentSequence = currentSequence.then(result => {\n        //region Get WebCrypto form of \"keyEncryptionAlgorithm\"\n        kekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\n        if (\"name\" in kekAlgorithm === false) return Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`); //endregion\n        //region Get HMAC hash algorithm\n\n        let hmacHashAlgorithm = \"SHA-1\";\n\n        if (\"prf\" in pbkdf2Params) {\n          const algorithm = getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\n          if (\"name\" in algorithm === false) return Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\n          hmacHashAlgorithm = algorithm.hash.name;\n        } //endregion\n        //region Get PBKDF2 \"salt\" value\n\n\n        const saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex); //endregion\n        //region Get PBKDF2 iterations count\n\n        const iterations = pbkdf2Params.iterationCount; //endregion\n\n        return crypto.deriveKey({\n          name: \"PBKDF2\",\n          hash: {\n            name: hmacHashAlgorithm\n          },\n          salt: saltView,\n          iterations\n        }, result, kekAlgorithm, true, [\"wrapKey\"]); // Usages are too specific for KEK algorithm\n      }, error => Promise.reject(error)); //endregion\n      //region Wrap previously exported session key (Also too specific for KEK algorithm)\n\n      currentSequence = currentSequence.then(result => crypto.wrapKey(\"raw\", sessionKey, result, kekAlgorithm), error => Promise.reject(error)); //endregion\n      //region Append all neccessary data to current CMS_RECIPIENT_INFO object\n\n      currentSequence = currentSequence.then(result => {\n        //region RecipientEncryptedKey\n        _this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({\n          valueHex: result\n        }); //endregion\n      }, error => Promise.reject(error)); //endregion\n\n      return currentSequence;\n    } //endregion\n    //region Create special routines for each \"recipient\"\n\n\n    sequence = sequence.then(() => {\n      for (let i = 0; i < this.recipientInfos.length; i++) {\n        //region Initial variables\n        let currentSequence = Promise.resolve(); //endregion\n\n        switch (this.recipientInfos[i].variant) {\n          case 1:\n            // KeyTransRecipientInfo\n            currentSequence = SubKeyTransRecipientInfo(i);\n            break;\n\n          case 2:\n            // KeyAgreeRecipientInfo\n            currentSequence = SubKeyAgreeRecipientInfo(i);\n            break;\n\n          case 3:\n            // KEKRecipientInfo\n            currentSequence = SubKEKRecipientInfo(i);\n            break;\n\n          case 4:\n            // PasswordRecipientinfo\n            currentSequence = SubPasswordRecipientinfo(i);\n            break;\n\n          default:\n            return Promise.reject(`Uknown recipient type in array with index ${i}`);\n        }\n\n        recipientsPromises.push(currentSequence);\n      }\n\n      return Promise.all(recipientsPromises);\n    }, error => Promise.reject(error)); //endregion\n\n    return sequence;\n  } //**********************************************************************************\n\n  /**\r\n   * Decrypt existing CMS Enveloped Data content\r\n   * @param {number} recipientIndex Index of recipient\r\n   * @param {Object} parameters Additional parameters\r\n   * @returns {Promise}\r\n   */\n\n\n  decrypt(recipientIndex, parameters) {\n    //region Initial variables\n    let sequence = Promise.resolve();\n    const decryptionParameters = parameters || {};\n\n    const _this = this; //endregion\n    //region Check for input parameters\n\n\n    if (recipientIndex + 1 > this.recipientInfos.length) return Promise.reject(`Maximum value for \"index\" is: ${this.recipientInfos.length - 1}`); //endregion\n    //region Get a \"crypto\" extension\n\n    const crypto = getCrypto();\n    if (typeof crypto === \"undefined\") return Promise.reject(\"Unable to create WebCrypto object\"); //endregion\n    //region Special sub-functions to work with each recipient's type\n\n    function SubKeyAgreeRecipientInfo(index) {\n      //region Initial variables\n      let currentSequence = Promise.resolve();\n      let recipientCurve;\n      let recipientCurveLength;\n      let curveOID;\n      let ecdhPrivateKey; //endregion\n      //region Get \"namedCurve\" parameter from recipient's certificate\n\n      currentSequence = currentSequence.then(() => {\n        if (\"recipientCertificate\" in decryptionParameters === false) return Promise.reject(\"Parameter \\\"recipientCertificate\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\n        if (\"recipientPrivateKey\" in decryptionParameters === false) return Promise.reject(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\n        const curveObject = decryptionParameters.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\n        if (curveObject.constructor.blockName() !== asn1js.ObjectIdentifier.blockName()) return Promise.reject(`Incorrect \"recipientCertificate\" for index ${index}`);\n        curveOID = curveObject.valueBlock.toString();\n\n        switch (curveOID) {\n          case \"1.2.840.10045.3.1.7\":\n            recipientCurve = \"P-256\";\n            recipientCurveLength = 256;\n            break;\n\n          case \"1.3.132.0.34\":\n            recipientCurve = \"P-384\";\n            recipientCurveLength = 384;\n            break;\n\n          case \"1.3.132.0.35\":\n            recipientCurve = \"P-521\";\n            recipientCurveLength = 528;\n            break;\n\n          default:\n            return Promise.reject(`Incorrect curve OID for index ${index}`);\n        }\n\n        return crypto.importKey(\"pkcs8\", decryptionParameters.recipientPrivateKey, {\n          name: \"ECDH\",\n          namedCurve: recipientCurve\n        }, true, [\"deriveBits\"]);\n      }, error => Promise.reject(error)); //endregion\n      //region Import sender's ephemeral public key\n\n      currentSequence = currentSequence.then(result => {\n        ecdhPrivateKey = result; //region Change \"OriginatorPublicKey\" if \"curve\" parameter absent\n\n        if (\"algorithmParams\" in _this.recipientInfos[index].value.originator.value.algorithm === false) _this.recipientInfos[index].value.originator.value.algorithm.algorithmParams = new asn1js.ObjectIdentifier({\n          value: curveOID\n        }); //endregion\n        //region Create ArrayBuffer with sender's public key\n\n        const buffer = _this.recipientInfos[index].value.originator.value.toSchema().toBER(false); //endregion\n\n\n        return crypto.importKey(\"spki\", buffer, {\n          name: \"ECDH\",\n          namedCurve: recipientCurve\n        }, true, []);\n      }, error => Promise.reject(error)); //endregion\n      //region Create shared secret\n\n      currentSequence = currentSequence.then(result => crypto.deriveBits({\n        name: \"ECDH\",\n        public: result\n      }, ecdhPrivateKey, recipientCurveLength), error => Promise.reject(error)); //endregion\n      //region Apply KDF function to shared secret\n\n      currentSequence = currentSequence.then(\n      /**\r\n       * @param {ArrayBuffer} result\r\n       */\n      result => {\n        //region Get length of used AES-KW algorithm\n        const aesKWAlgorithm = new AlgorithmIdentifier({\n          schema: _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams\n        });\n        const KWalgorithm = getAlgorithmByOID(aesKWAlgorithm.algorithmId);\n        if (\"name\" in KWalgorithm === false) return Promise.reject(`Incorrect OID for key encryption algorithm: ${aesKWAlgorithm.algorithmId}`); //endregion\n        //region Translate AES-KW length to ArrayBuffer\n\n        let kwLength = KWalgorithm.length;\n        const kwLengthBuffer = new ArrayBuffer(4);\n        const kwLengthView = new Uint8Array(kwLengthBuffer);\n\n        for (let j = 3; j >= 0; j--) {\n          kwLengthView[j] = kwLength;\n          kwLength >>= 8;\n        } //endregion\n        //region Create and encode \"ECC-CMS-SharedInfo\" structure\n\n\n        const eccInfo = new ECCCMSSharedInfo({\n          keyInfo: new AlgorithmIdentifier({\n            algorithmId: aesKWAlgorithm.algorithmId,\n\n            /*\r\n             Initially RFC5753 says that AES algorithms have absent parameters.\r\n             But since early implementations all put NULL here. Thus, in order to be\r\n             \"backward compatible\", index also put NULL here.\r\n             */\n            algorithmParams: new asn1js.Null()\n          }),\n          entityUInfo: _this.recipientInfos[index].value.ukm,\n          suppPubInfo: new asn1js.OctetString({\n            valueHex: kwLengthBuffer\n          })\n        });\n        const encodedInfo = eccInfo.toSchema().toBER(false); //endregion\n        //region Get SHA algorithm used together with ECDH\n\n        const ecdhAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\n        if (\"name\" in ecdhAlgorithm === false) return Promise.reject(`Incorrect OID for key encryption algorithm: ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`); //endregion\n\n        return kdf(ecdhAlgorithm.kdf, result, KWalgorithm.length, encodedInfo);\n      }, error => Promise.reject(error)); //endregion\n      //region Import AES-KW key from result of KDF function\n\n      currentSequence = currentSequence.then(result => crypto.importKey(\"raw\", result, {\n        name: \"AES-KW\"\n      }, true, [\"unwrapKey\"]), error => Promise.reject(error)); //endregion\n      //region Finally unwrap session key\n\n      currentSequence = currentSequence.then(result => {\n        //region Get WebCrypto form of content encryption algorithm\n        const contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\n        if (\"name\" in contentEncryptionAlgorithm === false) return Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`); //endregion\n\n        return crypto.unwrapKey(\"raw\", _this.recipientInfos[index].value.recipientEncryptedKeys.encryptedKeys[0].encryptedKey.valueBlock.valueHex, result, {\n          name: \"AES-KW\"\n        }, contentEncryptionAlgorithm, true, [\"decrypt\"]);\n      }, error => Promise.reject(error)); //endregion\n\n      return currentSequence;\n    }\n\n    function SubKeyTransRecipientInfo(index) {\n      //region Initial variables\n      let currentSequence = Promise.resolve(); //endregion\n      //region Import recipient's private key\n\n      currentSequence = currentSequence.then(() => {\n        if (\"recipientPrivateKey\" in decryptionParameters === false) return Promise.reject(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyTransRecipientInfo\\\"\"); //region Get current used SHA algorithm\n\n        const schema = _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams;\n        const rsaOAEPParams = new RSAESOAEPParams({\n          schema\n        });\n        const hashAlgorithm = getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\n        if (\"name\" in hashAlgorithm === false) return Promise.reject(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`); //endregion\n\n        return crypto.importKey(\"pkcs8\", decryptionParameters.recipientPrivateKey, {\n          name: \"RSA-OAEP\",\n          hash: {\n            name: hashAlgorithm.name\n          }\n        }, true, [\"decrypt\"]);\n      }, error => Promise.reject(error)); //endregion\n      //region Decrypt encrypted session key\n\n      currentSequence = currentSequence.then(result => crypto.decrypt(result.algorithm, result, _this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex), error => Promise.reject(error)); //endregion\n      //region Import decrypted session key\n\n      currentSequence = currentSequence.then(result => {\n        //region Get WebCrypto form of content encryption algorithm\n        const contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\n        if (\"name\" in contentEncryptionAlgorithm === false) return Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`); //endregion\n\n        return crypto.importKey(\"raw\", result, contentEncryptionAlgorithm, true, [\"decrypt\"]);\n      }, error => Promise.reject(error)); //endregion\n\n      return currentSequence;\n    }\n\n    function SubKEKRecipientInfo(index) {\n      //region Initial variables\n      let currentSequence = Promise.resolve();\n      let kekAlgorithm; //endregion\n      //region Import KEK from pre-defined data\n\n      currentSequence = currentSequence.then(() => {\n        if (\"preDefinedData\" in decryptionParameters === false) return Promise.reject(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\"); //region Get WebCrypto form of \"keyEncryptionAlgorithm\"\n\n        kekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\n        if (\"name\" in kekAlgorithm === false) return Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`); //endregion\n\n        return crypto.importKey(\"raw\", decryptionParameters.preDefinedData, kekAlgorithm, true, [\"unwrapKey\"]); // Too specific for AES-KW\n      }, error => Promise.reject(error)); //endregion\n      //region Unwrap previously exported session key\n\n      currentSequence = currentSequence.then(result => {\n        //region Get WebCrypto form of content encryption algorithm\n        const contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\n        if (\"name\" in contentEncryptionAlgorithm === false) return Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`); //endregion\n\n        return crypto.unwrapKey(\"raw\", _this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex, result, kekAlgorithm, contentEncryptionAlgorithm, true, [\"decrypt\"]);\n      }, error => Promise.reject(error)); //endregion\n\n      return currentSequence;\n    }\n\n    function SubPasswordRecipientinfo(index) {\n      //region Initial variables\n      let currentSequence = Promise.resolve();\n      let pbkdf2Params;\n      let kekAlgorithm; //endregion\n      //region Derive PBKDF2 key from \"password\" buffer\n\n      currentSequence = currentSequence.then(() => {\n        if (\"preDefinedData\" in decryptionParameters === false) return Promise.reject(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\n        if (\"keyDerivationAlgorithm\" in _this.recipientInfos[index].value === false) return Promise.reject(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\n        if (\"algorithmParams\" in _this.recipientInfos[index].value.keyDerivationAlgorithm === false) return Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\n\n        try {\n          pbkdf2Params = new PBKDF2Params({\n            schema: _this.recipientInfos[index].value.keyDerivationAlgorithm.algorithmParams\n          });\n        } catch (ex) {\n          return Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\n        }\n\n        return crypto.importKey(\"raw\", decryptionParameters.preDefinedData, \"PBKDF2\", false, [\"deriveKey\"]);\n      }, error => Promise.reject(error)); //endregion\n      //region Derive key for \"keyEncryptionAlgorithm\"\n\n      currentSequence = currentSequence.then(result => {\n        //region Get WebCrypto form of \"keyEncryptionAlgorithm\"\n        kekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\n        if (\"name\" in kekAlgorithm === false) return Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`); //endregion\n        //region Get HMAC hash algorithm\n\n        let hmacHashAlgorithm = \"SHA-1\";\n\n        if (\"prf\" in pbkdf2Params) {\n          const algorithm = getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\n          if (\"name\" in algorithm === false) return Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\n          hmacHashAlgorithm = algorithm.hash.name;\n        } //endregion\n        //region Get PBKDF2 \"salt\" value\n\n\n        const saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex); //endregion\n        //region Get PBKDF2 iterations count\n\n        const iterations = pbkdf2Params.iterationCount; //endregion\n\n        return crypto.deriveKey({\n          name: \"PBKDF2\",\n          hash: {\n            name: hmacHashAlgorithm\n          },\n          salt: saltView,\n          iterations\n        }, result, kekAlgorithm, true, [\"unwrapKey\"]); // Usages are too specific for KEK algorithm\n      }, error => Promise.reject(error)); //endregion\n      //region Unwrap previously exported session key\n\n      currentSequence = currentSequence.then(result => {\n        //region Get WebCrypto form of content encryption algorithm\n        const contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\n        if (\"name\" in contentEncryptionAlgorithm === false) return Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`); //endregion\n\n        return crypto.unwrapKey(\"raw\", _this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex, result, kekAlgorithm, contentEncryptionAlgorithm, true, [\"decrypt\"]);\n      }, error => Promise.reject(error)); //endregion\n\n      return currentSequence;\n    } //endregion\n    //region Perform steps, specific to each type of session key encryption\n\n\n    sequence = sequence.then(() => {\n      //region Initial variables\n      let currentSequence = Promise.resolve(); //endregion\n\n      switch (this.recipientInfos[recipientIndex].variant) {\n        case 1:\n          // KeyTransRecipientInfo\n          currentSequence = SubKeyTransRecipientInfo(recipientIndex);\n          break;\n\n        case 2:\n          // KeyAgreeRecipientInfo\n          currentSequence = SubKeyAgreeRecipientInfo(recipientIndex);\n          break;\n\n        case 3:\n          // KEKRecipientInfo\n          currentSequence = SubKEKRecipientInfo(recipientIndex);\n          break;\n\n        case 4:\n          // PasswordRecipientinfo\n          currentSequence = SubPasswordRecipientinfo(recipientIndex);\n          break;\n\n        default:\n          return Promise.reject(`Uknown recipient type in array with index ${recipientIndex}`);\n      }\n\n      return currentSequence;\n    }, error => Promise.reject(error)); //endregion\n    //region Finally decrypt data by session key\n\n    sequence = sequence.then(result => {\n      //region Get WebCrypto form of content encryption algorithm\n      const contentEncryptionAlgorithm = getAlgorithmByOID(this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\n      if (\"name\" in contentEncryptionAlgorithm === false) return Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`); //endregion\n      //region Get \"intialization vector\" for content encryption algorithm\n\n      const ivBuffer = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams.valueBlock.valueHex;\n      const ivView = new Uint8Array(ivBuffer); //endregion\n      //region Create correct data block for decryption\n\n      let dataBuffer = new ArrayBuffer(0);\n      if (this.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false) dataBuffer = this.encryptedContentInfo.encryptedContent.valueBlock.valueHex;else {\n        for (const content of this.encryptedContentInfo.encryptedContent.valueBlock.value) dataBuffer = utilConcatBuf(dataBuffer, content.valueBlock.valueHex);\n      } //endregion\n\n      return crypto.decrypt({\n        name: contentEncryptionAlgorithm.name,\n        iv: ivView\n      }, result, dataBuffer);\n    }, error => Promise.reject(error)); //endregion\n\n    return sequence;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/EnvelopedData.js"],"names":["asn1js","getParametersValue","utilConcatBuf","clearProps","getOIDByAlgorithm","getRandomValues","getCrypto","getAlgorithmByOID","kdf","OriginatorInfo","RecipientInfo","EncryptedContentInfo","Attribute","AlgorithmIdentifier","RSAESOAEPParams","KeyTransRecipientInfo","IssuerAndSerialNumber","RecipientEncryptedKey","KeyAgreeRecipientIdentifier","KeyAgreeRecipientInfo","RecipientEncryptedKeys","KEKRecipientInfo","KEKIdentifier","PBKDF2Params","PasswordRecipientinfo","ECCCMSSharedInfo","OriginatorIdentifierOrKey","OriginatorPublicKey","EnvelopedData","constructor","parameters","version","defaultValues","originatorInfo","recipientInfos","encryptedContentInfo","unprotectedAttrs","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","certs","certificates","length","crls","contentType","contentEncryptionAlgorithm","encryptedContent","names","Sequence","name","blockName","value","Integer","Constructed","optional","idBlock","tagClass","tagNumber","valueBlock","Set","Repeated","asn1","compareSchema","verified","result","valueDec","Array","from","element","toSchema","outputArray","push","toJSON","_object","addRecipientByCertificate","certificate","variant","encryptionParameters","subjectPublicKeyInfo","algorithm","algorithmId","indexOf","oaepHashAlgorithm","kdfAlgorithm","kekEncryptionLength","oaepOID","hashOID","hashAlgorithm","algorithmParams","Null","rsaOAEPParams","maskGenAlgorithm","keyInfo","rid","issuer","serialNumber","keyEncryptionAlgorithm","recipientCertificate","encryptedKey","aesKWoid","aesKW","ecdhOID","ukmBuffer","ArrayBuffer","ukmView","Uint8Array","ukm","OctetString","valueHex","recipientEncryptedKeys","encryptedKeys","addRecipientByPreDefinedData","preDefinedData","byteLength","keyIdentifierBuffer","keyIdentifierView","keyIdentifier","hmacHashAlgorithm","iterationCount","keyEncryptionAlgorithmParams","kekOID","kekid","preDefinedKEK","pbkdf2OID","saltBuffer","saltView","hmacOID","hash","pbkdf2Params","salt","prf","keyDerivationAlgorithm","password","encrypt","contentToEncrypt","sequence","Promise","resolve","ivBuffer","ivView","contentView","sessionKey","exportedSessionKey","recipientsPromises","_this","contentEncryptionOID","reject","crypto","then","generateKey","iv","error","exportKey","SubKeyAgreeRecipientInfo","index","currentSequence","ecdhPublicKey","ecdhPrivateKey","recipientCurve","recipientCurveLength","exportedECDHPublicKey","curveObject","ObjectIdentifier","curveOID","toString","namedCurve","publicKey","privateKey","getPublicKey","usages","deriveBits","public","aesKWAlgorithm","KWalgorithm","kwLength","kwLengthBuffer","kwLengthView","j","eccInfo","entityUInfo","suppPubInfo","encodedInfo","toBER","ecdhAlgorithm","importKey","wrapKey","fromBER","originator","SubKeyTransRecipientInfo","SubKEKRecipientInfo","kekAlgorithm","SubPasswordRecipientinfo","ex","passwordView","iterations","deriveKey","i","all","decrypt","recipientIndex","decryptionParameters","recipientPrivateKey","buffer","unwrapKey","dataBuffer","isConstructed","content"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, clearProps } from \"pvutils\";\r\nimport { getOIDByAlgorithm, getRandomValues, getCrypto, getAlgorithmByOID, kdf } from \"./common.js\";\r\nimport OriginatorInfo from \"./OriginatorInfo.js\";\r\nimport RecipientInfo from \"./RecipientInfo.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport RSAESOAEPParams from \"./RSAESOAEPParams.js\";\r\nimport KeyTransRecipientInfo from \"./KeyTransRecipientInfo.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\nimport RecipientEncryptedKey from \"./RecipientEncryptedKey.js\";\r\nimport KeyAgreeRecipientIdentifier from \"./KeyAgreeRecipientIdentifier.js\";\r\nimport KeyAgreeRecipientInfo from \"./KeyAgreeRecipientInfo.js\";\r\nimport RecipientEncryptedKeys from \"./RecipientEncryptedKeys.js\";\r\nimport KEKRecipientInfo from \"./KEKRecipientInfo.js\";\r\nimport KEKIdentifier from \"./KEKIdentifier.js\";\r\nimport PBKDF2Params from \"./PBKDF2Params.js\";\r\nimport PasswordRecipientinfo from \"./PasswordRecipientinfo.js\";\r\nimport ECCCMSSharedInfo from \"./ECCCMSSharedInfo.js\";\r\nimport OriginatorIdentifierOrKey from \"./OriginatorIdentifierOrKey.js\";\r\nimport OriginatorPublicKey from \"./OriginatorPublicKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EnvelopedData \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EnvelopedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", EnvelopedData.defaultValues(\"version\"));\r\n\t\t\r\n\t\tif(\"originatorInfo\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OriginatorInfo}\r\n\t\t\t * @desc originatorInfo\r\n\t\t\t */\r\n\t\t\tthis.originatorInfo = getParametersValue(parameters, \"originatorInfo\", EnvelopedData.defaultValues(\"originatorInfo\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Array.<RecipientInfo>}\r\n\t\t * @desc recipientInfos\r\n\t\t */\r\n\t\tthis.recipientInfos = getParametersValue(parameters, \"recipientInfos\", EnvelopedData.defaultValues(\"recipientInfos\"));\r\n\t\t/**\r\n\t\t * @type {EncryptedContentInfo}\r\n\t\t * @desc encryptedContentInfo\r\n\t\t */\r\n\t\tthis.encryptedContentInfo = getParametersValue(parameters, \"encryptedContentInfo\", EnvelopedData.defaultValues(\"encryptedContentInfo\"));\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc unprotectedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unprotectedAttrs = getParametersValue(parameters, \"unprotectedAttrs\", EnvelopedData.defaultValues(\"unprotectedAttrs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"originatorInfo\":\r\n\t\t\t\treturn new OriginatorInfo();\r\n\t\t\tcase \"recipientInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn new EncryptedContentInfo();\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EnvelopedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === EnvelopedData.defaultValues(memberName));\r\n\t\t\tcase \"originatorInfo\":\r\n\t\t\t\treturn ((memberValue.certs.certificates.length === 0) && (memberValue.crls.crls.length === 0));\r\n\t\t\tcase \"recipientInfos\":\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent))));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EnvelopedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * EnvelopedData ::= SEQUENCE {\r\n\t *    version CMSVersion,\r\n\t *    originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,\r\n\t *    recipientInfos RecipientInfos,\r\n\t *    encryptedContentInfo EncryptedContentInfo,\r\n\t *    unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [originatorInfo]\r\n\t\t * @property {string} [recipientInfos]\r\n\t\t * @property {string} [encryptedContentInfo]\r\n\t\t * @property {string} [unprotectedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.originatorInfo || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: OriginatorInfo.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.recipientInfos || \"\"),\r\n\t\t\t\t\t\t\tvalue: RecipientInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tEncryptedContentInfo.schema(names.encryptedContentInfo || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.unprotectedAttrs || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"originatorInfo\",\r\n\t\t\t\"recipientInfos\",\r\n\t\t\t\"encryptedContentInfo\",\r\n\t\t\t\"unprotectedAttrs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEnvelopedData.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\toriginatorInfo: \"originatorInfo\",\r\n\t\t\t\t\trecipientInfos: \"recipientInfos\",\r\n\t\t\t\t\tencryptedContentInfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptedContentInfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tunprotectedAttrs: \"unprotectedAttrs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EnvelopedData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\t\r\n\t\tif(\"originatorInfo\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.originatorInfo = new OriginatorInfo({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.originatorInfo.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tthis.recipientInfos = Array.from(asn1.result.recipientInfos, element => new RecipientInfo({ schema: element }));\r\n\t\tthis.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in asn1.result)\r\n\t\t\tthis.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\tif(\"originatorInfo\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.originatorInfo.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.recipientInfos, element => element.toSchema())\r\n\t\t}));\r\n\t\t\r\n\t\toutputArray.push(this.encryptedContentInfo.toSchema());\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.unprotectedAttrs, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version\r\n\t\t};\r\n\t\t\r\n\t\tif(\"originatorInfo\" in this)\r\n\t\t\t_object.originatorInfo = this.originatorInfo.toJSON();\r\n\t\t\r\n\t\t_object.recipientInfos = Array.from(this.recipientInfos, element => element.toJSON());\r\n\t\t_object.encryptedContentInfo = this.encryptedContentInfo.toJSON();\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t\t_object.unprotectedAttrs = Array.from(this.unprotectedAttrs, element => element.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Helpers function for filling \"RecipientInfo\" based on recipient's certificate.\r\n\t * Problem with WebCrypto is that for RSA certificates we have only one option - \"key transport\" and\r\n\t * for ECC certificates we also have one option - \"key agreement\". As soon as Google will implement\r\n\t * DH algorithm it would be possible to use \"key agreement\" also for RSA certificates.\r\n\t * @param {Certificate} [certificate] Recipient's certificate\r\n\t * @param {Object} [parameters] Additional parameters neccessary for \"fine tunning\" of encryption process\r\n\t * @param {number} [variant] Variant = 1 is for \"key transport\", variant = 2 is for \"key agreement\". In fact the \"variant\" is unneccessary now because Google has no DH algorithm implementation. Thus key encryption scheme would be choosen by certificate type only: \"key transport\" for RSA and \"key agreement\" for ECC certificates.\r\n\t */\r\n\taddRecipientByCertificate(certificate, parameters, variant)\r\n\t{\r\n\t\t//region Initial variables \r\n\t\tconst encryptionParameters = parameters || {};\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Check type of certificate\r\n\t\tif(certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.113549\") !== (-1))\r\n\t\t\tvariant = 1; // For the moment it is the only variant for RSA-based certificates\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.10045\") !== (-1))\r\n\t\t\t\tvariant = 2; // For the moment it is the only variant for ECC-based certificates\r\n\t\t\telse\r\n\t\t\t\tthrow new Error(`Unknown type of certificate's public key: ${certificate.subjectPublicKeyInfo.algorithm.algorithmId}`);\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize encryption parameters \r\n\t\tif((\"oaepHashAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.oaepHashAlgorithm = \"SHA-512\";\r\n\t\t\r\n\t\tif((\"kdfAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.kdfAlgorithm = \"SHA-512\";\r\n\t\t\r\n\t\tif((\"kekEncryptionLength\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.kekEncryptionLength = 256;\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Add new \"recipient\" depends on \"variant\" and certificate type \r\n\t\tswitch(variant)\r\n\t\t{\r\n\t\t\tcase 1: // Key transport scheme\r\n\t\t\t\t{\r\n\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst oaepOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(oaepOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Can not find OID for OAEP\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region RSAES-OAEP-params\r\n\t\t\t\t\tconst hashOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: encryptionParameters.oaepHashAlgorithm\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(hashOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Unknown OAEP hash algorithm: ${encryptionParameters.oaepHashAlgorithm}`);\r\n\t\t\t\t\r\n\t\t\t\t\tconst hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: hashOID,\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({\r\n\t\t\t\t\t\thashAlgorithm,\r\n\t\t\t\t\t\tmaskGenAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // id-mgf1\r\n\t\t\t\t\t\t\talgorithmParams: hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region KeyTransRecipientInfo\r\n\t\t\t\t\tconst keyInfo = new KeyTransRecipientInfo({\r\n\t\t\t\t\t\tversion: 0,\r\n\t\t\t\t\t\trid: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\tissuer: certificate.issuer,\r\n\t\t\t\t\t\t\tserialNumber: certificate.serialNumber\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: oaepOID,\r\n\t\t\t\t\t\t\talgorithmParams: rsaOAEPParams.toSchema()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientCertificate: certificate\r\n\t\t\t\t\t\t// \"encryptedKey\" will be calculated in \"encrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 1,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: // Key agreement scheme\r\n\t\t\t\t{\r\n\t\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t\tconst encryptedKey = new RecipientEncryptedKey({\r\n\t\t\t\t\t\trid: new KeyAgreeRecipientIdentifier({\r\n\t\t\t\t\t\t\tvariant: 1,\r\n\t\t\t\t\t\t\tvalue: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\t\tissuer: certificate.issuer,\r\n\t\t\t\t\t\t\t\tserialNumber: certificate.serialNumber\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t// \"encryptedKey\" will be calculated in \"encrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst aesKWoid = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\t\tlength: encryptionParameters.kekEncryptionLength\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(aesKWoid === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Unknown length for key encryption algorithm: ${encryptionParameters.kekEncryptionLength}`);\r\n\t\t\t\t\r\n\t\t\t\t\tconst aesKW = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: aesKWoid,\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region KeyAgreeRecipientInfo\r\n\t\t\t\t\tconst ecdhOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tkdf: encryptionParameters.kdfAlgorithm\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(ecdhOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Unknown KDF algorithm: ${encryptionParameters.kdfAlgorithm}`);\r\n\t\t\t\t\r\n\t\t\t\t\t// In fact there is no need in so long UKM, but RFC2631\r\n\t\t\t\t\t// has requirement that \"UserKeyMaterial\" must be 512 bits long\r\n\t\t\t\t\tconst ukmBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst ukmView = new Uint8Array(ukmBuffer);\r\n\t\t\t\t\tgetRandomValues(ukmView); // Generate random values in 64 bytes long buffer\r\n\t\t\t\t\r\n\t\t\t\t\tconst keyInfo = new KeyAgreeRecipientInfo({\r\n\t\t\t\t\t\tversion: 3,\r\n\t\t\t\t\t\t// \"originator\" will be calculated in \"encrypt\" function because ephemeral key would be generated there\r\n\t\t\t\t\t\tukm: new asn1js.OctetString({ valueHex: ukmBuffer }),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: ecdhOID,\r\n\t\t\t\t\t\t\talgorithmParams: aesKW.toSchema()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientEncryptedKeys: new RecipientEncryptedKeys({\r\n\t\t\t\t\t\t\tencryptedKeys: [encryptedKey]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientCertificate: certificate\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 2,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown \"variant\" value: ${variant}`);\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Add recipient based on pre-defined data like password or KEK\r\n\t * @param {ArrayBuffer} preDefinedData ArrayBuffer with pre-defined data\r\n\t * @param {Object} parameters Additional parameters neccessary for \"fine tunning\" of encryption process\r\n\t * @param {number} variant Variant = 1 for pre-defined \"key encryption key\" (KEK). Variant = 2 for password-based encryption.\r\n\t */\r\n\taddRecipientByPreDefinedData(preDefinedData, parameters, variant)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst encryptionParameters = parameters || {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check initial parameters\r\n\t\tif((preDefinedData instanceof ArrayBuffer) === false)\r\n\t\t\tthrow new Error(\"Please pass \\\"preDefinedData\\\" in ArrayBuffer type\");\r\n\t\t\r\n\t\tif(preDefinedData.byteLength === 0)\r\n\t\t\tthrow new Error(\"Pre-defined data could have zero length\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initialize encryption parameters\r\n\t\tif((\"keyIdentifier\" in encryptionParameters) === false)\r\n\t\t{\r\n\t\t\tconst keyIdentifierBuffer = new ArrayBuffer(16);\r\n\t\t\tconst keyIdentifierView = new Uint8Array(keyIdentifierBuffer);\r\n\t\t\tgetRandomValues(keyIdentifierView);\r\n\t\t\t\r\n\t\t\tencryptionParameters.keyIdentifier = keyIdentifierBuffer;\r\n\t\t}\r\n\t\t\r\n\t\tif((\"hmacHashAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.hmacHashAlgorithm = \"SHA-512\";\r\n\t\t\r\n\t\tif((\"iterationCount\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.iterationCount = 2048;\r\n\t\t\r\n\t\tif((\"keyEncryptionAlgorithm\" in encryptionParameters) === false)\r\n\t\t{\r\n\t\t\tencryptionParameters.keyEncryptionAlgorithm = {\r\n\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\tlength: 256\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tif((\"keyEncryptionAlgorithmParams\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.keyEncryptionAlgorithmParams = new asn1js.Null();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Add new recipient based on passed variant\r\n\t\tswitch(variant)\r\n\t\t{\r\n\t\t\tcase 1: // KEKRecipientInfo\r\n\t\t\t\t{\r\n\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst kekOID = getOIDByAlgorithm(encryptionParameters.keyEncryptionAlgorithm);\r\n\t\t\t\t\tif(kekOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Incorrect value for \\\"keyEncryptionAlgorithm\\\"\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region KEKRecipientInfo\r\n\t\t\t\t\tconst keyInfo = new KEKRecipientInfo({\r\n\t\t\t\t\t\tversion: 4,\r\n\t\t\t\t\t\tkekid: new KEKIdentifier({\r\n\t\t\t\t\t\t\tkeyIdentifier: new asn1js.OctetString({ valueHex: encryptionParameters.keyIdentifier })\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: kekOID,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t For AES-KW params are NULL, but for other algorithm could another situation.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: encryptionParameters.keyEncryptionAlgorithmParams\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tpreDefinedKEK: preDefinedData\r\n\t\t\t\t\t// \"encryptedKey\" would be set in \"ecrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 3,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: // PasswordRecipientinfo\r\n\t\t\t\t{\r\n\t\t\t\t\t//region keyDerivationAlgorithm\r\n\t\t\t\t\tconst pbkdf2OID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(pbkdf2OID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Can not find OID for PBKDF2\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Salt\r\n\t\t\t\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\t\t\tgetRandomValues(saltView);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region HMAC-based algorithm\r\n\t\t\t\t\tconst hmacOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\tname: encryptionParameters.hmacHashAlgorithm\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(hmacOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Incorrect value for \"hmacHashAlgorithm\": ${encryptionParameters.hmacHashAlgorithm}`);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region PBKDF2-params\r\n\t\t\t\t\tconst pbkdf2Params = new PBKDF2Params({\r\n\t\t\t\t\t\tsalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\t\t\t\titerationCount: encryptionParameters.iterationCount,\r\n\t\t\t\t\t\tprf: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hmacOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst kekOID = getOIDByAlgorithm(encryptionParameters.keyEncryptionAlgorithm);\r\n\t\t\t\t\tif(kekOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Incorrect value for \\\"keyEncryptionAlgorithm\\\"\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region PasswordRecipientinfo\r\n\t\t\t\t\tconst keyInfo = new PasswordRecipientinfo({\r\n\t\t\t\t\t\tversion: 0,\r\n\t\t\t\t\t\tkeyDerivationAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: pbkdf2OID,\r\n\t\t\t\t\t\t\talgorithmParams: pbkdf2Params.toSchema()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: kekOID,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t For AES-KW params are NULL, but for other algorithm could be another situation.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: encryptionParameters.keyEncryptionAlgorithmParams\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tpassword: preDefinedData\r\n\t\t\t\t\t// \"encryptedKey\" would be set in \"ecrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 4,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown value for \"variant\": ${variant}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Enveloped Data content with encrypted data\r\n\t * @param {Object} contentEncryptionAlgorithm WebCrypto algorithm. For the moment here could be only \"AES-CBC\" or \"AES-GCM\" algorithms.\r\n\t * @param {ArrayBuffer} contentToEncrypt Content to encrypt\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(contentEncryptionAlgorithm, contentToEncrypt)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\tgetRandomValues(ivView);\r\n\t\t\r\n\t\tconst contentView = new Uint8Array(contentToEncrypt);\r\n\t\t\r\n\t\tlet sessionKey;\r\n\t\tlet encryptedContent;\r\n\t\tlet exportedSessionKey;\r\n\t\t\r\n\t\tconst recipientsPromises = [];\r\n\t\t\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check for input parameters\r\n\t\tconst contentEncryptionOID = getOIDByAlgorithm(contentEncryptionAlgorithm);\r\n\t\tif(contentEncryptionOID === \"\")\r\n\t\t\treturn Promise.reject(\"Wrong \\\"contentEncryptionAlgorithm\\\" value\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Generate new content encryption key\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.generateKey(contentEncryptionAlgorithm, true, [\"encrypt\"]));\r\n\t\t//endregion\r\n\t\t//region Encrypt content\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tsessionKey = result;\r\n\t\t\t\r\n\t\t\treturn crypto.encrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tsessionKey,\r\n\t\t\tcontentView);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t//region Export raw content of content encryption key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Create output OCTETSTRING with encrypted content\r\n\t\t\tencryptedContent = result;\r\n\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\treturn crypto.exportKey(\"raw\", sessionKey);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t).then(result =>\r\n\t\t{\r\n\t\t\texportedSessionKey = result;\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t//region Append common information to CMS_ENVELOPED_DATA\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.version = 2;\r\n\t\t\tthis.encryptedContentInfo = new EncryptedContentInfo({\r\n\t\t\t\tcontentType: \"1.2.840.113549.1.7.1\", // \"data\"\r\n\t\t\t\tcontentEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: contentEncryptionOID,\r\n\t\t\t\t\talgorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\r\n\t\t\t\t}),\r\n\t\t\t\tencryptedContent: new asn1js.OctetString({ valueHex: encryptedContent })\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Special sub-functions to work with each recipient's type\r\n\t\tfunction SubKeyAgreeRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t\r\n\t\t\tlet ecdhPublicKey;\r\n\t\t\tlet ecdhPrivateKey;\r\n\t\t\t\r\n\t\t\tlet recipientCurve;\r\n\t\t\tlet recipientCurveLength;\r\n\t\t\t\r\n\t\t\tlet exportedECDHPublicKey;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get \"namedCurve\" parameter from recipient's certificate\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tconst curveObject = _this.recipientInfos[index].value.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\r\n\t\t\t\t\r\n\t\t\t\tif(curveObject.constructor.blockName() !== asn1js.ObjectIdentifier.blockName())\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"recipientCertificate\" for index ${index}`);\r\n\t\t\t\t\r\n\t\t\t\tconst curveOID = curveObject.valueBlock.toString();\r\n\t\t\t\t\r\n\t\t\t\tswitch(curveOID)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\t\t\trecipientCurve = \"P-256\";\r\n\t\t\t\t\t\trecipientCurveLength = 256;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\t\t\trecipientCurve = \"P-384\";\r\n\t\t\t\t\t\trecipientCurveLength = 384;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\t\t\trecipientCurve = \"P-521\";\r\n\t\t\t\t\t\trecipientCurveLength = 528;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect curve OID for index ${index}`);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn recipientCurve;\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Generate ephemeral ECDH key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.generateKey({\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tnamedCurve: result\r\n\t\t\t\t},\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"deriveBits\"]),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Export public key of ephemeral ECDH key pair\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\tecdhPublicKey = result.publicKey;\r\n\t\t\t\tecdhPrivateKey = result.privateKey;\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.exportKey(\"spki\", ecdhPublicKey);\r\n\t\t\t},\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import recipient's public key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\texportedECDHPublicKey = result;\r\n\t\t\t\t\r\n\t\t\t\treturn _this.recipientInfos[index].value.recipientCertificate.getPublicKey({\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Create shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(result => crypto.deriveBits({\r\n\t\t\t\tname: \"ECDH\",\r\n\t\t\t\tpublic: result\r\n\t\t\t},\r\n\t\t\tecdhPrivateKey,\r\n\t\t\trecipientCurveLength),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Apply KDF function to shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(\r\n\t\t\t\t/**\r\n\t\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t\t */\r\n\t\t\t\tresult =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get length of used AES-KW algorithm\r\n\t\t\t\t\tconst aesKWAlgorithm = new AlgorithmIdentifier({ schema: _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams });\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst KWalgorithm = getAlgorithmByOID(aesKWAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in KWalgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${aesKWAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Translate AES-KW length to ArrayBuffer\r\n\t\t\t\t\tlet kwLength = KWalgorithm.length;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst kwLengthBuffer = new ArrayBuffer(4);\r\n\t\t\t\t\tconst kwLengthView = new Uint8Array(kwLengthBuffer);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let j = 3; j >= 0; j--)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkwLengthView[j] = kwLength;\r\n\t\t\t\t\t\tkwLength >>= 8;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Create and encode \"ECC-CMS-SharedInfo\" structure\r\n\t\t\t\t\tconst eccInfo = new ECCCMSSharedInfo({\r\n\t\t\t\t\t\tkeyInfo: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: aesKWAlgorithm.algorithmId,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t Initially RFC5753 says that AES algorithms have absent parameters.\r\n\t\t\t\t\t\t\t But since early implementations all put NULL here. Thus, in order to be\r\n\t\t\t\t\t\t\t \"backward compatible\", index also put NULL here.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tentityUInfo: _this.recipientInfos[index].value.ukm,\r\n\t\t\t\t\t\tsuppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst encodedInfo = eccInfo.toSchema().toBER(false);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Get SHA algorithm used together with ECDH\r\n\t\t\t\t\tconst ecdhAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in ecdhAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn kdf(ecdhAlgorithm.kdf, result, KWalgorithm.length, encodedInfo);\r\n\t\t\t\t},\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Import AES-KW key from result of KDF function\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.importKey(\"raw\", result, { name: \"AES-KW\" }, true, [\"wrapKey\"]),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Finally wrap session key by using AES-KW algorithm\r\n\t\t\tcurrentSequence = currentSequence.then(result => crypto.wrapKey(\"raw\", sessionKey, result, { name: \"AES-KW\" }),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region OriginatorIdentifierOrKey\r\n\t\t\t\tconst asn1 = asn1js.fromBER(exportedECDHPublicKey);\r\n\t\t\t\t\t\r\n\t\t\t\tconst originator = new OriginatorIdentifierOrKey();\r\n\t\t\t\toriginator.variant = 3;\r\n\t\t\t\toriginator.value = new OriginatorPublicKey({ schema: asn1.result });\r\n\t\t\t\t// There is option when we can stay with ECParameters, but here index prefer to avoid the params\r\n\t\t\t\tif(\"algorithmParams\" in originator.value.algorithm)\r\n\t\t\t\t\tdelete originator.value.algorithm.algorithmParams;\r\n\t\t\t\t\t\r\n\t\t\t\t_this.recipientInfos[index].value.originator = originator;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t/*\r\n\t\t\t\t We will not support using of same ephemeral key for many recipients\r\n\t\t\t\t */\r\n\t\t\t\t_this.recipientInfos[index].value.recipientEncryptedKeys.encryptedKeys[0].encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn {ecdhPrivateKey};\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKeyTransRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get recipient's public key\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\t//region Check we have a correct algorithm here\r\n\t\t\t\tconst oaepOID = getOIDByAlgorithm({\r\n\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t});\r\n\t\t\t\tif(oaepOID === \"\")\r\n\t\t\t\t\tthrow new Error(\"Can not find OID for OAEP\");\r\n\r\n\t\t\t\tif(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId !== oaepOID)\r\n\t\t\t\t\tthrow new Error(\"Not supported encryption scheme, only RSA-OAEP is supported for key transport encryption scheme\");\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Get current used SHA algorithm\r\n\t\t\t\tconst schema = _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams;\r\n\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({ schema });\r\n\t\t\t\t\r\n\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn _this.recipientInfos[index].value.recipientCertificate.getPublicKey({\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\tname: hashAlgorithm.name\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"encrypt\", \"wrapKey\"]\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Encrypt early exported session key on recipient's public key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.encrypt(result.algorithm, result, exportedSessionKey),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKEKRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import KEK from pre-defined data\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tnew Uint8Array(_this.recipientInfos[index].value.preDefinedKEK),\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"wrapKey\"]); // Too specific for AES-KW\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Wrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.wrapKey(\"raw\", sessionKey, result, kekAlgorithm),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubPasswordRecipientinfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet pbkdf2Params;\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that we have encoded \"keyDerivationAlgorithm\" plus \"PBKDF2_params\" in there\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"keyDerivationAlgorithm\" in _this.recipientInfos[index].value) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.keyDerivationAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpbkdf2Params = new PBKDF2Params({ schema: _this.recipientInfos[index].value.keyDerivationAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tconst passwordView = new Uint8Array(_this.recipientInfos[index].value.password);\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tpasswordView,\r\n\t\t\t\t\t\"PBKDF2\",\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\t[\"deriveKey\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive key for \"keyEncryptionAlgorithm\"\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get HMAC hash algorithm\r\n\t\t\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\t\t\t\t\t\r\n\t\t\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst algorithm = getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get PBKDF2 \"salt\" value\r\n\t\t\t\tconst saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t//region Get PBKDF2 iterations count\r\n\t\t\t\tconst iterations = pbkdf2Params.iterationCount;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.deriveKey({\r\n\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsalt: saltView,\r\n\t\t\t\t\titerations\r\n\t\t\t\t},\r\n\t\t\t\tresult,\r\n\t\t\t\tkekAlgorithm,\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"wrapKey\"]); // Usages are too specific for KEK algorithm\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Wrap previously exported session key (Also too specific for KEK algorithm)\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.wrapKey(\"raw\", sessionKey, result, kekAlgorithm),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create special routines for each \"recipient\"\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tfor(let i = 0; i < this.recipientInfos.length; i++)\r\n\t\t\t{\r\n\t\t\t\t//region Initial variables\r\n\t\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\tswitch(this.recipientInfos[i].variant)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 1: // KeyTransRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKeyTransRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2: // KeyAgreeRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKeyAgreeRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3: // KEKRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKEKRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 4: // PasswordRecipientinfo\r\n\t\t\t\t\t\tcurrentSequence = SubPasswordRecipientinfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Uknown recipient type in array with index ${i}`);\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\trecipientsPromises.push(currentSequence);\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\treturn Promise.all(recipientsPromises);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Decrypt existing CMS Enveloped Data content\r\n\t * @param {number} recipientIndex Index of recipient\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tdecrypt(recipientIndex, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst decryptionParameters = parameters || {};\r\n\t\t\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check for input parameters\r\n\t\tif((recipientIndex + 1) > this.recipientInfos.length)\r\n\t\t\treturn Promise.reject(`Maximum value for \"index\" is: ${this.recipientInfos.length - 1}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Special sub-functions to work with each recipient's type\r\n\t\tfunction SubKeyAgreeRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t\r\n\t\t\tlet recipientCurve;\r\n\t\t\tlet recipientCurveLength;\r\n\t\t\t\r\n\t\t\tlet curveOID;\r\n\t\t\t\r\n\t\t\tlet ecdhPrivateKey;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get \"namedCurve\" parameter from recipient's certificate\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"recipientCertificate\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientCertificate\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"recipientPrivateKey\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tconst curveObject = decryptionParameters.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\tif(curveObject.constructor.blockName() !== asn1js.ObjectIdentifier.blockName())\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"recipientCertificate\" for index ${index}`);\r\n\t\t\t\tcurveOID = curveObject.valueBlock.toString();\r\n\t\t\t\t\t\r\n\t\t\t\tswitch(curveOID)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\t\t\trecipientCurve = \"P-256\";\r\n\t\t\t\t\t\trecipientCurveLength = 256;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\t\t\trecipientCurve = \"P-384\";\r\n\t\t\t\t\t\trecipientCurveLength = 384;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\t\t\trecipientCurve = \"P-521\";\r\n\t\t\t\t\t\trecipientCurveLength = 528;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect curve OID for index ${index}`);\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"pkcs8\",\r\n\t\t\t\t\tdecryptionParameters.recipientPrivateKey,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"deriveBits\"]\r\n\t\t\t\t);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import sender's ephemeral public key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\tecdhPrivateKey = result;\r\n\t\t\t\t\t\r\n\t\t\t\t//region Change \"OriginatorPublicKey\" if \"curve\" parameter absent\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.originator.value.algorithm) === false)\r\n\t\t\t\t\t_this.recipientInfos[index].value.originator.value.algorithm.algorithmParams = new asn1js.ObjectIdentifier({ value: curveOID });\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Create ArrayBuffer with sender's public key\r\n\t\t\t\tconst buffer = _this.recipientInfos[index].value.originator.value.toSchema().toBER(false);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"spki\",\r\n\t\t\t\t\tbuffer,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Create shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.deriveBits({\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tpublic: result\r\n\t\t\t\t},\r\n\t\t\t\tecdhPrivateKey,\r\n\t\t\t\trecipientCurveLength),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Apply KDF function to shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(\r\n\t\t\t\t/**\r\n\t\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t\t */\r\n\t\t\t\tresult =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get length of used AES-KW algorithm\r\n\t\t\t\t\tconst aesKWAlgorithm = new AlgorithmIdentifier({ schema: _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams });\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst KWalgorithm = getAlgorithmByOID(aesKWAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in KWalgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${aesKWAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Translate AES-KW length to ArrayBuffer\r\n\t\t\t\t\tlet kwLength = KWalgorithm.length;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst kwLengthBuffer = new ArrayBuffer(4);\r\n\t\t\t\t\tconst kwLengthView = new Uint8Array(kwLengthBuffer);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let j = 3; j >= 0; j--)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkwLengthView[j] = kwLength;\r\n\t\t\t\t\t\tkwLength >>= 8;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Create and encode \"ECC-CMS-SharedInfo\" structure\r\n\t\t\t\t\tconst eccInfo = new ECCCMSSharedInfo({\r\n\t\t\t\t\t\tkeyInfo: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: aesKWAlgorithm.algorithmId,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t Initially RFC5753 says that AES algorithms have absent parameters.\r\n\t\t\t\t\t\t\t But since early implementations all put NULL here. Thus, in order to be\r\n\t\t\t\t\t\t\t \"backward compatible\", index also put NULL here.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tentityUInfo: _this.recipientInfos[index].value.ukm,\r\n\t\t\t\t\t\tsuppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst encodedInfo = eccInfo.toSchema().toBER(false);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Get SHA algorithm used together with ECDH\r\n\t\t\t\t\tconst ecdhAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in ecdhAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\treturn kdf(ecdhAlgorithm.kdf, result, KWalgorithm.length, encodedInfo);\r\n\t\t\t\t},\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import AES-KW key from result of KDF function\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.importKey(\"raw\",\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\t{ name: \"AES-KW\" },\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"unwrapKey\"]),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Finally unwrap session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t_this.recipientInfos[index].value.recipientEncryptedKeys.encryptedKeys[0].encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\t{ name: \"AES-KW\" },\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKeyTransRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import recipient's private key\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"recipientPrivateKey\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyTransRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\t//region Get current used SHA algorithm\r\n\t\t\t\tconst schema = _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams;\r\n\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({ schema });\r\n\t\t\t\t\t\r\n\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"pkcs8\",\r\n\t\t\t\t\tdecryptionParameters.recipientPrivateKey,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\tname: hashAlgorithm.name\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Decrypt encrypted session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.decrypt(result.algorithm,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex\r\n\t\t\t\t), error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import decrypted session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]\r\n\t\t\t\t);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKEKRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import KEK from pre-defined data\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"preDefinedData\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tdecryptionParameters.preDefinedData,\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"unwrapKey\"]); // Too specific for AES-KW\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Unwrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubPasswordRecipientinfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet pbkdf2Params;\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"preDefinedData\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"keyDerivationAlgorithm\" in _this.recipientInfos[index].value) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.keyDerivationAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpbkdf2Params = new PBKDF2Params({ schema: _this.recipientInfos[index].value.keyDerivationAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tdecryptionParameters.preDefinedData,\r\n\t\t\t\t\t\"PBKDF2\",\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\t[\"deriveKey\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive key for \"keyEncryptionAlgorithm\"\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get HMAC hash algorithm\r\n\t\t\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\t\t\t\t\t\r\n\t\t\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst algorithm = getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get PBKDF2 \"salt\" value\r\n\t\t\t\tconst saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t//region Get PBKDF2 iterations count\r\n\t\t\t\tconst iterations = pbkdf2Params.iterationCount;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.deriveKey({\r\n\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsalt: saltView,\r\n\t\t\t\t\titerations\r\n\t\t\t\t},\r\n\t\t\t\tresult,\r\n\t\t\t\tkekAlgorithm,\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"unwrapKey\"]); // Usages are too specific for KEK algorithm\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Unwrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Perform steps, specific to each type of session key encryption\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\tswitch(this.recipientInfos[recipientIndex].variant)\r\n\t\t\t{\r\n\t\t\t\tcase 1: // KeyTransRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKeyTransRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2: // KeyAgreeRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKeyAgreeRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3: // KEKRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKEKRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4: // PasswordRecipientinfo\r\n\t\t\t\t\tcurrentSequence = SubPasswordRecipientinfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn Promise.reject(`Uknown recipient type in array with index ${recipientIndex}`);\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Finally decrypt data by session key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get \"intialization vector\" for content encryption algorithm\r\n\t\t\tconst ivBuffer = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams.valueBlock.valueHex;\r\n\t\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Create correct data block for decryption\r\n\t\t\tlet dataBuffer = new ArrayBuffer(0);\r\n\t\t\t\t\r\n\t\t\tif(this.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\tdataBuffer = this.encryptedContentInfo.encryptedContent.valueBlock.valueHex;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor(const content of this.encryptedContentInfo.encryptedContent.valueBlock.value)\r\n\t\t\t\t\tdataBuffer = utilConcatBuf(dataBuffer, content.valueBlock.valueHex);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\treturn crypto.decrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tdataBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}