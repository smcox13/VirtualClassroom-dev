{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _weakMap = require('babel-runtime/core-js/weak-map');\n\nvar _weakMap2 = _interopRequireDefault(_weakMap);\n\nvar _omit2 = require('lodash/omit');\n\nvar _omit3 = _interopRequireDefault(_omit2);\n\nvar _dec, _desc, _value, _obj;\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar _querystring = require('querystring');\n\nvar _querystring2 = _interopRequireDefault(_querystring);\n\nvar _util = require('util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _commonTimers = require('@webex/common-timers');\n\nvar _common = require('@webex/common');\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _nodeKms = require('node-kms');\n\nvar _nodeJose = require('node-jose');\n\nvar _nodeJose2 = _interopRequireDefault(_nodeJose);\n\nvar _kmsBatcher = require('./kms-batcher');\n\nvar _kmsBatcher2 = _interopRequireDefault(_kmsBatcher);\n\nvar _kmsCertificateValidation = require('./kms-certificate-validation');\n\nvar _kmsCertificateValidation2 = _interopRequireDefault(_kmsCertificateValidation);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\nvar contexts = new _weakMap2.default();\nvar kmsDetails = new _weakMap2.default();\nvar partialContexts = new _weakMap2.default();\n\nvar consoleDebug = require('debug')('kms');\n/**\n * @class\n */\n\n\nvar KMS = _webexCore.WebexPlugin.extend((_dec = (0, _common.oneFlight)({\n  keyFactory: function keyFactory(_ref) {\n    var uri = _ref.uri,\n        onBehalfOf = _ref.onBehalfOf;\n    return uri + '/' + onBehalfOf;\n  }\n}), (_obj = {\n  namespace: 'Encryption',\n  children: {\n    batcher: _kmsBatcher2.default\n  },\n\n  /**\n   * Binds a key to a resource\n   * @param {Object} options\n   * @param {KMSResourceObject} options.kro\n   * @param {string} options.kroUri\n   * @param {Key} options.key\n   * @param {string} options.keyUri\n   * @returns {Promise<Key>}\n   */\n  bindKey: function bindKey(_ref2) {\n    var _this = this;\n\n    var kro = _ref2.kro,\n        kroUri = _ref2.kroUri,\n        key = _ref2.key,\n        keyUri = _ref2.keyUri;\n    kroUri = kroUri || kro.uri;\n    keyUri = keyUri || key.uri;\n    this.logger.info('kms: binding key to resource');\n    /* istanbul ignore if */\n\n    if (!kroUri) {\n      return _promise2.default.reject(new Error('`kro` or `kroUri` is required'));\n    }\n    /* istanbul ignore if */\n\n\n    if (!keyUri) {\n      return _promise2.default.reject(new Error('`key` or `keyUri` is required'));\n    }\n\n    return this.request({\n      method: 'update',\n      resourceUri: kroUri,\n      uri: keyUri\n    }).then(function (res) {\n      _this.logger.info('kms: bound key to resource');\n\n      return res.key;\n    });\n  },\n\n  /**\n   * Creates a new KMS Resource\n   * @param {Object} options\n   * @param {Array<string>} options.userIds\n   * @param {Array<string>} options.keyUris\n   * @param {Key} options.key\n   * @param {Array<Keys>} options.keys\n   * @returns {Promise<KMSResourceObject>}\n   */\n  createResource: function createResource(_ref3) {\n    var _this2 = this;\n\n    var userIds = _ref3.userIds,\n        keyUris = _ref3.keyUris,\n        key = _ref3.key,\n        keys = _ref3.keys;\n    keyUris = keyUris || [];\n    /* istanbul ignore if */\n\n    if (keys) {\n      keyUris = keys.reduce(function (uris, k) {\n        uris.push(k.uri);\n        return uris;\n      }, keyUris);\n    }\n    /* istanbul ignore else */\n\n\n    if (key) {\n      keyUris.push(key.uri);\n    }\n    /* istanbul ignore if */\n\n\n    if (keyUris.length === 0) {\n      return _promise2.default.reject(new Error('Cannot create KMS Resource without at least one keyUri'));\n    }\n\n    this.logger.info('kms: creating resource');\n    return this.request({\n      method: 'create',\n      uri: '/resources',\n      userIds: userIds,\n      keyUris: keyUris\n    }).then(function (res) {\n      _this2.logger.info('kms: created resource');\n\n      return res.resource;\n    });\n  },\n\n  /**\n   * Authorizes a user or KRO to a KRO\n   * @param {Object} options\n   * @param {Array<string>} options.userIds\n   * @param {Array<string>} options.authIds interchangable with userIds\n   * @param {KMSResourceObject} options.kro the target kro\n   * @param {string} options.kroUri\n   * @returns {Promise<KMSAuthorizationObject>}\n   */\n  addAuthorization: function addAuthorization(_ref4) {\n    var _this3 = this;\n\n    var userIds = _ref4.userIds,\n        authIds = _ref4.authIds,\n        kro = _ref4.kro,\n        kroUri = _ref4.kroUri;\n    userIds = userIds || [];\n    kroUri = kroUri || kro.uri;\n\n    if (authIds) {\n      userIds = userIds.concat(authIds);\n    }\n    /* istanbul ignore if */\n\n\n    if (userIds.length === 0) {\n      return _promise2.default.reject(new Error('Cannot add authorization without userIds or authIds'));\n    }\n    /* istanbul ignore if */\n\n\n    if (!kroUri) {\n      return _promise2.default.reject(new Error('`kro` or `kroUri` is required'));\n    }\n\n    this.logger.info('kms: adding authorization to kms resource');\n    return this.request({\n      method: 'create',\n      uri: '/authorizations',\n      resourceUri: kroUri,\n      userIds: userIds\n    }).then(function (res) {\n      _this3.logger.info('kms: added authorization');\n\n      return res.authorizations;\n    });\n  },\n\n  /**\n   * Retrieve a list of users that have been authorized to the KRO\n   * @param {Object} options\n   * @param {KMSResourceObject} options.kro the target kro\n   * @param {string} options.kroUri\n   * @returns {Array<authId>}\n   */\n  listAuthorizations: function listAuthorizations(_ref5) {\n    var _this4 = this;\n\n    var kro = _ref5.kro,\n        kroUri = _ref5.kroUri;\n    kroUri = kroUri || kro.uri;\n    /* istanbul ignore if */\n\n    if (!kroUri) {\n      return _promise2.default.reject(new Error('`kro` or `kroUri` is required'));\n    }\n\n    return this.request({\n      method: 'retrieve',\n      uri: kroUri + '/authorizations'\n    }).then(function (res) {\n      _this4.logger.info('kms: retrieved authorization list');\n\n      return res.authorizations;\n    });\n  },\n\n  /**\n   * Deauthorizes a user or KRO from a KRO\n   * @param {Object} options\n   * @param {string} options.userId\n   * @param {string} options.authId interchangable with userIds\n   * @param {KMSResourceObject} options.kro the target kro\n   * @param {string} options.kroUri\n   * @returns {Promise<KMSAuthorizationObject>}\n   */\n  removeAuthorization: function removeAuthorization(_ref6) {\n    var _this5 = this;\n\n    var authId = _ref6.authId,\n        userId = _ref6.userId,\n        kro = _ref6.kro,\n        kroUri = _ref6.kroUri;\n    authId = authId || userId;\n    kroUri = kroUri || kro.uri;\n    /* istanbul ignore if */\n\n    if (!authId) {\n      return _promise2.default.reject(new Error('Cannot remove authorization without authId'));\n    }\n    /* istanbul ignore if */\n\n\n    if (!kroUri) {\n      return _promise2.default.reject(new Error('`kro` or `kroUri` is required'));\n    }\n\n    this.logger.info('kms: removing authorization from kms resource');\n    return this.request({\n      method: 'delete',\n      uri: kroUri + '/authorizations?' + _querystring2.default.stringify({\n        authId: authId\n      })\n    }).then(function (res) {\n      _this5.logger.info('kms: removed authorization');\n\n      return res.authorizations;\n    });\n  },\n\n  /**\n   * Requests `count` unbound keys from the kms\n   * @param {Object} options\n   * @param {Number} options.count\n   * @returns {Array<Key>}\n   */\n  createUnboundKeys: function createUnboundKeys(_ref7) {\n    var _this6 = this;\n\n    var count = _ref7.count;\n    this.logger.info('kms: request ' + count + ' unbound keys');\n    /* istanbul ignore if */\n\n    if (!count) {\n      return _promise2.default.reject(new Error('`options.count` is required'));\n    }\n\n    return this.request({\n      method: 'create',\n      uri: '/keys',\n      count: count\n    }).then(function (res) {\n      _this6.logger.info('kms: received unbound keys');\n\n      return _promise2.default.all(res.keys.map(_this6.asKey));\n    });\n  },\n  fetchKey: function fetchKey(_ref8) {\n    var _this7 = this;\n\n    var uri = _ref8.uri,\n        onBehalfOf = _ref8.onBehalfOf;\n    /* istanbul ignore if */\n\n    if (!uri) {\n      return _promise2.default.reject(new Error('`options.uri` is required'));\n    }\n\n    this.logger.info('kms: fetching key');\n    return this.request({\n      method: 'retrieve',\n      uri: uri\n    }, {\n      onBehalfOf: onBehalfOf\n    }).then(function (res) {\n      _this7.logger.info('kms: fetched key');\n\n      return _this7.asKey(res.key);\n    });\n  },\n\n  /**\n   * Pings the kms. Mostly for testing\n   * @returns {Promise}\n   */\n  ping: function ping() {\n    return this.request({\n      method: 'update',\n      uri: '/ping'\n    });\n  },\n\n  /**\n   * Ensures a key obect is Key instance\n   * @param {Object} key\n   * @returns {Promise<Key>}\n   */\n  asKey: function asKey(key) {\n    return _nodeJose2.default.JWK.asKey(key.jwk).then(function (jwk) {\n      key.jwk = jwk;\n      return key;\n    });\n  },\n\n  /**\n   * Adds appropriate metadata to the KMS request\n   * @param {Object} payload\n   * @param {Object} onBehalfOf Optional parameter to prepare the request on behalf of another user\n   * @returns {Promise<KMS.Request>}\n   */\n  prepareRequest: function prepareRequest(payload, onBehalfOf) {\n    var _this8 = this;\n\n    var isECDHRequest = payload.method === 'create' && payload.uri.includes('/ecdhe');\n    return _promise2.default.resolve(isECDHRequest ? partialContexts.get(this) : this._getContext()).then(function (context) {\n      _this8.logger.info('kms: wrapping ' + (isECDHRequest ? 'ephemeral key' : 'kms') + ' request');\n\n      var req = new _nodeKms.Request(payload);\n      var requestContext = context;\n\n      if (onBehalfOf) {\n        requestContext = _this8._contextOnBehalfOf(context, onBehalfOf);\n      }\n\n      return req.wrap(requestContext, {\n        serverKey: isECDHRequest\n      }).then(function () {\n        /* istanbul ignore else */\n        if (process.env.NODE_ENV !== 'production') {\n          _this8.logger.info('kms: request payload', _util2.default.inspect((0, _omit3.default)(JSON.parse((0, _stringify2.default)(req)), 'wrapped'), {\n            depth: null\n          }));\n        }\n\n        return req;\n      });\n    });\n  },\n\n  /**\n   * Accepts a kms message event, decrypts it, and passes it to the batcher\n   * @param {Object} event\n   * @returns {Promise<Object>}\n   */\n  processKmsMessageEvent: function processKmsMessageEvent(event) {\n    var _this9 = this;\n\n    this.logger.info('kms: received kms message');\n    return _promise2.default.all(event.encryption.kmsMessages.map(function (kmsMessage, index) {\n      return _this9._isECDHEMessage(kmsMessage).then(function (isECDHMessage) {\n        _this9.logger.info('kms: received ' + (isECDHMessage ? 'ecdhe' : 'normal') + ' message');\n\n        var res = new _nodeKms.Response(kmsMessage);\n        return _promise2.default.resolve(isECDHMessage ? partialContexts.get(_this9) : contexts.get(_this9)) // eslint-disable-next-line max-nested-callbacks\n        .then(function (context) {\n          return res.unwrap(context);\n        }) // eslint-disable-next-line max-nested-callbacks\n        .then(function () {\n          if (process.env.NODE_ENV !== 'production') {\n            _this9.logger.info('kms: response payload', _util2.default.inspect((0, _omit3.default)(JSON.parse((0, _stringify2.default)(res)), 'wrapped'), {\n              depth: null\n            }));\n          }\n        }) // eslint-disable-next-line max-nested-callbacks\n        .then(function () {\n          event.encryption.kmsMessages[index] = res;\n        }) // eslint-disable-next-line max-nested-callbacks\n        .then(function () {\n          return res;\n        });\n      });\n    })).then(function () {\n      return _this9.batcher.processKmsMessageEvent(event);\n    }).catch(function (reason) {\n      _this9.logger.error('kms: decrypt failed', reason.stack);\n\n      return _promise2.default.reject(reason);\n    }).then(function () {\n      return event;\n    });\n  },\n\n  /**\n   * Decrypts a kms message\n   * @param {Object} kmsMessage\n   * @returns {Promise<Object>}\n   */\n  decryptKmsMessage: function decryptKmsMessage(kmsMessage) {\n    var res = new _nodeKms.Response(kmsMessage);\n    return contexts.get(this).then(function (context) {\n      return res.unwrap(context);\n    }).then(function () {\n      return res.body;\n    });\n  },\n\n  /**\n   * Determines if the kms message is an ecdhe message or a normal message\n   * @param {Object} kmsMessage\n   * @returns {Promise<boolean>}\n   */\n  _isECDHEMessage: function _isECDHEMessage(kmsMessage) {\n    return this._getKMSStaticPubKey().then(function (kmsStaticPubKey) {\n      var fields = kmsMessage.split('.');\n\n      if (fields.length !== 3) {\n        return false;\n      }\n\n      var header = JSON.parse(_nodeJose2.default.util.base64url.decode(fields[0]));\n      return header.kid === kmsStaticPubKey.kid;\n    });\n  },\n\n  /**\n   * Sends a request to the kms\n   * @param {Object} payload\n   * @param {Object} options\n   * @param {Number} options.timeout (internal)\n   * @param {string} options.onBehalfOf Run the request on behalf of another user (UUID), used in compliance scenarios\n   * @returns {Promise<Object>}\n   */\n  request: function request(payload) {\n    var _this10 = this;\n\n    var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        timeout = _ref9.timeout,\n        onBehalfOf = _ref9.onBehalfOf;\n\n    timeout = timeout || this.config.kmsInitialTimeout; // Note: this should only happen when we're using the async kms batcher;\n    // once we implement the sync batcher, this'll need to be smarter.\n\n    return this.webex.internal.mercury.connect().then(function () {\n      return _this10.prepareRequest(payload, onBehalfOf);\n    }).then(function (req) {\n      req[_kmsBatcher.TIMEOUT_SYMBOL] = timeout;\n      return _this10.batcher.request(req);\n    }) // High complexity is due to attempt at test mode resiliency\n    // eslint-disable-next-line complexity\n    .catch(function (reason) {\n      if (process.env.NODE_ENV === 'test' && (reason.status === 403 || reason.statusCode === 403) && reason.message.match(/Failed to resolve authorization token in KmsMessage request for user/)) {\n        _this10.logger.warn('kms: rerequested key due to test-mode kms auth failure');\n\n        return _this10.request(payload, {\n          onBehalfOf: onBehalfOf\n        });\n      } // KMS Error. Notify the user\n\n\n      if (reason instanceof _kmsCertificateValidation.KMSError) {\n        _this10.webex.trigger('client:InvalidRequestError');\n\n        return _promise2.default.reject(reason);\n      } // Ideally, most or all of the code below would go in kms-batcher, but\n      // but batching needs at least one more round of refactoring for that to\n      // work.\n\n\n      if (!reason.statusCode && !reason.status) {\n        /* istanbul ignore else */\n        if (process.env.NODE_ENV !== 'production') {\n          /* istanbul ignore next: reason.stack vs stack difficult to control in test */\n          _this10.logger.info('kms: request error', reason.stack || reason);\n        }\n\n        consoleDebug('timeout ' + timeout);\n        timeout *= 2;\n\n        if (timeout >= _this10.config.ecdhMaxTimeout) {\n          _this10.logger.info('kms: exceeded maximum KMS request retries');\n\n          return _promise2.default.reject(reason);\n        } // Peek ahead to make sure we don't reset the timeout if the next timeout\n        // will exceed the maximum timeout for renegotiating ECDH keys.\n\n\n        var nextTimeout = timeout * 2;\n\n        if (timeout >= _this10.config.kmsMaxTimeout && nextTimeout < _this10.config.ecdhMaxTimeout) {\n          _this10.logger.info('kms: exceeded maximum KMS request retries; negotiating new ecdh key');\n          /* istanbul ignore else */\n\n\n          if (process.env.NODE_ENV !== 'production') {\n            _this10.logger.info('kms: timeout/maxtimeout', timeout, _this10.config.kmsMaxTimeout);\n          }\n\n          contexts.delete(_this10);\n          timeout = 0;\n        }\n\n        return _this10.request(payload, {\n          timeout: timeout,\n          onBehalfOf: onBehalfOf\n        });\n      }\n\n      return _promise2.default.reject(reason);\n    });\n  },\n\n  /**\n   * @private\n   * @returns {Promise<string>}\n   */\n  _getAuthorization: function _getAuthorization() {\n    return this.webex.credentials.getUserToken('spark:kms').then(function (token) {\n      return token.access_token;\n    });\n  },\n\n  /**\n   * @private\n   * @param {String} onBehalfOf create context on behalf of another user, undefined when this is not necessary\n   * @returns {Promise<Object>}\n   */\n  _getContext: function _getContext() {\n    var _this11 = this;\n\n    var promise = contexts.get(this);\n\n    if (!promise) {\n      promise = this._prepareContext();\n      contexts.set(this, promise);\n      promise.then(function (context) {\n        var expiresIn = context.ephemeralKey.expirationDate - Date.now() - 30000;\n        (0, _commonTimers.safeSetTimeout)(function () {\n          return contexts.delete(_this11);\n        }, expiresIn);\n      });\n    }\n\n    return _promise2.default.all([promise, this._getAuthorization()]).then(function (_ref10) {\n      var _ref11 = (0, _slicedToArray3.default)(_ref10, 2),\n          context = _ref11[0],\n          authorization = _ref11[1];\n\n      context.clientInfo.credential.bearer = authorization;\n      return context;\n    });\n  },\n\n  /**\n   * @private\n   * @returns {Promise<Object>}\n   */\n  _getKMSCluster: function _getKMSCluster() {\n    this.logger.info('kms: retrieving KMS cluster');\n    return this._getKMSDetails().then(function (_ref12) {\n      var kmsCluster = _ref12.kmsCluster;\n      return kmsCluster;\n    });\n  },\n\n  /**\n   * @private\n   * @returns {Promise<Object>}\n   */\n  _getKMSDetails: function _getKMSDetails() {\n    var _this12 = this;\n\n    var details = kmsDetails.get(this);\n\n    if (!details) {\n      this.logger.info('kms: fetching KMS details');\n      details = this.webex.request({\n        service: 'encryption',\n        resource: '/kms/' + this.webex.internal.device.userId\n      }).then(function (res) {\n        _this12.logger.info('kms: fetched KMS details');\n\n        var body = res.body;\n        body.rsaPublicKey = JSON.parse(body.rsaPublicKey);\n        return body;\n      }).catch(function (reason) {\n        _this12.logger.error('kms: failed to fetch KMS details', reason);\n\n        return _promise2.default.reject(reason);\n      });\n      kmsDetails.set(this, details);\n    }\n\n    return details;\n  },\n\n  /**\n   * @private\n   * @returns {Promise<Object>}\n   */\n  _getKMSStaticPubKey: function _getKMSStaticPubKey() {\n    this.logger.info('kms: retrieving KMS static public key');\n    return this._getKMSDetails().then(function (_ref13) {\n      var rsaPublicKey = _ref13.rsaPublicKey;\n      return rsaPublicKey;\n    });\n  },\n\n  /**\n   * @private\n   * @returns {Promise<Object>}\n   */\n  _prepareContext: function _prepareContext() {\n    var _this13 = this;\n\n    this.logger.info('kms: creating context');\n    var context = new _nodeKms.Context();\n    return _promise2.default.all([this._getKMSStaticPubKey().then((0, _kmsCertificateValidation2.default)(this.config.caroots)), this._getAuthorization()]).then(function (_ref14) {\n      var _ref15 = (0, _slicedToArray3.default)(_ref14, 2),\n          kmsStaticPubKey = _ref15[0],\n          authorization = _ref15[1];\n\n      context.clientInfo = {\n        clientId: _this13.webex.internal.device.url,\n        credential: {\n          userId: _this13.webex.internal.device.userId,\n          bearer: authorization\n        }\n      };\n      context.serverInfo = {\n        key: kmsStaticPubKey\n      };\n\n      _this13.logger.info('kms: creating local ephemeral key');\n\n      return context.createECDHKey();\n    }).then(function (localECDHKey) {\n      context.ephemeralKey = localECDHKey;\n      partialContexts.set(_this13, context);\n      return _promise2.default.all([localECDHKey.asKey(), _this13._getKMSCluster()]);\n    }).then(function (_ref16) {\n      var _ref17 = (0, _slicedToArray3.default)(_ref16, 2),\n          localECDHKey = _ref17[0],\n          cluster = _ref17[1];\n\n      _this13.logger.info('kms: submitting ephemeral key request');\n\n      return _this13.request({\n        uri: cluster + '/ecdhe',\n        method: 'create',\n        jwk: localECDHKey.toJSON()\n      });\n    }).then(function (res) {\n      _this13.logger.info('kms: deriving final ephemeral key');\n\n      return context.deriveEphemeralKey(res.key);\n    }).then(function (key) {\n      context.ephemeralKey = key;\n      partialContexts.delete(_this13);\n\n      _this13.logger.info('kms: derived final ephemeral key');\n\n      return context;\n    }).catch(function (reason) {\n      _this13.logger.error('kms: failed to negotiate ephemeral key', reason);\n\n      return _promise2.default.reject(reason);\n    });\n  },\n\n  /**\n   * KMS 'retrieve' requests can be made on behalf of another user. This is useful\n   * for scenarios such as eDiscovery. i.e. Where an authorized compliance officer is\n   * entitled to retrieve content generated by any organisational user.\n   * As the KMSContext is cached, updating it will affect separate requests. Hence when\n   * making a request onBehalfOf another user create a new context for just this request.\n   * However this context will be 'light' as it only needs to change one field.\n   * @param {Object} originalContext - The base context to 'copy'\n   * @param {String} onBehalfOf - The user specified in the new context\n   * @returns {Context} A 'copy' of the existing context with a new user specified\n   * @private\n   */\n  _contextOnBehalfOf: function _contextOnBehalfOf(originalContext, onBehalfOf) {\n    var context = new _nodeKms.Context();\n    context.clientInfo = context.clientInfo = {\n      clientId: originalContext.clientInfo.clientId,\n      credential: {\n        userId: onBehalfOf,\n        bearer: originalContext.clientInfo.credential.bearer\n      }\n    };\n    context.serverInfo = originalContext.serverInfo;\n    context.ephemeralKey = originalContext.ephemeralKey;\n    return context;\n  },\n  version: '1.80.172'\n}, (_applyDecoratedDescriptor(_obj, 'fetchKey', [_dec], (0, _getOwnPropertyDescriptor2.default)(_obj, 'fetchKey'), _obj), _applyDecoratedDescriptor(_obj, '_getContext', [_common.oneFlight], (0, _getOwnPropertyDescriptor2.default)(_obj, '_getContext'), _obj)), _obj)));\n\nexports.default = KMS;","map":{"version":3,"sources":["kms.js"],"names":["contexts","kmsDetails","partialContexts","consoleDebug","require","KMS","namespace","children","batcher","KMSBatcher","bindKey","kro","kroUri","key","keyUri","method","resourceUri","uri","res","createResource","userIds","keyUris","keys","uris","k","addAuthorization","authIds","listAuthorizations","removeAuthorization","authId","userId","querystring","createUnboundKeys","count","keyFactory","onBehalfOf","fetchKey","ping","asKey","prepareRequest","isECDHRequest","payload","req","Request","requestContext","serverKey","process","util","JSON","depth","processKmsMessageEvent","isECDHMessage","Response","event","reason","decryptKmsMessage","_isECDHEMessage","fields","kmsMessage","header","jose","kmsStaticPubKey","request","timeout","TIMEOUT_SYMBOL","KMSError","nextTimeout","_getAuthorization","token","oneFlight","_getContext","promise","expiresIn","context","Date","authorization","_getKMSCluster","kmsCluster","_getKMSDetails","details","service","resource","body","_getKMSStaticPubKey","rsaPublicKey","_prepareContext","Context","clientId","credential","bearer","localECDHKey","cluster","jwk","_contextOnBehalfOf","originalContext"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport querystring from 'querystring';\nimport util from 'util';\n\nimport {safeSetTimeout} from '@webex/common-timers';\nimport {oneFlight} from '@webex/common';\nimport {WebexPlugin} from '@webex/webex-core';\nimport {Context, Request, Response} from 'node-kms';\nimport jose from 'node-jose';\nimport {omit} from 'lodash';\n\nimport KMSBatcher, {TIMEOUT_SYMBOL} from './kms-batcher';\nimport validateKMS, {KMSError} from './kms-certificate-validation';\n\nconst contexts = new WeakMap();\nconst kmsDetails = new WeakMap();\nconst partialContexts = new WeakMap();\n\nconst consoleDebug = require('debug')('kms');\n\n/**\n * @class\n */\nconst KMS = WebexPlugin.extend({\n  namespace: 'Encryption',\n\n  children: {\n    batcher: KMSBatcher\n  },\n\n  /**\n   * Binds a key to a resource\n   * @param {Object} options\n   * @param {KMSResourceObject} options.kro\n   * @param {string} options.kroUri\n   * @param {Key} options.key\n   * @param {string} options.keyUri\n   * @returns {Promise<Key>}\n   */\n  bindKey({\n    kro, kroUri, key, keyUri\n  }) {\n    kroUri = kroUri || kro.uri;\n    keyUri = keyUri || key.uri;\n\n    this.logger.info('kms: binding key to resource');\n\n    /* istanbul ignore if */\n    if (!kroUri) {\n      return Promise.reject(new Error('`kro` or `kroUri` is required'));\n    }\n\n    /* istanbul ignore if */\n    if (!keyUri) {\n      return Promise.reject(new Error('`key` or `keyUri` is required'));\n    }\n\n    return this.request({\n      method: 'update',\n      resourceUri: kroUri,\n      uri: keyUri\n    })\n      .then((res) => {\n        this.logger.info('kms: bound key to resource');\n\n        return res.key;\n      });\n  },\n\n  /**\n   * Creates a new KMS Resource\n   * @param {Object} options\n   * @param {Array<string>} options.userIds\n   * @param {Array<string>} options.keyUris\n   * @param {Key} options.key\n   * @param {Array<Keys>} options.keys\n   * @returns {Promise<KMSResourceObject>}\n   */\n  createResource({\n    userIds, keyUris, key, keys\n  }) {\n    keyUris = keyUris || [];\n    /* istanbul ignore if */\n    if (keys) {\n      keyUris = keys.reduce((uris, k) => {\n        uris.push(k.uri);\n\n        return uris;\n      }, keyUris);\n    }\n\n    /* istanbul ignore else */\n    if (key) {\n      keyUris.push(key.uri);\n    }\n\n    /* istanbul ignore if */\n    if (keyUris.length === 0) {\n      return Promise.reject(new Error('Cannot create KMS Resource without at least one keyUri'));\n    }\n\n    this.logger.info('kms: creating resource');\n\n    return this.request({\n      method: 'create',\n      uri: '/resources',\n      userIds,\n      keyUris\n    })\n      .then((res) => {\n        this.logger.info('kms: created resource');\n\n        return res.resource;\n      });\n  },\n\n  /**\n   * Authorizes a user or KRO to a KRO\n   * @param {Object} options\n   * @param {Array<string>} options.userIds\n   * @param {Array<string>} options.authIds interchangable with userIds\n   * @param {KMSResourceObject} options.kro the target kro\n   * @param {string} options.kroUri\n   * @returns {Promise<KMSAuthorizationObject>}\n   */\n  addAuthorization({\n    userIds, authIds, kro, kroUri\n  }) {\n    userIds = userIds || [];\n    kroUri = kroUri || kro.uri;\n\n    if (authIds) {\n      userIds = userIds.concat(authIds);\n    }\n\n    /* istanbul ignore if */\n    if (userIds.length === 0) {\n      return Promise.reject(new Error('Cannot add authorization without userIds or authIds'));\n    }\n\n    /* istanbul ignore if */\n    if (!kroUri) {\n      return Promise.reject(new Error('`kro` or `kroUri` is required'));\n    }\n\n    this.logger.info('kms: adding authorization to kms resource');\n\n    return this.request({\n      method: 'create',\n      uri: '/authorizations',\n      resourceUri: kroUri,\n      userIds\n    })\n      .then((res) => {\n        this.logger.info('kms: added authorization');\n\n        return res.authorizations;\n      });\n  },\n\n  /**\n   * Retrieve a list of users that have been authorized to the KRO\n   * @param {Object} options\n   * @param {KMSResourceObject} options.kro the target kro\n   * @param {string} options.kroUri\n   * @returns {Array<authId>}\n   */\n  listAuthorizations({kro, kroUri}) {\n    kroUri = kroUri || kro.uri;\n    /* istanbul ignore if */\n    if (!kroUri) {\n      return Promise.reject(new Error('`kro` or `kroUri` is required'));\n    }\n\n    return this.request({\n      method: 'retrieve',\n      uri: `${kroUri}/authorizations`\n    })\n      .then((res) => {\n        this.logger.info('kms: retrieved authorization list');\n\n        return res.authorizations;\n      });\n  },\n\n  /**\n   * Deauthorizes a user or KRO from a KRO\n   * @param {Object} options\n   * @param {string} options.userId\n   * @param {string} options.authId interchangable with userIds\n   * @param {KMSResourceObject} options.kro the target kro\n   * @param {string} options.kroUri\n   * @returns {Promise<KMSAuthorizationObject>}\n   */\n  removeAuthorization({\n    authId, userId, kro, kroUri\n  }) {\n    authId = authId || userId;\n    kroUri = kroUri || kro.uri;\n\n    /* istanbul ignore if */\n    if (!authId) {\n      return Promise.reject(new Error('Cannot remove authorization without authId'));\n    }\n\n    /* istanbul ignore if */\n    if (!kroUri) {\n      return Promise.reject(new Error('`kro` or `kroUri` is required'));\n    }\n\n    this.logger.info('kms: removing authorization from kms resource');\n\n    return this.request({\n      method: 'delete',\n      uri: `${kroUri}/authorizations?${querystring.stringify({authId})}`\n    })\n      .then((res) => {\n        this.logger.info('kms: removed authorization');\n\n        return res.authorizations;\n      });\n  },\n\n  /**\n   * Requests `count` unbound keys from the kms\n   * @param {Object} options\n   * @param {Number} options.count\n   * @returns {Array<Key>}\n   */\n  createUnboundKeys({count}) {\n    this.logger.info(`kms: request ${count} unbound keys`);\n\n    /* istanbul ignore if */\n    if (!count) {\n      return Promise.reject(new Error('`options.count` is required'));\n    }\n\n    return this.request({\n      method: 'create',\n      uri: '/keys',\n      count\n    })\n      .then((res) => {\n        this.logger.info('kms: received unbound keys');\n\n        return Promise.all(res.keys.map(this.asKey));\n      });\n  },\n\n  /**\n   * Fetches the specified key from the kms\n   * @param {Object} options\n   * @param {string} options.uri\n   * @param {string} options.onBehalfOf The id of a user, upon whose behalf, the key is to be retrieved or undefined if retrieval is for the active user\n   * @returns {Promise<Key>}\n   */\n  // Ideally, this would be done via the kms batcher, but other than request id,\n  // there isn't any other userful key in a kms response to match it to a\n  // request. as such, we need the batcher to group requests, but one flight to\n  // make sure we don't make the same request multiple times.\n  @oneFlight({\n    keyFactory: ({uri, onBehalfOf}) => `${uri}/${onBehalfOf}`\n  })\n  fetchKey({uri, onBehalfOf}) {\n    /* istanbul ignore if */\n    if (!uri) {\n      return Promise.reject(new Error('`options.uri` is required'));\n    }\n\n    this.logger.info('kms: fetching key');\n\n    return this.request({\n      method: 'retrieve',\n      uri\n    }, {onBehalfOf})\n      .then((res) => {\n        this.logger.info('kms: fetched key');\n\n        return this.asKey(res.key);\n      });\n  },\n\n  /**\n   * Pings the kms. Mostly for testing\n   * @returns {Promise}\n   */\n  ping() {\n    return this.request({\n      method: 'update',\n      uri: '/ping'\n    });\n  },\n\n  /**\n   * Ensures a key obect is Key instance\n   * @param {Object} key\n   * @returns {Promise<Key>}\n   */\n  asKey(key) {\n    return jose.JWK.asKey(key.jwk)\n      .then((jwk) => {\n        key.jwk = jwk;\n\n        return key;\n      });\n  },\n\n  /**\n   * Adds appropriate metadata to the KMS request\n   * @param {Object} payload\n   * @param {Object} onBehalfOf Optional parameter to prepare the request on behalf of another user\n   * @returns {Promise<KMS.Request>}\n   */\n  prepareRequest(payload, onBehalfOf) {\n    const isECDHRequest = payload.method === 'create' && payload.uri.includes('/ecdhe');\n\n    return Promise.resolve(isECDHRequest ? partialContexts.get(this) : this._getContext())\n      .then((context) => {\n        this.logger.info(`kms: wrapping ${isECDHRequest ? 'ephemeral key' : 'kms'} request`);\n        const req = new Request(payload);\n        let requestContext = context;\n\n        if (onBehalfOf) {\n          requestContext = this._contextOnBehalfOf(context, onBehalfOf);\n        }\n\n        return req.wrap(requestContext, {serverKey: isECDHRequest})\n          .then(() => {\n            /* istanbul ignore else */\n            if (process.env.NODE_ENV !== 'production') {\n              this.logger.info('kms: request payload', util.inspect(omit(JSON.parse(JSON.stringify(req)), 'wrapped'), {depth: null}));\n            }\n\n            return req;\n          });\n      });\n  },\n\n  /**\n   * Accepts a kms message event, decrypts it, and passes it to the batcher\n   * @param {Object} event\n   * @returns {Promise<Object>}\n   */\n  processKmsMessageEvent(event) {\n    this.logger.info('kms: received kms message');\n\n    return Promise.all(event.encryption.kmsMessages.map((kmsMessage, index) => this._isECDHEMessage(kmsMessage)\n      .then((isECDHMessage) => {\n        this.logger.info(`kms: received ${isECDHMessage ? 'ecdhe' : 'normal'} message`);\n        const res = new Response(kmsMessage);\n\n        return Promise.resolve(isECDHMessage ? partialContexts.get(this) : contexts.get(this))\n          // eslint-disable-next-line max-nested-callbacks\n          .then((context) => res.unwrap(context))\n          // eslint-disable-next-line max-nested-callbacks\n          .then(() => {\n            if (process.env.NODE_ENV !== 'production') {\n              this.logger.info('kms: response payload', util.inspect(omit(JSON.parse(JSON.stringify(res)), 'wrapped'), {depth: null}));\n            }\n          })\n          // eslint-disable-next-line max-nested-callbacks\n          .then(() => { event.encryption.kmsMessages[index] = res; })\n          // eslint-disable-next-line max-nested-callbacks\n          .then(() => res);\n      })))\n      .then(() => this.batcher.processKmsMessageEvent(event))\n      .catch((reason) => {\n        this.logger.error('kms: decrypt failed', reason.stack);\n\n        return Promise.reject(reason);\n      })\n      .then(() => event);\n  },\n\n  /**\n   * Decrypts a kms message\n   * @param {Object} kmsMessage\n   * @returns {Promise<Object>}\n   */\n  decryptKmsMessage(kmsMessage) {\n    const res = new Response(kmsMessage);\n\n    return contexts.get(this)\n      .then((context) => res.unwrap(context))\n      .then(() => res.body);\n  },\n\n  /**\n   * Determines if the kms message is an ecdhe message or a normal message\n   * @param {Object} kmsMessage\n   * @returns {Promise<boolean>}\n   */\n  _isECDHEMessage(kmsMessage) {\n    return this._getKMSStaticPubKey()\n      .then((kmsStaticPubKey) => {\n        const fields = kmsMessage.split('.');\n\n        if (fields.length !== 3) {\n          return false;\n        }\n\n        const header = JSON.parse(jose.util.base64url.decode(fields[0]));\n\n        return header.kid === kmsStaticPubKey.kid;\n      });\n  },\n\n  /**\n   * Sends a request to the kms\n   * @param {Object} payload\n   * @param {Object} options\n   * @param {Number} options.timeout (internal)\n   * @param {string} options.onBehalfOf Run the request on behalf of another user (UUID), used in compliance scenarios\n   * @returns {Promise<Object>}\n   */\n  request(payload, {timeout, onBehalfOf} = {}) {\n    timeout = timeout || this.config.kmsInitialTimeout;\n\n    // Note: this should only happen when we're using the async kms batcher;\n    // once we implement the sync batcher, this'll need to be smarter.\n    return this.webex.internal.mercury.connect()\n      .then(() => this.prepareRequest(payload, onBehalfOf))\n      .then((req) => {\n        req[TIMEOUT_SYMBOL] = timeout;\n\n        return this.batcher.request(req);\n      })\n      // High complexity is due to attempt at test mode resiliency\n      // eslint-disable-next-line complexity\n      .catch((reason) => {\n        if (process.env.NODE_ENV === 'test' && (reason.status === 403 || reason.statusCode === 403) && reason.message.match(/Failed to resolve authorization token in KmsMessage request for user/)) {\n          this.logger.warn('kms: rerequested key due to test-mode kms auth failure');\n\n          return this.request(payload, {onBehalfOf});\n        }\n\n        // KMS Error. Notify the user\n        if (reason instanceof KMSError) {\n          this.webex.trigger('client:InvalidRequestError');\n\n          return Promise.reject(reason);\n        }\n\n        // Ideally, most or all of the code below would go in kms-batcher, but\n        // but batching needs at least one more round of refactoring for that to\n        // work.\n        if (!reason.statusCode && !reason.status) {\n          /* istanbul ignore else */\n          if (process.env.NODE_ENV !== 'production') {\n            /* istanbul ignore next: reason.stack vs stack difficult to control in test */\n            this.logger.info('kms: request error', reason.stack || reason);\n          }\n\n          consoleDebug(`timeout ${timeout}`);\n          timeout *= 2;\n\n          if (timeout >= this.config.ecdhMaxTimeout) {\n            this.logger.info('kms: exceeded maximum KMS request retries');\n\n            return Promise.reject(reason);\n          }\n\n          // Peek ahead to make sure we don't reset the timeout if the next timeout\n          // will exceed the maximum timeout for renegotiating ECDH keys.\n          const nextTimeout = timeout * 2;\n\n          if (timeout >= this.config.kmsMaxTimeout && nextTimeout < this.config.ecdhMaxTimeout) {\n            this.logger.info('kms: exceeded maximum KMS request retries; negotiating new ecdh key');\n\n            /* istanbul ignore else */\n            if (process.env.NODE_ENV !== 'production') {\n              this.logger.info('kms: timeout/maxtimeout', timeout, this.config.kmsMaxTimeout);\n            }\n\n            contexts.delete(this);\n            timeout = 0;\n          }\n\n          return this.request(payload, {timeout, onBehalfOf});\n        }\n\n        return Promise.reject(reason);\n      });\n  },\n\n  /**\n   * @private\n   * @returns {Promise<string>}\n   */\n  _getAuthorization() {\n    return this.webex.credentials.getUserToken('spark:kms')\n      .then((token) => token.access_token);\n  },\n\n  @oneFlight\n  /**\n   * @private\n   * @param {String} onBehalfOf create context on behalf of another user, undefined when this is not necessary\n   * @returns {Promise<Object>}\n   */\n  _getContext() {\n    let promise = contexts.get(this);\n\n    if (!promise) {\n      promise = this._prepareContext();\n      contexts.set(this, promise);\n      promise.then((context) => {\n        const expiresIn = context.ephemeralKey.expirationDate - Date.now() - 30000;\n\n        safeSetTimeout(() => contexts.delete(this), expiresIn);\n      });\n    }\n\n    return Promise.all([\n      promise,\n      this._getAuthorization()\n    ])\n      .then(([context, authorization]) => {\n        context.clientInfo.credential.bearer = authorization;\n\n        return context;\n      });\n  },\n\n  /**\n   * @private\n   * @returns {Promise<Object>}\n   */\n  _getKMSCluster() {\n    this.logger.info('kms: retrieving KMS cluster');\n\n    return this._getKMSDetails()\n      .then(({kmsCluster}) => kmsCluster);\n  },\n\n  /**\n   * @private\n   * @returns {Promise<Object>}\n   */\n  _getKMSDetails() {\n    let details = kmsDetails.get(this);\n\n    if (!details) {\n      this.logger.info('kms: fetching KMS details');\n      details = this.webex.request({\n        service: 'encryption',\n        resource: `/kms/${this.webex.internal.device.userId}`\n      })\n        .then((res) => {\n          this.logger.info('kms: fetched KMS details');\n          const {body} = res;\n\n          body.rsaPublicKey = JSON.parse(body.rsaPublicKey);\n\n          return body;\n        })\n        .catch((reason) => {\n          this.logger.error('kms: failed to fetch KMS details', reason);\n\n          return Promise.reject(reason);\n        });\n\n      kmsDetails.set(this, details);\n    }\n\n    return details;\n  },\n\n  /**\n   * @private\n   * @returns {Promise<Object>}\n   */\n  _getKMSStaticPubKey() {\n    this.logger.info('kms: retrieving KMS static public key');\n\n    return this._getKMSDetails()\n      .then(({rsaPublicKey}) => rsaPublicKey);\n  },\n\n  /**\n   * @private\n   * @returns {Promise<Object>}\n   */\n  _prepareContext() {\n    this.logger.info('kms: creating context');\n    const context = new Context();\n\n    return Promise.all([\n      this._getKMSStaticPubKey().then(validateKMS(this.config.caroots)),\n      this._getAuthorization()\n    ])\n      .then(([kmsStaticPubKey, authorization]) => {\n        context.clientInfo = {\n          clientId: this.webex.internal.device.url,\n          credential: {\n            userId: this.webex.internal.device.userId,\n            bearer: authorization\n          }\n        };\n\n        context.serverInfo = {\n          key: kmsStaticPubKey\n        };\n\n        this.logger.info('kms: creating local ephemeral key');\n\n        return context.createECDHKey();\n      })\n      .then((localECDHKey) => {\n        context.ephemeralKey = localECDHKey;\n        partialContexts.set(this, context);\n\n        return Promise.all([localECDHKey.asKey(), this._getKMSCluster()]);\n      })\n      .then(([localECDHKey, cluster]) => {\n        this.logger.info('kms: submitting ephemeral key request');\n\n        return this.request({\n          uri: `${cluster}/ecdhe`,\n          method: 'create',\n          jwk: localECDHKey.toJSON()\n        });\n      })\n      .then((res) => {\n        this.logger.info('kms: deriving final ephemeral key');\n\n        return context.deriveEphemeralKey(res.key);\n      })\n      .then((key) => {\n        context.ephemeralKey = key;\n        partialContexts.delete(this);\n        this.logger.info('kms: derived final ephemeral key');\n\n        return context;\n      })\n      .catch((reason) => {\n        this.logger.error('kms: failed to negotiate ephemeral key', reason);\n\n        return Promise.reject(reason);\n      });\n  },\n\n  /**\n   * KMS 'retrieve' requests can be made on behalf of another user. This is useful\n   * for scenarios such as eDiscovery. i.e. Where an authorized compliance officer is\n   * entitled to retrieve content generated by any organisational user.\n   * As the KMSContext is cached, updating it will affect separate requests. Hence when\n   * making a request onBehalfOf another user create a new context for just this request.\n   * However this context will be 'light' as it only needs to change one field.\n   * @param {Object} originalContext - The base context to 'copy'\n   * @param {String} onBehalfOf - The user specified in the new context\n   * @returns {Context} A 'copy' of the existing context with a new user specified\n   * @private\n   */\n  _contextOnBehalfOf(originalContext, onBehalfOf) {\n    const context = new Context();\n\n    context.clientInfo = context.clientInfo = {\n      clientId: originalContext.clientInfo.clientId,\n      credential: {\n        userId: onBehalfOf,\n        bearer: originalContext.clientInfo.credential.bearer\n      }\n    };\n    context.serverInfo = originalContext.serverInfo;\n    context.ephemeralKey = originalContext.ephemeralKey;\n\n    return context;\n  }\n});\n\nexport default KMS;\n"]},"metadata":{},"sourceType":"script"}