{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport { getEngine } from \"./common.js\";\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\nimport Attribute from \"./Attribute.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nexport default class EncryptedData {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for EncryptedData class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", EncryptedData.defaultValues(\"version\"));\n    /**\r\n     * @type {EncryptedContentInfo}\r\n     * @desc encryptedContentInfo\r\n     */\n\n    this.encryptedContentInfo = getParametersValue(parameters, \"encryptedContentInfo\", EncryptedData.defaultValues(\"encryptedContentInfo\"));\n    if (\"unprotectedAttrs\" in parameters)\n      /**\r\n       * @type {Array.<Attribute>}\r\n       * @desc unprotectedAttrs\r\n       */\n      this.unprotectedAttrs = getParametersValue(parameters, \"unprotectedAttrs\", EncryptedData.defaultValues(\"unprotectedAttrs\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"version\":\n        return 0;\n\n      case \"encryptedContentInfo\":\n        return new EncryptedContentInfo();\n\n      case \"unprotectedAttrs\":\n        return [];\n\n      default:\n        throw new Error(`Invalid member name for EncryptedData class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"version\":\n        return memberValue === 0;\n\n      case \"encryptedContentInfo\":\n        return EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType) && EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm) && EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent);\n\n      case \"unprotectedAttrs\":\n        return memberValue.length === 0;\n\n      default:\n        throw new Error(`Invalid member name for EncryptedData class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * EncryptedData ::= SEQUENCE {\r\n   *    version CMSVersion,\r\n   *    encryptedContentInfo EncryptedContentInfo,\r\n   *    unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [version]\r\n     * @property {string} [encryptedContentInfo]\r\n     * @property {string} [unprotectedAttrs]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Integer({\n        name: names.version || \"\"\n      }), EncryptedContentInfo.schema(names.encryptedContentInfo || {}), new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: [new asn1js.Repeated({\n          name: names.unprotectedAttrs || \"\",\n          value: Attribute.schema()\n        })]\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"version\", \"encryptedContentInfo\", \"unprotectedAttrs\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, EncryptedData.schema({\n      names: {\n        version: \"version\",\n        encryptedContentInfo: {\n          names: {\n            blockName: \"encryptedContentInfo\"\n          }\n        },\n        unprotectedAttrs: \"unprotectedAttrs\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for EncryptedData\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.version = asn1.result.version.valueBlock.valueDec;\n    this.encryptedContentInfo = new EncryptedContentInfo({\n      schema: asn1.result.encryptedContentInfo\n    });\n    if (\"unprotectedAttrs\" in asn1.result) this.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({\n      schema: element\n    })); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n    outputArray.push(new asn1js.Integer({\n      value: this.version\n    }));\n    outputArray.push(this.encryptedContentInfo.toSchema());\n\n    if (\"unprotectedAttrs\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: Array.from(this.unprotectedAttrs, element => element.toSchema())\n      }));\n    } //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const _object = {\n      version: this.version,\n      encryptedContentInfo: this.encryptedContentInfo.toJSON()\n    };\n    if (\"unprotectedAttrs\" in this) _object.unprotectedAttrs = Array.from(this.unprotectedAttrs, element => element.toJSON());\n    return _object;\n  } //**********************************************************************************\n\n  /**\r\n   * Create a new CMS Encrypted Data content\r\n   * @param {Object} parameters Parameters neccessary for encryption\r\n   * @returns {Promise}\r\n   */\n\n\n  encrypt(parameters) {\n    //region Check for input parameters\n    if (parameters instanceof Object === false) return Promise.reject(\"Parameters must have type \\\"Object\\\"\"); //endregion\n    //region Get cryptographic engine\n\n    const engine = getEngine();\n    if (typeof engine === \"undefined\") return Promise.reject(\"Unable to initialize cryptographic engine\"); //endregion\n    //region Set \"contentType\" parameter\n\n    parameters.contentType = \"1.2.840.113549.1.7.1\"; // \"data\"\n    //endregion\n\n    if (\"encryptEncryptedContentInfo\" in engine.subtle) {\n      return engine.subtle.encryptEncryptedContentInfo(parameters).then(result => {\n        this.encryptedContentInfo = result;\n      });\n    }\n\n    return Promise.reject(`No support for \"encryptEncryptedContentInfo\" in current crypto engine ${engine.name}`);\n  } //**********************************************************************************\n\n  /**\r\n   * Create a new CMS Encrypted Data content\r\n   * @param {Object} parameters Parameters neccessary for encryption\r\n   */\n\n\n  decrypt(parameters) {\n    //region Check for input parameters\n    if (parameters instanceof Object === false) return Promise.reject(\"Parameters must have type \\\"Object\\\"\"); //endregion\n    //region Get cryptographic engine\n\n    const engine = getEngine();\n    if (typeof engine === \"undefined\") return Promise.reject(\"Unable to initialize cryptographic engine\"); //endregion\n    //region Set \"encryptedContentInfo\" value\n\n    parameters.encryptedContentInfo = this.encryptedContentInfo; //endregion\n\n    if (\"decryptEncryptedContentInfo\" in engine.subtle) return engine.subtle.decryptEncryptedContentInfo(parameters);\n    return Promise.reject(`No support for \"decryptEncryptedContentInfo\" in current crypto engine ${engine.name}`);\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/EncryptedData.js"],"names":["asn1js","getParametersValue","clearProps","getEngine","EncryptedContentInfo","Attribute","EncryptedData","constructor","parameters","version","defaultValues","encryptedContentInfo","unprotectedAttrs","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","contentType","contentEncryptionAlgorithm","encryptedContent","length","names","Sequence","name","blockName","value","Integer","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","asn1","compareSchema","verified","result","valueBlock","valueDec","Array","from","element","toSchema","outputArray","push","toJSON","_object","encrypt","Object","Promise","reject","engine","subtle","encryptEncryptedContentInfo","then","decrypt","decryptEncryptedContentInfo"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport { getEngine } from \"./common.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport Attribute from \"./Attribute.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EncryptedData\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EncryptedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", EncryptedData.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {EncryptedContentInfo}\r\n\t\t * @desc encryptedContentInfo\r\n\t\t */\r\n\t\tthis.encryptedContentInfo = getParametersValue(parameters, \"encryptedContentInfo\", EncryptedData.defaultValues(\"encryptedContentInfo\"));\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc unprotectedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unprotectedAttrs = getParametersValue(parameters, \"unprotectedAttrs\", EncryptedData.defaultValues(\"unprotectedAttrs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn new EncryptedContentInfo();\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === 0);\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm)) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent)));\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * EncryptedData ::= SEQUENCE {\r\n\t *    version CMSVersion,\r\n\t *    encryptedContentInfo EncryptedContentInfo,\r\n\t *    unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [encryptedContentInfo]\r\n\t\t * @property {string} [unprotectedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tEncryptedContentInfo.schema(names.encryptedContentInfo || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.unprotectedAttrs || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"encryptedContentInfo\",\r\n\t\t\t\"unprotectedAttrs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEncryptedData.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tencryptedContentInfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptedContentInfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tunprotectedAttrs: \"unprotectedAttrs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EncryptedData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in asn1.result)\r\n\t\t\tthis.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(this.encryptedContentInfo.toSchema());\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.unprotectedAttrs, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tencryptedContentInfo: this.encryptedContentInfo.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t\t_object.unprotectedAttrs = Array.from(this.unprotectedAttrs, element => element.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Encrypted Data content\r\n\t * @param {Object} parameters Parameters neccessary for encryption\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get cryptographic engine\r\n\t\tconst engine = getEngine();\r\n\t\tif(typeof engine === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to initialize cryptographic engine\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Set \"contentType\" parameter\r\n\t\tparameters.contentType = \"1.2.840.113549.1.7.1\"; // \"data\"\r\n\t\t//endregion\r\n\t\t\r\n\t\tif(\"encryptEncryptedContentInfo\" in engine.subtle)\r\n\t\t{\r\n\t\t\treturn engine.subtle.encryptEncryptedContentInfo(parameters).then(result =>\r\n\t\t\t{\r\n\t\t\t\tthis.encryptedContentInfo = result;\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\treturn Promise.reject(`No support for \"encryptEncryptedContentInfo\" in current crypto engine ${engine.name}`);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Encrypted Data content\r\n\t * @param {Object} parameters Parameters neccessary for encryption\r\n\t */\r\n\tdecrypt(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get cryptographic engine\r\n\t\tconst engine = getEngine();\r\n\t\tif(typeof engine === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to initialize cryptographic engine\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Set \"encryptedContentInfo\" value\r\n\t\tparameters.encryptedContentInfo = this.encryptedContentInfo;\r\n\t\t//endregion\r\n\t\t\r\n\t\tif(\"decryptEncryptedContentInfo\" in engine.subtle)\r\n\t\t\treturn engine.subtle.decryptEncryptedContentInfo(parameters);\r\n\t\t\r\n\t\treturn Promise.reject(`No support for \"decryptEncryptedContentInfo\" in current crypto engine ${engine.name}`);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}