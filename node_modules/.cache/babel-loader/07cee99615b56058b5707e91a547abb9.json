{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport CertificateSet from \"./CertificateSet.js\";\nimport RevocationInfoChoices from \"./RevocationInfoChoices.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nexport default class OriginatorInfo {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for OriginatorInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    if (\"certs\" in parameters)\n      /**\r\n       * @type {CertificateSet}\r\n       * @desc certs\r\n       */\n      this.certs = getParametersValue(parameters, \"certs\", OriginatorInfo.defaultValues(\"certs\"));\n    if (\"crls\" in parameters)\n      /**\r\n       * @type {RevocationInfoChoices}\r\n       * @desc crls\r\n       */\n      this.crls = getParametersValue(parameters, \"crls\", OriginatorInfo.defaultValues(\"crls\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"certs\":\n        return new CertificateSet();\n\n      case \"crls\":\n        return new RevocationInfoChoices();\n\n      default:\n        throw new Error(`Invalid member name for OriginatorInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"certs\":\n        return memberValue.certificates.length === 0;\n\n      case \"crls\":\n        return memberValue.crls.length === 0 && memberValue.otherRevocationInfos.length === 0;\n\n      default:\n        throw new Error(`Invalid member name for OriginatorInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * OriginatorInfo ::= SEQUENCE {\r\n   *    certs [0] IMPLICIT CertificateSet OPTIONAL,\r\n   *    crls [1] IMPLICIT RevocationInfoChoices OPTIONAL }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [certs]\r\n     * @property {string} [crls]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Constructed({\n        name: names.certs || \"\",\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: CertificateSet.schema().valueBlock.value\n      }), new asn1js.Constructed({\n        name: names.crls || \"\",\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: RevocationInfoChoices.schema().valueBlock.value\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"certs\", \"crls\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, OriginatorInfo.schema({\n      names: {\n        certs: \"certs\",\n        crls: \"crls\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for OriginatorInfo\"); //endregion\n    //region Get internal properties from parsed schema\n\n    if (\"certs\" in asn1.result) {\n      this.certs = new CertificateSet({\n        schema: new asn1js.Set({\n          value: asn1.result.certs.valueBlock.value\n        })\n      });\n    }\n\n    if (\"crls\" in asn1.result) {\n      this.crls = new RevocationInfoChoices({\n        schema: new asn1js.Set({\n          value: asn1.result.crls.valueBlock.value\n        })\n      });\n    } //endregion\n\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    const sequenceValue = [];\n\n    if (\"certs\" in this) {\n      sequenceValue.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: this.certs.toSchema().valueBlock.value\n      }));\n    }\n\n    if (\"crls\" in this) {\n      sequenceValue.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: this.crls.toSchema().valueBlock.value\n      }));\n    } //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: sequenceValue\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const object = {};\n    if (\"certs\" in this) object.certs = this.certs.toJSON();\n    if (\"crls\" in this) object.crls = this.crls.toJSON();\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/OriginatorInfo.js"],"names":["asn1js","getParametersValue","clearProps","CertificateSet","RevocationInfoChoices","OriginatorInfo","constructor","parameters","certs","defaultValues","crls","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","certificates","length","otherRevocationInfos","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","valueBlock","asn1","compareSchema","verified","result","Set","toSchema","sequenceValue","push","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport CertificateSet from \"./CertificateSet.js\";\r\nimport RevocationInfoChoices from \"./RevocationInfoChoices.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class OriginatorInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OriginatorInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"certs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {CertificateSet}\r\n\t\t\t * @desc certs\r\n\t\t\t */\r\n\t\t\tthis.certs = getParametersValue(parameters, \"certs\", OriginatorInfo.defaultValues(\"certs\"));\r\n\r\n\t\tif(\"crls\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {RevocationInfoChoices}\r\n\t\t\t * @desc crls\r\n\t\t\t */\r\n\t\t\tthis.crls = getParametersValue(parameters, \"crls\", OriginatorInfo.defaultValues(\"crls\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn new CertificateSet();\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn new RevocationInfoChoices();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OriginatorInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn (memberValue.certificates.length === 0);\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn ((memberValue.crls.length === 0) && (memberValue.otherRevocationInfos.length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OriginatorInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OriginatorInfo ::= SEQUENCE {\r\n\t *    certs [0] IMPLICIT CertificateSet OPTIONAL,\r\n\t *    crls [1] IMPLICIT RevocationInfoChoices OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certs]\r\n\t\t * @property {string} [crls]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.certs || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: CertificateSet.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.crls || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: RevocationInfoChoices.schema().valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"certs\",\r\n\t\t\t\"crls\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOriginatorInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcerts: \"certs\",\r\n\t\t\t\t\tcrls: \"crls\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OriginatorInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"certs\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.certs = new CertificateSet({\r\n\t\t\t\tschema: new asn1js.Set({\r\n\t\t\t\t\tvalue: asn1.result.certs.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif(\"crls\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.crls = new RevocationInfoChoices({\r\n\t\t\t\tschema: new asn1js.Set({\r\n\t\t\t\t\tvalue: asn1.result.crls.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst sequenceValue = [];\r\n\r\n\t\tif(\"certs\" in this)\r\n\t\t{\r\n\t\t\tsequenceValue.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.certs.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"crls\" in this)\r\n\t\t{\r\n\t\t\tsequenceValue.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.crls.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: sequenceValue\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\r\n\t\tif(\"certs\" in this)\r\n\t\t\tobject.certs = this.certs.toJSON();\r\n\r\n\t\tif(\"crls\" in this)\r\n\t\t\tobject.crls = this.crls.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}