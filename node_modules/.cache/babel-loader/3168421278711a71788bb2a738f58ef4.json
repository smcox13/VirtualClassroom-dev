{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar EventsUtil = {};\n\nEventsUtil.getEventLog = function (args) {\n  var argString = '';\n\n  try {\n    argString = (0, _stringify2.default)(args);\n  } catch (e) {// no op\n  }\n\n  return argString;\n};\n\nEventsUtil.getScopeLog = function (scope) {\n  var scopeString = '';\n\n  if (scope) {\n    if (scope.file && scope.function) {\n      scopeString += scope.file + ':' + scope.function + '->';\n      return scopeString;\n    }\n\n    if (scope.file) {\n      scopeString += scope.file + '->';\n    }\n\n    if (scope.function) {\n      scopeString += scope.function + '->';\n    }\n  }\n\n  return scopeString;\n};\n\nexports.default = EventsUtil;","map":{"version":3,"sources":["util.js"],"names":["EventsUtil","argString","scopeString","scope"],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAMA,UAAAA,GAAN,EAAA;;AAEAA,UAAAA,CAAAA,WAAAA,GAAyB,UAAA,IAAA,EAAU;AACjC,MAAIC,SAAAA,GAAJ,EAAA;;AAEA,MAAI;AACFA,IAAAA,SAAAA,GAAY,CAAA,GAAA,WAAA,CAAA,OAAA,EAAZA,IAAY,CAAZA;AADF,GAAA,CAGA,OAAA,CAAA,EAAU,CACR;AACD;;AAED,SAAA,SAAA;AAVFD,CAAAA;;AAaAA,UAAAA,CAAAA,WAAAA,GAAyB,UAAA,KAAA,EAAW;AAClC,MAAIE,WAAAA,GAAJ,EAAA;;AAEA,MAAA,KAAA,EAAW;AACT,QAAIC,KAAAA,CAAAA,IAAAA,IAAcA,KAAAA,CAAlB,QAAA,EAAkC;AAChCD,MAAAA,WAAAA,IAAkBC,KAAAA,CAAlBD,IAAkBC,GAAlBD,GAAkBC,GAAcA,KAAAA,CAAhCD,QAAkBC,GAAlBD,IAAAA;AAEA,aAAA,WAAA;AACD;;AACD,QAAIC,KAAAA,CAAJ,IAAA,EAAgB;AACdD,MAAAA,WAAAA,IAAkBC,KAAAA,CAAlBD,IAAkBC,GAAlBD,IAAAA;AACD;;AACD,QAAIC,KAAAA,CAAJ,QAAA,EAAoB;AAClBD,MAAAA,WAAAA,IAAkBC,KAAAA,CAAlBD,QAAkBC,GAAlBD,IAAAA;AACD;AACF;;AAED,SAAA,WAAA;AAjBFF,CAAAA;;kBAoBeA,U","sourcesContent":["const EventsUtil = {};\n\nEventsUtil.getEventLog = (args) => {\n  let argString = '';\n\n  try {\n    argString = JSON.stringify(args);\n  }\n  catch (e) {\n    // no op\n  }\n\n  return argString;\n};\n\nEventsUtil.getScopeLog = (scope) => {\n  let scopeString = '';\n\n  if (scope) {\n    if (scope.file && scope.function) {\n      scopeString += `${scope.file}:${scope.function}->`;\n\n      return scopeString;\n    }\n    if (scope.file) {\n      scopeString += `${scope.file}->`;\n    }\n    if (scope.function) {\n      scopeString += `${scope.function}->`;\n    }\n  }\n\n  return scopeString;\n};\n\nexport default EventsUtil;\n"]},"metadata":{},"sourceType":"script"}