{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _uuid = require('uuid');\n\nvar _uuid2 = _interopRequireDefault(_uuid);\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _loggerProxy = require('../common/logs/logger-proxy');\n\nvar _loggerProxy2 = _interopRequireDefault(_loggerProxy);\n\nvar _triggerProxy = require('../common/events/trigger-proxy');\n\nvar _triggerProxy2 = _interopRequireDefault(_triggerProxy);\n\nvar _index = require('../roap/index');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _media = require('../media');\n\nvar _media2 = _interopRequireDefault(_media);\n\nvar _properties = require('../media/properties');\n\nvar _properties2 = _interopRequireDefault(_properties);\n\nvar _state = require('../meeting/state');\n\nvar _state2 = _interopRequireDefault(_state);\n\nvar _audio = require('../meeting/audio');\n\nvar _audio2 = _interopRequireDefault(_audio);\n\nvar _video = require('../meeting/video');\n\nvar _video2 = _interopRequireDefault(_video);\n\nvar _locusInfo = require('../locus-info');\n\nvar _locusInfo2 = _interopRequireDefault(_locusInfo);\n\nvar _peerConnectionManager = require('../peer-connection-manager');\n\nvar _peerConnectionManager2 = _interopRequireDefault(_peerConnectionManager);\n\nvar _metrics = require('../metrics');\n\nvar _metrics2 = _interopRequireDefault(_metrics);\n\nvar _config = require('../metrics/config');\n\nvar _reconnectionManager = require('../reconnection-manager');\n\nvar _reconnectionManager2 = _interopRequireDefault(_reconnectionManager);\n\nvar _request = require('../meeting/request');\n\nvar _request2 = _interopRequireDefault(_request);\n\nvar _index3 = require('../members/index');\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _util = require('../meeting/util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _util3 = require('../media/util');\n\nvar _util4 = _interopRequireDefault(_util3);\n\nvar _index5 = require('../stats/index');\n\nvar _index6 = _interopRequireDefault(_index5);\n\nvar _metrics3 = require('../stats/metrics');\n\nvar _metrics4 = _interopRequireDefault(_metrics3);\n\nvar _util5 = require('../stats/util');\n\nvar _util6 = _interopRequireDefault(_util5);\n\nvar _reconnection = require('../common/errors/reconnection');\n\nvar _reconnection2 = _interopRequireDefault(_reconnection);\n\nvar _constants = require('../constants');\n\nvar _parameter = require('../common/errors/parameter');\n\nvar _parameter2 = _interopRequireDefault(_parameter);\n\nvar _media3 = require('../common/errors/media');\n\nvar _media4 = _interopRequireDefault(_media3);\n\nvar _mqaProcessor = require('../metrics/mqa-processor');\n\nvar _mqaProcessor2 = _interopRequireDefault(_mqaProcessor);\n\nvar _inMeetingActions = require('./in-meeting-actions');\n\nvar _inMeetingActions2 = _interopRequireDefault(_inMeetingActions);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * MediaDirection\n * @typedef {Object} MediaDirection\n * @property {boolean} sendAudio\n * @property {boolean} receiveAudio\n * @property {boolean} sendVideo\n * @property {boolean} receiveVideo\n * @property {boolean} sendShare\n * @property {boolean} receiveShare\n */\n\n/**\n  * AudioVideo\n  * @typedef {Object} AudioVideo\n  * @property {Object} audio\n  * @property {String} audio.deviceId\n  * @property {Object} video\n  * @property {String} video.deviceId\n  */\n\n/**\n   * SharePreferences\n   * @typedef {Object} SharePreferences\n   * @property {Object} [shareConstraints]\n   * @property {Boolean} [highFrameRate]\n   */\n\n/**\n * JoinOptions\n * @typedef {Object} JoinOptions\n * @property {String} [resourceId]\n * @property {String} [hostPin]\n * @property {Boolean} [moderator]\n */\n\n/**\n * SendOptions\n * @typedef {Object} SendOptions\n * @property {Boolean} sendAudio\n * @property {Boolean} sendVideo\n * @property {Boolean} sendShare\n */\n\n/**\n  * Meeting State Change Event\n  * Emitted when ever there is a meeting state change\n  * @event meeting:stateChange\n  * @instance\n  * @type {Object}\n  * @property {String} currentState current state of the meeting\n  * @property {String} previousState previous state of the meeting\n  * @memberof Meeting\n  */\n\n/**\n  * Media Ready Event\n  * Emitted when a stream is ready to be rendered\n  * @event media:ready\n  * @instance\n  * @type {Object}\n  * @property {MediaStream} stream the media stream\n  * @property {String} type what type of stream, remote, local\n  * @memberof Meeting\n  */\n\n/**\n  * Media Stopped Event\n  * Emitted when a stream has stopped sending\n  * @event media:stopped\n  * @instance\n  * @type {Object}\n  * @property {String} type what type of stream, remote, local\n  * @memberof Meeting\n  */\n\n/**\n * Meeting Ringing Event\n * Emitted when this client should play a ringing sound, because this member is getting an incoming meeting\n * or sending out an incoming meeting\n * @event meeting:ringing\n * @instance\n * @type {Object}\n * @property {String} type // INCOMING or JOIN\n * @property {String} id\n * @memberof Meeting\n */\n\n/**\n * Meeting Ringing Stop Event\n * Emitted when this client should stop playing a ringing sound\n * @event meeting:ringingStop\n * @instance\n * @type {Object}\n * @property {Object} type\n * @property {Boolean} type.remoteAnswered\n * @property {Boolean} type.remoteDeclined\n * @property {String} id\n * @memberof Meeting\n */\n\n/**\n * Meeting Started Sharing Local Event\n * Emitted when this member starts sharing\n * @event meeting:startedSharingLocal\n * @instance\n * @type {Object}\n * @memberof Meeting\n */\n\n/**\n * Meeting Stopped Sharing Local Event\n * Emitted when this member stops sharing\n * @event meeting:stoppedSharingLocal\n * @instance\n * @type {Object}\n * @memberof Meeting\n */\n\n/**\n * Meeting Locked Event\n * Emitted when a meeting is locked\n * @event meeting:locked\n * @instance\n * @type {Object}\n * @property {Object} info\n * @memberof Meeting\n */\n\n/**\n * Meeting Unlocked Event\n * Emitted when a meeting is unlocked\n * @event meeting:unlocked\n * @instance\n * @type {Object}\n * @property {Object} info\n * @memberof Meeting\n */\n\n/**\n * Meeting Actions Update Event\n * Emitted when a user can take actions on a meeting such as lock, unlock, assign host\n * @event meeting:actionsUpdate\n * @instance\n * @type {Object}\n * @property {Boolean} canLock\n * @property {Boolean} canUnlock\n * @property {Boolean} canAssignHost\n * @memberof Meeting\n */\n\n/**\n * Meeting Muted By Others Event\n * Emitted when a member is muted by another member\n * @event meeting:self:mutedByOthers\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n * Meeting Self Guest Admitted Event\n * Emitted when a member admitted to the meeting by another member\n * @event meeting:self:guestAdmitted\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n * Meeting Self Lobby Waiting Event\n * Emitted when this member enters the lobby and is waiting for the webex meeting to begin\n * @event meeting:self:lobbyWaiting\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n  * Reconnection Starting Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionStarting\n  * @instance\n  * @memberof Meeting\n  */\n\n/**\n  * Reconnection Success Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionSuccess\n  * @instance\n  * @type {Object}\n  * @property {Object} reconnect\n  * @memberof Meeting\n  */\n\n/**\n  * Reconnection Failure Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionFailure\n  * @instance\n  * @type {Object}\n  * @property {Error} error\n  * @memberof Meeting\n  */\n\n/**\n * @description Meeting is the crux of the plugin\n * @export\n * @class Meeting\n */\n\n\nvar Meeting = function (_StatelessWebexPlugin) {\n  (0, _inherits3.default)(Meeting, _StatelessWebexPlugin);\n  /**\n   * @param {Object} attrs\n   * @param {Object} options\n   * @constructor\n   * @memberof Meeting\n  */\n\n  function Meeting(attrs, options) {\n    (0, _classCallCheck3.default)(this, Meeting);\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Meeting.__proto__ || (0, _getPrototypeOf2.default)(Meeting)).call(this, {}, options));\n\n    _this.namespace = _constants.MEETINGS;\n\n    _this.getMediaStreams = function (mediaDirection) {\n      var audioVideo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var sharePreferences = arguments[2];\n\n      if (mediaDirection && (mediaDirection.sendAudio || mediaDirection.sendVideo || mediaDirection.sendShare)) {\n        return _media2.default.getUserMedia(mediaDirection, audioVideo, sharePreferences).then(function (response) {\n          if (!response[0] && !response[1]) {\n            return _promise2.default.reject(new _media4.default('Was not able to retrive media Stream'));\n          }\n\n          return _promise2.default.resolve(response);\n        });\n      }\n\n      return _promise2.default.reject(new _media4.default('Atleaset one of the mediaDirection value should be true'));\n    };\n\n    _this.getDevices = function () {\n      return _media2.default.getDevices();\n    };\n\n    _this.attrs = attrs;\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n\n    _this.options = options;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n\n    _this.id = _uuid2.default.v4();\n    _this.correlationId = _this.id;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n\n    _this.userId = attrs.userId;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n\n    _this.resource = attrs.resource;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n\n    _this.deviceUrl = attrs.deviceUrl;\n    /**\n     * @description set you -1 as default values is 0 (used to idenfify if 1st roap request was sent)\n     * @instance\n     * @type {Number}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n\n    _this.roapSeq = _constants.ROAP_SEQ_PRE;\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    // TODO: needs to be defined as a class\n\n    _this.meetingInfo = {};\n    /**\n     * @instance\n     * @type {Members}\n     * @public\n     * @memberof Meeting\n     */\n\n    _this.members = new _index4.default({\n      locusUrl: attrs.locus && attrs.locus.url\n    }, {\n      parent: _this.webex\n    });\n    /**\n     * @instance\n     * @type {Roap}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n\n    _this.roap = new _index2.default({}, {\n      parent: _this.webex\n    });\n    /**\n     * created later\n     * @instance\n     * @type {ReconnectionManager}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n\n    _this.reconnectionManager = new _reconnectionManager2.default(_this);\n    /**\n     * created later\n     * @instance\n     * @type {AudioStateMachine}\n     * @public\n     * @memberof Meeting\n     */\n\n    _this.audio = null;\n    /**\n     * created later\n     * @instance\n     * @type {VideoStateMachine}\n     * @public\n     * @memberof Meeting\n     */\n\n    _this.video = null;\n    /**\n     * @instance\n     * @type {MeetingStateMachine}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n\n    _this.meetingFiniteStateMachine = _state2.default.create(_this);\n    /**\n     * @instance\n     * @type {WebRTCStats}\n     * @public\n     * @memberof Meeting\n     */\n\n    _this.stats = null;\n    /**\n     * @instance\n     * @type {WebRTCStats}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n\n    _this.internalStats = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n\n    _this.convoUrl = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n\n    _this.locusUrl = attrs.locus && attrs.locus.url || null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n\n    _this.sipUri = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n\n    _this.partner = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n\n    _this.type = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n\n    _this.owner = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n\n    _this.hostId = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n\n    _this.policy = null;\n    /**\n     * @instance\n     * @type {MeetingRequest}\n     * @private\n     * @memberof Meeting\n     */\n\n    _this.meetingRequest = new _request2.default({}, options);\n    /**\n     * Passing only info as we send basic info for meeting added event\n     * @instance\n     * @type {MeetingRequest}\n     * @private\n     * @memberof Meeting\n     */\n\n    _this.locusInfo = new _locusInfo2.default(_this.updateMeetingObject.bind(_this), attrs.locus ? attrs.locus : {}, _this.webex, _this.id);\n    /**\n     * Passing only info as we send basic info for meeting added event\n     * @instance\n     * @type {MediaProperties}\n     * @public\n     * @memberof Meeting\n     */\n\n    _this.mediaProperties = new _properties2.default();\n    /**\n     * @instance\n     * @type {InMeetingActions}\n     * @public\n     * @memberof Meeting\n    */\n\n    _this.inMeetingActions = new _inMeetingActions2.default();\n    /**\n     * @instance\n     * @type {Boolean}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n\n    _this.isSharing = false;\n    /**\n     * @instance\n     * @type {Array}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n\n    _this.callEvents = [];\n    /**\n     * There is a pending floor requested by the user\n     * @instance\n     * @type {floorGrantPending}\n     * @private\n     * @memberof Meeting\n     */\n\n    _this.floorGrantPending = false;\n    /**\n     * @instance\n     * @type {MediaMetrics}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n\n    _this.mediaQualityMetrics = null;\n    /**\n     * @instance\n     * @type {MQAProcessor}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n\n    _this.mqaProcessor = null;\n\n    _this.setUpLocusInfoListeners();\n\n    return _this;\n  }\n  /**\n   * Proxy function for all the listener set ups\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n\n\n  (0, _createClass3.default)(Meeting, [{\n    key: 'setUpLocusInfoListeners',\n    value: function setUpLocusInfoListeners() {\n      // meeting update listeners\n      this.setUpLocusInfoSelfListener();\n      this.setUpLocusInfoMeetingListener(); // members update listeners\n\n      this.setUpLocusFullStateListener();\n      this.setUpLocusUrlListener();\n      this.setUpLocusHostListener();\n      this.setUpLocusSelfListener();\n      this.setUpLocusParticipantsListener();\n      this.setUpLocusMediaSharesListener();\n      this.setUpLocusInfoMeetingInfoListener();\n      this.setUpLocusInfoAssignHostListener();\n    }\n    /**\n     * Set up the locus info listener for assign host permissions on a meeting\n     * @returns {undefined}\n     * @private\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'setUpLocusInfoAssignHostListener',\n    value: function setUpLocusInfoAssignHostListener() {\n      var _this2 = this;\n\n      this.locusInfo.on(_constants.EVENTS.LOCUS_INFO_CAN_ASSIGN_HOST, function (payload) {\n        _triggerProxy2.default.trigger(_this2, {\n          file: 'meeting/index',\n          function: 'setUpLocusInfoAssignHostListener'\n        }, _constants.EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE, {\n          canAssignHost: payload.canAssignHost,\n          canLock: _this2.inMeetingActions.getCanLock(),\n          canUnlock: _this2.inMeetingActions.getCanUnlock()\n        });\n\n        _this2.inMeetingActions.setCanAssignHost(payload.canAssignHost);\n      });\n    }\n    /**\n     * Set up the internal locus info full state object listener\n     * @returns {undefined}\n     * @private\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'setUpLocusFullStateListener',\n    value: function setUpLocusFullStateListener() {\n      var _this3 = this;\n\n      this.locusInfo.on(_constants.LOCUSINFO.EVENTS.FULL_STATE_MEETING_STATE_CHANGE, function (payload) {\n        _triggerProxy2.default.trigger(_this3, {\n          file: 'meeting/index',\n          function: 'setUpLocusFullStateListener'\n        }, _constants.EVENT_TRIGGERS.MEETING_STATE_CHANGE, {\n          payload: payload\n        });\n      });\n      this.locusInfo.on(_constants.LOCUSINFO.EVENTS.FULL_STATE_TYPE_UPDATE, function (payload) {\n        _this3.members.locusFullStateTypeUpdate(payload);\n      });\n    }\n    /**\n     * get the metrics payload pre\n     * @param {Object} options\n     * @param {String} options.event\n     * @param {String} options.trackingId\n     * @param {Object} options.locus\n     * @returns {Object}\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'getAnalyzerMetricsPrePayload',\n    value: function getAnalyzerMetricsPrePayload(options) {\n      if (options) {\n        var event = options.event,\n            trackingId = options.trackingId,\n            locus = options.locus;\n\n        if (!event) {\n          _loggerProxy2.default.logger.error('Error [Call Analyzer Event', event || '', ']: invalid identifers or event type! ' + this.correlationId);\n\n          return null;\n        }\n\n        var identifiers = {\n          correlationId: this.correlationId,\n          userId: this.userId,\n          deviceId: this.deviceUrl\n        }; // If locus is passed take the value from there else use meeting object\n\n        if (locus) {\n          identifiers.locusId = locus.url.split('/').pop();\n          identifiers.locusStartTime = locus.fullState.lastActive;\n        } else if (this.locusUrl && this.locusInfo.fullState) {\n          identifiers.locusId = this.locusUrl && this.locusUrl.split('/').pop();\n          identifiers.locusStartTime = this.locusInfo.fullState && this.locusInfo.fullState.lastActive;\n        }\n\n        if (options.trackingId) {\n          identifiers.trackingId = trackingId;\n        }\n\n        var payload = {};\n\n        if (options.type === _constants.MQA_STATS.CA_TYPE) {\n          payload = _metrics2.default.initMediaPayload(options.event, identifiers, options);\n        } else {\n          payload = _metrics2.default.initPayload(options.event, identifiers, options);\n        }\n\n        return payload;\n      }\n\n      return null;\n    }\n    /**\n     * Send the metrics to call-analyzer dashboard\n     * @param {Object} options\n     * @param {String} options.event\n     * @param {String} options.trackingId\n     * @param {Object} options.locus\n     * @returns {Promise}\n     * @private\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'sendCallAnalyzerMetrics',\n    value: function sendCallAnalyzerMetrics(options) {\n      var payload = this.getAnalyzerMetricsPrePayload(options);\n      return this.webex.internal.metrics.submitCallDiagnosticEvents(payload);\n    }\n    /**\n     * Send the metrics to Media Quality Analyzer dashboard\n     * @param {Object} options\n     * @param {String} options.event\n     * @param {String} options.trackingId\n     * @param {Object} options.locus\n     * @returns {Promise}\n     * @private\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'sendMediaQualityAnalyzerMetrics',\n    value: function sendMediaQualityAnalyzerMetrics(options) {\n      options.type = _constants.MQA_STATS.CA_TYPE;\n      options.clientType = this.config.metrics.clientType;\n      var payload = this.getAnalyzerMetricsPrePayload(options);\n      return this.webex.internal.metrics.submitCallDiagnosticEvents(payload);\n    }\n    /**\n     * Set up the locus info self listener\n     * update self value for members and updates the member\n     * notifies consumer with members:self:update {activeSelfId endedSelfId}\n     * @returns {undefined}\n     * @private\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'setUpLocusSelfListener',\n    value: function setUpLocusSelfListener() {\n      var _this4 = this;\n\n      this.locusInfo.on(_constants.EVENTS.LOCUS_INFO_UPDATE_SELF, function (payload) {\n        _this4.members.locusSelfUpdate(payload); // If user moved to a JOINED state and there is a pending floor grant trigger it\n\n\n        if (_this4.floorGrantPending && payload.newSelf.state === _constants.MEETING_STATE.STATES.JOINED) {\n          _this4.share().then(function () {\n            _this4.floorGrantPending = false;\n          });\n        }\n      });\n    }\n    /**\n     * Set up the locus info host listener\n     * update host value for members and updates the member\n     * notifies consumer with members:host:update: {activeHostId, endedHostId}\n     * @returns {undefined}\n     * @private\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'setUpLocusHostListener',\n    value: function setUpLocusHostListener() {\n      var _this5 = this;\n\n      this.locusInfo.on(_constants.EVENTS.LOCUS_INFO_UPDATE_HOST, function (payload) {\n        _this5.members.locusHostUpdate(payload);\n      });\n    }\n    /**\n     * Set up the locus info participants update listener\n     * update members collection value for members\n     * notifies consumer with members:update\n     * @returns {undefined}\n     * @private\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'setUpLocusParticipantsListener',\n    value: function setUpLocusParticipantsListener() {\n      var _this6 = this;\n\n      this.locusInfo.on(_constants.EVENTS.LOCUS_INFO_UPDATE_PARTICIPANTS, function (payload) {\n        _this6.members.locusParticipantsUpdate(payload);\n      });\n    }\n    /**\n     * Set up the locus info media shares listener\n     * update content sharing id value for members, and updates the member\n     * notifies consumer with members:content:update {activeContentSharingId, endedContentSharingId}\n     * @returns {undefined}\n     * @private\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'setUpLocusMediaSharesListener',\n    value: function setUpLocusMediaSharesListener() {\n      var _this7 = this;\n\n      this.locusInfo.on(_constants.EVENTS.LOCUS_INFO_UPDATE_MEDIA_SHARES, function (payload) {\n        _this7.members.locusMediaSharesUpdate(payload);\n      });\n    }\n    /**\n     * Set up the locus info url listener\n     * update locus_url value for members\n     * @returns {undefined}\n     * @private\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'setUpLocusUrlListener',\n    value: function setUpLocusUrlListener() {\n      var _this8 = this;\n\n      this.locusInfo.on(_constants.EVENTS.LOCUS_INFO_UPDATE_URL, function (payload) {\n        _this8.members.locusUrlUpdate(payload);\n      });\n    }\n    /**\n     * Set up the locus info meeting info listener\n     * @returns {undefined}\n     * @private\n     * @memberof meeting\n     */\n\n  }, {\n    key: 'setUpLocusInfoMeetingInfoListener',\n    value: function setUpLocusInfoMeetingInfoListener() {\n      var _this9 = this;\n\n      this.locusInfo.on(_constants.LOCUSINFO.EVENTS.MEETING_LOCKED, function (payload) {\n        if (payload) {\n          _triggerProxy2.default.trigger(_this9, {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingInfoListener'\n          }, _constants.EVENT_TRIGGERS.MEETING_LOCKED, {\n            payload: payload\n          });\n        }\n      });\n      this.locusInfo.on(_constants.LOCUSINFO.EVENTS.MEETING_UNLOCKED, function (payload) {\n        if (payload) {\n          _triggerProxy2.default.trigger(_this9, {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingInfoListener'\n          }, _constants.EVENT_TRIGGERS.MEETING_UNLOCKED, {\n            payload: payload\n          });\n        }\n      });\n      this.locusInfo.on(_constants.LOCUSINFO.EVENTS.MEETING_INFO_UPDATED, function (payload) {\n        if (payload && payload.info) {\n          var newCanLock = void 0;\n          var newCanUnlock = void 0;\n\n          if (payload.self && !payload.self.moderator) {\n            newCanLock = false;\n            newCanUnlock = false;\n          } else {\n            newCanLock = _util2.default.canUserLock(payload.info.moderator, payload.info.policy);\n            newCanUnlock = _util2.default.canUserUnlock(payload.info.moderator, payload.info.policy);\n          }\n\n          if (newCanLock && !_this9.inMeetingActions.canLock) {\n            _triggerProxy2.default.trigger(_this9, {\n              file: 'meeting/index',\n              function: 'setUpLocusInfoMeetingInfoListener'\n            }, _constants.EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE, {\n              canLock: true,\n              canUnlock: false,\n              canAssignHost: _this9.inMeetingActions.getCanAssignHost()\n            });\n          }\n\n          if (newCanUnlock && !_this9.inMeetingActions.canUnlock || !newCanLock) {\n            _triggerProxy2.default.trigger(_this9, {\n              file: 'meeting/index',\n              function: 'setUpLocusInfoMeetingInfoListener'\n            }, _constants.EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE, {\n              canLock: false,\n              canUnlock: true,\n              canAssignHost: _this9.inMeetingActions.getCanAssignHost()\n            });\n          }\n\n          _this9.inMeetingActions.setCanLock(newCanLock || false);\n\n          _this9.inMeetingActions.setCanUnlock(newCanUnlock || false);\n        }\n      });\n    }\n    /**\n     * Internal function to listen to the self object changes\n     * @returns {undefined}\n     * @private\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'setUpLocusInfoSelfListener',\n    value: function setUpLocusInfoSelfListener() {\n      var _this10 = this;\n\n      this.locusInfo.on(_constants.LOCUSINFO.EVENTS.SELF_MUTED_BY_OTHERS, function (payload) {\n        if (payload) {\n          _triggerProxy2.default.trigger(_this10, {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          }, _constants.EVENT_TRIGGERS.MEETING_SELF_MUTED_BY_OTHERS, {\n            payload: payload\n          });\n        }\n      });\n      this.locusInfo.on(_constants.LOCUSINFO.EVENTS.SELF_UNADMITTED_GUEST, function (payload) {\n        if (payload) {\n          _triggerProxy2.default.trigger(_this10, {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          }, _constants.EVENT_TRIGGERS.MEETING_SELF_LOBBY_WAITING, {\n            payload: payload\n          });\n\n          _metrics2.default.postEvent({\n            event: _config.eventType.LOBBY_ENTERED,\n            meeting: _this10\n          });\n        }\n      });\n      this.locusInfo.on(_constants.LOCUSINFO.EVENTS.SELF_ADMITTED_GUEST, function (payload) {\n        if (payload) {\n          _triggerProxy2.default.trigger(_this10, {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          }, _constants.EVENT_TRIGGERS.MEETING_SELF_GUEST_ADMITTED, {\n            payload: payload\n          });\n\n          _metrics2.default.postEvent({\n            event: _config.eventType.LOBBY_EXITED,\n            meeting: _this10\n          });\n        }\n      });\n    }\n    /**\n     * Add LocusInfo nested object listeners (from child to parent)\n     * @returns {undefined}\n     * @private\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'setUpLocusInfoMeetingListener',\n    value: function setUpLocusInfoMeetingListener() {\n      var _this11 = this;\n\n      this.locusInfo.on(_constants.EVENTS.REMOTE_ANSWERED_DECLINED, function (payload) {\n        _this11.meetingFiniteStateMachine.remote(payload);\n      });\n      this.locusInfo.on(_constants.EVENTS.DESTROY_MEETING, function (payload) {\n        // if self state is NOT left\n        // TODO: Handle sharing and wireless sharing when meeting end\n        if (_this11.wirelessShare) {\n          if (_this11.mediaProperties.shareTrack) {\n            _this11.mediaProperties.shareTrack.onended = null;\n\n            _this11.mediaProperties.shareTrack.stop();\n          }\n        } // when multiple WEB deviceType join with same user\n        // and some of the devices are joined and some are left\n        // when your own device is still connected you want to leave and destroy\n        // else you want to just destroy\n        // this looks odd because when it leaves it should destroy, but we get a\n        // leave response and we should destroy it on the next event loop\n        // the leave response gets parsed and we decide if we want to destroy the meeting\n        // the first time we just leave it, the second time it comes it destroys it from the collection\n\n\n        if (payload.shouldLeave) {\n          // TODO:  We should do cleaning of meeting object if the shouldLeave: false because there might be meeting object which we are not cleaning\n          _this11.leave({\n            reason: payload.reason\n          }).then(function () {\n            _loggerProxy2.default.logger.warn('meeting/index->setUpLocusInfoMeetingListener:DESTROY_MEETING#The meeting has been left, but has not been destroyed, you should see a later event for leave.');\n          }).catch(function (error) {\n            _loggerProxy2.default.logger.error('meeting/index->setUpLocusInfoMeetingListener:DESTROY_MEETING#Issue with leave for meeting, meeting still in collection: ' + _this11.meeting + ', error: ' + error);\n          });\n        } else {\n          _loggerProxy2.default.logger.info('MEETING_REMOVED_REASON', payload.reason);\n\n          _util2.default.cleanUp(_this11);\n\n          _triggerProxy2.default.trigger(_this11, {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingListener'\n          }, _constants.EVENTS.DESTROY_MEETING, {\n            reason: payload.reason,\n            meetingId: _this11.id\n          });\n        }\n      });\n    }\n    /**\n     * Set meeting values rather than events\n     * @param {Object} object\n     * @returns {undefined}\n     * @private\n     * @memberof Meeting\n     * // TODO: is this function necessary?\n     */\n\n  }, {\n    key: 'updateMeetingObject',\n    value: function updateMeetingObject(object) {\n      var _this12 = this; // Validate if these are valid meeting object property\n      // TODO: add a check to make sure the value passed in the constructor\n      // is not changed by any delta event\n\n\n      if (object && (0, _keys2.default)(object).length) {\n        (0, _keys2.default)(object).forEach(function (key) {\n          _this12[key] = object[key];\n        });\n      }\n    }\n    /**\n     * Invite a guest to the call that isn't normally part of this call\n     * @param {Object} invitee\n     * @param {String} invitee.emailAddress\n     * @param {String} invitee.email\n     * @param {Boolean} [alertIfActive]\n     * @returns {Promise} see #members.addMember\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'invite',\n    value: function invite(invitee) {\n      var alertIfActive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return this.members.addMember(invitee, alertIfActive);\n    }\n    /**\n     * Admit the guest(s) to the call once they are waiting\n     * @param {Array} memberIds\n     * @returns {Promise} see #members.admitMembers\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'admit',\n    value: function admit(memberIds) {\n      return this.members.admitMembers(memberIds);\n    }\n    /**\n     * Remove the member from the meeting, boot them\n     * @param {String} memberId\n     * @returns {Promise} see #members.removeMember\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(memberId) {\n      return this.members.removeMember(memberId);\n    }\n    /**\n     * Mute another member from the meeting\n     * @param {String} memberId\n     * @param {Boolean} mute\n     * @returns {Promise} see #members.muteMember\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'mute',\n    value: function mute(memberId) {\n      var _mute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      return this.members.muteMember(memberId, _mute);\n    }\n    /**\n     * Transfer the moderator role to another eligible member\n     * @param {String} memberId\n     * @param {Boolean} moderator\n     * @returns {Promise} see #members.transferHostToMember\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'transfer',\n    value: function transfer(memberId) {\n      var moderator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return this.members.transferHostToMember(memberId, moderator);\n    }\n    /**\n     * Reference to the Members object\n     * @returns {Members}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'getMembers',\n    value: function getMembers() {\n      return this.members;\n    }\n    /**\n     * If this gets turned off mid meeting after attaching media, it will shut down the MQA metrics and they will\n     * not restart unless the start function is called again\n     * @returns {undefined}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'cleanMQAInterval',\n    value: function cleanMQAInterval() {\n      if (this.mqaInterval) {\n        clearInterval(this.mqaInterval);\n      }\n    }\n    /**\n     * Automatically publishes media metrics data and on a config interval\n     * uses the existing getStats data filter, so no new streams are created\n     * but it is separate than history, so history will not be available\n     * @returns {MediaMetrics}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'startMediaQualityMetrics',\n    value: function startMediaQualityMetrics() {\n      var _this13 = this;\n\n      var automaticMetrics = new _metrics4.default({\n        config: this.config\n      });\n      var stats = this.getStats(automaticMetrics.initialize(), true);\n      this.mediaQualityMetrics = automaticMetrics;\n      this.mediaQualityMetrics.setStats(stats);\n      this.mqaInterval = setInterval(function () {\n        return _this13.processMQAData();\n      }, this.config.metrics.mqaMetricsInterval);\n      return automaticMetrics;\n    }\n    /**\n     * @private\n     * @returns {undefined}\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'processMQAData',\n    value: function processMQAData() {\n      var _this14 = this;\n\n      if (!this.mqaProcessor) {\n        this.mqaProcessor = new _mqaProcessor2.default();\n      }\n\n      _constants.MQA_STATS.DATA_PLACEMENTS.forEach(function (key) {\n        if (_this14.mediaQualityMetrics && _this14.mediaQualityMetrics.stats) {\n          var sendRecvData = void 0;\n\n          if (key.toLowerCase().endsWith(_constants.STATS.SENDER)) {\n            sendRecvData = _this14.mediaQualityMetrics.stats.getSender(key);\n          } else if (key.toLowerCase().endsWith(_constants.STATS.RECEIVER)) {\n            sendRecvData = _this14.mediaQualityMetrics.stats.getReceiver(key);\n          }\n\n          var mqa = void 0;\n\n          if (sendRecvData) {\n            mqa = sendRecvData.getMQA();\n          }\n\n          if (mqa) {\n            var interval = mqa.getSlice(_this14.config.metrics.mqaMetricsInterval / 1000); // milliseconds -> second based intervals\n\n            _this14.mqaProcessor.process(key, interval);\n          }\n        }\n      });\n\n      _metrics2.default.postEvent({\n        event: _config.eventType.MEDIA_QUALITY,\n        meetingId: this.id,\n        data: {\n          intervalData: this.mqaProcessor.getData()\n        }\n      });\n    }\n    /**\n     * Reference to the stats builder object\n     * @param {Object} options - see #createStats\n     * @param {Boolean} override - override the previous getStats\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'getStats',\n    value: function getStats(options, override) {\n      if (!this.stats) {\n        return this.createStats(options);\n      }\n\n      if (override) {\n        if (this.stats) {\n          _loggerProxy2.default.logger.log('Meeting:index#getStats --> Overriding the previous stats object without destroying first can result in memory leaks.');\n        }\n\n        return this.createStats(options);\n      }\n\n      return this.stats;\n    }\n    /**\n     * write the stats builder object and assign to meeting property\n     * @param {Object} options\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'createStats',\n    value: function createStats() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _util6.default.generateOptions(options, _constants.STATS.CONFIG, this);\n\n      options.config = _constants.STATS.CONFIG;\n      this.stats = new _index6.default(this.attrs, this.options, options);\n      return this.stats;\n    }\n    /**\n     * if you have started a stats instance, here's how you can stop it\n     * @returns {undefined}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'stopStats',\n    value: function stopStats() {\n      if (this.stats) {\n        this.stats.destroySenders();\n        this.stats.destroyReceivers();\n        this.stats = null;\n      }\n    }\n    /**\n     * Convenience function to tell whether a meeting is muted\n     * @returns {Boolean} if meeting audio muted or not\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'isAudioMuted',\n    value: function isAudioMuted() {\n      return this.audio && this.audio.isMuted();\n    }\n    /**\n     * Convenience function to tell if the end user last changed the audio state\n     * @returns {Boolean} if audio was manipulated by the end user\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'isAudioSelf',\n    value: function isAudioSelf() {\n      return this.audio && this.audio.isSelf();\n    }\n    /**\n     * Convenience function to tell whether video is muted\n     * @returns {Boolean} if meeting video is muted or not\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'isVideoMuted',\n    value: function isVideoMuted() {\n      return this.video && this.video.isMuted();\n    }\n    /**\n     * Convenience function to tell whether the end user changed the video state\n     * @returns {Boolean} if meeting video is muted or not\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'isVideoSelf',\n    value: function isVideoSelf() {\n      return this.video && this.video.isSelf();\n    }\n    /**\n     * Sets the meeting info on the class instance\n     * @param {Object} meetingInfo\n     * @param {Object} meetingInfo.body\n     * @param {String} meetingInfo.body.conversationUrl\n     * @param {String} meetingInfo.body.locusUrl\n     * @param {String} meetingInfo.body.sipUri\n     * @param {Object} meetingInfo.body.owner\n     * @returns {undefined}\n     * @private\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'parseMeetingInfo',\n    value: function parseMeetingInfo(meetingInfo) {\n      // MeetingInfo will be undefined for 1:1 calls\n      if (meetingInfo && meetingInfo.body && !(meetingInfo.errors && meetingInfo.errors.length > 0)) {\n        this.convoUrl = meetingInfo.body.conversationUrl || this.convoUrl;\n        this.locusUrl = meetingInfo.body.locusUrl || this.locusUrl;\n        this.setSipUri(meetingInfo.body.sipMeetingUri || this.sipUri);\n        this.owner = meetingInfo.body.owner || this.owner;\n      }\n    }\n    /**\n     * Sets the first locus info on the class instance\n     * @param {Object} locus\n     * @param {String} locus.url\n     * @param {Array} locus.participants\n     * @param {Object} locus.self\n     * @returns {undefined}\n     * @private\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'parseLocus',\n    value: function parseLocus(locus) {\n      if (locus) {\n        this.locusUrl = locus.url; // TODO: move this to parse participants module\n\n        this.setLocus(locus); // check if we can extract this info from partner\n        // Parsing of locus object must be finished at this state\n\n        if (locus.participants && locus.self) {\n          this.partner = _util2.default.getLocusPartner(locus.participants, locus.self);\n        } // For webex meeting the sipUrl gets updated in info parser\n\n\n        if (!this.sipUri && this.partner && this.type === _constants._CALL_) {\n          this.setSipUri(this.partner.person.sipUrl || this.partner.person.emailAddress || this.partner.person.email);\n        }\n      }\n    }\n    /**\n     * Sets the sip uri on the class instance\n     * uses meeting info as precedence\n     * @param {String} sipUri\n     * @returns {undefined}\n     * @private\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'setSipUri',\n    value: function setSipUri(sipUri) {\n      // This can be tel no, device id or a sip uri, user Id\n      this.sipUri = sipUri;\n    }\n    /**\n     * Set the roap seq on the class instance\n     * @param {Number} seq\n     * @returns {undefined}\n     * @private\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'setRoapSeq',\n    value: function setRoapSeq(seq) {\n      if (seq >= 0) {\n        this.roapSeq = seq;\n      }\n    }\n    /**\n     * Set the locus info the class instance\n     * @param {Object} locus\n     * @param {Array} locus.mediaConnections\n     * @param {String} locus.locusUrl\n     * @param {String} locus.locusId\n     * @param {String} locus.mediaId\n     * @param {Object} locus.host\n     * @todo change name to genertic parser\n     * @returns {undefined}\n     * @private\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'setLocus',\n    value: function setLocus(locus) {\n      var mtgLocus = locus.locus || locus; // LocusInfo object saves the locus object\n      // this.locus = mtgLocus;\n\n      this.mediaConnections = locus.mediaConnections;\n      this.locusUrl = locus.locusUrl || locus.url;\n      this.locusId = locus.locusId;\n      this.selfId = locus.selfId;\n      this.mediaId = locus.mediaId;\n      this.hostId = mtgLocus.host ? mtgLocus.host.id : this.hostId;\n      this.locusInfo.initialSetup(mtgLocus);\n    }\n    /**\n     * Sets the remote stream on the class instance and emits and\n     * event to developers\n     * @param {Object} pc The remote stream peer connection\n     * @returns {undefined}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'setRemoteStream',\n    value: function setRemoteStream(pc) {\n      var _this15 = this;\n\n      if (!pc) {\n        return;\n      } // eslint-disable-next-line no-param-reassign\n\n\n      pc.ontrack = function (event) {\n        // eslint-disable-next-line no-warning-comments\n        // TODO: It's possible for media to not be present\n        // so we might need to either\n        // A) wait until we have media flowing\n        // B) trigger a second event when video is flowing\n        _loggerProxy2.default.logger.log('Meeting:index->setRemoteStream/ontrack#Event received for peerConnection: ' + event); // const {transceiver} = event;\n\n\n        var streams = event.streams[0];\n        _this15.mediaProperties.remoteStream = streams;\n\n        _triggerProxy2.default.trigger(_this15, {\n          file: 'meeting/index',\n          function: 'setRemoteStream:pc.ontrack'\n        }, _constants.EVENT_TRIGGERS.MEDIA_READY, {\n          type: _constants.EVENT_TYPES.REMOTE_AUDIO,\n          stream: _util4.default.createMediaStream([_this15.mediaProperties.remoteStream.getAudioTracks()[0]])\n        });\n\n        _triggerProxy2.default.trigger(_this15, {\n          file: 'meeting/index',\n          function: 'setRemoteStream:pc.ontrack'\n        }, _constants.EVENT_TRIGGERS.MEDIA_READY, {\n          type: _constants.EVENT_TYPES.REMOTE_VIDEO,\n          stream: _util4.default.createMediaStream([_this15.mediaProperties.remoteStream.getVideoTracks()[0]])\n        });\n\n        if (_this15.mediaProperties.remoteStream.getVideoTracks()[1]) {\n          _this15.mediaProperties.setRemoteShare(_util4.default.createMediaStream([_this15.mediaProperties.remoteStream.getVideoTracks()[1]]));\n\n          _triggerProxy2.default.trigger(_this15, {\n            file: 'meeting/index',\n            function: 'setRemoteStream:pc.ontrack'\n          }, _constants.EVENT_TRIGGERS.MEDIA_READY, {\n            type: _constants.EVENT_TYPES.REMOTE_SHARE,\n            stream: _this15.mediaProperties.remoteShare\n          });\n        }\n      };\n    }\n    /**\n     * Removes the remote stream on the class instance and triggers an event\n     * to developers\n     * @returns {undefined}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'unsetRemoteStream',\n    value: function unsetRemoteStream() {\n      this.mediaProperties.unsetRemoteStream();\n    }\n    /**\n     * Removes the remote stream on the class instance and triggers an event\n     * to developers\n     * @returns {undefined}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'closeRemoteStream',\n    value: function closeRemoteStream() {\n      var _this16 = this;\n\n      return _media2.default.stopStream(this.mediaProperties.remoteStream).then(function () {\n        _triggerProxy2.default.trigger(_this16, {\n          file: 'meeting/index',\n          function: 'closeRemoteStream'\n        }, _constants.EVENT_TRIGGERS.MEDIA_STOPPED, {\n          type: _constants.EVENT_TYPES.REMOTE\n        });\n      });\n    }\n    /**\n     * Sets the sceen stream on the class instance and triggers and event to developers\n     * @param {Object} pc a peer connection instance for the screen\n     * @returns {undefined}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'setShareStream',\n    value: function setShareStream(pc) {\n      var _this17 = this;\n\n      if (!pc) {\n        return;\n      } // eslint-disable-next-line no-param-reassign\n\n\n      pc.ontrack = function (event) {\n        var _event$streams = (0, _slicedToArray3.default)(event.streams, 1);\n\n        _this17.mediaProperties.remoteShare = _event$streams[0];\n\n        _triggerProxy2.default.trigger(_this17, {\n          file: 'meeting/index',\n          function: 'setShareStream:pc.ontrack'\n        }, _constants.EVENT_TRIGGERS.MEDIA_READY, {\n          type: _constants.EVENT_TYPES.REMOTE_SHARE,\n          stream: _this17.mediaProperties.remoteShare\n        });\n      };\n    }\n    /**\n     * Sets the local media stream on the class and emits an event to the developer\n     * @param {Stream} localStream the local media stream\n     * @returns {undefined}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'setLocalTracks',\n    value: function setLocalTracks(localStream) {\n      if (localStream) {\n        var _MeetingUtil$getTrack = _util2.default.getTrack(localStream),\n            audioTrack = _MeetingUtil$getTrack.audioTrack,\n            videoTrack = _MeetingUtil$getTrack.videoTrack;\n\n        var settings = null;\n\n        if (audioTrack) {\n          settings = audioTrack.getSettings();\n          this.mediaProperties.setMediaSettings('audio', {\n            echoCancellation: settings.echoCancellation,\n            noiseSuppression: settings.noiseSuppression\n          });\n\n          _loggerProxy2.default.logger.log('meeting/setLocalTracks: Audio settings.', (0, _stringify2.default)(this.mediaProperties.mediaSettings.audio));\n\n          this.mediaProperties.setLocalAudioTrack(audioTrack);\n        }\n\n        if (videoTrack) {\n          settings = videoTrack.getSettings();\n          this.mediaProperties.setLocalVideoTrack(videoTrack);\n          this.mediaProperties.setMediaSettings('video', {\n            aspectRatio: settings.aspectRatio,\n            frameRate: settings.frameRate,\n            height: settings.height,\n            width: settings.width\n          });\n\n          _loggerProxy2.default.logger.log('meeting/setLocalTracks: Video settings.', (0, _stringify2.default)(this.mediaProperties.mediaSettings.video));\n        }\n\n        _triggerProxy2.default.trigger(this, {\n          file: 'meeting/index',\n          function: 'setLocalTracks'\n        }, _constants.EVENT_TRIGGERS.MEDIA_READY, {\n          type: _constants.EVENT_TYPES.LOCAL,\n          stream: _util4.default.createMediaStream([this.mediaProperties.audioTrack, this.mediaProperties.videoTrack])\n        });\n      }\n    }\n    /**\n     * Sets the local media stream on the class and emits an event to the developer\n     * @param {Stream} localShare the local media stream\n     * @returns {undefined}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'setLocalShareTrack',\n    value: function setLocalShareTrack(localShare) {\n      var _this18 = this;\n\n      var settings = null;\n\n      if (localShare) {\n        this.mediaProperties.setLocalShareTrack(_util2.default.getTrack(localShare).videoTrack);\n        var contentTracks = this.mediaProperties.shareTrack;\n\n        if (contentTracks) {\n          settings = contentTracks.getSettings();\n          this.mediaProperties.setMediaSettings('screen', {\n            aspectRatio: settings.aspectRatio,\n            frameRate: settings.frameRate,\n            height: settings.height,\n            width: settings.width,\n            displaySurface: settings.displaySurface,\n            cursor: settings.cursor\n          });\n\n          _loggerProxy2.default.logger.log('meeting/setLocalTracks: Screen settings.', (0, _stringify2.default)(this.mediaProperties.mediaSettings.screen));\n        }\n\n        contentTracks.onended = function () {\n          if (_this18.wirelessShare) {\n            _this18.leave({\n              reason: _constants.MEETING_REMOVED_REASON.USER_ENDED_SHARE_STREAMS\n            });\n          } else {\n            _this18.stopShare();\n          }\n        };\n\n        _triggerProxy2.default.trigger(this, {\n          file: 'meeting/index',\n          function: 'setLocalShareTrack'\n        }, _constants.EVENT_TRIGGERS.MEDIA_READY, {\n          type: _constants.EVENT_TYPES.LOCAL_SHARE,\n          stream: localShare\n        });\n      }\n    }\n    /**\n     * Closes the local stream from the class and emits an event to the developer\n     * @returns {undefined}\n     * @event media:stopped\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'closeLocalStream',\n    value: function closeLocalStream() {\n      var _this19 = this;\n\n      return _media2.default.stopTracks(this.mediaProperties.audioTrack).then(function () {\n        return _media2.default.stopTracks(_this19.mediaProperties.videoTrack);\n      }).then(function () {\n        _triggerProxy2.default.trigger(_this19, {\n          file: 'meeting/index',\n          function: 'closeLocalStream'\n        }, _constants.EVENT_TRIGGERS.MEDIA_STOPPED, {\n          type: _constants.EVENT_TYPES.LOCAL\n        });\n      });\n    }\n    /**\n     * Closes the local stream from the class and emits an event to the developer\n     * @returns {undefined}\n     * @event media:stopped\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'closeLocalShare',\n    value: function closeLocalShare() {\n      var _this20 = this;\n\n      return _media2.default.stopTracks(this.mediaProperties.shareTrack).then(function () {\n        _triggerProxy2.default.trigger(_this20, {\n          file: 'meeting/index',\n          function: 'closeLocalShare'\n        }, _constants.EVENT_TRIGGERS.MEDIA_STOPPED, {\n          type: _constants.EVENT_TYPES.LOCAL_SHARE\n        });\n      });\n    }\n    /**\n     * Removes the local stream from the class and emits an event to the developer\n     * @returns {undefined}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'unsetLocalVideoTrack',\n    value: function unsetLocalVideoTrack() {\n      this.mediaProperties.unsetLocalVideoTrack();\n    }\n    /**\n     * Removes the local share from the class and emits an event to the developer\n     * @returns {undefined}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'unsetLocalShareTrack',\n    value: function unsetLocalShareTrack() {\n      this.mediaProperties.unsetLocalShareTrack();\n    }\n    /**\n     * sets up reconnection logic\n     * @returns {undefined}\n     * @public\n     * @memberof Meeting\n     * @todo remove\n     * // TODO: remove??\n     */\n\n  }, {\n    key: 'setReconnectListener',\n    value: function setReconnectListener() {\n      var _this21 = this; // TODO: need to test more with the triggers for reconnect, we also need to add triggers based on getStats reports\n\n\n      if (this.config.reconnection.detection) {\n        // Client will have a socket manager and handle reconnecting to mercury, when we reconnect to mercury\n        // if the meeting has active peer connections, it should try to reconnect.\n        this.webex.internal.mercury.on(_constants.ONLINE, function () {\n          _this21.reconnect();\n        });\n      }\n    }\n    /**\n     * Close the peer connections and remove them from the class. Triggers an event\n     * when each is closed.\n     * @returns {Promise} returns a resolved promise with an array of closed peer connections\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'closePeerConnections',\n    value: function closePeerConnections() {\n      return _peerConnectionManager2.default.close(this.mediaProperties.peerConnection);\n    }\n    /**\n     * Unsets the peer connections on the class\n     * warning DO NOT CALL WITHOUT CLOSING PEER CONNECTIONS FIRST\n     * @param {PeerConnection} peerConnection\n     * @returns {undefined}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'unsetPeerConnections',\n    value: function unsetPeerConnections() {\n      this.mediaProperties.unsetPeerConnection();\n\n      if (this.config.reconnection.detection) {\n        this.webex.internal.mercury.off(_constants.ONLINE);\n      }\n    }\n    /**\n     * Convenience method to set the correlation id for the Meeting\n     * @param {String} id correlation id to set on the class\n     * @returns {undefined}\n     * @private\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'setCorrelationId',\n    value: function setCorrelationId(id) {\n      this.correlationId = id;\n    }\n    /**\n     * Mute the audio for a meeting\n     * @returns {Promise} resolves the data from muting audio {mute, self} or rejects if there is no audio set\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'muteAudio',\n    value: function muteAudio() {\n      var _this22 = this;\n\n      if (!this.audio || this.audio && !this.audio.toggle) {\n        return _promise2.default.reject(new _parameter2.default('no audio control associated to the meeting'));\n      }\n\n      return this.audio.toggle({\n        mute: true,\n        self: true\n      }).then(function () {\n        _loggerProxy2.default.logger.info('meeting/index->muteAudio#Audio mute successful.');\n\n        _metrics2.default.postEvent({\n          event: _config.eventType.MUTED,\n          meeting: _this22,\n          data: {\n            trigger: _config.trigger.USER_INTERACTION,\n            mediaType: _config.mediaType.AUDIO\n          }\n        });\n\n        return _promise2.default.resolve();\n      }).catch(function (e) {\n        _loggerProxy2.default.logger.error('meeting/index->muteAudio#Audio mute error ' + e);\n      });\n    }\n    /**\n     * Unmute meeting audio\n     * @returns {Promise} resolves data from muting audio {mute, self} or rejects if there is no audio set\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'unmuteAudio',\n    value: function unmuteAudio() {\n      var _this23 = this;\n\n      if (!this.audio || this.audio && !this.audio.toggle) {\n        return _promise2.default.reject(new _parameter2.default('no audio control associated to the meeting'));\n      }\n\n      return this.audio.toggle({\n        mute: false,\n        self: true\n      }).then(function () {\n        _metrics2.default.postEvent({\n          event: _config.eventType.UNMUTED,\n          meeting: _this23,\n          data: {\n            trigger: _config.trigger.USER_INTERACTION,\n            mediaType: _config.mediaType.AUDIO\n          }\n        });\n      });\n    }\n    /**\n     * Mute the video for a meeting\n     * @returns {Promise} resolves data from muting video {mute, self} or rejects if there is no video set\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'muteVideo',\n    value: function muteVideo() {\n      var _this24 = this;\n\n      if (!this.video || this.video && !this.video.toggle) {\n        return _promise2.default.reject(new _parameter2.default('no video control associated to the meeting'));\n      }\n\n      return this.video.toggle({\n        mute: true,\n        self: true\n      }).then(function () {\n        _metrics2.default.postEvent({\n          event: _config.eventType.MUTED,\n          meeting: _this24,\n          data: {\n            trigger: _config.trigger.USER_INTERACTION,\n            mediaType: _config.mediaType.VIDEO\n          }\n        });\n      });\n    }\n    /**\n     * Unmute meeting video\n     * @returns {Promise} resolves data from muting video {mute, self} or rejects if there is no video set\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'unmuteVideo',\n    value: function unmuteVideo() {\n      var _this25 = this;\n\n      if (!this.video || this.video && !this.video.toggle) {\n        return _promise2.default.reject(new _parameter2.default('no audio control associated to the meeting'));\n      }\n\n      var options = {};\n      options.mute = false;\n      options.self = true;\n      return this.video.toggle({\n        mute: false,\n        self: true\n      }).then(function () {\n        _metrics2.default.postEvent({\n          event: _config.eventType.UNMUTED,\n          meeting: _this25,\n          data: {\n            trigger: _config.trigger.USER_INTERACTION,\n            mediaType: _config.mediaType.VIDEO\n          }\n        });\n      });\n    }\n    /**\n     * Shorthand function to join AND set up media\n     * @param {Object} options - options to join with media\n     * @param {JoinOptions} [options.joinOptions] - see #join()\n     * @param {MediaDirection} options.mediaSettings - see #addMedia()\n     * @param {AudioVideo} [options.audioVideoOptions] - see #getMediaStreams()\n     * @returns {Promise} -- {join: see join(), media: see addMedia(), local: see getMediaStreams()}\n     * @public\n     * @memberof Meeting\n     * @example\n     * joinWithMedia({\n     *  joinOptions: {resourceId: 'resourceId' },\n     *  mediaSettings: {\n     *   sendAudio: true,\n     *   sendVideo: true,\n     *   sendShare: false,\n     *   receiveVideo:true,\n     *   receiveAudio: true,\n     *   receiveShare: true\n     * }\n     * audioVideoOptions: {\n     *   audio: 'audioDeviceId',\n     *   video: 'videoDeviceId'\n     * }})\n     */\n\n  }, {\n    key: 'joinWithMedia',\n    value: function joinWithMedia() {\n      var _this26 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; // TODO: add validations for parameters\n\n      var mediaSettings = options.mediaSettings,\n          joinOptions = options.joinOptions,\n          audioVideoOptions = options.audioVideoOptions;\n      return this.join(joinOptions).then(function (joinResponse) {\n        return _this26.getMediaStreams(mediaSettings, audioVideoOptions).then(function (_ref) {\n          var _ref2 = (0, _slicedToArray3.default)(_ref, 2),\n              localStream = _ref2[0],\n              localShare = _ref2[1];\n\n          return _this26.addMedia({\n            mediaSettings: mediaSettings,\n            localShare: localShare,\n            localStream: localStream\n          }).then(function (mediaResponse) {\n            return {\n              join: joinResponse,\n              media: mediaResponse,\n              local: [localStream, localShare]\n            };\n          });\n        });\n      }).catch(function (error) {\n        return _promise2.default.reject(error);\n      });\n    }\n    /**\n     * Initiates the reconnection of the media in the meeting\n     * @returns {Promise} resolves with {reconnect} or errors with {error}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'reconnect',\n    value: function reconnect() {\n      var _this27 = this;\n\n      if (!this.reconnectionManager || !this.reconnectionManager.reconnect) {\n        throw new _parameter2.default('Cannot reconnect, ReconnectionManager must first be defined.');\n      }\n\n      _triggerProxy2.default.trigger(this, {\n        file: 'meeting/index',\n        function: 'reconnect'\n      }, _constants.EVENT_TRIGGERS.MEETING_RECONNECTION_STARTING);\n\n      _metrics2.default.postEvent({\n        event: _config.eventType.MEDIA_RECONNECTING,\n        meeting: this\n      });\n\n      return this.reconnectionManager.reconnect(this).then(function (reconnect) {\n        _triggerProxy2.default.trigger(_this27, {\n          file: 'meeting/index',\n          function: 'reconnect'\n        }, _constants.EVENT_TRIGGERS.MEETING_RECONNECTION_SUCCESS, {\n          reconnect: reconnect\n        });\n\n        _metrics2.default.postEvent({\n          event: _config.eventType.MEDIA_RECOVERED,\n          meeting: _this27\n        });\n\n        return _promise2.default.resolve(reconnect);\n      }).catch(function (error) {\n        _triggerProxy2.default.trigger(_this27, {\n          file: 'meeting/index',\n          function: 'reconnect'\n        }, _constants.EVENT_TRIGGERS.MEETING_RECONNECTION_FAILURE, {\n          error: new _reconnection2.default('Reconnection failure event', error)\n        });\n\n        _metrics2.default.postEvent({\n          event: _config.eventType.MEDIA_RECONNECTION_FAILED,\n          meeting: _this27\n        });\n\n        return _promise2.default.reject(new _reconnection2.default('Reconnection failure event', error));\n      }).finally(function (reconnect) {\n        _this27.reconnectionManager.reset();\n\n        return _promise2.default.resolve(reconnect);\n      });\n    }\n    /**\n     * Specify joining via audio (option: pstn), video, screenshare\n     * @param {JoinOptions} options A configurable options object for joining a meeting\n     * @returns {Promise} the join response\n     * @public\n     * @memberof Meeting\n     * Scenario A: Joining own claimed personal meeting room, don't pass hostPin, do pass moderator\n     * Scenario B: Joining other's claimed personal meeting room, do pass hostPin (if desired to join as host, or nullify), do pass moderator\n     * Scenario C: Joining an unclaimed personal meeting room, -do not- pass hostPin or moderator on first try, -do- pass hostPin and moderator\n     *             if joining as host on second loop, -do not- pass hostPin do pass moderator if joining as guest on second loop\n     * Scenario D: Joining any other way (sip, pstn, convoUrl, link just need to specify resourceId)\n     */\n\n  }, {\n    key: 'join',\n    value: function join() {\n      var _this28 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; // If Move or PSTN try merging into one\n\n      if (false) {\n        _metrics2.default.postEvent({\n          event: _config.eventType.CALL_INITIATED,\n          meeting: this,\n          data: {\n            pstnAudioType: 'DIAL_IN'\n          }\n        });\n      } else {\n        _metrics2.default.postEvent({\n          event: _config.eventType.CALL_INITIATED,\n          meeting: this,\n          data: {\n            trigger: _config.trigger.USER_INTERACTION\n          }\n        });\n      } // Should PIN collection be followed by pin propt ???\n\n\n      if (options.hostPin) {\n        _metrics2.default.pinCollection({\n          meeting: this\n        });\n      }\n\n      if (this.meetingFiniteStateMachine.state === _constants.MEETING_STATE_MACHINE.STATES.ENDED) {\n        this.meetingFiniteStateMachine.reset();\n      }\n\n      if (this.meetingFiniteStateMachine.state !== _constants.MEETING_STATE_MACHINE.STATES.RINGING) {\n        this.meetingFiniteStateMachine.ring(_constants._JOIN_);\n      } // TODO: does this really need to be here?\n\n\n      if (options.resourceId && this.destination && options.resourceId === this.destination) {\n        this.wirelessShare = true;\n      }\n\n      return _util2.default.joinMeetingOptions(this, options).then(function (join) {\n        _this28.meetingFiniteStateMachine.join();\n\n        return _promise2.default.resolve(join);\n      }).catch(function (error) {\n        _this28.meetingFiniteStateMachine.fail(error);\n\n        return _promise2.default.reject(error);\n      });\n    }\n    /**\n     * Moves the call to the specified resourceId\n     * @param {String} resourceId\n     * @returns {Promise} once the move has been completed\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'moveTo',\n    value: function moveTo(resourceId) {\n      var _this29 = this;\n\n      if (!resourceId) {\n        throw new _parameter2.default('Cannot move call without a resourceId.');\n      }\n\n      _metrics2.default.mediaCapabilities({\n        meeting: this,\n        data: {\n          mediaCapabilities: {\n            rx: {\n              audio: false,\n              share: false,\n              share_audio: false,\n              video: false,\n              whiteboard: false\n            },\n            tx: {\n              audio: false,\n              share: false,\n              share_audio: false,\n              video: false,\n              whiteboard: false\n            }\n          }\n        }\n      });\n\n      _metrics2.default.moveMedia({\n        meeting: this\n      });\n\n      return _util2.default.joinMeetingOptions(this, {\n        resourceId: resourceId,\n        moveToResource: true\n      }).then(function () {\n        _this29.meetingFiniteStateMachine.join();\n\n        return _this29.updateMedia({\n          mediaSettings: {\n            sendVideo: false,\n            receiveVideo: false,\n            sendAudio: false,\n            receiveAudio: false,\n            sendShare: false,\n            receiveShare: false\n          }\n        }).then(function () {\n          return _promise2.default.resolve(_this29);\n        });\n      }).catch(function (error) {\n        _this29.meetingFiniteStateMachine.fail(error);\n\n        return _promise2.default.reject(error);\n      });\n    }\n    /**\n     * Moves the call from the specified resourceId, back to computer\n     * @param {String} resourceId\n     * @returns {Promise} once the move has been completed\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'moveFrom',\n    value: function moveFrom(resourceId) {\n      var _this30 = this;\n\n      if (!resourceId) {\n        throw new _parameter2.default('Cannot move call without a resourceId.');\n      }\n\n      var oldCorrelationId = this.correlationId;\n      this.id = _uuid2.default.v4();\n      this.webex.meetings.meetingCollection.set(this);\n\n      _metrics2.default.mediaCapabilities({\n        meeting: this,\n        data: {\n          mediaCapabilities: {\n            rx: {\n              audio: true,\n              share: true,\n              share_audio: true,\n              video: true,\n              whiteboard: true\n            },\n            tx: {\n              audio: true,\n              share: true,\n              share_audio: true,\n              video: true,\n              whiteboard: true\n            }\n          }\n        }\n      });\n\n      _metrics2.default.moveMedia({\n        meeting: this\n      });\n\n      return _util2.default.joinMeetingOptions(this).then(function (join) {\n        return _this30.getMediaStreams({\n          sendAudio: true,\n          sendVideo: true,\n          sendShare: false\n        }).then(function (_ref3) {\n          var _ref4 = (0, _slicedToArray3.default)(_ref3, 2),\n              localStream = _ref4[0],\n              localShare = _ref4[1];\n\n          return _this30.updateMedia({\n            mediaSettings: {\n              sendAudio: true,\n              receiveAudio: true,\n              sendVideo: true,\n              receiveVideo: true,\n              sendShare: false,\n              receiveShare: false\n            },\n            localStream: localStream,\n            localShare: localShare\n          }).then(function () {\n            return _promise2.default.resolve(join);\n          });\n        }).then(function () {\n          return _util2.default.leaveMeeting(_this30, {\n            resourceId: resourceId,\n            correlationId: oldCorrelationId,\n            moveMeeting: true\n          });\n        });\n      }).then(function () {\n        _this30.webex.meetings.meetingCollection.delete(oldCorrelationId);\n\n        return _promise2.default.resolve();\n      });\n    }\n    /**\n     * Get local media streams based on options passed\n     * @param {MediaDirection} mediaDirection A configurable options object for joining a meeting\n     * @param {AudioVideo} [audioVideo] audio/video object to set audioinput and videoinput devices, see #Media.getUserMedia\n     * @param {SharePreferences} [sharePreferences] audio/video object to set audioinput and videoinput devices, see #Media.getUserMedia\n     * @returns {Promise} see #Media.getUserMedia\n     * @public\n     * @todo should be static, or moved so can be called outside of a meeting\n     * @memberof Meeting\n     */\n\n    /**\n     * Get the devices from the Media module\n     * @returns {Promise} resolves to an array of DeviceInfo\n     * @memberof Meetings\n     */\n\n  }, {\n    key: 'addMedia',\n\n    /**\n     * Specify joining via audio (option: pstn), video, screenshare\n     * @param {Object} options A configurable options object for joining a meeting\n     * @param {Object} options.resourceId pass the deviceId\n     * @param {MediaDirection} options.mediaSettings pass media options\n     * @param {MediaStream} options.localStream\n     * @param {MediaStream} options.localShare\n     * @returns {Promise}\n     * @public\n     * @memberof Meeting\n     */\n    value: function addMedia() {\n      var _this31 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (_util2.default.isGuestUnjoined(this.locusInfo) && !this.wirelessShare) {\n        return _promise2.default.reject(new _media4.default('To add media, the ' + (this.guest ? 'guest' : '') + ' user must be ' + (this.guest ? 'admitted. Wait to be admitted' : 'joined to the meeting') + ' to call addMedia'));\n      }\n\n      var localStream = options.localStream,\n          localShare = options.localShare,\n          mediaSettings = options.mediaSettings;\n\n      _metrics2.default.postEvent({\n        event: _config.eventType.MEDIA_CAPABILITIES,\n        meeting: this,\n        data: {\n          mediaCapabilities: {\n            rx: {\n              audio: false,\n              share: false,\n              share_audio: false,\n              video: false,\n              whiteboard: false\n            },\n            tx: {\n              audio: false,\n              share: false,\n              share_audio: false,\n              video: false,\n              whiteboard: false\n            }\n          }\n        }\n      });\n\n      return _util2.default.validateOptions(options).then(function () {\n        if (!_this31.mediaProperties.peerConnection) {\n          _this31.mediaProperties.setMediaPeerConnection(_util4.default.createPeerConnection());\n        }\n\n        _this31.setReconnectListener();\n\n        _util2.default.setPeerConnectionEvents(_this31);\n\n        return _this31.preMedia(localStream, localShare, mediaSettings);\n      }).then(function () {\n        return _media2.default.attachMedia(_this31.mediaProperties, _this31.id).then(function (peerConnection) {\n          _loggerProxy2.default.logger.log('Meeting:index->addMedia#PeerConnection Received from attachMedia ' + peerConnection);\n\n          _this31.setRemoteStream(peerConnection);\n\n          if (_this31.config.metrics.autoSendMQA) {\n            _this31.startMediaQualityMetrics();\n          }\n\n          _util2.default.startInternalStats(_this31);\n        }).catch(function (err) {\n          _this31.logger.error('Meeting:index#join --> Error joining the call on roap initialization, ', err);\n\n          throw err;\n        }).then(function () {\n          return new _promise2.default(function (resolve, reject) {\n            var timerCount = 0; // eslint-disable-next-line func-names\n            // eslint-disable-next-line prefer-arrow-callback\n\n            if (_this31.type === _constants._CALL_) {\n              resolve();\n            }\n\n            var joiningTimer = setInterval(function () {\n              timerCount += 1;\n\n              if (_this31.meetingState === _constants.FULL_STATE.ACTIVE) {\n                clearInterval(joiningTimer);\n                resolve();\n              }\n\n              if (timerCount === 4) {\n                clearInterval(joiningTimer);\n                reject(new Error('Meeting is still not active '));\n              }\n            }, 1000);\n          });\n        }).then(function () {\n          return _this31.roap.sendRoapMediaRequest({\n            sdp: _this31.mediaProperties.peerConnection.sdp,\n            roapSeq: _this31.roapSeq,\n            meeting: _this31 // or can pass meeting ID\n\n          }).catch(function (err) {\n            _this31.logger.error('Meeting:index#join --> Error joining the call on send roap media request, ', err);\n\n            throw err;\n          });\n        }).then(function () {\n          if (mediaSettings && mediaSettings.sendShare && localShare) {\n            if (_this31.state === _constants.MEETING_STATE.STATES.JOINED) {\n              return _this31.share();\n            } // When the self state changes to JOINED then request the floor\n\n\n            _this31.floorGrantPending = true;\n          }\n\n          return _promise2.default.resolve();\n        });\n      });\n    }\n    /**\n     * Informs if the peer connection is in a state that can be updated with updateMedia (audio/video/share)\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'canUpdateMedia',\n    value: function canUpdateMedia() {\n      return this.mediaProperties.peerConnection.signalingState === _constants.SDP.STABLE;\n    }\n    /**\n     * A confluence of updateAudio, updateVideo, and updateShare\n     * this function re-establishes all of the media streams with new options\n     * @param {Object} options\n     * @param {MediaStream} options.localStream\n     * @param {MediaStream} options.localShare\n     * @param {MediaDirection} options.mediaSettings\n     * @returns {Promise}\n     * @todo fix setRemoteStream for updateMedia\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'updateMedia',\n    value: function updateMedia() {\n      var _this32 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!this.canUpdateMedia()) {\n        return _promise2.default.reject(new _media4.default('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n      }\n\n      var localStream = options.localStream,\n          localShare = options.localShare,\n          mediaSettings = options.mediaSettings;\n      var previousSendShareStatus = this.mediaProperties.mediaDirection.sendShare;\n      return _util2.default.validateOptions(options).then(function () {\n        return _this32.preMedia(localStream, localShare, mediaSettings);\n      }).then(function () {\n        return _media2.default.updateMedia(_this32.mediaProperties, _this32.id).then(function (peerConnection) {\n          _loggerProxy2.default.logger.log('Meeting:index->updateMedia#PeerConnection received from updateMedia, ' + peerConnection);\n\n          _this32.setRemoteStream(peerConnection);\n\n          if (mediaSettings.receiveShare || localShare) {\n            _peerConnectionManager2.default.setContentSlides(peerConnection);\n          }\n        }).catch(function (err) {\n          _loggerProxy2.default.logger.error('Meeting:index#updateMedia --> Error updatedMedia, ', err);\n\n          throw err;\n        }).then(function () {\n          return _this32.roap.sendRoapMediaRequest({\n            sdp: _this32.mediaProperties.peerConnection.sdp,\n            roapSeq: _this32.roapSeq,\n            meeting: _this32 // or can pass meeting ID\n\n          }).catch(function (err) {\n            _loggerProxy2.default.logger.error('Meeting:index#updateMedia --> Error updateMedia on send roap media request, ', err);\n\n            throw err;\n          });\n        }).then(function () {\n          return _this32.checkForStopShare(mediaSettings.sendShare, previousSendShareStatus);\n        }).then(function (startShare) {\n          // This is a special case if we do an /floor grant followed by /media\n          // we actually get a OFFER from the server and a GLAR condition happens\n          if (startShare) {\n            // We are assuming that the clients are connected when doing an update\n            return _this32.share();\n          }\n\n          return _promise2.default.resolve();\n        });\n      });\n    }\n    /**\n     * Update the main audio streams with new parameters\n     * @param {Object} options\n     * @param {boolean} options.sendAudio\n     * @param {boolean} options.receiveAudio\n     * @param {MediaStream} [stream]\n     * @returns {Promise}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'updateAudio',\n    value: function updateAudio(options) {\n      var _this33 = this;\n\n      if (!this.canUpdateMedia()) {\n        return _promise2.default.reject(new _media4.default('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n      }\n\n      var sendAudio = options.sendAudio,\n          receiveAudio = options.receiveAudio,\n          stream = options.stream;\n      var audioTransceiver = this.mediaProperties.peerConnection.audioTransceiver;\n\n      var track = _util2.default.getTrack(stream).audioTrack;\n\n      if (typeof sendAudio !== 'boolean' || typeof receiveAudio !== 'boolean') {\n        return _promise2.default.reject(new _parameter2.default('Pass sendVideo and receiveVideo parameter'));\n      }\n\n      return _util2.default.validateOptions({\n        sendAudio: sendAudio,\n        localStream: stream\n      }).then(function () {\n        var previousMediaDirection = {};\n\n        if (_this33.mediaProperties.mediaDirection) {\n          previousMediaDirection = {\n            sendTrack: _this33.mediaProperties.mediaDirection.sendAudio,\n            receiveTrack: _this33.mediaProperties.mediaDirection.receiveAudio\n          };\n        } else {\n          _this33.mediaProperties.mediaDirection = {};\n        }\n\n        return _util2.default.updateTransceiver({\n          type: 'audio',\n          sendTrack: options.sendAudio,\n          receiveTrack: options.receiveAudio,\n          track: track,\n          transceiver: audioTransceiver,\n          peerConnection: _this33.mediaProperties.peerConnection,\n          previousMediaDirection: previousMediaDirection\n        }, {\n          mediaProperties: _this33.mediaProperties,\n          roapSeq: _this33.roapSeq,\n          meeting: _this33,\n          id: _this33.id\n        });\n      }).then(function () {\n        _this33.setLocalTracks(stream);\n\n        _this33.mediaProperties.mediaDirection.sendAudio = sendAudio;\n        _this33.mediaProperties.mediaDirection.receiveAudio = receiveAudio; // audio state could be undefined if you have not sent audio before\n\n        _this33.audio = _this33.audio || _audio2.default.create(_this33.mediaProperties.mediaDirection, _this33);\n      });\n    }\n    /**\n     * Update the main video streams with new parameters\n     * @param {Object} options\n     * @param {boolean} options.sendVideo\n     * @param {boolean} options.receiveVideo\n     * @param {MediaStream} options.stream\n     * @returns {Promise}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'updateVideo',\n    value: function updateVideo(options) {\n      var _this34 = this;\n\n      if (!this.canUpdateMedia()) {\n        return _promise2.default.reject(new _media4.default('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n      }\n\n      var sendVideo = options.sendVideo,\n          receiveVideo = options.receiveVideo,\n          stream = options.stream;\n      var videoTransceiver = this.mediaProperties.peerConnection.videoTransceiver;\n\n      var track = _util2.default.getTrack(stream).videoTrack;\n\n      if (typeof sendVideo !== 'boolean' || typeof receiveVideo !== 'boolean') {\n        return _promise2.default.reject(new _parameter2.default('Pass sendVideo and receiveVideo parameter'));\n      }\n\n      return _util2.default.validateOptions({\n        sendVideo: sendVideo,\n        localStream: stream\n      }).then(function () {\n        return _util2.default.updateTransceiver({\n          type: 'video',\n          sendTrack: options.sendVideo,\n          receiveTrack: options.receiveVideo,\n          track: track,\n          transceiver: videoTransceiver,\n          peerConnection: _this34.mediaProperties.peerConnection,\n          previousMediaDirection: {\n            sendTrack: _this34.mediaProperties.mediaDirection.sendVideo,\n            receiveTrack: _this34.mediaProperties.mediaDirection.receiveVideo\n          }\n        }, {\n          mediaProperties: _this34.mediaProperties,\n          roapSeq: _this34.roapSeq,\n          meeting: _this34,\n          id: _this34.id\n        });\n      }).then(function () {\n        _this34.setLocalTracks(stream);\n\n        _this34.mediaProperties.mediaDirection.sendVideo = sendVideo;\n        _this34.mediaProperties.mediaDirection.receiveVideo = receiveVideo; // video state could be undefined if you have not sent video before\n\n        _this34.video = _this34.video || _video2.default.create(_this34.mediaProperties.mediaDirection, _this34);\n      });\n    }\n    /**\n     * Internal function when stopping a share stream, cleanup\n     * @param {boolean} sendShare\n     * @param {boolean} previousShareStatus\n     * @returns {Promise}\n     * @private\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'checkForStopShare',\n    value: function checkForStopShare(sendShare, previousShareStatus) {\n      if (!this.isSharing && sendShare && !previousShareStatus) {\n        // When user starts sharing\n        // return this.share();\n        return _promise2.default.resolve(true);\n      }\n\n      if (this.isSharing && !sendShare && previousShareStatus) {\n        // When user stops sharing\n        return this.stopShare().then(function () {\n          return _promise2.default.resolve(false);\n        });\n      }\n\n      return _promise2.default.resolve();\n    }\n    /**\n     * Update the share streams, can be used to start sharing\n     * @param {Object} options\n     * @param {boolean} options.sendShare\n     * @param {boolean} options.receiveShare\n     * @param {MediaStream} [stream]\n     * @returns {Promise}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'updateShare',\n    value: function updateShare(options) {\n      var _this35 = this;\n\n      if (!this.canUpdateMedia()) {\n        return _promise2.default.reject(new _media4.default('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n      }\n\n      var sendShare = options.sendShare,\n          receiveShare = options.receiveShare,\n          stream = options.stream;\n      var shareTransceiver = this.mediaProperties.peerConnection.shareTransceiver;\n\n      var track = _util2.default.getTrack(stream).videoTrack;\n\n      if (typeof sendShare !== 'boolean' || typeof receiveShare !== 'boolean') {\n        return _promise2.default.reject(new _parameter2.default('Pass sendShare and receiveShare parameter'));\n      }\n\n      var previousSendShareStatus = this.mediaProperties.mediaDirection.sendShare;\n      return _util2.default.validateOptions({\n        sendShare: sendShare,\n        localShare: stream\n      }).then(function () {\n        return _this35.checkForStopShare(sendShare, previousSendShareStatus);\n      }).then(function (startShare) {\n        return _util2.default.updateTransceiver({\n          type: 'video',\n          sendTrack: sendShare,\n          receiveTrack: receiveShare,\n          track: track,\n          transceiver: shareTransceiver,\n          peerConnection: _this35.mediaProperties.peerConnection,\n          previousMediaDirection: {\n            sendTrack: _this35.mediaProperties.mediaDirection.sendShare,\n            receiveTrack: _this35.mediaProperties.mediaDirection.receiveShare\n          }\n        }, {\n          mediaProperties: _this35.mediaProperties,\n          roapSeq: _this35.roapSeq,\n          meeting: _this35,\n          id: _this35.id\n        }).then(function () {\n          if (startShare) {\n            return _this35.share();\n          }\n\n          return _promise2.default.resolve();\n        });\n      }).then(function () {\n        _this35.setLocalShareTrack(stream);\n\n        _this35.mediaProperties.mediaDirection.sendShare = sendShare;\n        _this35.mediaProperties.mediaDirection.receiveShare = receiveShare;\n      });\n    }\n    /**\n     * Do all the attach media pre set up before executing the actual attach\n     * @param {MediaStream} localStream\n     * @param {MediaStream} localShare\n     * @param {MediaDirection} mediaSettings\n     * @returns {undefined}\n     * @private\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'preMedia',\n    value: function preMedia(localStream, localShare, mediaSettings) {\n      // eslint-disable-next-line no-warning-comments\n      // TODO wire into default config. There's currently an issue with the stateless plugin or how we register\n      this.mediaProperties.setMediaDirection((0, _assign2.default)(this.config.mediaSettings, mediaSettings)); // add a setup a function move the create and setup media in future\n      // TODO: delete old audio and video if stale\n\n      this.audio = this.audio || _audio2.default.create(this.mediaProperties.mediaDirection, this);\n      this.video = this.video || _video2.default.create(this.mediaProperties.mediaDirection, this); // Validation is already done in addMedia so no need to check if the lenght is greater then 0\n\n      this.setLocalTracks(localStream);\n      this.setLocalShareTrack(localShare);\n    }\n    /**\n     * Acknowledge the meeting, outgoing or incoming\n     * @param {String} type\n     * @returns {Promise} resolve {message, ringing, response}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'acknowledge',\n    value: function acknowledge(type) {\n      var _this36 = this;\n\n      if (!type) {\n        return _promise2.default.reject(new _parameter2.default('Type must be set to acknowledge the meeting.'));\n      }\n\n      if (type === _constants._INCOMING_) {\n        return this.meetingRequest.acknowledgeMeeting({\n          locusUrl: this.locusUrl,\n          deviceUrl: this.deviceUrl,\n          id: this.id\n        }).then(function (response) {\n          return _promise2.default.resolve(response);\n        }).then(function (response) {\n          _this36.meetingFiniteStateMachine.ring(type);\n\n          _metrics2.default.postEvent({\n            event: _config.eventType.ALERT_DISPLAYED,\n            meeting: _this36\n          });\n\n          return _promise2.default.resolve({\n            response: response\n          });\n        });\n      } // TODO: outside of 1:1 incoming, and all outgoing calls\n\n\n      return _promise2.default.resolve({\n        message: 'noop'\n      });\n    }\n    /**\n     * Decline this meeting\n     * @param {String} reason\n     * @returns {undefined}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'decline',\n    value: function decline() {\n      var _this37 = this;\n\n      var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants._BUSY_;\n      return _util2.default.declineMeeting(this, reason).then(function (decline) {\n        _this37.meetingFiniteStateMachine.decline();\n\n        return _promise2.default.resolve(decline);\n      }).catch(function (error) {\n        _this37.meetingFiniteStateMachine.fail(error);\n\n        return _promise2.default.reject(error);\n      });\n    }\n    /**\n     * Leave the current meeting\n     * @param {Object} options leave options\n     * @param {String} options.resourceId the device with which to leave from, empty if just the computer\n     * @returns {Promise}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'leave',\n    value: function leave() {\n      var _this38 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _metrics2.default.postEvent({\n        event: _config.eventType.LEAVE,\n        meeting: this,\n        data: {\n          trigger: _config.trigger.USER_INTERACTION,\n          canProceed: false\n        }\n      });\n\n      var leaveReason = options.reason || _constants.MEETING_REMOVED_REASON.CLIENT_LEAVE_REQUEST;\n      return _util2.default.leaveMeeting(this, options).then(function (leave) {\n        _this38.meetingFiniteStateMachine.leave(); // TODO: more testing before we remove this code, we are not sure the scenarios for destroy here\n\n\n        if (_this38.wirelessShare || _this38.guest) {\n          // If screen sharing clean the meeting object\n          _triggerProxy2.default.trigger(_this38, {\n            file: 'meeting/index',\n            function: 'leave'\n          }, _constants.EVENTS.DESTROY_MEETING, {\n            reason: options.reason,\n            meetingId: _this38.id\n          });\n        }\n\n        _loggerProxy2.default.logger.log('LEAVE REASON ', leaveReason);\n\n        return _promise2.default.resolve(leave);\n      }).catch(function (error) {\n        _this38.meetingFiniteStateMachine.fail(error);\n\n        return _promise2.default.reject(error);\n      });\n    }\n    /**\n     * Start sharing content with server\n     * @returns {Promise} see #meetingRequest.changeMeetingFloor\n     * @private\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'share',\n    value: function share() {\n      var _this39 = this;\n\n      var content = this.locusInfo.mediaShares.find(function (element) {\n        return element.name === _constants.CONTENT;\n      });\n\n      if (content && !this.isSharing) {\n        _metrics2.default.postEvent({\n          event: _config.eventType.SHARE_INITIATED,\n          meeting: this\n        });\n\n        return this.meetingRequest.changeMeetingFloor({\n          disposition: _constants.FLOOR_ACTION.GRANTED,\n          personUrl: this.locusInfo.self.url,\n          deviceUrl: this.deviceUrl,\n          uri: content.url,\n          resourceUrl: this.resourceUrl\n        }).then(function () {\n          _this39.isSharing = true;\n\n          _triggerProxy2.default.trigger(_this39, {\n            file: 'meeting/index',\n            function: 'share'\n          }, _constants.EVENT_TRIGGERS.MEETING_STARTED_SHARING_LOCAL);\n\n          _metrics2.default.postEvent({\n            event: _config.eventType.LOCAL_SHARE_FLOOR_GRANTED,\n            meeting: _this39\n          });\n\n          return _promise2.default.resolve();\n        }).catch(function (e) {\n          _loggerProxy2.default.logger.error('Meeting/index->share#Error ', e);\n\n          return _promise2.default.reject(e);\n        });\n      }\n\n      return _promise2.default.reject(new _parameter2.default('Cannot share without content.'));\n    }\n    /**\n     * Stops the screen share\n     * @returns {Promise} see #meetingRequest.changeMeetingFloor\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'stopShare',\n    value: function stopShare() {\n      var _this40 = this;\n\n      var content = this.locusInfo.mediaShares.find(function (element) {\n        return element.name === _constants.CONTENT;\n      });\n\n      if (content && this.isSharing) {\n        _metrics2.default.postEvent({\n          event: _config.eventType.SHARE_STOPPED,\n          meeting: this\n        });\n\n        _media2.default.stopTracks(this.mediaProperties.shareTrack);\n\n        return this.meetingRequest.changeMeetingFloor({\n          disposition: _constants.FLOOR_ACTION.RELEASED,\n          personUrl: this.locusInfo.self.url,\n          deviceUrl: this.deviceUrl,\n          uri: content.url,\n          resourceUrl: this.resourceUrl\n        }).catch(function (e) {\n          _loggerProxy2.default.logger.error('Meeting/index->stopShare#Error ', e);\n\n          return _promise2.default.reject(e);\n        }).finally(function () {\n          _this40.isSharing = false;\n\n          _triggerProxy2.default.trigger(_this40, {\n            file: 'meeting/index',\n            function: 'stopShare'\n          }, _constants.EVENT_TRIGGERS.MEETING_STOPPED_SHARING_LOCAL);\n        });\n      }\n\n      return _promise2.default.reject(new _parameter2.default('Cannot stop share without content'));\n    }\n    /**\n     * Intiate a recording of this meeting\n     * @returns {Promise}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'startRecording',\n    value: function startRecording() {\n      return _util2.default.startRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n    }\n    /**\n     * End the recording of this meeting\n     * @returns {Promise}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'stopRecording',\n    value: function stopRecording() {\n      return _util2.default.stopRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n    }\n    /**\n     * Pauses the recording of this meeting\n     * @returns {Promise}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'pauseRecording',\n    value: function pauseRecording() {\n      return _util2.default.pauseRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n    }\n    /**\n     * Resumes the recording of this meeting\n     * @returns {Promise}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'resumeRecording',\n    value: function resumeRecording() {\n      return _util2.default.resumeRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n    }\n    /**\n     * Locks the current meeting if possible\n     * @returns {Promise}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'lockMeeting',\n    value: function lockMeeting() {\n      return _util2.default.lockMeeting(this.inMeetingActions, this.meetingRequest, this.locusUrl);\n    }\n    /**\n     * Unlocks the current meeting if possible\n     * @returns {Promise}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'unlockMeeting',\n    value: function unlockMeeting() {\n      return _util2.default.unlockMeeting(this.inMeetingActions, this.meetingRequest, this.locusUrl);\n    }\n    /**\n     * Sends DTMF tones to the current meeting\n     * @param {String} tones a string of one or more DTMF tones to send\n     * @returns {Promise}\n     * @public\n     * @memberof Meeting\n     */\n\n  }, {\n    key: 'sendDTMF',\n    value: function sendDTMF(tones) {\n      var reject = function reject(message) {\n        _loggerProxy2.default.logger.error(message);\n\n        return _promise2.default.reject(new Error(message));\n      };\n\n      if (this.locusInfo && this.locusInfo.self) {\n        if (this.locusInfo.self.enableDTMF) {\n          return this.meetingRequest.sendDTMF({\n            locusUrl: this.locusInfo.self.url,\n            deviceUrl: this.deviceUrl,\n            tones: tones\n          });\n        }\n\n        return reject('Meeting:index#sendDTMF --> cannot send DTMF, meeting does not have DTMF enabled');\n      }\n\n      return reject('Meeting:index#sendDTMF --> cannot send DTMF, meeting does not have a connection to the \"locus\" call control service. Have you joined?');\n    }\n    /**\n     * Sets the quality of the local video stream\n     * @param {String} level {LOW|MEDIUM|HIGH}\n     * @returns {Promise}\n     */\n\n  }, {\n    key: 'setLocalVideoQuality',\n    value: function setLocalVideoQuality(level) {\n      var _this41 = this;\n\n      _loggerProxy2.default.logger.log('Meeting:index#setLocalVideoQuality --> Setting quality to ' + level);\n\n      if (!_constants.VIDEO_RESOLUTIONS[level]) {\n        var errorMessage = 'Meeting:index#setLocalVideoQuality --> ' + level + ' not defined';\n\n        _loggerProxy2.default.logger.error(errorMessage);\n\n        return _promise2.default.reject(new Error(errorMessage));\n      }\n\n      if (!this.mediaProperties.mediaDirection.sendVideo) {\n        var _errorMessage = 'Meeting:index#setLocalVideoQuality --> unable to change video quality, sendVideo is disabled';\n\n        _loggerProxy2.default.logger.error(_errorMessage);\n\n        return _promise2.default.reject(new Error(_errorMessage));\n      }\n\n      var mediaDirection = {\n        sendAudio: this.mediaProperties.mediaDirection.sendAudio,\n        sendVideo: this.mediaProperties.mediaDirection.sendVideo,\n        sendShare: this.mediaProperties.mediaDirection.sendShare\n      };\n      return this.getMediaStreams(mediaDirection, _constants.VIDEO_RESOLUTIONS[level]).then(function (_ref5) {\n        var _ref6 = (0, _slicedToArray3.default)(_ref5, 1),\n            localStream = _ref6[0];\n\n        return _this41.updateVideo({\n          sendVideo: true,\n          receiveVideo: true,\n          stream: localStream\n        });\n      });\n    }\n  }]);\n  return Meeting;\n}(_webexCore.StatelessWebexPlugin);\n\nexports.default = Meeting;","map":{"version":3,"sources":["index.js"],"names":["Meeting","StatelessWebexPlugin","namespace","MEETINGS","uuid","attrs","ROAP_SEQ_PRE","Members","locusUrl","parent","Roap","ReconnectionManager","MeetingStateMachine","MeetingRequest","LocusInfo","MediaProperties","InMeetingActions","EVENTS","Trigger","file","function","EVENT_TRIGGERS","canAssignHost","payload","canLock","canUnlock","LOCUSINFO","options","event","trackingId","locus","LoggerProxy","identifiers","correlationId","userId","deviceId","deviceUrl","MQA_STATS","Metrics","MEETING_STATE","newCanLock","newCanUnlock","MeetingUtil","eventType","meeting","reason","meetingId","id","object","invitee","alertIfActive","memberIds","memberId","mute","moderator","clearInterval","automaticMetrics","StatsMetrics","config","stats","MQAProcessor","sendRecvData","key","STATS","mqa","interval","data","intervalData","override","StatsUtil","WebRTCStats","meetingInfo","_CALL_","sipUri","seq","mtgLocus","pc","streams","type","EVENT_TYPES","stream","MediaUtil","remoteShare","REMOTE","localStream","audioTrack","videoTrack","settings","echoCancellation","noiseSuppression","aspectRatio","frameRate","height","width","localShare","contentTracks","displaySurface","cursor","MEETING_REMOVED_REASON","Media","LOCAL","LOCAL_SHARE","ONLINE","PeerConnectionManager","ParameterError","self","trigger","mediaType","mediaSettings","joinOptions","audioVideoOptions","join","media","local","reconnect","error","ReconnectionError","pstnAudioType","MEETING_STATE_MACHINE","_JOIN_","resourceId","mediaCapabilities","rx","audio","share","share_audio","video","whiteboard","tx","moveToResource","sendVideo","receiveVideo","sendAudio","receiveAudio","sendShare","receiveShare","oldCorrelationId","moveMeeting","audioVideo","sharePreferences","mediaDirection","response","MediaError","timerCount","resolve","joiningTimer","FULL_STATE","reject","sdp","roapSeq","SDP","previousSendShareStatus","audioTransceiver","track","previousMediaDirection","sendTrack","receiveTrack","transceiver","peerConnection","mediaProperties","AudioStateMachine","videoTransceiver","VideoStateMachine","previousShareStatus","shareTransceiver","_INCOMING_","message","_BUSY_","canProceed","leaveReason","content","element","CONTENT","disposition","FLOOR_ACTION","personUrl","uri","resourceUrl","tones","level","VIDEO_RESOLUTIONS","errorMessage"],"mappings":"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","sourcesContent":["import uuid from 'uuid';\nimport {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport Trigger from '../common/events/trigger-proxy';\nimport Roap from '../roap/index';\nimport Media from '../media';\nimport MediaProperties from '../media/properties';\nimport MeetingStateMachine from '../meeting/state';\nimport AudioStateMachine from '../meeting/audio';\nimport VideoStateMachine from '../meeting/video';\nimport LocusInfo from '../locus-info';\nimport PeerConnectionManager from '../peer-connection-manager';\nimport Metrics from '../metrics';\nimport {trigger, mediaType, eventType} from '../metrics/config';\nimport ReconnectionManager from '../reconnection-manager';\nimport MeetingRequest from '../meeting/request';\nimport Members from '../members/index';\nimport MeetingUtil from '../meeting/util';\nimport MediaUtil from '../media/util';\nimport WebRTCStats from '../stats/index';\nimport StatsMetrics from '../stats/metrics';\nimport StatsUtil from '../stats/util';\nimport ReconnectionError from '../common/errors/reconnection';\nimport {\n  MEETINGS,\n  EVENT_TRIGGERS,\n  EVENT_TYPES,\n  EVENTS,\n  FLOOR_ACTION,\n  _BUSY_,\n  _INCOMING_,\n  ONLINE,\n  _CALL_,\n  CONTENT,\n  ROAP_SEQ_PRE,\n  LOCUSINFO,\n  MEETING_STATE_MACHINE,\n  _JOIN_,\n  STATS,\n  MQA_STATS,\n  MEETING_STATE,\n  FULL_STATE,\n  MEETING_REMOVED_REASON,\n  SDP,\n  VIDEO_RESOLUTIONS\n} from '../constants';\nimport ParameterError from '../common/errors/parameter';\nimport MediaError from '../common/errors/media';\nimport MQAProcessor from '../metrics/mqa-processor';\n\nimport InMeetingActions from './in-meeting-actions';\n\n\n/**\n * MediaDirection\n * @typedef {Object} MediaDirection\n * @property {boolean} sendAudio\n * @property {boolean} receiveAudio\n * @property {boolean} sendVideo\n * @property {boolean} receiveVideo\n * @property {boolean} sendShare\n * @property {boolean} receiveShare\n */\n\n/**\n  * AudioVideo\n  * @typedef {Object} AudioVideo\n  * @property {Object} audio\n  * @property {String} audio.deviceId\n  * @property {Object} video\n  * @property {String} video.deviceId\n  */\n\n/**\n   * SharePreferences\n   * @typedef {Object} SharePreferences\n   * @property {Object} [shareConstraints]\n   * @property {Boolean} [highFrameRate]\n   */\n\n/**\n * JoinOptions\n * @typedef {Object} JoinOptions\n * @property {String} [resourceId]\n * @property {String} [hostPin]\n * @property {Boolean} [moderator]\n */\n\n/**\n * SendOptions\n * @typedef {Object} SendOptions\n * @property {Boolean} sendAudio\n * @property {Boolean} sendVideo\n * @property {Boolean} sendShare\n */\n\n/**\n  * Meeting State Change Event\n  * Emitted when ever there is a meeting state change\n  * @event meeting:stateChange\n  * @instance\n  * @type {Object}\n  * @property {String} currentState current state of the meeting\n  * @property {String} previousState previous state of the meeting\n  * @memberof Meeting\n  */\n\n/**\n  * Media Ready Event\n  * Emitted when a stream is ready to be rendered\n  * @event media:ready\n  * @instance\n  * @type {Object}\n  * @property {MediaStream} stream the media stream\n  * @property {String} type what type of stream, remote, local\n  * @memberof Meeting\n  */\n\n/**\n  * Media Stopped Event\n  * Emitted when a stream has stopped sending\n  * @event media:stopped\n  * @instance\n  * @type {Object}\n  * @property {String} type what type of stream, remote, local\n  * @memberof Meeting\n  */\n\n/**\n * Meeting Ringing Event\n * Emitted when this client should play a ringing sound, because this member is getting an incoming meeting\n * or sending out an incoming meeting\n * @event meeting:ringing\n * @instance\n * @type {Object}\n * @property {String} type // INCOMING or JOIN\n * @property {String} id\n * @memberof Meeting\n */\n\n/**\n * Meeting Ringing Stop Event\n * Emitted when this client should stop playing a ringing sound\n * @event meeting:ringingStop\n * @instance\n * @type {Object}\n * @property {Object} type\n * @property {Boolean} type.remoteAnswered\n * @property {Boolean} type.remoteDeclined\n * @property {String} id\n * @memberof Meeting\n */\n\n/**\n * Meeting Started Sharing Local Event\n * Emitted when this member starts sharing\n * @event meeting:startedSharingLocal\n * @instance\n * @type {Object}\n * @memberof Meeting\n */\n\n/**\n * Meeting Stopped Sharing Local Event\n * Emitted when this member stops sharing\n * @event meeting:stoppedSharingLocal\n * @instance\n * @type {Object}\n * @memberof Meeting\n */\n\n/**\n * Meeting Locked Event\n * Emitted when a meeting is locked\n * @event meeting:locked\n * @instance\n * @type {Object}\n * @property {Object} info\n * @memberof Meeting\n */\n\n/**\n * Meeting Unlocked Event\n * Emitted when a meeting is unlocked\n * @event meeting:unlocked\n * @instance\n * @type {Object}\n * @property {Object} info\n * @memberof Meeting\n */\n\n/**\n * Meeting Actions Update Event\n * Emitted when a user can take actions on a meeting such as lock, unlock, assign host\n * @event meeting:actionsUpdate\n * @instance\n * @type {Object}\n * @property {Boolean} canLock\n * @property {Boolean} canUnlock\n * @property {Boolean} canAssignHost\n * @memberof Meeting\n */\n\n/**\n * Meeting Muted By Others Event\n * Emitted when a member is muted by another member\n * @event meeting:self:mutedByOthers\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n * Meeting Self Guest Admitted Event\n * Emitted when a member admitted to the meeting by another member\n * @event meeting:self:guestAdmitted\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n * Meeting Self Lobby Waiting Event\n * Emitted when this member enters the lobby and is waiting for the webex meeting to begin\n * @event meeting:self:lobbyWaiting\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n  * Reconnection Starting Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionStarting\n  * @instance\n  * @memberof Meeting\n  */\n\n/**\n  * Reconnection Success Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionSuccess\n  * @instance\n  * @type {Object}\n  * @property {Object} reconnect\n  * @memberof Meeting\n  */\n\n/**\n  * Reconnection Failure Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionFailure\n  * @instance\n  * @type {Object}\n  * @property {Error} error\n  * @memberof Meeting\n  */\n\n/**\n * @description Meeting is the crux of the plugin\n * @export\n * @class Meeting\n */\nexport default class Meeting extends StatelessWebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n   * @param {Object} attrs\n   * @param {Object} options\n   * @constructor\n   * @memberof Meeting\n  */\n  constructor(attrs, options) {\n    super({}, options);\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.attrs = attrs;\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.options = options;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.id = uuid.v4();\n    this.correlationId = this.id;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.userId = attrs.userId;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.resource = attrs.resource;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.deviceUrl = attrs.deviceUrl;\n    /**\n     * @description set you -1 as default values is 0 (used to idenfify if 1st roap request was sent)\n     * @instance\n     * @type {Number}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.roapSeq = ROAP_SEQ_PRE;\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    // TODO: needs to be defined as a class\n    this.meetingInfo = {};\n    /**\n     * @instance\n     * @type {Members}\n     * @public\n     * @memberof Meeting\n     */\n    this.members = new Members({locusUrl: (attrs.locus && attrs.locus.url)}, {parent: this.webex});\n    /**\n     * @instance\n     * @type {Roap}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.roap = new Roap({}, {parent: this.webex});\n    /**\n     * created later\n     * @instance\n     * @type {ReconnectionManager}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.reconnectionManager = new ReconnectionManager(this);\n    /**\n     * created later\n     * @instance\n     * @type {AudioStateMachine}\n     * @public\n     * @memberof Meeting\n     */\n    this.audio = null;\n    /**\n     * created later\n     * @instance\n     * @type {VideoStateMachine}\n     * @public\n     * @memberof Meeting\n     */\n    this.video = null;\n    /**\n     * @instance\n     * @type {MeetingStateMachine}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.meetingFiniteStateMachine = MeetingStateMachine.create(this);\n    /**\n     * @instance\n     * @type {WebRTCStats}\n     * @public\n     * @memberof Meeting\n     */\n    this.stats = null;\n    /**\n     * @instance\n     * @type {WebRTCStats}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.internalStats = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.convoUrl = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.locusUrl = (attrs.locus && attrs.locus.url) || null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.sipUri = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.partner = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.type = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.owner = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.hostId = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.policy = null;\n    /**\n     * @instance\n     * @type {MeetingRequest}\n     * @private\n     * @memberof Meeting\n     */\n    this.meetingRequest = new MeetingRequest({}, options);\n    /**\n     * Passing only info as we send basic info for meeting added event\n     * @instance\n     * @type {MeetingRequest}\n     * @private\n     * @memberof Meeting\n     */\n    this.locusInfo = new LocusInfo(this.updateMeetingObject.bind(this), attrs.locus ? attrs.locus : {}, this.webex, this.id);\n    /**\n     * Passing only info as we send basic info for meeting added event\n     * @instance\n     * @type {MediaProperties}\n     * @public\n     * @memberof Meeting\n     */\n    this.mediaProperties = new MediaProperties();\n    /**\n     * @instance\n     * @type {InMeetingActions}\n     * @public\n     * @memberof Meeting\n    */\n    this.inMeetingActions = new InMeetingActions();\n    /**\n     * @instance\n     * @type {Boolean}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.isSharing = false;\n    /**\n     * @instance\n     * @type {Array}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.callEvents = [];\n    /**\n     * There is a pending floor requested by the user\n     * @instance\n     * @type {floorGrantPending}\n     * @private\n     * @memberof Meeting\n     */\n    this.floorGrantPending = false;\n    /**\n     * @instance\n     * @type {MediaMetrics}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.mediaQualityMetrics = null;\n    /**\n     * @instance\n     * @type {MQAProcessor}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.mqaProcessor = null;\n    this.setUpLocusInfoListeners();\n  }\n\n  /**\n   * Proxy function for all the listener set ups\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoListeners() {\n    // meeting update listeners\n    this.setUpLocusInfoSelfListener();\n    this.setUpLocusInfoMeetingListener();\n    // members update listeners\n    this.setUpLocusFullStateListener();\n    this.setUpLocusUrlListener();\n    this.setUpLocusHostListener();\n    this.setUpLocusSelfListener();\n    this.setUpLocusParticipantsListener();\n    this.setUpLocusMediaSharesListener();\n    this.setUpLocusInfoMeetingInfoListener();\n    this.setUpLocusInfoAssignHostListener();\n  }\n\n  /**\n   * Set up the locus info listener for assign host permissions on a meeting\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoAssignHostListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_CAN_ASSIGN_HOST, (payload) => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setUpLocusInfoAssignHostListener'\n        },\n        EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE,\n        {\n          canAssignHost: payload.canAssignHost,\n          canLock: this.inMeetingActions.getCanLock(),\n          canUnlock: this.inMeetingActions.getCanUnlock()\n        }\n      );\n      this.inMeetingActions.setCanAssignHost(payload.canAssignHost);\n    });\n  }\n\n  /**\n   * Set up the internal locus info full state object listener\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusFullStateListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.FULL_STATE_MEETING_STATE_CHANGE, (payload) => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setUpLocusFullStateListener'\n        },\n        EVENT_TRIGGERS.MEETING_STATE_CHANGE,\n        {\n          payload\n        }\n      );\n    });\n\n    this.locusInfo.on(LOCUSINFO.EVENTS.FULL_STATE_TYPE_UPDATE, (payload) => {\n      this.members.locusFullStateTypeUpdate(payload);\n    });\n  }\n\n  /**\n   * get the metrics payload pre\n   * @param {Object} options\n   * @param {String} options.event\n   * @param {String} options.trackingId\n   * @param {Object} options.locus\n   * @returns {Object}\n   * @memberof Meeting\n   */\n  getAnalyzerMetricsPrePayload(options) {\n    if (options) {\n      const {event, trackingId, locus} = options;\n\n      if (!event) {\n        LoggerProxy.logger.error('Error [Call Analyzer Event', event || '', `]: invalid identifers or event type! ${this.correlationId}`);\n\n        return null;\n      }\n\n      const identifiers = {\n        correlationId: this.correlationId,\n        userId: this.userId,\n        deviceId: this.deviceUrl\n      };\n\n      // If locus is passed take the value from there else use meeting object\n      if (locus) {\n        identifiers.locusId = locus.url.split('/').pop();\n        identifiers.locusStartTime = locus.fullState.lastActive;\n      }\n      else if (this.locusUrl && this.locusInfo.fullState) {\n        identifiers.locusId = this.locusUrl && this.locusUrl.split('/').pop();\n        identifiers.locusStartTime = this.locusInfo.fullState && this.locusInfo.fullState.lastActive;\n      }\n\n      if (options.trackingId) {\n        identifiers.trackingId = trackingId;\n      }\n\n      let payload = {};\n\n      if (options.type === MQA_STATS.CA_TYPE) {\n        payload = Metrics.initMediaPayload(options.event, identifiers, options);\n      }\n\n      else {\n        payload = Metrics.initPayload(options.event, identifiers, options);\n      }\n\n      return payload;\n    }\n\n    return null;\n  }\n\n  /**\n   * Send the metrics to call-analyzer dashboard\n   * @param {Object} options\n   * @param {String} options.event\n   * @param {String} options.trackingId\n   * @param {Object} options.locus\n   * @returns {Promise}\n   * @private\n   * @memberof Meeting\n   */\n  sendCallAnalyzerMetrics(options) {\n    const payload = this.getAnalyzerMetricsPrePayload(options);\n\n    return this.webex.internal.metrics.submitCallDiagnosticEvents(payload);\n  }\n\n  /**\n   * Send the metrics to Media Quality Analyzer dashboard\n   * @param {Object} options\n   * @param {String} options.event\n   * @param {String} options.trackingId\n   * @param {Object} options.locus\n   * @returns {Promise}\n   * @private\n   * @memberof Meeting\n   */\n  sendMediaQualityAnalyzerMetrics(options) {\n    options.type = MQA_STATS.CA_TYPE;\n    options.clientType = this.config.metrics.clientType;\n    const payload = this.getAnalyzerMetricsPrePayload(options);\n\n    return this.webex.internal.metrics.submitCallDiagnosticEvents(payload);\n  }\n\n  /**\n   * Set up the locus info self listener\n   * update self value for members and updates the member\n   * notifies consumer with members:self:update {activeSelfId endedSelfId}\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusSelfListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_SELF, (payload) => {\n      this.members.locusSelfUpdate(payload);\n\n      // If user moved to a JOINED state and there is a pending floor grant trigger it\n      if (this.floorGrantPending && payload.newSelf.state === MEETING_STATE.STATES.JOINED) {\n        this.share()\n          .then(() => { this.floorGrantPending = false; });\n      }\n    });\n  }\n\n  /**\n   * Set up the locus info host listener\n   * update host value for members and updates the member\n   * notifies consumer with members:host:update: {activeHostId, endedHostId}\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusHostListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_HOST, (payload) => {\n      this.members.locusHostUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info participants update listener\n   * update members collection value for members\n   * notifies consumer with members:update\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusParticipantsListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_PARTICIPANTS, (payload) => {\n      this.members.locusParticipantsUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info media shares listener\n   * update content sharing id value for members, and updates the member\n   * notifies consumer with members:content:update {activeContentSharingId, endedContentSharingId}\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusMediaSharesListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_MEDIA_SHARES, (payload) => {\n      this.members.locusMediaSharesUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info url listener\n   * update locus_url value for members\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusUrlListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_URL, (payload) => {\n      this.members.locusUrlUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info meeting info listener\n   * @returns {undefined}\n   * @private\n   * @memberof meeting\n   */\n  setUpLocusInfoMeetingInfoListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEETING_LOCKED, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingInfoListener'\n          },\n          EVENT_TRIGGERS.MEETING_LOCKED,\n          {\n            payload\n          }\n        );\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEETING_UNLOCKED, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingInfoListener'\n          },\n          EVENT_TRIGGERS.MEETING_UNLOCKED,\n          {\n            payload\n          }\n        );\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEETING_INFO_UPDATED, (payload) => {\n      if (payload && payload.info) {\n        let newCanLock;\n        let newCanUnlock;\n\n        if (payload.self && !payload.self.moderator) {\n          newCanLock = false;\n          newCanUnlock = false;\n        }\n        else {\n          newCanLock = MeetingUtil.canUserLock(payload.info.moderator, payload.info.policy);\n          newCanUnlock = MeetingUtil.canUserUnlock(payload.info.moderator, payload.info.policy);\n        }\n\n        if (newCanLock && !this.inMeetingActions.canLock) {\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'setUpLocusInfoMeetingInfoListener'\n            },\n            EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE,\n            {\n              canLock: true,\n              canUnlock: false,\n              canAssignHost: this.inMeetingActions.getCanAssignHost()\n            }\n          );\n        }\n        if (newCanUnlock && !this.inMeetingActions.canUnlock || !newCanLock) {\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'setUpLocusInfoMeetingInfoListener'\n            },\n            EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE,\n            {\n              canLock: false,\n              canUnlock: true,\n              canAssignHost: this.inMeetingActions.getCanAssignHost()\n            }\n          );\n        }\n        this.inMeetingActions.setCanLock(newCanLock || false);\n        this.inMeetingActions.setCanUnlock(newCanUnlock || false);\n      }\n    });\n  }\n\n  /**\n   * Internal function to listen to the self object changes\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoSelfListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.SELF_MUTED_BY_OTHERS, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_MUTED_BY_OTHERS,\n          {\n            payload\n          }\n        );\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.SELF_UNADMITTED_GUEST, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_LOBBY_WAITING,\n          {\n            payload\n          }\n        );\n\n        Metrics.postEvent({\n          event: eventType.LOBBY_ENTERED,\n          meeting: this\n        });\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.SELF_ADMITTED_GUEST, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_GUEST_ADMITTED,\n          {\n            payload\n          }\n        );\n\n        Metrics.postEvent({\n          event: eventType.LOBBY_EXITED,\n          meeting: this\n        });\n      }\n    });\n  }\n\n  /**\n   * Add LocusInfo nested object listeners (from child to parent)\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoMeetingListener() {\n    this.locusInfo.on(EVENTS.REMOTE_ANSWERED_DECLINED, (payload) => {\n      this.meetingFiniteStateMachine.remote(payload);\n    });\n    this.locusInfo.on(EVENTS.DESTROY_MEETING, (payload) => {\n      // if self state is NOT left\n\n      // TODO: Handle sharing and wireless sharing when meeting end\n      if (this.wirelessShare) {\n        if (this.mediaProperties.shareTrack) {\n          this.mediaProperties.shareTrack.onended = null;\n          this.mediaProperties.shareTrack.stop();\n        }\n      }\n      // when multiple WEB deviceType join with same user\n      // and some of the devices are joined and some are left\n      // when your own device is still connected you want to leave and destroy\n      // else you want to just destroy\n      // this looks odd because when it leaves it should destroy, but we get a\n      // leave response and we should destroy it on the next event loop\n      // the leave response gets parsed and we decide if we want to destroy the meeting\n      // the first time we just leave it, the second time it comes it destroys it from the collection\n      if (payload.shouldLeave) {\n        // TODO:  We should do cleaning of meeting object if the shouldLeave: false because there might be meeting object which we are not cleaning\n\n        this.leave({reason: payload.reason}).then(() => {\n          LoggerProxy.logger.warn('meeting/index->setUpLocusInfoMeetingListener:DESTROY_MEETING#The meeting has been left, but has not been destroyed, you should see a later event for leave.');\n        }).catch((error) => {\n          LoggerProxy.logger.error(`meeting/index->setUpLocusInfoMeetingListener:DESTROY_MEETING#Issue with leave for meeting, meeting still in collection: ${this.meeting}, error: ${error}`);\n        });\n      }\n      else {\n        LoggerProxy.logger.info('MEETING_REMOVED_REASON', payload.reason);\n        MeetingUtil.cleanUp(this);\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingListener'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: payload.reason,\n            meetingId: this.id\n          }\n        );\n      }\n    });\n  }\n\n  /**\n   * Set meeting values rather than events\n   * @param {Object} object\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   * // TODO: is this function necessary?\n   */\n  updateMeetingObject(object) {\n    // Validate if these are valid meeting object property\n    // TODO: add a check to make sure the value passed in the constructor\n    // is not changed by any delta event\n    if (object && Object.keys(object).length) {\n      Object.keys(object).forEach((key) => {\n        this[key] = object[key];\n      });\n    }\n  }\n\n  /**\n   * Invite a guest to the call that isn't normally part of this call\n   * @param {Object} invitee\n   * @param {String} invitee.emailAddress\n   * @param {String} invitee.email\n   * @param {Boolean} [alertIfActive]\n   * @returns {Promise} see #members.addMember\n   * @public\n   * @memberof Meeting\n   */\n  invite(invitee, alertIfActive = true) {\n    return this.members.addMember(invitee, alertIfActive);\n  }\n\n  /**\n   * Admit the guest(s) to the call once they are waiting\n   * @param {Array} memberIds\n   * @returns {Promise} see #members.admitMembers\n   * @public\n   * @memberof Meeting\n   */\n  admit(memberIds) {\n    return this.members.admitMembers(memberIds);\n  }\n\n  /**\n   * Remove the member from the meeting, boot them\n   * @param {String} memberId\n   * @returns {Promise} see #members.removeMember\n   * @public\n   * @memberof Meeting\n   */\n  remove(memberId) {\n    return this.members.removeMember(memberId);\n  }\n\n  /**\n   * Mute another member from the meeting\n   * @param {String} memberId\n   * @param {Boolean} mute\n   * @returns {Promise} see #members.muteMember\n   * @public\n   * @memberof Meeting\n   */\n  mute(memberId, mute = true) {\n    return this.members.muteMember(memberId, mute);\n  }\n\n  /**\n   * Transfer the moderator role to another eligible member\n   * @param {String} memberId\n   * @param {Boolean} moderator\n   * @returns {Promise} see #members.transferHostToMember\n   * @public\n   * @memberof Meeting\n   */\n  transfer(memberId, moderator = true) {\n    return this.members.transferHostToMember(memberId, moderator);\n  }\n\n  /**\n   * Reference to the Members object\n   * @returns {Members}\n   * @public\n   * @memberof Meeting\n   */\n  getMembers() {\n    return this.members;\n  }\n\n  /**\n   * If this gets turned off mid meeting after attaching media, it will shut down the MQA metrics and they will\n   * not restart unless the start function is called again\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  cleanMQAInterval() {\n    if (this.mqaInterval) {\n      clearInterval(this.mqaInterval);\n    }\n  }\n\n  /**\n   * Automatically publishes media metrics data and on a config interval\n   * uses the existing getStats data filter, so no new streams are created\n   * but it is separate than history, so history will not be available\n   * @returns {MediaMetrics}\n   * @public\n   * @memberof Meeting\n   */\n  startMediaQualityMetrics() {\n    const automaticMetrics = new StatsMetrics({config: this.config});\n\n    const stats = this.getStats(automaticMetrics.initialize(), true);\n\n    this.mediaQualityMetrics = automaticMetrics;\n\n    this.mediaQualityMetrics.setStats(stats);\n\n    this.mqaInterval = setInterval(() => this.processMQAData(), this.config.metrics.mqaMetricsInterval);\n\n    return automaticMetrics;\n  }\n\n  /**\n   * @private\n   * @returns {undefined}\n   * @memberof Meeting\n   */\n  processMQAData() {\n    if (!this.mqaProcessor) {\n      this.mqaProcessor = new MQAProcessor();\n    }\n\n    MQA_STATS.DATA_PLACEMENTS.forEach((key) => {\n      if (this.mediaQualityMetrics && this.mediaQualityMetrics.stats) {\n        let sendRecvData;\n\n        if (key.toLowerCase().endsWith(STATS.SENDER)) {\n          sendRecvData = this.mediaQualityMetrics.stats.getSender(key);\n        }\n        else if (key.toLowerCase().endsWith(STATS.RECEIVER)) {\n          sendRecvData = this.mediaQualityMetrics.stats.getReceiver(key);\n        }\n        let mqa;\n\n        if (sendRecvData) {\n          mqa = sendRecvData.getMQA();\n        }\n        if (mqa) {\n          const interval = mqa.getSlice(this.config.metrics.mqaMetricsInterval / 1000); // milliseconds -> second based intervals\n\n          this.mqaProcessor.process(key, interval);\n        }\n      }\n    });\n    Metrics.postEvent({event: eventType.MEDIA_QUALITY, meetingId: this.id, data: {intervalData: this.mqaProcessor.getData()}});\n  }\n\n  /**\n   * Reference to the stats builder object\n   * @param {Object} options - see #createStats\n   * @param {Boolean} override - override the previous getStats\n   * @returns {WebRTCStats}\n   * @public\n   * @memberof Meeting\n   */\n  getStats(options, override) {\n    if (!this.stats) {\n      return this.createStats(options);\n    }\n    if (override) {\n      if (this.stats) {\n        LoggerProxy.logger.log('Meeting:index#getStats --> Overriding the previous stats object without destroying first can result in memory leaks.');\n      }\n\n      return this.createStats(options);\n    }\n\n    return this.stats;\n  }\n\n  /**\n   * write the stats builder object and assign to meeting property\n   * @param {Object} options\n   * @returns {WebRTCStats}\n   * @public\n   * @memberof Meeting\n   */\n  createStats(options = {}) {\n    StatsUtil.generateOptions(options, STATS.CONFIG, this);\n\n    options.config = STATS.CONFIG;\n\n    this.stats = new WebRTCStats(this.attrs, this.options, options);\n\n    return this.stats;\n  }\n\n  /**\n   * if you have started a stats instance, here's how you can stop it\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  stopStats() {\n    if (this.stats) {\n      this.stats.destroySenders();\n      this.stats.destroyReceivers();\n      this.stats = null;\n    }\n  }\n\n  /**\n   * Convenience function to tell whether a meeting is muted\n   * @returns {Boolean} if meeting audio muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isAudioMuted() {\n    return this.audio && this.audio.isMuted();\n  }\n\n  /**\n   * Convenience function to tell if the end user last changed the audio state\n   * @returns {Boolean} if audio was manipulated by the end user\n   * @public\n   * @memberof Meeting\n   */\n  isAudioSelf() {\n    return this.audio && this.audio.isSelf();\n  }\n\n  /**\n   * Convenience function to tell whether video is muted\n   * @returns {Boolean} if meeting video is muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isVideoMuted() {\n    return this.video && this.video.isMuted();\n  }\n\n  /**\n   * Convenience function to tell whether the end user changed the video state\n   * @returns {Boolean} if meeting video is muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isVideoSelf() {\n    return this.video && this.video.isSelf();\n  }\n\n  /**\n   * Sets the meeting info on the class instance\n   * @param {Object} meetingInfo\n   * @param {Object} meetingInfo.body\n   * @param {String} meetingInfo.body.conversationUrl\n   * @param {String} meetingInfo.body.locusUrl\n   * @param {String} meetingInfo.body.sipUri\n   * @param {Object} meetingInfo.body.owner\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  parseMeetingInfo(meetingInfo) {\n    // MeetingInfo will be undefined for 1:1 calls\n    if (meetingInfo && meetingInfo.body && !(meetingInfo.errors && meetingInfo.errors.length > 0)) {\n      this.convoUrl = meetingInfo.body.conversationUrl || this.convoUrl;\n      this.locusUrl = meetingInfo.body.locusUrl || this.locusUrl;\n      this.setSipUri(meetingInfo.body.sipMeetingUri || this.sipUri);\n      this.owner = meetingInfo.body.owner || this.owner;\n    }\n  }\n\n  /**\n   * Sets the first locus info on the class instance\n   * @param {Object} locus\n   * @param {String} locus.url\n   * @param {Array} locus.participants\n   * @param {Object} locus.self\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  parseLocus(locus) {\n    if (locus) {\n      this.locusUrl = locus.url;\n      // TODO: move this to parse participants module\n      this.setLocus(locus);\n\n      // check if we can extract this info from partner\n      // Parsing of locus object must be finished at this state\n      if (locus.participants && locus.self) {\n        this.partner = MeetingUtil.getLocusPartner(locus.participants, locus.self);\n      }\n\n      // For webex meeting the sipUrl gets updated in info parser\n      if (!this.sipUri && this.partner && this.type === _CALL_) {\n        this.setSipUri(this.partner.person.sipUrl || this.partner.person.emailAddress || this.partner.person.email);\n      }\n    }\n  }\n\n  /**\n   * Sets the sip uri on the class instance\n   * uses meeting info as precedence\n   * @param {String} sipUri\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setSipUri(sipUri) {\n    // This can be tel no, device id or a sip uri, user Id\n    this.sipUri = sipUri;\n  }\n\n  /**\n   * Set the roap seq on the class instance\n   * @param {Number} seq\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setRoapSeq(seq) {\n    if (seq >= 0) {\n      this.roapSeq = seq;\n    }\n  }\n\n  /**\n   * Set the locus info the class instance\n   * @param {Object} locus\n   * @param {Array} locus.mediaConnections\n   * @param {String} locus.locusUrl\n   * @param {String} locus.locusId\n   * @param {String} locus.mediaId\n   * @param {Object} locus.host\n   * @todo change name to genertic parser\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setLocus(locus) {\n    const mtgLocus = locus.locus || locus;\n\n    // LocusInfo object saves the locus object\n    // this.locus = mtgLocus;\n    this.mediaConnections = locus.mediaConnections;\n    this.locusUrl = locus.locusUrl || locus.url;\n    this.locusId = locus.locusId;\n    this.selfId = locus.selfId;\n    this.mediaId = locus.mediaId;\n    this.hostId = mtgLocus.host ? mtgLocus.host.id : this.hostId;\n    this.locusInfo.initialSetup(mtgLocus);\n  }\n\n  /**\n   * Sets the remote stream on the class instance and emits and\n   * event to developers\n   * @param {Object} pc The remote stream peer connection\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setRemoteStream(pc) {\n    if (!pc) {\n      return;\n    }\n    // eslint-disable-next-line no-param-reassign\n    pc.ontrack = (event) => {\n      // eslint-disable-next-line no-warning-comments\n      // TODO: It's possible for media to not be present\n      // so we might need to either\n      // A) wait until we have media flowing\n      // B) trigger a second event when video is flowing\n      LoggerProxy.logger.log(`Meeting:index->setRemoteStream/ontrack#Event received for peerConnection: ${event}`);\n      // const {transceiver} = event;\n      const streams = event.streams[0];\n\n      this.mediaProperties.remoteStream = streams;\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setRemoteStream:pc.ontrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.REMOTE_AUDIO,\n          stream: MediaUtil.createMediaStream([this.mediaProperties.remoteStream.getAudioTracks()[0]])\n        }\n      );\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setRemoteStream:pc.ontrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.REMOTE_VIDEO,\n          stream: MediaUtil.createMediaStream([this.mediaProperties.remoteStream.getVideoTracks()[0]])\n        }\n      );\n\n      if (this.mediaProperties.remoteStream.getVideoTracks()[1]) {\n        this.mediaProperties.setRemoteShare(MediaUtil.createMediaStream([this.mediaProperties.remoteStream.getVideoTracks()[1]]));\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setRemoteStream:pc.ontrack'\n          },\n          EVENT_TRIGGERS.MEDIA_READY,\n          {\n            type: EVENT_TYPES.REMOTE_SHARE,\n            stream: this.mediaProperties.remoteShare\n          }\n        );\n      }\n    };\n  }\n\n  /**\n   * Removes the remote stream on the class instance and triggers an event\n   * to developers\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetRemoteStream() {\n    this.mediaProperties.unsetRemoteStream();\n  }\n\n  /**\n   * Removes the remote stream on the class instance and triggers an event\n   * to developers\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  closeRemoteStream() {\n    return Media.stopStream(this.mediaProperties.remoteStream).then(() => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'closeRemoteStream'\n        },\n        EVENT_TRIGGERS.MEDIA_STOPPED,\n        {\n          type: EVENT_TYPES.REMOTE\n        }\n      );\n    });\n  }\n\n  /**\n   * Sets the sceen stream on the class instance and triggers and event to developers\n   * @param {Object} pc a peer connection instance for the screen\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setShareStream(pc) {\n    if (!pc) {\n      return;\n    }\n    // eslint-disable-next-line no-param-reassign\n    pc.ontrack = (event) => {\n      [this.mediaProperties.remoteShare] = event.streams;\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setShareStream:pc.ontrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.REMOTE_SHARE,\n          stream: this.mediaProperties.remoteShare\n        }\n      );\n    };\n  }\n\n  /**\n   * Sets the local media stream on the class and emits an event to the developer\n   * @param {Stream} localStream the local media stream\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setLocalTracks(localStream) {\n    if (localStream) {\n      const {audioTrack, videoTrack} = MeetingUtil.getTrack(localStream);\n      let settings = null;\n\n      if (audioTrack) {\n        settings = audioTrack.getSettings();\n        this.mediaProperties.setMediaSettings('audio', {\n          echoCancellation: settings.echoCancellation,\n          noiseSuppression: settings.noiseSuppression\n        });\n\n        LoggerProxy.logger.log('meeting/setLocalTracks: Audio settings.', JSON.stringify(this.mediaProperties.mediaSettings.audio));\n        this.mediaProperties.setLocalAudioTrack(audioTrack);\n      }\n\n      if (videoTrack) {\n        settings = videoTrack.getSettings();\n        this.mediaProperties.setLocalVideoTrack(videoTrack);\n        this.mediaProperties.setMediaSettings('video', {\n          aspectRatio: settings.aspectRatio,\n          frameRate: settings.frameRate,\n          height: settings.height,\n          width: settings.width\n        });\n        LoggerProxy.logger.log('meeting/setLocalTracks: Video settings.', JSON.stringify(this.mediaProperties.mediaSettings.video));\n      }\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setLocalTracks'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.LOCAL,\n          stream: MediaUtil.createMediaStream([this.mediaProperties.audioTrack, this.mediaProperties.videoTrack])\n        }\n      );\n    }\n  }\n\n  /**\n   * Sets the local media stream on the class and emits an event to the developer\n   * @param {Stream} localShare the local media stream\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setLocalShareTrack(localShare) {\n    let settings = null;\n\n    if (localShare) {\n      this.mediaProperties.setLocalShareTrack(MeetingUtil.getTrack(localShare).videoTrack);\n      const contentTracks = this.mediaProperties.shareTrack;\n\n      if (contentTracks) {\n        settings = contentTracks.getSettings();\n        this.mediaProperties.setMediaSettings('screen', {\n          aspectRatio: settings.aspectRatio,\n          frameRate: settings.frameRate,\n          height: settings.height,\n          width: settings.width,\n          displaySurface: settings.displaySurface,\n          cursor: settings.cursor\n        });\n        LoggerProxy.logger.log('meeting/setLocalTracks: Screen settings.', JSON.stringify(this.mediaProperties.mediaSettings.screen));\n      }\n\n      contentTracks.onended = () => {\n        if (this.wirelessShare) {\n          this.leave({reason: MEETING_REMOVED_REASON.USER_ENDED_SHARE_STREAMS});\n        }\n        else {\n          this.stopShare();\n        }\n      };\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setLocalShareTrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.LOCAL_SHARE,\n          stream: localShare\n        }\n      );\n    }\n  }\n\n  /**\n   * Closes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @event media:stopped\n   * @public\n   * @memberof Meeting\n   */\n  closeLocalStream() {\n    return Media.stopTracks(this.mediaProperties.audioTrack)\n      .then(() => Media.stopTracks(this.mediaProperties.videoTrack))\n      .then(() => {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'closeLocalStream'\n          },\n          EVENT_TRIGGERS.MEDIA_STOPPED, {\n            type: EVENT_TYPES.LOCAL\n          }\n        );\n      });\n  }\n\n  /**\n   * Closes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @event media:stopped\n   * @public\n   * @memberof Meeting\n   */\n  closeLocalShare() {\n    return Media.stopTracks(this.mediaProperties.shareTrack).then(() => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'closeLocalShare'\n        },\n        EVENT_TRIGGERS.MEDIA_STOPPED, {\n          type: EVENT_TYPES.LOCAL_SHARE\n        }\n      );\n    });\n  }\n\n  /**\n   * Removes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetLocalVideoTrack() {\n    this.mediaProperties.unsetLocalVideoTrack();\n  }\n\n  /**\n   * Removes the local share from the class and emits an event to the developer\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetLocalShareTrack() {\n    this.mediaProperties.unsetLocalShareTrack();\n  }\n\n  /**\n   * sets up reconnection logic\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   * @todo remove\n   * // TODO: remove??\n   */\n  setReconnectListener() {\n    // TODO: need to test more with the triggers for reconnect, we also need to add triggers based on getStats reports\n    if (this.config.reconnection.detection) {\n      // Client will have a socket manager and handle reconnecting to mercury, when we reconnect to mercury\n      // if the meeting has active peer connections, it should try to reconnect.\n      this.webex.internal.mercury.on(ONLINE, () => {\n        this.reconnect();\n      });\n    }\n  }\n\n  /**\n   * Close the peer connections and remove them from the class. Triggers an event\n   * when each is closed.\n   * @returns {Promise} returns a resolved promise with an array of closed peer connections\n   * @public\n   * @memberof Meeting\n   */\n  closePeerConnections() {\n    return PeerConnectionManager.close(this.mediaProperties.peerConnection);\n  }\n\n  /**\n   * Unsets the peer connections on the class\n   * warning DO NOT CALL WITHOUT CLOSING PEER CONNECTIONS FIRST\n   * @param {PeerConnection} peerConnection\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetPeerConnections() {\n    this.mediaProperties.unsetPeerConnection();\n    if (this.config.reconnection.detection) {\n      this.webex.internal.mercury.off(ONLINE);\n    }\n  }\n\n  /**\n   * Convenience method to set the correlation id for the Meeting\n   * @param {String} id correlation id to set on the class\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setCorrelationId(id) {\n    this.correlationId = id;\n  }\n\n  /**\n   * Mute the audio for a meeting\n   * @returns {Promise} resolves the data from muting audio {mute, self} or rejects if there is no audio set\n   * @public\n   * @memberof Meeting\n   */\n  muteAudio() {\n    if (!this.audio || (this.audio && !this.audio.toggle)) {\n      return Promise.reject(new ParameterError('no audio control associated to the meeting'));\n    }\n\n    return this.audio.toggle({\n      mute: true,\n      self: true\n    })\n      .then(() => {\n        LoggerProxy.logger.info('meeting/index->muteAudio#Audio mute successful.');\n        Metrics.postEvent({\n          event: eventType.MUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.AUDIO}\n        });\n\n        return Promise.resolve();\n      })\n      .catch((e) => {\n        LoggerProxy.logger.error(`meeting/index->muteAudio#Audio mute error ${e}`);\n      });\n  }\n\n  /**\n   * Unmute meeting audio\n   * @returns {Promise} resolves data from muting audio {mute, self} or rejects if there is no audio set\n   * @public\n   * @memberof Meeting\n   */\n  unmuteAudio() {\n    if (!this.audio || (this.audio && !this.audio.toggle)) {\n      return Promise.reject(new ParameterError('no audio control associated to the meeting'));\n    }\n\n    return this.audio.toggle({\n      mute: false,\n      self: true\n    })\n      .then(() => {\n        Metrics.postEvent({\n          event: eventType.UNMUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.AUDIO}\n        });\n      });\n  }\n\n  /**\n   * Mute the video for a meeting\n   * @returns {Promise} resolves data from muting video {mute, self} or rejects if there is no video set\n   * @public\n   * @memberof Meeting\n   */\n  muteVideo() {\n    if (!this.video || (this.video && !this.video.toggle)) {\n      return Promise.reject(new ParameterError('no video control associated to the meeting'));\n    }\n\n    return this.video.toggle({\n      mute: true,\n      self: true\n    })\n      .then(() => {\n        Metrics.postEvent({\n          event: eventType.MUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.VIDEO}\n        });\n      });\n  }\n\n  /**\n   * Unmute meeting video\n   * @returns {Promise} resolves data from muting video {mute, self} or rejects if there is no video set\n   * @public\n   * @memberof Meeting\n   */\n  unmuteVideo() {\n    if (!this.video || (this.video && !this.video.toggle)) {\n      return Promise.reject(new ParameterError('no audio control associated to the meeting'));\n    }\n    const options = {};\n\n    options.mute = false;\n    options.self = true;\n\n    return this.video.toggle({\n      mute: false,\n      self: true\n    })\n      .then(() => {\n        Metrics.postEvent({\n          event: eventType.UNMUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.VIDEO}\n        });\n      });\n  }\n\n  /**\n   * Shorthand function to join AND set up media\n   * @param {Object} options - options to join with media\n   * @param {JoinOptions} [options.joinOptions] - see #join()\n   * @param {MediaDirection} options.mediaSettings - see #addMedia()\n   * @param {AudioVideo} [options.audioVideoOptions] - see #getMediaStreams()\n   * @returns {Promise} -- {join: see join(), media: see addMedia(), local: see getMediaStreams()}\n   * @public\n   * @memberof Meeting\n   * @example\n   * joinWithMedia({\n   *  joinOptions: {resourceId: 'resourceId' },\n   *  mediaSettings: {\n   *   sendAudio: true,\n   *   sendVideo: true,\n   *   sendShare: false,\n   *   receiveVideo:true,\n   *   receiveAudio: true,\n   *   receiveShare: true\n   * }\n   * audioVideoOptions: {\n   *   audio: 'audioDeviceId',\n   *   video: 'videoDeviceId'\n   * }})\n   */\n  joinWithMedia(options = {}) {\n    // TODO: add validations for parameters\n    const {mediaSettings, joinOptions, audioVideoOptions} = options;\n\n    return this.join(joinOptions)\n      .then((joinResponse) =>\n        this.getMediaStreams(mediaSettings, audioVideoOptions).then(([localStream, localShare]) =>\n          this.addMedia({\n            mediaSettings,\n            localShare,\n            localStream\n          }).then((mediaResponse) => ({\n            join: joinResponse,\n            media: mediaResponse,\n            local: [localStream, localShare]\n          }))))\n      .catch((error) => Promise.reject(error));\n  }\n\n  /**\n   * Initiates the reconnection of the media in the meeting\n   * @returns {Promise} resolves with {reconnect} or errors with {error}\n   * @public\n   * @memberof Meeting\n   */\n  reconnect() {\n    if (!this.reconnectionManager || !this.reconnectionManager.reconnect) {\n      throw new ParameterError('Cannot reconnect, ReconnectionManager must first be defined.');\n    }\n    Trigger.trigger(\n      this,\n      {\n        file: 'meeting/index',\n        function: 'reconnect'\n      },\n      EVENT_TRIGGERS.MEETING_RECONNECTION_STARTING\n    );\n    Metrics.postEvent({event: eventType.MEDIA_RECONNECTING, meeting: this});\n\n    return this.reconnectionManager\n      .reconnect(this)\n      .then((reconnect) => {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'reconnect'\n          },\n          EVENT_TRIGGERS.MEETING_RECONNECTION_SUCCESS,\n          {\n            reconnect\n          }\n        );\n        Metrics.postEvent({\n          event: eventType.MEDIA_RECOVERED,\n          meeting: this\n        });\n\n        return Promise.resolve(reconnect);\n      })\n      .catch((error) => {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'reconnect'\n          },\n          EVENT_TRIGGERS.MEETING_RECONNECTION_FAILURE,\n          {\n            error: new ReconnectionError('Reconnection failure event', error)\n          }\n        );\n        Metrics.postEvent({\n          event: eventType.MEDIA_RECONNECTION_FAILED,\n          meeting: this\n        });\n\n        return Promise.reject(new ReconnectionError('Reconnection failure event', error));\n      })\n      .finally((reconnect) => {\n        this.reconnectionManager.reset();\n\n        return Promise.resolve(reconnect);\n      });\n  }\n\n  /**\n   * Specify joining via audio (option: pstn), video, screenshare\n   * @param {JoinOptions} options A configurable options object for joining a meeting\n   * @returns {Promise} the join response\n   * @public\n   * @memberof Meeting\n   * Scenario A: Joining own claimed personal meeting room, don't pass hostPin, do pass moderator\n   * Scenario B: Joining other's claimed personal meeting room, do pass hostPin (if desired to join as host, or nullify), do pass moderator\n   * Scenario C: Joining an unclaimed personal meeting room, -do not- pass hostPin or moderator on first try, -do- pass hostPin and moderator\n   *             if joining as host on second loop, -do not- pass hostPin do pass moderator if joining as guest on second loop\n   * Scenario D: Joining any other way (sip, pstn, convoUrl, link just need to specify resourceId)\n   */\n  join(options = {}) {\n    // If Move or PSTN try merging into one\n    if (false) {\n      Metrics.postEvent({\n        event: eventType.CALL_INITIATED,\n        meeting: this,\n        data: {pstnAudioType: 'DIAL_IN'}\n      });\n    }\n    else {\n      Metrics.postEvent({\n        event: eventType.CALL_INITIATED,\n        meeting: this,\n        data: {trigger: trigger.USER_INTERACTION}\n      });\n    }\n\n    // Should PIN collection be followed by pin propt ???\n    if (options.hostPin) {\n      Metrics.pinCollection({meeting: this});\n    }\n\n    if (this.meetingFiniteStateMachine.state === MEETING_STATE_MACHINE.STATES.ENDED) {\n      this.meetingFiniteStateMachine.reset();\n    }\n    if (this.meetingFiniteStateMachine.state !== MEETING_STATE_MACHINE.STATES.RINGING) {\n      this.meetingFiniteStateMachine.ring(_JOIN_);\n    }\n\n    // TODO: does this really need to be here?\n    if (options.resourceId && this.destination && options.resourceId === this.destination) {\n      this.wirelessShare = true;\n    }\n\n    return MeetingUtil.joinMeetingOptions(this, options).then((join) => {\n      this.meetingFiniteStateMachine.join();\n\n      return Promise.resolve(join);\n    }).catch((error) => {\n      this.meetingFiniteStateMachine.fail(error);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Moves the call to the specified resourceId\n   * @param {String} resourceId\n   * @returns {Promise} once the move has been completed\n   * @public\n   * @memberof Meeting\n   */\n  moveTo(resourceId) {\n    if (!resourceId) {\n      throw new ParameterError('Cannot move call without a resourceId.');\n    }\n\n    Metrics.mediaCapabilities({\n      meeting: this,\n      data: {\n        mediaCapabilities: {\n          rx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          },\n          tx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          }\n        }\n      }\n    });\n    Metrics.moveMedia({meeting: this});\n\n    return MeetingUtil.joinMeetingOptions(this, {resourceId, moveToResource: true}).then(() => {\n      this.meetingFiniteStateMachine.join();\n\n      return this.updateMedia({\n        mediaSettings: {\n          sendVideo: false, receiveVideo: false, sendAudio: false, receiveAudio: false, sendShare: false, receiveShare: false\n        }\n      }).then(() => Promise.resolve(this));\n    }).catch((error) => {\n      this.meetingFiniteStateMachine.fail(error);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Moves the call from the specified resourceId, back to computer\n   * @param {String} resourceId\n   * @returns {Promise} once the move has been completed\n   * @public\n   * @memberof Meeting\n   */\n  moveFrom(resourceId) {\n    if (!resourceId) {\n      throw new ParameterError('Cannot move call without a resourceId.');\n    }\n    const oldCorrelationId = this.correlationId;\n\n    this.id = uuid.v4();\n\n    this.webex.meetings.meetingCollection.set(this);\n\n    Metrics.mediaCapabilities({\n      meeting: this,\n      data: {\n        mediaCapabilities: {\n          rx: {\n            audio: true,\n            share: true,\n            share_audio: true,\n            video: true,\n            whiteboard: true\n          },\n          tx: {\n            audio: true,\n            share: true,\n            share_audio: true,\n            video: true,\n            whiteboard: true\n          }\n        }\n      }\n    });\n    Metrics.moveMedia({meeting: this});\n\n    return MeetingUtil.joinMeetingOptions(this).then((join) => this.getMediaStreams({sendAudio: true, sendVideo: true, sendShare: false})\n      .then(([localStream, localShare]) =>\n        this.updateMedia({\n          mediaSettings: {\n            sendAudio: true, receiveAudio: true, sendVideo: true, receiveVideo: true, sendShare: false, receiveShare: false\n          },\n          localStream,\n          localShare\n        })\n          .then(() => Promise.resolve(join)))\n      .then(() => MeetingUtil.leaveMeeting(this, {resourceId, correlationId: oldCorrelationId, moveMeeting: true})))\n      .then(() => {\n        this.webex.meetings.meetingCollection.delete(oldCorrelationId);\n\n        return Promise.resolve();\n      });\n  }\n\n  /**\n   * Get local media streams based on options passed\n   * @param {MediaDirection} mediaDirection A configurable options object for joining a meeting\n   * @param {AudioVideo} [audioVideo] audio/video object to set audioinput and videoinput devices, see #Media.getUserMedia\n   * @param {SharePreferences} [sharePreferences] audio/video object to set audioinput and videoinput devices, see #Media.getUserMedia\n   * @returns {Promise} see #Media.getUserMedia\n   * @public\n   * @todo should be static, or moved so can be called outside of a meeting\n   * @memberof Meeting\n   */\n  getMediaStreams = (mediaDirection, audioVideo = {}, sharePreferences) => {\n    if (mediaDirection && (mediaDirection.sendAudio || mediaDirection.sendVideo || mediaDirection.sendShare)) {\n      return Media.getUserMedia(mediaDirection, audioVideo, sharePreferences)\n        .then((response) => {\n          if (!response[0] && !response[1]) {\n            return Promise.reject(new MediaError('Was not able to retrive media Stream'));\n          }\n\n          return Promise.resolve(response);\n        });\n    }\n\n    return Promise.reject(new MediaError('Atleaset one of the mediaDirection value should be true'));\n  }\n\n  /**\n   * Get the devices from the Media module\n   * @returns {Promise} resolves to an array of DeviceInfo\n   * @memberof Meetings\n   */\n  getDevices = () => Media.getDevices();\n\n  /**\n   * Specify joining via audio (option: pstn), video, screenshare\n   * @param {Object} options A configurable options object for joining a meeting\n   * @param {Object} options.resourceId pass the deviceId\n   * @param {MediaDirection} options.mediaSettings pass media options\n   * @param {MediaStream} options.localStream\n   * @param {MediaStream} options.localShare\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  addMedia(options = {}) {\n    if (MeetingUtil.isGuestUnjoined(this.locusInfo) && !this.wirelessShare) {\n      return Promise.reject(new MediaError(`To add media, the ${this.guest ? 'guest' : ''} user must be ${this.guest ? 'admitted. Wait to be admitted' : 'joined to the meeting'} to call addMedia`));\n    }\n    const {localStream, localShare, mediaSettings} = options;\n\n    Metrics.postEvent({\n      event: eventType.MEDIA_CAPABILITIES,\n      meeting: this,\n      data: {\n        mediaCapabilities: {\n          rx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          },\n          tx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          }\n        }\n      }\n    });\n\n    return MeetingUtil.validateOptions(options)\n      .then(() => {\n        if (!this.mediaProperties.peerConnection) {\n          this.mediaProperties.setMediaPeerConnection(MediaUtil.createPeerConnection());\n        }\n        this.setReconnectListener();\n        MeetingUtil.setPeerConnectionEvents(this);\n\n        return this.preMedia(localStream, localShare, mediaSettings);\n      })\n      .then(() => Media.attachMedia(this.mediaProperties, this.id)\n        .then((peerConnection) => {\n          LoggerProxy.logger.log(`Meeting:index->addMedia#PeerConnection Received from attachMedia ${peerConnection}`);\n          this.setRemoteStream(peerConnection);\n          if (this.config.metrics.autoSendMQA) {\n            this.startMediaQualityMetrics();\n          }\n          MeetingUtil.startInternalStats(this);\n        })\n        .catch((err) => {\n          this.logger.error('Meeting:index#join --> Error joining the call on roap initialization, ', err);\n          throw err;\n        })\n        .then(() => new Promise((resolve, reject) => {\n          let timerCount = 0;\n\n          // eslint-disable-next-line func-names\n          // eslint-disable-next-line prefer-arrow-callback\n          if (this.type === _CALL_) {\n            resolve();\n          }\n          const joiningTimer = setInterval(() => {\n            timerCount += 1;\n            if (this.meetingState === FULL_STATE.ACTIVE) {\n              clearInterval(joiningTimer);\n              resolve();\n            }\n\n            if (timerCount === 4) {\n              clearInterval(joiningTimer);\n              reject(new Error('Meeting is still not active '));\n            }\n          }, 1000);\n        }))\n        .then(() => this.roap\n          .sendRoapMediaRequest({\n            sdp: this.mediaProperties.peerConnection.sdp,\n            roapSeq: this.roapSeq,\n            meeting: this // or can pass meeting ID\n          })\n          .catch((err) => {\n            this.logger.error('Meeting:index#join --> Error joining the call on send roap media request, ', err);\n            throw err;\n          }))\n\n        .then(() => {\n          if (mediaSettings && mediaSettings.sendShare && localShare) {\n            if (this.state === MEETING_STATE.STATES.JOINED) {\n              return this.share();\n            }\n\n            // When the self state changes to JOINED then request the floor\n            this.floorGrantPending = true;\n          }\n\n          return Promise.resolve();\n        }));\n  }\n\n  /**\n   * Informs if the peer connection is in a state that can be updated with updateMedia (audio/video/share)\n   * @returns {Boolean}\n   */\n  canUpdateMedia() {\n    return this.mediaProperties.peerConnection.signalingState === SDP.STABLE;\n  }\n\n  /**\n   * A confluence of updateAudio, updateVideo, and updateShare\n   * this function re-establishes all of the media streams with new options\n   * @param {Object} options\n   * @param {MediaStream} options.localStream\n   * @param {MediaStream} options.localShare\n   * @param {MediaDirection} options.mediaSettings\n   * @returns {Promise}\n   * @todo fix setRemoteStream for updateMedia\n   * @public\n   * @memberof Meeting\n   */\n  updateMedia(options = {}) {\n    if (!this.canUpdateMedia()) {\n      return Promise.reject(new MediaError('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n    }\n    const {localStream, localShare, mediaSettings} = options;\n\n    const previousSendShareStatus = this.mediaProperties.mediaDirection.sendShare;\n\n    return MeetingUtil.validateOptions(options)\n      .then(() => this.preMedia(localStream, localShare, mediaSettings))\n      .then(() => Media.updateMedia(this.mediaProperties, this.id)\n        .then((peerConnection) => {\n          LoggerProxy.logger.log(`Meeting:index->updateMedia#PeerConnection received from updateMedia, ${peerConnection}`);\n          this.setRemoteStream(peerConnection);\n          if (mediaSettings.receiveShare || localShare) {\n            PeerConnectionManager.setContentSlides(peerConnection);\n          }\n        })\n        .catch((err) => {\n          LoggerProxy.logger.error('Meeting:index#updateMedia --> Error updatedMedia, ', err);\n          throw err;\n        })\n        .then(() =>\n          this.roap\n            .sendRoapMediaRequest({\n              sdp: this.mediaProperties.peerConnection.sdp,\n              roapSeq: this.roapSeq,\n              meeting: this // or can pass meeting ID\n            })\n            .catch((err) => {\n              LoggerProxy.logger.error('Meeting:index#updateMedia --> Error updateMedia on send roap media request, ', err);\n              throw err;\n            }))\n        .then(() => this.checkForStopShare(mediaSettings.sendShare, previousSendShareStatus))\n        .then((startShare) => {\n          // This is a special case if we do an /floor grant followed by /media\n          // we actually get a OFFER from the server and a GLAR condition happens\n          if (startShare) {\n            // We are assuming that the clients are connected when doing an update\n            return this.share();\n          }\n\n          return Promise.resolve();\n        }));\n  }\n\n  /**\n   * Update the main audio streams with new parameters\n   * @param {Object} options\n   * @param {boolean} options.sendAudio\n   * @param {boolean} options.receiveAudio\n   * @param {MediaStream} [stream]\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  updateAudio(options) {\n    if (!this.canUpdateMedia()) {\n      return Promise.reject(new MediaError('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n    }\n    const {sendAudio, receiveAudio, stream} = options;\n    const {audioTransceiver} = this.mediaProperties.peerConnection;\n    const track = MeetingUtil.getTrack(stream).audioTrack;\n\n    if (typeof sendAudio !== 'boolean' || typeof receiveAudio !== 'boolean') {\n      return Promise.reject(new ParameterError('Pass sendVideo and receiveVideo parameter'));\n    }\n\n    return MeetingUtil.validateOptions({sendAudio, localStream: stream})\n      .then(() => {\n        let previousMediaDirection = {};\n\n        if (this.mediaProperties.mediaDirection) {\n          previousMediaDirection = {\n            sendTrack: this.mediaProperties.mediaDirection.sendAudio,\n            receiveTrack: this.mediaProperties.mediaDirection.receiveAudio\n          };\n        }\n        else {\n          this.mediaProperties.mediaDirection = {};\n        }\n\n        return MeetingUtil.updateTransceiver(\n          {\n            type: 'audio',\n            sendTrack: options.sendAudio,\n            receiveTrack: options.receiveAudio,\n            track,\n            transceiver: audioTransceiver,\n            peerConnection: this.mediaProperties.peerConnection,\n            previousMediaDirection\n          },\n          {\n            mediaProperties: this.mediaProperties,\n            roapSeq: this.roapSeq,\n            meeting: this,\n            id: this.id\n          }\n        );\n      })\n      .then(() => {\n        this.setLocalTracks(stream);\n        this.mediaProperties.mediaDirection.sendAudio = sendAudio;\n        this.mediaProperties.mediaDirection.receiveAudio = receiveAudio;\n\n        // audio state could be undefined if you have not sent audio before\n        this.audio = this.audio || AudioStateMachine.create(this.mediaProperties.mediaDirection, this);\n      });\n  }\n\n  /**\n   * Update the main video streams with new parameters\n   * @param {Object} options\n   * @param {boolean} options.sendVideo\n   * @param {boolean} options.receiveVideo\n   * @param {MediaStream} options.stream\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  updateVideo(options) {\n    if (!this.canUpdateMedia()) {\n      return Promise.reject(new MediaError('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n    }\n    const {sendVideo, receiveVideo, stream} = options;\n    const {videoTransceiver} = this.mediaProperties.peerConnection;\n    const track = MeetingUtil.getTrack(stream).videoTrack;\n\n    if (typeof sendVideo !== 'boolean' || typeof receiveVideo !== 'boolean') {\n      return Promise.reject(new ParameterError('Pass sendVideo and receiveVideo parameter'));\n    }\n\n    return MeetingUtil.validateOptions({sendVideo, localStream: stream})\n      .then(() => MeetingUtil.updateTransceiver({\n        type: 'video',\n        sendTrack: options.sendVideo,\n        receiveTrack: options.receiveVideo,\n        track,\n        transceiver: videoTransceiver,\n        peerConnection: this.mediaProperties.peerConnection,\n        previousMediaDirection: {\n          sendTrack: this.mediaProperties.mediaDirection.sendVideo,\n          receiveTrack: this.mediaProperties.mediaDirection.receiveVideo\n        }\n      },\n      {\n        mediaProperties: this.mediaProperties,\n        roapSeq: this.roapSeq,\n        meeting: this,\n        id: this.id\n      }))\n      .then(() => {\n        this.setLocalTracks(stream);\n        this.mediaProperties.mediaDirection.sendVideo = sendVideo;\n        this.mediaProperties.mediaDirection.receiveVideo = receiveVideo;\n\n        // video state could be undefined if you have not sent video before\n        this.video = this.video || VideoStateMachine.create(this.mediaProperties.mediaDirection, this);\n      });\n  }\n\n  /**\n   * Internal function when stopping a share stream, cleanup\n   * @param {boolean} sendShare\n   * @param {boolean} previousShareStatus\n   * @returns {Promise}\n   * @private\n   * @memberof Meeting\n   */\n  checkForStopShare(sendShare, previousShareStatus) {\n    if (!this.isSharing && sendShare &&\n      !previousShareStatus) {\n      // When user starts sharing\n      // return this.share();\n      return Promise.resolve(true);\n    }\n    if (this.isSharing && !sendShare &&\n      previousShareStatus) {\n      // When user stops sharing\n      return this.stopShare()\n        .then(() => Promise.resolve(false));\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Update the share streams, can be used to start sharing\n   * @param {Object} options\n   * @param {boolean} options.sendShare\n   * @param {boolean} options.receiveShare\n   * @param {MediaStream} [stream]\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  updateShare(options) {\n    if (!this.canUpdateMedia()) {\n      return Promise.reject(new MediaError('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n    }\n    const {sendShare, receiveShare, stream} = options;\n    const {shareTransceiver} = this.mediaProperties.peerConnection;\n    const track = MeetingUtil.getTrack(stream).videoTrack;\n\n    if (typeof sendShare !== 'boolean' || typeof receiveShare !== 'boolean') {\n      return Promise.reject(new ParameterError('Pass sendShare and receiveShare parameter'));\n    }\n    const previousSendShareStatus = this.mediaProperties.mediaDirection.sendShare;\n\n    return MeetingUtil.validateOptions({sendShare, localShare: stream})\n      .then(() => this.checkForStopShare(sendShare, previousSendShareStatus))\n      .then((startShare) => MeetingUtil.updateTransceiver({\n        type: 'video',\n        sendTrack: sendShare,\n        receiveTrack: receiveShare,\n        track,\n        transceiver: shareTransceiver,\n        peerConnection: this.mediaProperties.peerConnection,\n        previousMediaDirection: {\n          sendTrack: this.mediaProperties.mediaDirection.sendShare,\n          receiveTrack: this.mediaProperties.mediaDirection.receiveShare\n        }\n      },\n      {\n        mediaProperties: this.mediaProperties,\n        roapSeq: this.roapSeq,\n        meeting: this,\n        id: this.id\n      })\n        .then(() => {\n          if (startShare) {\n            return this.share();\n          }\n\n          return Promise.resolve();\n        }))\n      .then(() => {\n        this.setLocalShareTrack(stream);\n        this.mediaProperties.mediaDirection.sendShare = sendShare;\n        this.mediaProperties.mediaDirection.receiveShare = receiveShare;\n      });\n  }\n\n  /**\n   * Do all the attach media pre set up before executing the actual attach\n   * @param {MediaStream} localStream\n   * @param {MediaStream} localShare\n   * @param {MediaDirection} mediaSettings\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  preMedia(localStream, localShare, mediaSettings) {\n    // eslint-disable-next-line no-warning-comments\n    // TODO wire into default config. There's currently an issue with the stateless plugin or how we register\n    this.mediaProperties.setMediaDirection(Object.assign(this.config.mediaSettings, mediaSettings));\n    // add a setup a function move the create and setup media in future\n    // TODO: delete old audio and video if stale\n    this.audio = this.audio || AudioStateMachine.create(this.mediaProperties.mediaDirection, this);\n    this.video = this.video || VideoStateMachine.create(this.mediaProperties.mediaDirection, this);\n    // Validation is already done in addMedia so no need to check if the lenght is greater then 0\n    this.setLocalTracks(localStream);\n    this.setLocalShareTrack(localShare);\n  }\n\n  /**\n   * Acknowledge the meeting, outgoing or incoming\n   * @param {String} type\n   * @returns {Promise} resolve {message, ringing, response}\n   * @public\n   * @memberof Meeting\n   */\n  acknowledge(type) {\n    if (!type) {\n      return Promise.reject(new ParameterError('Type must be set to acknowledge the meeting.'));\n    }\n    if (type === _INCOMING_) {\n      return this.meetingRequest\n        .acknowledgeMeeting({\n          locusUrl: this.locusUrl,\n          deviceUrl: this.deviceUrl,\n          id: this.id\n        })\n        .then((response) => Promise.resolve(response))\n        .then((response) => {\n          this.meetingFiniteStateMachine.ring(type);\n          Metrics.postEvent({event: eventType.ALERT_DISPLAYED, meeting: this});\n\n          return Promise.resolve({\n            response\n          });\n        });\n    }\n\n    // TODO: outside of 1:1 incoming, and all outgoing calls\n    return Promise.resolve({\n      message: 'noop'\n    });\n  }\n\n  /**\n   * Decline this meeting\n   * @param {String} reason\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  decline(reason = _BUSY_) {\n    return MeetingUtil.declineMeeting(this, reason).then((decline) => {\n      this.meetingFiniteStateMachine.decline();\n\n      return Promise.resolve(decline);\n    }).catch((error) => {\n      this.meetingFiniteStateMachine.fail(error);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Leave the current meeting\n   * @param {Object} options leave options\n   * @param {String} options.resourceId the device with which to leave from, empty if just the computer\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  leave(options = {}) {\n    Metrics.postEvent({event: eventType.LEAVE, meeting: this, data: {trigger: trigger.USER_INTERACTION, canProceed: false}});\n    const leaveReason = options.reason || MEETING_REMOVED_REASON.CLIENT_LEAVE_REQUEST;\n\n    return MeetingUtil.leaveMeeting(this, options)\n      .then((leave) => {\n        this.meetingFiniteStateMachine.leave();\n        // TODO: more testing before we remove this code, we are not sure the scenarios for destroy here\n        if (this.wirelessShare || this.guest) {\n          // If screen sharing clean the meeting object\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'leave'\n            },\n            EVENTS.DESTROY_MEETING,\n            {\n              reason: options.reason,\n              meetingId: this.id\n            }\n          );\n        }\n        LoggerProxy.logger.log('LEAVE REASON ', leaveReason);\n\n        return Promise.resolve(leave);\n      }).catch((error) => {\n        this.meetingFiniteStateMachine.fail(error);\n\n        return Promise.reject(error);\n      });\n  }\n\n  /**\n   * Start sharing content with server\n   * @returns {Promise} see #meetingRequest.changeMeetingFloor\n   * @private\n   * @memberof Meeting\n   */\n  share() {\n    const content = this.locusInfo.mediaShares.find((element) => element.name === CONTENT);\n\n    if (content && !this.isSharing) {\n      Metrics.postEvent({event: eventType.SHARE_INITIATED, meeting: this});\n\n      return this.meetingRequest.changeMeetingFloor({\n        disposition: FLOOR_ACTION.GRANTED,\n        personUrl: this.locusInfo.self.url,\n        deviceUrl: this.deviceUrl,\n        uri: content.url,\n        resourceUrl: this.resourceUrl\n      })\n        .then(() => {\n          this.isSharing = true;\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'share'\n            },\n            EVENT_TRIGGERS.MEETING_STARTED_SHARING_LOCAL,\n          );\n          Metrics.postEvent({event: eventType.LOCAL_SHARE_FLOOR_GRANTED, meeting: this});\n\n          return Promise.resolve();\n        })\n        .catch((e) => {\n          LoggerProxy.logger.error('Meeting/index->share#Error ', e);\n\n          return Promise.reject(e);\n        });\n    }\n\n    return Promise.reject(new ParameterError('Cannot share without content.'));\n  }\n\n  /**\n   * Stops the screen share\n   * @returns {Promise} see #meetingRequest.changeMeetingFloor\n   * @public\n   * @memberof Meeting\n   */\n  stopShare() {\n    const content = this.locusInfo.mediaShares.find((element) => element.name === CONTENT);\n\n    if (content && this.isSharing) {\n      Metrics.postEvent({event: eventType.SHARE_STOPPED, meeting: this});\n      Media.stopTracks(this.mediaProperties.shareTrack);\n\n      return this.meetingRequest.changeMeetingFloor({\n        disposition: FLOOR_ACTION.RELEASED,\n        personUrl: this.locusInfo.self.url,\n        deviceUrl: this.deviceUrl,\n        uri: content.url,\n        resourceUrl: this.resourceUrl\n      })\n        .catch((e) => {\n          LoggerProxy.logger.error('Meeting/index->stopShare#Error ', e);\n\n          return Promise.reject(e);\n        })\n        .finally(() => {\n          this.isSharing = false;\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'stopShare'\n            },\n            EVENT_TRIGGERS.MEETING_STOPPED_SHARING_LOCAL,\n          );\n        });\n    }\n\n    return Promise.reject(new ParameterError('Cannot stop share without content'));\n  }\n\n  /**\n   * Intiate a recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  startRecording() {\n    return MeetingUtil.startRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * End the recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  stopRecording() {\n    return MeetingUtil.stopRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * Pauses the recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  pauseRecording() {\n    return MeetingUtil.pauseRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * Resumes the recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  resumeRecording() {\n    return MeetingUtil.resumeRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * Locks the current meeting if possible\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  lockMeeting() {\n    return MeetingUtil.lockMeeting(this.inMeetingActions, this.meetingRequest, this.locusUrl);\n  }\n\n  /**\n   * Unlocks the current meeting if possible\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  unlockMeeting() {\n    return MeetingUtil.unlockMeeting(this.inMeetingActions, this.meetingRequest, this.locusUrl);\n  }\n\n  /**\n   * Sends DTMF tones to the current meeting\n   * @param {String} tones a string of one or more DTMF tones to send\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  sendDTMF(tones) {\n    const reject = (message) => {\n      LoggerProxy.logger.error(message);\n\n      return Promise.reject(new Error(message));\n    };\n\n    if (this.locusInfo && this.locusInfo.self) {\n      if (this.locusInfo.self.enableDTMF) {\n        return this.meetingRequest\n          .sendDTMF({\n            locusUrl: this.locusInfo.self.url,\n            deviceUrl: this.deviceUrl,\n            tones\n          });\n      }\n\n      return reject('Meeting:index#sendDTMF --> cannot send DTMF, meeting does not have DTMF enabled');\n    }\n\n    return reject('Meeting:index#sendDTMF --> cannot send DTMF, meeting does not have a connection to the \"locus\" call control service. Have you joined?');\n  }\n\n  /**\n   * Sets the quality of the local video stream\n   * @param {String} level {LOW|MEDIUM|HIGH}\n   * @returns {Promise}\n   */\n  setLocalVideoQuality(level) {\n    LoggerProxy.logger.log(`Meeting:index#setLocalVideoQuality --> Setting quality to ${level}`);\n\n    if (!VIDEO_RESOLUTIONS[level]) {\n      const errorMessage = `Meeting:index#setLocalVideoQuality --> ${level} not defined`;\n\n      LoggerProxy.logger.error(errorMessage);\n\n      return Promise.reject(new Error(errorMessage));\n    }\n\n    if (!this.mediaProperties.mediaDirection.sendVideo) {\n      const errorMessage = 'Meeting:index#setLocalVideoQuality --> unable to change video quality, sendVideo is disabled';\n\n      LoggerProxy.logger.error(errorMessage);\n\n      return Promise.reject(new Error(errorMessage));\n    }\n\n    const mediaDirection = {\n      sendAudio: this.mediaProperties.mediaDirection.sendAudio,\n      sendVideo: this.mediaProperties.mediaDirection.sendVideo,\n      sendShare: this.mediaProperties.mediaDirection.sendShare\n    };\n\n    return this.getMediaStreams(mediaDirection, VIDEO_RESOLUTIONS[level])\n      .then(([localStream]) =>\n        this.updateVideo({\n          sendVideo: true,\n          receiveVideo: true,\n          stream: localStream\n        }));\n  }\n}\n"]},"metadata":{},"sourceType":"script"}