{"ast":null,"code":"'use strict';\n/*$AMPERSAND_VERSION*/\n\nvar uniqueId = require('lodash/uniqueId');\n\nvar assign = require('lodash/assign');\n\nvar cloneObj = function (obj) {\n  return assign({}, obj);\n};\n\nvar omit = require('lodash/omit');\n\nvar escape = require('lodash/escape');\n\nvar forOwn = require('lodash/forOwn');\n\nvar includes = require('lodash/includes');\n\nvar isString = require('lodash/isString');\n\nvar isObject = require('lodash/isObject');\n\nvar isDate = require('lodash/isDate');\n\nvar isFunction = require('lodash/isFunction');\n\nvar _isEqual = require('lodash/isEqual'); // to avoid shadowing\n\n\nvar has = require('lodash/has');\n\nvar result = require('lodash/result');\n\nvar union = require('lodash/union');\n\nvar Events = require('ampersand-events');\n\nvar KeyTree = require('key-tree-store');\n\nvar arrayNext = require('array-next');\n\nvar changeRE = /^change:/;\n\nvar noop = function () {};\n\nfunction Base(attrs, options) {\n  options || (options = {});\n  this.cid || (this.cid = uniqueId('state'));\n  this._events = {};\n  this._values = {};\n  this._eventBubblingHandlerCache = {};\n  this._definition = Object.create(this._definition);\n  if (options.parse) attrs = this.parse(attrs, options);\n  this.parent = options.parent;\n  this.collection = options.collection;\n  this._keyTree = new KeyTree();\n\n  this._initCollections();\n\n  this._initChildren();\n\n  this._cache = {};\n  this._previousAttributes = {};\n  if (attrs) this.set(attrs, assign({\n    silent: true,\n    initial: true\n  }, options));\n  this._changed = {};\n  if (this._derived) this._initDerived();\n  if (options.init !== false) this.initialize.apply(this, arguments);\n}\n\nassign(Base.prototype, Events, {\n  // can be allow, ignore, reject\n  extraProperties: 'ignore',\n  idAttribute: 'id',\n  namespaceAttribute: 'namespace',\n  typeAttribute: 'modelType',\n  // Stubbed out to be overwritten\n  initialize: function () {\n    return this;\n  },\n  // Get ID of model per configuration.\n  // Should *always* be how ID is determined by other code.\n  getId: function () {\n    return this[this.idAttribute];\n  },\n  // Get namespace of model per configuration.\n  // Should *always* be how namespace is determined by other code.\n  getNamespace: function () {\n    return this[this.namespaceAttribute];\n  },\n  // Get type of model per configuration.\n  // Should *always* be how type is determined by other code.\n  getType: function () {\n    return this[this.typeAttribute];\n  },\n  // A model is new if it has never been saved to the server, and lacks an id.\n  isNew: function () {\n    return this.getId() == null;\n  },\n  // get HTML-escaped value of attribute\n  escape: function (attr) {\n    return escape(this.get(attr));\n  },\n  // Check if the model is currently in a valid state.\n  isValid: function (options) {\n    return this._validate({}, assign(options || {}, {\n      validate: true\n    }));\n  },\n  // Parse can be used remap/restructure/rename incoming properties\n  // before they are applied to attributes.\n  parse: function (resp, options) {\n    //jshint unused:false\n    return resp;\n  },\n  // Serialize is the inverse of `parse` it lets you massage data\n  // on the way out. Before, sending to server, for example.\n  serialize: function (options) {\n    var attrOpts = assign({\n      props: true\n    }, options);\n    var res = this.getAttributes(attrOpts, true);\n\n    var setFromSerializedValue = function (value, key) {\n      res[key] = this[key].serialize();\n    }.bind(this);\n\n    forOwn(this._children, setFromSerializedValue);\n    forOwn(this._collections, setFromSerializedValue);\n    return res;\n  },\n  // Main set method used by generated setters/getters and can\n  // be used directly if you need to pass options or set multiple\n  // properties at once.\n  set: function (key, value, options) {\n    var self = this;\n    var extraProperties = this.extraProperties;\n    var wasChanging, changeEvents, newType, newVal, def, cast, err, attr, attrs, dataType, silent, unset, currentVal, initial, hasChanged, isEqual, onChange; // Handle both `\"key\", value` and `{key: value}` -style arguments.\n\n    if (isObject(key) || key === null) {\n      attrs = key;\n      options = value;\n    } else {\n      attrs = {};\n      attrs[key] = value;\n    }\n\n    options = options || {};\n    if (!this._validate(attrs, options)) return false; // Extract attributes and options.\n\n    unset = options.unset;\n    silent = options.silent;\n    initial = options.initial; // Initialize change tracking.\n\n    wasChanging = this._changing;\n    this._changing = true;\n    changeEvents = []; // if not already changing, store previous\n\n    if (initial) {\n      this._previousAttributes = {};\n    } else if (!wasChanging) {\n      this._previousAttributes = this.attributes;\n      this._changed = {};\n    } // For each `set` attribute...\n\n\n    for (var i = 0, keys = Object.keys(attrs), len = keys.length; i < len; i++) {\n      attr = keys[i];\n      newVal = attrs[attr];\n      newType = typeof newVal;\n      currentVal = this._values[attr];\n      def = this._definition[attr];\n\n      if (!def) {\n        // if this is a child model or collection\n        if (this._children[attr] || this._collections[attr]) {\n          if (!isObject(newVal)) {\n            newVal = {};\n          }\n\n          this[attr].set(newVal, options);\n          continue;\n        } else if (extraProperties === 'ignore') {\n          continue;\n        } else if (extraProperties === 'reject') {\n          throw new TypeError('No \"' + attr + '\" property defined on ' + (this.type || 'this') + ' model and extraProperties not set to \"ignore\" or \"allow\"');\n        } else if (extraProperties === 'allow') {\n          def = this._createPropertyDefinition(attr, 'any');\n        } else if (extraProperties) {\n          throw new TypeError('Invalid value for extraProperties: \"' + extraProperties + '\"');\n        }\n      }\n\n      isEqual = this._getCompareForType(def.type);\n      onChange = this._getOnChangeForType(def.type);\n      dataType = this._dataTypes[def.type]; // check type if we have one\n\n      if (dataType && dataType.set) {\n        cast = dataType.set(newVal);\n        newVal = cast.val;\n        newType = cast.type;\n      } // If we've defined a test, run it\n\n\n      if (def.test) {\n        err = def.test.call(this, newVal, newType);\n\n        if (err) {\n          throw new TypeError('Property \\'' + attr + '\\' failed validation with error: ' + err);\n        }\n      } // If we are required but undefined, throw error.\n      // If we are null and are not allowing null, throw error\n      // If we have a defined type and the new type doesn't match, and we are not null, throw error.\n      // If we require specific value and new one is not one of them, throw error (unless it has default value or we're unsetting it with undefined).\n\n\n      if (newVal === undefined && def.required) {\n        throw new TypeError('Required property \\'' + attr + '\\' must be of type ' + def.type + '. Tried to set ' + newVal);\n      }\n\n      if (newVal === null && def.required && !def.allowNull) {\n        throw new TypeError('Property \\'' + attr + '\\' must be of type ' + def.type + ' (cannot be null). Tried to set ' + newVal);\n      }\n\n      if (def.type && def.type !== 'any' && def.type !== newType && newVal !== null && newVal !== undefined) {\n        throw new TypeError('Property \\'' + attr + '\\' must be of type ' + def.type + '. Tried to set ' + newVal);\n      }\n\n      if (def.values && !includes(def.values, newVal)) {\n        var defaultValue = result(def, 'default');\n\n        if (unset && defaultValue !== undefined) {\n          newVal = defaultValue;\n        } else if (!unset || unset && newVal !== undefined) {\n          throw new TypeError('Property \\'' + attr + '\\' must be one of values: ' + def.values.join(', ') + '. Tried to set ' + newVal);\n        }\n      } // We know this has 'changed' if it's the initial set, so skip a potentially expensive isEqual check.\n\n\n      hasChanged = initial || !isEqual(currentVal, newVal, attr); // enforce `setOnce` for properties if set\n\n      if (def.setOnce && currentVal !== undefined && hasChanged) {\n        throw new TypeError('Property \\'' + attr + '\\' can only be set once.');\n      } // set/unset attributes.\n      // If this is not the initial set, keep track of changed attributes\n      // and push to changeEvents array so we can fire events.\n\n\n      if (hasChanged) {\n        // This fires no matter what, even on initial set.\n        onChange(newVal, currentVal, attr); // If this is a change (not an initial set), mark the change.\n        // Note it's impossible to unset on the initial set (it will already be unset),\n        // so we only include that logic here.\n\n        if (!initial) {\n          this._changed[attr] = newVal;\n          this._previousAttributes[attr] = currentVal;\n\n          if (unset) {\n            // FIXME delete is very slow. Can we get away with setting to undefined?\n            delete this._values[attr];\n          }\n\n          if (!silent) {\n            changeEvents.push({\n              prev: currentVal,\n              val: newVal,\n              key: attr\n            });\n          }\n        }\n\n        if (!unset) {\n          this._values[attr] = newVal;\n        }\n      } else {\n        // Not changed\n        // FIXME delete is very slow. Can we get away with setting to undefined?\n        delete this._changed[attr];\n      }\n    } // Fire events. This array is not populated if we are told to be silent.\n\n\n    if (changeEvents.length) this._pending = true;\n    changeEvents.forEach(function (change) {\n      self.trigger('change:' + change.key, self, change.val, options);\n    }); // You might be wondering why there's a `while` loop here. Changes can\n    // be recursively nested within `\"change\"` events.\n\n    if (wasChanging) return this;\n\n    while (this._pending) {\n      this._pending = false;\n      this.trigger('change', this, options);\n    }\n\n    this._pending = false;\n    this._changing = false;\n    return this;\n  },\n  get: function (attr) {\n    return this[attr];\n  },\n  // Toggle boolean properties or properties that have a `values`\n  // array in its definition.\n  toggle: function (property) {\n    var def = this._definition[property];\n\n    if (def.type === 'boolean') {\n      // if it's a bool, just flip it\n      this[property] = !this[property];\n    } else if (def && def.values) {\n      // If it's a property with an array of values\n      // skip to the next one looping back if at end.\n      this[property] = arrayNext(def.values, this[property]);\n    } else {\n      throw new TypeError('Can only toggle properties that are type `boolean` or have `values` array.');\n    }\n\n    return this;\n  },\n  // Get all of the attributes of the model at the time of the previous\n  // `\"change\"` event.\n  previousAttributes: function () {\n    return cloneObj(this._previousAttributes);\n  },\n  // Determine if the model has changed since the last `\"change\"` event.\n  // If you specify an attribute name, determine if that attribute has changed.\n  hasChanged: function (attr) {\n    if (attr == null) return !!Object.keys(this._changed).length;\n\n    if (has(this._derived, attr)) {\n      return this._derived[attr].depList.some(function (dep) {\n        return this.hasChanged(dep);\n      }, this);\n    }\n\n    return has(this._changed, attr);\n  },\n  // Return an object containing all the attributes that have changed, or\n  // false if there are no changed attributes. Useful for determining what\n  // parts of a view need to be updated and/or what attributes need to be\n  // persisted to the server. Unset attributes will be set to undefined.\n  // You can also pass an attributes object to diff against the model,\n  // determining if there *would be* a change.\n  changedAttributes: function (diff) {\n    if (!diff) return this.hasChanged() ? cloneObj(this._changed) : false;\n    var val,\n        changed = false;\n    var old = this._changing ? this._previousAttributes : this.attributes;\n    var def, isEqual;\n\n    for (var attr in diff) {\n      def = this._definition[attr];\n      if (!def) continue;\n      isEqual = this._getCompareForType(def.type);\n      if (isEqual(old[attr], val = diff[attr])) continue;\n      (changed || (changed = {}))[attr] = val;\n    }\n\n    return changed;\n  },\n  toJSON: function () {\n    return this.serialize();\n  },\n  unset: function (attrs, options) {\n    var self = this;\n    attrs = Array.isArray(attrs) ? attrs : [attrs];\n    attrs.forEach(function (key) {\n      var def = self._definition[key];\n      if (!def) return;\n      var val;\n\n      if (def.required) {\n        val = result(def, 'default');\n        return self.set(key, val, options);\n      } else {\n        return self.set(key, val, assign({}, options, {\n          unset: true\n        }));\n      }\n    });\n  },\n  clear: function (options) {\n    var self = this;\n    Object.keys(this.attributes).forEach(function (key) {\n      self.unset(key, options);\n    });\n    return this;\n  },\n  previous: function (attr) {\n    if (attr == null || !Object.keys(this._previousAttributes).length) return null;\n    return this._previousAttributes[attr];\n  },\n  // Get default values for a certain type\n  _getDefaultForType: function (type) {\n    var dataType = this._dataTypes[type];\n    return dataType && dataType['default'];\n  },\n  // Determine which comparison algorithm to use for comparing a property\n  _getCompareForType: function (type) {\n    var dataType = this._dataTypes[type];\n    if (dataType && dataType.compare) return dataType.compare.bind(this);\n    return _isEqual; // if no compare function is defined, use _.isEqual\n  },\n  _getOnChangeForType: function (type) {\n    var dataType = this._dataTypes[type];\n    if (dataType && dataType.onChange) return dataType.onChange.bind(this);\n    return noop;\n  },\n  // Run validation against the next complete set of model attributes,\n  // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n  _validate: function (attrs, options) {\n    if (!options.validate || !this.validate) return true;\n    attrs = assign({}, this.attributes, attrs);\n    var error = this.validationError = this.validate(attrs, options) || null;\n    if (!error) return true;\n    this.trigger('invalid', this, error, assign(options || {}, {\n      validationError: error\n    }));\n    return false;\n  },\n  _createPropertyDefinition: function (name, desc, isSession) {\n    return createPropertyDefinition(this, name, desc, isSession);\n  },\n  // just makes friendlier errors when trying to define a new model\n  // only used when setting up original property definitions\n  _ensureValidType: function (type) {\n    return includes(['string', 'number', 'boolean', 'array', 'object', 'date', 'state', 'any'].concat(Object.keys(this._dataTypes)), type) ? type : undefined;\n  },\n  getAttributes: function (options, raw) {\n    options = assign({\n      session: false,\n      props: false,\n      derived: false\n    }, options || {});\n    var res = {};\n    var val, def;\n\n    for (var item in this._definition) {\n      def = this._definition[item];\n\n      if (options.session && def.session || options.props && !def.session) {\n        val = raw ? this._values[item] : this[item];\n        if (raw && val && isFunction(val.serialize)) val = val.serialize();\n        if (typeof val === 'undefined') val = result(def, 'default');\n        if (typeof val !== 'undefined') res[item] = val;\n      }\n    }\n\n    if (options.derived) {\n      for (var derivedItem in this._derived) res[derivedItem] = this[derivedItem];\n    }\n\n    return res;\n  },\n  _initDerived: function () {\n    var self = this;\n    forOwn(this._derived, function (value, name) {\n      var def = self._derived[name];\n      def.deps = def.depList;\n\n      var update = function () {\n        var newVal = def.fn.call(self);\n\n        if (self._cache[name] !== newVal || !def.cache) {\n          if (def.cache) {\n            self._previousAttributes[name] = self._cache[name];\n          }\n\n          self._cache[name] = newVal;\n          self.trigger('change:' + name, self, self._cache[name]);\n        }\n      };\n\n      def.deps.forEach(function (propString) {\n        self._keyTree.add(propString, update);\n      });\n    });\n    this.on('all', function (eventName) {\n      if (changeRE.test(eventName)) {\n        self._keyTree.get(eventName.split(':')[1]).forEach(function (fn) {\n          fn();\n        });\n      }\n    }, this);\n  },\n  _getDerivedProperty: function (name, flushCache) {\n    // is this a derived property that is cached\n    if (this._derived[name].cache) {\n      //set if this is the first time, or flushCache is set\n      if (flushCache || !this._cache.hasOwnProperty(name)) {\n        this._cache[name] = this._derived[name].fn.apply(this);\n      }\n\n      return this._cache[name];\n    } else {\n      return this._derived[name].fn.apply(this);\n    }\n  },\n  _initCollections: function () {\n    var coll;\n    if (!this._collections) return;\n\n    for (coll in this._collections) {\n      this._safeSet(coll, new this._collections[coll](null, {\n        parent: this\n      }));\n    }\n  },\n  _initChildren: function () {\n    var child;\n    if (!this._children) return;\n\n    for (child in this._children) {\n      this._safeSet(child, new this._children[child]({}, {\n        parent: this\n      }));\n\n      this.listenTo(this[child], 'all', this._getCachedEventBubblingHandler(child));\n    }\n  },\n  // Returns a bound handler for doing event bubbling while\n  // adding a name to the change string.\n  _getCachedEventBubblingHandler: function (propertyName) {\n    if (!this._eventBubblingHandlerCache[propertyName]) {\n      this._eventBubblingHandlerCache[propertyName] = function (name, model, newValue) {\n        if (changeRE.test(name)) {\n          this.trigger('change:' + propertyName + '.' + name.split(':')[1], model, newValue);\n        } else if (name === 'change') {\n          this.trigger('change', this);\n        }\n      }.bind(this);\n    }\n\n    return this._eventBubblingHandlerCache[propertyName];\n  },\n  // Check that all required attributes are present\n  _verifyRequired: function () {\n    var attrs = this.attributes; // should include session\n\n    for (var def in this._definition) {\n      if (this._definition[def].required && typeof attrs[def] === 'undefined') {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  // expose safeSet method\n  _safeSet: function safeSet(property, value) {\n    if (property in this) {\n      throw new Error('Encountered namespace collision while setting instance property `' + property + '`');\n    }\n\n    this[property] = value;\n    return this;\n  }\n}); // getter for attributes\n\nObject.defineProperties(Base.prototype, {\n  attributes: {\n    get: function () {\n      return this.getAttributes({\n        props: true,\n        session: true\n      });\n    }\n  },\n  all: {\n    get: function () {\n      return this.getAttributes({\n        session: true,\n        props: true,\n        derived: true\n      });\n    }\n  },\n  isState: {\n    get: function () {\n      return true;\n    },\n    set: function () {}\n  }\n}); // helper for creating/storing property definitions and creating\n// appropriate getters/setters\n\nfunction createPropertyDefinition(object, name, desc, isSession) {\n  var def = object._definition[name] = {};\n  var type, descArray;\n\n  if (isString(desc)) {\n    // grab our type if all we've got is a string\n    type = object._ensureValidType(desc);\n    if (type) def.type = type;\n  } else {\n    //Transform array of ['type', required, default] to object form\n    if (Array.isArray(desc)) {\n      descArray = desc;\n      desc = {\n        type: descArray[0],\n        required: descArray[1],\n        'default': descArray[2]\n      };\n    }\n\n    type = object._ensureValidType(desc.type);\n    if (type) def.type = type;\n    if (desc.required) def.required = true;\n\n    if (desc['default'] && typeof desc['default'] === 'object') {\n      throw new TypeError('The default value for ' + name + ' cannot be an object/array, must be a value or a function which returns a value/object/array');\n    }\n\n    def['default'] = desc['default'];\n    def.allowNull = desc.allowNull ? desc.allowNull : false;\n    if (desc.setOnce) def.setOnce = true;\n    if (def.required && def['default'] === undefined && !def.setOnce) def['default'] = object._getDefaultForType(type);\n    def.test = desc.test;\n    def.values = desc.values;\n  }\n\n  if (isSession) def.session = true;\n\n  if (!type) {\n    type = isString(desc) ? desc : desc.type; // TODO: start throwing a TypeError in future major versions instead of warning\n\n    console.warn('Invalid data type of `' + type + '` for `' + name + '` property. Use one of the default types or define your own');\n  } // define a getter/setter on the prototype\n  // but they get/set on the instance\n\n\n  Object.defineProperty(object, name, {\n    set: function (val) {\n      this.set(name, val);\n    },\n    get: function () {\n      if (!this._values) {\n        throw Error('You may be trying to `extend` a state object with \"' + name + '\" which has been defined in `props` on the object being extended');\n      }\n\n      var value = this._values[name];\n      var typeDef = this._dataTypes[def.type];\n\n      if (typeof value !== 'undefined') {\n        if (typeDef && typeDef.get) {\n          value = typeDef.get(value);\n        }\n\n        return value;\n      }\n\n      var defaultValue = result(def, 'default');\n      this._values[name] = defaultValue; // If we've set a defaultValue, fire a change handler effectively marking\n      // its change from undefined to the default value.\n\n      if (typeof defaultValue !== 'undefined') {\n        var onChange = this._getOnChangeForType(def.type);\n\n        onChange(defaultValue, value, name);\n      }\n\n      return defaultValue;\n    }\n  });\n  return def;\n} // helper for creating derived property definitions\n\n\nfunction createDerivedProperty(modelProto, name, definition) {\n  var def = modelProto._derived[name] = {\n    fn: isFunction(definition) ? definition : definition.fn,\n    cache: definition.cache !== false,\n    depList: definition.deps || []\n  }; // add to our shared dependency list\n\n  def.depList.forEach(function (dep) {\n    modelProto._deps[dep] = union(modelProto._deps[dep] || [], [name]);\n  }); // defined a top-level getter for derived names\n\n  Object.defineProperty(modelProto, name, {\n    get: function () {\n      return this._getDerivedProperty(name);\n    },\n    set: function () {\n      throw new TypeError(\"`\" + name + \"` is a derived property, it can't be set directly.\");\n    }\n  });\n}\n\nvar dataTypes = {\n  string: {\n    'default': function () {\n      return '';\n    }\n  },\n  date: {\n    set: function (newVal) {\n      var newType;\n\n      if (newVal == null) {\n        newType = typeof null;\n      } else if (!isDate(newVal)) {\n        var err = null;\n        var dateVal = new Date(newVal).valueOf();\n\n        if (isNaN(dateVal)) {\n          // If the newVal cant be parsed, then try parseInt first\n          dateVal = new Date(parseInt(newVal, 10)).valueOf();\n          if (isNaN(dateVal)) err = true;\n        }\n\n        newVal = dateVal;\n        newType = 'date';\n\n        if (err) {\n          newType = typeof newVal;\n        }\n      } else {\n        newType = 'date';\n        newVal = newVal.valueOf();\n      }\n\n      return {\n        val: newVal,\n        type: newType\n      };\n    },\n    get: function (val) {\n      if (val == null) {\n        return val;\n      }\n\n      return new Date(val);\n    },\n    'default': function () {\n      return new Date();\n    }\n  },\n  array: {\n    set: function (newVal) {\n      return {\n        val: newVal,\n        type: Array.isArray(newVal) ? 'array' : typeof newVal\n      };\n    },\n    'default': function () {\n      return [];\n    }\n  },\n  object: {\n    set: function (newVal) {\n      var newType = typeof newVal; // we have to have a way of supporting \"missing\" objects.\n      // Null is an object, but setting a value to undefined\n      // should work too, IMO. We just override it, in that case.\n\n      if (newType !== 'object' && newVal === undefined) {\n        newVal = null;\n        newType = 'object';\n      }\n\n      return {\n        val: newVal,\n        type: newType\n      };\n    },\n    'default': function () {\n      return {};\n    }\n  },\n  // the `state` data type is a bit special in that setting it should\n  // also bubble events\n  state: {\n    set: function (newVal) {\n      var isInstance = newVal instanceof Base || newVal && newVal.isState;\n\n      if (isInstance) {\n        return {\n          val: newVal,\n          type: 'state'\n        };\n      } else {\n        return {\n          val: newVal,\n          type: typeof newVal\n        };\n      }\n    },\n    compare: function (currentVal, newVal) {\n      return currentVal === newVal;\n    },\n    onChange: function (newVal, previousVal, attributeName) {\n      // if this has changed we want to also handle\n      // event propagation\n      if (previousVal) {\n        this.stopListening(previousVal, 'all', this._getCachedEventBubblingHandler(attributeName));\n      }\n\n      if (newVal != null) {\n        this.listenTo(newVal, 'all', this._getCachedEventBubblingHandler(attributeName));\n      }\n    }\n  }\n}; // the extend method used to extend prototypes, maintain inheritance chains for instanceof\n// and allow for additions to the model definitions.\n\nfunction extend(protoProps) {\n  /*jshint validthis:true*/\n  var parent = this;\n  var child; // The constructor function for the new subclass is either defined by you\n  // (the \"constructor\" property in your `extend` definition), or defaulted\n  // by us to simply call the parent's constructor.\n\n  if (protoProps && protoProps.hasOwnProperty('constructor')) {\n    child = protoProps.constructor;\n  } else {\n    child = function () {\n      return parent.apply(this, arguments);\n    };\n  } // Add static properties to the constructor function from parent\n\n\n  assign(child, parent); // Set the prototype chain to inherit from `parent`, without calling\n  // `parent`'s constructor function.\n\n  var Surrogate = function () {\n    this.constructor = child;\n  };\n\n  Surrogate.prototype = parent.prototype;\n  child.prototype = new Surrogate(); // set prototype level objects\n\n  child.prototype._derived = assign({}, parent.prototype._derived);\n  child.prototype._deps = assign({}, parent.prototype._deps);\n  child.prototype._definition = assign({}, parent.prototype._definition);\n  child.prototype._collections = assign({}, parent.prototype._collections);\n  child.prototype._children = assign({}, parent.prototype._children);\n  child.prototype._dataTypes = assign({}, parent.prototype._dataTypes || dataTypes); // Mix in all prototype properties to the subclass if supplied.\n\n  if (protoProps) {\n    var omitFromExtend = ['dataTypes', 'props', 'session', 'derived', 'collections', 'children'];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var def = arguments[i];\n\n      if (def.dataTypes) {\n        forOwn(def.dataTypes, function (def, name) {\n          child.prototype._dataTypes[name] = def;\n        });\n      }\n\n      if (def.props) {\n        forOwn(def.props, function (def, name) {\n          createPropertyDefinition(child.prototype, name, def);\n        });\n      }\n\n      if (def.session) {\n        forOwn(def.session, function (def, name) {\n          createPropertyDefinition(child.prototype, name, def, true);\n        });\n      }\n\n      if (def.derived) {\n        forOwn(def.derived, function (def, name) {\n          createDerivedProperty(child.prototype, name, def);\n        });\n      }\n\n      if (def.collections) {\n        forOwn(def.collections, function (constructor, name) {\n          child.prototype._collections[name] = constructor;\n        });\n      }\n\n      if (def.children) {\n        forOwn(def.children, function (constructor, name) {\n          child.prototype._children[name] = constructor;\n        });\n      }\n\n      assign(child.prototype, omit(def, omitFromExtend));\n    }\n  } // Set a convenience property in case the parent's prototype is needed\n  // later.\n\n\n  child.__super__ = parent.prototype;\n  return child;\n}\n\nBase.extend = extend; // Our main exports\n\nmodule.exports = Base;","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/ampersand-state/ampersand-state.js"],"names":["uniqueId","require","assign","cloneObj","obj","omit","escape","forOwn","includes","isString","isObject","isDate","isFunction","_isEqual","has","result","union","Events","KeyTree","arrayNext","changeRE","noop","Base","attrs","options","cid","_events","_values","_eventBubblingHandlerCache","_definition","Object","create","parse","parent","collection","_keyTree","_initCollections","_initChildren","_cache","_previousAttributes","set","silent","initial","_changed","_derived","_initDerived","init","initialize","apply","arguments","prototype","extraProperties","idAttribute","namespaceAttribute","typeAttribute","getId","getNamespace","getType","isNew","attr","get","isValid","_validate","validate","resp","serialize","attrOpts","props","res","getAttributes","setFromSerializedValue","value","key","bind","_children","_collections","self","wasChanging","changeEvents","newType","newVal","def","cast","err","dataType","unset","currentVal","hasChanged","isEqual","onChange","_changing","attributes","i","keys","len","length","TypeError","type","_createPropertyDefinition","_getCompareForType","_getOnChangeForType","_dataTypes","val","test","call","undefined","required","allowNull","values","defaultValue","join","setOnce","push","prev","_pending","forEach","change","trigger","toggle","property","previousAttributes","depList","some","dep","changedAttributes","diff","changed","old","toJSON","Array","isArray","clear","previous","_getDefaultForType","compare","error","validationError","name","desc","isSession","createPropertyDefinition","_ensureValidType","concat","raw","session","derived","item","derivedItem","deps","update","fn","cache","propString","add","on","eventName","split","_getDerivedProperty","flushCache","hasOwnProperty","coll","_safeSet","child","listenTo","_getCachedEventBubblingHandler","propertyName","model","newValue","_verifyRequired","safeSet","Error","defineProperties","all","isState","object","descArray","console","warn","defineProperty","typeDef","createDerivedProperty","modelProto","definition","_deps","dataTypes","string","date","dateVal","Date","valueOf","isNaN","parseInt","array","state","isInstance","previousVal","attributeName","stopListening","extend","protoProps","constructor","Surrogate","omitFromExtend","collections","children","__super__","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/*$AMPERSAND_VERSION*/\nvar uniqueId = require('lodash/uniqueId');\nvar assign = require('lodash/assign');\nvar cloneObj = function(obj) { return assign({}, obj); };\nvar omit = require('lodash/omit');\nvar escape = require('lodash/escape');\nvar forOwn = require('lodash/forOwn');\nvar includes = require('lodash/includes');\nvar isString = require('lodash/isString');\nvar isObject = require('lodash/isObject');\nvar isDate = require('lodash/isDate');\nvar isFunction = require('lodash/isFunction');\nvar _isEqual = require('lodash/isEqual'); // to avoid shadowing\nvar has = require('lodash/has');\nvar result = require('lodash/result');\nvar union = require('lodash/union');\nvar Events = require('ampersand-events');\nvar KeyTree = require('key-tree-store');\nvar arrayNext = require('array-next');\nvar changeRE = /^change:/;\nvar noop = function () {};\n\nfunction Base(attrs, options) {\n    options || (options = {});\n    this.cid || (this.cid = uniqueId('state'));\n    this._events = {};\n    this._values = {};\n    this._eventBubblingHandlerCache = {};\n    this._definition = Object.create(this._definition);\n    if (options.parse) attrs = this.parse(attrs, options);\n    this.parent = options.parent;\n    this.collection = options.collection;\n    this._keyTree = new KeyTree();\n    this._initCollections();\n    this._initChildren();\n    this._cache = {};\n    this._previousAttributes = {};\n    if (attrs) this.set(attrs, assign({silent: true, initial: true}, options));\n    this._changed = {};\n    if (this._derived) this._initDerived();\n    if (options.init !== false) this.initialize.apply(this, arguments);\n}\n\nassign(Base.prototype, Events, {\n    // can be allow, ignore, reject\n    extraProperties: 'ignore',\n\n    idAttribute: 'id',\n\n    namespaceAttribute: 'namespace',\n\n    typeAttribute: 'modelType',\n\n    // Stubbed out to be overwritten\n    initialize: function () {\n        return this;\n    },\n\n    // Get ID of model per configuration.\n    // Should *always* be how ID is determined by other code.\n    getId: function () {\n        return this[this.idAttribute];\n    },\n\n    // Get namespace of model per configuration.\n    // Should *always* be how namespace is determined by other code.\n    getNamespace: function () {\n        return this[this.namespaceAttribute];\n    },\n\n    // Get type of model per configuration.\n    // Should *always* be how type is determined by other code.\n    getType: function () {\n        return this[this.typeAttribute];\n    },\n\n    // A model is new if it has never been saved to the server, and lacks an id.\n    isNew: function () {\n        return this.getId() == null;\n    },\n\n    // get HTML-escaped value of attribute\n    escape: function (attr) {\n        return escape(this.get(attr));\n    },\n\n    // Check if the model is currently in a valid state.\n    isValid: function (options) {\n        return this._validate({}, assign(options || {}, { validate: true }));\n    },\n\n    // Parse can be used remap/restructure/rename incoming properties\n    // before they are applied to attributes.\n    parse: function (resp, options) {\n        //jshint unused:false\n        return resp;\n    },\n\n    // Serialize is the inverse of `parse` it lets you massage data\n    // on the way out. Before, sending to server, for example.\n    serialize: function (options) {\n        var attrOpts = assign({props: true}, options);\n        var res = this.getAttributes(attrOpts, true);\n        \n        var setFromSerializedValue = function (value, key) {\n\t        res[key] = this[key].serialize();\n        }.bind(this);\n        \n        forOwn(this._children, setFromSerializedValue);\n        forOwn(this._collections, setFromSerializedValue);\n        return res;\n    },\n\n    // Main set method used by generated setters/getters and can\n    // be used directly if you need to pass options or set multiple\n    // properties at once.\n    set: function (key, value, options) {\n        var self = this;\n        var extraProperties = this.extraProperties;\n        var wasChanging, changeEvents, newType, newVal, def, cast, err, attr,\n            attrs, dataType, silent, unset, currentVal, initial, hasChanged, isEqual, onChange;\n\n        // Handle both `\"key\", value` and `{key: value}` -style arguments.\n        if (isObject(key) || key === null) {\n            attrs = key;\n            options = value;\n        } else {\n            attrs = {};\n            attrs[key] = value;\n        }\n\n        options = options || {};\n\n        if (!this._validate(attrs, options)) return false;\n\n        // Extract attributes and options.\n        unset = options.unset;\n        silent = options.silent;\n        initial = options.initial;\n\n        // Initialize change tracking.\n        wasChanging = this._changing;\n        this._changing = true;\n        changeEvents = [];\n\n        // if not already changing, store previous\n        if (initial) {\n            this._previousAttributes = {};\n        } else if (!wasChanging) {\n            this._previousAttributes = this.attributes;\n            this._changed = {};\n        }\n\n        // For each `set` attribute...\n        for (var i = 0, keys = Object.keys(attrs), len = keys.length; i < len; i++) {\n            attr = keys[i];\n            newVal = attrs[attr];\n            newType = typeof newVal;\n            currentVal = this._values[attr];\n            def = this._definition[attr];\n\n            if (!def) {\n                // if this is a child model or collection\n                if (this._children[attr] || this._collections[attr]) {\n                    if (!isObject(newVal)) {\n                        newVal = {};\n                    }\n\n                    this[attr].set(newVal, options);\n                    continue;\n                } else if (extraProperties === 'ignore') {\n                    continue;\n                } else if (extraProperties === 'reject') {\n                    throw new TypeError('No \"' + attr + '\" property defined on ' + (this.type || 'this') + ' model and extraProperties not set to \"ignore\" or \"allow\"');\n                } else if (extraProperties === 'allow') {\n                    def = this._createPropertyDefinition(attr, 'any');\n                } else if (extraProperties) {\n                    throw new TypeError('Invalid value for extraProperties: \"' + extraProperties + '\"');\n                }\n            }\n\n            isEqual = this._getCompareForType(def.type);\n            onChange = this._getOnChangeForType(def.type);\n            dataType = this._dataTypes[def.type];\n\n            // check type if we have one\n            if (dataType && dataType.set) {\n                cast = dataType.set(newVal);\n                newVal = cast.val;\n                newType = cast.type;\n            }\n\n            // If we've defined a test, run it\n            if (def.test) {\n                err = def.test.call(this, newVal, newType);\n                if (err) {\n                    throw new TypeError('Property \\'' + attr + '\\' failed validation with error: ' + err);\n                }\n            }\n\n            // If we are required but undefined, throw error.\n            // If we are null and are not allowing null, throw error\n            // If we have a defined type and the new type doesn't match, and we are not null, throw error.\n            // If we require specific value and new one is not one of them, throw error (unless it has default value or we're unsetting it with undefined).\n\n            if (newVal === undefined && def.required) {\n                throw new TypeError('Required property \\'' + attr + '\\' must be of type ' + def.type + '. Tried to set ' + newVal);\n            }\n            if (newVal === null && def.required && !def.allowNull) {\n                throw new TypeError('Property \\'' + attr + '\\' must be of type ' + def.type + ' (cannot be null). Tried to set ' + newVal);\n            }\n            if ((def.type && def.type !== 'any' && def.type !== newType) && newVal !== null && newVal !== undefined) {\n                throw new TypeError('Property \\'' + attr + '\\' must be of type ' + def.type + '. Tried to set ' + newVal);\n            }\n            if (def.values && !includes(def.values, newVal)) {\n                var defaultValue = result(def, 'default');\n                if (unset && defaultValue !== undefined) {\n                    newVal = defaultValue;\n                } else if (!unset || (unset && newVal !== undefined)) {\n                    throw new TypeError('Property \\'' + attr + '\\' must be one of values: ' + def.values.join(', ') + '. Tried to set ' + newVal);\n                }\n            }\n\n            // We know this has 'changed' if it's the initial set, so skip a potentially expensive isEqual check.\n            hasChanged = initial || !isEqual(currentVal, newVal, attr);\n\n            // enforce `setOnce` for properties if set\n            if (def.setOnce && currentVal !== undefined && hasChanged) {\n                throw new TypeError('Property \\'' + attr + '\\' can only be set once.');\n            }\n\n            // set/unset attributes.\n            // If this is not the initial set, keep track of changed attributes\n            // and push to changeEvents array so we can fire events.\n            if (hasChanged) {\n\n                // This fires no matter what, even on initial set.\n                onChange(newVal, currentVal, attr);\n\n                // If this is a change (not an initial set), mark the change.\n                // Note it's impossible to unset on the initial set (it will already be unset),\n                // so we only include that logic here.\n                if (!initial) {\n                    this._changed[attr] = newVal;\n                    this._previousAttributes[attr] = currentVal;\n                    if (unset) {\n                        // FIXME delete is very slow. Can we get away with setting to undefined?\n                        delete this._values[attr];\n                    }\n                    if (!silent) {\n                        changeEvents.push({prev: currentVal, val: newVal, key: attr});\n                    }\n                }\n                if (!unset) {\n                    this._values[attr] = newVal;\n                }\n            } else {\n                // Not changed\n                // FIXME delete is very slow. Can we get away with setting to undefined?\n                delete this._changed[attr];\n            }\n        }\n\n        // Fire events. This array is not populated if we are told to be silent.\n        if (changeEvents.length) this._pending = true;\n        changeEvents.forEach(function (change) {\n            self.trigger('change:' + change.key, self, change.val, options);\n        });\n\n        // You might be wondering why there's a `while` loop here. Changes can\n        // be recursively nested within `\"change\"` events.\n        if (wasChanging) return this;\n        while (this._pending) {\n            this._pending = false;\n            this.trigger('change', this, options);\n        }\n        this._pending = false;\n        this._changing = false;\n        return this;\n    },\n\n    get: function (attr) {\n        return this[attr];\n    },\n\n    // Toggle boolean properties or properties that have a `values`\n    // array in its definition.\n    toggle: function (property) {\n        var def = this._definition[property];\n        if (def.type === 'boolean') {\n            // if it's a bool, just flip it\n            this[property] = !this[property];\n        } else if (def && def.values) {\n            // If it's a property with an array of values\n            // skip to the next one looping back if at end.\n            this[property] = arrayNext(def.values, this[property]);\n        } else {\n            throw new TypeError('Can only toggle properties that are type `boolean` or have `values` array.');\n        }\n        return this;\n    },\n\n    // Get all of the attributes of the model at the time of the previous\n    // `\"change\"` event.\n    previousAttributes: function () {\n        return cloneObj(this._previousAttributes);\n    },\n\n    // Determine if the model has changed since the last `\"change\"` event.\n    // If you specify an attribute name, determine if that attribute has changed.\n    hasChanged: function (attr) {\n        if (attr == null) return !!Object.keys(this._changed).length;\n        if (has(this._derived, attr)) {\n            return this._derived[attr].depList.some(function (dep) {\n                return this.hasChanged(dep);\n            }, this);\n        }\n        return has(this._changed, attr);\n    },\n\n    // Return an object containing all the attributes that have changed, or\n    // false if there are no changed attributes. Useful for determining what\n    // parts of a view need to be updated and/or what attributes need to be\n    // persisted to the server. Unset attributes will be set to undefined.\n    // You can also pass an attributes object to diff against the model,\n    // determining if there *would be* a change.\n    changedAttributes: function (diff) {\n        if (!diff) return this.hasChanged() ? cloneObj(this._changed) : false;\n        var val, changed = false;\n        var old = this._changing ? this._previousAttributes : this.attributes;\n        var def, isEqual;\n        for (var attr in diff) {\n            def = this._definition[attr];\n            if (!def) continue;\n            isEqual = this._getCompareForType(def.type);\n            if (isEqual(old[attr], (val = diff[attr]))) continue;\n            (changed || (changed = {}))[attr] = val;\n        }\n        return changed;\n    },\n\n    toJSON: function () {\n        return this.serialize();\n    },\n\n    unset: function (attrs, options) {\n        var self = this;\n        attrs = Array.isArray(attrs) ? attrs : [attrs];\n        attrs.forEach(function (key) {\n            var def = self._definition[key];\n            if (!def) return;\n            var val;\n            if (def.required) {\n                val = result(def, 'default');\n                return self.set(key, val, options);\n            } else {\n                return self.set(key, val, assign({}, options, {unset: true}));\n            }\n        });\n    },\n\n    clear: function (options) {\n        var self = this;\n        Object.keys(this.attributes).forEach(function (key) {\n            self.unset(key, options);\n        });\n        return this;\n    },\n\n    previous: function (attr) {\n        if (attr == null || !Object.keys(this._previousAttributes).length) return null;\n        return this._previousAttributes[attr];\n    },\n\n    // Get default values for a certain type\n    _getDefaultForType: function (type) {\n        var dataType = this._dataTypes[type];\n        return dataType && dataType['default'];\n    },\n\n    // Determine which comparison algorithm to use for comparing a property\n    _getCompareForType: function (type) {\n        var dataType = this._dataTypes[type];\n        if (dataType && dataType.compare) return dataType.compare.bind(this);\n        return _isEqual; // if no compare function is defined, use _.isEqual\n    },\n\n    _getOnChangeForType : function(type){\n        var dataType = this._dataTypes[type];\n        if (dataType && dataType.onChange) return dataType.onChange.bind(this);\n        return noop;\n    },\n\n    // Run validation against the next complete set of model attributes,\n    // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n    _validate: function (attrs, options) {\n        if (!options.validate || !this.validate) return true;\n        attrs = assign({}, this.attributes, attrs);\n        var error = this.validationError = this.validate(attrs, options) || null;\n        if (!error) return true;\n        this.trigger('invalid', this, error, assign(options || {}, {validationError: error}));\n        return false;\n    },\n\n    _createPropertyDefinition: function (name, desc, isSession) {\n        return createPropertyDefinition(this, name, desc, isSession);\n    },\n\n    // just makes friendlier errors when trying to define a new model\n    // only used when setting up original property definitions\n    _ensureValidType: function (type) {\n        return includes(['string', 'number', 'boolean', 'array', 'object', 'date', 'state', 'any']\n            .concat(Object.keys(this._dataTypes)), type) ? type : undefined;\n    },\n\n    getAttributes: function (options, raw) {\n        options = assign({\n            session: false,\n            props: false,\n            derived: false\n        }, options || {});\n        var res = {};\n        var val, def;\n        for (var item in this._definition) {\n            def = this._definition[item];\n            if ((options.session && def.session) || (options.props && !def.session)) {\n                val = raw ? this._values[item] : this[item];\n                if (raw && val && isFunction(val.serialize)) val = val.serialize();\n                if (typeof val === 'undefined') val = result(def, 'default');\n                if (typeof val !== 'undefined') res[item] = val;\n            }\n        }\n        if (options.derived) {\n            for (var derivedItem in this._derived) res[derivedItem] = this[derivedItem];\n        }\n        return res;\n    },\n\n    _initDerived: function () {\n        var self = this;\n\n        forOwn(this._derived, function (value, name) {\n            var def = self._derived[name];\n            def.deps = def.depList;\n\n            var update = function () {\n                var newVal = def.fn.call(self);\n\n                if (self._cache[name] !== newVal || !def.cache) {\n                    if (def.cache) {\n                        self._previousAttributes[name] = self._cache[name];\n                    }\n                    self._cache[name] = newVal;\n                    self.trigger('change:' + name, self, self._cache[name]);\n                }\n            };\n\n            def.deps.forEach(function (propString) {\n                self._keyTree.add(propString, update);\n            });\n        });\n\n        this.on('all', function (eventName) {\n            if (changeRE.test(eventName)) {\n                self._keyTree.get(eventName.split(':')[1]).forEach(function (fn) {\n                    fn();\n                });\n            }\n        }, this);\n    },\n\n    _getDerivedProperty: function (name, flushCache) {\n        // is this a derived property that is cached\n        if (this._derived[name].cache) {\n            //set if this is the first time, or flushCache is set\n            if (flushCache || !this._cache.hasOwnProperty(name)) {\n                this._cache[name] = this._derived[name].fn.apply(this);\n            }\n            return this._cache[name];\n        } else {\n            return this._derived[name].fn.apply(this);\n        }\n    },\n\n    _initCollections: function () {\n        var coll;\n        if (!this._collections) return;\n        for (coll in this._collections) {\n            this._safeSet(coll, new this._collections[coll](null, {parent: this}));\n        }\n    },\n\n    _initChildren: function () {\n        var child;\n        if (!this._children) return;\n        for (child in this._children) {\n            this._safeSet(child, new this._children[child]({}, {parent: this}));\n            this.listenTo(this[child], 'all', this._getCachedEventBubblingHandler(child));\n        }\n    },\n\n    // Returns a bound handler for doing event bubbling while\n    // adding a name to the change string.\n    _getCachedEventBubblingHandler: function (propertyName) {\n        if (!this._eventBubblingHandlerCache[propertyName]) {\n            this._eventBubblingHandlerCache[propertyName] = function (name, model, newValue) {\n                if (changeRE.test(name)) {\n                    this.trigger('change:' + propertyName + '.' + name.split(':')[1], model, newValue);\n                } else if (name === 'change') {\n                    this.trigger('change', this);\n                }\n            }.bind(this);\n        }\n        return this._eventBubblingHandlerCache[propertyName];\n    },\n\n    // Check that all required attributes are present\n    _verifyRequired: function () {\n        var attrs = this.attributes; // should include session\n        for (var def in this._definition) {\n            if (this._definition[def].required && typeof attrs[def] === 'undefined') {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    // expose safeSet method\n    _safeSet: function safeSet(property, value) {\n        if (property in this) {\n            throw new Error('Encountered namespace collision while setting instance property `' + property + '`');\n        }\n        this[property] = value;\n        return this;\n    }\n});\n\n// getter for attributes\nObject.defineProperties(Base.prototype, {\n    attributes: {\n        get: function () {\n            return this.getAttributes({props: true, session: true});\n        }\n    },\n    all: {\n        get: function () {\n            return this.getAttributes({\n                session: true,\n                props: true,\n                derived: true\n            });\n        }\n    },\n    isState: {\n        get: function () { return true; },\n        set: function () { }\n    }\n});\n\n// helper for creating/storing property definitions and creating\n// appropriate getters/setters\nfunction createPropertyDefinition(object, name, desc, isSession) {\n    var def = object._definition[name] = {};\n    var type, descArray;\n\n    if (isString(desc)) {\n        // grab our type if all we've got is a string\n        type = object._ensureValidType(desc);\n        if (type) def.type = type;\n    } else {\n        //Transform array of ['type', required, default] to object form\n        if (Array.isArray(desc)) {\n            descArray = desc;\n            desc = {\n                type: descArray[0],\n                required: descArray[1],\n                'default': descArray[2]\n            };\n        }\n\n        type = object._ensureValidType(desc.type);\n        if (type) def.type = type;\n\n        if (desc.required) def.required = true;\n\n        if (desc['default'] && typeof desc['default'] === 'object') {\n            throw new TypeError('The default value for ' + name + ' cannot be an object/array, must be a value or a function which returns a value/object/array');\n        }\n\n        def['default'] = desc['default'];\n\n        def.allowNull = desc.allowNull ? desc.allowNull : false;\n        if (desc.setOnce) def.setOnce = true;\n        if (def.required && def['default'] === undefined && !def.setOnce) def['default'] = object._getDefaultForType(type);\n        def.test = desc.test;\n        def.values = desc.values;\n    }\n    if (isSession) def.session = true;\n\n    if (!type) {\n        type = isString(desc) ? desc : desc.type;\n        // TODO: start throwing a TypeError in future major versions instead of warning\n        console.warn('Invalid data type of `' + type + '` for `' + name + '` property. Use one of the default types or define your own');\n    }\n\n    // define a getter/setter on the prototype\n    // but they get/set on the instance\n    Object.defineProperty(object, name, {\n        set: function (val) {\n            this.set(name, val);\n        },\n        get: function () {\n            if (!this._values) {\n                throw Error('You may be trying to `extend` a state object with \"' + name + '\" which has been defined in `props` on the object being extended');\n            }\n            var value = this._values[name];\n            var typeDef = this._dataTypes[def.type];\n            if (typeof value !== 'undefined') {\n                if (typeDef && typeDef.get) {\n                    value = typeDef.get(value);\n                }\n                return value;\n            }\n            var defaultValue = result(def, 'default');\n            this._values[name] = defaultValue;\n            // If we've set a defaultValue, fire a change handler effectively marking\n            // its change from undefined to the default value.\n            if (typeof defaultValue !== 'undefined') {\n                var onChange = this._getOnChangeForType(def.type);\n                onChange(defaultValue, value, name);\n            }\n            return defaultValue;\n        }\n    });\n\n    return def;\n}\n\n// helper for creating derived property definitions\nfunction createDerivedProperty(modelProto, name, definition) {\n    var def = modelProto._derived[name] = {\n        fn: isFunction(definition) ? definition : definition.fn,\n        cache: (definition.cache !== false),\n        depList: definition.deps || []\n    };\n\n    // add to our shared dependency list\n    def.depList.forEach(function (dep) {\n        modelProto._deps[dep] = union(modelProto._deps[dep] || [], [name]);\n    });\n\n    // defined a top-level getter for derived names\n    Object.defineProperty(modelProto, name, {\n        get: function () {\n            return this._getDerivedProperty(name);\n        },\n        set: function () {\n            throw new TypeError(\"`\" + name + \"` is a derived property, it can't be set directly.\");\n        }\n    });\n}\n\nvar dataTypes = {\n    string: {\n        'default': function () {\n            return '';\n        }\n    },\n    date: {\n        set: function (newVal) {\n            var newType;\n            if (newVal == null) {\n                newType = typeof null;\n            } else if (!isDate(newVal)) {\n                var err = null;\n                var dateVal = new Date(newVal).valueOf();\n                if (isNaN(dateVal)) {\n                    // If the newVal cant be parsed, then try parseInt first\n                    dateVal = new Date(parseInt(newVal, 10)).valueOf();\n                    if (isNaN(dateVal)) err = true;\n                }\n                newVal = dateVal;\n                newType = 'date';\n                if (err) {\n                    newType = typeof newVal;\n                }\n            } else {\n                newType = 'date';\n                newVal = newVal.valueOf();\n            }\n\n            return {\n                val: newVal,\n                type: newType\n            };\n        },\n        get: function (val) {\n            if (val == null) { return val; }\n            return new Date(val);\n        },\n        'default': function () {\n            return new Date();\n        }\n    },\n    array: {\n        set: function (newVal) {\n            return {\n                val: newVal,\n                type: Array.isArray(newVal) ? 'array' : typeof newVal\n            };\n        },\n        'default': function () {\n            return [];\n        }\n    },\n    object: {\n        set: function (newVal) {\n            var newType = typeof newVal;\n            // we have to have a way of supporting \"missing\" objects.\n            // Null is an object, but setting a value to undefined\n            // should work too, IMO. We just override it, in that case.\n            if (newType !== 'object' && newVal === undefined) {\n                newVal = null;\n                newType = 'object';\n            }\n            return {\n                val: newVal,\n                type: newType\n            };\n        },\n        'default': function () {\n            return {};\n        }\n    },\n    // the `state` data type is a bit special in that setting it should\n    // also bubble events\n    state: {\n        set: function (newVal) {\n            var isInstance = newVal instanceof Base || (newVal && newVal.isState);\n            if (isInstance) {\n                return {\n                    val: newVal,\n                    type: 'state'\n                };\n            } else {\n                return {\n                    val: newVal,\n                    type: typeof newVal\n                };\n            }\n        },\n        compare: function (currentVal, newVal) {\n            return currentVal === newVal;\n        },\n\n        onChange : function(newVal, previousVal, attributeName){\n            // if this has changed we want to also handle\n            // event propagation\n            if (previousVal) {\n                this.stopListening(previousVal, 'all', this._getCachedEventBubblingHandler(attributeName));\n            }\n\n            if (newVal != null) {\n                this.listenTo(newVal, 'all', this._getCachedEventBubblingHandler(attributeName));\n            }\n        }\n    }\n};\n\n// the extend method used to extend prototypes, maintain inheritance chains for instanceof\n// and allow for additions to the model definitions.\nfunction extend(protoProps) {\n    /*jshint validthis:true*/\n    var parent = this;\n    var child;\n\n    // The constructor function for the new subclass is either defined by you\n    // (the \"constructor\" property in your `extend` definition), or defaulted\n    // by us to simply call the parent's constructor.\n    if (protoProps && protoProps.hasOwnProperty('constructor')) {\n        child = protoProps.constructor;\n    } else {\n        child = function () {\n            return parent.apply(this, arguments);\n        };\n    }\n\n    // Add static properties to the constructor function from parent\n    assign(child, parent);\n\n    // Set the prototype chain to inherit from `parent`, without calling\n    // `parent`'s constructor function.\n    var Surrogate = function () { this.constructor = child; };\n    Surrogate.prototype = parent.prototype;\n    child.prototype = new Surrogate();\n\n    // set prototype level objects\n    child.prototype._derived =  assign({}, parent.prototype._derived);\n    child.prototype._deps = assign({}, parent.prototype._deps);\n    child.prototype._definition = assign({}, parent.prototype._definition);\n    child.prototype._collections = assign({}, parent.prototype._collections);\n    child.prototype._children = assign({}, parent.prototype._children);\n    child.prototype._dataTypes = assign({}, parent.prototype._dataTypes || dataTypes);\n\n    // Mix in all prototype properties to the subclass if supplied.\n    if (protoProps) {\n        var omitFromExtend = [\n            'dataTypes', 'props', 'session', 'derived', 'collections', 'children'\n        ];\n        for(var i = 0; i < arguments.length; i++) {\n            var def = arguments[i];\n            if (def.dataTypes) {\n                forOwn(def.dataTypes, function (def, name) {\n                    child.prototype._dataTypes[name] = def;\n                });\n            }\n            if (def.props) {\n                forOwn(def.props, function (def, name) {\n                    createPropertyDefinition(child.prototype, name, def);\n                });\n            }\n            if (def.session) {\n                forOwn(def.session, function (def, name) {\n                    createPropertyDefinition(child.prototype, name, def, true);\n                });\n            }\n            if (def.derived) {\n                forOwn(def.derived, function (def, name) {\n                    createDerivedProperty(child.prototype, name, def);\n                });\n            }\n            if (def.collections) {\n                forOwn(def.collections, function (constructor, name) {\n                    child.prototype._collections[name] = constructor;\n                });\n            }\n            if (def.children) {\n                forOwn(def.children, function (constructor, name) {\n                    child.prototype._children[name] = constructor;\n                });\n            }\n            assign(child.prototype, omit(def, omitFromExtend));\n        }\n    }\n\n    // Set a convenience property in case the parent's prototype is needed\n    // later.\n    child.__super__ = parent.prototype;\n\n    return child;\n}\n\nBase.extend = extend;\n\n// Our main exports\nmodule.exports = Base;\n"]},"metadata":{},"sourceType":"script"}