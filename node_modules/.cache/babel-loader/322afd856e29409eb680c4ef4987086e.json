{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _dec, _desc, _value, _obj;\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _common = require('@webex/common');\n\nvar _batcher = require('./batcher');\n\nvar _batcher2 = _interopRequireDefault(_batcher);\n\nvar _clientMetricsBatcher = require('./client-metrics-batcher');\n\nvar _clientMetricsBatcher2 = _interopRequireDefault(_clientMetricsBatcher);\n\nvar _callDiagnosticEventsBatcher = require('./call-diagnostic-events-batcher');\n\nvar _callDiagnosticEventsBatcher2 = _interopRequireDefault(_callDiagnosticEventsBatcher);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\nvar Metrics = _webexCore.WebexPlugin.extend((_dec = (0, _common.deprecated)('Metrics#sendUnstructured() is deprecated; please use Metrics#submit()'), (_obj = {\n  children: {\n    batcher: _batcher2.default,\n    clientMetricsBatcher: _clientMetricsBatcher2.default,\n    callDiagnosticEventsBatcher: _callDiagnosticEventsBatcher2.default\n  },\n  namespace: 'Metrics',\n  sendUnstructured: function sendUnstructured(key, value) {\n    return this.submit(key, value);\n  },\n  submit: function submit(key, value) {\n    return this.batcher.request((0, _assign2.default)({\n      key: key\n    }, value));\n  },\n\n  /**\n   * This corresponds to #sendSemiStructured() in the deprecated metrics handler\n   * @param {string} eventName\n   * @param {Object} props\n   * @param {string} preLoginId\n   * @returns {Object} HttpResponse object\n   */\n  submitClientMetrics: function submitClientMetrics(eventName, props, preLoginId) {\n    var payload = {\n      metricName: eventName\n    };\n\n    if (props.tags) {\n      payload.tags = props.tags;\n    }\n\n    if (props.fields) {\n      payload.fields = props.fields;\n    }\n\n    if (props.type) {\n      payload.type = props.type;\n    }\n\n    if (props.context) {\n      payload.context = props.context;\n    }\n\n    if (props.eventPayload) {\n      payload.eventPayload = props.eventPayload;\n    }\n\n    payload.timestamp = Date.now();\n\n    if (preLoginId) {\n      var _payload = {\n        metrics: [payload]\n      }; // Do not batch these because pre-login events occur during onboarding, so we will be partially blind\n      // to users' progress through the reg flow if we wait to persist pre-login metrics for people who drop off because\n      // their metrics will not post from a queue flush in time\n\n      return this.postPreLoginMetric(_payload, preLoginId);\n    }\n\n    return this.clientMetricsBatcher.request(payload);\n  },\n\n  /**\n   * Issue request to alias a user's pre-login ID with their CI UUID\n   * @param {string} preLoginId\n   * @returns {Object} HttpResponse object\n   */\n  aliasUser: function aliasUser(preLoginId) {\n    return this.request({\n      method: 'POST',\n      api: 'metrics',\n      resource: 'clientmetrics',\n      headers: {\n        'x-prelogin-userid': preLoginId\n      },\n      body: {},\n      qs: {\n        alias: true\n      }\n    });\n  },\n  postPreLoginMetric: function postPreLoginMetric(payload, preLoginId) {\n    var _this = this;\n\n    return this.webex.credentials.getClientToken().then(function (token) {\n      return _this.request({\n        method: 'POST',\n        api: 'metrics',\n        resource: 'clientmetrics-prelogin',\n        headers: {\n          authorization: token.toString(),\n          'x-prelogin-userid': preLoginId\n        },\n        body: payload\n      });\n    });\n  },\n  submitCallDiagnosticEvents: function submitCallDiagnosticEvents(payload) {\n    var event = {\n      type: 'diagnostic-event',\n      eventPayload: payload\n    };\n    return this.callDiagnosticEventsBatcher.request(event);\n  },\n  version: '1.80.172'\n}, _applyDecoratedDescriptor(_obj, 'sendUnstructured', [_dec], (0, _getOwnPropertyDescriptor2.default)(_obj, 'sendUnstructured'), _obj), _obj)));\n\nexports.default = Metrics;","map":{"version":3,"sources":["metrics.js"],"names":["Metrics","children","batcher","Batcher","clientMetricsBatcher","ClientMetricsBatcher","callDiagnosticEventsBatcher","CallDiagnosticEventsBatcher","namespace","sendUnstructured","submit","key","submitClientMetrics","payload","metricName","props","Date","_payload","metrics","aliasUser","method","api","resource","headers","preLoginId","body","qs","alias","postPreLoginMetric","authorization","token","submitCallDiagnosticEvents","event","type","eventPayload"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin} from '@webex/webex-core';\nimport {deprecated} from '@webex/common';\n\nimport Batcher from './batcher';\nimport ClientMetricsBatcher from './client-metrics-batcher';\nimport CallDiagnosticEventsBatcher from './call-diagnostic-events-batcher';\n\nconst Metrics = WebexPlugin.extend({\n  children: {\n    batcher: Batcher,\n    clientMetricsBatcher: ClientMetricsBatcher,\n    callDiagnosticEventsBatcher: CallDiagnosticEventsBatcher\n  },\n\n  namespace: 'Metrics',\n\n  @deprecated('Metrics#sendUnstructured() is deprecated; please use Metrics#submit()')\n  sendUnstructured(key, value) {\n    return this.submit(key, value);\n  },\n\n  submit(key, value) {\n    return this.batcher.request(Object.assign({key}, value));\n  },\n\n  /**\n   * This corresponds to #sendSemiStructured() in the deprecated metrics handler\n   * @param {string} eventName\n   * @param {Object} props\n   * @param {string} preLoginId\n   * @returns {Object} HttpResponse object\n   */\n  submitClientMetrics(eventName, props, preLoginId) {\n    const payload = {metricName: eventName};\n\n    if (props.tags) {\n      payload.tags = props.tags;\n    }\n    if (props.fields) {\n      payload.fields = props.fields;\n    }\n    if (props.type) {\n      payload.type = props.type;\n    }\n    if (props.context) {\n      payload.context = props.context;\n    }\n\n    if (props.eventPayload) {\n      payload.eventPayload = props.eventPayload;\n    }\n\n    payload.timestamp = Date.now();\n\n    if (preLoginId) {\n      const _payload = {\n        metrics: [payload]\n      };\n\n      // Do not batch these because pre-login events occur during onboarding, so we will be partially blind\n      // to users' progress through the reg flow if we wait to persist pre-login metrics for people who drop off because\n      // their metrics will not post from a queue flush in time\n      return this.postPreLoginMetric(_payload, preLoginId);\n    }\n\n    return this.clientMetricsBatcher.request(payload);\n  },\n\n  /**\n   * Issue request to alias a user's pre-login ID with their CI UUID\n   * @param {string} preLoginId\n   * @returns {Object} HttpResponse object\n   */\n  aliasUser(preLoginId) {\n    return this.request({\n      method: 'POST',\n      api: 'metrics',\n      resource: 'clientmetrics',\n      headers: {\n        'x-prelogin-userid': preLoginId\n      },\n      body: {},\n      qs: {\n        alias: true\n      }\n    });\n  },\n\n  postPreLoginMetric(payload, preLoginId) {\n    return this.webex.credentials.getClientToken().then((token) =>\n      this.request({\n        method: 'POST',\n        api: 'metrics',\n        resource: 'clientmetrics-prelogin',\n        headers: {\n          authorization: token.toString(),\n          'x-prelogin-userid': preLoginId\n        },\n        body: payload\n      }));\n  },\n\n  submitCallDiagnosticEvents(payload) {\n    const event = {\n      type: 'diagnostic-event',\n      eventPayload: payload\n    };\n\n    return this.callDiagnosticEventsBatcher.request(event);\n  }\n});\n\nexport default Metrics;\n"]},"metadata":{},"sourceType":"script"}