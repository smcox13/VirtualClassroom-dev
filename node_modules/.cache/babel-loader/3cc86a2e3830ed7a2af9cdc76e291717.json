{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _httpCore = require('@webex/http-core');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar trailingSlashes = /(?:^\\/)|(?:\\/$)/;\n/**\n * @class\n */\n\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nvar ServiceInterceptor = function (_Interceptor) {\n  (0, _inherits3.default)(ServiceInterceptor, _Interceptor);\n\n  function ServiceInterceptor() {\n    (0, _classCallCheck3.default)(this, ServiceInterceptor);\n    return (0, _possibleConstructorReturn3.default)(this, (ServiceInterceptor.__proto__ || (0, _getPrototypeOf2.default)(ServiceInterceptor)).apply(this, arguments));\n  }\n\n  (0, _createClass3.default)(ServiceInterceptor, [{\n    key: 'onRequest',\n\n    /* eslint-disable no-param-reassign */\n\n    /**\n     * @see Interceptor#onRequest\n     * @param {Object} options - The request PTO.\n     * @returns {Object} - The mutated request PTO.\n     */\n    value: function onRequest(options) {\n      var _this2 = this; // Validate that the PTO includes a uri property.\n\n\n      if (options.uri) {\n        return options;\n      } // Normalize and validate the PTO.\n\n\n      this.normalizeOptions(options);\n      this.validateOptions(options); // Destructure commonly referenced namespaces.\n\n      var services = this.webex.internal.services;\n      var service = options.service,\n          resource = options.resource; // Attempt to collect the service url.\n\n      return services.waitForService({\n        name: service\n      }).then(function (serviceUrl) {\n        // Generate the combined service url and resource.\n        options.uri = _this2.generateUri(serviceUrl, resource);\n        return options;\n      }).catch(function () {\n        return _promise2.default.reject(new Error('service-interceptor: \\'' + service + '\\' is not a known service'));\n      });\n    }\n    /* eslint-disable class-methods-use-this */\n\n    /**\n     * Generate a usable request uri string from a service url and a resouce.\n     *\n     * @param {string} serviceUrl - The service url.\n     * @param {string} [resource] - The resouce to be appended to the service url.\n     * @returns {string} - The combined service url and resource.\n     */\n\n  }, {\n    key: 'generateUri',\n    value: function generateUri(serviceUrl) {\n      var resource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var formattedService = serviceUrl.replace(trailingSlashes, '');\n      var formattedResource = resource.replace(trailingSlashes, '');\n      return formattedService + '/' + formattedResource;\n    }\n    /**\n     * Normalizes request options relative to service identification.\n     *\n     * @param {Object} options - The request PTO.\n     * @returns {Object} - The mutated request PTO.\n     */\n\n  }, {\n    key: 'normalizeOptions',\n    value: function normalizeOptions(options) {\n      // Validate if the api property is used.\n      if (options.api) {\n        // Assign the service property the value of the api property if necessary.\n        options.service = options.service || options.api;\n        delete options.api;\n      }\n    }\n    /**\n     * Validates that the appropriate options for this interceptor are present.\n     *\n     * @param {Object} options - The request PTO.\n     * @returns {Object} - The mutated request PTO.\n     */\n\n  }, {\n    key: 'validateOptions',\n    value: function validateOptions(options) {\n      if (!options.resource) {\n        throw new Error('a `resource` parameter is required');\n      }\n\n      if (!options.service) {\n        throw new Error('a valid \\'service\\' parameter is required');\n      }\n    }\n    /* eslint-enable class-methods-use-this no-param-reassign */\n\n  }], [{\n    key: 'create',\n\n    /**\n     * @returns {ServiceInterceptor}\n     */\n    value: function create() {\n      /* eslint no-invalid-this: [0] */\n      return new ServiceInterceptor({\n        webex: this\n      });\n    }\n  }]);\n  return ServiceInterceptor;\n}(_httpCore.Interceptor);\n\nexports.default = ServiceInterceptor;","map":{"version":3,"sources":["service.js"],"names":["trailingSlashes","ServiceInterceptor","Interceptor","webex","options","services","service","resource","name","serviceUrl","formattedService","formattedResource"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAA,SAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;;;;;;;AAEA,IAAMA,eAAAA,GAAN,iBAAA;AAEA;;;;AARA;;;;IAWqBC,kB;;;;;;;;;;;AASnB;;AACA;;;;;8BAKUG,O,EAAS;AAAA,UAAA,MAAA,GAAA,IAAA,CAAA,CACjB;;;AACA,UAAIA,OAAAA,CAAJ,GAAA,EAAiB;AACf,eAAA,OAAA;AACD,OAJgB,CAMjB;;;AACA,WAAA,gBAAA,CAAA,OAAA;AACA,WAAA,eAAA,CAAA,OAAA,EARiB,CAUjB;;AAViB,UAWVC,QAXU,GAWE,KAAA,KAAA,CAXF,QAWE,CAXF,QAAA;AAAA,UAYVC,OAZU,GAYWF,OAZX,CAAA,OAAA;AAAA,UAYDG,QAZC,GAYWH,OAZX,CAAA,QAAA,CAAA,CAcjB;;AACA,aAAO,QAAA,CAAA,cAAA,CAAwB;AAACI,QAAAA,IAAAA,EAAzB;AAAwB,OAAxB,EAAA,IAAA,CACC,UAAA,UAAA,EAAgB;AACpB;AACAJ,QAAAA,OAAAA,CAAAA,GAAAA,GAAc,MAAA,CAAA,WAAA,CAAA,UAAA,EAAdA,QAAc,CAAdA;AAEA,eAAA,OAAA;AALG,OAAA,EAAA,KAAA,CAOE,YAAA;AAAA,eAAM,SAAA,CAAA,OAAA,CAAA,MAAA,CAAe,IAAA,KAAA,CAAA,4BAAA,OAAA,GAArB,2BAAqB,CAAf,CAAN;AAPT,OAAO,CAAP;AAUD;AAED;;AACA;;;;;;;;;;gCAOYK,U,EAA2B;AAAA,UAAfF,QAAe,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AACrC,UAAMG,gBAAAA,GAAmBD,UAAAA,CAAAA,OAAAA,CAAAA,eAAAA,EAAzB,EAAyBA,CAAzB;AACA,UAAME,iBAAAA,GAAoBJ,QAAAA,CAAAA,OAAAA,CAAAA,eAAAA,EAA1B,EAA0BA,CAA1B;AAEA,aAAUG,gBAAV,GAAA,GAAUA,GAAV,iBAAA;AACD;AAED;;;;;;;;;qCAMiBN,O,EAAS;AACxB;AACA,UAAIA,OAAAA,CAAJ,GAAA,EAAiB;AACf;AACAA,QAAAA,OAAAA,CAAAA,OAAAA,GAAkBA,OAAAA,CAAAA,OAAAA,IAAmBA,OAAAA,CAArCA,GAAAA;AACA,eAAOA,OAAAA,CAAP,GAAA;AACD;AACF;AAED;;;;;;;;;oCAMgBA,O,EAAS;AACvB,UAAI,CAACA,OAAAA,CAAL,QAAA,EAAuB;AACrB,cAAM,IAAA,KAAA,CAAN,oCAAM,CAAN;AACD;;AAED,UAAI,CAACA,OAAAA,CAAL,OAAA,EAAsB;AACpB,cAAM,IAAA,KAAA,CAAN,2CAAM,CAAN;AACD;AACF;AACD;;;;;AAtFA;;;6BAGgB;AACd;AACA,aAAO,IAAA,kBAAA,CAAuB;AAACD,QAAAA,KAAAA,EAA/B;AAA8B,OAAvB,CAAP;AACD;;;EAP6CD,SAAAA,CAAAA,W;;kBAA3BD,kB","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {Interceptor} from '@webex/http-core';\n\nconst trailingSlashes = /(?:^\\/)|(?:\\/$)/;\n\n/**\n * @class\n */\nexport default class ServiceInterceptor extends Interceptor {\n  /**\n   * @returns {ServiceInterceptor}\n   */\n  static create() {\n    /* eslint no-invalid-this: [0] */\n    return new ServiceInterceptor({webex: this});\n  }\n\n  /* eslint-disable no-param-reassign */\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options - The request PTO.\n   * @returns {Object} - The mutated request PTO.\n   */\n  onRequest(options) {\n    // Validate that the PTO includes a uri property.\n    if (options.uri) {\n      return options;\n    }\n\n    // Normalize and validate the PTO.\n    this.normalizeOptions(options);\n    this.validateOptions(options);\n\n    // Destructure commonly referenced namespaces.\n    const {services} = this.webex.internal;\n    const {service, resource} = options;\n\n    // Attempt to collect the service url.\n    return services.waitForService({name: service})\n      .then((serviceUrl) => {\n        // Generate the combined service url and resource.\n        options.uri = this.generateUri(serviceUrl, resource);\n\n        return options;\n      })\n      .catch(() => Promise.reject(new Error(\n        `service-interceptor: '${service}' is not a known service`\n      )));\n  }\n\n  /* eslint-disable class-methods-use-this */\n  /**\n   * Generate a usable request uri string from a service url and a resouce.\n   *\n   * @param {string} serviceUrl - The service url.\n   * @param {string} [resource] - The resouce to be appended to the service url.\n   * @returns {string} - The combined service url and resource.\n   */\n  generateUri(serviceUrl, resource = '') {\n    const formattedService = serviceUrl.replace(trailingSlashes, '');\n    const formattedResource = resource.replace(trailingSlashes, '');\n\n    return `${formattedService}/${formattedResource}`;\n  }\n\n  /**\n   * Normalizes request options relative to service identification.\n   *\n   * @param {Object} options - The request PTO.\n   * @returns {Object} - The mutated request PTO.\n   */\n  normalizeOptions(options) {\n    // Validate if the api property is used.\n    if (options.api) {\n      // Assign the service property the value of the api property if necessary.\n      options.service = options.service || options.api;\n      delete options.api;\n    }\n  }\n\n  /**\n   * Validates that the appropriate options for this interceptor are present.\n   *\n   * @param {Object} options - The request PTO.\n   * @returns {Object} - The mutated request PTO.\n   */\n  validateOptions(options) {\n    if (!options.resource) {\n      throw new Error('a `resource` parameter is required');\n    }\n\n    if (!options.service) {\n      throw new Error('a valid \\'service\\' parameter is required');\n    }\n  }\n  /* eslint-enable class-methods-use-this no-param-reassign */\n}\n"]},"metadata":{},"sourceType":"script"}