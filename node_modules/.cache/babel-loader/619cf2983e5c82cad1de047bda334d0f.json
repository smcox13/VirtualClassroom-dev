{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport MessageImprint from \"./MessageImprint.js\";\nimport Extension from \"./Extension.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC3161\r\n */\n\nexport default class TimeStampReq {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for TimeStampReq class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", TimeStampReq.defaultValues(\"version\"));\n    /**\r\n     * @type {MessageImprint}\r\n     * @desc messageImprint\r\n     */\n\n    this.messageImprint = getParametersValue(parameters, \"messageImprint\", TimeStampReq.defaultValues(\"messageImprint\"));\n    if (\"reqPolicy\" in parameters)\n      /**\r\n       * @type {string}\r\n       * @desc reqPolicy\r\n       */\n      this.reqPolicy = getParametersValue(parameters, \"reqPolicy\", TimeStampReq.defaultValues(\"reqPolicy\"));\n    if (\"nonce\" in parameters)\n      /**\r\n       * @type {Integer}\r\n       * @desc nonce\r\n       */\n      this.nonce = getParametersValue(parameters, \"nonce\", TimeStampReq.defaultValues(\"nonce\"));\n    if (\"certReq\" in parameters)\n      /**\r\n       * @type {boolean}\r\n       * @desc certReq\r\n       */\n      this.certReq = getParametersValue(parameters, \"certReq\", TimeStampReq.defaultValues(\"certReq\"));\n    if (\"extensions\" in parameters)\n      /**\r\n       * @type {Array.<Extension>}\r\n       * @desc extensions\r\n       */\n      this.extensions = getParametersValue(parameters, \"extensions\", TimeStampReq.defaultValues(\"extensions\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"version\":\n        return 0;\n\n      case \"messageImprint\":\n        return new MessageImprint();\n\n      case \"reqPolicy\":\n        return \"\";\n\n      case \"nonce\":\n        return new asn1js.Integer();\n\n      case \"certReq\":\n        return false;\n\n      case \"extensions\":\n        return [];\n\n      default:\n        throw new Error(`Invalid member name for TimeStampReq class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"version\":\n      case \"reqPolicy\":\n      case \"certReq\":\n        return memberValue === TimeStampReq.defaultValues(memberName);\n\n      case \"messageImprint\":\n        return MessageImprint.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm) && MessageImprint.compareWithDefault(\"hashedMessage\", memberValue.hashedMessage);\n\n      case \"nonce\":\n        return memberValue.isEqual(TimeStampReq.defaultValues(memberName));\n\n      case \"extensions\":\n        return memberValue.length === 0;\n\n      default:\n        throw new Error(`Invalid member name for TimeStampReq class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * TimeStampReq ::= SEQUENCE  {\r\n   *    version               INTEGER  { v1(1) },\r\n   *    messageImprint        MessageImprint,\r\n   *    reqPolicy             TSAPolicyId              OPTIONAL,\r\n   *    nonce                 INTEGER                  OPTIONAL,\r\n   *    certReq               BOOLEAN                  DEFAULT FALSE,\r\n   *    extensions            [0] IMPLICIT Extensions  OPTIONAL  }\r\n   *\r\n   * TSAPolicyId ::= OBJECT IDENTIFIER\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [type]\r\n     * @property {string} [setName]\r\n     * @property {string} [values]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"TimeStampReq\",\n      value: [new asn1js.Integer({\n        name: names.version || \"TimeStampReq.version\"\n      }), MessageImprint.schema(names.messageImprint || {\n        names: {\n          blockName: \"TimeStampReq.messageImprint\"\n        }\n      }), new asn1js.ObjectIdentifier({\n        name: names.reqPolicy || \"TimeStampReq.reqPolicy\",\n        optional: true\n      }), new asn1js.Integer({\n        name: names.nonce || \"TimeStampReq.nonce\",\n        optional: true\n      }), new asn1js.Boolean({\n        name: names.certReq || \"TimeStampReq.certReq\",\n        optional: true\n      }), new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [new asn1js.Repeated({\n          name: names.extensions || \"TimeStampReq.extensions\",\n          value: Extension.schema()\n        })]\n      }) // IMPLICIT SEQUENCE value\n      ]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"TimeStampReq.version\", \"TimeStampReq.messageImprint\", \"TimeStampReq.reqPolicy\", \"TimeStampReq.nonce\", \"TimeStampReq.certReq\", \"TimeStampReq.extensions\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, TimeStampReq.schema());\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for TimeStampReq\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.version = asn1.result[\"TimeStampReq.version\"].valueBlock.valueDec;\n    this.messageImprint = new MessageImprint({\n      schema: asn1.result[\"TimeStampReq.messageImprint\"]\n    });\n    if (\"TimeStampReq.reqPolicy\" in asn1.result) this.reqPolicy = asn1.result[\"TimeStampReq.reqPolicy\"].valueBlock.toString();\n    if (\"TimeStampReq.nonce\" in asn1.result) this.nonce = asn1.result[\"TimeStampReq.nonce\"];\n    if (\"TimeStampReq.certReq\" in asn1.result) this.certReq = asn1.result[\"TimeStampReq.certReq\"].valueBlock.value;\n    if (\"TimeStampReq.extensions\" in asn1.result) this.extensions = Array.from(asn1.result[\"TimeStampReq.extensions\"], element => new Extension({\n      schema: element\n    })); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n    outputArray.push(new asn1js.Integer({\n      value: this.version\n    }));\n    outputArray.push(this.messageImprint.toSchema());\n    if (\"reqPolicy\" in this) outputArray.push(new asn1js.ObjectIdentifier({\n      value: this.reqPolicy\n    }));\n    if (\"nonce\" in this) outputArray.push(this.nonce);\n    if (\"certReq\" in this && TimeStampReq.compareWithDefault(\"certReq\", this.certReq) === false) outputArray.push(new asn1js.Boolean({\n      value: this.certReq\n    })); //region Create array of extensions\n\n    if (\"extensions\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: Array.from(this.extensions, element => element.toSchema())\n      }));\n    } //endregion\n    //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const _object = {\n      version: this.version,\n      messageImprint: this.messageImprint.toJSON()\n    };\n    if (\"reqPolicy\" in this) _object.reqPolicy = this.reqPolicy;\n    if (\"nonce\" in this) _object.nonce = this.nonce.toJSON();\n    if (\"certReq\" in this && TimeStampReq.compareWithDefault(\"certReq\", this.certReq) === false) _object.certReq = this.certReq;\n    if (\"extensions\" in this) _object.extensions = Array.from(this.extensions, element => element.toJSON());\n    return _object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/TimeStampReq.js"],"names":["asn1js","getParametersValue","clearProps","MessageImprint","Extension","TimeStampReq","constructor","parameters","version","defaultValues","messageImprint","reqPolicy","nonce","certReq","extensions","fromSchema","schema","memberName","Integer","Error","compareWithDefault","memberValue","hashAlgorithm","hashedMessage","isEqual","length","names","Sequence","name","blockName","value","ObjectIdentifier","optional","Boolean","Constructed","idBlock","tagClass","tagNumber","Repeated","asn1","compareSchema","verified","result","valueBlock","valueDec","toString","Array","from","element","toSchema","outputArray","push","toJSON","_object"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,SAASC,kBAAT,EAA6BC,UAA7B,QAA+C,SAA/C;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,OAAOC,SAAP,MAAsB,gBAAtB,C,CACA;;AACA;;;;AAGA,eAAe,MAAMC,YAAN,CACf;AACC;;AACA;;;;;AAKAC,EAAAA,WAAW,CAACC,UAAU,GAAG,EAAd,EACX;AACC;;AACA;;;;AAIA,SAAKC,OAAL,GAAeP,kBAAkB,CAACM,UAAD,EAAa,SAAb,EAAwBF,YAAY,CAACI,aAAb,CAA2B,SAA3B,CAAxB,CAAjC;AACA;;;;;AAIA,SAAKC,cAAL,GAAsBT,kBAAkB,CAACM,UAAD,EAAa,gBAAb,EAA+BF,YAAY,CAACI,aAAb,CAA2B,gBAA3B,CAA/B,CAAxC;AAEA,QAAG,eAAeF,UAAlB;AACC;;;;AAIA,WAAKI,SAAL,GAAiBV,kBAAkB,CAACM,UAAD,EAAa,WAAb,EAA0BF,YAAY,CAACI,aAAb,CAA2B,WAA3B,CAA1B,CAAnC;AAED,QAAG,WAAWF,UAAd;AACC;;;;AAIA,WAAKK,KAAL,GAAaX,kBAAkB,CAACM,UAAD,EAAa,OAAb,EAAsBF,YAAY,CAACI,aAAb,CAA2B,OAA3B,CAAtB,CAA/B;AAED,QAAG,aAAaF,UAAhB;AACC;;;;AAIA,WAAKM,OAAL,GAAeZ,kBAAkB,CAACM,UAAD,EAAa,SAAb,EAAwBF,YAAY,CAACI,aAAb,CAA2B,SAA3B,CAAxB,CAAjC;AAED,QAAG,gBAAgBF,UAAnB;AACC;;;;AAIA,WAAKO,UAAL,GAAkBb,kBAAkB,CAACM,UAAD,EAAa,YAAb,EAA2BF,YAAY,CAACI,aAAb,CAA2B,YAA3B,CAA3B,CAApC,CAvCF,CAwCC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKQ,UAAL,CAAgBR,UAAU,CAACS,MAA3B,EA5CF,CA6CC;AACA,GAtDF,CAuDC;;AACA;;;;;;AAIA,SAAOP,aAAP,CAAqBQ,UAArB,EACA;AACC,YAAOA,UAAP;AAEC,WAAK,SAAL;AACC,eAAO,CAAP;;AACD,WAAK,gBAAL;AACC,eAAO,IAAId,cAAJ,EAAP;;AACD,WAAK,WAAL;AACC,eAAO,EAAP;;AACD,WAAK,OAAL;AACC,eAAO,IAAIH,MAAM,CAACkB,OAAX,EAAP;;AACD,WAAK,SAAL;AACC,eAAO,KAAP;;AACD,WAAK,YAAL;AACC,eAAO,EAAP;;AACD;AACC,cAAM,IAAIC,KAAJ,CAAW,+CAA8CF,UAAW,EAApE,CAAN;AAfF;AAiBA,GA/EF,CAgFC;;AACA;;;;;;;AAKA,SAAOG,kBAAP,CAA0BH,UAA1B,EAAsCI,WAAtC,EACA;AACC,YAAOJ,UAAP;AAEC,WAAK,SAAL;AACA,WAAK,WAAL;AACA,WAAK,SAAL;AACC,eAAQI,WAAW,KAAKhB,YAAY,CAACI,aAAb,CAA2BQ,UAA3B,CAAxB;;AACD,WAAK,gBAAL;AACC,eAASd,cAAc,CAACiB,kBAAf,CAAkC,eAAlC,EAAmDC,WAAW,CAACC,aAA/D,CAAD,IACLnB,cAAc,CAACiB,kBAAf,CAAkC,eAAlC,EAAmDC,WAAW,CAACE,aAA/D,CADH;;AAED,WAAK,OAAL;AACC,eAAQF,WAAW,CAACG,OAAZ,CAAoBnB,YAAY,CAACI,aAAb,CAA2BQ,UAA3B,CAApB,CAAR;;AACD,WAAK,YAAL;AACC,eAAQI,WAAW,CAACI,MAAZ,KAAuB,CAA/B;;AACD;AACC,cAAM,IAAIN,KAAJ,CAAW,+CAA8CF,UAAW,EAApE,CAAN;AAdF;AAgBA,GAxGF,CAyGC;;AACA;;;;;;;;;;;;;;;;;;;;;AAmBA,SAAOD,MAAP,CAAcT,UAAU,GAAG,EAA3B,EACA;AACC;;;;;;;AAOA,UAAMmB,KAAK,GAAGzB,kBAAkB,CAACM,UAAD,EAAa,OAAb,EAAsB,EAAtB,CAAhC;AAEA,WAAQ,IAAIP,MAAM,CAAC2B,QAAX,CAAoB;AAC3BC,MAAAA,IAAI,EAAGF,KAAK,CAACG,SAAN,IAAmB,cADC;AAE3BC,MAAAA,KAAK,EAAE,CACN,IAAI9B,MAAM,CAACkB,OAAX,CAAmB;AAAEU,QAAAA,IAAI,EAAGF,KAAK,CAAClB,OAAN,IAAiB;AAA1B,OAAnB,CADM,EAENL,cAAc,CAACa,MAAf,CAAsBU,KAAK,CAAChB,cAAN,IAAwB;AAC7CgB,QAAAA,KAAK,EAAE;AACNG,UAAAA,SAAS,EAAE;AADL;AADsC,OAA9C,CAFM,EAON,IAAI7B,MAAM,CAAC+B,gBAAX,CAA4B;AAC3BH,QAAAA,IAAI,EAAGF,KAAK,CAACf,SAAN,IAAmB,wBADC;AAE3BqB,QAAAA,QAAQ,EAAE;AAFiB,OAA5B,CAPM,EAWN,IAAIhC,MAAM,CAACkB,OAAX,CAAmB;AAClBU,QAAAA,IAAI,EAAGF,KAAK,CAACd,KAAN,IAAe,oBADJ;AAElBoB,QAAAA,QAAQ,EAAE;AAFQ,OAAnB,CAXM,EAeN,IAAIhC,MAAM,CAACiC,OAAX,CAAmB;AAClBL,QAAAA,IAAI,EAAGF,KAAK,CAACb,OAAN,IAAiB,sBADN;AAElBmB,QAAAA,QAAQ,EAAE;AAFQ,OAAnB,CAfM,EAmBN,IAAIhC,MAAM,CAACkC,WAAX,CAAuB;AACtBF,QAAAA,QAAQ,EAAE,IADY;AAEtBG,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AACK;AACbC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAFa;AAMtBP,QAAAA,KAAK,EAAE,CAAC,IAAI9B,MAAM,CAACsC,QAAX,CAAoB;AAC3BV,UAAAA,IAAI,EAAGF,KAAK,CAACZ,UAAN,IAAoB,yBADA;AAE3BgB,UAAAA,KAAK,EAAE1B,SAAS,CAACY,MAAV;AAFoB,SAApB,CAAD;AANe,OAAvB,CAnBM,CA6BH;AA7BG;AAFoB,KAApB,CAAR;AAkCA,GA1KF,CA2KC;;AACA;;;;;;AAIAD,EAAAA,UAAU,CAACC,MAAD,EACV;AACC;AACAd,IAAAA,UAAU,CAACc,MAAD,EAAS,CAClB,sBADkB,EAElB,6BAFkB,EAGlB,wBAHkB,EAIlB,oBAJkB,EAKlB,sBALkB,EAMlB,yBANkB,CAAT,CAAV,CAFD,CAUC;AAEA;;AACA,UAAMuB,IAAI,GAAGvC,MAAM,CAACwC,aAAP,CAAqBxB,MAArB,EACZA,MADY,EAEZX,YAAY,CAACW,MAAb,EAFY,CAAb;AAKA,QAAGuB,IAAI,CAACE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAItB,KAAJ,CAAU,sEAAV,CAAN,CAnBF,CAoBC;AAEA;;AACA,SAAKX,OAAL,GAAe+B,IAAI,CAACG,MAAL,CAAY,sBAAZ,EAAoCC,UAApC,CAA+CC,QAA9D;AACA,SAAKlC,cAAL,GAAsB,IAAIP,cAAJ,CAAmB;AAAEa,MAAAA,MAAM,EAAEuB,IAAI,CAACG,MAAL,CAAY,6BAAZ;AAAV,KAAnB,CAAtB;AACA,QAAG,4BAA4BH,IAAI,CAACG,MAApC,EACC,KAAK/B,SAAL,GAAiB4B,IAAI,CAACG,MAAL,CAAY,wBAAZ,EAAsCC,UAAtC,CAAiDE,QAAjD,EAAjB;AACD,QAAG,wBAAwBN,IAAI,CAACG,MAAhC,EACC,KAAK9B,KAAL,GAAa2B,IAAI,CAACG,MAAL,CAAY,oBAAZ,CAAb;AACD,QAAG,0BAA0BH,IAAI,CAACG,MAAlC,EACC,KAAK7B,OAAL,GAAe0B,IAAI,CAACG,MAAL,CAAY,sBAAZ,EAAoCC,UAApC,CAA+Cb,KAA9D;AACD,QAAG,6BAA6BS,IAAI,CAACG,MAArC,EACC,KAAK5B,UAAL,GAAkBgC,KAAK,CAACC,IAAN,CAAWR,IAAI,CAACG,MAAL,CAAY,yBAAZ,CAAX,EAAmDM,OAAO,IAAI,IAAI5C,SAAJ,CAAc;AAAEY,MAAAA,MAAM,EAAEgC;AAAV,KAAd,CAA9D,CAAlB,CAhCF,CAiCC;AACA,GAnNF,CAoNC;;AACA;;;;;;AAIAC,EAAAA,QAAQ,GACR;AACC;AACA,UAAMC,WAAW,GAAG,EAApB;AAEAA,IAAAA,WAAW,CAACC,IAAZ,CAAiB,IAAInD,MAAM,CAACkB,OAAX,CAAmB;AAAEY,MAAAA,KAAK,EAAE,KAAKtB;AAAd,KAAnB,CAAjB;AACA0C,IAAAA,WAAW,CAACC,IAAZ,CAAiB,KAAKzC,cAAL,CAAoBuC,QAApB,EAAjB;AACA,QAAG,eAAe,IAAlB,EACCC,WAAW,CAACC,IAAZ,CAAiB,IAAInD,MAAM,CAAC+B,gBAAX,CAA4B;AAAED,MAAAA,KAAK,EAAE,KAAKnB;AAAd,KAA5B,CAAjB;AACD,QAAG,WAAW,IAAd,EACCuC,WAAW,CAACC,IAAZ,CAAiB,KAAKvC,KAAtB;AACD,QAAI,aAAa,IAAd,IAAwBP,YAAY,CAACe,kBAAb,CAAgC,SAAhC,EAA2C,KAAKP,OAAhD,MAA6D,KAAxF,EACCqC,WAAW,CAACC,IAAZ,CAAiB,IAAInD,MAAM,CAACiC,OAAX,CAAmB;AAAEH,MAAAA,KAAK,EAAE,KAAKjB;AAAd,KAAnB,CAAjB,EAXF,CAaC;;AACA,QAAG,gBAAgB,IAAnB,EACA;AACCqC,MAAAA,WAAW,CAACC,IAAZ,CAAiB,IAAInD,MAAM,CAACkC,WAAX,CAAuB;AACvCC,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AACK;AACbC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAD8B;AAKvCP,QAAAA,KAAK,EAAEgB,KAAK,CAACC,IAAN,CAAW,KAAKjC,UAAhB,EAA4BkC,OAAO,IAAIA,OAAO,CAACC,QAAR,EAAvC;AALgC,OAAvB,CAAjB;AAOA,KAvBF,CAwBC;AACA;AAEA;;;AACA,WAAQ,IAAIjD,MAAM,CAAC2B,QAAX,CAAoB;AAC3BG,MAAAA,KAAK,EAAEoB;AADoB,KAApB,CAAR,CA5BD,CA+BC;AACA,GA1PF,CA2PC;;AACA;;;;;;AAIAE,EAAAA,MAAM,GACN;AACC,UAAMC,OAAO,GAAG;AACf7C,MAAAA,OAAO,EAAE,KAAKA,OADC;AAEfE,MAAAA,cAAc,EAAE,KAAKA,cAAL,CAAoB0C,MAApB;AAFD,KAAhB;AAKA,QAAG,eAAe,IAAlB,EACCC,OAAO,CAAC1C,SAAR,GAAoB,KAAKA,SAAzB;AAED,QAAG,WAAW,IAAd,EACC0C,OAAO,CAACzC,KAAR,GAAgB,KAAKA,KAAL,CAAWwC,MAAX,EAAhB;AAED,QAAI,aAAa,IAAd,IAAwB/C,YAAY,CAACe,kBAAb,CAAgC,SAAhC,EAA2C,KAAKP,OAAhD,MAA6D,KAAxF,EACCwC,OAAO,CAACxC,OAAR,GAAkB,KAAKA,OAAvB;AAED,QAAG,gBAAgB,IAAnB,EACCwC,OAAO,CAACvC,UAAR,GAAqBgC,KAAK,CAACC,IAAN,CAAW,KAAKjC,UAAhB,EAA4BkC,OAAO,IAAIA,OAAO,CAACI,MAAR,EAAvC,CAArB;AAED,WAAOC,OAAP;AACA,GApRF,CAqRC;;;AArRD,C,CAuRA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport MessageImprint from \"./MessageImprint.js\";\r\nimport Extension from \"./Extension.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class TimeStampReq\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TimeStampReq class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", TimeStampReq.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {MessageImprint}\r\n\t\t * @desc messageImprint\r\n\t\t */\r\n\t\tthis.messageImprint = getParametersValue(parameters, \"messageImprint\", TimeStampReq.defaultValues(\"messageImprint\"));\r\n\r\n\t\tif(\"reqPolicy\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {string}\r\n\t\t\t * @desc reqPolicy\r\n\t\t\t */\r\n\t\t\tthis.reqPolicy = getParametersValue(parameters, \"reqPolicy\", TimeStampReq.defaultValues(\"reqPolicy\"));\r\n\r\n\t\tif(\"nonce\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Integer}\r\n\t\t\t * @desc nonce\r\n\t\t\t */\r\n\t\t\tthis.nonce = getParametersValue(parameters, \"nonce\", TimeStampReq.defaultValues(\"nonce\"));\r\n\r\n\t\tif(\"certReq\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {boolean}\r\n\t\t\t * @desc certReq\r\n\t\t\t */\r\n\t\t\tthis.certReq = getParametersValue(parameters, \"certReq\", TimeStampReq.defaultValues(\"certReq\"));\r\n\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @desc extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", TimeStampReq.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"messageImprint\":\r\n\t\t\t\treturn new MessageImprint();\r\n\t\t\tcase \"reqPolicy\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"nonce\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"certReq\":\r\n\t\t\t\treturn false;\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampReq class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\tcase \"reqPolicy\":\r\n\t\t\tcase \"certReq\":\r\n\t\t\t\treturn (memberValue === TimeStampReq.defaultValues(memberName));\r\n\t\t\tcase \"messageImprint\":\r\n\t\t\t\treturn ((MessageImprint.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\r\n\t\t\t\t\t\t(MessageImprint.compareWithDefault(\"hashedMessage\", memberValue.hashedMessage)));\r\n\t\t\tcase \"nonce\":\r\n\t\t\t\treturn (memberValue.isEqual(TimeStampReq.defaultValues(memberName)));\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampReq class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * TimeStampReq ::= SEQUENCE  {\r\n\t *    version               INTEGER  { v1(1) },\r\n\t *    messageImprint        MessageImprint,\r\n\t *    reqPolicy             TSAPolicyId              OPTIONAL,\r\n\t *    nonce                 INTEGER                  OPTIONAL,\r\n\t *    certReq               BOOLEAN                  DEFAULT FALSE,\r\n\t *    extensions            [0] IMPLICIT Extensions  OPTIONAL  }\r\n\t *\r\n\t * TSAPolicyId ::= OBJECT IDENTIFIER\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [type]\r\n\t\t * @property {string} [setName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TimeStampReq\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"TimeStampReq.version\") }),\r\n\t\t\t\tMessageImprint.schema(names.messageImprint || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TimeStampReq.messageImprint\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.ObjectIdentifier({\r\n\t\t\t\t\tname: (names.reqPolicy || \"TimeStampReq.reqPolicy\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\tname: (names.nonce || \"TimeStampReq.nonce\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Boolean({\r\n\t\t\t\t\tname: (names.certReq || \"TimeStampReq.certReq\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Repeated({\r\n\t\t\t\t\t\tname: (names.extensions || \"TimeStampReq.extensions\"),\r\n\t\t\t\t\t\tvalue: Extension.schema()\r\n\t\t\t\t\t})]\r\n\t\t\t\t}) // IMPLICIT SEQUENCE value\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"TimeStampReq.version\",\r\n\t\t\t\"TimeStampReq.messageImprint\",\r\n\t\t\t\"TimeStampReq.reqPolicy\",\r\n\t\t\t\"TimeStampReq.nonce\",\r\n\t\t\t\"TimeStampReq.certReq\",\r\n\t\t\t\"TimeStampReq.extensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTimeStampReq.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TimeStampReq\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"TimeStampReq.version\"].valueBlock.valueDec;\r\n\t\tthis.messageImprint = new MessageImprint({ schema: asn1.result[\"TimeStampReq.messageImprint\"] });\r\n\t\tif(\"TimeStampReq.reqPolicy\" in asn1.result)\r\n\t\t\tthis.reqPolicy = asn1.result[\"TimeStampReq.reqPolicy\"].valueBlock.toString();\r\n\t\tif(\"TimeStampReq.nonce\" in asn1.result)\r\n\t\t\tthis.nonce = asn1.result[\"TimeStampReq.nonce\"];\r\n\t\tif(\"TimeStampReq.certReq\" in asn1.result)\r\n\t\t\tthis.certReq = asn1.result[\"TimeStampReq.certReq\"].valueBlock.value;\r\n\t\tif(\"TimeStampReq.extensions\" in asn1.result)\r\n\t\t\tthis.extensions = Array.from(asn1.result[\"TimeStampReq.extensions\"], element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(this.messageImprint.toSchema());\r\n\t\tif(\"reqPolicy\" in this)\r\n\t\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.reqPolicy }));\r\n\t\tif(\"nonce\" in this)\r\n\t\t\toutputArray.push(this.nonce);\r\n\t\tif((\"certReq\" in this) && (TimeStampReq.compareWithDefault(\"certReq\", this.certReq) === false))\r\n\t\t\toutputArray.push(new asn1js.Boolean({ value: this.certReq }));\r\n\r\n\t\t//region Create array of extensions\r\n\t\tif(\"extensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tmessageImprint: this.messageImprint.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"reqPolicy\" in this)\r\n\t\t\t_object.reqPolicy = this.reqPolicy;\r\n\r\n\t\tif(\"nonce\" in this)\r\n\t\t\t_object.nonce = this.nonce.toJSON();\r\n\r\n\t\tif((\"certReq\" in this) && (TimeStampReq.compareWithDefault(\"certReq\", this.certReq) === false))\r\n\t\t\t_object.certReq = this.certReq;\r\n\r\n\t\tif(\"extensions\" in this)\r\n\t\t\t_object.extensions = Array.from(this.extensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}