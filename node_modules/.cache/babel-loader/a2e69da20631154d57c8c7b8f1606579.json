{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralName from \"./GeneralName.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nexport default class AccessDescription {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for AccessDescription class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc The type and format of the information are specified by the accessMethod field. This profile defines two accessMethod OIDs: id-ad-caIssuers and id-ad-ocsp\r\n     */\n    this.accessMethod = getParametersValue(parameters, \"accessMethod\", AccessDescription.defaultValues(\"accessMethod\"));\n    /**\r\n     * @type {GeneralName}\r\n     * @desc The accessLocation field specifies the location of the information\r\n     */\n\n    this.accessLocation = getParametersValue(parameters, \"accessLocation\", AccessDescription.defaultValues(\"accessLocation\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"accessMethod\":\n        return \"\";\n\n      case \"accessLocation\":\n        return new GeneralName();\n\n      default:\n        throw new Error(`Invalid member name for AccessDescription class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * AccessDescription  ::=  SEQUENCE {\r\n   *    accessMethod          OBJECT IDENTIFIER,\r\n   *    accessLocation        GeneralName  }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [accessMethod]\r\n     * @property {string} [accessLocation]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.ObjectIdentifier({\n        name: names.accessMethod || \"\"\n      }), GeneralName.schema(names.accessLocation || {})]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"accessMethod\", \"accessLocation\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, AccessDescription.schema({\n      names: {\n        accessMethod: \"accessMethod\",\n        accessLocation: {\n          names: {\n            blockName: \"accessLocation\"\n          }\n        }\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AccessDescription\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.accessMethod = asn1.result.accessMethod.valueBlock.toString();\n    this.accessLocation = new GeneralName({\n      schema: asn1.result.accessLocation\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [new asn1js.ObjectIdentifier({\n        value: this.accessMethod\n      }), this.accessLocation.toSchema()]\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      accessMethod: this.accessMethod,\n      accessLocation: this.accessLocation.toJSON()\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/AccessDescription.js"],"names":["asn1js","getParametersValue","clearProps","GeneralName","AccessDescription","constructor","parameters","accessMethod","defaultValues","accessLocation","fromSchema","schema","memberName","Error","names","Sequence","name","blockName","value","ObjectIdentifier","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AccessDescription\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AccessDescription class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc The type and format of the information are specified by the accessMethod field. This profile defines two accessMethod OIDs: id-ad-caIssuers and id-ad-ocsp\r\n\t\t */\r\n\t\tthis.accessMethod = getParametersValue(parameters, \"accessMethod\", AccessDescription.defaultValues(\"accessMethod\"));\r\n\t\t/**\r\n\t\t * @type {GeneralName}\r\n\t\t * @desc The accessLocation field specifies the location of the information\r\n\t\t */\r\n\t\tthis.accessLocation = getParametersValue(parameters, \"accessLocation\", AccessDescription.defaultValues(\"accessLocation\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"accessMethod\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"accessLocation\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AccessDescription class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AccessDescription  ::=  SEQUENCE {\r\n\t *    accessMethod          OBJECT IDENTIFIER,\r\n\t *    accessLocation        GeneralName  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [accessMethod]\r\n\t\t * @property {string} [accessLocation]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.accessMethod || \"\") }),\r\n\t\t\t\tGeneralName.schema(names.accessLocation || {})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"accessMethod\",\r\n\t\t\t\"accessLocation\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAccessDescription.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\taccessMethod: \"accessMethod\",\r\n\t\t\t\t\taccessLocation: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"accessLocation\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AccessDescription\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.accessMethod = asn1.result.accessMethod.valueBlock.toString();\r\n\t\tthis.accessLocation = new GeneralName({ schema: asn1.result.accessLocation });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.accessMethod }),\r\n\t\t\t\tthis.accessLocation.toSchema()\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\taccessMethod: this.accessMethod,\r\n\t\t\taccessLocation: this.accessLocation.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}