{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _webexCore = require('@webex/webex-core');\n/**\n * @typedef {Object} TeamMembershipObject\n * @property {string} id - (server generated) Unique identifier for the team membership\n * @property {string} teamId - The team ID\n * @property {string} personId - The person ID\n * @property {string} personEmail - The email address of the person\n * @property {boolean} isModerator - Set to `true` to make the person a team\n * moderator\n * @property {string} created - (server generated) The date and time that the team membership was created\n */\n\n/**\n * Team Memberships represent a person's relationship to a team. Use this API to\n * list members of any team that you're in or create memberships to invite\n * someone to a team. Team memberships can also be updated to make someome a\n * moderator or deleted to remove them from the team.\n *\n * Just like in the Webex app, you must be a member of the team in order to list\n * its memberships or invite people.\n * @class\n */\n\n\nvar TeamMemberships = _webexCore.WebexPlugin.extend({\n  /**\n   * Add someone to a team by Person ID or email address; optionally making them\n   * a moderator.\n   * @instance\n   * @memberof TeamMemberships\n   * @param {TeamMembershipObject} membership\n   * @returns {Promise<TeamMembershipObject>}\n   * @example\n   * webex.teams.create({name: 'Create Team Membership Example'})\n   *   .then(function(team) {\n   *     return webex.teamMemberships.create({\n   *      personEmail: 'alice@example.com',\n   *      teamId: team.id\n   *    });\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert(membership.id);\n   *     assert(membership.teamId);\n   *     assert(membership.personId);\n   *     assert(membership.personEmail);\n   *     assert('isModerator' in membership);\n   *     assert(membership.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create: function create(membership) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'team/memberships',\n      body: membership\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Get details for a membership by ID.\n   * @instance\n   * @memberof TeamMemberships\n   * @param {TeamMembershipObject|string} membership\n   * @returns {Promise<TeamMembershipObject>}\n   * @example\n   * var membership;\n   * webex.teams.create({name: 'Get Team Memberships Example'})\n   *   .then(function(team) {\n   *     return webex.teamMemberships.create({\n   *       personEmail: 'alice@example.com',\n   *       teamId: team.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return webex.teamMemberships.get(m.id);\n   *   })\n   *   .then(function(m) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(m, membership);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get: function get(membership) {\n    var id = membership.id || membership;\n    return this.request({\n      service: 'hydra',\n      resource: 'team/memberships/' + id\n    }).then(function (res) {\n      return res.body.items || res.body;\n    });\n  },\n\n  /**\n   * Lists all team memberships. By default, lists memberships for teams to\n   * which the authenticated user belongs.\n   * @instance\n   * @memberof TeamMemberships\n   * @param {Object} options\n   * @param {string} options.max\n   * @returns {[type]}\n   * @example\n   * var team;\n   * webex.teams.create({name: 'List Team Memberships Example'})\n   *   .then(function(t) {\n   *     team = t;\n   *     return webex.teamMemberships.create({\n   *      personEmail: 'alice@example.com',\n   *      teamId: team.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.teamMemberships.list({teamId: team.id});\n   *   })\n   *   .then(function(teamMemberships) {\n   *     var assert = require('assert');\n   *     assert.equal(teamMemberships.length, 2);\n   *     for (var i = 0; i < teamMemberships.length; i+= 1) {\n   *       assert.equal(teamMemberships.items[i].teamId, team.id);\n   *     }\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list: function list(options) {\n    var _this = this;\n\n    return this.request({\n      service: 'hydra',\n      resource: 'team/memberships',\n      qs: options\n    }).then(function (res) {\n      return new _webexCore.Page(res, _this.webex);\n    });\n  },\n\n  /**\n   * Deletes a membership by ID.\n   * @instance\n   * @memberof TeamMemberships\n   * @param {TeamMembershipObject|string} membership\n   * @returns {Promise}\n   * @example\n   * var membership, team;\n   * webex.teams.create({name: 'Remove Team Memberships Example'})\n   *   .then(function(t) {\n   *     team = t;\n   *     return webex.teamMemberships.create({\n   *      personEmail: 'alice@example.com',\n   *      teamId: team.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return webex.teamMemberships.list({teamId: team.id});\n   *   })\n   *   .then(function(teamMemberships) {\n   *     var assert = require('assert');\n   *     assert.equal(teamMemberships.length, 2);\n   *     return webex.teamMemberships.remove(membership);\n   *   })\n   *   .then(function() {\n   *     return webex.teamMemberships.list({teamId: team.id});\n   *   })\n   *   .then(function(teamMemberships) {\n   *     var assert = require('assert');\n   *     assert.equal(teamMemberships.length, 1);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove: function remove(membership) {\n    var id = membership.id || membership;\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: 'team/memberships/' + id\n    }).then(function (res) {\n      // Firefox has some issues with 204s and/or DELETE. This should move to\n      // http-core\n      if (res.statusCode === 204) {\n        return undefined;\n      }\n\n      return res.body;\n    });\n  },\n\n  /**\n   * Updates properties for a membership.\n   * @instance\n   * @memberof TeamMemberships\n   * @param {TeamMembershipObject} membership\n   * @returns {Promise<TeamMembershipObject>}\n   */\n  update: function update(membership) {\n    var id = membership.id || membership;\n    return this.request({\n      method: 'PUT',\n      service: 'hydra',\n      resource: 'team/memberships/' + id,\n      body: membership\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n  version: '1.80.172'\n});\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nexports.default = TeamMemberships;","map":{"version":3,"sources":["team-memberships.js"],"names":["TeamMemberships","create","method","service","resource","body","membership","res","get","id","list","qs","options","Page","remove","update"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin, Page} from '@webex/webex-core';\n\n/**\n * @typedef {Object} TeamMembershipObject\n * @property {string} id - (server generated) Unique identifier for the team membership\n * @property {string} teamId - The team ID\n * @property {string} personId - The person ID\n * @property {string} personEmail - The email address of the person\n * @property {boolean} isModerator - Set to `true` to make the person a team\n * moderator\n * @property {string} created - (server generated) The date and time that the team membership was created\n */\n\n/**\n * Team Memberships represent a person's relationship to a team. Use this API to\n * list members of any team that you're in or create memberships to invite\n * someone to a team. Team memberships can also be updated to make someome a\n * moderator or deleted to remove them from the team.\n *\n * Just like in the Webex app, you must be a member of the team in order to list\n * its memberships or invite people.\n * @class\n */\nconst TeamMemberships = WebexPlugin.extend({\n  /**\n   * Add someone to a team by Person ID or email address; optionally making them\n   * a moderator.\n   * @instance\n   * @memberof TeamMemberships\n   * @param {TeamMembershipObject} membership\n   * @returns {Promise<TeamMembershipObject>}\n   * @example\n   * webex.teams.create({name: 'Create Team Membership Example'})\n   *   .then(function(team) {\n   *     return webex.teamMemberships.create({\n   *      personEmail: 'alice@example.com',\n   *      teamId: team.id\n   *    });\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert(membership.id);\n   *     assert(membership.teamId);\n   *     assert(membership.personId);\n   *     assert(membership.personEmail);\n   *     assert('isModerator' in membership);\n   *     assert(membership.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(membership) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'team/memberships',\n      body: membership\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Get details for a membership by ID.\n   * @instance\n   * @memberof TeamMemberships\n   * @param {TeamMembershipObject|string} membership\n   * @returns {Promise<TeamMembershipObject>}\n   * @example\n   * var membership;\n   * webex.teams.create({name: 'Get Team Memberships Example'})\n   *   .then(function(team) {\n   *     return webex.teamMemberships.create({\n   *       personEmail: 'alice@example.com',\n   *       teamId: team.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return webex.teamMemberships.get(m.id);\n   *   })\n   *   .then(function(m) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(m, membership);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      service: 'hydra',\n      resource: `team/memberships/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Lists all team memberships. By default, lists memberships for teams to\n   * which the authenticated user belongs.\n   * @instance\n   * @memberof TeamMemberships\n   * @param {Object} options\n   * @param {string} options.max\n   * @returns {[type]}\n   * @example\n   * var team;\n   * webex.teams.create({name: 'List Team Memberships Example'})\n   *   .then(function(t) {\n   *     team = t;\n   *     return webex.teamMemberships.create({\n   *      personEmail: 'alice@example.com',\n   *      teamId: team.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.teamMemberships.list({teamId: team.id});\n   *   })\n   *   .then(function(teamMemberships) {\n   *     var assert = require('assert');\n   *     assert.equal(teamMemberships.length, 2);\n   *     for (var i = 0; i < teamMemberships.length; i+= 1) {\n   *       assert.equal(teamMemberships.items[i].teamId, team.id);\n   *     }\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'team/memberships',\n      qs: options\n    })\n      .then((res) => new Page(res, this.webex));\n  },\n\n  /**\n   * Deletes a membership by ID.\n   * @instance\n   * @memberof TeamMemberships\n   * @param {TeamMembershipObject|string} membership\n   * @returns {Promise}\n   * @example\n   * var membership, team;\n   * webex.teams.create({name: 'Remove Team Memberships Example'})\n   *   .then(function(t) {\n   *     team = t;\n   *     return webex.teamMemberships.create({\n   *      personEmail: 'alice@example.com',\n   *      teamId: team.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return webex.teamMemberships.list({teamId: team.id});\n   *   })\n   *   .then(function(teamMemberships) {\n   *     var assert = require('assert');\n   *     assert.equal(teamMemberships.length, 2);\n   *     return webex.teamMemberships.remove(membership);\n   *   })\n   *   .then(function() {\n   *     return webex.teamMemberships.list({teamId: team.id});\n   *   })\n   *   .then(function(teamMemberships) {\n   *     var assert = require('assert');\n   *     assert.equal(teamMemberships.length, 1);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: `team/memberships/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n\n        return res.body;\n      });\n  },\n\n  /**\n   * Updates properties for a membership.\n   * @instance\n   * @memberof TeamMemberships\n   * @param {TeamMembershipObject} membership\n   * @returns {Promise<TeamMembershipObject>}\n   */\n  update(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      method: 'PUT',\n      service: 'hydra',\n      resource: `team/memberships/${id}`,\n      body: membership\n    })\n      .then((res) => res.body);\n  }\n});\n\nexport default TeamMemberships;\n"]},"metadata":{},"sourceType":"script"}