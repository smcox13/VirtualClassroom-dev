{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\nimport { getCrypto, getOIDByAlgorithm } from \"./common.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC6960\r\n */\n\nexport default class CertID {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for CertID class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc hashAlgorithm\r\n     */\n    this.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", CertID.defaultValues(\"hashAlgorithm\"));\n    /**\r\n     * @type {OctetString}\r\n     * @desc issuerNameHash\r\n     */\n\n    this.issuerNameHash = getParametersValue(parameters, \"issuerNameHash\", CertID.defaultValues(\"issuerNameHash\"));\n    /**\r\n     * @type {OctetString}\r\n     * @desc issuerKeyHash\r\n     */\n\n    this.issuerKeyHash = getParametersValue(parameters, \"issuerKeyHash\", CertID.defaultValues(\"issuerKeyHash\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc serialNumber\r\n     */\n\n    this.serialNumber = getParametersValue(parameters, \"serialNumber\", CertID.defaultValues(\"serialNumber\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"hashAlgorithm\":\n        return new AlgorithmIdentifier();\n\n      case \"issuerNameHash\":\n      case \"issuerKeyHash\":\n        return new asn1js.OctetString();\n\n      case \"serialNumber\":\n        return new asn1js.Integer();\n\n      default:\n        throw new Error(`Invalid member name for CertID class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"hashAlgorithm\":\n        return memberValue.algorithmId === \"\" && \"algorithmParams\" in memberValue === false;\n\n      case \"issuerNameHash\":\n      case \"issuerKeyHash\":\n      case \"serialNumber\":\n        return memberValue.isEqual(CertID.defaultValues(memberName));\n\n      default:\n        throw new Error(`Invalid member name for CertID class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * CertID          ::=     SEQUENCE {\r\n   *    hashAlgorithm       AlgorithmIdentifier,\r\n   *    issuerNameHash      OCTET STRING, -- Hash of issuer's DN\r\n   *    issuerKeyHash       OCTET STRING, -- Hash of issuer's public key\r\n   *    serialNumber        CertificateSerialNumber }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [hashAlgorithm]\r\n     * @property {string} [hashAlgorithmObject]\r\n     * @property {string} [issuerNameHash]\r\n     * @property {string} [issuerKeyHash]\r\n     * @property {string} [serialNumber]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [AlgorithmIdentifier.schema(names.hashAlgorithmObject || {\n        names: {\n          blockName: names.hashAlgorithm || \"\"\n        }\n      }), new asn1js.OctetString({\n        name: names.issuerNameHash || \"\"\n      }), new asn1js.OctetString({\n        name: names.issuerKeyHash || \"\"\n      }), new asn1js.Integer({\n        name: names.serialNumber || \"\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"hashAlgorithm\", \"issuerNameHash\", \"issuerKeyHash\", \"serialNumber\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, CertID.schema({\n      names: {\n        hashAlgorithm: \"hashAlgorithm\",\n        issuerNameHash: \"issuerNameHash\",\n        issuerKeyHash: \"issuerKeyHash\",\n        serialNumber: \"serialNumber\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for CertID\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.hashAlgorithm = new AlgorithmIdentifier({\n      schema: asn1.result.hashAlgorithm\n    });\n    this.issuerNameHash = asn1.result.issuerNameHash;\n    this.issuerKeyHash = asn1.result.issuerKeyHash;\n    this.serialNumber = asn1.result.serialNumber; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [this.hashAlgorithm.toSchema(), this.issuerNameHash, this.issuerKeyHash, this.serialNumber]\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      hashAlgorithm: this.hashAlgorithm.toJSON(),\n      issuerNameHash: this.issuerNameHash.toJSON(),\n      issuerKeyHash: this.issuerKeyHash.toJSON(),\n      serialNumber: this.serialNumber.toJSON()\n    };\n  } //**********************************************************************************\n\n  /**\r\n   * Check that two \"CertIDs\" are equal\r\n   * @param {CertID} certificateID Identifier of the certificate to be checked\r\n   * @returns {boolean}\r\n   */\n\n\n  isEqual(certificateID) {\n    //region Check \"hashAlgorithm\"\n    if (!this.hashAlgorithm.algorithmId === certificateID.hashAlgorithm.algorithmId) return false; //endregion\n    //region Check \"issuerNameHash\"\n\n    if (isEqualBuffer(this.issuerNameHash.valueBlock.valueHex, certificateID.issuerNameHash.valueBlock.valueHex) === false) return false; //endregion\n    //region Check \"issuerKeyHash\"\n\n    if (isEqualBuffer(this.issuerKeyHash.valueBlock.valueHex, certificateID.issuerKeyHash.valueBlock.valueHex) === false) return false; //endregion\n    //region Check \"serialNumber\"\n\n    if (!this.serialNumber.isEqual(certificateID.serialNumber)) return false; //endregion\n\n    return true;\n  } //**********************************************************************************\n\n  /**\r\n   * Making OCSP certificate identifier for specific certificate\r\n   * @param {Certificate} certificate Certificate making OCSP Request for\r\n   * @param {Object} parameters Additional parameters\r\n   * @returns {Promise}\r\n   */\n\n\n  createForCertificate(certificate, parameters) {\n    //region Initial variables\n    let sequence = Promise.resolve();\n    let issuerCertificate; //endregion\n    //region Get a \"crypto\" extension\n\n    const crypto = getCrypto();\n    if (typeof crypto === \"undefined\") return Promise.reject(\"Unable to create WebCrypto object\"); //endregion\n    //region Check input parameters\n\n    if (\"hashAlgorithm\" in parameters === false) return Promise.reject(\"Parameter \\\"hashAlgorithm\\\" is mandatory for \\\"OCSP_REQUEST.createForCertificate\\\"\");\n    const hashOID = getOIDByAlgorithm({\n      name: parameters.hashAlgorithm\n    });\n    if (hashOID === \"\") return Promise.reject(`Incorrect \"hashAlgorithm\": ${this.hashAlgorithm}`);\n    this.hashAlgorithm = new AlgorithmIdentifier({\n      algorithmId: hashOID,\n      algorithmParams: new asn1js.Null()\n    });\n    if (\"issuerCertificate\" in parameters) issuerCertificate = parameters.issuerCertificate;else return Promise.reject(\"Parameter \\\"issuerCertificate\\\" is mandatory for \\\"OCSP_REQUEST.createForCertificate\\\"\"); //endregion\n    //region Initialize \"serialNumber\" field\n\n    this.serialNumber = certificate.serialNumber; //endregion\n    //region Create \"issuerNameHash\"\n\n    sequence = sequence.then(() => crypto.digest({\n      name: parameters.hashAlgorithm\n    }, issuerCertificate.subject.toSchema().toBER(false)), error => Promise.reject(error)); //endregion\n    //region Create \"issuerKeyHash\"\n\n    sequence = sequence.then(result => {\n      this.issuerNameHash = new asn1js.OctetString({\n        valueHex: result\n      });\n      const issuerKeyBuffer = issuerCertificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex;\n      return crypto.digest({\n        name: parameters.hashAlgorithm\n      }, issuerKeyBuffer);\n    }, error => Promise.reject(error)).then(result => {\n      this.issuerKeyHash = new asn1js.OctetString({\n        valueHex: result\n      });\n    }, error => Promise.reject(error)); //endregion\n\n    return sequence;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/CertID.js"],"names":["asn1js","getParametersValue","isEqualBuffer","clearProps","getCrypto","getOIDByAlgorithm","AlgorithmIdentifier","CertID","constructor","parameters","hashAlgorithm","defaultValues","issuerNameHash","issuerKeyHash","serialNumber","fromSchema","schema","memberName","OctetString","Integer","Error","compareWithDefault","memberValue","algorithmId","isEqual","names","Sequence","name","blockName","value","hashAlgorithmObject","asn1","compareSchema","verified","result","toSchema","toJSON","certificateID","valueBlock","valueHex","createForCertificate","certificate","sequence","Promise","resolve","issuerCertificate","crypto","reject","hashOID","algorithmParams","Null","then","digest","subject","toBER","error","issuerKeyBuffer","subjectPublicKeyInfo","subjectPublicKey"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { getCrypto, getOIDByAlgorithm } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class CertID \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertID class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc hashAlgorithm\r\n\t\t */\r\n\t\tthis.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", CertID.defaultValues(\"hashAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc issuerNameHash\r\n\t\t */\r\n\t\tthis.issuerNameHash = getParametersValue(parameters, \"issuerNameHash\", CertID.defaultValues(\"issuerNameHash\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc issuerKeyHash\r\n\t\t */\r\n\t\tthis.issuerKeyHash = getParametersValue(parameters, \"issuerKeyHash\", CertID.defaultValues(\"issuerKeyHash\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", CertID.defaultValues(\"serialNumber\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"issuerNameHash\":\r\n\t\t\tcase \"issuerKeyHash\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"issuerNameHash\":\r\n\t\t\tcase \"issuerKeyHash\":\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn (memberValue.isEqual(CertID.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CertID          ::=     SEQUENCE {\r\n\t *    hashAlgorithm       AlgorithmIdentifier,\r\n\t *    issuerNameHash      OCTET STRING, -- Hash of issuer's DN\r\n\t *    issuerKeyHash       OCTET STRING, -- Hash of issuer's public key\r\n\t *    serialNumber        CertificateSerialNumber }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [hashAlgorithm]\r\n\t\t * @property {string} [hashAlgorithmObject]\r\n\t\t * @property {string} [issuerNameHash]\r\n\t\t * @property {string} [issuerKeyHash]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.hashAlgorithmObject || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: (names.hashAlgorithm || \"\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.issuerNameHash || \"\") }),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.issuerKeyHash || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"hashAlgorithm\",\r\n\t\t\t\"issuerNameHash\",\r\n\t\t\t\"issuerKeyHash\",\r\n\t\t\t\"serialNumber\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertID.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\thashAlgorithm: \"hashAlgorithm\",\r\n\t\t\t\t\tissuerNameHash: \"issuerNameHash\",\r\n\t\t\t\t\tissuerKeyHash: \"issuerKeyHash\",\r\n\t\t\t\t\tserialNumber: \"serialNumber\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertID\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\r\n\t\tthis.issuerNameHash = asn1.result.issuerNameHash;\r\n\t\tthis.issuerKeyHash = asn1.result.issuerKeyHash;\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.hashAlgorithm.toSchema(),\r\n\t\t\t\tthis.issuerNameHash,\r\n\t\t\t\tthis.issuerKeyHash,\r\n\t\t\t\tthis.serialNumber\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\thashAlgorithm: this.hashAlgorithm.toJSON(),\r\n\t\t\tissuerNameHash: this.issuerNameHash.toJSON(),\r\n\t\t\tissuerKeyHash: this.issuerKeyHash.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Check that two \"CertIDs\" are equal\r\n\t * @param {CertID} certificateID Identifier of the certificate to be checked\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(certificateID)\r\n\t{\r\n\t\t//region Check \"hashAlgorithm\"\r\n\t\tif(!this.hashAlgorithm.algorithmId === certificateID.hashAlgorithm.algorithmId)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check \"issuerNameHash\"\r\n\t\tif(isEqualBuffer(this.issuerNameHash.valueBlock.valueHex, certificateID.issuerNameHash.valueBlock.valueHex) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check \"issuerKeyHash\"\r\n\t\tif(isEqualBuffer(this.issuerKeyHash.valueBlock.valueHex, certificateID.issuerKeyHash.valueBlock.valueHex) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check \"serialNumber\"\r\n\t\tif(!this.serialNumber.isEqual(certificateID.serialNumber))\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Making OCSP certificate identifier for specific certificate\r\n\t * @param {Certificate} certificate Certificate making OCSP Request for\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tcreateForCertificate(certificate, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet issuerCertificate;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check input parameters\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Parameter \\\"hashAlgorithm\\\" is mandatory for \\\"OCSP_REQUEST.createForCertificate\\\"\");\r\n\t\t\r\n\t\tconst hashOID = getOIDByAlgorithm({ name: parameters.hashAlgorithm });\r\n\t\tif(hashOID === \"\")\r\n\t\t\treturn Promise.reject(`Incorrect \"hashAlgorithm\": ${this.hashAlgorithm}`);\r\n\t\t\r\n\t\tthis.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\talgorithmId: hashOID,\r\n\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t});\r\n\t\t\r\n\t\tif(\"issuerCertificate\" in parameters)\r\n\t\t\tissuerCertificate = parameters.issuerCertificate;\r\n\t\telse\r\n\t\t\treturn Promise.reject(\"Parameter \\\"issuerCertificate\\\" is mandatory for \\\"OCSP_REQUEST.createForCertificate\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initialize \"serialNumber\" field\r\n\t\tthis.serialNumber = certificate.serialNumber;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create \"issuerNameHash\"\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.digest({ name: parameters.hashAlgorithm }, issuerCertificate.subject.toSchema().toBER(false)),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create \"issuerKeyHash\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.issuerNameHash = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\r\n\t\t\tconst issuerKeyBuffer = issuerCertificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex;\r\n\t\t\t\r\n\t\t\treturn crypto.digest({ name: parameters.hashAlgorithm }, issuerKeyBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t).then(result =>\r\n\t\t{\r\n\t\t\tthis.issuerKeyHash = new asn1js.OctetString({ valueHex: result });\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}