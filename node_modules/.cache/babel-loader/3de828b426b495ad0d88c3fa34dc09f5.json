{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nexport default class EncryptedContentInfo {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for EncryptedContentInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc contentType\r\n     */\n    this.contentType = getParametersValue(parameters, \"contentType\", EncryptedContentInfo.defaultValues(\"contentType\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc contentEncryptionAlgorithm\r\n     */\n\n    this.contentEncryptionAlgorithm = getParametersValue(parameters, \"contentEncryptionAlgorithm\", EncryptedContentInfo.defaultValues(\"contentEncryptionAlgorithm\"));\n\n    if (\"encryptedContent\" in parameters) {\n      /**\r\n       * @type {OctetString}\r\n       * @desc encryptedContent (!!!) could be contructive or primitive value (!!!)\r\n       */\n      this.encryptedContent = parameters.encryptedContent;\n\n      if (this.encryptedContent.idBlock.tagClass === 1 && this.encryptedContent.idBlock.tagNumber === 4) {\n        //region Divide OCTETSTRING value down to small pieces\n        if (this.encryptedContent.idBlock.isConstructed === false) {\n          const constrString = new asn1js.OctetString({\n            idBlock: {\n              isConstructed: true\n            },\n            isConstructed: true\n          });\n          let offset = 0;\n          let length = this.encryptedContent.valueBlock.valueHex.byteLength;\n\n          while (length > 0) {\n            const pieceView = new Uint8Array(this.encryptedContent.valueBlock.valueHex, offset, offset + 1024 > this.encryptedContent.valueBlock.valueHex.byteLength ? this.encryptedContent.valueBlock.valueHex.byteLength - offset : 1024);\n\n            const _array = new ArrayBuffer(pieceView.length);\n\n            const _view = new Uint8Array(_array);\n\n            for (let i = 0; i < _view.length; i++) _view[i] = pieceView[i];\n\n            constrString.valueBlock.value.push(new asn1js.OctetString({\n              valueHex: _array\n            }));\n            length -= pieceView.length;\n            offset += pieceView.length;\n          }\n\n          this.encryptedContent = constrString;\n        } //endregion\n\n      }\n    } //endregion\n    //region If input argument array contains \"schema\" for this object\n\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"contentType\":\n        return \"\";\n\n      case \"contentEncryptionAlgorithm\":\n        return new AlgorithmIdentifier();\n\n      case \"encryptedContent\":\n        return new asn1js.OctetString();\n\n      default:\n        throw new Error(`Invalid member name for EncryptedContentInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"contentType\":\n        return memberValue === \"\";\n\n      case \"contentEncryptionAlgorithm\":\n        return memberValue.algorithmId === \"\" && \"algorithmParams\" in memberValue === false;\n\n      case \"encryptedContent\":\n        return memberValue.isEqual(EncryptedContentInfo.defaultValues(memberName));\n\n      default:\n        throw new Error(`Invalid member name for EncryptedContentInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * EncryptedContentInfo ::= SEQUENCE {\r\n   *    contentType ContentType,\r\n   *    contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,\r\n   *    encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL }\r\n   *\r\n   * Comment: Strange, but modern crypto engines create \"encryptedContent\" as \"[0] EXPLICIT EncryptedContent\"\r\n   *\r\n   * EncryptedContent ::= OCTET STRING\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [contentType]\r\n     * @property {string} [contentEncryptionAlgorithm]\r\n     * @property {string} [encryptedContent]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.ObjectIdentifier({\n        name: names.contentType || \"\"\n      }), AlgorithmIdentifier.schema(names.contentEncryptionAlgorithm || {}), // The CHOICE we need because \"EncryptedContent\" could have either \"constructive\"\n      // or \"primitive\" form of encoding and we need to handle both variants\n      new asn1js.Choice({\n        value: [new asn1js.Constructed({\n          name: names.encryptedContent || \"\",\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.Repeated({\n            value: new asn1js.OctetString()\n          })]\n        }), new asn1js.Primitive({\n          name: names.encryptedContent || \"\",\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          }\n        })]\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"contentType\", \"contentEncryptionAlgorithm\", \"encryptedContent\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, EncryptedContentInfo.schema({\n      names: {\n        contentType: \"contentType\",\n        contentEncryptionAlgorithm: {\n          names: {\n            blockName: \"contentEncryptionAlgorithm\"\n          }\n        },\n        encryptedContent: \"encryptedContent\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for EncryptedContentInfo\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.contentType = asn1.result.contentType.valueBlock.toString();\n    this.contentEncryptionAlgorithm = new AlgorithmIdentifier({\n      schema: asn1.result.contentEncryptionAlgorithm\n    });\n\n    if (\"encryptedContent\" in asn1.result) {\n      this.encryptedContent = asn1.result.encryptedContent;\n      this.encryptedContent.idBlock.tagClass = 1; // UNIVERSAL\n\n      this.encryptedContent.idBlock.tagNumber = 4; // OCTETSTRING (!!!) The value still has instance of \"in_window.org.pkijs.asn1.ASN1_CONSTRUCTED / ASN1_PRIMITIVE\"\n    } //endregion\n\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const sequenceLengthBlock = {\n      isIndefiniteForm: false\n    };\n    const outputArray = [];\n    outputArray.push(new asn1js.ObjectIdentifier({\n      value: this.contentType\n    }));\n    outputArray.push(this.contentEncryptionAlgorithm.toSchema());\n\n    if (\"encryptedContent\" in this) {\n      sequenceLengthBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\n      const encryptedValue = this.encryptedContent;\n      encryptedValue.idBlock.tagClass = 3; // CONTEXT-SPECIFIC\n\n      encryptedValue.idBlock.tagNumber = 0; // [0]\n\n      encryptedValue.lenBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\n      outputArray.push(encryptedValue);\n    } //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      lenBlock: sequenceLengthBlock,\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const _object = {\n      contentType: this.contentType,\n      contentEncryptionAlgorithm: this.contentEncryptionAlgorithm.toJSON()\n    };\n    if (\"encryptedContent\" in this) _object.encryptedContent = this.encryptedContent.toJSON();\n    return _object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/EncryptedContentInfo.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","EncryptedContentInfo","constructor","parameters","contentType","defaultValues","contentEncryptionAlgorithm","encryptedContent","idBlock","tagClass","tagNumber","isConstructed","constrString","OctetString","offset","length","valueBlock","valueHex","byteLength","pieceView","Uint8Array","_array","ArrayBuffer","_view","i","value","push","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","algorithmId","isEqual","names","Sequence","name","blockName","ObjectIdentifier","Choice","Constructed","Repeated","Primitive","asn1","compareSchema","verified","result","toString","toSchema","sequenceLengthBlock","isIndefiniteForm","outputArray","encryptedValue","lenBlock","toJSON","_object"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,SAASC,kBAAT,EAA6BC,UAA7B,QAA+C,SAA/C;AACA,OAAOC,mBAAP,MAAgC,0BAAhC,C,CACA;;AACA;;;;AAGA,eAAe,MAAMC,oBAAN,CACf;AACC;;AACA;;;;;AAKAC,EAAAA,WAAW,CAACC,UAAU,GAAG,EAAd,EACX;AACC;;AACA;;;;AAIA,SAAKC,WAAL,GAAmBN,kBAAkB,CAACK,UAAD,EAAa,aAAb,EAA4BF,oBAAoB,CAACI,aAArB,CAAmC,aAAnC,CAA5B,CAArC;AACA;;;;;AAIA,SAAKC,0BAAL,GAAkCR,kBAAkB,CAACK,UAAD,EAAa,4BAAb,EAA2CF,oBAAoB,CAACI,aAArB,CAAmC,4BAAnC,CAA3C,CAApD;;AAEA,QAAG,sBAAsBF,UAAzB,EACA;AACC;;;;AAIA,WAAKI,gBAAL,GAAwBJ,UAAU,CAACI,gBAAnC;;AAEA,UAAI,KAAKA,gBAAL,CAAsBC,OAAtB,CAA8BC,QAA9B,KAA2C,CAA5C,IACD,KAAKF,gBAAL,CAAsBC,OAAtB,CAA8BE,SAA9B,KAA4C,CAD9C,EAEA;AACC;AACA,YAAG,KAAKH,gBAAL,CAAsBC,OAAtB,CAA8BG,aAA9B,KAAgD,KAAnD,EACA;AACC,gBAAMC,YAAY,GAAG,IAAIf,MAAM,CAACgB,WAAX,CAAuB;AAC3CL,YAAAA,OAAO,EAAE;AAAEG,cAAAA,aAAa,EAAE;AAAjB,aADkC;AAE3CA,YAAAA,aAAa,EAAE;AAF4B,WAAvB,CAArB;AAKA,cAAIG,MAAM,GAAG,CAAb;AACA,cAAIC,MAAM,GAAG,KAAKR,gBAAL,CAAsBS,UAAtB,CAAiCC,QAAjC,CAA0CC,UAAvD;;AAEA,iBAAMH,MAAM,GAAG,CAAf,EACA;AACC,kBAAMI,SAAS,GAAG,IAAIC,UAAJ,CAAe,KAAKb,gBAAL,CAAsBS,UAAtB,CAAiCC,QAAhD,EAA0DH,MAA1D,EAAoEA,MAAM,GAAG,IAAV,GAAkB,KAAKP,gBAAL,CAAsBS,UAAtB,CAAiCC,QAAjC,CAA0CC,UAA7D,GAA4E,KAAKX,gBAAL,CAAsBS,UAAtB,CAAiCC,QAAjC,CAA0CC,UAA1C,GAAuDJ,MAAnI,GAA6I,IAA/M,CAAlB;;AACA,kBAAMO,MAAM,GAAG,IAAIC,WAAJ,CAAgBH,SAAS,CAACJ,MAA1B,CAAf;;AACA,kBAAMQ,KAAK,GAAG,IAAIH,UAAJ,CAAeC,MAAf,CAAd;;AAEA,iBAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,KAAK,CAACR,MAAzB,EAAiCS,CAAC,EAAlC,EACCD,KAAK,CAACC,CAAD,CAAL,GAAWL,SAAS,CAACK,CAAD,CAApB;;AAEDZ,YAAAA,YAAY,CAACI,UAAb,CAAwBS,KAAxB,CAA8BC,IAA9B,CAAmC,IAAI7B,MAAM,CAACgB,WAAX,CAAuB;AAAEI,cAAAA,QAAQ,EAAEI;AAAZ,aAAvB,CAAnC;AAEAN,YAAAA,MAAM,IAAII,SAAS,CAACJ,MAApB;AACAD,YAAAA,MAAM,IAAIK,SAAS,CAACJ,MAApB;AACA;;AAED,eAAKR,gBAAL,GAAwBK,YAAxB;AACA,SA5BF,CA6BC;;AACA;AACD,KAtDF,CAuDC;AAEA;;;AACA,QAAG,YAAYT,UAAf,EACC,KAAKwB,UAAL,CAAgBxB,UAAU,CAACyB,MAA3B,EA3DF,CA4DC;AACA,GArEF,CAsEC;;AACA;;;;;;AAIA,SAAOvB,aAAP,CAAqBwB,UAArB,EACA;AACC,YAAOA,UAAP;AAEC,WAAK,aAAL;AACC,eAAO,EAAP;;AACD,WAAK,4BAAL;AACC,eAAO,IAAI7B,mBAAJ,EAAP;;AACD,WAAK,kBAAL;AACC,eAAO,IAAIH,MAAM,CAACgB,WAAX,EAAP;;AACD;AACC,cAAM,IAAIiB,KAAJ,CAAW,uDAAsDD,UAAW,EAA5E,CAAN;AATF;AAWA,GAxFF,CAyFC;;AACA;;;;;;;AAKA,SAAOE,kBAAP,CAA0BF,UAA1B,EAAsCG,WAAtC,EACA;AACC,YAAOH,UAAP;AAEC,WAAK,aAAL;AACC,eAAQG,WAAW,KAAK,EAAxB;;AACD,WAAK,4BAAL;AACC,eAASA,WAAW,CAACC,WAAZ,KAA4B,EAA7B,IAAsC,qBAAqBD,WAAtB,KAAuC,KAApF;;AACD,WAAK,kBAAL;AACC,eAAQA,WAAW,CAACE,OAAZ,CAAoBjC,oBAAoB,CAACI,aAArB,CAAmCwB,UAAnC,CAApB,CAAR;;AACD;AACC,cAAM,IAAIC,KAAJ,CAAW,uDAAsDD,UAAW,EAA5E,CAAN;AATF;AAWA,GA5GF,CA6GC;;AACA;;;;;;;;;;;;;;;;;;;;AAkBA,SAAOD,MAAP,CAAczB,UAAU,GAAG,EAA3B,EACA;AACC;;;;;;;AAOA,UAAMgC,KAAK,GAAGrC,kBAAkB,CAACK,UAAD,EAAa,OAAb,EAAsB,EAAtB,CAAhC;AAEA,WAAQ,IAAIN,MAAM,CAACuC,QAAX,CAAoB;AAC3BC,MAAAA,IAAI,EAAGF,KAAK,CAACG,SAAN,IAAmB,EADC;AAE3Bb,MAAAA,KAAK,EAAE,CACN,IAAI5B,MAAM,CAAC0C,gBAAX,CAA4B;AAAEF,QAAAA,IAAI,EAAGF,KAAK,CAAC/B,WAAN,IAAqB;AAA9B,OAA5B,CADM,EAENJ,mBAAmB,CAAC4B,MAApB,CAA2BO,KAAK,CAAC7B,0BAAN,IAAoC,EAA/D,CAFM,EAGN;AACA;AACA,UAAIT,MAAM,CAAC2C,MAAX,CAAkB;AACjBf,QAAAA,KAAK,EAAE,CACN,IAAI5B,MAAM,CAAC4C,WAAX,CAAuB;AACtBJ,UAAAA,IAAI,EAAGF,KAAK,CAAC5B,gBAAN,IAA0B,EADX;AAEtBC,UAAAA,OAAO,EAAE;AACRC,YAAAA,QAAQ,EAAE,CADF;AACK;AACbC,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,WAFa;AAMtBe,UAAAA,KAAK,EAAE,CACN,IAAI5B,MAAM,CAAC6C,QAAX,CAAoB;AACnBjB,YAAAA,KAAK,EAAE,IAAI5B,MAAM,CAACgB,WAAX;AADY,WAApB,CADM;AANe,SAAvB,CADM,EAaN,IAAIhB,MAAM,CAAC8C,SAAX,CAAqB;AACpBN,UAAAA,IAAI,EAAGF,KAAK,CAAC5B,gBAAN,IAA0B,EADb;AAEpBC,UAAAA,OAAO,EAAE;AACRC,YAAAA,QAAQ,EAAE,CADF;AACK;AACbC,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL;AAFW,SAArB,CAbM;AADU,OAAlB,CALM;AAFoB,KAApB,CAAR;AAgCA,GA3KF,CA4KC;;AACA;;;;;;AAIAiB,EAAAA,UAAU,CAACC,MAAD,EACV;AACC;AACA7B,IAAAA,UAAU,CAAC6B,MAAD,EAAS,CAClB,aADkB,EAElB,4BAFkB,EAGlB,kBAHkB,CAAT,CAAV,CAFD,CAOC;AAEA;;AACA,UAAMgB,IAAI,GAAG/C,MAAM,CAACgD,aAAP,CAAqBjB,MAArB,EACZA,MADY,EAEZ3B,oBAAoB,CAAC2B,MAArB,CAA4B;AAC3BO,MAAAA,KAAK,EAAE;AACN/B,QAAAA,WAAW,EAAE,aADP;AAENE,QAAAA,0BAA0B,EAAE;AAC3B6B,UAAAA,KAAK,EAAE;AACNG,YAAAA,SAAS,EAAE;AADL;AADoB,SAFtB;AAON/B,QAAAA,gBAAgB,EAAE;AAPZ;AADoB,KAA5B,CAFY,CAAb;AAeA,QAAGqC,IAAI,CAACE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIhB,KAAJ,CAAU,8EAAV,CAAN,CA1BF,CA2BC;AAEA;;AACA,SAAK1B,WAAL,GAAmBwC,IAAI,CAACG,MAAL,CAAY3C,WAAZ,CAAwBY,UAAxB,CAAmCgC,QAAnC,EAAnB;AACA,SAAK1C,0BAAL,GAAkC,IAAIN,mBAAJ,CAAwB;AAAE4B,MAAAA,MAAM,EAAEgB,IAAI,CAACG,MAAL,CAAYzC;AAAtB,KAAxB,CAAlC;;AAEA,QAAG,sBAAsBsC,IAAI,CAACG,MAA9B,EACA;AACC,WAAKxC,gBAAL,GAAwBqC,IAAI,CAACG,MAAL,CAAYxC,gBAApC;AAEA,WAAKA,gBAAL,CAAsBC,OAAtB,CAA8BC,QAA9B,GAAyC,CAAzC,CAHD,CAG6C;;AAC5C,WAAKF,gBAAL,CAAsBC,OAAtB,CAA8BE,SAA9B,GAA0C,CAA1C,CAJD,CAI8C;AAC7C,KAvCF,CAwCC;;AACA,GA3NF,CA4NC;;AACA;;;;;;AAIAuC,EAAAA,QAAQ,GACR;AACC;AACA,UAAMC,mBAAmB,GAAG;AAC3BC,MAAAA,gBAAgB,EAAE;AADS,KAA5B;AAIA,UAAMC,WAAW,GAAG,EAApB;AAEAA,IAAAA,WAAW,CAAC1B,IAAZ,CAAiB,IAAI7B,MAAM,CAAC0C,gBAAX,CAA4B;AAAEd,MAAAA,KAAK,EAAE,KAAKrB;AAAd,KAA5B,CAAjB;AACAgD,IAAAA,WAAW,CAAC1B,IAAZ,CAAiB,KAAKpB,0BAAL,CAAgC2C,QAAhC,EAAjB;;AAEA,QAAG,sBAAsB,IAAzB,EACA;AACCC,MAAAA,mBAAmB,CAACC,gBAApB,GAAuC,KAAK5C,gBAAL,CAAsBC,OAAtB,CAA8BG,aAArE;AAEA,YAAM0C,cAAc,GAAG,KAAK9C,gBAA5B;AAEA8C,MAAAA,cAAc,CAAC7C,OAAf,CAAuBC,QAAvB,GAAkC,CAAlC,CALD,CAKsC;;AACrC4C,MAAAA,cAAc,CAAC7C,OAAf,CAAuBE,SAAvB,GAAmC,CAAnC,CAND,CAMuC;;AAEtC2C,MAAAA,cAAc,CAACC,QAAf,CAAwBH,gBAAxB,GAA2C,KAAK5C,gBAAL,CAAsBC,OAAtB,CAA8BG,aAAzE;AAEAyC,MAAAA,WAAW,CAAC1B,IAAZ,CAAiB2B,cAAjB;AACA,KAvBF,CAwBC;AAEA;;;AACA,WAAQ,IAAIxD,MAAM,CAACuC,QAAX,CAAoB;AAC3BkB,MAAAA,QAAQ,EAAEJ,mBADiB;AAE3BzB,MAAAA,KAAK,EAAE2B;AAFoB,KAApB,CAAR,CA3BD,CA+BC;AACA,GAlQF,CAmQC;;AACA;;;;;;AAIAG,EAAAA,MAAM,GACN;AACC,UAAMC,OAAO,GAAG;AACfpD,MAAAA,WAAW,EAAE,KAAKA,WADH;AAEfE,MAAAA,0BAA0B,EAAE,KAAKA,0BAAL,CAAgCiD,MAAhC;AAFb,KAAhB;AAKA,QAAG,sBAAsB,IAAzB,EACCC,OAAO,CAACjD,gBAAR,GAA2B,KAAKA,gBAAL,CAAsBgD,MAAtB,EAA3B;AAED,WAAOC,OAAP;AACA,GAnRF,CAoRC;;;AApRD,C,CAsRA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EncryptedContentInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EncryptedContentInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc contentType\r\n\t\t */\r\n\t\tthis.contentType = getParametersValue(parameters, \"contentType\", EncryptedContentInfo.defaultValues(\"contentType\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc contentEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.contentEncryptionAlgorithm = getParametersValue(parameters, \"contentEncryptionAlgorithm\", EncryptedContentInfo.defaultValues(\"contentEncryptionAlgorithm\"));\r\n\r\n\t\tif(\"encryptedContent\" in parameters)\r\n\t\t{\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @desc encryptedContent (!!!) could be contructive or primitive value (!!!)\r\n\t\t\t */\r\n\t\t\tthis.encryptedContent = parameters.encryptedContent;\r\n\t\t\t\r\n\t\t\tif((this.encryptedContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t(this.encryptedContent.idBlock.tagNumber === 4))\r\n\t\t\t{\r\n\t\t\t\t//region Divide OCTETSTRING value down to small pieces\r\n\t\t\t\tif(this.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst constrString = new asn1js.OctetString({\r\n\t\t\t\t\t\tidBlock: { isConstructed: true },\r\n\t\t\t\t\t\tisConstructed: true\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet offset = 0;\r\n\t\t\t\t\tlet length = this.encryptedContent.valueBlock.valueHex.byteLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\twhile(length > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst pieceView = new Uint8Array(this.encryptedContent.valueBlock.valueHex, offset, ((offset + 1024) > this.encryptedContent.valueBlock.valueHex.byteLength) ? (this.encryptedContent.valueBlock.valueHex.byteLength - offset) : 1024);\r\n\t\t\t\t\t\tconst _array = new ArrayBuffer(pieceView.length);\r\n\t\t\t\t\t\tconst _view = new Uint8Array(_array);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor(let i = 0; i < _view.length; i++)\r\n\t\t\t\t\t\t\t_view[i] = pieceView[i];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconstrString.valueBlock.value.push(new asn1js.OctetString({ valueHex: _array }));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlength -= pieceView.length;\r\n\t\t\t\t\t\toffset += pieceView.length;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.encryptedContent = constrString;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"contentEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedContent\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"contentEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedContent\":\r\n\t\t\t\treturn (memberValue.isEqual(EncryptedContentInfo.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * EncryptedContentInfo ::= SEQUENCE {\r\n\t *    contentType ContentType,\r\n\t *    contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,\r\n\t *    encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL }\r\n\t *\r\n\t * Comment: Strange, but modern crypto engines create \"encryptedContent\" as \"[0] EXPLICIT EncryptedContent\"\r\n\t *\r\n\t * EncryptedContent ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [contentType]\r\n\t\t * @property {string} [contentEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedContent]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.contentType || \"\") }),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.contentEncryptionAlgorithm || {}),\r\n\t\t\t\t// The CHOICE we need because \"EncryptedContent\" could have either \"constructive\"\r\n\t\t\t\t// or \"primitive\" form of encoding and we need to handle both variants\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.encryptedContent || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\t\t\tvalue: new asn1js.OctetString()\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\tname: (names.encryptedContent || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"contentType\",\r\n\t\t\t\"contentEncryptionAlgorithm\",\r\n\t\t\t\"encryptedContent\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEncryptedContentInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcontentType: \"contentType\",\r\n\t\t\t\t\tcontentEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"contentEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedContent: \"encryptedContent\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EncryptedContentInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.contentType = asn1.result.contentType.valueBlock.toString();\r\n\t\tthis.contentEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.contentEncryptionAlgorithm });\r\n\r\n\t\tif(\"encryptedContent\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.encryptedContent = asn1.result.encryptedContent;\r\n\r\n\t\t\tthis.encryptedContent.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\tthis.encryptedContent.idBlock.tagNumber = 4; // OCTETSTRING (!!!) The value still has instance of \"in_window.org.pkijs.asn1.ASN1_CONSTRUCTED / ASN1_PRIMITIVE\"\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst sequenceLengthBlock = {\r\n\t\t\tisIndefiniteForm: false\r\n\t\t};\r\n\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.contentType }));\r\n\t\toutputArray.push(this.contentEncryptionAlgorithm.toSchema());\r\n\r\n\t\tif(\"encryptedContent\" in this)\r\n\t\t{\r\n\t\t\tsequenceLengthBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\r\n\r\n\t\t\tconst encryptedValue = this.encryptedContent;\r\n\r\n\t\t\tencryptedValue.idBlock.tagClass = 3; // CONTEXT-SPECIFIC\r\n\t\t\tencryptedValue.idBlock.tagNumber = 0; // [0]\r\n\r\n\t\t\tencryptedValue.lenBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\r\n\r\n\t\t\toutputArray.push(encryptedValue);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tlenBlock: sequenceLengthBlock,\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tcontentType: this.contentType,\r\n\t\t\tcontentEncryptionAlgorithm: this.contentEncryptionAlgorithm.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"encryptedContent\" in this)\r\n\t\t\t_object.encryptedContent = this.encryptedContent.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}