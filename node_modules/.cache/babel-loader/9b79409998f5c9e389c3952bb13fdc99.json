{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nvar _apply = require('babel-runtime/core-js/reflect/apply');\n\nvar _apply2 = _interopRequireDefault(_apply);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _desc, _value, _obj; // Internal Dependencies\n// Local Dependencies\n\n\nvar _common = require('@webex/common');\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _commonTimers = require('@webex/common-timers');\n\nvar _constants = require('./constants');\n\nvar _featuresModel = require('./features/features-model');\n\nvar _featuresModel2 = _interopRequireDefault(_featuresModel);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n/**\n * Determine if the plugin should be initialized based on cached storage.\n *\n * @returns {boolean} - If the device is ephemeral.\n */\n\n\nfunction decider() {\n  return !this.config.ephemeral;\n}\n\nvar Device = _webexCore.WebexPlugin.extend((_dec = (0, _webexCore.waitForValue)('@'), _dec2 = (0, _webexCore.waitForValue)('@'), _dec3 = (0, _webexCore.waitForValue)('@'), _dec4 = (0, _common.deprecated)('device#markUrlFailedAndGetNew(): Use services#markFailedUrl()'), _dec5 = (0, _webexCore.persist)('@', decider), (_obj = {\n  // Ampersand property members.\n  namespace: 'Device',\n  // Allow for extra properties to prevent the plugin from failing due to\n  // **WDM** service DTO changes.\n  extraProperties: 'allow',\n  idAttribute: 'url',\n  children: {\n    /**\n     * The class object that contains all of the feature collections.\n     *\n     * @type {FeaturesModel}\n     */\n    features: _featuresModel2.default\n  },\n\n  /**\n   * A collection of device properties mostly assigned by the retrieved DTO from\n   * the **WDM** service that are mapped against the ampersand properties.\n   *\n   * @type {Object}\n   */\n  props: {\n    /**\n     * This property determines whether or not giphy support is enabled.\n     *\n     * @type {'ALLOW' | 'BLOCK'}\n     */\n    clientMessagingGiphy: 'string',\n\n    /**\n     * This property should store the company name.\n     *\n     * @type {string}\n     */\n    customerCompanyName: 'string',\n\n    /**\n     * This property should store the logo url.\n     *\n     * @type {string}\n     */\n    customerLogoUrl: 'string',\n\n    /**\n     * This property doesn't have any real values, but is sent during device\n     * refresh to prevent the **wdm** service from falling back to an iOS device\n     * type.\n     *\n     * @type {string}\n     */\n    deviceType: 'string',\n\n    /**\n     * This property should store the help url.\n     *\n     * @type {string}\n     */\n    helpUrl: 'string',\n\n    /**\n     * This property should store the intranet inactivity timer duration.\n     *\n     * @type {number}\n     */\n    intranetInactivityDuration: 'number',\n\n    /**\n     * This property stores the url required to validate if the device is able\n     * to actively reach the intranet network.\n     *\n     * @type {string}\n     */\n    intranetInactivityCheckUrl: 'string',\n\n    /**\n     * This property stores the inactivity timer duration, and could possibly\n     * deprecate the `intranetInactivityDuration` property.\n     *\n     * @type {number}\n     */\n    inNetworkInactivityDuration: 'number',\n\n    /**\n     * This property stores the ECM (external content management) enabled value\n     * for the whole organization.\n     *\n     * @type {boolean}\n     */\n    ecmEnabledForAllUsers: ['boolean', false, false],\n\n    /**\n     * This property stores an array of ECM (external content management)\n     * providers that are currently available.\n     *\n     * @returns {Array<string>}\n     */\n    ecmSupportedStorageProviders: ['array', false, function () {\n      return [];\n    }],\n\n    /**\n     * This property stores the modification time value retrieved from the\n     * **WDM** endpoint formatted as ISO 8601.\n     *\n     * @type {string}\n     */\n    modificationTime: 'string',\n\n    /**\n     * This property stores the navigation bar color.\n     *\n     * @type {string}\n     */\n    navigationBarColor: 'string',\n\n    /**\n     * This property stores the partner company's name when available.\n     *\n     * @type {string}\n     */\n    partnerCompanyName: 'string',\n\n    /**\n     * This property stores the partner company's logo when available.\n     *\n     * @type {string}\n     */\n    partnerLogoUrl: 'string',\n\n    /**\n     * This property stores the availability of people data from the **WDM**\n     * service.\n     *\n     * @type {boolean}\n     */\n    peopleInsightsEnabled: 'boolean',\n\n    /**\n     * This property stores the reporting site's description when available.\n     *\n     * @type {string}\n     */\n    reportingSiteDesc: 'string',\n\n    /**\n     * This property stores the reporting site's access url when available.\n     *\n     * @type {string}\n     */\n    reportingSiteUrl: 'string',\n\n    /**\n     * This property stores the encryption key url when available.\n     *\n     * @type {string}\n     */\n    searchEncryptionKeyUrl: 'string',\n\n    /**\n     * This property stores the availability of support-provided text from the\n     * **WDM** service.\n     *\n     * @type {boolean}\n     */\n    showSupportText: 'boolean',\n\n    /**\n     * This property stores the support provider's company name when available.\n     *\n     * @type {string}\n     */\n    supportProviderCompanyName: 'string',\n\n    /**\n     * This property stores the support provider's logo url when available.\n     *\n     * @type {string}\n     */\n    supportProviderLogoUrl: 'string',\n\n    /**\n     * This property stores the device's url retrieved from a registration\n     * request. This property gets set via the initial registration process by a\n     * `this.set()` method.\n     *\n     * @type {string}\n     */\n    url: 'string',\n\n    /**\n     * This property stores the device's userId uuid value, which can also be\n     * derived from the device's registerd user's userId retrieved from\n     * the **Hydra** service.\n     *\n     * @type {string}\n     */\n    userId: 'string',\n\n    /**\n     * This property stores whether or not file sharing is enabled\n     *\n     * @type {'BLOCK_BOTH' | 'BLOCK_UPLOAD'}\n     */\n    webFileShareControl: 'string',\n\n    /**\n     * This property stores the current web socket url used by the registered\n     * device.\n     *\n     * @type {string}\n     */\n    webSocketUrl: 'string',\n\n    /**\n     * This property stores the value indicating whether or not white board file\n     * sharing is enabled for the current device.\n     *\n     * @type {'ALLOW' | 'BLOCK'}\n     */\n    whiteboardFileShareControl: 'string'\n  },\n\n  /**\n   * A list of derived properties that populate based when their parent data\n   * available via the device's properties.\n   *\n   * @type {Object}\n   */\n  derived: {\n    /**\n     * This property determines if the current device is registered.\n     *\n     * @type {boolean}\n     */\n    registered: {\n      deps: ['url'],\n\n      /**\n       * Checks if the device is registered by validating that the url exists.\n       * Amperstand does not allow this to method to be written as an arrow\n       * function.\n       *\n       * @returns {boolean}\n       */\n      fn: function fn() {\n        return !!this.url;\n      }\n    }\n  },\n\n  /**\n   * Stores timer data as well as other state details.\n   *\n   * @type {Object}\n   */\n  session: {\n    /**\n     * This property stores the logout timer object\n     *\n     * @type {any}\n     */\n    logoutTimer: 'any',\n\n    /**\n     * This property stores the date for the last activity the user made\n     * with the current device.\n     *\n     * @type {number}\n     */\n    lastUserActivityDate: 'number',\n\n    /**\n     * This property stores whether or not the reachability check has been\n     * performed to prevent the reachability check from performing its\n     * operation more than once after a successful check.\n     *\n     * @returns {boolean}\n     */\n    isReachabilityChecked: ['boolean', false, false],\n\n    /**\n     * This property stores whether or not the current device is in a meeting\n     * to prevent an unneeded timeout of a meeting due to inactivity.\n     *\n     * @type {boolean}\n     */\n    isInMeeting: 'boolean',\n\n    /**\n     * This property identifies if the device is currently in network to prevent\n     * the `resetLogoutTimer()` method from being called repeatedly once its\n     * known client is connected to the organization's internal network.\n     *\n     * @type {boolean}\n     */\n    isInNetwork: 'boolean'\n  },\n  // Event method members.\n\n  /**\n   * Trigger meeting started event for webex instance. Used by web-client team.\n   *\n   * @returns {void}\n   */\n  meetingStarted: function meetingStarted() {\n    this.webex.trigger('meeting started');\n  },\n\n  /**\n   * Trigger meeting ended event for webex instance. Used by web-client team.\n   *\n   * @returns {void}\n   */\n  meetingEnded: function meetingEnded() {\n    this.webex.trigger('meeting ended');\n  },\n  refresh: function refresh() {\n    var _this = this;\n\n    this.logger.info('device: refreshing'); // Validate that the device can be registered.\n\n    return this.canRegister().then(function () {\n      // Validate if the device is not registered and register instead.\n      if (!_this.registered) {\n        _this.logger.info('device: device not registered, registering');\n\n        return _this.register();\n      } // Merge body configurations, overriding defaults.\n\n\n      var body = (0, _extends3.default)({}, _this.serialize(), _this.config.body ? _this.config.body : {}); // Remove unneeded properties from the body object.\n\n      delete body.features;\n      delete body.mediaCluster; // Append a ttl value if the device is marked as ephemeral.\n\n      if (_this.config.ephemeral) {\n        body.ttl = _this.config.ephemeralDeviceTTL;\n      } // Merge header configurations, overriding defaults.\n\n\n      var headers = (0, _extends3.default)({}, _this.config.defaults.headers ? _this.config.defaults.headers : {}, _this.config.headers ? _this.config.headers : {});\n      return _this.request({\n        method: 'PUT',\n        uri: _this.url,\n        body: body,\n        headers: headers\n      }).then(function (response) {\n        return _this.processRegistrationSuccess(response);\n      }).catch(function (reason) {\n        // Handle a 404 error, which indicates that the device is no longer\n        // valid and needs to be registered as a new device.\n        if (reason.statusCode === 404) {\n          _this.logger.info('device: refresh failed, device is not valid');\n\n          _this.logger.info('device: attempting to register a new device');\n\n          _this.clear();\n\n          return _this.register();\n        }\n\n        return _promise2.default.reject(reason);\n      });\n    });\n  },\n  register: function register() {\n    var _this2 = this;\n\n    this.logger.info('device: registering'); // Validate that the device can be registered.\n\n    return this.canRegister().then(function () {\n      // Validate if the device is already registered and refresh instead.\n      if (_this2.registered) {\n        _this2.logger.info('device: device already registered, refreshing');\n\n        return _this2.refresh();\n      } // Merge body configurations, overriding defaults.\n\n\n      var body = (0, _extends3.default)({}, _this2.config.defaults.body ? _this2.config.defaults.body : {}, _this2.config.body ? _this2.config.body : {}); // Merge header configurations, overriding defaults.\n\n      var headers = (0, _extends3.default)({}, _this2.config.defaults.headers ? _this2.config.defaults.headers : {}, _this2.config.headers ? _this2.config.headers : {}); // This will be replaced by a `create()` method.\n\n      return _this2.request({\n        method: 'POST',\n        service: 'wdm',\n        resource: 'devices',\n        body: body,\n        headers: headers\n      }).then(function (response) {\n        return _this2.processRegistrationSuccess(response);\n      });\n    });\n  },\n  unregister: function unregister() {\n    var _this3 = this;\n\n    this.logger.info('device: unregistering');\n\n    if (!this.registered) {\n      this.logger.warn('device: not registered');\n      return _promise2.default.resolve();\n    }\n\n    return this.request({\n      uri: this.url,\n      method: 'DELETE'\n    }).then(function () {\n      return _this3.clear();\n    });\n  },\n\n  /* eslint-enable require-jsdoc */\n  // Helper method members\n\n  /**\n   * Determine if registration methods can be performed. This method utilizes\n   * the `services` plugin to confirm if the appropriate service urls are\n   * available for device registration.\n   *\n   * @returns {Promise<void, Error>}\n   */\n  canRegister: function canRegister() {\n    this.logger.info('device: validating if registration can occur'); // Destructure the services plugin for ease of reference.\n\n    var services = this.webex.internal.services; // Wait for the postauth catalog to populate.\n\n    return services.waitForCatalog('postauth', this.config.canRegisterWaitDuration).then(function () {\n      return (// Validate that the service exists after waiting for the catalog.\n        services.get('wdm') ? _promise2.default.resolve() : _promise2.default.reject(new Error(['device: cannot register,', '\\'wdm\\' service is not available from the postauth catalog'].join(' ')))\n      );\n    });\n  },\n\n  /**\n   * Check if the device can currently reach the inactivity check url.\n   *\n   * @returns {Promise<void, Error>}\n   */\n  checkNetworkReachability: function checkNetworkReachability() {\n    var _this4 = this;\n\n    this.logger.info('device: checking network reachability'); // Validate if the device has been checked and reset the logout timer.\n\n    if (this.isReachabilityChecked) {\n      return _promise2.default.resolve(this.resetLogoutTimer());\n    } // Validate if the device has a intranet checking url.\n\n\n    if (!this.intranetInactivityCheckUrl) {\n      this.isInNetwork = false;\n      return _promise2.default.resolve(this.resetLogoutTimer());\n    }\n\n    this.isReachabilityChecked = true; // Clear unnecessary headers for reachability request.\n\n    var headers = {\n      'cisco-no-http-redirect': null,\n      'spark-user-agent': null,\n      trackingid: null\n    }; // Send the network reachability request.\n\n    return this.request({\n      headers: headers,\n      method: 'GET',\n      uri: this.intranetInactivityCheckUrl\n    }).then(function () {\n      _this4.isInNetwork = true;\n      return _promise2.default.resolve(_this4.resetLogoutTimer());\n    }).catch(function () {\n      _this4.logger.info('device: did not reach ping endpoint');\n\n      _this4.logger.info('device: triggering off-network timer');\n\n      _this4.isInNetwork = false;\n      return _promise2.default.resolve(_this4.resetLogoutTimer());\n    });\n  },\n\n  /**\n   * Clears the registration ttl value if available.\n   *\n   * @param {Object} options - Values to be cleared.\n   * @returns {void}\n   */\n  clear: function clear() {\n    this.logger.info('device: clearing registered device'); // Prototype the extended class in order to preserve the parent member.\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    (0, _apply2.default)(_webexCore.WebexPlugin.prototype.clear, this, args);\n  },\n\n  /**\n   * Get the current websocket url with the appropriate priority host.\n   *\n   * @param {boolean} [wait=false] - Willing to wait on a valid url.\n   * @returns {Promise<string, Error>} - The priority-mapped web socket url.\n   */\n  getWebSocketUrl: function getWebSocketUrl() {\n    var _this5 = this;\n\n    var wait = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.logger.info('device: getting the current websocket url'); // Destructure the services plugin for ease of reference.\n\n    var services = this.webex.internal.services; // Validate if the method should wait for registration.\n\n    if (wait) {\n      return this.waitForRegistration().then(function () {\n        return services.convertUrlToPriorityHostUrl(_this5.webSocketUrl);\n      }).catch(function (error) {\n        _this5.logger.warn(error.message);\n\n        return _promise2.default.reject(new Error('device: failed to get the current websocket url'));\n      });\n    } // Validate if the device is registered.\n\n\n    if (!this.registered) {\n      return _promise2.default.reject(new Error('device: cannot get websocket url, device is not registered'));\n    } // Attempt to collect the priority-host-mapped web socket URL.\n\n\n    var wsUrl = services.convertUrlToPriorityHostUrl(this.webSocketUrl); // Validate that the url was collected.\n\n    if (wsUrl) {\n      return _promise2.default.resolve(wsUrl);\n    }\n\n    return _promise2.default.reject(new Error('device: failed to get the current websocket url'));\n  },\n\n  /**\n   * Process a successful device registration.\n   *\n   * @param {Object} response - response object from registration success.\n   * @returns {void}\n   */\n  processRegistrationSuccess: function processRegistrationSuccess(response) {\n    var _this6 = this;\n\n    this.logger.info('device: received registration payload'); // Clone the response body for service cleaning.\n\n    var body = (0, _extends3.default)({}, response.body); // Clean service data.\n\n    delete body.services;\n    delete body.serviceHostMap; // Assign the recieved DTO from **WDM** to this device.\n\n    this.set(body); // Validate if device is ephemeral and setup refresh timer.\n\n    if (this.config.ephemeral) {\n      this.logger.info('device: enqueuing device refresh');\n      var delay = (this.config.ephemeralDeviceTTL / 2 + 60) * 1000;\n      this.refreshTimer = (0, _commonTimers.safeSetTimeout)(function () {\n        return _this6.refresh();\n      }, delay);\n    } // Emit the registration:success event.\n\n\n    this.trigger(_constants.DEVICE_EVENT_REGISTRATION_SUCCESS, this);\n  },\n\n  /**\n   * Reset the current local logout timer for the registered device if\n   * registered.\n   *\n   * @returns {void}\n   */\n  resetLogoutTimer: function resetLogoutTimer() {\n    this.logger.info('device: resetting logout timer'); // Clear current logout timer.\n\n    clearTimeout(this.logoutTimer); // Remove last activity date event listener.\n\n    this.off('change:lastUserActivityDate'); // Remove the logout timer.\n\n    this.unset('logoutTimer'); // Validate if the device is currently in a meeting and is configured to\n    // required inactivity enforcement.\n\n    if (!this.isInMeeting && this.config.enableInactivityEnforcement && this.isReachabilityChecked) {\n      if (this.isInNetwork) {\n        this.setLogoutTimer(this.inNetworkInactivityDuration);\n      } else {\n        this.setLogoutTimer(this.intranetInactivityDuration);\n      }\n    }\n  },\n\n  /**\n   * Set the value of the logout timer for the current registered device.\n   *\n   * @param {number} duration - Value in seconds of the new logout timer.\n   * @returns {void}\n   */\n  setLogoutTimer: function setLogoutTimer(duration) {\n    var _this7 = this;\n\n    this.logger.info('device: setting logout timer');\n\n    if (!duration || duration <= 0) {\n      return;\n    } // Setup user activity date event listener.\n\n\n    this.on('change:lastUserActivityDate', function () {\n      _this7.resetLogoutTimer();\n    }); // Initialize a new timer.\n\n    this.logoutTimer = (0, _commonTimers.safeSetTimeout)(function () {\n      _this7.webex.logout();\n    }, duration * 1000);\n  },\n\n  /**\n   * Wait for the device to be registered.\n   *\n   * @param {number} [timeout=10] - The maximum duration to wait, in seconds.\n   * @returns {Promise<void, Error>}\n   */\n  waitForRegistration: function waitForRegistration() {\n    var _this8 = this;\n\n    var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    this.logger.info('device: waiting for registration');\n    return new _promise2.default(function (resolve, reject) {\n      if (_this8.registered) {\n        resolve();\n      }\n\n      var timeoutTimer = (0, _commonTimers.safeSetTimeout)(function () {\n        return reject(new Error('device: timeout occured while waiting for registration'));\n      }, timeout * 1000);\n\n      _this8.once(_constants.DEVICE_EVENT_REGISTRATION_SUCCESS, function () {\n        clearTimeout(timeoutTimer);\n        resolve();\n      });\n    });\n  },\n  markUrlFailedAndGetNew: function markUrlFailedAndGetNew(url) {\n    return _promise2.default.resolve(this.webex.internal.services.markFailedUrl(url));\n  },\n  initialize: function initialize() {\n    var _this9 = this;\n\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    } // Prototype the extended class in order to preserve the parent member.\n\n\n    (0, _apply2.default)(_webexCore.WebexPlugin.prototype.initialize, this, args); // Initialize feature events and listeners.\n\n    _constants.FEATURE_COLLECTION_NAMES.forEach(function (collectionName) {\n      _this9.features.on('change:' + collectionName, function (model, value, options) {\n        _this9.trigger('change', _this9, options);\n\n        _this9.trigger('change:features', _this9, _this9.features, options);\n      });\n    }); // Initialize network reachability checking event for url change.\n\n\n    this.on('change:intranetInactivityCheckUrl', function () {\n      _this9.checkNetworkReachability();\n    }); // Initialize network reachability checking event for duration change.\n\n    this.on('change:intranetInactivityDuration', function () {\n      _this9.checkNetworkReachability();\n    }); // Initialize network reachability checking event for duration change.\n\n    this.on('change:inNetworkInactivityDuration', function () {\n      _this9.checkNetworkReachability();\n    }); // Initialize listener for activity checking.\n\n    this.listenTo(this.webex, 'user-activity', function () {\n      _this9.lastUserActivityDate = Date.now();\n    }); // Initialize listener for meeting started event.\n\n    this.listenTo(this.webex, 'meeting started', function () {\n      _this9.isInMeeting = true;\n\n      _this9.resetLogoutTimer();\n    }); // Initialize listener for meeting ended event.\n\n    this.listenTo(this.webex, 'meeting ended', function () {\n      _this9.isInMeeting = false;\n\n      _this9.resetLogoutTimer();\n    });\n  }\n  /* eslint-enable require-jsdoc */\n  ,\n  version: '1.80.172'\n}, (_applyDecoratedDescriptor(_obj, 'refresh', [_common.oneFlight, _dec], (0, _getOwnPropertyDescriptor2.default)(_obj, 'refresh'), _obj), _applyDecoratedDescriptor(_obj, 'register', [_common.oneFlight, _dec2], (0, _getOwnPropertyDescriptor2.default)(_obj, 'register'), _obj), _applyDecoratedDescriptor(_obj, 'unregister', [_common.oneFlight, _dec3], (0, _getOwnPropertyDescriptor2.default)(_obj, 'unregister'), _obj), _applyDecoratedDescriptor(_obj, 'markUrlFailedAndGetNew', [_dec4], (0, _getOwnPropertyDescriptor2.default)(_obj, 'markUrlFailedAndGetNew'), _obj), _applyDecoratedDescriptor(_obj, 'initialize', [_dec5], (0, _getOwnPropertyDescriptor2.default)(_obj, 'initialize'), _obj)), _obj)));\n\nexports.default = Device;","map":{"version":3,"sources":["device.js"],"names":["Device","namespace","extraProperties","idAttribute","children","features","FeaturesModel","props","clientMessagingGiphy","customerCompanyName","customerLogoUrl","deviceType","helpUrl","intranetInactivityDuration","intranetInactivityCheckUrl","inNetworkInactivityDuration","ecmEnabledForAllUsers","ecmSupportedStorageProviders","modificationTime","navigationBarColor","partnerCompanyName","partnerLogoUrl","peopleInsightsEnabled","reportingSiteDesc","reportingSiteUrl","searchEncryptionKeyUrl","showSupportText","supportProviderCompanyName","supportProviderLogoUrl","url","userId","webFileShareControl","webSocketUrl","whiteboardFileShareControl","derived","registered","deps","fn","session","logoutTimer","lastUserActivityDate","isReachabilityChecked","isInMeeting","isInNetwork","meetingStarted","meetingEnded","oneFlight","refresh","body","headers","method","uri","reason","register","service","resource","unregister","canRegister","services","checkNetworkReachability","trackingid","clear","args","WebexPlugin","getWebSocketUrl","wait","error","wsUrl","processRegistrationSuccess","response","delay","DEVICE_EVENT_REGISTRATION_SUCCESS","resetLogoutTimer","clearTimeout","setLogoutTimer","duration","waitForRegistration","timeout","resolve","timeoutTimer","reject","markUrlFailedAndGetNew","initialize","FEATURE_COLLECTION_NAMES","Date"],"mappings":"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","sourcesContent":["// Internal Dependencies\nimport {deprecated, oneFlight} from '@webex/common';\nimport {persist, waitForValue, WebexPlugin} from '@webex/webex-core';\nimport {safeSetTimeout} from '@webex/common-timers';\n\n// Local Dependencies\nimport {\n  FEATURE_COLLECTION_NAMES,\n  DEVICE_EVENT_REGISTRATION_SUCCESS\n} from './constants';\nimport FeaturesModel from './features/features-model';\n\n/**\n * Determine if the plugin should be initialized based on cached storage.\n *\n * @returns {boolean} - If the device is ephemeral.\n */\nfunction decider() {\n  return !this.config.ephemeral;\n}\n\nconst Device = WebexPlugin.extend({\n\n  // Ampersand property members.\n\n  namespace: 'Device',\n\n  // Allow for extra properties to prevent the plugin from failing due to\n  // **WDM** service DTO changes.\n  extraProperties: 'allow',\n\n  idAttribute: 'url',\n\n  children: {\n    /**\n     * The class object that contains all of the feature collections.\n     *\n     * @type {FeaturesModel}\n     */\n    features: FeaturesModel\n  },\n\n  /**\n   * A collection of device properties mostly assigned by the retrieved DTO from\n   * the **WDM** service that are mapped against the ampersand properties.\n   *\n   * @type {Object}\n   */\n  props: {\n    /**\n     * This property determines whether or not giphy support is enabled.\n     *\n     * @type {'ALLOW' | 'BLOCK'}\n     */\n    clientMessagingGiphy: 'string',\n\n    /**\n     * This property should store the company name.\n     *\n     * @type {string}\n     */\n    customerCompanyName: 'string',\n\n    /**\n     * This property should store the logo url.\n     *\n     * @type {string}\n     */\n    customerLogoUrl: 'string',\n\n    /**\n     * This property doesn't have any real values, but is sent during device\n     * refresh to prevent the **wdm** service from falling back to an iOS device\n     * type.\n     *\n     * @type {string}\n     */\n    deviceType: 'string',\n\n    /**\n     * This property should store the help url.\n     *\n     * @type {string}\n     */\n    helpUrl: 'string',\n\n    /**\n     * This property should store the intranet inactivity timer duration.\n     *\n     * @type {number}\n     */\n    intranetInactivityDuration: 'number',\n\n    /**\n     * This property stores the url required to validate if the device is able\n     * to actively reach the intranet network.\n     *\n     * @type {string}\n     */\n    intranetInactivityCheckUrl: 'string',\n\n    /**\n     * This property stores the inactivity timer duration, and could possibly\n     * deprecate the `intranetInactivityDuration` property.\n     *\n     * @type {number}\n     */\n    inNetworkInactivityDuration: 'number',\n\n    /**\n     * This property stores the ECM (external content management) enabled value\n     * for the whole organization.\n     *\n     * @type {boolean}\n     */\n    ecmEnabledForAllUsers: ['boolean', false, false],\n\n    /**\n     * This property stores an array of ECM (external content management)\n     * providers that are currently available.\n     *\n     * @returns {Array<string>}\n     */\n    ecmSupportedStorageProviders: ['array', false, (() => [])],\n\n    /**\n     * This property stores the modification time value retrieved from the\n     * **WDM** endpoint formatted as ISO 8601.\n     *\n     * @type {string}\n     */\n    modificationTime: 'string',\n\n    /**\n     * This property stores the navigation bar color.\n     *\n     * @type {string}\n     */\n    navigationBarColor: 'string',\n\n    /**\n     * This property stores the partner company's name when available.\n     *\n     * @type {string}\n     */\n    partnerCompanyName: 'string',\n\n    /**\n     * This property stores the partner company's logo when available.\n     *\n     * @type {string}\n     */\n    partnerLogoUrl: 'string',\n\n    /**\n     * This property stores the availability of people data from the **WDM**\n     * service.\n     *\n     * @type {boolean}\n     */\n    peopleInsightsEnabled: 'boolean',\n\n    /**\n     * This property stores the reporting site's description when available.\n     *\n     * @type {string}\n     */\n    reportingSiteDesc: 'string',\n\n    /**\n     * This property stores the reporting site's access url when available.\n     *\n     * @type {string}\n     */\n    reportingSiteUrl: 'string',\n\n    /**\n     * This property stores the encryption key url when available.\n     *\n     * @type {string}\n     */\n    searchEncryptionKeyUrl: 'string',\n\n    /**\n     * This property stores the availability of support-provided text from the\n     * **WDM** service.\n     *\n     * @type {boolean}\n     */\n    showSupportText: 'boolean',\n\n    /**\n     * This property stores the support provider's company name when available.\n     *\n     * @type {string}\n     */\n    supportProviderCompanyName: 'string',\n\n    /**\n     * This property stores the support provider's logo url when available.\n     *\n     * @type {string}\n     */\n    supportProviderLogoUrl: 'string',\n\n    /**\n     * This property stores the device's url retrieved from a registration\n     * request. This property gets set via the initial registration process by a\n     * `this.set()` method.\n     *\n     * @type {string}\n     */\n    url: 'string',\n\n    /**\n     * This property stores the device's userId uuid value, which can also be\n     * derived from the device's registerd user's userId retrieved from\n     * the **Hydra** service.\n     *\n     * @type {string}\n     */\n    userId: 'string',\n\n    /**\n     * This property stores whether or not file sharing is enabled\n     *\n     * @type {'BLOCK_BOTH' | 'BLOCK_UPLOAD'}\n     */\n    webFileShareControl: 'string',\n\n    /**\n     * This property stores the current web socket url used by the registered\n     * device.\n     *\n     * @type {string}\n     */\n    webSocketUrl: 'string',\n\n    /**\n     * This property stores the value indicating whether or not white board file\n     * sharing is enabled for the current device.\n     *\n     * @type {'ALLOW' | 'BLOCK'}\n     */\n    whiteboardFileShareControl: 'string'\n  },\n\n  /**\n   * A list of derived properties that populate based when their parent data\n   * available via the device's properties.\n   *\n   * @type {Object}\n   */\n  derived: {\n    /**\n     * This property determines if the current device is registered.\n     *\n     * @type {boolean}\n     */\n    registered: {\n      deps: ['url'],\n\n      /**\n       * Checks if the device is registered by validating that the url exists.\n       * Amperstand does not allow this to method to be written as an arrow\n       * function.\n       *\n       * @returns {boolean}\n       */\n      fn() {\n        return !!(this.url);\n      }\n    }\n  },\n\n  /**\n   * Stores timer data as well as other state details.\n   *\n   * @type {Object}\n   */\n  session: {\n    /**\n     * This property stores the logout timer object\n     *\n     * @type {any}\n     */\n    logoutTimer: 'any',\n\n    /**\n     * This property stores the date for the last activity the user made\n     * with the current device.\n     *\n     * @type {number}\n     */\n    lastUserActivityDate: 'number',\n\n    /**\n     * This property stores whether or not the reachability check has been\n     * performed to prevent the reachability check from performing its\n     * operation more than once after a successful check.\n     *\n     * @returns {boolean}\n     */\n    isReachabilityChecked: ['boolean', false, false],\n\n    /**\n     * This property stores whether or not the current device is in a meeting\n     * to prevent an unneeded timeout of a meeting due to inactivity.\n     *\n     * @type {boolean}\n     */\n    isInMeeting: 'boolean',\n\n    /**\n     * This property identifies if the device is currently in network to prevent\n     * the `resetLogoutTimer()` method from being called repeatedly once its\n     * known client is connected to the organization's internal network.\n     *\n     * @type {boolean}\n     */\n    isInNetwork: 'boolean'\n  },\n\n  // Event method members.\n\n  /**\n   * Trigger meeting started event for webex instance. Used by web-client team.\n   *\n   * @returns {void}\n   */\n  meetingStarted() {\n    this.webex.trigger('meeting started');\n  },\n\n  /**\n   * Trigger meeting ended event for webex instance. Used by web-client team.\n   *\n   * @returns {void}\n   */\n  meetingEnded() {\n    this.webex.trigger('meeting ended');\n  },\n\n  // Registration method members\n\n  /* eslint-disable require-jsdoc */\n  /**\n   * Refresh the current registered device if able.\n   *\n   * @returns {Promise<void, Error>}\n   */\n  @oneFlight\n  @waitForValue('@')\n  refresh() {\n    this.logger.info('device: refreshing');\n\n    // Validate that the device can be registered.\n    return this.canRegister()\n      .then(() => {\n        // Validate if the device is not registered and register instead.\n        if (!this.registered) {\n          this.logger.info('device: device not registered, registering');\n\n          return this.register();\n        }\n\n        // Merge body configurations, overriding defaults.\n        const body = {\n          ...(this.serialize()),\n          ...(this.config.body ? this.config.body : {})\n        };\n\n        // Remove unneeded properties from the body object.\n        delete body.features;\n        delete body.mediaCluster;\n\n        // Append a ttl value if the device is marked as ephemeral.\n        if (this.config.ephemeral) {\n          body.ttl = this.config.ephemeralDeviceTTL;\n        }\n\n        // Merge header configurations, overriding defaults.\n        const headers = {\n          ...(this.config.defaults.headers ? this.config.defaults.headers : {}),\n          ...(this.config.headers ? this.config.headers : {})\n        };\n\n        return this.request({\n          method: 'PUT',\n          uri: this.url,\n          body,\n          headers\n        })\n          .then((response) => this.processRegistrationSuccess(response))\n          .catch((reason) => {\n            // Handle a 404 error, which indicates that the device is no longer\n            // valid and needs to be registered as a new device.\n            if (reason.statusCode === 404) {\n              this.logger.info('device: refresh failed, device is not valid');\n              this.logger.info('device: attempting to register a new device');\n\n              this.clear();\n\n              return this.register();\n            }\n\n            return Promise.reject(reason);\n          });\n      });\n  },\n\n  /**\n   * Register or refresh a device depending on the current device state. Device\n   * registration utilizes the services plugin to send the request to the\n   * **WDM** service.\n   *\n   * @returns {Promise<void, Error>}\n   */\n  @oneFlight\n  @waitForValue('@')\n  register() {\n    this.logger.info('device: registering');\n\n    // Validate that the device can be registered.\n    return this.canRegister()\n      .then(() => {\n        // Validate if the device is already registered and refresh instead.\n        if (this.registered) {\n          this.logger.info('device: device already registered, refreshing');\n\n          return this.refresh();\n        }\n\n        // Merge body configurations, overriding defaults.\n        const body = {\n          ...(this.config.defaults.body ? this.config.defaults.body : {}),\n          ...(this.config.body ? this.config.body : {})\n        };\n\n        // Merge header configurations, overriding defaults.\n        const headers = {\n          ...(this.config.defaults.headers ? this.config.defaults.headers : {}),\n          ...(this.config.headers ? this.config.headers : {})\n        };\n\n        // This will be replaced by a `create()` method.\n        return this.request({\n          method: 'POST',\n          service: 'wdm',\n          resource: 'devices',\n          body,\n          headers\n        })\n          .then((response) => this.processRegistrationSuccess(response));\n      });\n  },\n\n  /**\n   * Unregister the current registered device if available. Unregistering a\n   * device utilizes the services plugin to send the request to the **WDM**\n   * service.\n   *\n   * @returns {Promise<void, Error>}\n   */\n  @oneFlight\n  @waitForValue('@')\n  unregister() {\n    this.logger.info('device: unregistering');\n\n    if (!this.registered) {\n      this.logger.warn('device: not registered');\n\n      return Promise.resolve();\n    }\n\n    return this.request({\n      uri: this.url,\n      method: 'DELETE'\n    })\n      .then(() => this.clear());\n  },\n  /* eslint-enable require-jsdoc */\n\n  // Helper method members\n\n  /**\n   * Determine if registration methods can be performed. This method utilizes\n   * the `services` plugin to confirm if the appropriate service urls are\n   * available for device registration.\n   *\n   * @returns {Promise<void, Error>}\n   */\n  canRegister() {\n    this.logger.info('device: validating if registration can occur');\n\n    // Destructure the services plugin for ease of reference.\n    const {services} = this.webex.internal;\n\n    // Wait for the postauth catalog to populate.\n    return services.waitForCatalog(\n      'postauth',\n      this.config.canRegisterWaitDuration\n    )\n      .then(() => (\n        // Validate that the service exists after waiting for the catalog.\n        services.get('wdm') ?\n          Promise.resolve() :\n          Promise.reject(new Error([\n            'device: cannot register,',\n            '\\'wdm\\' service is not available from the postauth catalog'\n          ].join(' ')))\n      ));\n  },\n\n  /**\n   * Check if the device can currently reach the inactivity check url.\n   *\n   * @returns {Promise<void, Error>}\n   */\n  checkNetworkReachability() {\n    this.logger.info('device: checking network reachability');\n\n    // Validate if the device has been checked and reset the logout timer.\n    if (this.isReachabilityChecked) {\n      return Promise.resolve(this.resetLogoutTimer());\n    }\n\n    // Validate if the device has a intranet checking url.\n    if (!this.intranetInactivityCheckUrl) {\n      this.isInNetwork = false;\n\n      return Promise.resolve(this.resetLogoutTimer());\n    }\n\n    this.isReachabilityChecked = true;\n\n    // Clear unnecessary headers for reachability request.\n    const headers = {\n      'cisco-no-http-redirect': null,\n      'spark-user-agent': null,\n      trackingid: null\n    };\n\n    // Send the network reachability request.\n    return this.request({\n      headers,\n      method: 'GET',\n      uri: this.intranetInactivityCheckUrl\n    })\n      .then(() => {\n        this.isInNetwork = true;\n\n        return Promise.resolve(this.resetLogoutTimer());\n      })\n      .catch(() => {\n        this.logger.info('device: did not reach ping endpoint');\n        this.logger.info('device: triggering off-network timer');\n\n        this.isInNetwork = false;\n\n        return Promise.resolve(this.resetLogoutTimer());\n      });\n  },\n\n  /**\n   * Clears the registration ttl value if available.\n   *\n   * @param {Object} options - Values to be cleared.\n   * @returns {void}\n   */\n  clear(...args) {\n    this.logger.info('device: clearing registered device');\n\n    // Prototype the extended class in order to preserve the parent member.\n    Reflect.apply(WebexPlugin.prototype.clear, this, args);\n  },\n\n  /**\n   * Get the current websocket url with the appropriate priority host.\n   *\n   * @param {boolean} [wait=false] - Willing to wait on a valid url.\n   * @returns {Promise<string, Error>} - The priority-mapped web socket url.\n   */\n  getWebSocketUrl(wait = false) {\n    this.logger.info('device: getting the current websocket url');\n\n    // Destructure the services plugin for ease of reference.\n    const {services} = this.webex.internal;\n\n    // Validate if the method should wait for registration.\n    if (wait) {\n      return this.waitForRegistration()\n        .then(() => services.convertUrlToPriorityHostUrl(this.webSocketUrl))\n        .catch((error) => {\n          this.logger.warn(error.message);\n\n          return Promise.reject(new Error(\n            'device: failed to get the current websocket url'\n          ));\n        });\n    }\n\n    // Validate if the device is registered.\n    if (!this.registered) {\n      return Promise.reject(new Error(\n        'device: cannot get websocket url, device is not registered'\n      ));\n    }\n\n    // Attempt to collect the priority-host-mapped web socket URL.\n    const wsUrl = services.convertUrlToPriorityHostUrl(this.webSocketUrl);\n\n    // Validate that the url was collected.\n    if (wsUrl) {\n      return Promise.resolve(wsUrl);\n    }\n\n    return Promise.reject(new Error(\n      'device: failed to get the current websocket url'\n    ));\n  },\n\n  /**\n   * Process a successful device registration.\n   *\n   * @param {Object} response - response object from registration success.\n   * @returns {void}\n   */\n  processRegistrationSuccess(response) {\n    this.logger.info('device: received registration payload');\n\n    // Clone the response body for service cleaning.\n    const body = {...response.body};\n\n    // Clean service data.\n    delete body.services;\n    delete body.serviceHostMap;\n\n    // Assign the recieved DTO from **WDM** to this device.\n    this.set(body);\n\n    // Validate if device is ephemeral and setup refresh timer.\n    if (this.config.ephemeral) {\n      this.logger.info('device: enqueuing device refresh');\n\n      const delay = (this.config.ephemeralDeviceTTL / 2 + 60) * 1000;\n\n      this.refreshTimer = safeSetTimeout(() => this.refresh(), delay);\n    }\n\n    // Emit the registration:success event.\n    this.trigger(DEVICE_EVENT_REGISTRATION_SUCCESS, this);\n  },\n\n  /**\n   * Reset the current local logout timer for the registered device if\n   * registered.\n   *\n   * @returns {void}\n   */\n  resetLogoutTimer() {\n    this.logger.info('device: resetting logout timer');\n\n    // Clear current logout timer.\n    clearTimeout(this.logoutTimer);\n\n    // Remove last activity date event listener.\n    this.off('change:lastUserActivityDate');\n\n    // Remove the logout timer.\n    this.unset('logoutTimer');\n\n    // Validate if the device is currently in a meeting and is configured to\n    // required inactivity enforcement.\n    if (!this.isInMeeting && this.config.enableInactivityEnforcement &&\n      this.isReachabilityChecked) {\n      if (this.isInNetwork) {\n        this.setLogoutTimer(this.inNetworkInactivityDuration);\n      }\n      else {\n        this.setLogoutTimer(this.intranetInactivityDuration);\n      }\n    }\n  },\n\n  /**\n   * Set the value of the logout timer for the current registered device.\n   *\n   * @param {number} duration - Value in seconds of the new logout timer.\n   * @returns {void}\n   */\n  setLogoutTimer(duration) {\n    this.logger.info('device: setting logout timer');\n\n    if (!duration || duration <= 0) {\n      return;\n    }\n\n    // Setup user activity date event listener.\n    this.on('change:lastUserActivityDate', () => { this.resetLogoutTimer(); });\n\n    // Initialize a new timer.\n    this.logoutTimer = safeSetTimeout(() => {\n      this.webex.logout();\n    }, duration * 1000);\n  },\n\n  /**\n   * Wait for the device to be registered.\n   *\n   * @param {number} [timeout=10] - The maximum duration to wait, in seconds.\n   * @returns {Promise<void, Error>}\n   */\n  waitForRegistration(timeout = 10) {\n    this.logger.info('device: waiting for registration');\n\n    return new Promise((resolve, reject) => {\n      if (this.registered) {\n        resolve();\n      }\n\n      const timeoutTimer = safeSetTimeout(() => reject(\n        new Error('device: timeout occured while waiting for registration')\n      ), timeout * 1000);\n\n      this.once(DEVICE_EVENT_REGISTRATION_SUCCESS, () => {\n        clearTimeout(timeoutTimer);\n        resolve();\n      });\n    });\n  },\n\n  // Deprecated methods.\n\n  /**\n   * Mark a url as failed and get the next priority host url.\n   *\n   * @param {string} url - The url to mark as failed.\n   * @returns {Promise<string>} - The next priority url.\n   */\n  @deprecated('device#markUrlFailedAndGetNew(): Use services#markFailedUrl()')\n  markUrlFailedAndGetNew(url) {\n    return Promise.resolve(this.webex.internal.services.markFailedUrl(url));\n  },\n\n  // Ampersand method members\n\n  /* eslint-disable require-jsdoc */\n  /**\n   * Initializer method for the device plugin.\n   *\n   * @override\n   * @param {Array<any>} args - An array of items to be mapped as properties.\n   * @returns {void}\n   */\n  @persist('@', decider)\n  initialize(...args) {\n    // Prototype the extended class in order to preserve the parent member.\n    Reflect.apply(WebexPlugin.prototype.initialize, this, args);\n\n    // Initialize feature events and listeners.\n    FEATURE_COLLECTION_NAMES.forEach((collectionName) => {\n      this.features.on(`change:${collectionName}`, (model, value, options) => {\n        this.trigger('change', this, options);\n        this.trigger('change:features', this, this.features, options);\n      });\n    });\n\n    // Initialize network reachability checking event for url change.\n    this.on('change:intranetInactivityCheckUrl', () => {\n      this.checkNetworkReachability();\n    });\n\n    // Initialize network reachability checking event for duration change.\n    this.on('change:intranetInactivityDuration', () => {\n      this.checkNetworkReachability();\n    });\n\n    // Initialize network reachability checking event for duration change.\n    this.on('change:inNetworkInactivityDuration', () => {\n      this.checkNetworkReachability();\n    });\n\n    // Initialize listener for activity checking.\n    this.listenTo(this.webex, 'user-activity', () => {\n      this.lastUserActivityDate = Date.now();\n    });\n\n    // Initialize listener for meeting started event.\n    this.listenTo(this.webex, 'meeting started', () => {\n      this.isInMeeting = true;\n      this.resetLogoutTimer();\n    });\n\n    // Initialize listener for meeting ended event.\n    this.listenTo(this.webex, 'meeting ended', () => {\n      this.isInMeeting = false;\n      this.resetLogoutTimer();\n    });\n  }\n  /* eslint-enable require-jsdoc */\n});\n\nexport default Device;\n"]},"metadata":{},"sourceType":"script"}