{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nexport default class OtherRecipientInfo {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for OtherRecipientInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc oriType\r\n     */\n    this.oriType = getParametersValue(parameters, \"oriType\", OtherRecipientInfo.defaultValues(\"oriType\"));\n    /**\r\n     * @type {*}\r\n     * @desc oriValue\r\n     */\n\n    this.oriValue = getParametersValue(parameters, \"oriValue\", OtherRecipientInfo.defaultValues(\"oriValue\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"oriType\":\n        return \"\";\n\n      case \"oriValue\":\n        return {};\n\n      default:\n        throw new Error(`Invalid member name for OtherRecipientInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"oriType\":\n        return memberValue === \"\";\n\n      case \"oriValue\":\n        return Object.keys(memberValue).length === 0;\n\n      default:\n        throw new Error(`Invalid member name for OtherRecipientInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * OtherRecipientInfo ::= SEQUENCE {\r\n   *    oriType OBJECT IDENTIFIER,\r\n   *    oriValue ANY DEFINED BY oriType }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [oriType]\r\n     * @property {string} [oriValue]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.ObjectIdentifier({\n        name: names.oriType || \"\"\n      }), new asn1js.Any({\n        name: names.oriValue || \"\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"oriType\", \"oriValue\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, OtherRecipientInfo.schema({\n      names: {\n        oriType: \"oriType\",\n        oriValue: \"oriValue\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for OtherRecipientInfo\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.oriType = asn1.result.oriType.valueBlock.toString();\n    this.oriValue = asn1.result.oriValue; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [new asn1js.ObjectIdentifier({\n        value: this.oriType\n      }), this.oriValue]\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const _object = {\n      oriType: this.oriType\n    };\n    if (OtherRecipientInfo.compareWithDefault(\"oriValue\", this.oriValue) === false) _object.oriValue = this.oriValue.toJSON();\n    return _object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/OtherRecipientInfo.js"],"names":["asn1js","getParametersValue","clearProps","OtherRecipientInfo","constructor","parameters","oriType","defaultValues","oriValue","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","Object","keys","length","names","Sequence","name","blockName","value","ObjectIdentifier","Any","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON","_object"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,SAASC,kBAAT,EAA6BC,UAA7B,QAA+C,SAA/C,C,CACA;;AACA;;;;AAGA,eAAe,MAAMC,kBAAN,CACf;AACC;;AACA;;;;;AAKAC,EAAAA,WAAW,CAACC,UAAU,GAAG,EAAd,EACX;AACC;;AACA;;;;AAIA,SAAKC,OAAL,GAAeL,kBAAkB,CAACI,UAAD,EAAa,SAAb,EAAwBF,kBAAkB,CAACI,aAAnB,CAAiC,SAAjC,CAAxB,CAAjC;AACA;;;;;AAIA,SAAKC,QAAL,GAAgBP,kBAAkB,CAACI,UAAD,EAAa,UAAb,EAAyBF,kBAAkB,CAACI,aAAnB,CAAiC,UAAjC,CAAzB,CAAlC,CAXD,CAYC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKI,UAAL,CAAgBJ,UAAU,CAACK,MAA3B,EAhBF,CAiBC;AACA,GA1BF,CA2BC;;AACA;;;;;;AAIA,SAAOH,aAAP,CAAqBI,UAArB,EACA;AACC,YAAOA,UAAP;AAEC,WAAK,SAAL;AACC,eAAO,EAAP;;AACD,WAAK,UAAL;AACC,eAAO,EAAP;;AACD;AACC,cAAM,IAAIC,KAAJ,CAAW,qDAAoDD,UAAW,EAA1E,CAAN;AAPF;AASA,GA3CF,CA4CC;;AACA;;;;;;;AAKA,SAAOE,kBAAP,CAA0BF,UAA1B,EAAsCG,WAAtC,EACA;AACC,YAAOH,UAAP;AAEC,WAAK,SAAL;AACC,eAAQG,WAAW,KAAK,EAAxB;;AACD,WAAK,UAAL;AACC,eAAQC,MAAM,CAACC,IAAP,CAAYF,WAAZ,EAAyBG,MAAzB,KAAoC,CAA5C;;AACD;AACC,cAAM,IAAIL,KAAJ,CAAW,qDAAoDD,UAAW,EAA1E,CAAN;AAPF;AASA,GA7DF,CA8DC;;AACA;;;;;;;;;;;;;;;AAaA,SAAOD,MAAP,CAAcL,UAAU,GAAG,EAA3B,EACA;AACC;;;;;;AAMA,UAAMa,KAAK,GAAGjB,kBAAkB,CAACI,UAAD,EAAa,OAAb,EAAsB,EAAtB,CAAhC;AAEA,WAAQ,IAAIL,MAAM,CAACmB,QAAX,CAAoB;AAC3BC,MAAAA,IAAI,EAAGF,KAAK,CAACG,SAAN,IAAmB,EADC;AAE3BC,MAAAA,KAAK,EAAE,CACN,IAAItB,MAAM,CAACuB,gBAAX,CAA4B;AAAEH,QAAAA,IAAI,EAAGF,KAAK,CAACZ,OAAN,IAAiB;AAA1B,OAA5B,CADM,EAEN,IAAIN,MAAM,CAACwB,GAAX,CAAe;AAAEJ,QAAAA,IAAI,EAAGF,KAAK,CAACV,QAAN,IAAkB;AAA3B,OAAf,CAFM;AAFoB,KAApB,CAAR;AAOA,GA7FF,CA8FC;;AACA;;;;;;AAIAC,EAAAA,UAAU,CAACC,MAAD,EACV;AACC;AACAR,IAAAA,UAAU,CAACQ,MAAD,EAAS,CAClB,SADkB,EAElB,UAFkB,CAAT,CAAV,CAFD,CAMC;AAEA;;AACA,UAAMe,IAAI,GAAGzB,MAAM,CAAC0B,aAAP,CAAqBhB,MAArB,EACZA,MADY,EAEZP,kBAAkB,CAACO,MAAnB,CAA0B;AACzBQ,MAAAA,KAAK,EAAE;AACNZ,QAAAA,OAAO,EAAE,SADH;AAENE,QAAAA,QAAQ,EAAE;AAFJ;AADkB,KAA1B,CAFY,CAAb;AAUA,QAAGiB,IAAI,CAACE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIf,KAAJ,CAAU,4EAAV,CAAN,CApBF,CAqBC;AAEA;;AACA,SAAKN,OAAL,GAAemB,IAAI,CAACG,MAAL,CAAYtB,OAAZ,CAAoBuB,UAApB,CAA+BC,QAA/B,EAAf;AACA,SAAKtB,QAAL,GAAgBiB,IAAI,CAACG,MAAL,CAAYpB,QAA5B,CAzBD,CA0BC;AACA,GA/HF,CAgIC;;AACA;;;;;;AAIAuB,EAAAA,QAAQ,GACR;AACC;AACA,WAAQ,IAAI/B,MAAM,CAACmB,QAAX,CAAoB;AAC3BG,MAAAA,KAAK,EAAE,CACN,IAAItB,MAAM,CAACuB,gBAAX,CAA4B;AAAED,QAAAA,KAAK,EAAE,KAAKhB;AAAd,OAA5B,CADM,EAEN,KAAKE,QAFC;AADoB,KAApB,CAAR,CAFD,CAQC;AACA,GA/IF,CAgJC;;AACA;;;;;;AAIAwB,EAAAA,MAAM,GACN;AACC,UAAMC,OAAO,GAAG;AACf3B,MAAAA,OAAO,EAAE,KAAKA;AADC,KAAhB;AAIA,QAAGH,kBAAkB,CAACU,kBAAnB,CAAsC,UAAtC,EAAkD,KAAKL,QAAvD,MAAqE,KAAxE,EACCyB,OAAO,CAACzB,QAAR,GAAmB,KAAKA,QAAL,CAAcwB,MAAd,EAAnB;AAED,WAAOC,OAAP;AACA,GA/JF,CAgKC;;;AAhKD,C,CAkKA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class OtherRecipientInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherRecipientInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc oriType\r\n\t\t */\r\n\t\tthis.oriType = getParametersValue(parameters, \"oriType\", OtherRecipientInfo.defaultValues(\"oriType\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @desc oriValue\r\n\t\t */\r\n\t\tthis.oriValue = getParametersValue(parameters, \"oriValue\", OtherRecipientInfo.defaultValues(\"oriValue\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"oriType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"oriValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"oriType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"oriValue\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OtherRecipientInfo ::= SEQUENCE {\r\n\t *    oriType OBJECT IDENTIFIER,\r\n\t *    oriValue ANY DEFINED BY oriType }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [oriType]\r\n\t\t * @property {string} [oriValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.oriType || \"\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.oriValue || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"oriType\",\r\n\t\t\t\"oriValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherRecipientInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\toriType: \"oriType\",\r\n\t\t\t\t\toriValue: \"oriValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherRecipientInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.oriType = asn1.result.oriType.valueBlock.toString();\r\n\t\tthis.oriValue = asn1.result.oriValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.oriType }),\r\n\t\t\t\tthis.oriValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\toriType: this.oriType\r\n\t\t};\r\n\r\n\t\tif(OtherRecipientInfo.compareWithDefault(\"oriValue\", this.oriValue) === false)\r\n\t\t\t_object.oriValue = this.oriValue.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}