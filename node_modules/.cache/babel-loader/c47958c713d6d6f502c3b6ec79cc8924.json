{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nexport default class EncapsulatedContentInfo {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for EncapsulatedContentInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc eContentType\r\n     */\n    this.eContentType = getParametersValue(parameters, \"eContentType\", EncapsulatedContentInfo.defaultValues(\"eContentType\"));\n\n    if (\"eContent\" in parameters) {\n      /**\r\n       * @type {OctetString}\r\n       * @desc eContent\r\n       */\n      this.eContent = getParametersValue(parameters, \"eContent\", EncapsulatedContentInfo.defaultValues(\"eContent\"));\n\n      if (this.eContent.idBlock.tagClass === 1 && this.eContent.idBlock.tagNumber === 4) {\n        //region Divide OCTETSTRING value down to small pieces\n        if (this.eContent.idBlock.isConstructed === false) {\n          const constrString = new asn1js.OctetString({\n            idBlock: {\n              isConstructed: true\n            },\n            isConstructed: true\n          });\n          let offset = 0;\n          let length = this.eContent.valueBlock.valueHex.byteLength;\n\n          while (length > 0) {\n            const pieceView = new Uint8Array(this.eContent.valueBlock.valueHex, offset, offset + 65536 > this.eContent.valueBlock.valueHex.byteLength ? this.eContent.valueBlock.valueHex.byteLength - offset : 65536);\n\n            const _array = new ArrayBuffer(pieceView.length);\n\n            const _view = new Uint8Array(_array);\n\n            for (let i = 0; i < _view.length; i++) _view[i] = pieceView[i];\n\n            constrString.valueBlock.value.push(new asn1js.OctetString({\n              valueHex: _array\n            }));\n            length -= pieceView.length;\n            offset += pieceView.length;\n          }\n\n          this.eContent = constrString;\n        } //endregion\n\n      }\n    } //endregion\n    //region If input argument array contains \"schema\" for this object\n\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"eContentType\":\n        return \"\";\n\n      case \"eContent\":\n        return new asn1js.OctetString();\n\n      default:\n        throw new Error(`Invalid member name for EncapsulatedContentInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"eContentType\":\n        return memberValue === \"\";\n\n      case \"eContent\":\n        {\n          if (memberValue.idBlock.tagClass === 1 && memberValue.idBlock.tagNumber === 4) return memberValue.isEqual(EncapsulatedContentInfo.defaultValues(\"eContent\"));\n          return false;\n        }\n\n      default:\n        throw new Error(`Invalid member name for EncapsulatedContentInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * EncapsulatedContentInfo ::= SEQUENCE {\r\n   *    eContentType ContentType,\r\n   *    eContent [0] EXPLICIT OCTET STRING OPTIONAL } * Changed it to ANY, as in PKCS#7\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [type]\r\n     * @property {string} [setName]\r\n     * @property {string} [values]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.ObjectIdentifier({\n        name: names.eContentType || \"\"\n      }), new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [new asn1js.Any({\n          name: names.eContent || \"\"\n        }) // In order to aling this with PKCS#7 and CMS as well\n        ]\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"eContentType\", \"eContent\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, EncapsulatedContentInfo.schema({\n      names: {\n        eContentType: \"eContentType\",\n        eContent: \"eContent\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for EncapsulatedContentInfo\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.eContentType = asn1.result.eContentType.valueBlock.toString();\n    if (\"eContent\" in asn1.result) this.eContent = asn1.result.eContent; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence \n    const outputArray = [];\n    outputArray.push(new asn1js.ObjectIdentifier({\n      value: this.eContentType\n    }));\n\n    if (\"eContent\" in this) {\n      if (EncapsulatedContentInfo.compareWithDefault(\"eContent\", this.eContent) === false) {\n        outputArray.push(new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [this.eContent]\n        }));\n      }\n    } //endregion \n    //region Construct and return new ASN.1 schema for this object \n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion \n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const _object = {\n      eContentType: this.eContentType\n    };\n\n    if (\"eContent\" in this) {\n      if (EncapsulatedContentInfo.compareWithDefault(\"eContent\", this.eContent) === false) _object.eContent = this.eContent.toJSON();\n    }\n\n    return _object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/EncapsulatedContentInfo.js"],"names":["asn1js","getParametersValue","clearProps","EncapsulatedContentInfo","constructor","parameters","eContentType","defaultValues","eContent","idBlock","tagClass","tagNumber","isConstructed","constrString","OctetString","offset","length","valueBlock","valueHex","byteLength","pieceView","Uint8Array","_array","ArrayBuffer","_view","i","value","push","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","isEqual","names","Sequence","name","blockName","ObjectIdentifier","Constructed","optional","Any","asn1","compareSchema","verified","result","toString","toSchema","outputArray","toJSON","_object"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,SAASC,kBAAT,EAA6BC,UAA7B,QAA+C,SAA/C,C,CACA;;AACA;;;;AAGA,eAAe,MAAMC,uBAAN,CACf;AACC;;AACA;;;;;AAKAC,EAAAA,WAAW,CAACC,UAAU,GAAG,EAAd,EACX;AACC;;AACA;;;;AAIA,SAAKC,YAAL,GAAoBL,kBAAkB,CAACI,UAAD,EAAa,cAAb,EAA6BF,uBAAuB,CAACI,aAAxB,CAAsC,cAAtC,CAA7B,CAAtC;;AAEA,QAAG,cAAcF,UAAjB,EACA;AACC;;;;AAIA,WAAKG,QAAL,GAAgBP,kBAAkB,CAACI,UAAD,EAAa,UAAb,EAAyBF,uBAAuB,CAACI,aAAxB,CAAsC,UAAtC,CAAzB,CAAlC;;AACA,UAAI,KAAKC,QAAL,CAAcC,OAAd,CAAsBC,QAAtB,KAAmC,CAApC,IACD,KAAKF,QAAL,CAAcC,OAAd,CAAsBE,SAAtB,KAAoC,CADtC,EAEA;AACC;AACA,YAAG,KAAKH,QAAL,CAAcC,OAAd,CAAsBG,aAAtB,KAAwC,KAA3C,EACA;AACC,gBAAMC,YAAY,GAAG,IAAIb,MAAM,CAACc,WAAX,CAAuB;AAC3CL,YAAAA,OAAO,EAAE;AAAEG,cAAAA,aAAa,EAAE;AAAjB,aADkC;AAE3CA,YAAAA,aAAa,EAAE;AAF4B,WAAvB,CAArB;AAKA,cAAIG,MAAM,GAAG,CAAb;AACA,cAAIC,MAAM,GAAG,KAAKR,QAAL,CAAcS,UAAd,CAAyBC,QAAzB,CAAkCC,UAA/C;;AAEA,iBAAMH,MAAM,GAAG,CAAf,EACA;AACC,kBAAMI,SAAS,GAAG,IAAIC,UAAJ,CAAe,KAAKb,QAAL,CAAcS,UAAd,CAAyBC,QAAxC,EAAkDH,MAAlD,EAA4DA,MAAM,GAAG,KAAV,GAAmB,KAAKP,QAAL,CAAcS,UAAd,CAAyBC,QAAzB,CAAkCC,UAAtD,GAAqE,KAAKX,QAAL,CAAcS,UAAd,CAAyBC,QAAzB,CAAkCC,UAAlC,GAA+CJ,MAApH,GAA8H,KAAxL,CAAlB;;AACA,kBAAMO,MAAM,GAAG,IAAIC,WAAJ,CAAgBH,SAAS,CAACJ,MAA1B,CAAf;;AACA,kBAAMQ,KAAK,GAAG,IAAIH,UAAJ,CAAeC,MAAf,CAAd;;AAEA,iBAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,KAAK,CAACR,MAAzB,EAAiCS,CAAC,EAAlC,EACCD,KAAK,CAACC,CAAD,CAAL,GAAWL,SAAS,CAACK,CAAD,CAApB;;AAEDZ,YAAAA,YAAY,CAACI,UAAb,CAAwBS,KAAxB,CAA8BC,IAA9B,CAAmC,IAAI3B,MAAM,CAACc,WAAX,CAAuB;AAAEI,cAAAA,QAAQ,EAAEI;AAAZ,aAAvB,CAAnC;AAEAN,YAAAA,MAAM,IAAII,SAAS,CAACJ,MAApB;AACAD,YAAAA,MAAM,IAAIK,SAAS,CAACJ,MAApB;AACA;;AAED,eAAKR,QAAL,GAAgBK,YAAhB;AACA,SA5BF,CA6BC;;AACA;AACD,KAhDF,CAiDC;AAEA;;;AACA,QAAG,YAAYR,UAAf,EACC,KAAKuB,UAAL,CAAgBvB,UAAU,CAACwB,MAA3B,EArDF,CAsDC;AACA,GA/DF,CAgEC;;AACA;;;;;;AAIA,SAAOtB,aAAP,CAAqBuB,UAArB,EACA;AACC,YAAOA,UAAP;AAEC,WAAK,cAAL;AACC,eAAO,EAAP;;AACD,WAAK,UAAL;AACC,eAAO,IAAI9B,MAAM,CAACc,WAAX,EAAP;;AACD;AACC,cAAM,IAAIiB,KAAJ,CAAW,0DAAyDD,UAAW,EAA/E,CAAN;AAPF;AASA,GAhFF,CAiFC;;AACA;;;;;;;AAKA,SAAOE,kBAAP,CAA0BF,UAA1B,EAAsCG,WAAtC,EACA;AACC,YAAOH,UAAP;AAEC,WAAK,cAAL;AACC,eAAQG,WAAW,KAAK,EAAxB;;AACD,WAAK,UAAL;AACC;AACC,cAAIA,WAAW,CAACxB,OAAZ,CAAoBC,QAApB,KAAiC,CAAlC,IAAyCuB,WAAW,CAACxB,OAAZ,CAAoBE,SAApB,KAAkC,CAA9E,EACC,OAAQsB,WAAW,CAACC,OAAZ,CAAoB/B,uBAAuB,CAACI,aAAxB,CAAsC,UAAtC,CAApB,CAAR;AAED,iBAAO,KAAP;AACA;;AACF;AACC,cAAM,IAAIwB,KAAJ,CAAW,0DAAyDD,UAAW,EAA/E,CAAN;AAZF;AAcA,GAvGF,CAwGC;;AACA;;;;;;;;;;;;;;;AAaA,SAAOD,MAAP,CAAcxB,UAAU,GAAG,EAA3B,EACA;AACC;;;;;;;AAOA,UAAM8B,KAAK,GAAGlC,kBAAkB,CAACI,UAAD,EAAa,OAAb,EAAsB,EAAtB,CAAhC;AAEA,WAAQ,IAAIL,MAAM,CAACoC,QAAX,CAAoB;AAC3BC,MAAAA,IAAI,EAAGF,KAAK,CAACG,SAAN,IAAmB,EADC;AAE3BZ,MAAAA,KAAK,EAAE,CACN,IAAI1B,MAAM,CAACuC,gBAAX,CAA4B;AAAEF,QAAAA,IAAI,EAAGF,KAAK,CAAC7B,YAAN,IAAsB;AAA/B,OAA5B,CADM,EAEN,IAAIN,MAAM,CAACwC,WAAX,CAAuB;AACtBC,QAAAA,QAAQ,EAAE,IADY;AAEtBhC,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AACK;AACbC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAFa;AAMtBe,QAAAA,KAAK,EAAE,CACN,IAAI1B,MAAM,CAAC0C,GAAX,CAAe;AAAEL,UAAAA,IAAI,EAAGF,KAAK,CAAC3B,QAAN,IAAkB;AAA3B,SAAf,CADM,CAC2C;AAD3C;AANe,OAAvB,CAFM;AAFoB,KAApB,CAAR;AAgBA,GAjJF,CAkJC;;AACA;;;;;;AAIAoB,EAAAA,UAAU,CAACC,MAAD,EACV;AACC;AACA3B,IAAAA,UAAU,CAAC2B,MAAD,EAAS,CAClB,cADkB,EAElB,UAFkB,CAAT,CAAV,CAFD,CAMC;AAEA;;AACA,UAAMc,IAAI,GAAG3C,MAAM,CAAC4C,aAAP,CAAqBf,MAArB,EACZA,MADY,EAEZ1B,uBAAuB,CAAC0B,MAAxB,CAA+B;AAC9BM,MAAAA,KAAK,EAAE;AACN7B,QAAAA,YAAY,EAAE,cADR;AAENE,QAAAA,QAAQ,EAAE;AAFJ;AADuB,KAA/B,CAFY,CAAb;AAUA,QAAGmC,IAAI,CAACE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAId,KAAJ,CAAU,iFAAV,CAAN,CApBF,CAqBC;AAEA;;AACA,SAAKzB,YAAL,GAAoBqC,IAAI,CAACG,MAAL,CAAYxC,YAAZ,CAAyBW,UAAzB,CAAoC8B,QAApC,EAApB;AACA,QAAG,cAAcJ,IAAI,CAACG,MAAtB,EACC,KAAKtC,QAAL,GAAgBmC,IAAI,CAACG,MAAL,CAAYtC,QAA5B,CA1BF,CA2BC;AACA,GApLF,CAqLC;;AACA;;;;;;AAIAwC,EAAAA,QAAQ,GACR;AACC;AACA,UAAMC,WAAW,GAAG,EAApB;AAEAA,IAAAA,WAAW,CAACtB,IAAZ,CAAiB,IAAI3B,MAAM,CAACuC,gBAAX,CAA4B;AAAEb,MAAAA,KAAK,EAAE,KAAKpB;AAAd,KAA5B,CAAjB;;AACA,QAAG,cAAc,IAAjB,EACA;AACC,UAAGH,uBAAuB,CAAC6B,kBAAxB,CAA2C,UAA3C,EAAuD,KAAKxB,QAA5D,MAA0E,KAA7E,EACA;AACCyC,QAAAA,WAAW,CAACtB,IAAZ,CAAiB,IAAI3B,MAAM,CAACwC,WAAX,CAAuB;AACvCC,UAAAA,QAAQ,EAAE,IAD6B;AAEvChC,UAAAA,OAAO,EAAE;AACRC,YAAAA,QAAQ,EAAE,CADF;AACK;AACbC,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,WAF8B;AAMvCe,UAAAA,KAAK,EAAE,CAAC,KAAKlB,QAAN;AANgC,SAAvB,CAAjB;AAQA;AACD,KAlBF,CAmBC;AAEA;;;AACA,WAAQ,IAAIR,MAAM,CAACoC,QAAX,CAAoB;AAC3BV,MAAAA,KAAK,EAAEuB;AADoB,KAApB,CAAR,CAtBD,CAyBC;AACA,GArNF,CAsNC;;AACA;;;;;;AAIAC,EAAAA,MAAM,GACN;AACC,UAAMC,OAAO,GAAG;AACf7C,MAAAA,YAAY,EAAE,KAAKA;AADJ,KAAhB;;AAIA,QAAG,cAAc,IAAjB,EACA;AACC,UAAGH,uBAAuB,CAAC6B,kBAAxB,CAA2C,UAA3C,EAAuD,KAAKxB,QAA5D,MAA0E,KAA7E,EACC2C,OAAO,CAAC3C,QAAR,GAAmB,KAAKA,QAAL,CAAc0C,MAAd,EAAnB;AACD;;AAED,WAAOC,OAAP;AACA,GAxOF,CAyOC;;;AAzOD,C,CA2OA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EncapsulatedContentInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EncapsulatedContentInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc eContentType\r\n\t\t */\r\n\t\tthis.eContentType = getParametersValue(parameters, \"eContentType\", EncapsulatedContentInfo.defaultValues(\"eContentType\"));\r\n\r\n\t\tif(\"eContent\" in parameters)\r\n\t\t{\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @desc eContent\r\n\t\t\t */\r\n\t\t\tthis.eContent = getParametersValue(parameters, \"eContent\", EncapsulatedContentInfo.defaultValues(\"eContent\"));\r\n\t\t\tif((this.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t(this.eContent.idBlock.tagNumber === 4))\r\n\t\t\t{\r\n\t\t\t\t//region Divide OCTETSTRING value down to small pieces\r\n\t\t\t\tif(this.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst constrString = new asn1js.OctetString({\r\n\t\t\t\t\t\tidBlock: { isConstructed: true },\r\n\t\t\t\t\t\tisConstructed: true\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet offset = 0;\r\n\t\t\t\t\tlet length = this.eContent.valueBlock.valueHex.byteLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\twhile(length > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst pieceView = new Uint8Array(this.eContent.valueBlock.valueHex, offset, ((offset + 65536) > this.eContent.valueBlock.valueHex.byteLength) ? (this.eContent.valueBlock.valueHex.byteLength - offset) : 65536);\r\n\t\t\t\t\t\tconst _array = new ArrayBuffer(pieceView.length);\r\n\t\t\t\t\t\tconst _view = new Uint8Array(_array);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor(let i = 0; i < _view.length; i++)\r\n\t\t\t\t\t\t\t_view[i] = pieceView[i];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconstrString.valueBlock.value.push(new asn1js.OctetString({ valueHex: _array }));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlength -= pieceView.length;\r\n\t\t\t\t\t\toffset += pieceView.length;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.eContent = constrString;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"eContentType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"eContent\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncapsulatedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"eContentType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"eContent\":\r\n\t\t\t\t{\r\n\t\t\t\t\tif((memberValue.idBlock.tagClass === 1) && (memberValue.idBlock.tagNumber === 4))\r\n\t\t\t\t\t\treturn (memberValue.isEqual(EncapsulatedContentInfo.defaultValues(\"eContent\")));\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncapsulatedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * EncapsulatedContentInfo ::= SEQUENCE {\r\n\t *    eContentType ContentType,\r\n\t *    eContent [0] EXPLICIT OCTET STRING OPTIONAL } * Changed it to ANY, as in PKCS#7\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [type]\r\n\t\t * @property {string} [setName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.eContentType || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Any({ name: (names.eContent || \"\") }) // In order to aling this with PKCS#7 and CMS as well\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"eContentType\",\r\n\t\t\t\"eContent\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEncapsulatedContentInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\teContentType: \"eContentType\",\r\n\t\t\t\t\teContent: \"eContent\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EncapsulatedContentInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.eContentType = asn1.result.eContentType.valueBlock.toString();\r\n\t\tif(\"eContent\" in asn1.result)\r\n\t\t\tthis.eContent = asn1.result.eContent;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.eContentType }));\r\n\t\tif(\"eContent\" in this)\r\n\t\t{\r\n\t\t\tif(EncapsulatedContentInfo.compareWithDefault(\"eContent\", this.eContent) === false)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.eContent]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\teContentType: this.eContentType\r\n\t\t};\r\n\r\n\t\tif(\"eContent\" in this)\r\n\t\t{\r\n\t\t\tif(EncapsulatedContentInfo.compareWithDefault(\"eContent\", this.eContent) === false)\r\n\t\t\t\t_object.eContent = this.eContent.toJSON();\r\n\t\t}\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}