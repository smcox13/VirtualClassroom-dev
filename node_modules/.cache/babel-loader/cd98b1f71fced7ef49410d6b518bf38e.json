{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _constants = require('../constants');\n\nvar MediaSharesUtils = {};\n/**\n * parses the relevant values for mediaShares: contentId, disposition\n * @param {Object} mediaShares\n * @returns {undefined}\n */\n\nMediaSharesUtils.parse = function (mediaShares) {\n  if (mediaShares) {\n    return {\n      contentId: MediaSharesUtils.getContentId(mediaShares),\n      disposition: MediaSharesUtils.getDisposition(mediaShares)\n    };\n  }\n\n  return null;\n};\n/**\n * get the previous and current mediaShares values parsed, as well as the boolean updates\n * @param {Object} oldShare\n * @param {Object} newShare\n * @returns {Object}\n * previous: {Object} old share, current: {Object} new share,\n */\n\n\nMediaSharesUtils.getMediaShares = function (oldShare, newShare) {\n  var previous = oldShare && MediaSharesUtils.parse(oldShare);\n  var current = newShare && MediaSharesUtils.parse(newShare);\n  return {\n    previous: previous,\n    current: current\n  };\n};\n/**\n * get the floor disposition (released, granted)\n * @param {Object} mediaShares\n * @returns {Boolean} disposition\n */\n\n\nMediaSharesUtils.getDisposition = function (mediaShares) {\n  var contentFloor = MediaSharesUtils.extractContentFloor(mediaShares);\n  return contentFloor ? contentFloor.disposition : null;\n};\n/**\n * extract the content property from media shares\n * @param {Object} mediaShares\n * @returns {Object}\n */\n\n\nMediaSharesUtils.extractContent = function (mediaShares) {\n  if (!mediaShares || !mediaShares.length) {\n    return null;\n  }\n\n  return mediaShares.find(function (share) {\n    return share.name === _constants.CONTENT;\n  }) || null;\n};\n/**\n * extract the floor property from content object\n * @param {Object} content\n * @returns {Object}\n */\n\n\nMediaSharesUtils.extractFloor = function (content) {\n  if (!content) {\n    return null;\n  }\n\n  return content.floor;\n};\n/**\n * extract the content's floor from media shares\n * @param {Object} mediaShares\n * @returns {Object}\n */\n\n\nMediaSharesUtils.extractContentFloor = function (mediaShares) {\n  var content = MediaSharesUtils.extractContent(mediaShares);\n  return MediaSharesUtils.extractFloor(content);\n};\n/**\n * get who is sharing from media shares\n * @param {Object} mediaShares\n * @returns {Object}\n */\n\n\nMediaSharesUtils.getContentId = function (mediaShares) {\n  var contentFloor = MediaSharesUtils.extractContentFloor(mediaShares);\n\n  if (!contentFloor || !contentFloor.beneficiary) {\n    return null;\n  }\n\n  return contentFloor.beneficiary.id;\n};\n\nexports.default = MediaSharesUtils;","map":{"version":3,"sources":["mediaSharesUtils.js"],"names":["MediaSharesUtils","contentId","disposition","previous","oldShare","current","newShare","contentFloor","mediaShares","share","CONTENT","content"],"mappings":";;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAEA,IAAMA,gBAAAA,GAAN,EAAA;AAEA;;;;;;AAKAA,gBAAAA,CAAAA,KAAAA,GAAyB,UAAA,WAAA,EAAiB;AACxC,MAAA,WAAA,EAAiB;AACf,WAAO;AACLC,MAAAA,SAAAA,EAAWD,gBAAAA,CAAAA,YAAAA,CADN,WACMA,CADN;AAELE,MAAAA,WAAAA,EAAaF,gBAAAA,CAAAA,cAAAA,CAAAA,WAAAA;AAFR,KAAP;AAID;;AAED,SAAA,IAAA;AARFA,CAAAA;AAWA;;;;;;;;;AAOAA,gBAAAA,CAAAA,cAAAA,GAAkC,UAAA,QAAA,EAAA,QAAA,EAAwB;AACxD,MAAMG,QAAAA,GAAWC,QAAAA,IAAYJ,gBAAAA,CAAAA,KAAAA,CAA7B,QAA6BA,CAA7B;AACA,MAAMK,OAAAA,GAAUC,QAAAA,IAAYN,gBAAAA,CAAAA,KAAAA,CAA5B,QAA4BA,CAA5B;AAEA,SAAO;AACLG,IAAAA,QAAAA,EADK,QAAA;AAELE,IAAAA,OAAAA,EAAAA;AAFK,GAAP;AAJFL,CAAAA;AAUA;;;;;;;AAKAA,gBAAAA,CAAAA,cAAAA,GAAkC,UAAA,WAAA,EAAiB;AACjD,MAAMO,YAAAA,GAAeP,gBAAAA,CAAAA,mBAAAA,CAArB,WAAqBA,CAArB;AAEA,SAAOO,YAAAA,GAAeA,YAAAA,CAAfA,WAAAA,GAAP,IAAA;AAHFP,CAAAA;AAMA;;;;;;;AAKAA,gBAAAA,CAAAA,cAAAA,GAAkC,UAAA,WAAA,EAAiB;AACjD,MAAI,CAAA,WAAA,IAAgB,CAACQ,WAAAA,CAArB,MAAA,EAAyC;AACvC,WAAA,IAAA;AACD;;AAED,SAAO,WAAA,CAAA,IAAA,CAAiB,UAAA,KAAA,EAAA;AAAA,WAAWC,KAAAA,CAAAA,IAAAA,KAAeC,UAAAA,CAA1B,OAAA;AAAjB,GAAA,KAAP,IAAA;AALFV,CAAAA;AAQA;;;;;;;AAKAA,gBAAAA,CAAAA,YAAAA,GAAgC,UAAA,OAAA,EAAa;AAC3C,MAAI,CAAJ,OAAA,EAAc;AACZ,WAAA,IAAA;AACD;;AAED,SAAOW,OAAAA,CAAP,KAAA;AALFX,CAAAA;AAQA;;;;;;;AAKAA,gBAAAA,CAAAA,mBAAAA,GAAuC,UAAA,WAAA,EAAiB;AACtD,MAAMW,OAAAA,GAAUX,gBAAAA,CAAAA,cAAAA,CAAhB,WAAgBA,CAAhB;AAEA,SAAOA,gBAAAA,CAAAA,YAAAA,CAAP,OAAOA,CAAP;AAHFA,CAAAA;AAMA;;;;;;;AAKAA,gBAAAA,CAAAA,YAAAA,GAAgC,UAAA,WAAA,EAAiB;AAC/C,MAAMO,YAAAA,GAAeP,gBAAAA,CAAAA,mBAAAA,CAArB,WAAqBA,CAArB;;AAEA,MAAI,CAAA,YAAA,IAAiB,CAACO,YAAAA,CAAtB,WAAA,EAAgD;AAC9C,WAAA,IAAA;AACD;;AAED,SAAOA,YAAAA,CAAAA,WAAAA,CAAP,EAAA;AAPFP,CAAAA;;kBAUeA,gB","sourcesContent":["import {CONTENT} from '../constants';\n\nconst MediaSharesUtils = {};\n\n/**\n * parses the relevant values for mediaShares: contentId, disposition\n * @param {Object} mediaShares\n * @returns {undefined}\n */\nMediaSharesUtils.parse = (mediaShares) => {\n  if (mediaShares) {\n    return {\n      contentId: MediaSharesUtils.getContentId(mediaShares),\n      disposition: MediaSharesUtils.getDisposition(mediaShares)\n    };\n  }\n\n  return null;\n};\n\n/**\n * get the previous and current mediaShares values parsed, as well as the boolean updates\n * @param {Object} oldShare\n * @param {Object} newShare\n * @returns {Object}\n * previous: {Object} old share, current: {Object} new share,\n */\nMediaSharesUtils.getMediaShares = (oldShare, newShare) => {\n  const previous = oldShare && MediaSharesUtils.parse(oldShare);\n  const current = newShare && MediaSharesUtils.parse(newShare);\n\n  return {\n    previous,\n    current\n  };\n};\n\n/**\n * get the floor disposition (released, granted)\n * @param {Object} mediaShares\n * @returns {Boolean} disposition\n */\nMediaSharesUtils.getDisposition = (mediaShares) => {\n  const contentFloor = MediaSharesUtils.extractContentFloor(mediaShares);\n\n  return contentFloor ? contentFloor.disposition : null;\n};\n\n/**\n * extract the content property from media shares\n * @param {Object} mediaShares\n * @returns {Object}\n */\nMediaSharesUtils.extractContent = (mediaShares) => {\n  if (!mediaShares || !mediaShares.length) {\n    return null;\n  }\n\n  return mediaShares.find((share) => share.name === CONTENT) || null;\n};\n\n/**\n * extract the floor property from content object\n * @param {Object} content\n * @returns {Object}\n */\nMediaSharesUtils.extractFloor = (content) => {\n  if (!content) {\n    return null;\n  }\n\n  return content.floor;\n};\n\n/**\n * extract the content's floor from media shares\n * @param {Object} mediaShares\n * @returns {Object}\n */\nMediaSharesUtils.extractContentFloor = (mediaShares) => {\n  const content = MediaSharesUtils.extractContent(mediaShares);\n\n  return MediaSharesUtils.extractFloor(content);\n};\n\n/**\n * get who is sharing from media shares\n * @param {Object} mediaShares\n * @returns {Object}\n */\nMediaSharesUtils.getContentId = (mediaShares) => {\n  const contentFloor = MediaSharesUtils.extractContentFloor(mediaShares);\n\n  if (!contentFloor || !contentFloor.beneficiary) {\n    return null;\n  }\n\n  return contentFloor.beneficiary.id;\n};\n\nexport default MediaSharesUtils;\n"]},"metadata":{},"sourceType":"script"}