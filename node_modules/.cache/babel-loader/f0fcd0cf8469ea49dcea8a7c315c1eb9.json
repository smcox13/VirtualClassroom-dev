{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralName from \"./GeneralName.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nexport default class AltName {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for AltName class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Array.<GeneralName>}\r\n     * @desc Array of alternative names in GeneralName type\r\n     */\n    this.altNames = getParametersValue(parameters, \"altNames\", AltName.defaultValues(\"altNames\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"altNames\":\n        return [];\n\n      default:\n        throw new Error(`Invalid member name for AltName class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * AltName ::= GeneralNames\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [altNames]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Repeated({\n        name: names.altNames || \"\",\n        value: GeneralName.schema()\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"altNames\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, AltName.schema({\n      names: {\n        altNames: \"altNames\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AltName\"); //endregion\n    //region Get internal properties from parsed schema\n\n    if (\"altNames\" in asn1.result) this.altNames = Array.from(asn1.result.altNames, element => new GeneralName({\n      schema: element\n    })); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: Array.from(this.altNames, element => element.toSchema())\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      altNames: Array.from(this.altNames, element => element.toJSON())\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/AltName.js"],"names":["asn1js","getParametersValue","clearProps","GeneralName","AltName","constructor","parameters","altNames","defaultValues","fromSchema","schema","memberName","Error","names","Sequence","name","blockName","value","Repeated","asn1","compareSchema","verified","result","Array","from","element","toSchema","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AltName\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AltName class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<GeneralName>}\r\n\t\t * @desc Array of alternative names in GeneralName type\r\n\t\t */\r\n\t\tthis.altNames = getParametersValue(parameters, \"altNames\", AltName.defaultValues(\"altNames\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"altNames\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AltName class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AltName ::= GeneralNames\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [altNames]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.altNames || \"\"),\r\n\t\t\t\t\tvalue: GeneralName.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"altNames\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAltName.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\taltNames: \"altNames\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AltName\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"altNames\" in asn1.result)\r\n\t\t\tthis.altNames = Array.from(asn1.result.altNames, element => new GeneralName({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.altNames, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\taltNames: Array.from(this.altNames, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}