{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.levels = undefined;\n\nvar _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _deleteProperty = require('babel-runtime/core-js/reflect/delete-property');\n\nvar _deleteProperty2 = _interopRequireDefault(_deleteProperty);\n\nvar _entries = require('babel-runtime/core-js/object/entries');\n\nvar _entries2 = _interopRequireDefault(_entries);\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _isString2 = require('lodash/isString');\n\nvar _isString3 = _interopRequireDefault(_isString2);\n\nvar _isObject2 = require('lodash/isObject');\n\nvar _isObject3 = _interopRequireDefault(_isObject2);\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nvar _has2 = require('lodash/has');\n\nvar _has3 = _interopRequireDefault(_has2);\n\nvar _cloneDeep2 = require('lodash/cloneDeep');\n\nvar _cloneDeep3 = _interopRequireDefault(_cloneDeep2);\n\nvar _common = require('@webex/common');\n\nvar _webexCore = require('@webex/webex-core');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar precedence = {\n  silent: 0,\n  error: 1,\n  warn: 2,\n  log: 3,\n  info: 4,\n  debug: 5,\n  trace: 6\n};\nvar levels = exports.levels = (0, _keys2.default)(precedence).filter(function (level) {\n  return level !== 'silent';\n});\nvar fallbacks = {\n  error: ['log'],\n  warn: ['error', 'log'],\n  info: ['log'],\n  debug: ['info', 'log'],\n  trace: ['debug', 'info', 'log']\n};\nvar authTokenKeyPattern = /[Aa]uthorization/;\n/**\n * Recursively strips \"authorization\" fields from the specified object\n * @param {Object} object\n * @private\n * @returns {Object}\n */\n\nfunction walkAndFilter(object) {\n  if ((0, _isArray3.default)(object)) {\n    return object.map(walkAndFilter);\n  }\n\n  if (!(0, _isObject3.default)(object)) {\n    if ((0, _isString3.default)(object)) {\n      if (_common.patterns.email.test(object)) {\n        return '-- REDACTED --';\n      }\n    }\n\n    return object;\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = (0, _getIterator3.default)((0, _entries2.default)(object)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _ref = _step.value;\n\n      var _ref2 = (0, _slicedToArray3.default)(_ref, 2);\n\n      var key = _ref2[0];\n      var value = _ref2[1];\n\n      if (authTokenKeyPattern.test(key)) {\n        (0, _deleteProperty2.default)(object, key);\n      } else {\n        object[key] = walkAndFilter(value);\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return object;\n}\n/**\n * @class\n */\n\n\nvar Logger = _webexCore.WebexPlugin.extend({\n  namespace: 'Logger',\n  derived: {\n    level: {\n      cache: false,\n      fn: function fn() {\n        return this.getCurrentLevel();\n      }\n    }\n  },\n  session: {\n    buffer: {\n      type: 'array',\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n\n  /**\n   * Ensures auth headers don't get printed in logs\n   * @param {Array<mixed>} args\n   * @private\n   * @memberof Logger\n   * @returns {Array<mixed>}\n   */\n  filter: function filter() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return args.map(function (arg) {\n      // WebexHttpError already ensures auth tokens don't get printed, so, no\n      // need to alter it here.\n      if (arg instanceof Error) {\n        // karma logs won't print subclassed errors correctly, so we need\n        // explicitly call their tostring methods.\n        if (process.env.NODE_ENV === 'test' && _common.inBrowser) {\n          var ret = arg.toString();\n          ret += 'BEGIN STACK';\n          ret += arg.stack;\n          ret += 'END STACK';\n          return ret;\n        }\n\n        return arg;\n      }\n\n      arg = (0, _cloneDeep3.default)(arg);\n      return walkAndFilter(arg);\n    });\n  },\n\n  /**\n   * Determines if the current level allows logs at the specified level to be\n   * printed\n   * @param {string} level\n   * @private\n   * @memberof Logger\n   * @returns {boolean}\n   */\n  shouldPrint: function shouldPrint(level) {\n    return precedence[level] <= precedence[this.getCurrentLevel()];\n  },\n\n  /**\n   * Determines if the current level allows logs at the specified level to be\n   * put into the log buffer. We're configuring it omit trace and debug logs\n   * because there are *a lot* of debug logs that really don't provide value at\n   * runtime (they're helpful for debugging locally, but really just pollute the\n   * uploaded logs and push useful info out).\n   * @param {string} level\n   * @private\n   * @memberof Logger\n   * @returns {boolean}\n   */\n  shouldBuffer: function shouldBuffer(level) {\n    return precedence[level] <= precedence.info;\n  },\n\n  /**\n   * Indicates the current log level based on env vars, feature toggles, and\n   * user type.\n   * @instance\n   * @memberof Logger\n   * @private\n   * @memberof Logger\n   * @returns {string}\n   */\n  // eslint-disable-next-line complexity\n  getCurrentLevel: function getCurrentLevel() {\n    // If a level has been explicitly set via config, alway use it.\n    if (this.config.level) {\n      return this.config.level;\n    }\n\n    if (levels.includes(process.env.WEBEX_LOG_LEVEL)) {\n      return process.env.WEBEX_LOG_LEVEL;\n    } // Always use debug-level logging in test mode;\n\n\n    if (process.env.NODE_ENV === 'test') {\n      return 'trace';\n    } // Use server-side-feature toggles to configure log levels\n\n\n    var level = this.webex.internal.device && this.webex.internal.device.features.developer.get('log-level');\n\n    if (level) {\n      if (levels.includes(level)) {\n        return level;\n      }\n    }\n\n    return 'error';\n  },\n  version: '1.80.172'\n});\n\nlevels.forEach(function (level) {\n  var impls = fallbacks[level];\n  var impl = level;\n\n  if (impls) {\n    impls = impls.slice(); // eslint-disable-next-line no-console\n\n    while (!console[impl]) {\n      impl = impls.pop();\n    }\n  } // Much of the complexity in the following function is due to a test-mode-only\n  // helper\n  // eslint-disable-next-line complexity\n\n\n  Logger.prototype[level] = function wrappedConsoleMethod() {\n    try {\n      var shouldPrint = this.shouldPrint(level);\n      var shouldBuffer = this.shouldBuffer(level);\n\n      if (!shouldBuffer && !shouldPrint) {\n        return;\n      }\n\n      var filtered = this.filter.apply(this, arguments);\n      var stringified = filtered.map(function (item) {\n        if (item instanceof _webexCore.WebexHttpError) {\n          return item.toString();\n        }\n\n        return item;\n      });\n\n      if (shouldPrint) {\n        var _console; // when logging an object in browsers, we tend to get a dynamic\n        // reference, thus going back to look at the logged value doesn't\n        // necessarily show the state at log time, thus we print the stringified\n        // value.\n\n\n        var toPrint = _common.inBrowser ? stringified : filtered;\n        /* istanbul ignore if */\n\n        if (process.env.NODE_ENV === 'test' && (0, _has3.default)(this, 'webex.internal.device.url')) {\n          toPrint.unshift(this.webex.internal.device.url.slice(-3));\n        } // eslint-disable-next-line no-console\n\n\n        (_console = console)[impl].apply(_console, (0, _toConsumableArray3.default)(toPrint));\n      }\n\n      if (shouldBuffer) {\n        stringified.unshift(Date.now());\n        this.buffer.push(stringified);\n\n        if (this.buffer.length > this.config.historyLength) {\n          this.buffer.shift();\n        }\n      }\n    } catch (reason) {\n      /* istanbul ignore next */\n      // eslint-disable-next-line no-console\n      console.warn('failed to execute Logger#' + level, reason);\n    }\n  };\n});\nexports.default = Logger;","map":{"version":3,"sources":["logger.js"],"names":["precedence","silent","error","warn","log","info","debug","trace","levels","level","fallbacks","authTokenKeyPattern","object","patterns","key","value","walkAndFilter","Logger","namespace","derived","cache","fn","session","buffer","type","default","filter","args","arg","process","inBrowser","ret","shouldPrint","shouldBuffer","getCurrentLevel","impls","impl","console","filtered","stringified","item","WebexHttpError","toPrint","Date"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {inBrowser, patterns} from '@webex/common';\n\nimport {\n  WebexHttpError,\n  WebexPlugin\n} from '@webex/webex-core';\n\nimport {\n  cloneDeep,\n  has,\n  isArray,\n  isObject,\n  isString\n} from 'lodash';\n\nconst precedence = {\n  silent: 0,\n  error: 1,\n  warn: 2,\n  log: 3,\n  info: 4,\n  debug: 5,\n  trace: 6\n};\n\nexport const levels = Object.keys(precedence).filter((level) => level !== 'silent');\n\nconst fallbacks = {\n  error: ['log'],\n  warn: ['error', 'log'],\n  info: ['log'],\n  debug: ['info', 'log'],\n  trace: ['debug', 'info', 'log']\n};\n\nconst authTokenKeyPattern = /[Aa]uthorization/;\n\n/**\n * Recursively strips \"authorization\" fields from the specified object\n * @param {Object} object\n * @private\n * @returns {Object}\n */\nfunction walkAndFilter(object) {\n  if (isArray(object)) {\n    return object.map(walkAndFilter);\n  }\n  if (!isObject(object)) {\n    if (isString(object)) {\n      if (patterns.email.test(object)) {\n        return '-- REDACTED --';\n      }\n    }\n\n    return object;\n  }\n\n  for (const [key, value] of Object.entries(object)) {\n    if (authTokenKeyPattern.test(key)) {\n      Reflect.deleteProperty(object, key);\n    }\n    else {\n      object[key] = walkAndFilter(value);\n    }\n  }\n\n  return object;\n}\n\n/**\n * @class\n */\nconst Logger = WebexPlugin.extend({\n  namespace: 'Logger',\n\n  derived: {\n    level: {\n      cache: false,\n      fn() {\n        return this.getCurrentLevel();\n      }\n    }\n  },\n  session: {\n    buffer: {\n      type: 'array',\n      default() {\n        return [];\n      }\n    }\n  },\n\n  /**\n   * Ensures auth headers don't get printed in logs\n   * @param {Array<mixed>} args\n   * @private\n   * @memberof Logger\n   * @returns {Array<mixed>}\n   */\n  filter(...args) {\n    return args.map((arg) => {\n      // WebexHttpError already ensures auth tokens don't get printed, so, no\n      // need to alter it here.\n      if (arg instanceof Error) {\n        // karma logs won't print subclassed errors correctly, so we need\n        // explicitly call their tostring methods.\n        if (process.env.NODE_ENV === 'test' && inBrowser) {\n          let ret = arg.toString();\n\n          ret += 'BEGIN STACK';\n          ret += arg.stack;\n          ret += 'END STACK';\n\n          return ret;\n        }\n\n        return arg;\n      }\n\n      arg = cloneDeep(arg);\n\n      return walkAndFilter(arg);\n    });\n  },\n\n  /**\n   * Determines if the current level allows logs at the specified level to be\n   * printed\n   * @param {string} level\n   * @private\n   * @memberof Logger\n   * @returns {boolean}\n   */\n  shouldPrint(level) {\n    return precedence[level] <= precedence[this.getCurrentLevel()];\n  },\n\n  /**\n   * Determines if the current level allows logs at the specified level to be\n   * put into the log buffer. We're configuring it omit trace and debug logs\n   * because there are *a lot* of debug logs that really don't provide value at\n   * runtime (they're helpful for debugging locally, but really just pollute the\n   * uploaded logs and push useful info out).\n   * @param {string} level\n   * @private\n   * @memberof Logger\n   * @returns {boolean}\n   */\n  shouldBuffer(level) {\n    return precedence[level] <= precedence.info;\n  },\n\n  /**\n   * Indicates the current log level based on env vars, feature toggles, and\n   * user type.\n   * @instance\n   * @memberof Logger\n   * @private\n   * @memberof Logger\n   * @returns {string}\n   */\n  // eslint-disable-next-line complexity\n  getCurrentLevel() {\n    // If a level has been explicitly set via config, alway use it.\n    if (this.config.level) {\n      return this.config.level;\n    }\n\n    if (levels.includes(process.env.WEBEX_LOG_LEVEL)) {\n      return process.env.WEBEX_LOG_LEVEL;\n    }\n\n    // Always use debug-level logging in test mode;\n    if (process.env.NODE_ENV === 'test') {\n      return 'trace';\n    }\n\n    // Use server-side-feature toggles to configure log levels\n    const level = this.webex.internal.device && this.webex.internal.device.features.developer.get('log-level');\n\n    if (level) {\n      if (levels.includes(level)) {\n        return level;\n      }\n    }\n\n    return 'error';\n  }\n});\n\nlevels.forEach((level) => {\n  let impls = fallbacks[level];\n  let impl = level;\n\n  if (impls) {\n    impls = impls.slice();\n    // eslint-disable-next-line no-console\n    while (!console[impl]) {\n      impl = impls.pop();\n    }\n  }\n\n  // Much of the complexity in the following function is due to a test-mode-only\n  // helper\n  // eslint-disable-next-line complexity\n  Logger.prototype[level] = function wrappedConsoleMethod(...args) {\n    try {\n      const shouldPrint = this.shouldPrint(level);\n      const shouldBuffer = this.shouldBuffer(level);\n\n      if (!shouldBuffer && !shouldPrint) {\n        return;\n      }\n\n      const filtered = this.filter(...args);\n      const stringified = filtered.map((item) => {\n        if (item instanceof WebexHttpError) {\n          return item.toString();\n        }\n\n        return item;\n      });\n\n      if (shouldPrint) {\n        // when logging an object in browsers, we tend to get a dynamic\n        // reference, thus going back to look at the logged value doesn't\n        // necessarily show the state at log time, thus we print the stringified\n        // value.\n        const toPrint = inBrowser ? stringified : filtered;\n\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV === 'test' && has(this, 'webex.internal.device.url')) {\n          toPrint.unshift(this.webex.internal.device.url.slice(-3));\n        }\n        // eslint-disable-next-line no-console\n        console[impl](...toPrint);\n      }\n\n      if (shouldBuffer) {\n        stringified.unshift(Date.now());\n        this.buffer.push(stringified);\n        if (this.buffer.length > this.config.historyLength) {\n          this.buffer.shift();\n        }\n      }\n    }\n    catch (reason) {\n      /* istanbul ignore next */\n      // eslint-disable-next-line no-console\n      console.warn(`failed to execute Logger#${level}`, reason);\n    }\n  };\n});\n\nexport default Logger;\n"]},"metadata":{},"sourceType":"script"}