{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _loggerProxy = require('../common/logs/logger-proxy');\n\nvar _loggerProxy2 = _interopRequireDefault(_loggerProxy);\n\nvar _constants = require('../constants');\n\nvar _reconnection = require('../common/errors/reconnection');\n\nvar _reconnection2 = _interopRequireDefault(_reconnection);\n\nvar _peerConnectionManager = require('../peer-connection-manager');\n\nvar _peerConnectionManager2 = _interopRequireDefault(_peerConnectionManager);\n\nvar _media = require('../media');\n\nvar _media2 = _interopRequireDefault(_media);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @export\n * @class ReconnectionManager\n*/\n\n\nvar ReconnectionManager = function () {\n  /**\n   * @param {Meeting} meeting\n   */\n  function ReconnectionManager(meeting) {\n    (0, _classCallCheck3.default)(this, ReconnectionManager);\n    /**\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof ReconnectionManager\n    */\n\n    this.status = _constants.RECONNECTION.STATE.DEFAULT_STATUS;\n    /**\n     * @instance\n     * @type {Number}\n     * @private\n     * @memberof ReconnectionManager\n    */\n\n    this.tryCount = _constants.RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n    /**\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof ReconnectionManager\n    */\n\n    this.webex = meeting.webex;\n    this.configure(meeting);\n  }\n  /**\n   * @param {Meeting} meeting\n   * @returns {undefined}\n   * @public\n   * @memberof ReconnectionManager\n   */\n\n\n  (0, _createClass3.default)(ReconnectionManager, [{\n    key: 'configure',\n    value: function configure(meeting) {\n      this.backOff = meeting.config.reconnection.retry.backOff.start;\n    }\n    /**\n     * @returns {undefined}\n     * @public\n     * @memberof ReconnectionManager\n     */\n\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.status = _constants.RECONNECTION.STATE.DEFAULT_STATUS;\n      this.tryCount = _constants.RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n    }\n    /**\n     * @param {Meeting} meeting\n     * @returns {Boolean}\n     * @returns {ReconnectionError}\n     * @private\n     * @memberof ReconnectionManager\n     */\n\n  }, {\n    key: 'validate',\n    value: function validate(meeting) {\n      if (meeting.config.reconnection.enabled) {\n        if (meeting.locusInfo && meeting.locusInfo.fullState && meeting.locusInfo.fullState.state === _constants._ACTIVE_ && meeting.locusInfo.fullState.active) {\n          if (meeting.webex.internal.mercury.connected) {\n            if (this.status !== _constants.RECONNECTION.STATE.DEFAULT_STATUS || this.status !== _constants.RECONNECTION.STATE.COMPLETE) {\n              return true;\n            }\n\n            return new _reconnection2.default('Multiple reconnections cannot occur concurrently');\n          }\n\n          return new _reconnection2.default('mercury is not connected, cannot reconnect');\n        }\n\n        return new _reconnection2.default('locus server for this call is not active, cannot reconnect');\n      }\n\n      return new _reconnection2.default('Reconnection is not enabled.');\n    }\n    /**\n     * Initiates a media reconnect for the active meeting\n     * @param {Meeting} meeting\n     * @returns {Promise}\n     * @public\n     * @memberof ReconnectionManager\n     */\n\n  }, {\n    key: 'reconnect',\n    value: function reconnect(meeting) {\n      var validatedReconnect = this.validate(meeting);\n      return validatedReconnect === true ? this.execute(meeting) : _promise2.default.reject(validatedReconnect);\n    }\n    /**\n     * @param {Meeting} meeting\n     * @returns {Promise}\n     * @private\n     * @memberof ReconnectionManager\n     */\n\n  }, {\n    key: 'execute',\n    value: function execute(meeting) {\n      var _this = this;\n\n      this.status = _constants.RECONNECTION.STATE.IN_PROGRESS;\n      return this.media(meeting).then(function (media) {\n        _loggerProxy2.default.logger.log('ReconnectionManager->execute#Media reestablished at: ' + new Date());\n\n        _this.status = _constants.RECONNECTION.STATE.COMPLETE;\n        return _promise2.default.resolve(media);\n      }).catch(function (err) {\n        // eslint-disable-line\n        _loggerProxy2.default.logger.error('ReconnectionManager->execute#Media reestablishment failed at: ' + new Date());\n\n        if (_this.tryCount > meeting.config.reconnection.retry.times) {\n          _this.status = _constants.RECONNECTION.STATE.FAILURE;\n          return _promise2.default.reject(new _reconnection2.default(err));\n        } // exponential backoff and retry logic\n\n\n        setTimeout(function () {\n          return _this.reconnect(meeting);\n        }, _this.backOff *= meeting.config.reconnection.retry.backOff.rate);\n      });\n    }\n    /**\n     * @param {Meeting} meeting\n     * @param {boolean} [recreate] default false to re attach media if true\n     * @returns {Promise}\n     * @private\n     * @memberof ReconnectionManager\n     */\n\n  }, {\n    key: 'reconnectMedia',\n    value: function reconnectMedia(meeting) {\n      var recreate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var promise = null;\n\n      if (recreate) {\n        promise = _media2.default.attachMedia(meeting.mediaProperties).then(function (peerConnection) {\n          return meeting.setRemoteStream(peerConnection);\n        });\n      } else {\n        promise = _media2.default.reconnectMedia(meeting.mediaProperties.peerConnection, meeting.meetingId);\n      }\n\n      return _promise2.default.resolve(promise).then(function () {\n        return meeting.roap.sendRoapMediaRequest({\n          sdp: meeting.mediaProperties.peerConnection.sdp,\n          roapSeq: meeting.roapSeq,\n          meeting: meeting // or can pass meeting ID\n\n        });\n      });\n    }\n    /**\n     * @param {Meeting} meeting\n     * @returns {Promise} see #Meeting.addMedia\n     * @private\n     * @memberof ReconnectionManager\n     */\n\n  }, {\n    key: 'media',\n    value: function media(meeting) {\n      this.tryCount += 1;\n\n      _loggerProxy2.default.logger.log('Reconnection->media#Begin reestablishment of media at ' + new Date()); // TODO: chekc peerconnection status\n      // create an offer\n\n\n      return this.reconnectMedia(meeting).then(function (media) {\n        return _promise2.default.resolve(media);\n      }).catch(function (err) {\n        _loggerProxy2.default.logger.warn('Reconnection->media#Media could not reuse peer connection, failed with ' + err); // TODO: test getting to this scenario\n\n\n        ReconnectionManager.cleanup(meeting);\n        meeting.mediaProperties.reInitiatePeerconnection();\n        return meeting.reconnectMedia(true).catch(function (error) {\n          _loggerProxy2.default.logger.error('ReconnectionManager->media#Error reconnecting , error: ' + error);\n        });\n      });\n    }\n    /**\n     * @param {Meeting} meeting\n     * @returns {undefined}\n     * @private\n     * @memberof ReconnectionManager\n     */\n\n  }], [{\n    key: 'cleanup',\n    value: function cleanup(meeting) {\n      // close pcs, unset to null and reuse the streams with new pcs\n      _peerConnectionManager2.default.close(meeting.mediaProperties.peerConnection);\n\n      meeting.mediaProperties.unsetPeerConnection();\n    }\n  }]);\n  return ReconnectionManager;\n}();\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nexports.default = ReconnectionManager;","map":{"version":3,"sources":["index.js"],"names":["ReconnectionManager","RECONNECTION","meeting","_ACTIVE_","ReconnectionError","validatedReconnect","LoggerProxy","setTimeout","recreate","promise","Media","sdp","roapSeq","PeerConnectionManager"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {_ACTIVE_, RECONNECTION} from '../constants';\nimport ReconnectionError from '../common/errors/reconnection';\nimport PeerConnectionManager from '../peer-connection-manager';\nimport Media from '../media';\n\n/**\n * @export\n * @class ReconnectionManager\n*/\nexport default class ReconnectionManager {\n  /**\n   * @param {Meeting} meeting\n   */\n  constructor(meeting) {\n    /**\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof ReconnectionManager\n    */\n    this.status = RECONNECTION.STATE.DEFAULT_STATUS;\n    /**\n     * @instance\n     * @type {Number}\n     * @private\n     * @memberof ReconnectionManager\n    */\n    this.tryCount = RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n    /**\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof ReconnectionManager\n    */\n    this.webex = meeting.webex;\n    this.configure(meeting);\n  }\n\n  /**\n   * @param {Meeting} meeting\n   * @returns {undefined}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  configure(meeting) {\n    this.backOff = meeting.config.reconnection.retry.backOff.start;\n  }\n\n  /**\n   * @returns {undefined}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  reset() {\n    this.status = RECONNECTION.STATE.DEFAULT_STATUS;\n    this.tryCount = RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n  }\n\n  /**\n   * @param {Meeting} meeting\n   * @returns {Boolean}\n   * @returns {ReconnectionError}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  validate(meeting) {\n    if (meeting.config.reconnection.enabled) {\n      if (\n        meeting.locusInfo &&\n          meeting.locusInfo.fullState &&\n          (\n            meeting.locusInfo.fullState.state === _ACTIVE_ &&\n            meeting.locusInfo.fullState.active\n          )\n      ) {\n        if (meeting.webex.internal.mercury.connected) {\n          if (\n            this.status !== RECONNECTION.STATE.DEFAULT_STATUS ||\n            this.status !== RECONNECTION.STATE.COMPLETE\n          ) {\n            return true;\n          }\n\n          return new ReconnectionError('Multiple reconnections cannot occur concurrently');\n        }\n\n        return new ReconnectionError('mercury is not connected, cannot reconnect');\n      }\n\n      return new ReconnectionError('locus server for this call is not active, cannot reconnect');\n    }\n\n    return new ReconnectionError('Reconnection is not enabled.');\n  }\n\n  /**\n   * Initiates a media reconnect for the active meeting\n   * @param {Meeting} meeting\n   * @returns {Promise}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  reconnect(meeting) {\n    const validatedReconnect = this.validate(meeting);\n\n    return validatedReconnect === true ? this.execute(meeting) : Promise.reject(validatedReconnect);\n  }\n\n  /**\n   * @param {Meeting} meeting\n   * @returns {Promise}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  execute(meeting) {\n    this.status = RECONNECTION.STATE.IN_PROGRESS;\n\n    return this.media(meeting)\n      .then((media) => {\n        LoggerProxy.logger.log(`ReconnectionManager->execute#Media reestablished at: ${new Date()}`);\n        this.status = RECONNECTION.STATE.COMPLETE;\n\n        return Promise.resolve(media);\n      })\n      .catch((err) => { // eslint-disable-line\n        LoggerProxy.logger.error(`ReconnectionManager->execute#Media reestablishment failed at: ${new Date()}`);\n        if (this.tryCount > meeting.config.reconnection.retry.times) {\n          this.status = RECONNECTION.STATE.FAILURE;\n\n          return Promise.reject(new ReconnectionError(err));\n        }\n        // exponential backoff and retry logic\n        setTimeout(() =>\n          this.reconnect(meeting),\n        this.backOff *= meeting.config.reconnection.retry.backOff.rate);\n      });\n  }\n\n  /**\n   * @param {Meeting} meeting\n   * @param {boolean} [recreate] default false to re attach media if true\n   * @returns {Promise}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  reconnectMedia(meeting, recreate = false) {\n    let promise = null;\n\n    if (recreate) {\n      promise = Media.attachMedia(meeting.mediaProperties)\n        .then((peerConnection) => meeting.setRemoteStream(peerConnection));\n    }\n    else {\n      promise = Media.reconnectMedia(meeting.mediaProperties.peerConnection, meeting.meetingId);\n    }\n\n    return Promise.resolve(promise)\n      .then(() => meeting.roap\n        .sendRoapMediaRequest({\n          sdp: meeting.mediaProperties.peerConnection.sdp,\n          roapSeq: meeting.roapSeq,\n          meeting // or can pass meeting ID\n        }));\n  }\n\n  /**\n   * @param {Meeting} meeting\n   * @returns {Promise} see #Meeting.addMedia\n   * @private\n   * @memberof ReconnectionManager\n   */\n  media(meeting) {\n    this.tryCount += 1;\n    LoggerProxy.logger.log(`Reconnection->media#Begin reestablishment of media at ${new Date()}`);\n\n\n    // TODO: chekc peerconnection status\n    // create an offer\n    return this.reconnectMedia(meeting)\n      .then((media) => Promise.resolve(media))\n      .catch((err) => {\n        LoggerProxy.logger.warn(`Reconnection->media#Media could not reuse peer connection, failed with ${err}`);\n        // TODO: test getting to this scenario\n        ReconnectionManager.cleanup(meeting);\n        meeting.mediaProperties.reInitiatePeerconnection();\n\n        return meeting.reconnectMedia(true)\n          .catch((error) => {\n            LoggerProxy.logger.error(`ReconnectionManager->media#Error reconnecting , error: ${error}`);\n          });\n      });\n  }\n\n  /**\n   * @param {Meeting} meeting\n   * @returns {undefined}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  static cleanup(meeting) {\n    // close pcs, unset to null and reuse the streams with new pcs\n    PeerConnectionManager.close(meeting.mediaProperties.peerConnection);\n    meeting.mediaProperties.unsetPeerConnection();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}