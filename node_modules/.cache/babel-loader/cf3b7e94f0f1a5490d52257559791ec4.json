{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _defineProperty = require('babel-runtime/core-js/reflect/define-property');\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _union2 = require('lodash/union');\n\nvar _union3 = _interopRequireDefault(_union2);\n\nvar _merge2 = require('lodash/merge');\n\nvar _merge3 = _interopRequireDefault(_merge2);\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nvar _has2 = require('lodash/has');\n\nvar _has3 = _interopRequireDefault(_has2);\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nexports.default = mixinWebexInternalCorePlugins;\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Mixes a plugin system into an AmpState object (specifically, into WebexCore)\n * @param {AmpState} State\n * @param {Object} config\n * @param {Object} interceptors\n * @returns {AmpState}\n */\n\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nfunction mixinWebexInternalCorePlugins(State, config, interceptors) {\n  // eslint-disable-next-line complexity\n  State.registerPlugin = function registerPlugin(name, constructor) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (State.prototype._children[name] && !options.replace) {\n      return;\n    }\n\n    State.prototype._children[name] = constructor;\n\n    if (options.proxies) {\n      throw new Error('Proxies are not currently supported for private plugins');\n    }\n\n    if (options.interceptors) {\n      (0, _keys2.default)(options.interceptors).forEach(function (key) {\n        interceptors[key] = options.interceptors[key];\n      });\n    }\n\n    if (options.config) {\n      (0, _merge3.default)(config, options.config);\n    }\n\n    if ((0, _has3.default)(options, 'payloadTransformer.predicates')) {\n      config.payloadTransformer.predicates = config.payloadTransformer.predicates.concat((0, _get3.default)(options, 'payloadTransformer.predicates'));\n    }\n\n    if ((0, _has3.default)(options, 'payloadTransformer.transforms')) {\n      config.payloadTransformer.transforms = config.payloadTransformer.transforms.concat((0, _get3.default)(options, 'payloadTransformer.transforms'));\n    }\n\n    if (options.onBeforeLogout) {\n      config.onBeforeLogout = config.onBeforeLogout || [];\n      var onBeforeLogout = (0, _isArray3.default)(options.onBeforeLogout) ? options.onBeforeLogout : [options.onBeforeLogout];\n      onBeforeLogout.forEach(function (fn) {\n        return config.onBeforeLogout.push({\n          plugin: name,\n          fn: fn\n        });\n      });\n    } // Only mess with the plugin's derived properties if it's an amp-state plugin\n\n\n    if (constructor.prototype._definition && constructor.prototype._definition.ready) {\n      var _State$prototype$_der = State.prototype._derived.ready,\n          fn = _State$prototype$_der.fn,\n          depList = _State$prototype$_der.depList;\n      var def = {\n        deps: depList.concat(name + '.ready'),\n        fn: fn\n      };\n      createDerivedProperty(State.prototype, 'ready', def);\n    }\n  };\n\n  return State;\n}\n/**\n * Extracted from ampersand-state\n * @param {Object} modelProto\n * @param {string} name\n * @param {Object} definition\n * @private\n * @returns {undefined}\n */\n\n\nfunction createDerivedProperty(modelProto, name, definition) {\n  var def = modelProto._derived[name] = {\n    fn: (0, _isFunction3.default)(definition) ? definition : definition.fn,\n    cache: definition.cache !== false,\n    depList: definition.deps || []\n  }; // add to our shared dependency list\n\n  def.depList.forEach(function (dep) {\n    modelProto._deps[dep] = (0, _union3.default)(modelProto._deps[dep] || [], [name]);\n  }); // defined a top-level getter for derived names\n\n  (0, _defineProperty2.default)(modelProto, name, {\n    get: function get() {\n      return this._getDerivedProperty(name);\n    },\n    set: function set() {\n      throw new TypeError('`' + name + '` is a derived property, it can\\'t be set directly.');\n    }\n  });\n}","map":{"version":3,"sources":["webex-internal-core-plugin-mixin.js"],"names":["mixinWebexInternalCorePlugins","State","options","interceptors","config","onBeforeLogout","plugin","fn","constructor","depList","def","deps","name","createDerivedProperty","modelProto","definition","cache","get","set"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {get, has, isArray, isFunction, merge, union} from 'lodash';\n\n/**\n * Mixes a plugin system into an AmpState object (specifically, into WebexCore)\n * @param {AmpState} State\n * @param {Object} config\n * @param {Object} interceptors\n * @returns {AmpState}\n */\nexport default function mixinWebexInternalCorePlugins(State, config, interceptors) {\n  // eslint-disable-next-line complexity\n  State.registerPlugin = function registerPlugin(name, constructor, options = {}) {\n    if (State.prototype._children[name] && !options.replace) {\n      return;\n    }\n\n    State.prototype._children[name] = constructor;\n\n    if (options.proxies) {\n      throw new Error('Proxies are not currently supported for private plugins');\n    }\n\n    if (options.interceptors) {\n      Object.keys(options.interceptors).forEach((key) => {\n        interceptors[key] = options.interceptors[key];\n      });\n    }\n\n    if (options.config) {\n      merge(config, options.config);\n    }\n\n    if (has(options, 'payloadTransformer.predicates')) {\n      config.payloadTransformer.predicates = config.payloadTransformer.predicates.concat(\n        get(options, 'payloadTransformer.predicates')\n      );\n    }\n\n    if (has(options, 'payloadTransformer.transforms')) {\n      config.payloadTransformer.transforms = config.payloadTransformer.transforms.concat(\n        get(options, 'payloadTransformer.transforms')\n      );\n    }\n\n    if (options.onBeforeLogout) {\n      config.onBeforeLogout = config.onBeforeLogout || [];\n      const onBeforeLogout = isArray(options.onBeforeLogout) ? options.onBeforeLogout : [options.onBeforeLogout];\n\n      onBeforeLogout.forEach((fn) =>\n        config.onBeforeLogout.push({\n          plugin: name,\n          fn\n        }));\n    }\n\n    // Only mess with the plugin's derived properties if it's an amp-state plugin\n    if (constructor.prototype._definition && constructor.prototype._definition.ready) {\n      const {fn, depList} = State.prototype._derived.ready;\n      const def = {\n        deps: depList.concat(`${name}.ready`),\n        fn\n      };\n\n      createDerivedProperty(State.prototype, 'ready', def);\n    }\n  };\n\n  return State;\n}\n\n/**\n * Extracted from ampersand-state\n * @param {Object} modelProto\n * @param {string} name\n * @param {Object} definition\n * @private\n * @returns {undefined}\n */\nfunction createDerivedProperty(modelProto, name, definition) {\n  const def = (modelProto._derived[name] = {\n    fn: isFunction(definition) ? definition : definition.fn,\n    cache: definition.cache !== false,\n    depList: definition.deps || []\n  });\n\n  // add to our shared dependency list\n  def.depList.forEach((dep) => {\n    modelProto._deps[dep] = union(modelProto._deps[dep] || [], [name]);\n  });\n\n  // defined a top-level getter for derived names\n  Reflect.defineProperty(modelProto, name, {\n    get() {\n      return this._getDerivedProperty(name);\n    },\n    set() {\n      throw new TypeError(`\\`${name}\\` is a derived property, it can't be set directly.`);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"script"}