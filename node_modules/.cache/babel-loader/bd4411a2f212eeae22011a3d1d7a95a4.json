{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KMSError = undefined;\n\nvar _create = require('babel-runtime/core-js/object/create');\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _setPrototypeOf = require('babel-runtime/core-js/object/set-prototype-of');\n\nvar _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);\n\nvar _from = require('babel-runtime/core-js/array/from');\n\nvar _from2 = _interopRequireDefault(_from);\n\nvar _construct = require('babel-runtime/core-js/reflect/construct');\n\nvar _construct2 = _interopRequireDefault(_construct);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nvar _url = require('url');\n\nvar _validUrl = require('valid-url');\n\nvar _asn1js = require('asn1js');\n\nvar _pkijs = require('pkijs');\n\nvar _nodeJose = require('node-jose');\n\nvar _nodeJose2 = _interopRequireDefault(_nodeJose);\n\nvar _webcrypto = require('@peculiar/webcrypto');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extendableBuiltin(cls) {\n  function ExtendableBuiltin() {\n    var instance = (0, _construct2.default)(cls, (0, _from2.default)(arguments));\n    (0, _setPrototypeOf2.default)(instance, (0, _getPrototypeOf2.default)(this));\n    return instance;\n  }\n\n  ExtendableBuiltin.prototype = (0, _create2.default)(cls.prototype, {\n    constructor: {\n      value: cls,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (_setPrototypeOf2.default) {\n    (0, _setPrototypeOf2.default)(ExtendableBuiltin, cls);\n  } else {\n    ExtendableBuiltin.__proto__ = cls;\n  }\n\n  return ExtendableBuiltin;\n}\n\nvar webcrypto = new _webcrypto.Crypto();\n(0, _pkijs.setEngine)('newEngine', webcrypto, new _pkijs.CryptoEngine({\n  name: '',\n  crypto: webcrypto,\n  subtle: webcrypto.subtle\n}));\nvar VALID_KTY = 'RSA';\nvar VALID_KID_PROTOCOL = 'kms:';\nvar X509_COMMON_NAME_KEY = '2.5.4.3';\nvar X509_SUBJECT_ALT_NAME_KEY = '2.5.29.17';\n/**\n * Customize Error so the SDK knows to quit retrying and notify\n * the user\n */\n\nvar KMSError = exports.KMSError = function (_extendableBuiltin2) {\n  (0, _inherits3.default)(KMSError, _extendableBuiltin2);\n  /**\n   * add kmsError field to notify\n   * @param {string} message\n   */\n\n  function KMSError(message) {\n    (0, _classCallCheck3.default)(this, KMSError);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (KMSError.__proto__ || (0, _getPrototypeOf2.default)(KMSError)).call(this, message));\n\n    _this.kmsError = true;\n    return _this;\n  }\n\n  return KMSError;\n}(_extendableBuiltin(Error));\n\nvar throwError = function throwError(err) {\n  throw new KMSError('INVALID KMS: ' + err);\n};\n/**\n * Converts the PEM string to a pkijs certificate object\n * @param {string} pem PEM representation of a certificate\n * @returns {Certificate} pkijs object of the certificate\n */\n\n\nvar decodeCert = function decodeCert(pem) {\n  if (typeof pem !== 'string') {\n    throwError('certificate needs to be a string');\n  }\n\n  var der = Buffer.from(pem, 'base64');\n  var ber = new Uint8Array(der).buffer;\n  var asn1 = (0, _asn1js.fromBER)(ber);\n  return new _pkijs.Certificate({\n    schema: asn1.result\n  });\n};\n/**\n * Validate the 'kty' property of the KMS credentials\n * @param {Object} JWT KMS credentials\n * @param {string} JWT.kty type of certificate\n * @throws {KMSError} if kty is not a valid type\n * @returns {void}\n */\n\n\nvar validateKtyHeader = function validateKtyHeader(_ref) {\n  var kty = _ref.kty;\n\n  if (kty !== VALID_KTY) {\n    throwError('\\'kty\\' header must be \\'' + VALID_KTY + '\\'');\n  }\n};\n\nvar validateKidHeader = function validateKidHeader(_ref2) {\n  var kid = _ref2.kid;\n\n  if (!(0, _validUrl.isUri)(kid)) {\n    throwError('\\'kid\\' is not a valid URI');\n  }\n\n  if ((0, _url.parse)(kid).protocol !== VALID_KID_PROTOCOL) {\n    throwError('\\'kid\\' protocol must be \\'' + VALID_KID_PROTOCOL + '\\'');\n  }\n};\n/**\n * Checks the first certificate matches the 'kid' in the JWT.\n * It first checks the Subject Alternative Name then it checks\n * the Common Name\n * @param {Certificate} certificate represents the KMS\n * @param {Object} JWT KMS credentials\n * @param {string} JWT.kid the uri of the KMS\n * @throws {KMSError} if unable to validate certificate against KMS credentials\n * @returns {void}\n */\n\n\nvar validateCommonName = function validateCommonName(_ref3, _ref4) {\n  var _ref5 = (0, _slicedToArray3.default)(_ref3, 1),\n      certificate = _ref5[0];\n\n  var kid = _ref4.kid;\n  var kidHostname = (0, _url.parse)(kid).hostname;\n  var validationSuccessful = false;\n\n  if (certificate.extensions) {\n    // Subject Alt Names are in here\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = (0, _getIterator3.default)(certificate.extensions), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var extension = _step.value;\n\n        if (extension.extnID === X509_SUBJECT_ALT_NAME_KEY) {\n          var altNames = extension.parsedValue.altNames;\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = (0, _getIterator3.default)(altNames), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var entry = _step2.value;\n              var san = entry.value;\n              validationSuccessful = san === kidHostname;\n\n              if (validationSuccessful) {\n                break;\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          if (validationSuccessful) {\n            break;\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  if (!validationSuccessful) {\n    // Didn't match kid in the Subject Alt Names, checking the Common Name\n    var subjectAttributes = certificate.subject.typesAndValues;\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = (0, _getIterator3.default)(subjectAttributes), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var attribute = _step3.value;\n\n        if (attribute.type === X509_COMMON_NAME_KEY) {\n          var commonName = attribute.value.valueBlock.value;\n          validationSuccessful = commonName === kidHostname;\n\n          if (validationSuccessful) {\n            break;\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n  }\n\n  if (!validationSuccessful) {\n    throwError('hostname of the 1st certificate does not match \\'kid\\'');\n  }\n};\n/**\n * Validate the first KMS certificate against the information\n * provided in the JWT\n * @param {Certificate} certificate first certificate the identifies the KMS\n * @param {Object} JWT credentials of the KMS\n * @param {string} JWT.e Public exponent of the first certificate\n * @param {string} KWT.n Modulus of the first certificate\n * @throws {KMSError} if e or n doesn't match the first certificate\n * @returns {void}\n */\n\n\nvar validatePublicCertificate = function validatePublicCertificate(_ref6, _ref7) {\n  var _ref8 = (0, _slicedToArray3.default)(_ref6, 1),\n      certificate = _ref8[0];\n\n  var publicExponent = _ref7.e,\n      modulus = _ref7.n;\n  var encode = _nodeJose2.default.util.base64url.encode;\n  var publicKey = certificate.subjectPublicKeyInfo.subjectPublicKey;\n  var asn1PublicCert = (0, _asn1js.fromBER)(publicKey.valueBlock.valueHex);\n  var publicCert = new _pkijs.RSAPublicKey({\n    schema: asn1PublicCert.result\n  });\n  var publicExponentHex = publicCert.publicExponent.valueBlock.valueHex;\n  var modulusHex = publicCert.modulus.valueBlock.valueHex;\n\n  if (publicExponent !== encode(publicExponentHex)) {\n    throwError('Public exponent is invalid');\n  }\n\n  if (modulus !== encode(modulusHex)) {\n    throwError('Modulus is invalid');\n  }\n};\n/**\n * Validates the list of certificates against the CAs provided\n * @param {certificate[]} certificates list of certificates provided\n *   by the KMS to certify itself\n * @param {string[]} [caroots=[]] list of Certificate Authorities used to\n *   validate the KMS's certificates\n * @returns {Promise} rejects if unable to validate the certificates\n */\n\n\nvar validateCertificatesSignature = function validateCertificatesSignature(certificates) {\n  var caroots = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var certificateEngine = new _pkijs.CertificateChainValidationEngine({\n    trustedCerts: caroots.map(decodeCert),\n    certs: certificates\n  });\n  return certificateEngine.verify().then(function (_ref9) {\n    var result = _ref9.result,\n        resultCode = _ref9.resultCode,\n        resultMessage = _ref9.resultMessage;\n\n    if (!result) {\n      throwError('Certificate Validation failed [' + resultCode + ']: ' + resultMessage);\n    }\n  });\n};\n/**\n * Validates the information provided by the KMS. This is a curried function.\n * The first function takes the caroots param and returns a second function.\n * The second function takes the credentials of the KMS and validates it\n * @param {string[]} caroots PEM encoded certificates that will be used\n *   as Certificate Authorities\n * @param {Object} jwt Object containing the fields necessary to\n *   validate the KMS\n * @returns {Promise} when resolved will return the jwt\n */\n\n\nvar validateKMS = function validateKMS(caroots) {\n  return function () {\n    var jwt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _promise2.default.resolve().then(function () {\n      validateKtyHeader(jwt);\n      validateKidHeader(jwt);\n\n      if (!((0, _isArray3.default)(jwt.x5c) && jwt.x5c.length > 0)) {\n        throwError('JWK does not contain a list of certificates');\n      }\n\n      var certificates = jwt.x5c.map(decodeCert);\n      validateCommonName(certificates, jwt);\n      validatePublicCertificate(certificates, jwt); // Skip validating signatures if no CA roots were provided\n\n      var promise = caroots ? validateCertificatesSignature(certificates, caroots) : _promise2.default.resolve();\n      return promise.then(function () {\n        return jwt;\n      });\n    });\n  };\n};\n\nexports.default = validateKMS;","map":{"version":3,"sources":["kms-certificate-validation.js"],"names":["webcrypto","Crypto","CryptoEngine","name","crypto","subtle","VALID_KTY","VALID_KID_PROTOCOL","X509_COMMON_NAME_KEY","X509_SUBJECT_ALT_NAME_KEY","KMSError","Error","throwError","decodeCert","der","Buffer","ber","asn1","Certificate","schema","validateKtyHeader","kty","validateKidHeader","kid","validateCommonName","certificate","kidHostname","validationSuccessful","extension","altNames","entry","san","subjectAttributes","attribute","commonName","validatePublicCertificate","e","publicExponent","n","modulus","encode","jose","publicKey","asn1PublicCert","publicCert","RSAPublicKey","publicExponentHex","modulusHex","validateCertificatesSignature","caroots","certificateEngine","CertificateChainValidationEngine","trustedCerts","certs","certificates","result","resultCode","resultMessage","validateKMS","jwt","promise"],"mappings":"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","sourcesContent":["import {parse as parseUrl} from 'url';\n\nimport {isUri} from 'valid-url';\nimport {fromBER} from 'asn1js';\nimport {\n  Certificate,\n  RSAPublicKey,\n  CertificateChainValidationEngine,\n  CryptoEngine,\n  setEngine\n} from 'pkijs';\nimport {isArray} from 'lodash';\nimport jose from 'node-jose';\nimport {Crypto} from '@peculiar/webcrypto';\n\nconst webcrypto = new Crypto();\n\nsetEngine(\n  'newEngine',\n  webcrypto,\n  new CryptoEngine({name: '', crypto: webcrypto, subtle: webcrypto.subtle})\n);\n\nconst VALID_KTY = 'RSA';\nconst VALID_KID_PROTOCOL = 'kms:';\n\nconst X509_COMMON_NAME_KEY = '2.5.4.3';\n\nconst X509_SUBJECT_ALT_NAME_KEY = '2.5.29.17';\n\n/**\n * Customize Error so the SDK knows to quit retrying and notify\n * the user\n */\nexport class KMSError extends Error {\n  /**\n   * add kmsError field to notify\n   * @param {string} message\n   */\n  constructor(message) {\n    super(message);\n    this.kmsError = true;\n  }\n}\n\nconst throwError = (err) => {\n  throw new KMSError(`INVALID KMS: ${err}`);\n};\n\n/**\n * Converts the PEM string to a pkijs certificate object\n * @param {string} pem PEM representation of a certificate\n * @returns {Certificate} pkijs object of the certificate\n */\nconst decodeCert = (pem) => {\n  if (typeof pem !== 'string') {\n    throwError('certificate needs to be a string');\n  }\n\n  const der = Buffer.from(pem, 'base64');\n  const ber = new Uint8Array(der).buffer;\n\n  const asn1 = fromBER(ber);\n\n  return new Certificate({schema: asn1.result});\n};\n\n/**\n * Validate the 'kty' property of the KMS credentials\n * @param {Object} JWT KMS credentials\n * @param {string} JWT.kty type of certificate\n * @throws {KMSError} if kty is not a valid type\n * @returns {void}\n */\nconst validateKtyHeader = ({kty}) => {\n  if (kty !== VALID_KTY) {\n    throwError(`'kty' header must be '${VALID_KTY}'`);\n  }\n};\n\nconst validateKidHeader = ({kid}) => {\n  if (!isUri(kid)) {\n    throwError('\\'kid\\' is not a valid URI');\n  }\n\n  if (parseUrl(kid).protocol !== VALID_KID_PROTOCOL) {\n    throwError(`'kid' protocol must be '${VALID_KID_PROTOCOL}'`);\n  }\n};\n\n/**\n * Checks the first certificate matches the 'kid' in the JWT.\n * It first checks the Subject Alternative Name then it checks\n * the Common Name\n * @param {Certificate} certificate represents the KMS\n * @param {Object} JWT KMS credentials\n * @param {string} JWT.kid the uri of the KMS\n * @throws {KMSError} if unable to validate certificate against KMS credentials\n * @returns {void}\n */\nconst validateCommonName = ([certificate], {kid}) => {\n  const kidHostname = parseUrl(kid).hostname;\n  let validationSuccessful = false;\n\n  if (certificate.extensions) {\n    // Subject Alt Names are in here\n    for (const extension of certificate.extensions) {\n      if (extension.extnID === X509_SUBJECT_ALT_NAME_KEY) {\n        const {altNames} = extension.parsedValue;\n\n        for (const entry of altNames) {\n          const san = entry.value;\n\n          validationSuccessful = san === kidHostname;\n          if (validationSuccessful) {\n            break;\n          }\n        }\n\n        if (validationSuccessful) {\n          break;\n        }\n      }\n    }\n  }\n\n  if (!validationSuccessful) {\n    // Didn't match kid in the Subject Alt Names, checking the Common Name\n    const subjectAttributes = certificate.subject.typesAndValues;\n\n    for (const attribute of subjectAttributes) {\n      if (attribute.type === X509_COMMON_NAME_KEY) {\n        const commonName = attribute.value.valueBlock.value;\n\n        validationSuccessful = commonName === kidHostname;\n        if (validationSuccessful) {\n          break;\n        }\n      }\n    }\n  }\n\n  if (!validationSuccessful) {\n    throwError('hostname of the 1st certificate does not match \\'kid\\'');\n  }\n};\n\n/**\n * Validate the first KMS certificate against the information\n * provided in the JWT\n * @param {Certificate} certificate first certificate the identifies the KMS\n * @param {Object} JWT credentials of the KMS\n * @param {string} JWT.e Public exponent of the first certificate\n * @param {string} KWT.n Modulus of the first certificate\n * @throws {KMSError} if e or n doesn't match the first certificate\n * @returns {void}\n */\nconst validatePublicCertificate =\n  ([certificate], {e: publicExponent, n: modulus}) => {\n    const {encode} = jose.util.base64url;\n\n    const publicKey = certificate.subjectPublicKeyInfo.subjectPublicKey;\n    const asn1PublicCert = fromBER(publicKey.valueBlock.valueHex);\n    const publicCert = new RSAPublicKey({schema: asn1PublicCert.result});\n    const publicExponentHex = publicCert.publicExponent.valueBlock.valueHex;\n    const modulusHex = publicCert.modulus.valueBlock.valueHex;\n\n    if (publicExponent !== encode(publicExponentHex)) {\n      throwError('Public exponent is invalid');\n    }\n    if (modulus !== encode(modulusHex)) {\n      throwError('Modulus is invalid');\n    }\n  };\n\n/**\n * Validates the list of certificates against the CAs provided\n * @param {certificate[]} certificates list of certificates provided\n *   by the KMS to certify itself\n * @param {string[]} [caroots=[]] list of Certificate Authorities used to\n *   validate the KMS's certificates\n * @returns {Promise} rejects if unable to validate the certificates\n */\nconst validateCertificatesSignature = (certificates, caroots = []) => {\n  const certificateEngine = new CertificateChainValidationEngine({\n    trustedCerts: caroots.map(decodeCert),\n    certs: certificates\n  });\n\n  return certificateEngine.verify()\n    .then(({result, resultCode, resultMessage}) => {\n      if (!result) {\n        throwError(\n          `Certificate Validation failed [${resultCode}]: ${resultMessage}`\n        );\n      }\n    });\n};\n\n/**\n * Validates the information provided by the KMS. This is a curried function.\n * The first function takes the caroots param and returns a second function.\n * The second function takes the credentials of the KMS and validates it\n * @param {string[]} caroots PEM encoded certificates that will be used\n *   as Certificate Authorities\n * @param {Object} jwt Object containing the fields necessary to\n *   validate the KMS\n * @returns {Promise} when resolved will return the jwt\n */\nconst validateKMS = (caroots) => (jwt = {}) => Promise.resolve()\n  .then(() => {\n    validateKtyHeader(jwt);\n    validateKidHeader(jwt);\n\n    if (!(isArray(jwt.x5c) && jwt.x5c.length > 0)) {\n      throwError('JWK does not contain a list of certificates');\n    }\n    const certificates = jwt.x5c.map(decodeCert);\n\n    validateCommonName(certificates, jwt);\n    validatePublicCertificate(certificates, jwt);\n\n    // Skip validating signatures if no CA roots were provided\n    const promise = caroots ?\n      validateCertificatesSignature(certificates, caroots) : Promise.resolve();\n\n    return promise\n      .then(() => jwt);\n  });\n\nexport default validateKMS;\n"]},"metadata":{},"sourceType":"script"}