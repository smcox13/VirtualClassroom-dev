{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport OriginatorIdentifierOrKey from \"./OriginatorIdentifierOrKey.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport RecipientEncryptedKeys from \"./RecipientEncryptedKeys.js\";\nimport Certificate from \"./Certificate.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nexport default class KeyAgreeRecipientInfo {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for KeyAgreeRecipientInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", KeyAgreeRecipientInfo.defaultValues(\"version\"));\n    /**\r\n     * @type {OriginatorIdentifierOrKey}\r\n     * @desc originator\r\n     */\n\n    this.originator = getParametersValue(parameters, \"originator\", KeyAgreeRecipientInfo.defaultValues(\"originator\"));\n    if (\"ukm\" in parameters)\n      /**\r\n       * @type {OctetString}\r\n       * @desc ukm\r\n       */\n      this.ukm = getParametersValue(parameters, \"ukm\", KeyAgreeRecipientInfo.defaultValues(\"ukm\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc keyEncryptionAlgorithm\r\n     */\n\n    this.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KeyAgreeRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\n    /**\r\n     * @type {RecipientEncryptedKeys}\r\n     * @desc recipientEncryptedKeys\r\n     */\n\n    this.recipientEncryptedKeys = getParametersValue(parameters, \"recipientEncryptedKeys\", KeyAgreeRecipientInfo.defaultValues(\"recipientEncryptedKeys\"));\n    /**\r\n     * @type {Certificate}\r\n     * @desc recipientCertificate For some reasons we need to store recipient's certificate here\r\n     */\n\n    this.recipientCertificate = getParametersValue(parameters, \"recipientCertificate\", KeyAgreeRecipientInfo.defaultValues(\"recipientCertificate\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"version\":\n        return 0;\n\n      case \"originator\":\n        return new OriginatorIdentifierOrKey();\n\n      case \"ukm\":\n        return new asn1js.OctetString();\n\n      case \"keyEncryptionAlgorithm\":\n        return new AlgorithmIdentifier();\n\n      case \"recipientEncryptedKeys\":\n        return new RecipientEncryptedKeys();\n\n      case \"recipientCertificate\":\n        return new Certificate();\n\n      default:\n        throw new Error(`Invalid member name for KeyAgreeRecipientInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"version\":\n        return memberValue === 0;\n\n      case \"originator\":\n        return memberValue.variant === -1 && \"value\" in memberValue === false;\n\n      case \"ukm\":\n        return memberValue.isEqual(KeyAgreeRecipientInfo.defaultValues(\"ukm\"));\n\n      case \"keyEncryptionAlgorithm\":\n        return memberValue.algorithmId === \"\" && \"algorithmParams\" in memberValue === false;\n\n      case \"recipientEncryptedKeys\":\n        return memberValue.encryptedKeys.length === 0;\n\n      case \"recipientCertificate\":\n        return false;\n      // For now leave it as is\n\n      default:\n        throw new Error(`Invalid member name for KeyAgreeRecipientInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * KeyAgreeRecipientInfo ::= SEQUENCE {\r\n   *    version CMSVersion,  -- always set to 3\r\n   *    originator [0] EXPLICIT OriginatorIdentifierOrKey,\r\n   *    ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,\r\n   *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n   *    recipientEncryptedKeys RecipientEncryptedKeys }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [version]\r\n     * @property {string} [originator]\r\n     * @property {string} [ukm]\r\n     * @property {string} [keyEncryptionAlgorithm]\r\n     * @property {string} [recipientEncryptedKeys]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Integer({\n        name: names.version || \"\"\n      }), new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [OriginatorIdentifierOrKey.schema(names.originator || {})]\n      }), new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: [new asn1js.OctetString({\n          name: names.ukm || \"\"\n        })]\n      }), AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}), RecipientEncryptedKeys.schema(names.recipientEncryptedKeys || {})]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"version\", \"originator\", \"ukm\", \"keyEncryptionAlgorithm\", \"recipientEncryptedKeys\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, KeyAgreeRecipientInfo.schema({\n      names: {\n        version: \"version\",\n        originator: {\n          names: {\n            blockName: \"originator\"\n          }\n        },\n        ukm: \"ukm\",\n        keyEncryptionAlgorithm: {\n          names: {\n            blockName: \"keyEncryptionAlgorithm\"\n          }\n        },\n        recipientEncryptedKeys: {\n          names: {\n            blockName: \"recipientEncryptedKeys\"\n          }\n        }\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for KeyAgreeRecipientInfo\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.version = asn1.result.version.valueBlock.valueDec;\n    this.originator = new OriginatorIdentifierOrKey({\n      schema: asn1.result.originator\n    });\n    if (\"ukm\" in asn1.result) this.ukm = asn1.result.ukm;\n    this.keyEncryptionAlgorithm = new AlgorithmIdentifier({\n      schema: asn1.result.keyEncryptionAlgorithm\n    });\n    this.recipientEncryptedKeys = new RecipientEncryptedKeys({\n      schema: asn1.result.recipientEncryptedKeys\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for final sequence\n    const outputArray = [];\n    outputArray.push(new asn1js.Integer({\n      value: this.version\n    }));\n    outputArray.push(new asn1js.Constructed({\n      idBlock: {\n        tagClass: 3,\n        // CONTEXT-SPECIFIC\n        tagNumber: 0 // [0]\n\n      },\n      value: [this.originator.toSchema()]\n    }));\n\n    if (\"ukm\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: [this.ukm]\n      }));\n    }\n\n    outputArray.push(this.keyEncryptionAlgorithm.toSchema());\n    outputArray.push(this.recipientEncryptedKeys.toSchema()); //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const _object = {\n      version: this.version,\n      originator: this.originator.toJSON()\n    };\n    if (\"ukm\" in this) _object.ukm = this.ukm.toJSON();\n    _object.keyEncryptionAlgorithm = this.keyEncryptionAlgorithm.toJSON();\n    _object.recipientEncryptedKeys = this.recipientEncryptedKeys.toJSON();\n    return _object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/KeyAgreeRecipientInfo.js"],"names":["asn1js","getParametersValue","clearProps","OriginatorIdentifierOrKey","AlgorithmIdentifier","RecipientEncryptedKeys","Certificate","KeyAgreeRecipientInfo","constructor","parameters","version","defaultValues","originator","ukm","keyEncryptionAlgorithm","recipientEncryptedKeys","recipientCertificate","fromSchema","schema","memberName","OctetString","Error","compareWithDefault","memberValue","variant","isEqual","algorithmId","encryptedKeys","length","names","Sequence","name","blockName","value","Integer","Constructed","idBlock","tagClass","tagNumber","optional","asn1","compareSchema","verified","result","valueBlock","valueDec","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport OriginatorIdentifierOrKey from \"./OriginatorIdentifierOrKey.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport RecipientEncryptedKeys from \"./RecipientEncryptedKeys.js\";\r\nimport Certificate from \"./Certificate.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class KeyAgreeRecipientInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for KeyAgreeRecipientInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", KeyAgreeRecipientInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {OriginatorIdentifierOrKey}\r\n\t\t * @desc originator\r\n\t\t */\r\n\t\tthis.originator = getParametersValue(parameters, \"originator\", KeyAgreeRecipientInfo.defaultValues(\"originator\"));\r\n\r\n\t\tif(\"ukm\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @desc ukm\r\n\t\t\t */\r\n\t\t\tthis.ukm = getParametersValue(parameters, \"ukm\", KeyAgreeRecipientInfo.defaultValues(\"ukm\"));\r\n\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc keyEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KeyAgreeRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {RecipientEncryptedKeys}\r\n\t\t * @desc recipientEncryptedKeys\r\n\t\t */\r\n\t\tthis.recipientEncryptedKeys = getParametersValue(parameters, \"recipientEncryptedKeys\", KeyAgreeRecipientInfo.defaultValues(\"recipientEncryptedKeys\"));\r\n\t\t/**\r\n\t\t * @type {Certificate}\r\n\t\t * @desc recipientCertificate For some reasons we need to store recipient's certificate here\r\n\t\t */\r\n\t\tthis.recipientCertificate = getParametersValue(parameters, \"recipientCertificate\", KeyAgreeRecipientInfo.defaultValues(\"recipientCertificate\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"originator\":\r\n\t\t\t\treturn new OriginatorIdentifierOrKey();\r\n\t\t\tcase \"ukm\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"recipientEncryptedKeys\":\r\n\t\t\t\treturn new RecipientEncryptedKeys();\r\n\t\t\tcase \"recipientCertificate\":\r\n\t\t\t\treturn new Certificate();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyAgreeRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === 0);\r\n\t\t\tcase \"originator\":\r\n\t\t\t\treturn ((memberValue.variant === (-1)) && ((\"value\" in memberValue) === false));\r\n\t\t\tcase \"ukm\":\r\n\t\t\t\treturn (memberValue.isEqual(KeyAgreeRecipientInfo.defaultValues(\"ukm\")));\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"recipientEncryptedKeys\":\r\n\t\t\t\treturn (memberValue.encryptedKeys.length === 0);\r\n\t\t\tcase \"recipientCertificate\":\r\n\t\t\t\treturn false; // For now leave it as is\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyAgreeRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * KeyAgreeRecipientInfo ::= SEQUENCE {\r\n\t *    version CMSVersion,  -- always set to 3\r\n\t *    originator [0] EXPLICIT OriginatorIdentifierOrKey,\r\n\t *    ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,\r\n\t *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n\t *    recipientEncryptedKeys RecipientEncryptedKeys }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [originator]\r\n\t\t * @property {string} [ukm]\r\n\t\t * @property {string} [keyEncryptionAlgorithm]\r\n\t\t * @property {string} [recipientEncryptedKeys]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: names.blockName || \"\",\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: names.version || \"\" }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tOriginatorIdentifierOrKey.schema(names.originator || {})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.OctetString({ name: names.ukm || \"\" })]\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n\t\t\t\tRecipientEncryptedKeys.schema(names.recipientEncryptedKeys || {})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"originator\",\r\n\t\t\t\"ukm\",\r\n\t\t\t\"keyEncryptionAlgorithm\",\r\n\t\t\t\"recipientEncryptedKeys\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tKeyAgreeRecipientInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\toriginator: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"originator\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tukm: \"ukm\",\r\n\t\t\t\t\tkeyEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\trecipientEncryptedKeys: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"recipientEncryptedKeys\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KeyAgreeRecipientInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.originator = new OriginatorIdentifierOrKey({ schema: asn1.result.originator });\r\n\r\n\t\tif(\"ukm\" in asn1.result)\r\n\t\t\tthis.ukm = asn1.result.ukm;\r\n\r\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n\t\tthis.recipientEncryptedKeys = new RecipientEncryptedKeys({ schema: asn1.result.recipientEncryptedKeys });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for final sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\tidBlock: {\r\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t},\r\n\t\t\tvalue: [this.originator.toSchema()]\r\n\t\t}));\r\n\r\n\t\tif(\"ukm\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.ukm]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\toutputArray.push(this.keyEncryptionAlgorithm.toSchema());\r\n\t\toutputArray.push(this.recipientEncryptedKeys.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\toriginator: this.originator.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"ukm\" in this)\r\n\t\t\t_object.ukm = this.ukm.toJSON();\r\n\r\n\t\t_object.keyEncryptionAlgorithm = this.keyEncryptionAlgorithm.toJSON();\r\n\t\t_object.recipientEncryptedKeys = this.recipientEncryptedKeys.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}