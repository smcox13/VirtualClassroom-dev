{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _httpCore = require('@webex/http-core');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Allows the user of the SDK to set default options that apply every http request made by the SDK\n * For example a default timeout could be set for all requests like this :\n *\n *   webex = WebexSdk.init({\n *     credentials: {\n *       supertoken: superToken\n *     },\n *     config: {\n *       credentials: {\n *         client_id,\n *         client_secret\n *       },\n *       defaultRequestOptions: {\n *         timeout: 15000\n *       }\n *     }\n *   });\n */\n\n\nvar DefaultOptionsInterceptor = function (_Interceptor) {\n  (0, _inherits3.default)(DefaultOptionsInterceptor, _Interceptor);\n\n  function DefaultOptionsInterceptor() {\n    (0, _classCallCheck3.default)(this, DefaultOptionsInterceptor);\n    return (0, _possibleConstructorReturn3.default)(this, (DefaultOptionsInterceptor.__proto__ || (0, _getPrototypeOf2.default)(DefaultOptionsInterceptor)).apply(this, arguments));\n  }\n\n  (0, _createClass3.default)(DefaultOptionsInterceptor, [{\n    key: 'onRequest',\n\n    /**\n     * @see Interceptor#onRequest\n     * @param {Object} options\n     * @returns {Object}\n     */\n    value: function onRequest(options) {\n      var defaultOptions = this.webex.config.defaultRequestOptions;\n\n      if (!defaultOptions) {\n        return options;\n      }\n\n      (0, _keys2.default)(defaultOptions).forEach(function (key) {\n        // don't override any existing option properties\n        if (!(0, _keys2.default)(options).includes(key)) {\n          options[key] = defaultOptions[key];\n        }\n      });\n      return options;\n    }\n  }], [{\n    key: 'create',\n\n    /**\n     * @returns {DefaultOptionsInterceptor}\n     */\n    value: function create() {\n      return new DefaultOptionsInterceptor({\n        webex: this\n      });\n    }\n  }]);\n  return DefaultOptionsInterceptor;\n}(_httpCore.Interceptor);\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nexports.default = DefaultOptionsInterceptor;","map":{"version":3,"sources":["default-options.js"],"names":["DefaultOptionsInterceptor","Interceptor","webex","options","defaultOptions"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAA,SAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;IAmBqBA,yB;;;;;;;;;;;AAQnB;;;;;8BAKUG,O,EAAS;AAAA,UACaC,cADb,GAC+B,KAAA,KAAA,CAD/B,MAC+B,CAD/B,qBAAA;;AAGjB,UAAI,CAAJ,cAAA,EAAqB;AACnB,eAAA,OAAA;AACD;;AAED,OAAA,GAAA,MAAA,CAAA,OAAA,EAAA,cAAA,EAAA,OAAA,CAAoC,UAAA,GAAA,EAAS;AAC3C;AACA,YAAI,CAAC,CAAA,GAAA,MAAA,CAAA,OAAA,EAAA,OAAA,EAAA,QAAA,CAAL,GAAK,CAAL,EAAyC;AACvCD,UAAAA,OAAAA,CAAAA,GAAAA,CAAAA,GAAeC,cAAAA,CAAfD,GAAeC,CAAfD;AACD;AAJH,OAAA;AAOA,aAAA,OAAA;AACD;;;;AA3BD;;;6BAGgB;AACd,aAAO,IAAA,yBAAA,CAA8B;AAACD,QAAAA,KAAAA,EAAtC;AAAqC,OAA9B,CAAP;AACD;;;EANoDD,SAAAA,CAAAA,W;AA1BvD;;;;;kBA0BqBD,yB","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {Interceptor} from '@webex/http-core';\n\n\n/**\n * Allows the user of the SDK to set default options that apply every http request made by the SDK\n * For example a default timeout could be set for all requests like this :\n *\n *   webex = WebexSdk.init({\n *     credentials: {\n *       supertoken: superToken\n *     },\n *     config: {\n *       credentials: {\n *         client_id,\n *         client_secret\n *       },\n *       defaultRequestOptions: {\n *         timeout: 15000\n *       }\n *     }\n *   });\n */\nexport default class DefaultOptionsInterceptor extends Interceptor {\n  /**\n   * @returns {DefaultOptionsInterceptor}\n   */\n  static create() {\n    return new DefaultOptionsInterceptor({webex: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    const {defaultRequestOptions: defaultOptions} = this.webex.config;\n\n    if (!defaultOptions) {\n      return options;\n    }\n\n    Object.keys(defaultOptions).forEach((key) => {\n      // don't override any existing option properties\n      if (!Object.keys(options).includes(key)) {\n        options[key] = defaultOptions[key];\n      }\n    });\n\n    return options;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}