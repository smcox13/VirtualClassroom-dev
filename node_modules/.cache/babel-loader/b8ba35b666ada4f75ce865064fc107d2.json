{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _url = require('url');\n\nvar _url2 = _interopRequireDefault(_url);\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * The parameter transfer object for {@link ServiceHost#constructor}.\n *\n * @typedef {Object} ServiceHostConstructorPTO\n * @property {string} ServiceHostConstructorPTO.catalog - The host's catalog.\n * @property {string} ServiceHostConstructorPTO.defaultUri - The host's default.\n * @property {string} ServiceHostConstructorPTO.hostGroup - The host's group.\n * @property {string} ServiceHostConstructorPTO.id - The host's clusterId.\n * @property {number} ServiceHostConstructorPTO.priority - The host's priority.\n * @property {string} ServiceHostConstructorPTO.uri - The host's uri.\n */\n\n/**\n * The parameter transfer object for {@link ServiceHost#polyGenerate}.\n *\n * @typedef {Object} ServiceHostPolyGeneratePTO\n * @property {string} ServiceHostPolyGeneratePTO.catalog - The target catalog.\n * @property {string} ServiceHostPolyGeneratePTO.name - The service name.\n * @property {string} ServiceHostPolyGeneratePTO.url - The service url.\n */\n\n/**\n * @class\n * @classdesc - Manages a single service host and its associated data.\n */\n\n\nvar ServiceHost = function () {\n  /**\n   * Generate a new {@link ServiceHost}.\n   *\n   * @public\n   * @constructor\n   * @memberof ServiceHost\n   * @param {ServiceHostConstructorPTO} pto\n   */\n  function ServiceHost(pto) {\n    (0, _classCallCheck3.default)(this, ServiceHost); // Validate the parameter transfer object.\n\n    ServiceHost.validate(pto); // Map the parameter transfer object to the class object.\n\n    /**\n     * The catalog name that the {@link ServiceHost} is associated with.\n     *\n     * @instance\n     * @type {string}\n     * @public\n     * @memberof ServiceHost\n     */\n\n    this.catalog = pto.catalog;\n    /**\n     * The default URI for the {@link ServiceHost}.\n     *\n     * @instance\n     * @type {string}\n     * @public\n     * @memberof ServiceHost\n     */\n\n    this.default = pto.defaultUri;\n    /**\n     * The host group that the {@link ServiceHost} is associated with.\n     *\n     * @instance\n     * @type {string}\n     * @public\n     * @memberof ServiceHost\n     */\n\n    this.hostGroup = pto.hostGroup;\n    /**\n     * The cluster ID of the {@link ServiceHost}.\n     *\n     * @instance\n     * @type {string}\n     * @public\n     * @memberof ServiceHost\n     */\n\n    this.id = pto.id;\n    /**\n     * The priority value of the {@link ServiceHost}. The lower the number, the\n     * higher the priority.\n     *\n     * @instance\n     * @type {number}\n     * @public\n     * @memberof ServiceHost\n     */\n\n    this.priority = pto.priority;\n    /**\n     * The host uri of the {@link ServiceHost}.\n     *\n     * @instance\n     * @type {string}\n     * @public\n     * @memberof ServiceHost\n     */\n\n    this.uri = pto.uri; // Generate flags.\n\n    /**\n     * If the {@link ServiceHost} is marked as failed.\n     *\n     * @instance\n     * @type {boolean}\n     * @protected\n     * @memberof ServiceHost\n     */\n\n    this.failed = false;\n    /**\n     * If the {@link ServiceHost} is marked as replaced.\n     *\n     * @instance\n     * @type {boolean}\n     * @protected\n     * @memberof ServiceHost\n     */\n\n    this.replaced = false;\n  }\n  /**\n   * If the {@link ServiceHost} is in an active state.\n   *\n   * @public\n   * @memberof ServiceHost\n   * @type {boolean} - `true` if the service is active and usable.\n   */\n\n\n  (0, _createClass3.default)(ServiceHost, [{\n    key: 'setStatus',\n\n    /**\n     * Set one or more of the status properties of the class object.\n     *\n     * @public\n     * @memberof ServiceHost\n     * @param {Object} pto - The parameter transfer object.\n     * @property {boolean} [pto.failed] - The failed status to set.\n     * @property {boolean} [pto.replaced] - the replaced status to set.\n     * @returns {this}\n     */\n    value: function setStatus(_ref) {\n      var failed = _ref.failed,\n          replaced = _ref.replaced;\n\n      if (failed !== undefined) {\n        this.failed = failed;\n      }\n\n      if (replaced !== undefined) {\n        this.replaced = replaced;\n      }\n\n      return this;\n    }\n    /**\n     * Generate a service host using only a catalog, name, and URL.\n     *\n     * @public\n     * @static\n     * @memberof ServiceHost\n     * @param {ServiceHostPolyGeneratePTO} pto\n     * @returns {ServiceHost} - The generated service host.\n     */\n\n  }, {\n    key: 'active',\n    get: function get() {\n      // Validate that the `ServiceHost` was not marked as failed or replaced.\n      return !this.failed && !this.replaced;\n    }\n    /**\n     * If the host is local to the user's cluster.\n     *\n     * @public\n     * @memberof ServiceHost\n     * @type {boolean} - If the host is local.\n     */\n\n  }, {\n    key: 'local',\n    get: function get() {\n      return this.default.includes(this.hostGroup);\n    }\n    /**\n     * The service value.\n     *\n     * @public\n     * @memberof ServiceHost\n     * @type {string} - The service value.\n     */\n\n  }, {\n    key: 'service',\n    get: function get() {\n      return this.id.split(':')[3];\n    }\n    /**\n     * The formatted url for the host.\n     *\n     * @public\n     * @memberof ServiceHost\n     * @type {string} - The service url.\n     */\n\n  }, {\n    key: 'url',\n    get: function get() {\n      // Generate a url object from the default url.\n      var urlObj = _url2.default.parse(this.default); // Format the host of the generated url object.\n\n\n      urlObj.host = '' + this.uri + (urlObj.port ? ':' + urlObj.port : ''); // Assign the formatted url to this.\n\n      return _url2.default.format(urlObj);\n    }\n  }], [{\n    key: 'polyGenerate',\n    value: function polyGenerate(_ref2) {\n      var catalog = _ref2.catalog,\n          name = _ref2.name,\n          url = _ref2.url;\n      return new ServiceHost({\n        catalog: catalog,\n        defaultUri: url,\n        hostGroup: _url2.default.parse(url).host,\n        id: name ? 'poly-head:poly-group:poly-cluster:' + name : undefined,\n        priority: 1,\n        uri: _url2.default.parse(url).host\n      });\n    }\n    /**\n     * Validate that a constructor parameter transfer object is valid.\n     *\n     * @public\n     * @static\n     * @memberof ServiceHost\n     * @param {ServiceHostConstructorPTO} pto\n     * @throws - If the parameter transfer object is not valid.\n     * @returns {undefined}\n     */\n\n  }, {\n    key: 'validate',\n    value: function validate(_ref3) {\n      var catalog = _ref3.catalog,\n          defaultUri = _ref3.defaultUri,\n          hostGroup = _ref3.hostGroup,\n          id = _ref3.id,\n          priority = _ref3.priority,\n          uri = _ref3.uri; // Generate error-throwing method.\n\n      var throwError = function throwError(msg) {\n        throw new Error('service-host: invalid constructor parameters, ' + msg);\n      }; // Validate the catalog property.\n\n\n      if (!_constants.SERVICE_CATALOGS.includes(catalog)) {\n        throwError('\\'catalog\\' must be a string');\n      } // Validate the `defaultUri` property.\n\n\n      if (typeof defaultUri !== 'string') {\n        throwError('\\'defaultUri\\' must be a string');\n      } // Validate the `hostGroup` property.\n\n\n      if (typeof hostGroup !== 'string') {\n        throwError('\\'hostGroup\\' must be a string');\n      } // Validate the `id` property.\n\n\n      if (typeof id !== 'string' || id.split(':').length !== 4) {\n        throwError('\\'id\\' must be a string that contains 3 \\':\\' characters');\n      } // Validate the `priority` property.\n\n\n      if (typeof priority !== 'number') {\n        throwError('\\'priority\\' must be a number');\n      } // Validate the `uri` property.\n\n\n      if (typeof uri !== 'string') {\n        throwError('\\'uri\\' must be a string');\n      }\n    }\n  }]);\n  return ServiceHost;\n}();\n\nexports.default = ServiceHost;","map":{"version":3,"sources":["service-host.js"],"names":["ServiceHost","pto","urlObj","Url","failed","replaced","catalog","name","url","defaultUri","hostGroup","id","priority","uri","host","throwError","SERVICE_CATALOGS"],"mappings":"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","sourcesContent":["import Url from 'url';\n\nimport {SERVICE_CATALOGS} from './constants';\n\n/**\n * The parameter transfer object for {@link ServiceHost#constructor}.\n *\n * @typedef {Object} ServiceHostConstructorPTO\n * @property {string} ServiceHostConstructorPTO.catalog - The host's catalog.\n * @property {string} ServiceHostConstructorPTO.defaultUri - The host's default.\n * @property {string} ServiceHostConstructorPTO.hostGroup - The host's group.\n * @property {string} ServiceHostConstructorPTO.id - The host's clusterId.\n * @property {number} ServiceHostConstructorPTO.priority - The host's priority.\n * @property {string} ServiceHostConstructorPTO.uri - The host's uri.\n */\n\n/**\n * The parameter transfer object for {@link ServiceHost#polyGenerate}.\n *\n * @typedef {Object} ServiceHostPolyGeneratePTO\n * @property {string} ServiceHostPolyGeneratePTO.catalog - The target catalog.\n * @property {string} ServiceHostPolyGeneratePTO.name - The service name.\n * @property {string} ServiceHostPolyGeneratePTO.url - The service url.\n */\n\n/**\n * @class\n * @classdesc - Manages a single service host and its associated data.\n */\nexport default class ServiceHost {\n  /**\n   * Generate a new {@link ServiceHost}.\n   *\n   * @public\n   * @constructor\n   * @memberof ServiceHost\n   * @param {ServiceHostConstructorPTO} pto\n   */\n  constructor(pto) {\n    // Validate the parameter transfer object.\n    ServiceHost.validate(pto);\n\n    // Map the parameter transfer object to the class object.\n    /**\n     * The catalog name that the {@link ServiceHost} is associated with.\n     *\n     * @instance\n     * @type {string}\n     * @public\n     * @memberof ServiceHost\n     */\n    this.catalog = pto.catalog;\n\n    /**\n     * The default URI for the {@link ServiceHost}.\n     *\n     * @instance\n     * @type {string}\n     * @public\n     * @memberof ServiceHost\n     */\n    this.default = pto.defaultUri;\n\n    /**\n     * The host group that the {@link ServiceHost} is associated with.\n     *\n     * @instance\n     * @type {string}\n     * @public\n     * @memberof ServiceHost\n     */\n    this.hostGroup = pto.hostGroup;\n\n    /**\n     * The cluster ID of the {@link ServiceHost}.\n     *\n     * @instance\n     * @type {string}\n     * @public\n     * @memberof ServiceHost\n     */\n    this.id = pto.id;\n\n    /**\n     * The priority value of the {@link ServiceHost}. The lower the number, the\n     * higher the priority.\n     *\n     * @instance\n     * @type {number}\n     * @public\n     * @memberof ServiceHost\n     */\n    this.priority = pto.priority;\n\n    /**\n     * The host uri of the {@link ServiceHost}.\n     *\n     * @instance\n     * @type {string}\n     * @public\n     * @memberof ServiceHost\n     */\n    this.uri = pto.uri;\n\n    // Generate flags.\n    /**\n     * If the {@link ServiceHost} is marked as failed.\n     *\n     * @instance\n     * @type {boolean}\n     * @protected\n     * @memberof ServiceHost\n     */\n    this.failed = false;\n\n    /**\n     * If the {@link ServiceHost} is marked as replaced.\n     *\n     * @instance\n     * @type {boolean}\n     * @protected\n     * @memberof ServiceHost\n     */\n    this.replaced = false;\n  }\n\n  /**\n   * If the {@link ServiceHost} is in an active state.\n   *\n   * @public\n   * @memberof ServiceHost\n   * @type {boolean} - `true` if the service is active and usable.\n   */\n  get active() {\n    // Validate that the `ServiceHost` was not marked as failed or replaced.\n    return (!this.failed && !this.replaced);\n  }\n\n  /**\n   * If the host is local to the user's cluster.\n   *\n   * @public\n   * @memberof ServiceHost\n   * @type {boolean} - If the host is local.\n   */\n  get local() {\n    return this.default.includes(this.hostGroup);\n  }\n\n  /**\n   * The service value.\n   *\n   * @public\n   * @memberof ServiceHost\n   * @type {string} - The service value.\n   */\n  get service() {\n    return this.id.split(':')[3];\n  }\n\n  /**\n   * The formatted url for the host.\n   *\n   * @public\n   * @memberof ServiceHost\n   * @type {string} - The service url.\n   */\n  get url() {\n    // Generate a url object from the default url.\n    const urlObj = Url.parse(this.default);\n\n    // Format the host of the generated url object.\n    urlObj.host = `${this.uri}${urlObj.port ? `:${urlObj.port}` : ''}`;\n\n    // Assign the formatted url to this.\n    return Url.format(urlObj);\n  }\n\n  /**\n   * Set one or more of the status properties of the class object.\n   *\n   * @public\n   * @memberof ServiceHost\n   * @param {Object} pto - The parameter transfer object.\n   * @property {boolean} [pto.failed] - The failed status to set.\n   * @property {boolean} [pto.replaced] - the replaced status to set.\n   * @returns {this}\n   */\n  setStatus({failed, replaced}) {\n    if (failed !== undefined) {\n      this.failed = failed;\n    }\n\n    if (replaced !== undefined) {\n      this.replaced = replaced;\n    }\n\n    return this;\n  }\n\n  /**\n   * Generate a service host using only a catalog, name, and URL.\n   *\n   * @public\n   * @static\n   * @memberof ServiceHost\n   * @param {ServiceHostPolyGeneratePTO} pto\n   * @returns {ServiceHost} - The generated service host.\n   */\n  static polyGenerate({catalog, name, url}) {\n    return new ServiceHost({\n      catalog,\n      defaultUri: url,\n      hostGroup: Url.parse(url).host,\n      id: (name) ? `poly-head:poly-group:poly-cluster:${name}` : undefined,\n      priority: 1,\n      uri: Url.parse(url).host\n    });\n  }\n\n  /**\n   * Validate that a constructor parameter transfer object is valid.\n   *\n   * @public\n   * @static\n   * @memberof ServiceHost\n   * @param {ServiceHostConstructorPTO} pto\n   * @throws - If the parameter transfer object is not valid.\n   * @returns {undefined}\n   */\n  static validate({\n    catalog,\n    defaultUri,\n    hostGroup,\n    id,\n    priority,\n    uri\n  }) {\n    // Generate error-throwing method.\n    const throwError = (msg) => {\n      throw new Error(`service-host: invalid constructor parameters, ${msg}`);\n    };\n\n    // Validate the catalog property.\n    if (!SERVICE_CATALOGS.includes(catalog)) {\n      throwError('\\'catalog\\' must be a string');\n    }\n\n    // Validate the `defaultUri` property.\n    if (typeof defaultUri !== 'string') {\n      throwError('\\'defaultUri\\' must be a string');\n    }\n\n    // Validate the `hostGroup` property.\n    if (typeof hostGroup !== 'string') {\n      throwError('\\'hostGroup\\' must be a string');\n    }\n\n    // Validate the `id` property.\n    if (typeof id !== 'string' || id.split(':').length !== 4) {\n      throwError('\\'id\\' must be a string that contains 3 \\':\\' characters');\n    }\n\n    // Validate the `priority` property.\n    if (typeof priority !== 'number') {\n      throwError('\\'priority\\' must be a number');\n    }\n\n    // Validate the `uri` property.\n    if (typeof uri !== 'string') {\n      throwError('\\'uri\\' must be a string');\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}