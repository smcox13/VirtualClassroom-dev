{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport { getEngine } from \"./common.js\";\nimport TBSRequest from \"./TBSRequest.js\";\nimport Signature from \"./Signature.js\";\nimport Request from \"./Request.js\";\nimport CertID from \"./CertID.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC6960\r\n */\n\nexport default class OCSPRequest {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for OCSPRequest class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {TBSRequest}\r\n     * @desc tbsRequest\r\n     */\n    this.tbsRequest = getParametersValue(parameters, \"tbsRequest\", OCSPRequest.defaultValues(\"tbsRequest\"));\n    if (\"optionalSignature\" in parameters)\n      /**\r\n       * @type {Signature}\r\n       * @desc optionalSignature\r\n       */\n      this.optionalSignature = getParametersValue(parameters, \"optionalSignature\", OCSPRequest.defaultValues(\"optionalSignature\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"tbsRequest\":\n        return new TBSRequest();\n\n      case \"optionalSignature\":\n        return new Signature();\n\n      default:\n        throw new Error(`Invalid member name for OCSPRequest class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"tbsRequest\":\n        // noinspection OverlyComplexBooleanExpressionJS\n        return TBSRequest.compareWithDefault(\"tbs\", memberValue.tbs) && TBSRequest.compareWithDefault(\"version\", memberValue.version) && TBSRequest.compareWithDefault(\"requestorName\", memberValue.requestorName) && TBSRequest.compareWithDefault(\"requestList\", memberValue.requestList) && TBSRequest.compareWithDefault(\"requestExtensions\", memberValue.requestExtensions);\n\n      case \"optionalSignature\":\n        return Signature.compareWithDefault(\"signatureAlgorithm\", memberValue.signatureAlgorithm) && Signature.compareWithDefault(\"signature\", memberValue.signature) && Signature.compareWithDefault(\"certs\", memberValue.certs);\n\n      default:\n        throw new Error(`Invalid member name for OCSPRequest class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * OCSPRequest     ::=     SEQUENCE {\r\n   *    tbsRequest                  TBSRequest,\r\n   *    optionalSignature   [0]     EXPLICIT Signature OPTIONAL }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [tbsRequest]\r\n     * @property {string} [optionalSignature]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"OCSPRequest\",\n      value: [TBSRequest.schema(names.tbsRequest || {\n        names: {\n          blockName: \"tbsRequest\"\n        }\n      }), new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [Signature.schema(names.optionalSignature || {\n          names: {\n            blockName: \"optionalSignature\"\n          }\n        })]\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"tbsRequest\", \"optionalSignature\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, OCSPRequest.schema());\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for OCSPRequest\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.tbsRequest = new TBSRequest({\n      schema: asn1.result.tbsRequest\n    });\n    if (\"optionalSignature\" in asn1.result) this.optionalSignature = new Signature({\n      schema: asn1.result.optionalSignature\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema(encodeFlag = false) {\n    //region Create array for output sequence\n    const outputArray = [];\n    outputArray.push(this.tbsRequest.toSchema(encodeFlag));\n    if (\"optionalSignature\" in this) outputArray.push(this.optionalSignature.toSchema()); //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const _object = {\n      tbsRequest: this.tbsRequest.toJSON()\n    };\n    if (\"optionalSignature\" in this) _object.optionalSignature = this.optionalSignature.toJSON();\n    return _object;\n  } //**********************************************************************************\n\n  /**\r\n   * Making OCSP Request for specific certificate\r\n   * @param {Certificate} certificate Certificate making OCSP Request for\r\n   * @param {Object} parameters Additional parameters\r\n   * @returns {Promise}\r\n   */\n\n\n  createForCertificate(certificate, parameters) {\n    //region Initial variables\n    let sequence = Promise.resolve();\n    const certID = new CertID(); //endregion\n    //region Create OCSP certificate identifier for the certificate\n\n    sequence = sequence.then(() => certID.createForCertificate(certificate, parameters)); //endregion\n    //region Make final request data\n\n    sequence = sequence.then(() => {\n      this.tbsRequest = new TBSRequest({\n        requestList: [new Request({\n          reqCert: certID\n        })]\n      });\n    }, error => Promise.reject(error)); //endregion\n\n    return sequence;\n  } //**********************************************************************************\n\n  /**\r\n   * Make signature for current OCSP Request\r\n   * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n   * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n   * @returns {Promise}\r\n   */\n\n\n  sign(privateKey, hashAlgorithm = \"SHA-1\") {\n    //region Initial checking\n    //region Check private key\n    if (typeof privateKey === \"undefined\") return Promise.reject(\"Need to provide a private key for signing\"); //endregion\n    //region Check that \"optionalSignature\" exists in the current request\n\n    if (\"optionalSignature\" in this === false) return Promise.reject(\"Need to create \\\"optionalSignature\\\" field before signing\"); //endregion\n    //endregion\n    //region Initial variables\n\n    let sequence = Promise.resolve();\n    let parameters;\n    let tbs;\n    const engine = getEngine(); //endregion\n    //region Get a \"default parameters\" for current algorithm and set correct signature algorithm\n\n    sequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\n    sequence = sequence.then(result => {\n      parameters = result.parameters;\n      this.optionalSignature.signatureAlgorithm = result.signatureAlgorithm;\n    }); //endregion\n    //region Create TBS data for signing\n\n    sequence = sequence.then(() => {\n      tbs = this.tbsRequest.toSchema(true).toBER(false);\n    }); //endregion\n    //region Signing TBS data on provided private key\n\n    sequence = sequence.then(() => engine.subtle.signWithPrivateKey(tbs, privateKey, parameters));\n    sequence = sequence.then(result => {\n      this.optionalSignature.signature = new asn1js.BitString({\n        valueHex: result\n      });\n    }); //endregion\n\n    return sequence;\n  } //**********************************************************************************\n\n\n  verify() {} // TODO: Create the function\n  //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/OCSPRequest.js"],"names":["asn1js","getParametersValue","clearProps","getEngine","TBSRequest","Signature","Request","CertID","OCSPRequest","constructor","parameters","tbsRequest","defaultValues","optionalSignature","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","tbs","version","requestorName","requestList","requestExtensions","signatureAlgorithm","signature","certs","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","toSchema","encodeFlag","outputArray","push","toJSON","_object","createForCertificate","certificate","sequence","Promise","resolve","certID","then","reqCert","error","reject","sign","privateKey","hashAlgorithm","engine","subtle","getSignatureParameters","toBER","signWithPrivateKey","BitString","valueHex","verify"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport { getEngine } from \"./common.js\";\r\nimport TBSRequest from \"./TBSRequest.js\";\r\nimport Signature from \"./Signature.js\";\r\nimport Request from \"./Request.js\";\r\nimport CertID from \"./CertID.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class OCSPRequest \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OCSPRequest class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {TBSRequest}\r\n\t\t * @desc tbsRequest\r\n\t\t */\r\n\t\tthis.tbsRequest = getParametersValue(parameters, \"tbsRequest\", OCSPRequest.defaultValues(\"tbsRequest\"));\r\n\t\t\r\n\t\tif(\"optionalSignature\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Signature}\r\n\t\t\t * @desc optionalSignature\r\n\t\t\t */\r\n\t\t\tthis.optionalSignature = getParametersValue(parameters, \"optionalSignature\", OCSPRequest.defaultValues(\"optionalSignature\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsRequest\":\r\n\t\t\t\treturn new TBSRequest();\r\n\t\t\tcase \"optionalSignature\":\r\n\t\t\t\treturn new Signature();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsRequest\":\r\n\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\treturn ((TBSRequest.compareWithDefault(\"tbs\", memberValue.tbs)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"version\", memberValue.version)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"requestorName\", memberValue.requestorName)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"requestList\", memberValue.requestList)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"requestExtensions\", memberValue.requestExtensions)));\r\n\t\t\tcase \"optionalSignature\":\r\n\t\t\t\treturn ((Signature.compareWithDefault(\"signatureAlgorithm\", memberValue.signatureAlgorithm)) &&\r\n\t\t\t\t(Signature.compareWithDefault(\"signature\", memberValue.signature)) &&\r\n\t\t\t\t(Signature.compareWithDefault(\"certs\", memberValue.certs)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OCSPRequest     ::=     SEQUENCE {\r\n\t *    tbsRequest                  TBSRequest,\r\n\t *    optionalSignature   [0]     EXPLICIT Signature OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsRequest]\r\n\t\t * @property {string} [optionalSignature]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: names.blockName || \"OCSPRequest\",\r\n\t\t\tvalue: [\r\n\t\t\t\tTBSRequest.schema(names.tbsRequest || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"tbsRequest\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tSignature.schema(names.optionalSignature || {\r\n\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\tblockName: \"optionalSignature\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"tbsRequest\",\r\n\t\t\t\"optionalSignature\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOCSPRequest.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OCSPRequest\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbsRequest = new TBSRequest({ schema: asn1.result.tbsRequest });\r\n\t\tif(\"optionalSignature\" in asn1.result)\r\n\t\t\tthis.optionalSignature = new Signature({ schema: asn1.result.optionalSignature });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.tbsRequest.toSchema(encodeFlag));\r\n\t\tif(\"optionalSignature\" in this)\r\n\t\t\toutputArray.push(this.optionalSignature.toSchema());\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttbsRequest: this.tbsRequest.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"optionalSignature\" in this)\r\n\t\t\t_object.optionalSignature = this.optionalSignature.toJSON();\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Making OCSP Request for specific certificate\r\n\t * @param {Certificate} certificate Certificate making OCSP Request for\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tcreateForCertificate(certificate, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst certID = new CertID();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create OCSP certificate identifier for the certificate\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcertID.createForCertificate(certificate, parameters)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make final request data\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbsRequest = new TBSRequest({\r\n\t\t\t\trequestList: [\r\n\t\t\t\t\tnew Request({\r\n\t\t\t\t\t\treqCert: certID\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make signature for current OCSP Request\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Check private key\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check that \"optionalSignature\" exists in the current request\r\n\t\tif((\"optionalSignature\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Need to create \\\"optionalSignature\\\" field before signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tlet tbs;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.optionalSignature.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\ttbs = this.tbsRequest.toSchema(true).toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.optionalSignature.signature = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tverify()\r\n\t{\r\n\t\t// TODO: Create the function\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}