{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar HostUtils = {};\n/**\n * parse the relevant host values that we care about: id\n * @param {Object} host\n * @returns {Object} parsed host or null if host was undefined\n */\n\nHostUtils.parse = function (host) {\n  if (host) {\n    return {\n      hostId: HostUtils.getId(host)\n    };\n  }\n\n  return null;\n};\n/**\n * get the previous and current host values parsed, as well as the boolean updates\n * @param {Object} oldHost\n * @param {Object} newHost\n * @returns {Object}\n * previous: {Object} old host, current: {Object} new host, updates: {isNewHost: {boolean}} boolean update values\n */\n\n\nHostUtils.getHosts = function (oldHost, newHost) {\n  var previous = oldHost && HostUtils.parse(oldHost);\n  var current = newHost && HostUtils.parse(newHost);\n  return {\n    previous: previous,\n    current: current,\n    updates: {\n      isNewHost: previous && current ? HostUtils.isDifferentHosts(previous.hostId, current.hostId) : true\n    }\n  };\n};\n/**\n * determine by id if 2 hosts are different\n * @param {String} previousId\n * @param {String} currentId\n * @returns {Boolean}\n */\n\n\nHostUtils.isDifferentHosts = function (previousId, currentId) {\n  return previousId !== currentId;\n};\n/**\n * Extract the id from the host object\n * @param {Object} host\n * @returns {String}\n */\n\n\nHostUtils.getId = function (host) {\n  if (!host) {\n    return null;\n  }\n\n  return host.id;\n};\n\nexports.default = HostUtils;","map":{"version":3,"sources":["hostUtils.js"],"names":["HostUtils","hostId","previous","oldHost","current","newHost","updates","isNewHost","previousId","host"],"mappings":";;;;;AAAA,IAAMA,SAAAA,GAAN,EAAA;AAEA;;;;;;AAKAA,SAAAA,CAAAA,KAAAA,GAAkB,UAAA,IAAA,EAAU;AAC1B,MAAA,IAAA,EAAU;AACR,WAAO;AACLC,MAAAA,MAAAA,EAAQD,SAAAA,CAAAA,KAAAA,CAAAA,IAAAA;AADH,KAAP;AAGD;;AAED,SAAA,IAAA;AAPFA,CAAAA;AAUA;;;;;;;;;AAOAA,SAAAA,CAAAA,QAAAA,GAAqB,UAAA,OAAA,EAAA,OAAA,EAAsB;AACzC,MAAME,QAAAA,GAAWC,OAAAA,IAAWH,SAAAA,CAAAA,KAAAA,CAA5B,OAA4BA,CAA5B;AACA,MAAMI,OAAAA,GAAUC,OAAAA,IAAWL,SAAAA,CAAAA,KAAAA,CAA3B,OAA2BA,CAA3B;AAEA,SAAO;AACLE,IAAAA,QAAAA,EADK,QAAA;AAELE,IAAAA,OAAAA,EAFK,OAAA;AAGLE,IAAAA,OAAAA,EAAS;AACPC,MAAAA,SAAAA,EAAWL,QAAAA,IAAAA,OAAAA,GAAsBF,SAAAA,CAAAA,gBAAAA,CAA2BE,QAAAA,CAA3BF,MAAAA,EAA4CI,OAAAA,CAAlEF,MAAsBF,CAAtBE,GAAoF;AADxF;AAHJ,GAAP;AAJFF,CAAAA;AAaA;;;;;;;;AAMAA,SAAAA,CAAAA,gBAAAA,GAA6B,UAAA,UAAA,EAAA,SAAA,EAAA;AAAA,SAA2BQ,UAAAA,KAA3B,SAAA;AAA7BR,CAAAA;AAEA;;;;;;;AAKAA,SAAAA,CAAAA,KAAAA,GAAkB,UAAA,IAAA,EAAU;AAC1B,MAAI,CAAJ,IAAA,EAAW;AACT,WAAA,IAAA;AACD;;AAED,SAAOS,IAAAA,CAAP,EAAA;AALFT,CAAAA;;kBAQeA,S","sourcesContent":["const HostUtils = {};\n\n/**\n * parse the relevant host values that we care about: id\n * @param {Object} host\n * @returns {Object} parsed host or null if host was undefined\n */\nHostUtils.parse = (host) => {\n  if (host) {\n    return {\n      hostId: HostUtils.getId(host)\n    };\n  }\n\n  return null;\n};\n\n/**\n * get the previous and current host values parsed, as well as the boolean updates\n * @param {Object} oldHost\n * @param {Object} newHost\n * @returns {Object}\n * previous: {Object} old host, current: {Object} new host, updates: {isNewHost: {boolean}} boolean update values\n */\nHostUtils.getHosts = (oldHost, newHost) => {\n  const previous = oldHost && HostUtils.parse(oldHost);\n  const current = newHost && HostUtils.parse(newHost);\n\n  return {\n    previous,\n    current,\n    updates: {\n      isNewHost: previous && current ? HostUtils.isDifferentHosts(previous.hostId, current.hostId) : true\n    }\n  };\n};\n\n/**\n * determine by id if 2 hosts are different\n * @param {String} previousId\n * @param {String} currentId\n * @returns {Boolean}\n */\nHostUtils.isDifferentHosts = (previousId, currentId) => previousId !== currentId;\n\n/**\n * Extract the id from the host object\n * @param {Object} host\n * @returns {String}\n */\nHostUtils.getId = (host) => {\n  if (!host) {\n    return null;\n  }\n\n  return host.id;\n};\n\nexport default HostUtils;\n"]},"metadata":{},"sourceType":"script"}