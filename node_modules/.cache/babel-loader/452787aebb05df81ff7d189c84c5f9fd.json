{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport ResponseBytes from \"./ResponseBytes.js\";\nimport BasicOCSPResponse from \"./BasicOCSPResponse.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC6960\r\n */\n\nexport default class OCSPResponse {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for OCSPResponse class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Enumerated}\r\n     * @desc responseStatus\r\n     */\n    this.responseStatus = getParametersValue(parameters, \"responseStatus\", OCSPResponse.defaultValues(\"responseStatus\"));\n    if (\"responseBytes\" in parameters)\n      /**\r\n       * @type {ResponseBytes}\r\n       * @desc responseBytes\r\n       */\n      this.responseBytes = getParametersValue(parameters, \"responseBytes\", OCSPResponse.defaultValues(\"responseBytes\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"responseStatus\":\n        return new asn1js.Enumerated();\n\n      case \"responseBytes\":\n        return new ResponseBytes();\n\n      default:\n        throw new Error(`Invalid member name for OCSPResponse class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"responseStatus\":\n        return memberValue.isEqual(OCSPResponse.defaultValues(memberName));\n\n      case \"responseBytes\":\n        return ResponseBytes.compareWithDefault(\"responseType\", memberValue.responseType) && ResponseBytes.compareWithDefault(\"response\", memberValue.response);\n\n      default:\n        throw new Error(`Invalid member name for OCSPResponse class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * OCSPResponse ::= SEQUENCE {\r\n   *    responseStatus         OCSPResponseStatus,\r\n   *    responseBytes          [0] EXPLICIT ResponseBytes OPTIONAL }\r\n   *\r\n   * OCSPResponseStatus ::= ENUMERATED {\r\n   *    successful            (0),  -- Response has valid confirmations\r\n   *    malformedRequest      (1),  -- Illegal confirmation request\r\n   *    internalError         (2),  -- Internal error in issuer\r\n   *    tryLater              (3),  -- Try again later\r\n   *    -- (4) is not used\r\n   *    sigRequired           (5),  -- Must sign the request\r\n   *    unauthorized          (6)   -- Request unauthorized\r\n   * }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [responseStatus]\r\n     * @property {string} [responseBytes]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"OCSPResponse\",\n      value: [new asn1js.Enumerated({\n        name: names.responseStatus || \"responseStatus\"\n      }), new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [ResponseBytes.schema(names.responseBytes || {\n          names: {\n            blockName: \"responseBytes\"\n          }\n        })]\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"responseStatus\", \"responseBytes\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, OCSPResponse.schema());\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for OCSPResponse\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.responseStatus = asn1.result.responseStatus;\n    if (\"responseBytes\" in asn1.result) this.responseBytes = new ResponseBytes({\n      schema: asn1.result.responseBytes\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n    outputArray.push(this.responseStatus);\n\n    if (\"responseBytes\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [this.responseBytes.toSchema()]\n      }));\n    } //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const _object = {\n      responseStatus: this.responseStatus.toJSON()\n    };\n    if (\"responseBytes\" in this) _object.responseBytes = this.responseBytes.toJSON();\n    return _object;\n  } //**********************************************************************************\n\n  /**\r\n   * Get OCSP response status for specific certificate\r\n   * @param {Certificate} certificate\r\n   * @param {Certificate} issuerCertificate\r\n   * @returns {*}\r\n   */\n\n\n  getCertificateStatus(certificate, issuerCertificate) {\n    //region Initial variables\n    let basicResponse;\n    const result = {\n      isForCertificate: false,\n      status: 2 // 0 = good, 1 = revoked, 2 = unknown\n\n    }; //endregion\n    //region Check that \"ResponseBytes\" contain \"OCSP_BASIC_RESPONSE\"\n\n    if (\"responseBytes\" in this === false) return result;\n    if (this.responseBytes.responseType !== \"1.3.6.1.5.5.7.48.1.1\") // id-pkix-ocsp-basic\n      return result;\n\n    try {\n      const asn1Basic = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\n      basicResponse = new BasicOCSPResponse({\n        schema: asn1Basic.result\n      });\n    } catch (ex) {\n      return result;\n    } //endregion\n\n\n    return basicResponse.getCertificateStatus(certificate, issuerCertificate);\n  } //**********************************************************************************\n\n  /**\r\n   * Make a signature for current OCSP Response\r\n   * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n   * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n   * @returns {Promise}\r\n   */\n\n\n  sign(privateKey, hashAlgorithm) {\n    //region Check that ResponseData has type BasicOCSPResponse and sign it\n    if (this.responseBytes.responseType === \"1.3.6.1.5.5.7.48.1.1\") {\n      const asn1 = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\n      const basicResponse = new BasicOCSPResponse({\n        schema: asn1.result\n      });\n      return basicResponse.sign(privateKey, hashAlgorithm);\n    }\n\n    return Promise.reject(`Unknown ResponseBytes type: ${this.responseBytes.responseType}`); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Verify current OCSP Response\r\n   * @param {Certificate|null} issuerCertificate In order to decrease size of resp issuer cert could be ommited. In such case you need manually provide it.\r\n   * @returns {Promise}\r\n   */\n\n\n  verify(issuerCertificate = null) {\n    //region Check that ResponseBytes exists in the object\n    if (\"responseBytes\" in this === false) return Promise.reject(\"Empty ResponseBytes field\"); //endregion\n    //region Check that ResponceData has type BasicOCSPResponse and verify it\n\n    if (this.responseBytes.responseType === \"1.3.6.1.5.5.7.48.1.1\") {\n      const asn1 = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\n      const basicResponse = new BasicOCSPResponse({\n        schema: asn1.result\n      });\n\n      if (issuerCertificate !== null) {\n        if (\"certs\" in basicResponse === false) basicResponse.certs = [];\n        basicResponse.certs.push(issuerCertificate);\n      }\n\n      return basicResponse.verify();\n    }\n\n    return Promise.reject(`Unknown ResponseBytes type: ${this.responseBytes.responseType}`); //endregion\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/OCSPResponse.js"],"names":["asn1js","getParametersValue","clearProps","ResponseBytes","BasicOCSPResponse","OCSPResponse","constructor","parameters","responseStatus","defaultValues","responseBytes","fromSchema","schema","memberName","Enumerated","Error","compareWithDefault","memberValue","isEqual","responseType","response","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","toSchema","outputArray","push","toJSON","_object","getCertificateStatus","certificate","issuerCertificate","basicResponse","isForCertificate","status","asn1Basic","fromBER","valueBlock","valueHex","ex","sign","privateKey","hashAlgorithm","Promise","reject","verify","certs"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport ResponseBytes from \"./ResponseBytes.js\";\r\nimport BasicOCSPResponse from \"./BasicOCSPResponse.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class OCSPResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OCSPResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Enumerated}\r\n\t\t * @desc responseStatus\r\n\t\t */\r\n\t\tthis.responseStatus = getParametersValue(parameters, \"responseStatus\", OCSPResponse.defaultValues(\"responseStatus\"));\r\n\r\n\t\tif(\"responseBytes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ResponseBytes}\r\n\t\t\t * @desc responseBytes\r\n\t\t\t */\r\n\t\t\tthis.responseBytes = getParametersValue(parameters, \"responseBytes\", OCSPResponse.defaultValues(\"responseBytes\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"responseStatus\":\r\n\t\t\t\treturn new asn1js.Enumerated();\r\n\t\t\tcase \"responseBytes\":\r\n\t\t\t\treturn new ResponseBytes();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"responseStatus\":\r\n\t\t\t\treturn (memberValue.isEqual(OCSPResponse.defaultValues(memberName)));\r\n\t\t\tcase \"responseBytes\":\r\n\t\t\t\treturn ((ResponseBytes.compareWithDefault(\"responseType\", memberValue.responseType)) &&\r\n\t\t\t\t\t\t(ResponseBytes.compareWithDefault(\"response\", memberValue.response)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OCSPResponse ::= SEQUENCE {\r\n\t *    responseStatus         OCSPResponseStatus,\r\n\t *    responseBytes          [0] EXPLICIT ResponseBytes OPTIONAL }\r\n\t *\r\n\t * OCSPResponseStatus ::= ENUMERATED {\r\n\t *    successful            (0),  -- Response has valid confirmations\r\n\t *    malformedRequest      (1),  -- Illegal confirmation request\r\n\t *    internalError         (2),  -- Internal error in issuer\r\n\t *    tryLater              (3),  -- Try again later\r\n\t *    -- (4) is not used\r\n\t *    sigRequired           (5),  -- Must sign the request\r\n\t *    unauthorized          (6)   -- Request unauthorized\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [responseStatus]\r\n\t\t * @property {string} [responseBytes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"OCSPResponse\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Enumerated({ name: (names.responseStatus || \"responseStatus\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tResponseBytes.schema(names.responseBytes || {\r\n\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\tblockName: \"responseBytes\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"responseStatus\",\r\n\t\t\t\"responseBytes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOCSPResponse.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OCSPResponse\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.responseStatus = asn1.result.responseStatus;\r\n\t\tif(\"responseBytes\" in asn1.result)\r\n\t\t\tthis.responseBytes = new ResponseBytes({ schema: asn1.result.responseBytes });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.responseStatus);\r\n\t\tif(\"responseBytes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.responseBytes.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tresponseStatus: this.responseStatus.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"responseBytes\" in this)\r\n\t\t\t_object.responseBytes = this.responseBytes.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OCSP response status for specific certificate\r\n\t * @param {Certificate} certificate\r\n\t * @param {Certificate} issuerCertificate\r\n\t * @returns {*}\r\n\t */\r\n\tgetCertificateStatus(certificate, issuerCertificate)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet basicResponse;\r\n\r\n\t\tconst result = {\r\n\t\t\tisForCertificate: false,\r\n\t\t\tstatus: 2 // 0 = good, 1 = revoked, 2 = unknown\r\n\t\t};\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"ResponseBytes\" contain \"OCSP_BASIC_RESPONSE\"\r\n\t\tif((\"responseBytes\" in this) === false)\r\n\t\t\treturn result;\r\n\r\n\t\tif(this.responseBytes.responseType !== \"1.3.6.1.5.5.7.48.1.1\") // id-pkix-ocsp-basic\r\n\t\t\treturn result;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tconst asn1Basic = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\r\n\t\t\tbasicResponse = new BasicOCSPResponse({ schema: asn1Basic.result });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn basicResponse.getCertificateStatus(certificate, issuerCertificate);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make a signature for current OCSP Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm)\r\n\t{\r\n\t\t//region Check that ResponseData has type BasicOCSPResponse and sign it\r\n\t\tif(this.responseBytes.responseType === \"1.3.6.1.5.5.7.48.1.1\")\r\n\t\t{\r\n\t\t\tconst asn1 = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\r\n\t\t\tconst basicResponse = new BasicOCSPResponse({ schema: asn1.result });\r\n\r\n\t\t\treturn basicResponse.sign(privateKey, hashAlgorithm);\r\n\t\t}\r\n\r\n\t\treturn Promise.reject(`Unknown ResponseBytes type: ${this.responseBytes.responseType}`);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current OCSP Response\r\n\t * @param {Certificate|null} issuerCertificate In order to decrease size of resp issuer cert could be ommited. In such case you need manually provide it.\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(issuerCertificate = null)\r\n\t{\r\n\t\t//region Check that ResponseBytes exists in the object\r\n\t\tif((\"responseBytes\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Empty ResponseBytes field\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that ResponceData has type BasicOCSPResponse and verify it\r\n\t\tif(this.responseBytes.responseType === \"1.3.6.1.5.5.7.48.1.1\")\r\n\t\t{\r\n\t\t\tconst asn1 = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\r\n\t\t\tconst basicResponse = new BasicOCSPResponse({ schema: asn1.result });\r\n\r\n\t\t\tif(issuerCertificate !== null)\r\n\t\t\t{\r\n\t\t\t\tif((\"certs\" in basicResponse) === false)\r\n\t\t\t\t\tbasicResponse.certs = [];\r\n\t\t\t\t\r\n\t\t\t\tbasicResponse.certs.push(issuerCertificate);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn basicResponse.verify();\r\n\t\t}\r\n\r\n\t\treturn Promise.reject(`Unknown ResponseBytes type: ${this.responseBytes.responseType}`);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}