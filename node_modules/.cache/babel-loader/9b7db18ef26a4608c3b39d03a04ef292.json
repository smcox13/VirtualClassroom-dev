{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralName from \"./GeneralName.js\";\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nexport default class DistributionPoint {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for DistributionPoint class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   * @property {Object} [distributionPoint]\r\n   * @property {Object} [reasons]\r\n   * @property {Object} [cRLIssuer]\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    if (\"distributionPoint\" in parameters)\n      /**\r\n       * @type {Array.<GeneralName>}\r\n       * @desc distributionPoint\r\n       */\n      this.distributionPoint = getParametersValue(parameters, \"distributionPoint\", DistributionPoint.defaultValues(\"distributionPoint\"));\n    if (\"reasons\" in parameters)\n      /**\r\n       * @type {BitString}\r\n       * @desc values\r\n       */\n      this.reasons = getParametersValue(parameters, \"reasons\", DistributionPoint.defaultValues(\"reasons\"));\n    if (\"cRLIssuer\" in parameters)\n      /**\r\n       * @type {Array.<GeneralName>}\r\n       * @desc cRLIssuer\r\n       */\n      this.cRLIssuer = getParametersValue(parameters, \"cRLIssuer\", DistributionPoint.defaultValues(\"cRLIssuer\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"distributionPoint\":\n        return [];\n\n      case \"reasons\":\n        return new asn1js.BitString();\n\n      case \"cRLIssuer\":\n        return [];\n\n      default:\n        throw new Error(`Invalid member name for DistributionPoint class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * DistributionPoint ::= SEQUENCE {\r\n   *    distributionPoint       [0]     DistributionPointName OPTIONAL,\r\n   *    reasons                 [1]     ReasonFlags OPTIONAL,\r\n   *    cRLIssuer               [2]     GeneralNames OPTIONAL }\r\n   *\r\n   * DistributionPointName ::= CHOICE {\r\n   *    fullName                [0]     GeneralNames,\r\n   *    nameRelativeToCRLIssuer [1]     RelativeDistinguishedName }\r\n   *\r\n   * ReasonFlags ::= BIT STRING {\r\n   *    unused                  (0),\r\n   *    keyCompromise           (1),\r\n   *    cACompromise            (2),\r\n   *    affiliationChanged      (3),\r\n   *    superseded              (4),\r\n   *    cessationOfOperation    (5),\r\n   *    certificateHold         (6),\r\n   *    privilegeWithdrawn      (7),\r\n   *    aACompromise            (8) }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [distributionPoint]\r\n     * @property {string} [distributionPointNames]\r\n     * @property {string} [reasons]\r\n     * @property {string} [cRLIssuer]\r\n     * @property {string} [cRLIssuerNames]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [new asn1js.Choice({\n          value: [new asn1js.Constructed({\n            name: names.distributionPoint || \"\",\n            optional: true,\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 0 // [0]\n\n            },\n            value: [new asn1js.Repeated({\n              name: names.distributionPointNames || \"\",\n              value: GeneralName.schema()\n            })]\n          }), new asn1js.Constructed({\n            name: names.distributionPoint || \"\",\n            optional: true,\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 1 // [1]\n\n            },\n            value: RelativeDistinguishedNames.schema().valueBlock.value\n          })]\n        })]\n      }), new asn1js.Primitive({\n        name: names.reasons || \"\",\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        }\n      }), // IMPLICIT bitstring value\n      new asn1js.Constructed({\n        name: names.cRLIssuer || \"\",\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 2 // [2]\n\n        },\n        value: [new asn1js.Repeated({\n          name: names.cRLIssuerNames || \"\",\n          value: GeneralName.schema()\n        })]\n      }) // IMPLICIT bitstring value\n      ]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"distributionPoint\", \"distributionPointNames\", \"reasons\", \"cRLIssuer\", \"cRLIssuerNames\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, DistributionPoint.schema({\n      names: {\n        distributionPoint: \"distributionPoint\",\n        distributionPointNames: \"distributionPointNames\",\n        reasons: \"reasons\",\n        cRLIssuer: \"cRLIssuer\",\n        cRLIssuerNames: \"cRLIssuerNames\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for DistributionPoint\"); //endregion\n    //region Get internal properties from parsed schema\n\n    if (\"distributionPoint\" in asn1.result) {\n      if (asn1.result.distributionPoint.idBlock.tagNumber === 0) // GENERAL_NAMES variant\n        this.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new GeneralName({\n          schema: element\n        }));\n\n      if (asn1.result.distributionPoint.idBlock.tagNumber === 1) // RDN variant\n        {\n          this.distributionPoint = new RelativeDistinguishedNames({\n            schema: new asn1js.Sequence({\n              value: asn1.result.distributionPoint.valueBlock.value\n            })\n          });\n        }\n    }\n\n    if (\"reasons\" in asn1.result) this.reasons = new asn1js.BitString({\n      valueHex: asn1.result.reasons.valueBlock.valueHex\n    });\n    if (\"cRLIssuer\" in asn1.result) this.cRLIssuer = Array.from(asn1.result.cRLIssuerNames, element => new GeneralName({\n      schema: element\n    })); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n\n    if (\"distributionPoint\" in this) {\n      let internalValue;\n\n      if (this.distributionPoint instanceof Array) {\n        internalValue = new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: Array.from(this.distributionPoint, element => element.toSchema())\n        });\n      } else {\n        internalValue = new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: [this.distributionPoint.toSchema()]\n        });\n      }\n\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [internalValue]\n      }));\n    }\n\n    if (\"reasons\" in this) {\n      outputArray.push(new asn1js.Primitive({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        valueHex: this.reasons.valueBlock.valueHex\n      }));\n    }\n\n    if (\"cRLIssuer\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 2 // [2]\n\n        },\n        value: Array.from(this.cRLIssuer, element => element.toSchema())\n      }));\n    } //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const object = {};\n\n    if (\"distributionPoint\" in this) {\n      if (this.distributionPoint instanceof Array) object.distributionPoint = Array.from(this.distributionPoint, element => element.toJSON());else object.distributionPoint = this.distributionPoint.toJSON();\n    }\n\n    if (\"reasons\" in this) object.reasons = this.reasons.toJSON();\n    if (\"cRLIssuer\" in this) object.cRLIssuer = Array.from(this.cRLIssuer, element => element.toJSON());\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/DistributionPoint.js"],"names":["asn1js","getParametersValue","clearProps","GeneralName","RelativeDistinguishedNames","DistributionPoint","constructor","parameters","distributionPoint","defaultValues","reasons","cRLIssuer","fromSchema","schema","memberName","BitString","Error","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Choice","Repeated","distributionPointNames","valueBlock","Primitive","cRLIssuerNames","asn1","compareSchema","verified","result","Array","from","element","valueHex","toSchema","outputArray","internalValue","push","toJSON","object"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,SAASC,kBAAT,EAA6BC,UAA7B,QAA+C,SAA/C;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,0BAAP,MAAuC,iCAAvC,C,CACA;;AACA;;;;AAGA,eAAe,MAAMC,iBAAN,CACf;AACC;;AACA;;;;;;;;AAQAC,EAAAA,WAAW,CAACC,UAAU,GAAG,EAAd,EACX;AACC;AACA,QAAG,uBAAuBA,UAA1B;AACC;;;;AAIA,WAAKC,iBAAL,GAAyBP,kBAAkB,CAACM,UAAD,EAAa,mBAAb,EAAkCF,iBAAiB,CAACI,aAAlB,CAAgC,mBAAhC,CAAlC,CAA3C;AAED,QAAG,aAAaF,UAAhB;AACC;;;;AAIA,WAAKG,OAAL,GAAeT,kBAAkB,CAACM,UAAD,EAAa,SAAb,EAAwBF,iBAAiB,CAACI,aAAlB,CAAgC,SAAhC,CAAxB,CAAjC;AAED,QAAG,eAAeF,UAAlB;AACC;;;;AAIA,WAAKI,SAAL,GAAiBV,kBAAkB,CAACM,UAAD,EAAa,WAAb,EAA0BF,iBAAiB,CAACI,aAAlB,CAAgC,WAAhC,CAA1B,CAAnC,CArBF,CAsBC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKK,UAAL,CAAgBL,UAAU,CAACM,MAA3B,EA1BF,CA2BC;AACA,GAvCF,CAwCC;;AACA;;;;;;AAIA,SAAOJ,aAAP,CAAqBK,UAArB,EACA;AACC,YAAOA,UAAP;AAEC,WAAK,mBAAL;AACC,eAAO,EAAP;;AACD,WAAK,SAAL;AACC,eAAO,IAAId,MAAM,CAACe,SAAX,EAAP;;AACD,WAAK,WAAL;AACC,eAAO,EAAP;;AACD;AACC,cAAM,IAAIC,KAAJ,CAAW,oDAAmDF,UAAW,EAAzE,CAAN;AATF;AAWA,GA1DF,CA2DC;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAAOD,MAAP,CAAcN,UAAU,GAAG,EAA3B,EACA;AACC;;;;;;;;;AASA,UAAMU,KAAK,GAAGhB,kBAAkB,CAACM,UAAD,EAAa,OAAb,EAAsB,EAAtB,CAAhC;AAEA,WAAQ,IAAIP,MAAM,CAACkB,QAAX,CAAoB;AAC3BC,MAAAA,IAAI,EAAGF,KAAK,CAACG,SAAN,IAAmB,EADC;AAE3BC,MAAAA,KAAK,EAAE,CACN,IAAIrB,MAAM,CAACsB,WAAX,CAAuB;AACtBC,QAAAA,QAAQ,EAAE,IADY;AAEtBC,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AACK;AACbC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAFa;AAMtBL,QAAAA,KAAK,EAAE,CACN,IAAIrB,MAAM,CAAC2B,MAAX,CAAkB;AACjBN,UAAAA,KAAK,EAAE,CACN,IAAIrB,MAAM,CAACsB,WAAX,CAAuB;AACtBH,YAAAA,IAAI,EAAGF,KAAK,CAACT,iBAAN,IAA2B,EADZ;AAEtBe,YAAAA,QAAQ,EAAE,IAFY;AAGtBC,YAAAA,OAAO,EAAE;AACRC,cAAAA,QAAQ,EAAE,CADF;AACK;AACbC,cAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,aAHa;AAOtBL,YAAAA,KAAK,EAAE,CACN,IAAIrB,MAAM,CAAC4B,QAAX,CAAoB;AACnBT,cAAAA,IAAI,EAAGF,KAAK,CAACY,sBAAN,IAAgC,EADpB;AAEnBR,cAAAA,KAAK,EAAElB,WAAW,CAACU,MAAZ;AAFY,aAApB,CADM;AAPe,WAAvB,CADM,EAeN,IAAIb,MAAM,CAACsB,WAAX,CAAuB;AACtBH,YAAAA,IAAI,EAAGF,KAAK,CAACT,iBAAN,IAA2B,EADZ;AAEtBe,YAAAA,QAAQ,EAAE,IAFY;AAGtBC,YAAAA,OAAO,EAAE;AACRC,cAAAA,QAAQ,EAAE,CADF;AACK;AACbC,cAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,aAHa;AAOtBL,YAAAA,KAAK,EAAEjB,0BAA0B,CAACS,MAA3B,GAAoCiB,UAApC,CAA+CT;AAPhC,WAAvB,CAfM;AADU,SAAlB,CADM;AANe,OAAvB,CADM,EAqCN,IAAIrB,MAAM,CAAC+B,SAAX,CAAqB;AACpBZ,QAAAA,IAAI,EAAGF,KAAK,CAACP,OAAN,IAAiB,EADJ;AAEpBa,QAAAA,QAAQ,EAAE,IAFU;AAGpBC,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AACK;AACbC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL;AAHW,OAArB,CArCM,EA4CF;AACJ,UAAI1B,MAAM,CAACsB,WAAX,CAAuB;AACtBH,QAAAA,IAAI,EAAGF,KAAK,CAACN,SAAN,IAAmB,EADJ;AAEtBY,QAAAA,QAAQ,EAAE,IAFY;AAGtBC,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AACK;AACbC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAHa;AAOtBL,QAAAA,KAAK,EAAE,CACN,IAAIrB,MAAM,CAAC4B,QAAX,CAAoB;AACnBT,UAAAA,IAAI,EAAGF,KAAK,CAACe,cAAN,IAAwB,EADZ;AAEnBX,UAAAA,KAAK,EAAElB,WAAW,CAACU,MAAZ;AAFY,SAApB,CADM;AAPe,OAAvB,CA7CM,CA0DH;AA1DG;AAFoB,KAApB,CAAR;AA+DA,GArKF,CAsKC;;AACA;;;;;;AAIAD,EAAAA,UAAU,CAACC,MAAD,EACV;AACC;AACAX,IAAAA,UAAU,CAACW,MAAD,EAAS,CAClB,mBADkB,EAElB,wBAFkB,EAGlB,SAHkB,EAIlB,WAJkB,EAKlB,gBALkB,CAAT,CAAV,CAFD,CASC;AAEA;;AACA,UAAMoB,IAAI,GAAGjC,MAAM,CAACkC,aAAP,CAAqBrB,MAArB,EACZA,MADY,EAEZR,iBAAiB,CAACQ,MAAlB,CAAyB;AACxBI,MAAAA,KAAK,EAAE;AACNT,QAAAA,iBAAiB,EAAE,mBADb;AAENqB,QAAAA,sBAAsB,EAAE,wBAFlB;AAGNnB,QAAAA,OAAO,EAAE,SAHH;AAINC,QAAAA,SAAS,EAAE,WAJL;AAKNqB,QAAAA,cAAc,EAAE;AALV;AADiB,KAAzB,CAFY,CAAb;AAaA,QAAGC,IAAI,CAACE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAInB,KAAJ,CAAU,2EAAV,CAAN,CA1BF,CA2BC;AAEA;;AACA,QAAG,uBAAuBiB,IAAI,CAACG,MAA/B,EACA;AACC,UAAGH,IAAI,CAACG,MAAL,CAAY5B,iBAAZ,CAA8BgB,OAA9B,CAAsCE,SAAtC,KAAoD,CAAvD,EAA0D;AACzD,aAAKlB,iBAAL,GAAyB6B,KAAK,CAACC,IAAN,CAAWL,IAAI,CAACG,MAAL,CAAYP,sBAAvB,EAA+CU,OAAO,IAAI,IAAIpC,WAAJ,CAAgB;AAAEU,UAAAA,MAAM,EAAE0B;AAAV,SAAhB,CAA1D,CAAzB;;AAED,UAAGN,IAAI,CAACG,MAAL,CAAY5B,iBAAZ,CAA8BgB,OAA9B,CAAsCE,SAAtC,KAAoD,CAAvD,EAA0D;AAC1D;AACC,eAAKlB,iBAAL,GAAyB,IAAIJ,0BAAJ,CAA+B;AACvDS,YAAAA,MAAM,EAAE,IAAIb,MAAM,CAACkB,QAAX,CAAoB;AAC3BG,cAAAA,KAAK,EAAEY,IAAI,CAACG,MAAL,CAAY5B,iBAAZ,CAA8BsB,UAA9B,CAAyCT;AADrB,aAApB;AAD+C,WAA/B,CAAzB;AAKA;AACD;;AAED,QAAG,aAAaY,IAAI,CAACG,MAArB,EACC,KAAK1B,OAAL,GAAe,IAAIV,MAAM,CAACe,SAAX,CAAqB;AAAEyB,MAAAA,QAAQ,EAAEP,IAAI,CAACG,MAAL,CAAY1B,OAAZ,CAAoBoB,UAApB,CAA+BU;AAA3C,KAArB,CAAf;AAED,QAAG,eAAeP,IAAI,CAACG,MAAvB,EACC,KAAKzB,SAAL,GAAiB0B,KAAK,CAACC,IAAN,CAAWL,IAAI,CAACG,MAAL,CAAYJ,cAAvB,EAAuCO,OAAO,IAAI,IAAIpC,WAAJ,CAAgB;AAAEU,MAAAA,MAAM,EAAE0B;AAAV,KAAhB,CAAlD,CAAjB,CAjDF,CAkDC;AACA,GA/NF,CAgOC;;AACA;;;;;;AAIAE,EAAAA,QAAQ,GACR;AACC;AACA,UAAMC,WAAW,GAAG,EAApB;;AAEA,QAAG,uBAAuB,IAA1B,EACA;AACC,UAAIC,aAAJ;;AAEA,UAAG,KAAKnC,iBAAL,YAAkC6B,KAArC,EACA;AACCM,QAAAA,aAAa,GAAG,IAAI3C,MAAM,CAACsB,WAAX,CAAuB;AACtCE,UAAAA,OAAO,EAAE;AACRC,YAAAA,QAAQ,EAAE,CADF;AACK;AACbC,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,WAD6B;AAKtCL,UAAAA,KAAK,EAAEgB,KAAK,CAACC,IAAN,CAAW,KAAK9B,iBAAhB,EAAmC+B,OAAO,IAAIA,OAAO,CAACE,QAAR,EAA9C;AAL+B,SAAvB,CAAhB;AAOA,OATD,MAWA;AACCE,QAAAA,aAAa,GAAG,IAAI3C,MAAM,CAACsB,WAAX,CAAuB;AACtCE,UAAAA,OAAO,EAAE;AACRC,YAAAA,QAAQ,EAAE,CADF;AACK;AACbC,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,WAD6B;AAKtCL,UAAAA,KAAK,EAAE,CAAC,KAAKb,iBAAL,CAAuBiC,QAAvB,EAAD;AAL+B,SAAvB,CAAhB;AAOA;;AAEDC,MAAAA,WAAW,CAACE,IAAZ,CAAiB,IAAI5C,MAAM,CAACsB,WAAX,CAAuB;AACvCE,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AACK;AACbC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAD8B;AAKvCL,QAAAA,KAAK,EAAE,CAACsB,aAAD;AALgC,OAAvB,CAAjB;AAOA;;AAED,QAAG,aAAa,IAAhB,EACA;AACCD,MAAAA,WAAW,CAACE,IAAZ,CAAiB,IAAI5C,MAAM,CAAC+B,SAAX,CAAqB;AACrCP,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AACK;AACbC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAD4B;AAKrCc,QAAAA,QAAQ,EAAE,KAAK9B,OAAL,CAAaoB,UAAb,CAAwBU;AALG,OAArB,CAAjB;AAOA;;AAED,QAAG,eAAe,IAAlB,EACA;AACCE,MAAAA,WAAW,CAACE,IAAZ,CAAiB,IAAI5C,MAAM,CAACsB,WAAX,CAAuB;AACvCE,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AACK;AACbC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAD8B;AAKvCL,QAAAA,KAAK,EAAEgB,KAAK,CAACC,IAAN,CAAW,KAAK3B,SAAhB,EAA2B4B,OAAO,IAAIA,OAAO,CAACE,QAAR,EAAtC;AALgC,OAAvB,CAAjB;AAOA,KA1DF,CA2DC;AAEA;;;AACA,WAAQ,IAAIzC,MAAM,CAACkB,QAAX,CAAoB;AAC3BG,MAAAA,KAAK,EAAEqB;AADoB,KAApB,CAAR,CA9DD,CAiEC;AACA,GAxSF,CAySC;;AACA;;;;;;AAIAG,EAAAA,MAAM,GACN;AACC,UAAMC,MAAM,GAAG,EAAf;;AAEA,QAAG,uBAAuB,IAA1B,EACA;AACC,UAAG,KAAKtC,iBAAL,YAAkC6B,KAArC,EACCS,MAAM,CAACtC,iBAAP,GAA2B6B,KAAK,CAACC,IAAN,CAAW,KAAK9B,iBAAhB,EAAmC+B,OAAO,IAAIA,OAAO,CAACM,MAAR,EAA9C,CAA3B,CADD,KAGCC,MAAM,CAACtC,iBAAP,GAA2B,KAAKA,iBAAL,CAAuBqC,MAAvB,EAA3B;AACD;;AAED,QAAG,aAAa,IAAhB,EACCC,MAAM,CAACpC,OAAP,GAAiB,KAAKA,OAAL,CAAamC,MAAb,EAAjB;AAED,QAAG,eAAe,IAAlB,EACCC,MAAM,CAACnC,SAAP,GAAmB0B,KAAK,CAACC,IAAN,CAAW,KAAK3B,SAAhB,EAA2B4B,OAAO,IAAIA,OAAO,CAACM,MAAR,EAAtC,CAAnB;AAED,WAAOC,MAAP;AACA,GAjUF,CAkUC;;;AAlUD,C,CAoUA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class DistributionPoint\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for DistributionPoint class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {Object} [distributionPoint]\r\n\t * @property {Object} [reasons]\r\n\t * @property {Object} [cRLIssuer]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"distributionPoint\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<GeneralName>}\r\n\t\t\t * @desc distributionPoint\r\n\t\t\t */\r\n\t\t\tthis.distributionPoint = getParametersValue(parameters, \"distributionPoint\", DistributionPoint.defaultValues(\"distributionPoint\"));\r\n\r\n\t\tif(\"reasons\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {BitString}\r\n\t\t\t * @desc values\r\n\t\t\t */\r\n\t\t\tthis.reasons = getParametersValue(parameters, \"reasons\", DistributionPoint.defaultValues(\"reasons\"));\r\n\r\n\t\tif(\"cRLIssuer\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<GeneralName>}\r\n\t\t\t * @desc cRLIssuer\r\n\t\t\t */\r\n\t\t\tthis.cRLIssuer = getParametersValue(parameters, \"cRLIssuer\", DistributionPoint.defaultValues(\"cRLIssuer\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"distributionPoint\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"reasons\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"cRLIssuer\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for DistributionPoint class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * DistributionPoint ::= SEQUENCE {\r\n\t *    distributionPoint       [0]     DistributionPointName OPTIONAL,\r\n\t *    reasons                 [1]     ReasonFlags OPTIONAL,\r\n\t *    cRLIssuer               [2]     GeneralNames OPTIONAL }\r\n\t *\r\n\t * DistributionPointName ::= CHOICE {\r\n\t *    fullName                [0]     GeneralNames,\r\n\t *    nameRelativeToCRLIssuer [1]     RelativeDistinguishedName }\r\n\t *\r\n\t * ReasonFlags ::= BIT STRING {\r\n\t *    unused                  (0),\r\n\t *    keyCompromise           (1),\r\n\t *    cACompromise            (2),\r\n\t *    affiliationChanged      (3),\r\n\t *    superseded              (4),\r\n\t *    cessationOfOperation    (5),\r\n\t *    certificateHold         (6),\r\n\t *    privilegeWithdrawn      (7),\r\n\t *    aACompromise            (8) }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [distributionPoint]\r\n\t\t * @property {string} [distributionPointNames]\r\n\t\t * @property {string} [reasons]\r\n\t\t * @property {string} [cRLIssuer]\r\n\t\t * @property {string} [cRLIssuerNames]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tname: (names.distributionPoint || \"\"),\r\n\t\t\t\t\t\t\t\t\toptional: true,\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\t\t\t\t\tname: (names.distributionPointNames || \"\"),\r\n\t\t\t\t\t\t\t\t\t\t\tvalue: GeneralName.schema()\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tname: (names.distributionPoint || \"\"),\r\n\t\t\t\t\t\t\t\t\toptional: true,\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: RelativeDistinguishedNames.schema().valueBlock.value\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.reasons || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t}\r\n\t\t\t\t}), // IMPLICIT bitstring value\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.cRLIssuer || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.cRLIssuerNames || \"\"),\r\n\t\t\t\t\t\t\tvalue: GeneralName.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}) // IMPLICIT bitstring value\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"distributionPoint\",\r\n\t\t\t\"distributionPointNames\",\r\n\t\t\t\"reasons\",\r\n\t\t\t\"cRLIssuer\",\r\n\t\t\t\"cRLIssuerNames\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tDistributionPoint.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tdistributionPoint: \"distributionPoint\",\r\n\t\t\t\t\tdistributionPointNames: \"distributionPointNames\",\r\n\t\t\t\t\treasons: \"reasons\",\r\n\t\t\t\t\tcRLIssuer: \"cRLIssuer\",\r\n\t\t\t\t\tcRLIssuerNames: \"cRLIssuerNames\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for DistributionPoint\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"distributionPoint\" in asn1.result)\r\n\t\t{\r\n\t\t\tif(asn1.result.distributionPoint.idBlock.tagNumber === 0) // GENERAL_NAMES variant\r\n\t\t\t\tthis.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new GeneralName({ schema: element }));\r\n\r\n\t\t\tif(asn1.result.distributionPoint.idBlock.tagNumber === 1) // RDN variant\r\n\t\t\t{\r\n\t\t\t\tthis.distributionPoint = new RelativeDistinguishedNames({\r\n\t\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: asn1.result.distributionPoint.valueBlock.value\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(\"reasons\" in asn1.result)\r\n\t\t\tthis.reasons = new asn1js.BitString({ valueHex: asn1.result.reasons.valueBlock.valueHex });\r\n\r\n\t\tif(\"cRLIssuer\" in asn1.result)\r\n\t\t\tthis.cRLIssuer = Array.from(asn1.result.cRLIssuerNames, element => new GeneralName({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(\"distributionPoint\" in this)\r\n\t\t{\r\n\t\t\tlet internalValue;\r\n\t\t\t\r\n\t\t\tif(this.distributionPoint instanceof Array)\r\n\t\t\t{\r\n\t\t\t\tinternalValue = new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: Array.from(this.distributionPoint, element => element.toSchema())\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinternalValue = new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.distributionPoint.toSchema()]\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [internalValue]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"reasons\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.reasons.valueBlock.valueHex\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"cRLIssuer\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.cRLIssuer, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\r\n\t\tif(\"distributionPoint\" in this)\r\n\t\t{\r\n\t\t\tif(this.distributionPoint instanceof Array)\r\n\t\t\t\tobject.distributionPoint = Array.from(this.distributionPoint, element => element.toJSON());\r\n\t\t\telse\r\n\t\t\t\tobject.distributionPoint = this.distributionPoint.toJSON();\r\n\t\t}\r\n\r\n\t\tif(\"reasons\" in this)\r\n\t\t\tobject.reasons = this.reasons.toJSON();\r\n\r\n\t\tif(\"cRLIssuer\" in this)\r\n\t\t\tobject.cRLIssuer = Array.from(this.cRLIssuer, element => element.toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}