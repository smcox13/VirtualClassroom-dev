{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.safeSetTimeout = safeSetTimeout;\nexports.safeSetInterval = safeSetInterval;\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n * Wrapper around setTimout which (in node) unrefs the returned timer to avoid\n * wedging the process open unexpectedly.\n * @param {Mixed} args\n * @protected\n * @returns {Timer|Number}\n */\n\nfunction safeSetTimeout() {\n  var timer = setTimeout.apply(undefined, arguments);\n\n  if (timer.unref) {\n    timer.unref();\n  }\n\n  return timer;\n}\n/**\n * Wrapper around setTimout which (in node) unrefs the returned timer to avoid\n * wedging the process open unexpectedly.\n * @param {Mixed} args\n * @protected\n * @returns {Timer|Number}\n */\n\n\nfunction safeSetInterval() {\n  var interval = setInterval.apply(undefined, arguments);\n\n  if (interval.unref) {\n    interval.unref();\n  }\n\n  return interval;\n}","map":{"version":3,"sources":["index.js"],"names":["safeSetTimeout","timer","setTimeout","safeSetInterval","interval","setInterval"],"mappings":";;;;;QAWgBA,c,GAAAA,c;QAiBAG,e,GAAAA,e;AA5BhB;;;;AAIA;;;;;;;;AAOO,SAAA,cAAA,GAAiC;AACtC,MAAMF,KAAAA,GAAQC,UAAAA,CAAAA,KAAAA,CAAAA,SAAAA,EAAd,SAAcA,CAAd;;AAEA,MAAID,KAAAA,CAAJ,KAAA,EAAiB;AACfA,IAAAA,KAAAA,CAAAA,KAAAA;AACD;;AAED,SAAA,KAAA;AACD;AAED;;;;;;;;;AAOO,SAAA,eAAA,GAAkC;AACvC,MAAMG,QAAAA,GAAWC,WAAAA,CAAAA,KAAAA,CAAAA,SAAAA,EAAjB,SAAiBA,CAAjB;;AAEA,MAAID,QAAAA,CAAJ,KAAA,EAAoB;AAClBA,IAAAA,QAAAA,CAAAA,KAAAA;AACD;;AAED,SAAA,QAAA;AACD","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n * Wrapper around setTimout which (in node) unrefs the returned timer to avoid\n * wedging the process open unexpectedly.\n * @param {Mixed} args\n * @protected\n * @returns {Timer|Number}\n */\nexport function safeSetTimeout(...args) {\n  const timer = setTimeout(...args);\n\n  if (timer.unref) {\n    timer.unref();\n  }\n\n  return timer;\n}\n\n/**\n * Wrapper around setTimout which (in node) unrefs the returned timer to avoid\n * wedging the process open unexpectedly.\n * @param {Mixed} args\n * @protected\n * @returns {Timer|Number}\n */\nexport function safeSetInterval(...args) {\n  const interval = setInterval(...args);\n\n  if (interval.unref) {\n    interval.unref();\n  }\n\n  return interval;\n}\n"]},"metadata":{},"sourceType":"script"}