{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nexport default class PrivateKeyUsagePeriod {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for PrivateKeyUsagePeriod class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    if (\"notBefore\" in parameters)\n      /**\r\n       * @type {Date}\r\n       * @desc notBefore\r\n       */\n      this.notBefore = getParametersValue(parameters, \"notBefore\", PrivateKeyUsagePeriod.defaultValues(\"notBefore\"));\n    if (\"notAfter\" in parameters)\n      /**\r\n       * @type {Date}\r\n       * @desc notAfter\r\n       */\n      this.notAfter = getParametersValue(parameters, \"notAfter\", PrivateKeyUsagePeriod.defaultValues(\"notAfter\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"notBefore\":\n        return new Date();\n\n      case \"notAfter\":\n        return new Date();\n\n      default:\n        throw new Error(`Invalid member name for PrivateKeyUsagePeriod class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * PrivateKeyUsagePeriod OID ::= 2.5.29.16\r\n   *\r\n   * PrivateKeyUsagePeriod ::= SEQUENCE {\r\n   *    notBefore       [0]     GeneralizedTime OPTIONAL,\r\n   *    notAfter        [1]     GeneralizedTime OPTIONAL }\r\n   * -- either notBefore or notAfter MUST be present\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [notBefore]\r\n     * @property {string} [notAfter]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Primitive({\n        name: names.notBefore || \"\",\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        }\n      }), new asn1js.Primitive({\n        name: names.notAfter || \"\",\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        }\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"notBefore\", \"notAfter\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, PrivateKeyUsagePeriod.schema({\n      names: {\n        notBefore: \"notBefore\",\n        notAfter: \"notAfter\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PrivateKeyUsagePeriod\"); //endregion\n    //region Get internal properties from parsed schema\n\n    if (\"notBefore\" in asn1.result) {\n      const localNotBefore = new asn1js.GeneralizedTime();\n      localNotBefore.fromBuffer(asn1.result.notBefore.valueBlock.valueHex);\n      this.notBefore = localNotBefore.toDate();\n    }\n\n    if (\"notAfter\" in asn1.result) {\n      const localNotAfter = new asn1js.GeneralizedTime({\n        valueHex: asn1.result.notAfter.valueBlock.valueHex\n      });\n      localNotAfter.fromBuffer(asn1.result.notAfter.valueBlock.valueHex);\n      this.notAfter = localNotAfter.toDate();\n    } //endregion\n\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n\n    if (\"notBefore\" in this) {\n      outputArray.push(new asn1js.Primitive({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        valueHex: new asn1js.GeneralizedTime({\n          valueDate: this.notBefore\n        }).valueBlock.valueHex\n      }));\n    }\n\n    if (\"notAfter\" in this) {\n      outputArray.push(new asn1js.Primitive({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        valueHex: new asn1js.GeneralizedTime({\n          valueDate: this.notAfter\n        }).valueBlock.valueHex\n      }));\n    } //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const object = {};\n    if (\"notBefore\" in this) object.notBefore = this.notBefore;\n    if (\"notAfter\" in this) object.notAfter = this.notAfter;\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/PrivateKeyUsagePeriod.js"],"names":["asn1js","getParametersValue","clearProps","PrivateKeyUsagePeriod","constructor","parameters","notBefore","defaultValues","notAfter","fromSchema","schema","memberName","Date","Error","names","Sequence","name","blockName","value","Primitive","optional","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","localNotBefore","GeneralizedTime","fromBuffer","valueBlock","valueHex","toDate","localNotAfter","toSchema","outputArray","push","valueDate","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PrivateKeyUsagePeriod\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PrivateKeyUsagePeriod class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"notBefore\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Date}\r\n\t\t\t * @desc notBefore\r\n\t\t\t */\r\n\t\t\tthis.notBefore = getParametersValue(parameters, \"notBefore\", PrivateKeyUsagePeriod.defaultValues(\"notBefore\"));\r\n\r\n\t\tif(\"notAfter\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Date}\r\n\t\t\t * @desc notAfter\r\n\t\t\t */\r\n\t\t\tthis.notAfter = getParametersValue(parameters, \"notAfter\", PrivateKeyUsagePeriod.defaultValues(\"notAfter\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"notBefore\":\r\n\t\t\t\treturn new Date();\r\n\t\t\tcase \"notAfter\":\r\n\t\t\t\treturn new Date();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PrivateKeyUsagePeriod class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PrivateKeyUsagePeriod OID ::= 2.5.29.16\r\n\t *\r\n\t * PrivateKeyUsagePeriod ::= SEQUENCE {\r\n\t *    notBefore       [0]     GeneralizedTime OPTIONAL,\r\n\t *    notAfter        [1]     GeneralizedTime OPTIONAL }\r\n\t * -- either notBefore or notAfter MUST be present\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [notBefore]\r\n\t\t * @property {string} [notAfter]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.notBefore || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.notAfter || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"notBefore\",\r\n\t\t\t\"notAfter\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPrivateKeyUsagePeriod.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tnotBefore: \"notBefore\",\r\n\t\t\t\t\tnotAfter: \"notAfter\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PrivateKeyUsagePeriod\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"notBefore\" in asn1.result)\r\n\t\t{\r\n\t\t\tconst localNotBefore = new asn1js.GeneralizedTime();\r\n\t\t\tlocalNotBefore.fromBuffer(asn1.result.notBefore.valueBlock.valueHex);\r\n\t\t\tthis.notBefore = localNotBefore.toDate();\r\n\t\t}\r\n\r\n\t\tif(\"notAfter\" in asn1.result)\r\n\t\t{\r\n\t\t\tconst localNotAfter = new asn1js.GeneralizedTime({ valueHex: asn1.result.notAfter.valueBlock.valueHex });\r\n\t\t\tlocalNotAfter.fromBuffer(asn1.result.notAfter.valueBlock.valueHex);\r\n\t\t\tthis.notAfter = localNotAfter.toDate();\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(\"notBefore\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: (new asn1js.GeneralizedTime({ valueDate: this.notBefore })).valueBlock.valueHex\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"notAfter\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: (new asn1js.GeneralizedTime({ valueDate: this.notAfter })).valueBlock.valueHex\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\r\n\t\tif(\"notBefore\" in this)\r\n\t\t\tobject.notBefore = this.notBefore;\r\n\r\n\t\tif(\"notAfter\" in this)\r\n\t\t\tobject.notAfter = this.notAfter;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}