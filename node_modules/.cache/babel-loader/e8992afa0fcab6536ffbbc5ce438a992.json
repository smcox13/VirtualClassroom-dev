{"ast":null,"code":"import { getParametersValue, isEqualBuffer } from \"pvutils\";\nimport { getAlgorithmByOID, stringPrep } from \"./common.js\"; //**************************************************************************************\n\nexport default class CertificateChainValidationEngine {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for CertificateChainValidationEngine class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Array.<Certificate>}\r\n     * @desc Array of pre-defined trusted (by user) certificates\r\n     */\n    this.trustedCerts = getParametersValue(parameters, \"trustedCerts\", this.defaultValues(\"trustedCerts\"));\n    /**\r\n     * @type {Array.<Certificate>}\r\n     * @desc Array with certificate chain. Could be only one end-user certificate in there!\r\n     */\n\n    this.certs = getParametersValue(parameters, \"certs\", this.defaultValues(\"certs\"));\n    /**\r\n     * @type {Array.<CertificateRevocationList>}\r\n     * @desc Array of all CRLs for all certificates from certificate chain\r\n     */\n\n    this.crls = getParametersValue(parameters, \"crls\", this.defaultValues(\"crls\"));\n    /**\r\n     * @type {Array}\r\n     * @desc Array of all OCSP responses\r\n     */\n\n    this.ocsps = getParametersValue(parameters, \"ocsps\", this.defaultValues(\"ocsps\"));\n    /**\r\n     * @type {Date}\r\n     * @desc The date at which the check would be\r\n     */\n\n    this.checkDate = getParametersValue(parameters, \"checkDate\", this.defaultValues(\"checkDate\"));\n    /**\r\n     * @type {Function}\r\n     * @desc The date at which the check would be\r\n     */\n\n    this.findOrigin = getParametersValue(parameters, \"findOrigin\", this.defaultValues(\"findOrigin\"));\n    /**\r\n     * @type {Function}\r\n     * @desc The date at which the check would be\r\n     */\n\n    this.findIssuer = getParametersValue(parameters, \"findIssuer\", this.defaultValues(\"findIssuer\")); //endregion\n  } //**********************************************************************************\n\n\n  static defaultFindOrigin(certificate, validationEngine) {\n    //region Firstly encode TBS for certificate\n    if (certificate.tbs.byteLength === 0) certificate.tbs = certificate.encodeTBS(); //endregion\n    //region Search in Intermediate Certificates\n\n    for (const localCert of validationEngine.certs) {\n      //region Firstly encode TBS for certificate\n      if (localCert.tbs.byteLength === 0) localCert.tbs = localCert.encodeTBS(); //endregion\n\n      if (isEqualBuffer(certificate.tbs, localCert.tbs)) return \"Intermediate Certificates\";\n    } //endregion\n    //region Search in Trusted Certificates\n\n\n    for (const trustedCert of validationEngine.trustedCerts) {\n      //region Firstly encode TBS for certificate\n      if (trustedCert.tbs.byteLength === 0) trustedCert.tbs = trustedCert.encodeTBS(); //endregion\n\n      if (isEqualBuffer(certificate.tbs, trustedCert.tbs)) return \"Trusted Certificates\";\n    } //endregion\n\n\n    return \"Unknown\";\n  } //**********************************************************************************\n\n\n  async defaultFindIssuer(certificate, validationEngine) {\n    //region Initial variables\n    let result = [];\n    let keyIdentifier = null;\n    let authorityCertIssuer = null;\n    let authorityCertSerialNumber = null; //endregion\n    //region Speed-up searching in case of self-signed certificates\n\n    if (certificate.subject.isEqual(certificate.issuer)) {\n      try {\n        const verificationResult = await certificate.verify();\n        if (verificationResult === true) return [certificate];\n      } catch (ex) {}\n    } //endregion\n    //region Find values to speed-up search\n\n\n    if (\"extensions\" in certificate) {\n      for (const extension of certificate.extensions) {\n        if (extension.extnID === \"2.5.29.35\") // AuthorityKeyIdentifier\n          {\n            if (\"keyIdentifier\" in extension.parsedValue) keyIdentifier = extension.parsedValue.keyIdentifier;else {\n              if (\"authorityCertIssuer\" in extension.parsedValue) authorityCertIssuer = extension.parsedValue.authorityCertIssuer;\n              if (\"authorityCertSerialNumber\" in extension.parsedValue) authorityCertSerialNumber = extension.parsedValue.authorityCertSerialNumber;\n            }\n            break;\n          }\n      }\n    } //endregion\n    //region Aux function\n\n\n    function checkCertificate(possibleIssuer) {\n      //region Firstly search for appropriate extensions\n      if (keyIdentifier !== null) {\n        if (\"extensions\" in possibleIssuer) {\n          let extensionFound = false;\n\n          for (const extension of possibleIssuer.extensions) {\n            if (extension.extnID === \"2.5.29.14\") // SubjectKeyIdentifier\n              {\n                extensionFound = true;\n                if (isEqualBuffer(extension.parsedValue.valueBlock.valueHex, keyIdentifier.valueBlock.valueHex)) result.push(possibleIssuer);\n                break;\n              }\n          }\n\n          if (extensionFound) return;\n        }\n      } //endregion\n      //region Now search for authorityCertSerialNumber\n\n\n      let authorityCertSerialNumberEqual = false;\n      if (authorityCertSerialNumber !== null) authorityCertSerialNumberEqual = possibleIssuer.serialNumber.isEqual(authorityCertSerialNumber); //endregion\n      //region And at least search for Issuer data\n\n      if (authorityCertIssuer !== null) {\n        if (possibleIssuer.subject.isEqual(authorityCertIssuer)) {\n          if (authorityCertSerialNumberEqual) result.push(possibleIssuer);\n        }\n      } else {\n        if (certificate.issuer.isEqual(possibleIssuer.subject)) result.push(possibleIssuer);\n      } //endregion\n\n    } //endregion\n    //region Search in Trusted Certificates\n\n\n    for (const trustedCert of validationEngine.trustedCerts) checkCertificate(trustedCert); //endregion\n    //region Search in Intermediate Certificates\n\n\n    for (const intermediateCert of validationEngine.certs) checkCertificate(intermediateCert); //endregion\n    //region Now perform certificate verification checking\n\n\n    for (let i = 0; i < result.length; i++) {\n      try {\n        const verificationResult = await certificate.verify(result[i]);\n        if (verificationResult === false) result.splice(i, 1);\n      } catch (ex) {\n        result.splice(i, 1); // Something wrong, remove the certificate\n      }\n    } //endregion\n\n\n    return result;\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  defaultValues(memberName) {\n    switch (memberName) {\n      case \"trustedCerts\":\n        return [];\n\n      case \"certs\":\n        return [];\n\n      case \"crls\":\n        return [];\n\n      case \"ocsps\":\n        return [];\n\n      case \"checkDate\":\n        return new Date();\n\n      case \"findOrigin\":\n        return CertificateChainValidationEngine.defaultFindOrigin;\n\n      case \"findIssuer\":\n        return this.defaultFindIssuer;\n\n      default:\n        throw new Error(`Invalid member name for CertificateChainValidationEngine class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n\n  async sort(passedWhenNotRevValues = false) {\n    //region Initial variables\n    const localCerts = [];\n\n    const _this = this; //endregion\n    //region Building certificate path\n\n\n    async function buildPath(certificate) {\n      const result = []; //region Aux function checking array for unique elements\n\n      function checkUnique(array) {\n        let unique = true;\n\n        for (let i = 0; i < array.length; i++) {\n          for (let j = 0; j < array.length; j++) {\n            if (j === i) continue;\n\n            if (array[i] === array[j]) {\n              unique = false;\n              break;\n            }\n          }\n\n          if (!unique) break;\n        }\n\n        return unique;\n      } //endregion\n\n\n      const findIssuerResult = await _this.findIssuer(certificate, _this);\n      if (findIssuerResult.length === 0) throw new Error(\"No valid certificate paths found\");\n\n      for (let i = 0; i < findIssuerResult.length; i++) {\n        if (isEqualBuffer(findIssuerResult[i].tbs, certificate.tbs)) {\n          result.push([findIssuerResult[i]]);\n          continue;\n        }\n\n        const buildPathResult = await buildPath(findIssuerResult[i]);\n\n        for (let j = 0; j < buildPathResult.length; j++) {\n          const copy = buildPathResult[j].slice();\n          copy.splice(0, 0, findIssuerResult[i]);\n          if (checkUnique(copy)) result.push(copy);else result.push(buildPathResult[j]);\n        }\n      }\n\n      return result;\n    } //endregion\n    //region Find CRL for specific certificate\n\n\n    async function findCRL(certificate) {\n      //region Initial variables\n      const issuerCertificates = [];\n      const crls = [];\n      const crlsAndCertificates = []; //endregion\n      //region Find all possible CRL issuers\n\n      issuerCertificates.push(...localCerts.filter(element => certificate.issuer.isEqual(element.subject)));\n\n      if (issuerCertificates.length === 0) {\n        return {\n          status: 1,\n          statusMessage: \"No certificate's issuers\"\n        };\n      } //endregion\n      //region Find all CRLs for certificate's issuer\n\n\n      crls.push(..._this.crls.filter(element => element.issuer.isEqual(certificate.issuer)));\n\n      if (crls.length === 0) {\n        return {\n          status: 2,\n          statusMessage: \"No CRLs for specific certificate issuer\"\n        };\n      } //endregion\n      //region Find specific certificate of issuer for each CRL\n\n\n      for (let i = 0; i < crls.length; i++) {\n        //region Check \"nextUpdate\" for the CRL\n        // The \"nextUpdate\" is older than \"checkDate\".\n        // Thus we should do have another, updated CRL.\n        // Thus the CRL assumed to be invalid.\n        if (crls[i].nextUpdate.value < _this.checkDate) continue; //endregion\n\n        for (let j = 0; j < issuerCertificates.length; j++) {\n          try {\n            const result = await crls[i].verify({\n              issuerCertificate: issuerCertificates[j]\n            });\n\n            if (result) {\n              crlsAndCertificates.push({\n                crl: crls[i],\n                certificate: issuerCertificates[j]\n              });\n              break;\n            }\n          } catch (ex) {}\n        }\n      } //endregion\n\n\n      if (crlsAndCertificates.length) {\n        return {\n          status: 0,\n          statusMessage: \"\",\n          result: crlsAndCertificates\n        };\n      }\n\n      return {\n        status: 3,\n        statusMessage: \"No valid CRLs found\"\n      };\n    } //endregion\n    //region Find OCSP for specific certificate\n\n\n    async function findOCSP(certificate, issuerCertificate) {\n      //region Get hash algorithm from certificate\n      const hashAlgorithm = getAlgorithmByOID(certificate.signatureAlgorithm.algorithmId);\n      if (\"name\" in hashAlgorithm === false) return 1;\n      if (\"hash\" in hashAlgorithm === false) return 1; //endregion\n      //region Search for OCSP response for the certificate\n\n      for (let i = 0; i < _this.ocsps.length; i++) {\n        const result = await _this.ocsps[i].getCertificateStatus(certificate, issuerCertificate);\n\n        if (result.isForCertificate) {\n          if (result.status === 0) return 0;\n          return 1;\n        }\n      } //endregion\n\n\n      return 2;\n    } //endregion\n    //region Check for certificate to be CA\n\n\n    async function checkForCA(certificate, needToCheckCRL = false) {\n      //region Initial variables\n      let isCA = false;\n      let mustBeCA = false;\n      let keyUsagePresent = false;\n      let cRLSign = false; //endregion\n\n      if (\"extensions\" in certificate) {\n        for (let j = 0; j < certificate.extensions.length; j++) {\n          if (certificate.extensions[j].critical === true && \"parsedValue\" in certificate.extensions[j] === false) {\n            return {\n              result: false,\n              resultCode: 6,\n              resultMessage: `Unable to parse critical certificate extension: ${certificate.extensions[j].extnID}`\n            };\n          }\n\n          if (certificate.extensions[j].extnID === \"2.5.29.15\") // KeyUsage\n            {\n              keyUsagePresent = true;\n              const view = new Uint8Array(certificate.extensions[j].parsedValue.valueBlock.valueHex);\n              if ((view[0] & 0x04) === 0x04) // Set flag \"keyCertSign\"\n                mustBeCA = true;\n              if ((view[0] & 0x02) === 0x02) // Set flag \"cRLSign\"\n                cRLSign = true;\n            }\n\n          if (certificate.extensions[j].extnID === \"2.5.29.19\") // BasicConstraints\n            {\n              if (\"cA\" in certificate.extensions[j].parsedValue) {\n                if (certificate.extensions[j].parsedValue.cA === true) isCA = true;\n              }\n            }\n        }\n\n        if (mustBeCA === true && isCA === false) {\n          return {\n            result: false,\n            resultCode: 3,\n            resultMessage: \"Unable to build certificate chain - using \\\"keyCertSign\\\" flag set without BasicConstaints\"\n          };\n        }\n\n        if (keyUsagePresent === true && isCA === true && mustBeCA === false) {\n          return {\n            result: false,\n            resultCode: 4,\n            resultMessage: \"Unable to build certificate chain - \\\"keyCertSign\\\" flag was not set\"\n          };\n        } // noinspection OverlyComplexBooleanExpressionJS\n\n\n        if (isCA === true && keyUsagePresent === true && needToCheckCRL && cRLSign === false) {\n          return {\n            result: false,\n            resultCode: 5,\n            resultMessage: \"Unable to build certificate chain - intermediate certificate must have \\\"cRLSign\\\" key usage flag\"\n          };\n        }\n      }\n\n      if (isCA === false) {\n        return {\n          result: false,\n          resultCode: 7,\n          resultMessage: \"Unable to build certificate chain - more than one possible end-user certificate\"\n        };\n      }\n\n      return {\n        result: true,\n        resultCode: 0,\n        resultMessage: \"\"\n      };\n    } //endregion\n    //region Basic check for certificate path\n\n\n    async function basicCheck(path, checkDate) {\n      //region Check that all dates are valid\n      for (let i = 0; i < path.length; i++) {\n        if (path[i].notBefore.value > checkDate || path[i].notAfter.value < checkDate) {\n          return {\n            result: false,\n            resultCode: 8,\n            resultMessage: \"The certificate is either not yet valid or expired\"\n          };\n        }\n      } //endregion\n      //region Check certificate name chain\n      // We should have at least two certificates: end entity and trusted root\n\n\n      if (path.length < 2) {\n        return {\n          result: false,\n          resultCode: 9,\n          resultMessage: \"Too short certificate path\"\n        };\n      }\n\n      for (let i = path.length - 2; i >= 0; i--) {\n        //region Check that we do not have a \"self-signed\" certificate\n        if (path[i].issuer.isEqual(path[i].subject) === false) {\n          if (path[i].issuer.isEqual(path[i + 1].subject) === false) {\n            return {\n              result: false,\n              resultCode: 10,\n              resultMessage: \"Incorrect name chaining\"\n            };\n          }\n        } //endregion\n\n      } //endregion\n      //region Check each certificate (except \"trusted root\") to be non-revoked\n\n\n      if (_this.crls.length !== 0 || _this.ocsps.length !== 0) // If CRLs and OCSPs are empty then we consider all certificates to be valid\n        {\n          for (let i = 0; i < path.length - 1; i++) {\n            //region Initial variables\n            let ocspResult = 2;\n            let crlResult = {\n              status: 0,\n              statusMessage: \"\"\n            }; //endregion\n            //region Check OCSPs first\n\n            if (_this.ocsps.length !== 0) {\n              ocspResult = await findOCSP(path[i], path[i + 1]);\n\n              switch (ocspResult) {\n                case 0:\n                  continue;\n\n                case 1:\n                  return {\n                    result: false,\n                    resultCode: 12,\n                    resultMessage: \"One of certificates was revoked via OCSP response\"\n                  };\n\n                case 2:\n                  // continue to check the certificate with CRL\n                  break;\n\n                default:\n              }\n            } //endregion\n            //region Check CRLs\n\n\n            if (_this.crls.length !== 0) {\n              crlResult = await findCRL(path[i]);\n\n              if (crlResult.status === 0) {\n                for (let j = 0; j < crlResult.result.length; j++) {\n                  //region Check that the CRL issuer certificate have not been revoked\n                  const isCertificateRevoked = crlResult.result[j].crl.isCertificateRevoked(path[i]);\n\n                  if (isCertificateRevoked) {\n                    return {\n                      result: false,\n                      resultCode: 12,\n                      resultMessage: \"One of certificates had been revoked\"\n                    };\n                  } //endregion\n                  //region Check that the CRL issuer certificate is a CA certificate\n\n\n                  const isCertificateCA = await checkForCA(crlResult.result[j].certificate, true);\n\n                  if (isCertificateCA.result === false) {\n                    return {\n                      result: false,\n                      resultCode: 13,\n                      resultMessage: \"CRL issuer certificate is not a CA certificate or does not have crlSign flag\"\n                    };\n                  } //endregion\n\n                }\n              } else {\n                if (passedWhenNotRevValues === false) {\n                  throw {\n                    result: false,\n                    resultCode: 11,\n                    resultMessage: `No revocation values found for one of certificates: ${crlResult.statusMessage}`\n                  };\n                }\n              }\n            } else {\n              if (ocspResult === 2) {\n                return {\n                  result: false,\n                  resultCode: 11,\n                  resultMessage: \"No revocation values found for one of certificates\"\n                };\n              }\n            } //endregion\n            //region Check we do have links to revocation values inside issuer's certificate\n\n\n            if (ocspResult === 2 && crlResult.status === 2 && passedWhenNotRevValues) {\n              const issuerCertificate = path[i + 1];\n              let extensionFound = false;\n\n              if (\"extensions\" in issuerCertificate) {\n                for (const extension of issuerCertificate.extensions) {\n                  switch (extension.extnID) {\n                    case \"2.5.29.31\": // CRLDistributionPoints\n\n                    case \"2.5.29.46\": // FreshestCRL\n\n                    case \"1.3.6.1.5.5.7.1.1\":\n                      // AuthorityInfoAccess\n                      extensionFound = true;\n                      break;\n\n                    default:\n                  }\n                }\n              }\n\n              if (extensionFound) {\n                throw {\n                  result: false,\n                  resultCode: 11,\n                  resultMessage: `No revocation values found for one of certificates: ${crlResult.statusMessage}`\n                };\n              }\n            } //endregion\n\n          }\n        } //endregion\n      //region Check each certificate (except \"end entity\") in the path to be a CA certificate\n\n\n      for (let i = 1; i < path.length; i++) {\n        const result = await checkForCA(path[i]);\n\n        if (result.result === false) {\n          return {\n            result: false,\n            resultCode: 14,\n            resultMessage: \"One of intermediate certificates is not a CA certificate\"\n          };\n        }\n      } //endregion\n\n\n      return {\n        result: true\n      };\n    } //endregion\n    //region Do main work\n    //region Initialize \"localCerts\" by value of \"_this.certs\" + \"_this.trustedCerts\" arrays\n\n\n    localCerts.push(..._this.trustedCerts);\n    localCerts.push(..._this.certs); //endregion\n    //region Check all certificates for been unique\n\n    for (let i = 0; i < localCerts.length; i++) {\n      for (let j = 0; j < localCerts.length; j++) {\n        if (i === j) continue;\n\n        if (isEqualBuffer(localCerts[i].tbs, localCerts[j].tbs)) {\n          localCerts.splice(j, 1);\n          i = 0;\n          break;\n        }\n      }\n    } //endregion\n    //region Initial variables\n\n\n    let result;\n    const certificatePath = [localCerts[localCerts.length - 1]]; // The \"end entity\" certificate must be the least in \"certs\" array\n    //endregion\n    //region Build path for \"end entity\" certificate\n\n    result = await buildPath(localCerts[localCerts.length - 1]);\n\n    if (result.length === 0) {\n      return {\n        result: false,\n        resultCode: 60,\n        resultMessage: \"Unable to find certificate path\"\n      };\n    } //endregion\n    //region Exclude certificate paths not ended with \"trusted roots\"\n\n\n    for (let i = 0; i < result.length; i++) {\n      let found = false;\n\n      for (let j = 0; j < result[i].length; j++) {\n        const certificate = result[i][j];\n\n        for (let k = 0; k < _this.trustedCerts.length; k++) {\n          if (isEqualBuffer(certificate.tbs, _this.trustedCerts[k].tbs)) {\n            found = true;\n            break;\n          }\n        }\n\n        if (found) break;\n      }\n\n      if (!found) {\n        result.splice(i, 1);\n        i = 0;\n      }\n    }\n\n    if (result.length === 0) {\n      throw {\n        result: false,\n        resultCode: 97,\n        resultMessage: \"No valid certificate paths found\"\n      };\n    } //endregion\n    //region Find shortest certificate path (for the moment it is the only criteria)\n\n\n    let shortestLength = result[0].length;\n    let shortestIndex = 0;\n\n    for (let i = 0; i < result.length; i++) {\n      if (result[i].length < shortestLength) {\n        shortestLength = result[i].length;\n        shortestIndex = i;\n      }\n    } //endregion\n    //region Create certificate path for basic check\n\n\n    for (let i = 0; i < result[shortestIndex].length; i++) certificatePath.push(result[shortestIndex][i]); //endregion\n    //region Perform basic checking for all certificates in the path\n\n\n    result = await basicCheck(certificatePath, _this.checkDate);\n    if (result.result === false) throw result; //endregion\n\n    return certificatePath; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Major verification function for certificate chain.\r\n   * @param {{initialPolicySet, initialExplicitPolicy, initialPolicyMappingInhibit, initialInhibitPolicy, initialPermittedSubtreesSet, initialExcludedSubtreesSet, initialRequiredNameForms}} [parameters]\r\n   * @returns {Promise}\r\n   */\n\n\n  async verify(parameters = {}) {\n    //region Auxiliary functions for name constraints checking\n    function compareDNSName(name, constraint) {\n      /// <summary>Compare two dNSName values</summary>\n      /// <param name=\"name\" type=\"String\">DNS from name</param>\n      /// <param name=\"constraint\" type=\"String\">Constraint for DNS from name</param>\n      /// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\n      //region Make a \"string preparation\" for both name and constrain\n      const namePrepared = stringPrep(name);\n      const constraintPrepared = stringPrep(constraint); //endregion\n      //region Make a \"splitted\" versions of \"constraint\" and \"name\"\n\n      const nameSplitted = namePrepared.split(\".\");\n      const constraintSplitted = constraintPrepared.split(\".\"); //endregion\n      //region Length calculation and additional check\n\n      const nameLen = nameSplitted.length;\n      const constrLen = constraintSplitted.length;\n      if (nameLen === 0 || constrLen === 0 || nameLen < constrLen) return false; //endregion\n      //region Check that no part of \"name\" has zero length\n\n      for (let i = 0; i < nameLen; i++) {\n        if (nameSplitted[i].length === 0) return false;\n      } //endregion\n      //region Check that no part of \"constraint\" has zero length\n\n\n      for (let i = 0; i < constrLen; i++) {\n        if (constraintSplitted[i].length === 0) {\n          if (i === 0) {\n            if (constrLen === 1) return false;\n            continue;\n          }\n\n          return false;\n        }\n      } //endregion\n      //region Check that \"name\" has a tail as \"constraint\"\n\n\n      for (let i = 0; i < constrLen; i++) {\n        if (constraintSplitted[constrLen - 1 - i].length === 0) continue;\n        if (nameSplitted[nameLen - 1 - i].localeCompare(constraintSplitted[constrLen - 1 - i]) !== 0) return false;\n      } //endregion\n\n\n      return true;\n    }\n\n    function compareRFC822Name(name, constraint) {\n      /// <summary>Compare two rfc822Name values</summary>\n      /// <param name=\"name\" type=\"String\">E-mail address from name</param>\n      /// <param name=\"constraint\" type=\"String\">Constraint for e-mail address from name</param>\n      /// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\n      //region Make a \"string preparation\" for both name and constrain\n      const namePrepared = stringPrep(name);\n      const constraintPrepared = stringPrep(constraint); //endregion\n      //region Make a \"splitted\" versions of \"constraint\" and \"name\"\n\n      const nameSplitted = namePrepared.split(\"@\");\n      const constraintSplitted = constraintPrepared.split(\"@\"); //endregion\n      //region Splitted array length checking\n\n      if (nameSplitted.length === 0 || constraintSplitted.length === 0 || nameSplitted.length < constraintSplitted.length) return false; //endregion\n\n      if (constraintSplitted.length === 1) {\n        const result = compareDNSName(nameSplitted[1], constraintSplitted[0]);\n\n        if (result) {\n          //region Make a \"splitted\" versions of domain name from \"constraint\" and \"name\"\n          const ns = nameSplitted[1].split(\".\");\n          const cs = constraintSplitted[0].split(\".\"); //endregion\n\n          if (cs[0].length === 0) return true;\n          return ns.length === cs.length;\n        }\n\n        return false;\n      }\n\n      return namePrepared.localeCompare(constraintPrepared) === 0;\n    }\n\n    function compareUniformResourceIdentifier(name, constraint) {\n      /// <summary>Compare two uniformResourceIdentifier values</summary>\n      /// <param name=\"name\" type=\"String\">uniformResourceIdentifier from name</param>\n      /// <param name=\"constraint\" type=\"String\">Constraint for uniformResourceIdentifier from name</param>\n      /// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\n      //region Make a \"string preparation\" for both name and constrain\n      let namePrepared = stringPrep(name);\n      const constraintPrepared = stringPrep(constraint); //endregion\n      //region Find out a major URI part to compare with\n\n      const ns = namePrepared.split(\"/\");\n      const cs = constraintPrepared.split(\"/\");\n      if (cs.length > 1) // Malformed constraint\n        return false;\n\n      if (ns.length > 1) // Full URI string\n        {\n          for (let i = 0; i < ns.length; i++) {\n            if (ns[i].length > 0 && ns[i].charAt(ns[i].length - 1) !== \":\") {\n              const nsPort = ns[i].split(\":\");\n              namePrepared = nsPort[0];\n              break;\n            }\n          }\n        } //endregion\n\n\n      const result = compareDNSName(namePrepared, constraintPrepared);\n\n      if (result) {\n        //region Make a \"splitted\" versions of \"constraint\" and \"name\"\n        const nameSplitted = namePrepared.split(\".\");\n        const constraintSplitted = constraintPrepared.split(\".\"); //endregion\n\n        if (constraintSplitted[0].length === 0) return true;\n        return nameSplitted.length === constraintSplitted.length;\n      }\n\n      return false;\n    }\n\n    function compareIPAddress(name, constraint) {\n      /// <summary>Compare two iPAddress values</summary>\n      /// <param name=\"name\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">iPAddress from name</param>\n      /// <param name=\"constraint\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">Constraint for iPAddress from name</param>\n      /// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\n      //region Common variables\n      const nameView = new Uint8Array(name.valueBlock.valueHex);\n      const constraintView = new Uint8Array(constraint.valueBlock.valueHex); //endregion\n      //region Work with IPv4 addresses\n\n      if (nameView.length === 4 && constraintView.length === 8) {\n        for (let i = 0; i < 4; i++) {\n          if ((nameView[i] ^ constraintView[i]) & constraintView[i + 4]) return false;\n        }\n\n        return true;\n      } //endregion\n      //region Work with IPv6 addresses\n\n\n      if (nameView.length === 16 && constraintView.length === 32) {\n        for (let i = 0; i < 16; i++) {\n          if ((nameView[i] ^ constraintView[i]) & constraintView[i + 16]) return false;\n        }\n\n        return true;\n      } //endregion\n\n\n      return false;\n    }\n\n    function compareDirectoryName(name, constraint) {\n      /// <summary>Compare two directoryName values</summary>\n      /// <param name=\"name\" type=\"in_window.org.pkijs.simpl.RDN\">directoryName from name</param>\n      /// <param name=\"constraint\" type=\"in_window.org.pkijs.simpl.RDN\">Constraint for directoryName from name</param>\n      /// <param name=\"any\" type=\"Boolean\">Boolean flag - should be comparision interrupted after first match or we need to match all \"constraints\" parts</param>\n      /// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\n      //region Initial check\n      if (name.typesAndValues.length === 0 || constraint.typesAndValues.length === 0) return true;\n      if (name.typesAndValues.length < constraint.typesAndValues.length) return false; //endregion\n      //region Initial variables\n\n      let result = true;\n      let nameStart = 0; //endregion\n\n      for (let i = 0; i < constraint.typesAndValues.length; i++) {\n        let localResult = false;\n\n        for (let j = nameStart; j < name.typesAndValues.length; j++) {\n          localResult = name.typesAndValues[j].isEqual(constraint.typesAndValues[i]);\n          if (name.typesAndValues[j].type === constraint.typesAndValues[i].type) result = result && localResult;\n\n          if (localResult === true) {\n            if (nameStart === 0 || nameStart === j) {\n              nameStart = j + 1;\n              break;\n            } else // Structure of \"name\" must be the same with \"constraint\"\n              return false;\n          }\n        }\n\n        if (localResult === false) return false;\n      }\n\n      return nameStart === 0 ? false : result;\n    } //endregion\n\n\n    try {\n      //region Initial checks\n      if (this.certs.length === 0) throw \"Empty certificate array\"; //endregion\n      //region Get input variables\n\n      let passedWhenNotRevValues = false;\n      if (\"passedWhenNotRevValues\" in parameters) passedWhenNotRevValues = parameters.passedWhenNotRevValues;\n      let initialPolicySet = [];\n      initialPolicySet.push(\"2.5.29.32.0\"); // \"anyPolicy\"\n\n      let initialExplicitPolicy = false;\n      let initialPolicyMappingInhibit = false;\n      let initialInhibitPolicy = false;\n      let initialPermittedSubtreesSet = []; // Array of \"simpl.x509.GeneralSubtree\"\n\n      let initialExcludedSubtreesSet = []; // Array of \"simpl.x509.GeneralSubtree\"\n\n      let initialRequiredNameForms = []; // Array of \"simpl.x509.GeneralSubtree\"\n\n      if (\"initialPolicySet\" in parameters) initialPolicySet = parameters.initialPolicySet;\n      if (\"initialExplicitPolicy\" in parameters) initialExplicitPolicy = parameters.initialExplicitPolicy;\n      if (\"initialPolicyMappingInhibit\" in parameters) initialPolicyMappingInhibit = parameters.initialPolicyMappingInhibit;\n      if (\"initialInhibitPolicy\" in parameters) initialInhibitPolicy = parameters.initialInhibitPolicy;\n      if (\"initialPermittedSubtreesSet\" in parameters) initialPermittedSubtreesSet = parameters.initialPermittedSubtreesSet;\n      if (\"initialExcludedSubtreesSet\" in parameters) initialExcludedSubtreesSet = parameters.initialExcludedSubtreesSet;\n      if (\"initialRequiredNameForms\" in parameters) initialRequiredNameForms = parameters.initialRequiredNameForms;\n      let explicitPolicyIndicator = initialExplicitPolicy;\n      let policyMappingInhibitIndicator = initialPolicyMappingInhibit;\n      let inhibitAnyPolicyIndicator = initialInhibitPolicy;\n      const pendingConstraints = new Array(3);\n      pendingConstraints[0] = false; // For \"explicitPolicyPending\"\n\n      pendingConstraints[1] = false; // For \"policyMappingInhibitPending\"\n\n      pendingConstraints[2] = false; // For \"inhibitAnyPolicyPending\"\n\n      let explicitPolicyPending = 0;\n      let policyMappingInhibitPending = 0;\n      let inhibitAnyPolicyPending = 0;\n      let permittedSubtrees = initialPermittedSubtreesSet;\n      let excludedSubtrees = initialExcludedSubtreesSet;\n      const requiredNameForms = initialRequiredNameForms;\n      let pathDepth = 1; //endregion\n      //region Sorting certificates in the chain array\n\n      this.certs = await this.sort(passedWhenNotRevValues); //endregion\n      //region Work with policies\n      //region Support variables\n\n      const allPolicies = []; // Array of all policies (string values)\n\n      allPolicies.push(\"2.5.29.32.0\"); // Put \"anyPolicy\" at first place\n\n      const policiesAndCerts = []; // In fact \"array of array\" where rows are for each specific policy, column for each certificate and value is \"true/false\"\n\n      const anyPolicyArray = new Array(this.certs.length - 1); // Minus \"trusted anchor\"\n\n      for (let ii = 0; ii < this.certs.length - 1; ii++) anyPolicyArray[ii] = true;\n\n      policiesAndCerts.push(anyPolicyArray);\n      const policyMappings = new Array(this.certs.length - 1); // Array of \"PolicyMappings\" for each certificate\n\n      const certPolicies = new Array(this.certs.length - 1); // Array of \"CertificatePolicies\" for each certificate\n\n      let explicitPolicyStart = explicitPolicyIndicator ? this.certs.length - 1 : -1; //endregion\n      //region Gather all neccessary information from certificate chain\n\n      for (let i = this.certs.length - 2; i >= 0; i--, pathDepth++) {\n        if (\"extensions\" in this.certs[i]) {\n          //region Get information about certificate extensions\n          for (let j = 0; j < this.certs[i].extensions.length; j++) {\n            //region CertificatePolicies\n            if (this.certs[i].extensions[j].extnID === \"2.5.29.32\") {\n              certPolicies[i] = this.certs[i].extensions[j].parsedValue; //region Remove entry from \"anyPolicies\" for the certificate\n\n              for (let s = 0; s < allPolicies.length; s++) {\n                if (allPolicies[s] === \"2.5.29.32.0\") {\n                  delete policiesAndCerts[s][i];\n                  break;\n                }\n              } //endregion\n\n\n              for (let k = 0; k < this.certs[i].extensions[j].parsedValue.certificatePolicies.length; k++) {\n                let policyIndex = -1; //region Try to find extension in \"allPolicies\" array\n\n                for (let s = 0; s < allPolicies.length; s++) {\n                  if (this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier === allPolicies[s]) {\n                    policyIndex = s;\n                    break;\n                  }\n                } //endregion\n\n\n                if (policyIndex === -1) {\n                  allPolicies.push(this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier);\n                  const certArray = new Array(this.certs.length - 1);\n                  certArray[i] = true;\n                  policiesAndCerts.push(certArray);\n                } else policiesAndCerts[policyIndex][i] = true;\n              }\n            } //endregion\n            //region PolicyMappings\n\n\n            if (this.certs[i].extensions[j].extnID === \"2.5.29.33\") {\n              if (policyMappingInhibitIndicator) {\n                return {\n                  result: false,\n                  resultCode: 98,\n                  resultMessage: \"Policy mapping prohibited\"\n                };\n              }\n\n              policyMappings[i] = this.certs[i].extensions[j].parsedValue;\n            } //endregion\n            //region PolicyConstraints\n\n\n            if (this.certs[i].extensions[j].extnID === \"2.5.29.36\") {\n              if (explicitPolicyIndicator === false) {\n                //region requireExplicitPolicy\n                if (this.certs[i].extensions[j].parsedValue.requireExplicitPolicy === 0) {\n                  explicitPolicyIndicator = true;\n                  explicitPolicyStart = i;\n                } else {\n                  if (pendingConstraints[0] === false) {\n                    pendingConstraints[0] = true;\n                    explicitPolicyPending = this.certs[i].extensions[j].parsedValue.requireExplicitPolicy;\n                  } else explicitPolicyPending = explicitPolicyPending > this.certs[i].extensions[j].parsedValue.requireExplicitPolicy ? this.certs[i].extensions[j].parsedValue.requireExplicitPolicy : explicitPolicyPending;\n                } //endregion\n                //region inhibitPolicyMapping\n\n\n                if (this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping === 0) policyMappingInhibitIndicator = true;else {\n                  if (pendingConstraints[1] === false) {\n                    pendingConstraints[1] = true;\n                    policyMappingInhibitPending = this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1;\n                  } else policyMappingInhibitPending = policyMappingInhibitPending > this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1 ? this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1 : policyMappingInhibitPending;\n                } //endregion\n              }\n            } //endregion\n            //region InhibitAnyPolicy\n\n\n            if (this.certs[i].extensions[j].extnID === \"2.5.29.54\") {\n              if (inhibitAnyPolicyIndicator === false) {\n                if (this.certs[i].extensions[j].parsedValue.valueBlock.valueDec === 0) inhibitAnyPolicyIndicator = true;else {\n                  if (pendingConstraints[2] === false) {\n                    pendingConstraints[2] = true;\n                    inhibitAnyPolicyPending = this.certs[i].extensions[j].parsedValue.valueBlock.valueDec;\n                  } else inhibitAnyPolicyPending = inhibitAnyPolicyPending > this.certs[i].extensions[j].parsedValue.valueBlock.valueDec ? this.certs[i].extensions[j].parsedValue.valueBlock.valueDec : inhibitAnyPolicyPending;\n                }\n              }\n            } //endregion\n\n          } //endregion\n          //region Check \"inhibitAnyPolicyIndicator\"\n\n\n          if (inhibitAnyPolicyIndicator === true) {\n            let policyIndex = -1; //region Find \"anyPolicy\" index\n\n            for (let searchAnyPolicy = 0; searchAnyPolicy < allPolicies.length; searchAnyPolicy++) {\n              if (allPolicies[searchAnyPolicy] === \"2.5.29.32.0\") {\n                policyIndex = searchAnyPolicy;\n                break;\n              }\n            } //endregion\n\n\n            if (policyIndex !== -1) delete policiesAndCerts[0][i]; // Unset value to \"undefined\" for \"anyPolicies\" value for current certificate\n          } //endregion\n          //region Process with \"pending constraints\"\n\n\n          if (explicitPolicyIndicator === false) {\n            if (pendingConstraints[0] === true) {\n              explicitPolicyPending--;\n\n              if (explicitPolicyPending === 0) {\n                explicitPolicyIndicator = true;\n                explicitPolicyStart = i;\n                pendingConstraints[0] = false;\n              }\n            }\n          }\n\n          if (policyMappingInhibitIndicator === false) {\n            if (pendingConstraints[1] === true) {\n              policyMappingInhibitPending--;\n\n              if (policyMappingInhibitPending === 0) {\n                policyMappingInhibitIndicator = true;\n                pendingConstraints[1] = false;\n              }\n            }\n          }\n\n          if (inhibitAnyPolicyIndicator === false) {\n            if (pendingConstraints[2] === true) {\n              inhibitAnyPolicyPending--;\n\n              if (inhibitAnyPolicyPending === 0) {\n                inhibitAnyPolicyIndicator = true;\n                pendingConstraints[2] = false;\n              }\n            }\n          } //endregion\n\n        }\n      } //endregion\n      //region Working with policy mappings\n\n\n      for (let i = 0; i < this.certs.length - 1; i++) {\n        //region Check that there is \"policy mapping\" for level \"i + 1\"\n        if (i < this.certs.length - 2 && typeof policyMappings[i + 1] !== \"undefined\") {\n          for (let k = 0; k < policyMappings[i + 1].mappings.length; k++) {\n            //region Check that we do not have \"anyPolicy\" in current mapping\n            if (policyMappings[i + 1].mappings[k].issuerDomainPolicy === \"2.5.29.32.0\" || policyMappings[i + 1].mappings[k].subjectDomainPolicy === \"2.5.29.32.0\") {\n              return {\n                result: false,\n                resultCode: 99,\n                resultMessage: \"The \\\"anyPolicy\\\" should not be a part of policy mapping scheme\"\n              };\n            } //endregion\n            //region Initial variables\n\n\n            let issuerDomainPolicyIndex = -1;\n            let subjectDomainPolicyIndex = -1; //endregion\n            //region Search for index of policies indedes\n\n            for (let n = 0; n < allPolicies.length; n++) {\n              if (allPolicies[n] === policyMappings[i + 1].mappings[k].issuerDomainPolicy) issuerDomainPolicyIndex = n;\n              if (allPolicies[n] === policyMappings[i + 1].mappings[k].subjectDomainPolicy) subjectDomainPolicyIndex = n;\n            } //endregion\n            //region Delete existing \"issuerDomainPolicy\" because on the level we mapped the policy to another one\n\n\n            if (typeof policiesAndCerts[issuerDomainPolicyIndex][i] !== \"undefined\") delete policiesAndCerts[issuerDomainPolicyIndex][i]; //endregion\n            //region Check all policies for the certificate\n\n            for (let j = 0; j < certPolicies[i].certificatePolicies.length; j++) {\n              if (policyMappings[i + 1].mappings[k].subjectDomainPolicy === certPolicies[i].certificatePolicies[j].policyIdentifier) {\n                //region Set mapped policy for current certificate\n                if (issuerDomainPolicyIndex !== -1 && subjectDomainPolicyIndex !== -1) {\n                  for (let m = 0; m <= i; m++) {\n                    if (typeof policiesAndCerts[subjectDomainPolicyIndex][m] !== \"undefined\") {\n                      policiesAndCerts[issuerDomainPolicyIndex][m] = true;\n                      delete policiesAndCerts[subjectDomainPolicyIndex][m];\n                    }\n                  }\n                } //endregion\n\n              }\n            } //endregion\n\n          }\n        } //endregion\n\n      } //endregion\n      //region Working with \"explicitPolicyIndicator\" and \"anyPolicy\"\n\n\n      for (let i = 0; i < allPolicies.length; i++) {\n        if (allPolicies[i] === \"2.5.29.32.0\") {\n          for (let j = 0; j < explicitPolicyStart; j++) delete policiesAndCerts[i][j];\n        }\n      } //endregion\n      //region Create \"set of authorities-constrained policies\"\n\n\n      const authConstrPolicies = [];\n\n      for (let i = 0; i < policiesAndCerts.length; i++) {\n        let found = true;\n\n        for (let j = 0; j < this.certs.length - 1; j++) {\n          let anyPolicyFound = false;\n\n          if (j < explicitPolicyStart && allPolicies[i] === \"2.5.29.32.0\" && allPolicies.length > 1) {\n            found = false;\n            break;\n          }\n\n          if (typeof policiesAndCerts[i][j] === \"undefined\") {\n            if (j >= explicitPolicyStart) {\n              //region Search for \"anyPolicy\" in the policy set\n              for (let k = 0; k < allPolicies.length; k++) {\n                if (allPolicies[k] === \"2.5.29.32.0\") {\n                  if (policiesAndCerts[k][j] === true) anyPolicyFound = true;\n                  break;\n                }\n              } //endregion\n\n            }\n\n            if (!anyPolicyFound) {\n              found = false;\n              break;\n            }\n          }\n        }\n\n        if (found === true) authConstrPolicies.push(allPolicies[i]);\n      } //endregion\n      //region Create \"set of user-constrained policies\"\n\n\n      let userConstrPolicies = [];\n      if (initialPolicySet.length === 1 && initialPolicySet[0] === \"2.5.29.32.0\" && explicitPolicyIndicator === false) userConstrPolicies = initialPolicySet;else {\n        if (authConstrPolicies.length === 1 && authConstrPolicies[0] === \"2.5.29.32.0\") userConstrPolicies = initialPolicySet;else {\n          for (let i = 0; i < authConstrPolicies.length; i++) {\n            for (let j = 0; j < initialPolicySet.length; j++) {\n              if (initialPolicySet[j] === authConstrPolicies[i] || initialPolicySet[j] === \"2.5.29.32.0\") {\n                userConstrPolicies.push(authConstrPolicies[i]);\n                break;\n              }\n            }\n          }\n        }\n      } //endregion\n      //region Combine output object\n\n      const policyResult = {\n        result: userConstrPolicies.length > 0,\n        resultCode: 0,\n        resultMessage: userConstrPolicies.length > 0 ? \"\" : \"Zero \\\"userConstrPolicies\\\" array, no intersections with \\\"authConstrPolicies\\\"\",\n        authConstrPolicies,\n        userConstrPolicies,\n        explicitPolicyIndicator,\n        policyMappings,\n        certificatePath: this.certs\n      };\n      if (userConstrPolicies.length === 0) return policyResult; //endregion\n      //endregion\n      //region Work with name constraints\n      //region Check a result from \"policy checking\" part\n\n      if (policyResult.result === false) return policyResult; //endregion\n      //region Check all certificates, excluding \"trust anchor\"\n\n      pathDepth = 1;\n\n      for (let i = this.certs.length - 2; i >= 0; i--, pathDepth++) {\n        //region Support variables\n        let subjectAltNames = [];\n        let certPermittedSubtrees = [];\n        let certExcludedSubtrees = []; //endregion\n\n        if (\"extensions\" in this.certs[i]) {\n          for (let j = 0; j < this.certs[i].extensions.length; j++) {\n            //region NameConstraints\n            if (this.certs[i].extensions[j].extnID === \"2.5.29.30\") {\n              if (\"permittedSubtrees\" in this.certs[i].extensions[j].parsedValue) certPermittedSubtrees = certPermittedSubtrees.concat(this.certs[i].extensions[j].parsedValue.permittedSubtrees);\n              if (\"excludedSubtrees\" in this.certs[i].extensions[j].parsedValue) certExcludedSubtrees = certExcludedSubtrees.concat(this.certs[i].extensions[j].parsedValue.excludedSubtrees);\n            } //endregion\n            //region SubjectAltName\n\n\n            if (this.certs[i].extensions[j].extnID === \"2.5.29.17\") subjectAltNames = subjectAltNames.concat(this.certs[i].extensions[j].parsedValue.altNames); //endregion\n          }\n        } //region Checking for \"required name forms\"\n\n\n        let formFound = requiredNameForms.length <= 0;\n\n        for (let j = 0; j < requiredNameForms.length; j++) {\n          switch (requiredNameForms[j].base.type) {\n            case 4:\n              // directoryName\n              {\n                if (requiredNameForms[j].base.value.typesAndValues.length !== this.certs[i].subject.typesAndValues.length) continue;\n                formFound = true;\n\n                for (let k = 0; k < this.certs[i].subject.typesAndValues.length; k++) {\n                  if (this.certs[i].subject.typesAndValues[k].type !== requiredNameForms[j].base.value.typesAndValues[k].type) {\n                    formFound = false;\n                    break;\n                  }\n                }\n\n                if (formFound === true) break;\n              }\n              break;\n\n            default: // ??? Probably here we should reject the certificate ???\n\n          }\n        }\n\n        if (formFound === false) {\n          policyResult.result = false;\n          policyResult.resultCode = 21;\n          policyResult.resultMessage = \"No neccessary name form found\";\n          throw policyResult;\n        } //endregion\n        //region Checking for \"permited sub-trees\"\n        //region Make groups for all types of constraints\n\n\n        const constrGroups = []; // Array of array for groupped constraints\n\n        constrGroups[0] = []; // rfc822Name\n\n        constrGroups[1] = []; // dNSName\n\n        constrGroups[2] = []; // directoryName\n\n        constrGroups[3] = []; // uniformResourceIdentifier\n\n        constrGroups[4] = []; // iPAddress\n\n        for (let j = 0; j < permittedSubtrees.length; j++) {\n          switch (permittedSubtrees[j].base.type) {\n            //region rfc822Name\n            case 1:\n              constrGroups[0].push(permittedSubtrees[j]);\n              break;\n            //endregion\n            //region dNSName\n\n            case 2:\n              constrGroups[1].push(permittedSubtrees[j]);\n              break;\n            //endregion\n            //region directoryName\n\n            case 4:\n              constrGroups[2].push(permittedSubtrees[j]);\n              break;\n            //endregion\n            //region uniformResourceIdentifier\n\n            case 6:\n              constrGroups[3].push(permittedSubtrees[j]);\n              break;\n            //endregion\n            //region iPAddress\n\n            case 7:\n              constrGroups[4].push(permittedSubtrees[j]);\n              break;\n            //endregion\n            //region default\n\n            default: //endregion\n\n          }\n        } //endregion\n        //region Check name constraints groupped by type, one-by-one\n\n\n        for (let p = 0; p < 5; p++) {\n          let groupPermitted = false;\n          let valueExists = false;\n          const group = constrGroups[p];\n\n          for (let j = 0; j < group.length; j++) {\n            switch (p) {\n              //region rfc822Name\n              case 0:\n                if (subjectAltNames.length > 0) {\n                  for (let k = 0; k < subjectAltNames.length; k++) {\n                    if (subjectAltNames[k].type === 1) // rfc822Name\n                      {\n                        valueExists = true;\n                        groupPermitted = groupPermitted || compareRFC822Name(subjectAltNames[k].value, group[j].base.value);\n                      }\n                  }\n                } else // Try to find out \"emailAddress\" inside \"subject\"\n                  {\n                    for (let k = 0; k < this.certs[i].subject.typesAndValues.length; k++) {\n                      if (this.certs[i].subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\" || // PKCS#9 e-mail address\n                      this.certs[i].subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\") // RFC1274 \"rfc822Mailbox\" e-mail address\n                        {\n                          valueExists = true;\n                          groupPermitted = groupPermitted || compareRFC822Name(this.certs[i].subject.typesAndValues[k].value.valueBlock.value, group[j].base.value);\n                        }\n                    }\n                  }\n\n                break;\n              //endregion\n              //region dNSName\n\n              case 1:\n                if (subjectAltNames.length > 0) {\n                  for (let k = 0; k < subjectAltNames.length; k++) {\n                    if (subjectAltNames[k].type === 2) // dNSName\n                      {\n                        valueExists = true;\n                        groupPermitted = groupPermitted || compareDNSName(subjectAltNames[k].value, group[j].base.value);\n                      }\n                  }\n                }\n\n                break;\n              //endregion\n              //region directoryName\n\n              case 2:\n                valueExists = true;\n                groupPermitted = compareDirectoryName(this.certs[i].subject, group[j].base.value);\n                break;\n              //endregion\n              //region uniformResourceIdentifier\n\n              case 3:\n                if (subjectAltNames.length > 0) {\n                  for (let k = 0; k < subjectAltNames.length; k++) {\n                    if (subjectAltNames[k].type === 6) // uniformResourceIdentifier\n                      {\n                        valueExists = true;\n                        groupPermitted = groupPermitted || compareUniformResourceIdentifier(subjectAltNames[k].value, group[j].base.value);\n                      }\n                  }\n                }\n\n                break;\n              //endregion\n              //region iPAddress\n\n              case 4:\n                if (subjectAltNames.length > 0) {\n                  for (let k = 0; k < subjectAltNames.length; k++) {\n                    if (subjectAltNames[k].type === 7) // iPAddress\n                      {\n                        valueExists = true;\n                        groupPermitted = groupPermitted || compareIPAddress(subjectAltNames[k].value, group[j].base.value);\n                      }\n                  }\n                }\n\n                break;\n              //endregion\n              //region default\n\n              default: //endregion\n\n            }\n\n            if (groupPermitted) break;\n          }\n\n          if (groupPermitted === false && group.length > 0 && valueExists) {\n            policyResult.result = false;\n            policyResult.resultCode = 41;\n            policyResult.resultMessage = \"Failed to meet \\\"permitted sub-trees\\\" name constraint\";\n            throw policyResult;\n          }\n        } //endregion\n        //endregion\n        //region Checking for \"excluded sub-trees\"\n\n\n        let excluded = false;\n\n        for (let j = 0; j < excludedSubtrees.length; j++) {\n          switch (excludedSubtrees[j].base.type) {\n            //region rfc822Name\n            case 1:\n              if (subjectAltNames.length >= 0) {\n                for (let k = 0; k < subjectAltNames.length; k++) {\n                  if (subjectAltNames[k].type === 1) // rfc822Name\n                    excluded = excluded || compareRFC822Name(subjectAltNames[k].value, excludedSubtrees[j].base.value);\n                }\n              } else // Try to find out \"emailAddress\" inside \"subject\"\n                {\n                  for (let k = 0; k < this.certs[i].subject.typesAndValues.length; k++) {\n                    if (this.certs[i].subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\" || // PKCS#9 e-mail address\n                    this.certs[i].subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\") // RFC1274 \"rfc822Mailbox\" e-mail address\n                      excluded = excluded || compareRFC822Name(this.certs[i].subject.typesAndValues[k].value.valueBlock.value, excludedSubtrees[j].base.value);\n                  }\n                }\n\n              break;\n            //endregion\n            //region dNSName\n\n            case 2:\n              if (subjectAltNames.length > 0) {\n                for (let k = 0; k < subjectAltNames.length; k++) {\n                  if (subjectAltNames[k].type === 2) // dNSName\n                    excluded = excluded || compareDNSName(subjectAltNames[k].value, excludedSubtrees[j].base.value);\n                }\n              }\n\n              break;\n            //endregion\n            //region directoryName\n\n            case 4:\n              excluded = excluded || compareDirectoryName(this.certs[i].subject, excludedSubtrees[j].base.value);\n              break;\n            //endregion\n            //region uniformResourceIdentifier\n\n            case 6:\n              if (subjectAltNames.length > 0) {\n                for (let k = 0; k < subjectAltNames.length; k++) {\n                  if (subjectAltNames[k].type === 6) // uniformResourceIdentifier\n                    excluded = excluded || compareUniformResourceIdentifier(subjectAltNames[k].value, excludedSubtrees[j].base.value);\n                }\n              }\n\n              break;\n            //endregion\n            //region iPAddress\n\n            case 7:\n              if (subjectAltNames.length > 0) {\n                for (let k = 0; k < subjectAltNames.length; k++) {\n                  if (subjectAltNames[k].type === 7) // iPAddress\n                    excluded = excluded || compareIPAddress(subjectAltNames[k].value, excludedSubtrees[j].base.value);\n                }\n              }\n\n              break;\n            //endregion\n            //region default\n\n            default: // No action, but probably here we need to create a warning for \"malformed constraint\"\n            //endregion\n\n          }\n\n          if (excluded) break;\n        }\n\n        if (excluded === true) {\n          policyResult.result = false;\n          policyResult.resultCode = 42;\n          policyResult.resultMessage = \"Failed to meet \\\"excluded sub-trees\\\" name constraint\";\n          throw policyResult;\n        } //endregion\n        //region Append \"cert_..._subtrees\" to \"..._subtrees\"\n\n\n        permittedSubtrees = permittedSubtrees.concat(certPermittedSubtrees);\n        excludedSubtrees = excludedSubtrees.concat(certExcludedSubtrees); //endregion\n      } //endregion\n\n\n      return policyResult; //endregion\n    } catch (error) {\n      if (error instanceof Object) {\n        if (\"resultMessage\" in error) return error;\n\n        if (\"message\" in error) {\n          return {\n            result: false,\n            resultCode: -1,\n            resultMessage: error.message\n          };\n        }\n      }\n\n      return {\n        result: false,\n        resultCode: -1,\n        resultMessage: error\n      };\n    }\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/CertificateChainValidationEngine.js"],"names":["getParametersValue","isEqualBuffer","getAlgorithmByOID","stringPrep","CertificateChainValidationEngine","constructor","parameters","trustedCerts","defaultValues","certs","crls","ocsps","checkDate","findOrigin","findIssuer","defaultFindOrigin","certificate","validationEngine","tbs","byteLength","encodeTBS","localCert","trustedCert","defaultFindIssuer","result","keyIdentifier","authorityCertIssuer","authorityCertSerialNumber","subject","isEqual","issuer","verificationResult","verify","ex","extension","extensions","extnID","parsedValue","checkCertificate","possibleIssuer","extensionFound","valueBlock","valueHex","push","authorityCertSerialNumberEqual","serialNumber","intermediateCert","i","length","splice","memberName","Date","Error","sort","passedWhenNotRevValues","localCerts","_this","buildPath","checkUnique","array","unique","j","findIssuerResult","buildPathResult","copy","slice","findCRL","issuerCertificates","crlsAndCertificates","filter","element","status","statusMessage","nextUpdate","value","issuerCertificate","crl","findOCSP","hashAlgorithm","signatureAlgorithm","algorithmId","getCertificateStatus","isForCertificate","checkForCA","needToCheckCRL","isCA","mustBeCA","keyUsagePresent","cRLSign","critical","resultCode","resultMessage","view","Uint8Array","cA","basicCheck","path","notBefore","notAfter","ocspResult","crlResult","isCertificateRevoked","isCertificateCA","certificatePath","found","k","shortestLength","shortestIndex","compareDNSName","name","constraint","namePrepared","constraintPrepared","nameSplitted","split","constraintSplitted","nameLen","constrLen","localeCompare","compareRFC822Name","ns","cs","compareUniformResourceIdentifier","charAt","nsPort","compareIPAddress","nameView","constraintView","compareDirectoryName","typesAndValues","nameStart","localResult","type","initialPolicySet","initialExplicitPolicy","initialPolicyMappingInhibit","initialInhibitPolicy","initialPermittedSubtreesSet","initialExcludedSubtreesSet","initialRequiredNameForms","explicitPolicyIndicator","policyMappingInhibitIndicator","inhibitAnyPolicyIndicator","pendingConstraints","Array","explicitPolicyPending","policyMappingInhibitPending","inhibitAnyPolicyPending","permittedSubtrees","excludedSubtrees","requiredNameForms","pathDepth","allPolicies","policiesAndCerts","anyPolicyArray","ii","policyMappings","certPolicies","explicitPolicyStart","s","certificatePolicies","policyIndex","policyIdentifier","certArray","requireExplicitPolicy","inhibitPolicyMapping","valueDec","searchAnyPolicy","mappings","issuerDomainPolicy","subjectDomainPolicy","issuerDomainPolicyIndex","subjectDomainPolicyIndex","n","m","authConstrPolicies","anyPolicyFound","userConstrPolicies","policyResult","subjectAltNames","certPermittedSubtrees","certExcludedSubtrees","concat","altNames","formFound","base","constrGroups","p","groupPermitted","valueExists","group","excluded","error","Object","message"],"mappings":"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","sourcesContent":["import { getParametersValue, isEqualBuffer } from \"pvutils\";\r\nimport { getAlgorithmByOID, stringPrep } from \"./common.js\";\r\n//**************************************************************************************\r\nexport default class CertificateChainValidationEngine\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertificateChainValidationEngine class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<Certificate>}\r\n\t\t * @desc Array of pre-defined trusted (by user) certificates\r\n\t\t */\r\n\t\tthis.trustedCerts = getParametersValue(parameters, \"trustedCerts\", this.defaultValues(\"trustedCerts\"));\r\n\t\t/**\r\n\t\t * @type {Array.<Certificate>}\r\n\t\t * @desc Array with certificate chain. Could be only one end-user certificate in there!\r\n\t\t */\r\n\t\tthis.certs = getParametersValue(parameters, \"certs\", this.defaultValues(\"certs\"));\r\n\t\t/**\r\n\t\t * @type {Array.<CertificateRevocationList>}\r\n\t\t * @desc Array of all CRLs for all certificates from certificate chain\r\n\t\t */\r\n\t\tthis.crls = getParametersValue(parameters, \"crls\", this.defaultValues(\"crls\"));\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @desc Array of all OCSP responses\r\n\t\t */\r\n\t\tthis.ocsps = getParametersValue(parameters, \"ocsps\", this.defaultValues(\"ocsps\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @desc The date at which the check would be\r\n\t\t */\r\n\t\tthis.checkDate = getParametersValue(parameters, \"checkDate\", this.defaultValues(\"checkDate\"));\r\n\t\t/**\r\n\t\t * @type {Function}\r\n\t\t * @desc The date at which the check would be\r\n\t\t */\r\n\t\tthis.findOrigin = getParametersValue(parameters, \"findOrigin\", this.defaultValues(\"findOrigin\"));\r\n\t\t/**\r\n\t\t * @type {Function}\r\n\t\t * @desc The date at which the check would be\r\n\t\t */\r\n\t\tthis.findIssuer = getParametersValue(parameters, \"findIssuer\", this.defaultValues(\"findIssuer\"));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\tstatic defaultFindOrigin(certificate, validationEngine)\r\n\t{\r\n\t\t//region Firstly encode TBS for certificate\r\n\t\tif(certificate.tbs.byteLength === 0)\r\n\t\t\tcertificate.tbs = certificate.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Intermediate Certificates\r\n\t\tfor(const localCert of validationEngine.certs)\r\n\t\t{\r\n\t\t\t//region Firstly encode TBS for certificate\r\n\t\t\tif(localCert.tbs.byteLength === 0)\r\n\t\t\t\tlocalCert.tbs = localCert.encodeTBS();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(isEqualBuffer(certificate.tbs, localCert.tbs))\r\n\t\t\t\treturn \"Intermediate Certificates\";\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Trusted Certificates\r\n\t\tfor(const trustedCert of validationEngine.trustedCerts)\r\n\t\t{\r\n\t\t\t//region Firstly encode TBS for certificate\r\n\t\t\tif(trustedCert.tbs.byteLength === 0)\r\n\t\t\t\ttrustedCert.tbs = trustedCert.encodeTBS();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(isEqualBuffer(certificate.tbs, trustedCert.tbs))\r\n\t\t\t\treturn \"Trusted Certificates\";\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn \"Unknown\";\r\n\t}\r\n\t//**********************************************************************************\r\n\tasync defaultFindIssuer(certificate, validationEngine)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet result = [];\r\n\t\t\r\n\t\tlet keyIdentifier = null;\r\n\t\t\r\n\t\tlet authorityCertIssuer = null;\r\n\t\tlet authorityCertSerialNumber = null;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Speed-up searching in case of self-signed certificates\r\n\t\tif(certificate.subject.isEqual(certificate.issuer))\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tconst verificationResult = await certificate.verify();\r\n\t\t\t\tif(verificationResult === true)\r\n\t\t\t\t\treturn [certificate];\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find values to speed-up search\r\n\t\tif(\"extensions\" in certificate)\r\n\t\t{\r\n\t\t\tfor(const extension of certificate.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.extnID === \"2.5.29.35\") // AuthorityKeyIdentifier\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"keyIdentifier\" in extension.parsedValue)\r\n\t\t\t\t\t\tkeyIdentifier = extension.parsedValue.keyIdentifier;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"authorityCertIssuer\" in extension.parsedValue)\r\n\t\t\t\t\t\t\tauthorityCertIssuer = extension.parsedValue.authorityCertIssuer;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(\"authorityCertSerialNumber\" in extension.parsedValue)\r\n\t\t\t\t\t\t\tauthorityCertSerialNumber = extension.parsedValue.authorityCertSerialNumber;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Aux function\r\n\t\tfunction checkCertificate(possibleIssuer)\r\n\t\t{\r\n\t\t\t//region Firstly search for appropriate extensions\r\n\t\t\tif(keyIdentifier !== null)\r\n\t\t\t{\r\n\t\t\t\tif(\"extensions\" in possibleIssuer)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet extensionFound = false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(const extension of possibleIssuer.extensions)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(extension.extnID === \"2.5.29.14\") // SubjectKeyIdentifier\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\textensionFound = true;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(isEqualBuffer(extension.parsedValue.valueBlock.valueHex, keyIdentifier.valueBlock.valueHex))\r\n\t\t\t\t\t\t\t\tresult.push(possibleIssuer);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(extensionFound)\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Now search for authorityCertSerialNumber\r\n\t\t\tlet authorityCertSerialNumberEqual = false;\r\n\t\t\t\r\n\t\t\tif(authorityCertSerialNumber !== null)\r\n\t\t\t\tauthorityCertSerialNumberEqual = possibleIssuer.serialNumber.isEqual(authorityCertSerialNumber);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region And at least search for Issuer data\r\n\t\t\tif(authorityCertIssuer !== null)\r\n\t\t\t{\r\n\t\t\t\tif(possibleIssuer.subject.isEqual(authorityCertIssuer))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(authorityCertSerialNumberEqual)\r\n\t\t\t\t\t\tresult.push(possibleIssuer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(certificate.issuer.isEqual(possibleIssuer.subject))\r\n\t\t\t\t\tresult.push(possibleIssuer);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Trusted Certificates\r\n\t\tfor(const trustedCert of validationEngine.trustedCerts)\r\n\t\t\tcheckCertificate(trustedCert);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Intermediate Certificates\r\n\t\tfor(const intermediateCert of validationEngine.certs)\r\n\t\t\tcheckCertificate(intermediateCert);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Now perform certificate verification checking\r\n\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tconst verificationResult = await certificate.verify(result[i]);\r\n\t\t\t\tif(verificationResult === false)\r\n\t\t\t\t\tresult.splice(i, 1);\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\tresult.splice(i, 1); // Something wrong, remove the certificate\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tdefaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"trustedCerts\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"ocsps\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"checkDate\":\r\n\t\t\t\treturn new Date();\r\n\t\t\tcase \"findOrigin\":\r\n\t\t\t\treturn CertificateChainValidationEngine.defaultFindOrigin;\r\n\t\t\tcase \"findIssuer\":\r\n\t\t\t\treturn this.defaultFindIssuer;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificateChainValidationEngine class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\tasync sort(passedWhenNotRevValues = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst localCerts = [];\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Building certificate path\r\n\t\tasync function buildPath(certificate)\r\n\t\t{\r\n\t\t\tconst result = [];\r\n\t\t\t\r\n\t\t\t//region Aux function checking array for unique elements\r\n\t\t\tfunction checkUnique(array)\r\n\t\t\t{\r\n\t\t\t\tlet unique = true;\r\n\t\t\t\t\r\n\t\t\t\tfor(let i = 0; i < array.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < array.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(j === i)\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(array[i] === array[j])\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tunique = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(!unique)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn unique;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst findIssuerResult = await _this.findIssuer(certificate, _this);\r\n\t\t\tif(findIssuerResult.length === 0)\r\n\t\t\t\tthrow new Error(\"No valid certificate paths found\");\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < findIssuerResult.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(isEqualBuffer(findIssuerResult[i].tbs, certificate.tbs))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult.push([findIssuerResult[i]]);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst buildPathResult = await buildPath(findIssuerResult[i]);\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < buildPathResult.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst copy = buildPathResult[j].slice();\r\n\t\t\t\t\tcopy.splice(0, 0, findIssuerResult[i]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(checkUnique(copy))\r\n\t\t\t\t\t\tresult.push(copy);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tresult.push(buildPathResult[j]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find CRL for specific certificate\r\n\t\tasync function findCRL(certificate)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tconst issuerCertificates = [];\r\n\t\t\tconst crls = [];\r\n\t\t\tconst crlsAndCertificates = [];\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find all possible CRL issuers\r\n\t\t\tissuerCertificates.push(...localCerts.filter(element => certificate.issuer.isEqual(element.subject)));\r\n\t\t\tif(issuerCertificates.length === 0)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 1,\r\n\t\t\t\t\tstatusMessage: \"No certificate's issuers\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find all CRLs for certificate's issuer\r\n\t\t\tcrls.push(..._this.crls.filter(element => element.issuer.isEqual(certificate.issuer)));\r\n\t\t\tif(crls.length === 0)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 2,\r\n\t\t\t\t\tstatusMessage: \"No CRLs for specific certificate issuer\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find specific certificate of issuer for each CRL\r\n\t\t\tfor(let i = 0; i < crls.length; i++)\r\n\t\t\t{\r\n\t\t\t\t//region Check \"nextUpdate\" for the CRL\r\n\t\t\t\t// The \"nextUpdate\" is older than \"checkDate\".\r\n\t\t\t\t// Thus we should do have another, updated CRL.\r\n\t\t\t\t// Thus the CRL assumed to be invalid.\r\n\t\t\t\tif(crls[i].nextUpdate.value < _this.checkDate)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < issuerCertificates.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst result = await crls[i].verify({ issuerCertificate: issuerCertificates[j] });\r\n\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcrlsAndCertificates.push({\r\n\t\t\t\t\t\t\t\tcrl: crls[i],\r\n\t\t\t\t\t\t\t\tcertificate: issuerCertificates[j]\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(crlsAndCertificates.length)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 0,\r\n\t\t\t\t\tstatusMessage: \"\",\r\n\t\t\t\t\tresult: crlsAndCertificates\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tstatus: 3,\r\n\t\t\t\tstatusMessage: \"No valid CRLs found\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find OCSP for specific certificate\r\n\t\tasync function findOCSP(certificate, issuerCertificate)\r\n\t\t{\r\n\t\t\t//region Get hash algorithm from certificate\r\n\t\t\tconst hashAlgorithm = getAlgorithmByOID(certificate.signatureAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\treturn 1;\r\n\t\t\tif((\"hash\" in hashAlgorithm) === false)\r\n\t\t\t\treturn 1;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Search for OCSP response for the certificate\r\n\t\t\tfor(let i = 0; i < _this.ocsps.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst result = await _this.ocsps[i].getCertificateStatus(certificate, issuerCertificate);\r\n\t\t\t\tif(result.isForCertificate)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(result.status === 0)\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn 2;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check for certificate to be CA\r\n\t\tasync function checkForCA(certificate, needToCheckCRL = false)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet isCA = false;\r\n\t\t\tlet mustBeCA = false;\r\n\t\t\tlet keyUsagePresent = false;\r\n\t\t\tlet cRLSign = false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(\"extensions\" in certificate)\r\n\t\t\t{\r\n\t\t\t\tfor(let j = 0; j < certificate.extensions.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((certificate.extensions[j].critical === true) &&\r\n\t\t\t\t\t\t((\"parsedValue\" in certificate.extensions[j]) === false))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\tresultCode: 6,\r\n\t\t\t\t\t\t\tresultMessage: `Unable to parse critical certificate extension: ${certificate.extensions[j].extnID}`\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(certificate.extensions[j].extnID === \"2.5.29.15\") // KeyUsage\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkeyUsagePresent = true;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst view = new Uint8Array(certificate.extensions[j].parsedValue.valueBlock.valueHex);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((view[0] & 0x04) === 0x04) // Set flag \"keyCertSign\"\r\n\t\t\t\t\t\t\tmustBeCA = true;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((view[0] & 0x02) === 0x02) // Set flag \"cRLSign\"\r\n\t\t\t\t\t\t\tcRLSign = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(certificate.extensions[j].extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"cA\" in certificate.extensions[j].parsedValue)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(certificate.extensions[j].parsedValue.cA === true)\r\n\t\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif((mustBeCA === true) && (isCA === false))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 3,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - using \\\"keyCertSign\\\" flag set without BasicConstaints\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif((keyUsagePresent === true) && (isCA === true) && (mustBeCA === false))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 4,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - \\\"keyCertSign\\\" flag was not set\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\tif((isCA === true) && (keyUsagePresent === true) && ((needToCheckCRL) && (cRLSign === false)))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 5,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - intermediate certificate must have \\\"cRLSign\\\" key usage flag\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isCA === false)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tresult: false,\r\n\t\t\t\t\tresultCode: 7,\r\n\t\t\t\t\tresultMessage: \"Unable to build certificate chain - more than one possible end-user certificate\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresult: true,\r\n\t\t\t\tresultCode: 0,\r\n\t\t\t\tresultMessage: \"\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Basic check for certificate path\r\n\t\tasync function basicCheck(path, checkDate)\r\n\t\t{\r\n\t\t\t//region Check that all dates are valid\r\n\t\t\tfor(let i = 0; i < path.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif((path[i].notBefore.value > checkDate) ||\r\n\t\t\t\t\t(path[i].notAfter.value < checkDate))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 8,\r\n\t\t\t\t\t\tresultMessage: \"The certificate is either not yet valid or expired\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check certificate name chain\r\n\t\t\t\r\n\t\t\t// We should have at least two certificates: end entity and trusted root\r\n\t\t\tif(path.length < 2)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tresult: false,\r\n\t\t\t\t\tresultCode: 9,\r\n\t\t\t\t\tresultMessage: \"Too short certificate path\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(let i = (path.length - 2); i >= 0; i--)\r\n\t\t\t{\r\n\t\t\t\t//region Check that we do not have a \"self-signed\" certificate\r\n\t\t\t\tif(path[i].issuer.isEqual(path[i].subject) === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(path[i].issuer.isEqual(path[i + 1].subject) === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\tresultCode: 10,\r\n\t\t\t\t\t\t\tresultMessage: \"Incorrect name chaining\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check each certificate (except \"trusted root\") to be non-revoked\r\n\t\t\tif((_this.crls.length !== 0) || (_this.ocsps.length !== 0)) // If CRLs and OCSPs are empty then we consider all certificates to be valid\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < (path.length - 1); i++)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tlet ocspResult = 2;\r\n\t\t\t\t\tlet crlResult = {\r\n\t\t\t\t\t\tstatus: 0,\r\n\t\t\t\t\t\tstatusMessage: \"\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check OCSPs first\r\n\t\t\t\t\tif(_this.ocsps.length !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tocspResult = await findOCSP(path[i], path[i + 1]);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tswitch(ocspResult)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 12,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"One of certificates was revoked via OCSP response\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tcase 2: // continue to check the certificate with CRL\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check CRLs\r\n\t\t\t\t\tif(_this.crls.length !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcrlResult = await findCRL(path[i]);\r\n\r\n\t\t\t\t\t\tif(crlResult.status === 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(let j = 0; j < crlResult.result.length; j++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Check that the CRL issuer certificate have not been revoked\r\n\t\t\t\t\t\t\t\tconst isCertificateRevoked = crlResult.result[j].crl.isCertificateRevoked(path[i]);\r\n\t\t\t\t\t\t\t\tif(isCertificateRevoked)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\t\tresultCode: 12,\r\n\t\t\t\t\t\t\t\t\t\tresultMessage: \"One of certificates had been revoked\"\r\n\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Check that the CRL issuer certificate is a CA certificate\r\n\t\t\t\t\t\t\t\tconst isCertificateCA = await checkForCA(crlResult.result[j].certificate, true);\r\n\t\t\t\t\t\t\t\tif(isCertificateCA.result === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\t\tresultCode: 13,\r\n\t\t\t\t\t\t\t\t\t\tresultMessage: \"CRL issuer certificate is not a CA certificate or does not have crlSign flag\"\r\n\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(passedWhenNotRevValues === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthrow {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 11,\r\n\t\t\t\t\t\t\t\t\tresultMessage: `No revocation values found for one of certificates: ${crlResult.statusMessage}`\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(ocspResult === 2)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 11,\r\n\t\t\t\t\t\t\t\tresultMessage: \"No revocation values found for one of certificates\"\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Check we do have links to revocation values inside issuer's certificate\r\n\t\t\t\t\tif((ocspResult === 2) && (crlResult.status === 2) && passedWhenNotRevValues)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst issuerCertificate = path[i + 1];\r\n\t\t\t\t\t\tlet extensionFound = false;\r\n\r\n\t\t\t\t\t\tif(\"extensions\" in issuerCertificate)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(const extension of issuerCertificate.extensions)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tswitch(extension.extnID)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"2.5.29.31\": // CRLDistributionPoints\r\n\t\t\t\t\t\t\t\t\tcase \"2.5.29.46\": // FreshestCRL\r\n\t\t\t\t\t\t\t\t\tcase \"1.3.6.1.5.5.7.1.1\": // AuthorityInfoAccess\r\n\t\t\t\t\t\t\t\t\t\textensionFound = true;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(extensionFound)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrow {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 11,\r\n\t\t\t\t\t\t\t\tresultMessage: `No revocation values found for one of certificates: ${crlResult.statusMessage}`\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check each certificate (except \"end entity\") in the path to be a CA certificate\r\n\t\t\tfor(let i = 1; i < path.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst result = await checkForCA(path[i]);\r\n\t\t\t\tif(result.result === false)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 14,\r\n\t\t\t\t\t\tresultMessage: \"One of intermediate certificates is not a CA certificate\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresult: true\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Do main work\r\n\t\t//region Initialize \"localCerts\" by value of \"_this.certs\" + \"_this.trustedCerts\" arrays\r\n\t\tlocalCerts.push(..._this.trustedCerts);\r\n\t\tlocalCerts.push(..._this.certs);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check all certificates for been unique\r\n\t\tfor(let i = 0; i < localCerts.length; i++)\r\n\t\t{\r\n\t\t\tfor(let j = 0; j < localCerts.length; j++)\r\n\t\t\t{\r\n\t\t\t\tif(i === j)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t\r\n\t\t\t\tif(isEqualBuffer(localCerts[i].tbs, localCerts[j].tbs))\r\n\t\t\t\t{\r\n\t\t\t\t\tlocalCerts.splice(j, 1);\r\n\t\t\t\t\ti = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet result;\r\n\t\tconst certificatePath = [localCerts[localCerts.length - 1]]; // The \"end entity\" certificate must be the least in \"certs\" array\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Build path for \"end entity\" certificate\r\n\t\tresult = await buildPath(localCerts[localCerts.length - 1]);\r\n\t\tif(result.length === 0)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: 60,\r\n\t\t\t\tresultMessage: \"Unable to find certificate path\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Exclude certificate paths not ended with \"trusted roots\"\r\n\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\tlet found = false;\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < (result[i]).length; j++)\r\n\t\t\t{\r\n\t\t\t\tconst certificate = (result[i])[j];\r\n\t\t\t\t\r\n\t\t\t\tfor(let k = 0; k < _this.trustedCerts.length; k++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isEqualBuffer(certificate.tbs, _this.trustedCerts[k].tbs))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(found)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(!found)\r\n\t\t\t{\r\n\t\t\t\tresult.splice(i, 1);\r\n\t\t\t\ti = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(result.length === 0)\r\n\t\t{\r\n\t\t\tthrow {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: 97,\r\n\t\t\t\tresultMessage: \"No valid certificate paths found\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find shortest certificate path (for the moment it is the only criteria)\r\n\t\tlet shortestLength = result[0].length;\r\n\t\tlet shortestIndex = 0;\r\n\t\t\r\n\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\tif(result[i].length < shortestLength)\r\n\t\t\t{\r\n\t\t\t\tshortestLength = result[i].length;\r\n\t\t\t\tshortestIndex = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create certificate path for basic check\r\n\t\tfor(let i = 0; i < result[shortestIndex].length; i++)\r\n\t\t\tcertificatePath.push((result[shortestIndex])[i]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Perform basic checking for all certificates in the path\r\n\t\tresult = await basicCheck(certificatePath, _this.checkDate);\r\n\t\tif(result.result === false)\r\n\t\t\tthrow result;\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn certificatePath;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Major verification function for certificate chain.\r\n\t * @param {{initialPolicySet, initialExplicitPolicy, initialPolicyMappingInhibit, initialInhibitPolicy, initialPermittedSubtreesSet, initialExcludedSubtreesSet, initialRequiredNameForms}} [parameters]\r\n\t * @returns {Promise}\r\n\t */\r\n\tasync verify(parameters = {})\r\n\t{\r\n\t\t//region Auxiliary functions for name constraints checking\r\n\t\tfunction compareDNSName(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two dNSName values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"String\">DNS from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for DNS from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\tconst namePrepared = stringPrep(name);\r\n\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\tconst nameSplitted = namePrepared.split(\".\");\r\n\t\t\tconst constraintSplitted = constraintPrepared.split(\".\");\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Length calculation and additional check\r\n\t\t\tconst nameLen = nameSplitted.length;\r\n\t\t\tconst constrLen = constraintSplitted.length;\r\n\t\t\t\r\n\t\t\tif((nameLen === 0) || (constrLen === 0) || (nameLen < constrLen))\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that no part of \"name\" has zero length\r\n\t\t\tfor(let i = 0; i < nameLen; i++)\r\n\t\t\t{\r\n\t\t\t\tif(nameSplitted[i].length === 0)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that no part of \"constraint\" has zero length\r\n\t\t\tfor(let i = 0; i < constrLen; i++)\r\n\t\t\t{\r\n\t\t\t\tif(constraintSplitted[i].length === 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(i === 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(constrLen === 1)\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that \"name\" has a tail as \"constraint\"\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < constrLen; i++)\r\n\t\t\t{\r\n\t\t\t\tif(constraintSplitted[constrLen - 1 - i].length === 0)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t\r\n\t\t\t\tif(nameSplitted[nameLen - 1 - i].localeCompare(constraintSplitted[constrLen - 1 - i]) !== 0)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareRFC822Name(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two rfc822Name values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"String\">E-mail address from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for e-mail address from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\tconst namePrepared = stringPrep(name);\r\n\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\tconst nameSplitted = namePrepared.split(\"@\");\r\n\t\t\tconst constraintSplitted = constraintPrepared.split(\"@\");\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Splitted array length checking\r\n\t\t\tif((nameSplitted.length === 0) || (constraintSplitted.length === 0) || (nameSplitted.length < constraintSplitted.length))\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(constraintSplitted.length === 1)\r\n\t\t\t{\r\n\t\t\t\tconst result = compareDNSName(nameSplitted[1], constraintSplitted[0]);\r\n\t\t\t\t\r\n\t\t\t\tif(result)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Make a \"splitted\" versions of domain name from \"constraint\" and \"name\"\r\n\t\t\t\t\tconst ns = nameSplitted[1].split(\".\");\r\n\t\t\t\t\tconst cs = constraintSplitted[0].split(\".\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(cs[0].length === 0)\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn ns.length === cs.length;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn (namePrepared.localeCompare(constraintPrepared) === 0);\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareUniformResourceIdentifier(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two uniformResourceIdentifier values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"String\">uniformResourceIdentifier from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for uniformResourceIdentifier from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\tlet namePrepared = stringPrep(name);\r\n\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find out a major URI part to compare with\r\n\t\t\tconst ns = namePrepared.split(\"/\");\r\n\t\t\tconst cs = constraintPrepared.split(\"/\");\r\n\t\t\t\r\n\t\t\tif(cs.length > 1) // Malformed constraint\r\n\t\t\t\treturn false;\r\n\t\t\t\r\n\t\t\tif(ns.length > 1) // Full URI string\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < ns.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((ns[i].length > 0) && (ns[i].charAt(ns[i].length - 1) !== \":\"))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst nsPort = ns[i].split(\":\");\r\n\t\t\t\t\t\tnamePrepared = nsPort[0];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst result = compareDNSName(namePrepared, constraintPrepared);\r\n\t\t\t\r\n\t\t\tif(result)\r\n\t\t\t{\r\n\t\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\t\tconst nameSplitted = namePrepared.split(\".\");\r\n\t\t\t\tconst constraintSplitted = constraintPrepared.split(\".\");\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tif(constraintSplitted[0].length === 0)\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t\r\n\t\t\t\treturn nameSplitted.length === constraintSplitted.length;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareIPAddress(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two iPAddress values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">iPAddress from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">Constraint for iPAddress from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Common variables\r\n\t\t\tconst nameView = new Uint8Array(name.valueBlock.valueHex);\r\n\t\t\tconst constraintView = new Uint8Array(constraint.valueBlock.valueHex);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with IPv4 addresses\r\n\t\t\tif((nameView.length === 4) && (constraintView.length === 8))\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < 4; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((nameView[i] ^ constraintView[i]) & constraintView[i + 4])\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with IPv6 addresses\r\n\t\t\tif((nameView.length === 16) && (constraintView.length === 32))\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < 16; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((nameView[i] ^ constraintView[i]) & constraintView[i + 16])\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareDirectoryName(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two directoryName values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"in_window.org.pkijs.simpl.RDN\">directoryName from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"in_window.org.pkijs.simpl.RDN\">Constraint for directoryName from name</param>\r\n\t\t\t/// <param name=\"any\" type=\"Boolean\">Boolean flag - should be comparision interrupted after first match or we need to match all \"constraints\" parts</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Initial check\r\n\t\t\tif((name.typesAndValues.length === 0) || (constraint.typesAndValues.length === 0))\r\n\t\t\t\treturn true;\r\n\t\t\t\r\n\t\t\tif(name.typesAndValues.length < constraint.typesAndValues.length)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Initial variables\r\n\t\t\tlet result = true;\r\n\t\t\tlet nameStart = 0;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < constraint.typesAndValues.length; i++)\r\n\t\t\t{\r\n\t\t\t\tlet localResult = false;\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = nameStart; j < name.typesAndValues.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlocalResult = name.typesAndValues[j].isEqual(constraint.typesAndValues[i]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(name.typesAndValues[j].type === constraint.typesAndValues[i].type)\r\n\t\t\t\t\t\tresult = result && localResult;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(localResult === true)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((nameStart === 0) || (nameStart === j))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tnameStart = j + 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse // Structure of \"name\" must be the same with \"constraint\"\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(localResult === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn (nameStart === 0) ? false : result;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\t//region Initial checks\r\n\t\t\tif(this.certs.length === 0)\r\n\t\t\t\tthrow \"Empty certificate array\";\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get input variables\r\n\t\t\tlet passedWhenNotRevValues = false;\r\n\r\n\t\t\tif(\"passedWhenNotRevValues\" in parameters)\r\n\t\t\t\tpassedWhenNotRevValues = parameters.passedWhenNotRevValues;\r\n\r\n\t\t\tlet initialPolicySet = [];\r\n\t\t\tinitialPolicySet.push(\"2.5.29.32.0\"); // \"anyPolicy\"\r\n\t\t\t\r\n\t\t\tlet initialExplicitPolicy = false;\r\n\t\t\tlet initialPolicyMappingInhibit = false;\r\n\t\t\tlet initialInhibitPolicy = false;\r\n\t\t\t\r\n\t\t\tlet initialPermittedSubtreesSet = []; // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\t\tlet initialExcludedSubtreesSet = [];  // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\t\tlet initialRequiredNameForms = [];    // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\t\t\r\n\t\t\tif(\"initialPolicySet\" in parameters)\r\n\t\t\t\tinitialPolicySet = parameters.initialPolicySet;\r\n\t\t\t\r\n\t\t\tif(\"initialExplicitPolicy\" in parameters)\r\n\t\t\t\tinitialExplicitPolicy = parameters.initialExplicitPolicy;\r\n\t\t\t\r\n\t\t\tif(\"initialPolicyMappingInhibit\" in parameters)\r\n\t\t\t\tinitialPolicyMappingInhibit = parameters.initialPolicyMappingInhibit;\r\n\t\t\t\r\n\t\t\tif(\"initialInhibitPolicy\" in parameters)\r\n\t\t\t\tinitialInhibitPolicy = parameters.initialInhibitPolicy;\r\n\t\t\t\r\n\t\t\tif(\"initialPermittedSubtreesSet\" in parameters)\r\n\t\t\t\tinitialPermittedSubtreesSet = parameters.initialPermittedSubtreesSet;\r\n\t\t\t\r\n\t\t\tif(\"initialExcludedSubtreesSet\" in parameters)\r\n\t\t\t\tinitialExcludedSubtreesSet = parameters.initialExcludedSubtreesSet;\r\n\t\t\t\r\n\t\t\tif(\"initialRequiredNameForms\" in parameters)\r\n\t\t\t\tinitialRequiredNameForms = parameters.initialRequiredNameForms;\r\n\t\t\t\r\n\t\t\tlet explicitPolicyIndicator = initialExplicitPolicy;\r\n\t\t\tlet policyMappingInhibitIndicator = initialPolicyMappingInhibit;\r\n\t\t\tlet inhibitAnyPolicyIndicator = initialInhibitPolicy;\r\n\t\t\t\r\n\t\t\tconst pendingConstraints = new Array(3);\r\n\t\t\tpendingConstraints[0] = false; // For \"explicitPolicyPending\"\r\n\t\t\tpendingConstraints[1] = false; // For \"policyMappingInhibitPending\"\r\n\t\t\tpendingConstraints[2] = false; // For \"inhibitAnyPolicyPending\"\r\n\t\t\t\r\n\t\t\tlet explicitPolicyPending = 0;\r\n\t\t\tlet policyMappingInhibitPending = 0;\r\n\t\t\tlet inhibitAnyPolicyPending = 0;\r\n\t\t\t\r\n\t\t\tlet permittedSubtrees = initialPermittedSubtreesSet;\r\n\t\t\tlet excludedSubtrees = initialExcludedSubtreesSet;\r\n\t\t\tconst requiredNameForms = initialRequiredNameForms;\r\n\t\t\t\r\n\t\t\tlet pathDepth = 1;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Sorting certificates in the chain array\r\n\t\t\tthis.certs = await this.sort(passedWhenNotRevValues);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with policies\r\n\t\t\t//region Support variables\r\n\t\t\tconst allPolicies = []; // Array of all policies (string values)\r\n\t\t\tallPolicies.push(\"2.5.29.32.0\"); // Put \"anyPolicy\" at first place\r\n\t\t\t\r\n\t\t\tconst policiesAndCerts = []; // In fact \"array of array\" where rows are for each specific policy, column for each certificate and value is \"true/false\"\r\n\t\t\t\r\n\t\t\tconst anyPolicyArray = new Array(this.certs.length - 1); // Minus \"trusted anchor\"\r\n\t\t\tfor(let ii = 0; ii < (this.certs.length - 1); ii++)\r\n\t\t\t\tanyPolicyArray[ii] = true;\r\n\t\t\t\r\n\t\t\tpoliciesAndCerts.push(anyPolicyArray);\r\n\t\t\t\r\n\t\t\tconst policyMappings = new Array(this.certs.length - 1); // Array of \"PolicyMappings\" for each certificate\r\n\t\t\tconst certPolicies = new Array(this.certs.length - 1); // Array of \"CertificatePolicies\" for each certificate\r\n\t\t\t\r\n\t\t\tlet explicitPolicyStart = (explicitPolicyIndicator) ? (this.certs.length - 1) : (-1);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Gather all neccessary information from certificate chain\r\n\t\t\tfor(let i = (this.certs.length - 2); i >= 0; i--, pathDepth++)\r\n\t\t\t{\r\n\t\t\t\tif(\"extensions\" in this.certs[i])\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get information about certificate extensions\r\n\t\t\t\t\tfor(let j = 0; j < this.certs[i].extensions.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region CertificatePolicies\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.32\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertPolicies[i] = this.certs[i].extensions[j].parsedValue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region Remove entry from \"anyPolicies\" for the certificate\r\n\t\t\t\t\t\t\tfor(let s = 0; s < allPolicies.length; s++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(allPolicies[s] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tdelete (policiesAndCerts[s])[i];\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].extensions[j].parsedValue.certificatePolicies.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet policyIndex = (-1);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Try to find extension in \"allPolicies\" array\r\n\t\t\t\t\t\t\t\tfor(let s = 0; s < allPolicies.length; s++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier === allPolicies[s])\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpolicyIndex = s;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(policyIndex === (-1))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tallPolicies.push(this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tconst certArray = new Array(this.certs.length - 1);\r\n\t\t\t\t\t\t\t\t\tcertArray[i] = true;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tpoliciesAndCerts.push(certArray);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t(policiesAndCerts[policyIndex])[i] = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region PolicyMappings\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.33\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(policyMappingInhibitIndicator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 98,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"Policy mapping prohibited\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tpolicyMappings[i] = this.certs[i].extensions[j].parsedValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region PolicyConstraints\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.36\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(explicitPolicyIndicator === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region requireExplicitPolicy\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.requireExplicitPolicy === 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\texplicitPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\t\texplicitPolicyStart = i;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[0] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[0] = true;\r\n\t\t\t\t\t\t\t\t\t\texplicitPolicyPending = this.certs[i].extensions[j].parsedValue.requireExplicitPolicy;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\texplicitPolicyPending = (explicitPolicyPending > this.certs[i].extensions[j].parsedValue.requireExplicitPolicy) ? this.certs[i].extensions[j].parsedValue.requireExplicitPolicy : explicitPolicyPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region inhibitPolicyMapping\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping === 0)\r\n\t\t\t\t\t\t\t\t\tpolicyMappingInhibitIndicator = true;\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[1] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[1] = true;\r\n\t\t\t\t\t\t\t\t\t\tpolicyMappingInhibitPending = this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tpolicyMappingInhibitPending = (policyMappingInhibitPending > (this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1)) ? (this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1) : policyMappingInhibitPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region InhibitAnyPolicy\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.54\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(inhibitAnyPolicyIndicator === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.valueBlock.valueDec === 0)\r\n\t\t\t\t\t\t\t\t\tinhibitAnyPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[2] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[2] = true;\r\n\t\t\t\t\t\t\t\t\t\tinhibitAnyPolicyPending = this.certs[i].extensions[j].parsedValue.valueBlock.valueDec;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tinhibitAnyPolicyPending = (inhibitAnyPolicyPending > this.certs[i].extensions[j].parsedValue.valueBlock.valueDec) ? this.certs[i].extensions[j].parsedValue.valueBlock.valueDec : inhibitAnyPolicyPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check \"inhibitAnyPolicyIndicator\"\r\n\t\t\t\t\tif(inhibitAnyPolicyIndicator === true)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet policyIndex = (-1);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Find \"anyPolicy\" index\r\n\t\t\t\t\t\tfor(let searchAnyPolicy = 0; searchAnyPolicy < allPolicies.length; searchAnyPolicy++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(allPolicies[searchAnyPolicy] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpolicyIndex = searchAnyPolicy;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(policyIndex !== (-1))\r\n\t\t\t\t\t\t\tdelete (policiesAndCerts[0])[i]; // Unset value to \"undefined\" for \"anyPolicies\" value for current certificate\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Process with \"pending constraints\"\r\n\t\t\t\t\tif(explicitPolicyIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[0] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\texplicitPolicyPending--;\r\n\t\t\t\t\t\t\tif(explicitPolicyPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\texplicitPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\texplicitPolicyStart = i;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tpendingConstraints[0] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(policyMappingInhibitIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[1] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpolicyMappingInhibitPending--;\r\n\t\t\t\t\t\t\tif(policyMappingInhibitPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpolicyMappingInhibitIndicator = true;\r\n\t\t\t\t\t\t\t\tpendingConstraints[1] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(inhibitAnyPolicyIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[2] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tinhibitAnyPolicyPending--;\r\n\t\t\t\t\t\t\tif(inhibitAnyPolicyPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinhibitAnyPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\tpendingConstraints[2] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Working with policy mappings\r\n\t\t\tfor(let i = 0; i < (this.certs.length - 1); i++)\r\n\t\t\t{\r\n\t\t\t\t//region Check that there is \"policy mapping\" for level \"i + 1\"\r\n\t\t\t\tif((i < (this.certs.length - 2)) && (typeof policyMappings[i + 1] !== \"undefined\"))\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let k = 0; k < policyMappings[i + 1].mappings.length; k++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Check that we do not have \"anyPolicy\" in current mapping\r\n\t\t\t\t\t\tif((policyMappings[i + 1].mappings[k].issuerDomainPolicy === \"2.5.29.32.0\") || (policyMappings[i + 1].mappings[k].subjectDomainPolicy === \"2.5.29.32.0\"))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 99,\r\n\t\t\t\t\t\t\t\tresultMessage: \"The \\\"anyPolicy\\\" should not be a part of policy mapping scheme\"\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tlet issuerDomainPolicyIndex = (-1);\r\n\t\t\t\t\t\tlet subjectDomainPolicyIndex = (-1);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Search for index of policies indedes\r\n\t\t\t\t\t\tfor(let n = 0; n < allPolicies.length; n++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(allPolicies[n] === policyMappings[i + 1].mappings[k].issuerDomainPolicy)\r\n\t\t\t\t\t\t\t\tissuerDomainPolicyIndex = n;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(allPolicies[n] === policyMappings[i + 1].mappings[k].subjectDomainPolicy)\r\n\t\t\t\t\t\t\t\tsubjectDomainPolicyIndex = n;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Delete existing \"issuerDomainPolicy\" because on the level we mapped the policy to another one\r\n\t\t\t\t\t\tif(typeof (policiesAndCerts[issuerDomainPolicyIndex])[i] !== \"undefined\")\r\n\t\t\t\t\t\t\tdelete (policiesAndCerts[issuerDomainPolicyIndex])[i];\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check all policies for the certificate\r\n\t\t\t\t\t\tfor(let j = 0; j < certPolicies[i].certificatePolicies.length; j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(policyMappings[i + 1].mappings[k].subjectDomainPolicy === certPolicies[i].certificatePolicies[j].policyIdentifier)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Set mapped policy for current certificate\r\n\t\t\t\t\t\t\t\tif((issuerDomainPolicyIndex !== (-1)) && (subjectDomainPolicyIndex !== (-1)))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let m = 0; m <= i; m++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(typeof (policiesAndCerts[subjectDomainPolicyIndex])[m] !== \"undefined\")\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t(policiesAndCerts[issuerDomainPolicyIndex])[m] = true;\r\n\t\t\t\t\t\t\t\t\t\t\tdelete (policiesAndCerts[subjectDomainPolicyIndex])[m];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Working with \"explicitPolicyIndicator\" and \"anyPolicy\"\r\n\t\t\tfor(let i = 0; i < allPolicies.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(allPolicies[i] === \"2.5.29.32.0\")\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < explicitPolicyStart; j++)\r\n\t\t\t\t\t\tdelete (policiesAndCerts[i])[j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Create \"set of authorities-constrained policies\"\r\n\t\t\tconst authConstrPolicies = [];\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < policiesAndCerts.length; i++)\r\n\t\t\t{\r\n\t\t\t\tlet found = true;\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < (this.certs.length - 1); j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet anyPolicyFound = false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((j < explicitPolicyStart) && (allPolicies[i] === \"2.5.29.32.0\") && (allPolicies.length > 1))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(typeof (policiesAndCerts[i])[j] === \"undefined\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(j >= explicitPolicyStart)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Search for \"anyPolicy\" in the policy set\r\n\t\t\t\t\t\t\tfor(let k = 0; k < allPolicies.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(allPolicies[k] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif((policiesAndCerts[k])[j] === true)\r\n\t\t\t\t\t\t\t\t\t\tanyPolicyFound = true;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(!anyPolicyFound)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfound = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(found === true)\r\n\t\t\t\t\tauthConstrPolicies.push(allPolicies[i]);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Create \"set of user-constrained policies\"\r\n\t\t\tlet userConstrPolicies = [];\r\n\t\t\t\r\n\t\t\tif((initialPolicySet.length === 1) && (initialPolicySet[0] === \"2.5.29.32.0\") && (explicitPolicyIndicator === false))\r\n\t\t\t\tuserConstrPolicies = initialPolicySet;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif((authConstrPolicies.length === 1) && (authConstrPolicies[0] === \"2.5.29.32.0\"))\r\n\t\t\t\t\tuserConstrPolicies = initialPolicySet;\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let i = 0; i < authConstrPolicies.length; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(let j = 0; j < initialPolicySet.length; j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif((initialPolicySet[j] === authConstrPolicies[i]) || (initialPolicySet[j] === \"2.5.29.32.0\"))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tuserConstrPolicies.push(authConstrPolicies[i]);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Combine output object\r\n\t\t\tconst policyResult = {\r\n\t\t\t\tresult: (userConstrPolicies.length > 0),\r\n\t\t\t\tresultCode: 0,\r\n\t\t\t\tresultMessage: (userConstrPolicies.length > 0) ? \"\" : \"Zero \\\"userConstrPolicies\\\" array, no intersections with \\\"authConstrPolicies\\\"\",\r\n\t\t\t\tauthConstrPolicies,\r\n\t\t\t\tuserConstrPolicies,\r\n\t\t\t\texplicitPolicyIndicator,\r\n\t\t\t\tpolicyMappings,\r\n\t\t\t\tcertificatePath: this.certs\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tif(userConstrPolicies.length === 0)\r\n\t\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with name constraints\r\n\t\t\t//region Check a result from \"policy checking\" part\r\n\t\t\tif(policyResult.result === false)\r\n\t\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check all certificates, excluding \"trust anchor\"\r\n\t\t\tpathDepth = 1;\r\n\t\t\t\r\n\t\t\tfor(let i = (this.certs.length - 2); i >= 0; i--, pathDepth++)\r\n\t\t\t{\r\n\t\t\t\t//region Support variables\r\n\t\t\t\tlet subjectAltNames = [];\r\n\t\t\t\t\r\n\t\t\t\tlet certPermittedSubtrees = [];\r\n\t\t\t\tlet certExcludedSubtrees = [];\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tif(\"extensions\" in this.certs[i])\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < this.certs[i].extensions.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region NameConstraints\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.30\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(\"permittedSubtrees\" in this.certs[i].extensions[j].parsedValue)\r\n\t\t\t\t\t\t\t\tcertPermittedSubtrees = certPermittedSubtrees.concat(this.certs[i].extensions[j].parsedValue.permittedSubtrees);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(\"excludedSubtrees\" in this.certs[i].extensions[j].parsedValue)\r\n\t\t\t\t\t\t\t\tcertExcludedSubtrees = certExcludedSubtrees.concat(this.certs[i].extensions[j].parsedValue.excludedSubtrees);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region SubjectAltName\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.17\")\r\n\t\t\t\t\t\t\tsubjectAltNames = subjectAltNames.concat(this.certs[i].extensions[j].parsedValue.altNames);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//region Checking for \"required name forms\"\r\n\t\t\t\tlet formFound = (requiredNameForms.length <= 0);\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < requiredNameForms.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(requiredNameForms[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase 4: // directoryName\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(requiredNameForms[j].base.value.typesAndValues.length !== this.certs[i].subject.typesAndValues.length)\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tformFound = true;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(this.certs[i].subject.typesAndValues[k].type !== requiredNameForms[j].base.value.typesAndValues[k].type)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tformFound = false;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(formFound === true)\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault: // ??? Probably here we should reject the certificate ???\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(formFound === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\tpolicyResult.resultCode = 21;\r\n\t\t\t\t\tpolicyResult.resultMessage = \"No neccessary name form found\";\r\n\t\t\t\t\t\r\n\t\t\t\t\tthrow policyResult;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Checking for \"permited sub-trees\"\r\n\t\t\t\t//region Make groups for all types of constraints\r\n\t\t\t\tconst constrGroups = []; // Array of array for groupped constraints\r\n\t\t\t\tconstrGroups[0] = []; // rfc822Name\r\n\t\t\t\tconstrGroups[1] = []; // dNSName\r\n\t\t\t\tconstrGroups[2] = []; // directoryName\r\n\t\t\t\tconstrGroups[3] = []; // uniformResourceIdentifier\r\n\t\t\t\tconstrGroups[4] = []; // iPAddress\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < permittedSubtrees.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(permittedSubtrees[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tconstrGroups[0].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tconstrGroups[1].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\tconstrGroups[2].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\tcase 6:\r\n\t\t\t\t\t\t\tconstrGroups[3].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\t\tconstrGroups[4].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Check name constraints groupped by type, one-by-one\r\n\t\t\t\tfor(let p = 0; p < 5; p++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet groupPermitted = false;\r\n\t\t\t\t\tlet valueExists = false;\r\n\t\t\t\t\tconst group = constrGroups[p];\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let j = 0; j < group.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitch(p)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 1) // rfc822Name\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareRFC822Name(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse // Try to find out \"emailAddress\" inside \"subject\"\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif((this.certs[i].subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||    // PKCS#9 e-mail address\r\n\t\t\t\t\t\t\t\t\t\t\t(this.certs[i].subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\")) // RFC1274 \"rfc822Mailbox\" e-mail address\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareRFC822Name(this.certs[i].subject.typesAndValues[k].value.valueBlock.value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 2) // dNSName\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareDNSName(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\tgroupPermitted = compareDirectoryName(this.certs[i].subject, group[j].base.value);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 6) // uniformResourceIdentifier\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareUniformResourceIdentifier(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 7) // iPAddress\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareIPAddress(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(groupPermitted)\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((groupPermitted === false) && (group.length > 0) && valueExists)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\t\tpolicyResult.resultCode = 41;\r\n\t\t\t\t\t\tpolicyResult.resultMessage = \"Failed to meet \\\"permitted sub-trees\\\" name constraint\";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tthrow policyResult;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Checking for \"excluded sub-trees\"\r\n\t\t\t\tlet excluded = false;\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < excludedSubtrees.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(excludedSubtrees[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length >= 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 1) // rfc822Name\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareRFC822Name(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse // Try to find out \"emailAddress\" inside \"subject\"\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif((this.certs[i].subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||    // PKCS#9 e-mail address\r\n\t\t\t\t\t\t\t\t\t\t(this.certs[i].subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\")) // RFC1274 \"rfc822Mailbox\" e-mail address\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareRFC822Name(this.certs[i].subject.typesAndValues[k].value.valueBlock.value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 2) // dNSName\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareDNSName(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\texcluded = excluded || compareDirectoryName(this.certs[i].subject, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\tcase 6:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 6) // uniformResourceIdentifier\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareUniformResourceIdentifier(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 7) // iPAddress\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareIPAddress(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\tdefault: // No action, but probably here we need to create a warning for \"malformed constraint\"\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(excluded)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(excluded === true)\r\n\t\t\t\t{\r\n\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\tpolicyResult.resultCode = 42;\r\n\t\t\t\t\tpolicyResult.resultMessage = \"Failed to meet \\\"excluded sub-trees\\\" name constraint\";\r\n\t\t\t\t\t\r\n\t\t\t\t\tthrow policyResult;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Append \"cert_..._subtrees\" to \"..._subtrees\"\r\n\t\t\t\tpermittedSubtrees = permittedSubtrees.concat(certPermittedSubtrees);\r\n\t\t\t\texcludedSubtrees = excludedSubtrees.concat(certExcludedSubtrees);\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\tcatch(error)\r\n\t\t{\r\n\t\t\tif(error instanceof Object)\r\n\t\t\t{\r\n\t\t\t\tif(\"resultMessage\" in error)\r\n\t\t\t\t\treturn error;\r\n\t\t\t\t\r\n\t\t\t\tif(\"message\" in error)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: -1,\r\n\t\t\t\t\t\tresultMessage: error.message\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: -1,\r\n\t\t\t\tresultMessage: error\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}