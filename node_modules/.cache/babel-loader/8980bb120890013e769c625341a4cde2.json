{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\";\nimport OtherPrimeInfo from \"./OtherPrimeInfo.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC3447\r\n */\n\nexport default class RSAPrivateKey {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for RSAPrivateKey class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", RSAPrivateKey.defaultValues(\"version\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc modulus\r\n     */\n\n    this.modulus = getParametersValue(parameters, \"modulus\", RSAPrivateKey.defaultValues(\"modulus\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc publicExponent\r\n     */\n\n    this.publicExponent = getParametersValue(parameters, \"publicExponent\", RSAPrivateKey.defaultValues(\"publicExponent\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc privateExponent\r\n     */\n\n    this.privateExponent = getParametersValue(parameters, \"privateExponent\", RSAPrivateKey.defaultValues(\"privateExponent\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc prime1\r\n     */\n\n    this.prime1 = getParametersValue(parameters, \"prime1\", RSAPrivateKey.defaultValues(\"prime1\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc prime2\r\n     */\n\n    this.prime2 = getParametersValue(parameters, \"prime2\", RSAPrivateKey.defaultValues(\"prime2\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc exponent1\r\n     */\n\n    this.exponent1 = getParametersValue(parameters, \"exponent1\", RSAPrivateKey.defaultValues(\"exponent1\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc exponent2\r\n     */\n\n    this.exponent2 = getParametersValue(parameters, \"exponent2\", RSAPrivateKey.defaultValues(\"exponent2\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc coefficient\r\n     */\n\n    this.coefficient = getParametersValue(parameters, \"coefficient\", RSAPrivateKey.defaultValues(\"coefficient\"));\n    if (\"otherPrimeInfos\" in parameters)\n      /**\r\n       * @type {Array.<OtherPrimeInfo>}\r\n       * @desc otherPrimeInfos\r\n       */\n      this.otherPrimeInfos = getParametersValue(parameters, \"otherPrimeInfos\", RSAPrivateKey.defaultValues(\"otherPrimeInfos\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n    //region If input argument array contains \"json\" for this object\n\n    if (\"json\" in parameters) this.fromJSON(parameters.json); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"version\":\n        return 0;\n\n      case \"modulus\":\n        return new asn1js.Integer();\n\n      case \"publicExponent\":\n        return new asn1js.Integer();\n\n      case \"privateExponent\":\n        return new asn1js.Integer();\n\n      case \"prime1\":\n        return new asn1js.Integer();\n\n      case \"prime2\":\n        return new asn1js.Integer();\n\n      case \"exponent1\":\n        return new asn1js.Integer();\n\n      case \"exponent2\":\n        return new asn1js.Integer();\n\n      case \"coefficient\":\n        return new asn1js.Integer();\n\n      case \"otherPrimeInfos\":\n        return [];\n\n      default:\n        throw new Error(`Invalid member name for RSAPrivateKey class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * RSAPrivateKey ::= Sequence {\r\n   *    version           Version,\r\n   *    modulus           Integer,  -- n\r\n   *    publicExponent    Integer,  -- e\r\n   *    privateExponent   Integer,  -- d\r\n   *    prime1            Integer,  -- p\r\n   *    prime2            Integer,  -- q\r\n   *    exponent1         Integer,  -- d mod (p-1)\r\n   *    exponent2         Integer,  -- d mod (q-1)\r\n   *    coefficient       Integer,  -- (inverse of q) mod p\r\n   *    otherPrimeInfos   OtherPrimeInfos OPTIONAL\r\n   * }\r\n   *\r\n   * OtherPrimeInfos ::= Sequence SIZE(1..MAX) OF OtherPrimeInfo\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [version]\r\n     * @property {string} [modulus]\r\n     * @property {string} [publicExponent]\r\n     * @property {string} [privateExponent]\r\n     * @property {string} [prime1]\r\n     * @property {string} [prime2]\r\n     * @property {string} [exponent1]\r\n     * @property {string} [exponent2]\r\n     * @property {string} [coefficient]\r\n     * @property {string} [otherPrimeInfosName]\r\n     * @property {Object} [otherPrimeInfo]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Integer({\n        name: names.version || \"\"\n      }), new asn1js.Integer({\n        name: names.modulus || \"\"\n      }), new asn1js.Integer({\n        name: names.publicExponent || \"\"\n      }), new asn1js.Integer({\n        name: names.privateExponent || \"\"\n      }), new asn1js.Integer({\n        name: names.prime1 || \"\"\n      }), new asn1js.Integer({\n        name: names.prime2 || \"\"\n      }), new asn1js.Integer({\n        name: names.exponent1 || \"\"\n      }), new asn1js.Integer({\n        name: names.exponent2 || \"\"\n      }), new asn1js.Integer({\n        name: names.coefficient || \"\"\n      }), new asn1js.Sequence({\n        optional: true,\n        value: [new asn1js.Repeated({\n          name: names.otherPrimeInfosName || \"\",\n          value: OtherPrimeInfo.schema(names.otherPrimeInfo || {})\n        })]\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"version\", \"modulus\", \"publicExponent\", \"privateExponent\", \"prime1\", \"prime2\", \"exponent1\", \"exponent2\", \"coefficient\", \"otherPrimeInfos\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, RSAPrivateKey.schema({\n      names: {\n        version: \"version\",\n        modulus: \"modulus\",\n        publicExponent: \"publicExponent\",\n        privateExponent: \"privateExponent\",\n        prime1: \"prime1\",\n        prime2: \"prime2\",\n        exponent1: \"exponent1\",\n        exponent2: \"exponent2\",\n        coefficient: \"coefficient\",\n        otherPrimeInfo: {\n          names: {\n            blockName: \"otherPrimeInfos\"\n          }\n        }\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for RSAPrivateKey\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.version = asn1.result.version.valueBlock.valueDec;\n    this.modulus = asn1.result.modulus.convertFromDER(256);\n    this.publicExponent = asn1.result.publicExponent;\n    this.privateExponent = asn1.result.privateExponent.convertFromDER(256);\n    this.prime1 = asn1.result.prime1.convertFromDER(128);\n    this.prime2 = asn1.result.prime2.convertFromDER(128);\n    this.exponent1 = asn1.result.exponent1.convertFromDER(128);\n    this.exponent2 = asn1.result.exponent2.convertFromDER(128);\n    this.coefficient = asn1.result.coefficient.convertFromDER(128);\n    if (\"otherPrimeInfos\" in asn1.result) this.otherPrimeInfos = Array.from(asn1.result.otherPrimeInfos, element => new OtherPrimeInfo({\n      schema: element\n    })); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n    outputArray.push(new asn1js.Integer({\n      value: this.version\n    }));\n    outputArray.push(this.modulus.convertToDER());\n    outputArray.push(this.publicExponent);\n    outputArray.push(this.privateExponent.convertToDER());\n    outputArray.push(this.prime1.convertToDER());\n    outputArray.push(this.prime2.convertToDER());\n    outputArray.push(this.exponent1.convertToDER());\n    outputArray.push(this.exponent2.convertToDER());\n    outputArray.push(this.coefficient.convertToDER());\n\n    if (\"otherPrimeInfos\" in this) {\n      outputArray.push(new asn1js.Sequence({\n        value: Array.from(this.otherPrimeInfos, element => element.toSchema())\n      }));\n    } //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const jwk = {\n      n: toBase64(arrayBufferToString(this.modulus.valueBlock.valueHex), true, true, true),\n      e: toBase64(arrayBufferToString(this.publicExponent.valueBlock.valueHex), true, true, true),\n      d: toBase64(arrayBufferToString(this.privateExponent.valueBlock.valueHex), true, true, true),\n      p: toBase64(arrayBufferToString(this.prime1.valueBlock.valueHex), true, true, true),\n      q: toBase64(arrayBufferToString(this.prime2.valueBlock.valueHex), true, true, true),\n      dp: toBase64(arrayBufferToString(this.exponent1.valueBlock.valueHex), true, true, true),\n      dq: toBase64(arrayBufferToString(this.exponent2.valueBlock.valueHex), true, true, true),\n      qi: toBase64(arrayBufferToString(this.coefficient.valueBlock.valueHex), true, true, true)\n    };\n    if (\"otherPrimeInfos\" in this) jwk.oth = Array.from(this.otherPrimeInfos, element => element.toJSON());\n    return jwk;\n  } //**********************************************************************************\n\n  /**\r\n   * Convert JSON value into current object\r\n   * @param {Object} json\r\n   */\n\n\n  fromJSON(json) {\n    if (\"n\" in json) this.modulus = new asn1js.Integer({\n      valueHex: stringToArrayBuffer(fromBase64(json.n, true, true))\n    });else throw new Error(\"Absent mandatory parameter \\\"n\\\"\");\n    if (\"e\" in json) this.publicExponent = new asn1js.Integer({\n      valueHex: stringToArrayBuffer(fromBase64(json.e, true, true))\n    });else throw new Error(\"Absent mandatory parameter \\\"e\\\"\");\n    if (\"d\" in json) this.privateExponent = new asn1js.Integer({\n      valueHex: stringToArrayBuffer(fromBase64(json.d, true, true))\n    });else throw new Error(\"Absent mandatory parameter \\\"d\\\"\");\n    if (\"p\" in json) this.prime1 = new asn1js.Integer({\n      valueHex: stringToArrayBuffer(fromBase64(json.p, true, true))\n    });else throw new Error(\"Absent mandatory parameter \\\"p\\\"\");\n    if (\"q\" in json) this.prime2 = new asn1js.Integer({\n      valueHex: stringToArrayBuffer(fromBase64(json.q, true, true))\n    });else throw new Error(\"Absent mandatory parameter \\\"q\\\"\");\n    if (\"dp\" in json) this.exponent1 = new asn1js.Integer({\n      valueHex: stringToArrayBuffer(fromBase64(json.dp, true, true))\n    });else throw new Error(\"Absent mandatory parameter \\\"dp\\\"\");\n    if (\"dq\" in json) this.exponent2 = new asn1js.Integer({\n      valueHex: stringToArrayBuffer(fromBase64(json.dq, true, true))\n    });else throw new Error(\"Absent mandatory parameter \\\"dq\\\"\");\n    if (\"qi\" in json) this.coefficient = new asn1js.Integer({\n      valueHex: stringToArrayBuffer(fromBase64(json.qi, true, true))\n    });else throw new Error(\"Absent mandatory parameter \\\"qi\\\"\");\n    if (\"oth\" in json) this.otherPrimeInfos = Array.from(json.oth, element => new OtherPrimeInfo({\n      json: element\n    }));\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/RSAPrivateKey.js"],"names":["asn1js","getParametersValue","toBase64","arrayBufferToString","stringToArrayBuffer","fromBase64","clearProps","OtherPrimeInfo","RSAPrivateKey","constructor","parameters","version","defaultValues","modulus","publicExponent","privateExponent","prime1","prime2","exponent1","exponent2","coefficient","otherPrimeInfos","fromSchema","schema","fromJSON","json","memberName","Integer","Error","names","Sequence","name","blockName","value","optional","Repeated","otherPrimeInfosName","otherPrimeInfo","asn1","compareSchema","verified","result","valueBlock","valueDec","convertFromDER","Array","from","element","toSchema","outputArray","push","convertToDER","toJSON","jwk","n","valueHex","e","d","p","q","dp","dq","qi","oth"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\";\r\nimport OtherPrimeInfo from \"./OtherPrimeInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3447\r\n */\r\nexport default class RSAPrivateKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RSAPrivateKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", RSAPrivateKey.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc modulus\r\n\t\t */\r\n\t\tthis.modulus = getParametersValue(parameters, \"modulus\", RSAPrivateKey.defaultValues(\"modulus\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc publicExponent\r\n\t\t */\r\n\t\tthis.publicExponent = getParametersValue(parameters, \"publicExponent\", RSAPrivateKey.defaultValues(\"publicExponent\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc privateExponent\r\n\t\t */\r\n\t\tthis.privateExponent = getParametersValue(parameters, \"privateExponent\", RSAPrivateKey.defaultValues(\"privateExponent\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc prime1\r\n\t\t */\r\n\t\tthis.prime1 = getParametersValue(parameters, \"prime1\", RSAPrivateKey.defaultValues(\"prime1\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc prime2\r\n\t\t */\r\n\t\tthis.prime2 = getParametersValue(parameters, \"prime2\", RSAPrivateKey.defaultValues(\"prime2\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc exponent1\r\n\t\t */\r\n\t\tthis.exponent1 = getParametersValue(parameters, \"exponent1\", RSAPrivateKey.defaultValues(\"exponent1\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc exponent2\r\n\t\t */\r\n\t\tthis.exponent2 = getParametersValue(parameters, \"exponent2\", RSAPrivateKey.defaultValues(\"exponent2\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc coefficient\r\n\t\t */\r\n\t\tthis.coefficient = getParametersValue(parameters, \"coefficient\", RSAPrivateKey.defaultValues(\"coefficient\"));\r\n\r\n\t\tif(\"otherPrimeInfos\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<OtherPrimeInfo>}\r\n\t\t\t * @desc otherPrimeInfos\r\n\t\t\t */\r\n\t\t\tthis.otherPrimeInfos = getParametersValue(parameters, \"otherPrimeInfos\", RSAPrivateKey.defaultValues(\"otherPrimeInfos\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"modulus\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"publicExponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"privateExponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"prime1\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"prime2\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"exponent1\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"exponent2\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"coefficient\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"otherPrimeInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RSAPrivateKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RSAPrivateKey ::= Sequence {\r\n\t *    version           Version,\r\n\t *    modulus           Integer,  -- n\r\n\t *    publicExponent    Integer,  -- e\r\n\t *    privateExponent   Integer,  -- d\r\n\t *    prime1            Integer,  -- p\r\n\t *    prime2            Integer,  -- q\r\n\t *    exponent1         Integer,  -- d mod (p-1)\r\n\t *    exponent2         Integer,  -- d mod (q-1)\r\n\t *    coefficient       Integer,  -- (inverse of q) mod p\r\n\t *    otherPrimeInfos   OtherPrimeInfos OPTIONAL\r\n\t * }\r\n\t *\r\n\t * OtherPrimeInfos ::= Sequence SIZE(1..MAX) OF OtherPrimeInfo\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [modulus]\r\n\t\t * @property {string} [publicExponent]\r\n\t\t * @property {string} [privateExponent]\r\n\t\t * @property {string} [prime1]\r\n\t\t * @property {string} [prime2]\r\n\t\t * @property {string} [exponent1]\r\n\t\t * @property {string} [exponent2]\r\n\t\t * @property {string} [coefficient]\r\n\t\t * @property {string} [otherPrimeInfosName]\r\n\t\t * @property {Object} [otherPrimeInfo]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.modulus || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.publicExponent || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.privateExponent || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.prime1 || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.prime2 || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.exponent1 || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.exponent2 || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.coefficient || \"\") }),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.otherPrimeInfosName || \"\"),\r\n\t\t\t\t\t\t\tvalue: OtherPrimeInfo.schema(names.otherPrimeInfo || {})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"modulus\",\r\n\t\t\t\"publicExponent\",\r\n\t\t\t\"privateExponent\",\r\n\t\t\t\"prime1\",\r\n\t\t\t\"prime2\",\r\n\t\t\t\"exponent1\",\r\n\t\t\t\"exponent2\",\r\n\t\t\t\"coefficient\",\r\n\t\t\t\"otherPrimeInfos\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRSAPrivateKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tmodulus: \"modulus\",\r\n\t\t\t\t\tpublicExponent: \"publicExponent\",\r\n\t\t\t\t\tprivateExponent: \"privateExponent\",\r\n\t\t\t\t\tprime1: \"prime1\",\r\n\t\t\t\t\tprime2: \"prime2\",\r\n\t\t\t\t\texponent1: \"exponent1\",\r\n\t\t\t\t\texponent2: \"exponent2\",\r\n\t\t\t\t\tcoefficient: \"coefficient\",\r\n\t\t\t\t\totherPrimeInfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"otherPrimeInfos\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RSAPrivateKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.modulus = asn1.result.modulus.convertFromDER(256);\r\n\t\tthis.publicExponent = asn1.result.publicExponent;\r\n\t\tthis.privateExponent = asn1.result.privateExponent.convertFromDER(256);\r\n\t\tthis.prime1 = asn1.result.prime1.convertFromDER(128);\r\n\t\tthis.prime2 = asn1.result.prime2.convertFromDER(128);\r\n\t\tthis.exponent1 = asn1.result.exponent1.convertFromDER(128);\r\n\t\tthis.exponent2 = asn1.result.exponent2.convertFromDER(128);\r\n\t\tthis.coefficient = asn1.result.coefficient.convertFromDER(128);\r\n\r\n\t\tif(\"otherPrimeInfos\" in asn1.result)\r\n\t\t\tthis.otherPrimeInfos = Array.from(asn1.result.otherPrimeInfos, element => new OtherPrimeInfo({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(this.modulus.convertToDER());\r\n\t\toutputArray.push(this.publicExponent);\r\n\t\toutputArray.push(this.privateExponent.convertToDER());\r\n\t\toutputArray.push(this.prime1.convertToDER());\r\n\t\toutputArray.push(this.prime2.convertToDER());\r\n\t\toutputArray.push(this.exponent1.convertToDER());\r\n\t\toutputArray.push(this.exponent2.convertToDER());\r\n\t\toutputArray.push(this.coefficient.convertToDER());\r\n\t\t\r\n\t\tif(\"otherPrimeInfos\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.otherPrimeInfos, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst jwk = {\r\n\t\t\tn: toBase64(arrayBufferToString(this.modulus.valueBlock.valueHex), true, true, true),\r\n\t\t\te: toBase64(arrayBufferToString(this.publicExponent.valueBlock.valueHex), true, true, true),\r\n\t\t\td: toBase64(arrayBufferToString(this.privateExponent.valueBlock.valueHex), true, true, true),\r\n\t\t\tp: toBase64(arrayBufferToString(this.prime1.valueBlock.valueHex), true, true, true),\r\n\t\t\tq: toBase64(arrayBufferToString(this.prime2.valueBlock.valueHex), true, true, true),\r\n\t\t\tdp: toBase64(arrayBufferToString(this.exponent1.valueBlock.valueHex), true, true, true),\r\n\t\t\tdq: toBase64(arrayBufferToString(this.exponent2.valueBlock.valueHex), true, true, true),\r\n\t\t\tqi: toBase64(arrayBufferToString(this.coefficient.valueBlock.valueHex), true, true, true)\r\n\t\t};\r\n\r\n\t\tif(\"otherPrimeInfos\" in this)\r\n\t\t\tjwk.oth = Array.from(this.otherPrimeInfos, element => element.toJSON());\r\n\r\n\t\treturn jwk;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"n\" in json)\r\n\t\t\tthis.modulus = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.n, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"n\\\"\");\r\n\r\n\t\tif(\"e\" in json)\r\n\t\t\tthis.publicExponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.e, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"e\\\"\");\r\n\r\n\t\tif(\"d\" in json)\r\n\t\t\tthis.privateExponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.d, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"d\\\"\");\r\n\r\n\t\tif(\"p\" in json)\r\n\t\t\tthis.prime1 = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.p, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"p\\\"\");\r\n\r\n\t\tif(\"q\" in json)\r\n\t\t\tthis.prime2 = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.q, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"q\\\"\");\r\n\r\n\t\tif(\"dp\" in json)\r\n\t\t\tthis.exponent1 = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.dp, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"dp\\\"\");\r\n\r\n\t\tif(\"dq\" in json)\r\n\t\t\tthis.exponent2 = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.dq, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"dq\\\"\");\r\n\r\n\t\tif(\"qi\" in json)\r\n\t\t\tthis.coefficient = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.qi, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"qi\\\"\");\r\n\r\n\t\tif(\"oth\" in json)\r\n\t\t\tthis.otherPrimeInfos = Array.from(json.oth, element => new OtherPrimeInfo({ json: element }));\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}