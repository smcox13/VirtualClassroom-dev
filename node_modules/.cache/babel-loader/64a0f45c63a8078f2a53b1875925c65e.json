{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nexport default class PasswordRecipientinfo {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for PasswordRecipientinfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", PasswordRecipientinfo.defaultValues(\"version\"));\n    if (\"keyDerivationAlgorithm\" in parameters)\n      /**\r\n       * @type {AlgorithmIdentifier}\r\n       * @desc keyDerivationAlgorithm\r\n       */\n      this.keyDerivationAlgorithm = getParametersValue(parameters, \"keyDerivationAlgorithm\", PasswordRecipientinfo.defaultValues(\"keyDerivationAlgorithm\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc keyEncryptionAlgorithm\r\n     */\n\n    this.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", PasswordRecipientinfo.defaultValues(\"keyEncryptionAlgorithm\"));\n    /**\r\n     * @type {OctetString}\r\n     * @desc encryptedKey\r\n     */\n\n    this.encryptedKey = getParametersValue(parameters, \"encryptedKey\", PasswordRecipientinfo.defaultValues(\"encryptedKey\"));\n    /**\r\n     * @type {ArrayBuffer}\r\n     * @desc password Password to derive key from\r\n     */\n\n    this.password = getParametersValue(parameters, \"password\", PasswordRecipientinfo.defaultValues(\"password\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"version\":\n        return -1;\n\n      case \"keyDerivationAlgorithm\":\n        return new AlgorithmIdentifier();\n\n      case \"keyEncryptionAlgorithm\":\n        return new AlgorithmIdentifier();\n\n      case \"encryptedKey\":\n        return new asn1js.OctetString();\n\n      case \"password\":\n        return new ArrayBuffer(0);\n\n      default:\n        throw new Error(`Invalid member name for PasswordRecipientinfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"version\":\n        return memberValue === -1;\n\n      case \"keyDerivationAlgorithm\":\n      case \"keyEncryptionAlgorithm\":\n        return memberValue.algorithmId === \"\" && \"algorithmParams\" in memberValue === false;\n\n      case \"encryptedKey\":\n        return memberValue.isEqual(PasswordRecipientinfo.defaultValues(\"encryptedKey\"));\n\n      case \"password\":\n        return memberValue.byteLength === 0;\n\n      default:\n        throw new Error(`Invalid member name for PasswordRecipientinfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * PasswordRecipientInfo ::= SEQUENCE {\r\n   *    version CMSVersion,   -- Always set to 0\r\n   *    keyDerivationAlgorithm [0] KeyDerivationAlgorithmIdentifier OPTIONAL,\r\n   *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n   *    encryptedKey EncryptedKey }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [keyDerivationAlgorithm]\r\n     * @property {string} [keyEncryptionAlgorithm]\r\n     * @property {string} [encryptedKey]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Integer({\n        name: names.version || \"\"\n      }), new asn1js.Constructed({\n        name: names.keyDerivationAlgorithm || \"\",\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: AlgorithmIdentifier.schema().valueBlock.value\n      }), AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}), new asn1js.OctetString({\n        name: names.encryptedKey || \"\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"version\", \"keyDerivationAlgorithm\", \"keyEncryptionAlgorithm\", \"encryptedKey\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, PasswordRecipientinfo.schema({\n      names: {\n        version: \"version\",\n        keyDerivationAlgorithm: \"keyDerivationAlgorithm\",\n        keyEncryptionAlgorithm: {\n          names: {\n            blockName: \"keyEncryptionAlgorithm\"\n          }\n        },\n        encryptedKey: \"encryptedKey\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PasswordRecipientinfo\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.version = asn1.result.version.valueBlock.valueDec;\n\n    if (\"keyDerivationAlgorithm\" in asn1.result) {\n      this.keyDerivationAlgorithm = new AlgorithmIdentifier({\n        schema: new asn1js.Sequence({\n          value: asn1.result.keyDerivationAlgorithm.valueBlock.value\n        })\n      });\n    }\n\n    this.keyEncryptionAlgorithm = new AlgorithmIdentifier({\n      schema: asn1.result.keyEncryptionAlgorithm\n    });\n    this.encryptedKey = asn1.result.encryptedKey; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create output array for sequence\n    const outputArray = [];\n    outputArray.push(new asn1js.Integer({\n      value: this.version\n    }));\n\n    if (\"keyDerivationAlgorithm\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: this.keyDerivationAlgorithm.toSchema().valueBlock.value\n      }));\n    }\n\n    outputArray.push(this.keyEncryptionAlgorithm.toSchema());\n    outputArray.push(this.encryptedKey); //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      version: this.version,\n      keyDerivationAlgorithm: this.keyDerivationAlgorithm.toJSON(),\n      keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n      encryptedKey: this.encryptedKey.toJSON()\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/PasswordRecipientinfo.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","PasswordRecipientinfo","constructor","parameters","version","defaultValues","keyDerivationAlgorithm","keyEncryptionAlgorithm","encryptedKey","password","fromSchema","schema","memberName","OctetString","ArrayBuffer","Error","compareWithDefault","memberValue","algorithmId","isEqual","byteLength","names","Sequence","name","blockName","value","Integer","Constructed","optional","idBlock","tagClass","tagNumber","valueBlock","asn1","compareSchema","verified","result","valueDec","toSchema","outputArray","push","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class PasswordRecipientinfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PasswordRecipientinfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", PasswordRecipientinfo.defaultValues(\"version\"));\r\n\r\n\t\tif(\"keyDerivationAlgorithm\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {AlgorithmIdentifier}\r\n\t\t\t * @desc keyDerivationAlgorithm\r\n\t\t\t */\r\n\t\t\tthis.keyDerivationAlgorithm = getParametersValue(parameters, \"keyDerivationAlgorithm\", PasswordRecipientinfo.defaultValues(\"keyDerivationAlgorithm\"));\r\n\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc keyEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", PasswordRecipientinfo.defaultValues(\"keyEncryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc encryptedKey\r\n\t\t */\r\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", PasswordRecipientinfo.defaultValues(\"encryptedKey\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc password Password to derive key from\r\n\t\t */\r\n\t\tthis.password = getParametersValue(parameters, \"password\", PasswordRecipientinfo.defaultValues(\"password\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"keyDerivationAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"password\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PasswordRecipientinfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === (-1));\r\n\t\t\tcase \"keyDerivationAlgorithm\":\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn (memberValue.isEqual(PasswordRecipientinfo.defaultValues(\"encryptedKey\")));\r\n\t\t\tcase \"password\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PasswordRecipientinfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PasswordRecipientInfo ::= SEQUENCE {\r\n\t *    version CMSVersion,   -- Always set to 0\r\n\t *    keyDerivationAlgorithm [0] KeyDerivationAlgorithmIdentifier OPTIONAL,\r\n\t *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n\t *    encryptedKey EncryptedKey }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyDerivationAlgorithm]\r\n\t\t * @property {string} [keyEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.keyDerivationAlgorithm || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: AlgorithmIdentifier.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"keyDerivationAlgorithm\",\r\n\t\t\t\"keyEncryptionAlgorithm\",\r\n\t\t\t\"encryptedKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPasswordRecipientinfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tkeyDerivationAlgorithm: \"keyDerivationAlgorithm\",\r\n\t\t\t\t\tkeyEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PasswordRecipientinfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\r\n\t\tif(\"keyDerivationAlgorithm\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.keyDerivationAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.keyDerivationAlgorithm.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create output array for sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\r\n\t\tif(\"keyDerivationAlgorithm\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.keyDerivationAlgorithm.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\toutputArray.push(this.keyEncryptionAlgorithm.toSchema());\r\n\t\toutputArray.push(this.encryptedKey);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tversion: this.version,\r\n\t\t\tkeyDerivationAlgorithm: this.keyDerivationAlgorithm.toJSON(),\r\n\t\t\tkeyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}