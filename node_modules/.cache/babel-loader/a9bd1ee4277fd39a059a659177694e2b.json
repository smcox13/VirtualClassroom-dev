{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transforms = undefined;\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _deleteProperty = require('babel-runtime/core-js/reflect/delete-property');\n\nvar _deleteProperty2 = _interopRequireDefault(_deleteProperty);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _symbol = require('babel-runtime/core-js/symbol');\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nvar _has2 = require('lodash/has');\n\nvar _has3 = _interopRequireDefault(_has2);\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _curry2 = require('lodash/curry');\n\nvar _curry3 = _interopRequireDefault(_curry2);\n\nvar _capitalize2 = require('lodash/capitalize');\n\nvar _capitalize3 = _interopRequireDefault(_capitalize2);\n\nvar _toArray = require('./to-array');\n\nvar _toArray2 = _interopRequireDefault(_toArray);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar KEY = (0, _symbol2.default)('KEY');\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nvar encryptTextProp = (0, _curry3.default)(function (name, ctx, key, object) {\n  return ctx.transform('encryptTextProp', name, key, object);\n});\nvar encryptJsonProp = (0, _curry3.default)(function (name, ctx, key, object) {\n  return ctx.transform('encryptJsonProp', name, key, object);\n}); // eslint-disable-next-line import/prefer-default-export\n\nvar transforms = exports.transforms = (0, _toArray2.default)('outbound', {\n  encryptObject: function encryptObject(ctx, key, object) {\n    if (!object) {\n      object = key;\n      key = undefined;\n    }\n\n    if (!object) {\n      return _promise2.default.resolve();\n    }\n\n    if (!object.objectType) {\n      return _promise2.default.resolve();\n    }\n\n    if (key === false) {\n      return _promise2.default.resolve();\n    }\n\n    return ctx.transform('encrypt' + (0, _capitalize3.default)(object.objectType), key, object);\n  },\n  encryptConversation: function encryptConversation(ctx, key, conversation) {\n    if (key === false) {\n      return _promise2.default.resolve();\n    }\n\n    return _promise2.default.resolve(key || ctx.webex.internal.encryption.kms.createUnboundKeys({\n      count: 1\n    })).then(function (keys) {\n      var k = (0, _isArray3.default)(keys) ? keys[0] : keys;\n\n      if ((0, _has3.default)(conversation, 'kmsMessage.keyUris') && !conversation.kmsMessage.keyUris.includes(k.uri)) {\n        conversation.kmsMessage.keyUris.push(k.uri);\n      }\n\n      return _promise2.default.all([// too many implicit returns on the same line is difficult to interpret\n      // eslint-disable-next-line arrow-body-style\n      (0, _has3.default)(conversation, 'activities.items') && conversation.activities.items.reduce(function (p, activity) {\n        // eslint-disable-next-line max-nested-callbacks\n        return p.then(function () {\n          return ctx.transform('encryptObject', k, activity);\n        });\n      }, _promise2.default.resolve()), ctx.transform('encryptPropDisplayName', k, conversation)]).then(function () {\n        conversation.encryptionKeyUrl = k.uri || k; // we only want to set the defaultActivityEncryptionKeyUrl if we've\n        // bound a new key\n\n        if (!key) {\n          conversation.defaultActivityEncryptionKeyUrl = conversation.defaultActivityEncryptionKeyUrl || k.uri || k;\n        }\n      });\n    });\n  },\n  encryptActivity: function encryptActivity(ctx, key, activity) {\n    // Activity is already encrypted\n    if (activity.encryptionKeyUrl) {\n      return _promise2.default.resolve();\n    }\n\n    return ctx.transform('encrypt' + (0, _capitalize3.default)(activity.verb) + 'Activity', key, activity).then(function () {\n      key = key || activity[KEY];\n      return ctx.transform('prepareActivityKmsMessage', key, activity);\n    });\n  },\n  encryptVerbActivity: function encryptVerbActivity(ctx, key, activity) {\n    return ctx.transform('maybeEncryptTarget', key, activity).then(function () {\n      key = key || activity[KEY];\n    }).then(function () {\n      return ctx.transform('encryptObject', key, activity.object);\n    });\n  },\n  maybeEncryptTarget: function maybeEncryptTarget(ctx, key, activity) {\n    // This isn't quite right; if we just go by key, we have no guarantee that\n    // we have a proper KRO available for add activities\n    if (key) {\n      return _promise2.default.resolve();\n    }\n\n    if ((0, _has3.default)(activity, 'target.defaultActivityEncryptionKeyUrl') && activity.target.defaultActivityEncryptionKeyUrl && (0, _has3.default)(activity, 'target.kmsResourceObjectUrl')) {\n      activity[KEY] = key || activity.target.defaultActivityEncryptionKeyUrl;\n      return _promise2.default.resolve();\n    }\n\n    var conversationUrl = activity.target && activity.target.url;\n\n    if (!conversationUrl) {\n      return _promise2.default.reject(new Error('Cannot determine encryption key for activity\\'s conversation; no key url or conversation url provided'));\n    }\n\n    return ctx.webex.internal.conversation.get({\n      url: conversationUrl\n    }).then(function (conversation) {\n      if (!conversation.defaultActivityEncryptionKeyUrl) {\n        return ctx.webex.internal.conversation.updateKey(conversation).then(function (updateKeyActivity) {\n          if (updateKeyActivity.kmsMessage.resource) {\n            activity.target.kmsResourceObjectUrl = updateKeyActivity.kmsMessage.resource.uri;\n          }\n\n          activity[KEY] = activity.target.defaultActivityEncryptionKeyUrl = updateKeyActivity.object.defaultActivityEncryptionKeyUrl;\n        });\n      }\n\n      if (!activity.target.defaultActivityEncryptionKeyUrl) {\n        ctx.webex.logger.warn('plugin-conversation: downloaded conversation to determine its defaultActivityEncryptionKeyUrl; make sure to pass all encryption related properties when calling Webex.conversation methods.');\n      }\n\n      if (!activity.target.kmsResourceObjectUrl) {\n        ctx.webex.logger.warn('plugin-conversation: downloaded conversation to determine its kmsResourceObjectUrl; make sure to pass all encryption related properties when calling Webex.conversation methods.');\n      }\n\n      activity[KEY] = activity.target.defaultActivityEncryptionKeyUrl = conversation.defaultActivityEncryptionKeyUrl;\n      activity.target.kmsResourceObjectUrl = conversation.kmsResourceObjectUrl;\n      return _promise2.default.resolve();\n    });\n  },\n  prepareActivityKmsMessage: function prepareActivityKmsMessage(ctx, key, activity) {\n    if (activity.kmsMessage) {\n      if (!key && activity.verb === 'updateKey' && (0, _has3.default)(activity, 'object.defaultActivityEncryptionKeyUrl')) {\n        key = (0, _get3.default)(activity, 'object.defaultActivityEncryptionKeyUrl');\n      }\n\n      if (!key && activity.verb === 'leave' && (0, _has3.default)(activity, 'target.defaultActivityEncryptionKeyUrl')) {\n        key = (0, _get3.default)(activity, 'target.defaultActivityEncryptionKeyUrl');\n      }\n\n      if (key) {\n        var kro = activity.target.kmsResourceObjectUrl;\n        ['uri', 'resourceUri'].forEach(function (k) {\n          if (activity.kmsMessage[k] && !kro && activity.kmsMessage[k].includes('<KRO>')) {\n            throw new Error('encrypter: cannot determine kro');\n          }\n\n          if (activity.kmsMessage[k]) {\n            activity.kmsMessage[k] = activity.kmsMessage[k].replace('<KRO>', kro); // key may be a key or a key url\n\n            activity.kmsMessage[k] = activity.kmsMessage[k].replace('<KEYURL>', key.keyUrl || key);\n          }\n        });\n      } // If we made it this far and still don't have an encryption key, assume\n      // this is a conversation that is not encrypted and we're performing an\n      // action that should not encrypt it (e.g. `leave`)\n      else {\n          (0, _deleteProperty2.default)(activity, 'kmsMessage');\n        }\n    }\n  },\n  encryptVerbActivityWithKey: {\n    direction: 'outbound',\n    fn: function fn(ctx, key, activity) {\n      return ctx.transform('encryptVerbActivity', key, activity).then(function () {\n        key = key || activity[KEY];\n        activity.encryptionKeyUrl = key.uri || key;\n      });\n    }\n  },\n  encryptAddActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivity'\n  },\n  encryptAssignActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivityWithKey'\n  },\n  encryptCreateActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivity'\n  },\n  encryptPostActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivityWithKey'\n  },\n  encryptShareActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivityWithKey'\n  },\n  encryptCardactionActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivityWithKey'\n  },\n  encryptUpdateActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivityWithKey'\n  },\n  encryptUpdateKeyActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivity'\n  },\n  encryptComment: function encryptComment(ctx, key, comment) {\n    return _promise2.default.all([ctx.transform('encryptPropDisplayName', key, comment), ctx.transform('encryptPropContent', key, comment)]);\n  },\n  encryptContent: function encryptContent(ctx, key, content) {\n    var promises = content.files.items.map(function (item) {\n      return ctx.transform('encryptObject', key, item);\n    });\n    promises.push(ctx.transform('encryptPropContent', key, content));\n    promises.push(ctx.transform('encryptPropDisplayName', key, content));\n    return _promise2.default.all(promises);\n  },\n  encryptFile: function encryptFile(ctx, key, file) {\n    if (file.image && !file.image.scr) {\n      return _promise2.default.reject(new Error('`file.image` must have an `scr`'));\n    }\n\n    return _promise2.default.all([ctx.transform('encryptPropScr', key, file), ctx.transform('encryptPropDisplayName', key, file), ctx.transform('encryptPropContent', key, file), file.image && ctx.transform('encryptPropScr', key, file.image)]);\n  },\n  encryptSubmit: function encryptSubmit(ctx, key, submit) {\n    return ctx.transform('encryptPropInputs', key, submit);\n  },\n  // TODO is this used for anything other than the now-removed stickies service?\n  encryptImageURI: function encryptImageURI(ctx, key, imageURI) {\n    return ctx.transform('encryptPropLocation', key, imageURI);\n  },\n  encryptPropContent: encryptTextProp('content'),\n  encryptPropDisplayName: encryptTextProp('displayName'),\n  encryptPropInputs: encryptJsonProp('inputs'),\n  encryptPropLocation: encryptTextProp('location'),\n  encryptPropScr: function encryptPropScr(ctx, key, object) {\n    if (!object.scr) {\n      return _promise2.default.resolve();\n    }\n\n    return ctx.webex.internal.encryption.encryptScr(key, object.scr).then(function (scr) {\n      object.scr = scr;\n    });\n  },\n  encryptJsonProp: function encryptJsonProp(ctx, name, key, object) {\n    if (!object[name]) {\n      return _promise2.default.resolve();\n    }\n\n    return ctx.webex.internal.encryption.encryptText(key.uri || key, (0, _stringify2.default)(object[name])).then(function (ciphertext) {\n      object[name] = ciphertext;\n    });\n  },\n  encryptTextProp: function encryptTextProp(ctx, name, key, object) {\n    if (!object[name]) {\n      return _promise2.default.resolve();\n    }\n\n    return ctx.webex.internal.encryption.encryptText(key.uri || key, object[name]).then(function (ciphertext) {\n      object[name] = ciphertext;\n    });\n  }\n});","map":{"version":3,"sources":["encryption-transforms.js"],"names":["KEY","encryptTextProp","ctx","encryptJsonProp","transforms","encryptObject","object","key","encryptConversation","count","k","keys","conversation","encryptActivity","activity","encryptVerbActivity","maybeEncryptTarget","conversationUrl","url","updateKeyActivity","prepareActivityKmsMessage","kro","encryptVerbActivityWithKey","direction","fn","encryptAddActivity","alias","encryptAssignActivity","encryptCreateActivity","encryptPostActivity","encryptShareActivity","encryptCardactionActivity","encryptUpdateActivity","encryptUpdateKeyActivity","encryptComment","encryptContent","promises","encryptFile","file","encryptSubmit","encryptImageURI","encryptPropContent","encryptPropDisplayName","encryptPropInputs","encryptPropLocation","encryptPropScr"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {\n  capitalize,\n  curry,\n  get,\n  has,\n  isArray\n} from 'lodash';\n\nimport toArray from './to-array';\n\nconst KEY = Symbol('KEY');\n\nconst encryptTextProp = curry((name, ctx, key, object) => ctx.transform('encryptTextProp', name, key, object));\n\nconst encryptJsonProp = curry((name, ctx, key, object) => ctx.transform('encryptJsonProp', name, key, object));\n\n// eslint-disable-next-line import/prefer-default-export\nexport const transforms = toArray('outbound', {\n  encryptObject(ctx, key, object) {\n    if (!object) {\n      object = key;\n      key = undefined;\n    }\n\n    if (!object) {\n      return Promise.resolve();\n    }\n\n    if (!object.objectType) {\n      return Promise.resolve();\n    }\n\n    if (key === false) {\n      return Promise.resolve();\n    }\n\n    return ctx.transform(`encrypt${capitalize(object.objectType)}`, key, object);\n  },\n\n  encryptConversation(ctx, key, conversation) {\n    if (key === false) {\n      return Promise.resolve();\n    }\n\n    return Promise.resolve(key || ctx.webex.internal.encryption.kms.createUnboundKeys({count: 1}))\n      .then((keys) => {\n        const k = isArray(keys) ? keys[0] : keys;\n\n        if (has(conversation, 'kmsMessage.keyUris') && !conversation.kmsMessage.keyUris.includes(k.uri)) {\n          conversation.kmsMessage.keyUris.push(k.uri);\n        }\n\n        return Promise.all([\n          // too many implicit returns on the same line is difficult to interpret\n          // eslint-disable-next-line arrow-body-style\n          has(conversation, 'activities.items') && conversation.activities.items.reduce((p, activity) => {\n            // eslint-disable-next-line max-nested-callbacks\n            return p.then(() => ctx.transform('encryptObject', k, activity));\n          }, Promise.resolve()),\n          ctx.transform('encryptPropDisplayName', k, conversation)\n        ])\n          .then(() => {\n            conversation.encryptionKeyUrl = k.uri || k;\n            // we only want to set the defaultActivityEncryptionKeyUrl if we've\n            // bound a new key\n            if (!key) {\n              conversation.defaultActivityEncryptionKeyUrl = conversation.defaultActivityEncryptionKeyUrl || k.uri || k;\n            }\n          });\n      });\n  },\n\n  encryptActivity(ctx, key, activity) {\n    // Activity is already encrypted\n    if (activity.encryptionKeyUrl) {\n      return Promise.resolve();\n    }\n\n    return ctx.transform(`encrypt${capitalize(activity.verb)}Activity`, key, activity)\n      .then(() => {\n        key = key || activity[KEY];\n\n        return ctx.transform('prepareActivityKmsMessage', key, activity);\n      });\n  },\n\n  encryptVerbActivity(ctx, key, activity) {\n    return ctx.transform('maybeEncryptTarget', key, activity)\n      .then(() => {\n        key = key || activity[KEY];\n      })\n      .then(() => ctx.transform('encryptObject', key, activity.object));\n  },\n\n  maybeEncryptTarget(ctx, key, activity) {\n    // This isn't quite right; if we just go by key, we have no guarantee that\n    // we have a proper KRO available for add activities\n    if (key) {\n      return Promise.resolve();\n    }\n\n    if (has(activity, 'target.defaultActivityEncryptionKeyUrl') &&\n      activity.target.defaultActivityEncryptionKeyUrl &&\n      has(activity, 'target.kmsResourceObjectUrl')\n    ) {\n      activity[KEY] = key || activity.target.defaultActivityEncryptionKeyUrl;\n\n      return Promise.resolve();\n    }\n\n    const conversationUrl = activity.target && activity.target.url;\n\n    if (!conversationUrl) {\n      return Promise.reject(new Error('Cannot determine encryption key for activity\\'s conversation; no key url or conversation url provided'));\n    }\n\n    return ctx.webex.internal.conversation.get({url: conversationUrl})\n      .then((conversation) => {\n        if (!conversation.defaultActivityEncryptionKeyUrl) {\n          return ctx.webex.internal.conversation.updateKey(conversation)\n            .then((updateKeyActivity) => {\n              if (updateKeyActivity.kmsMessage.resource) {\n                activity.target.kmsResourceObjectUrl = updateKeyActivity.kmsMessage.resource.uri;\n              }\n              activity[KEY] = activity.target.defaultActivityEncryptionKeyUrl = updateKeyActivity.object.defaultActivityEncryptionKeyUrl;\n            });\n        }\n\n        if (!activity.target.defaultActivityEncryptionKeyUrl) {\n          ctx.webex.logger.warn('plugin-conversation: downloaded conversation to determine its defaultActivityEncryptionKeyUrl; make sure to pass all encryption related properties when calling Webex.conversation methods.');\n        }\n\n        if (!activity.target.kmsResourceObjectUrl) {\n          ctx.webex.logger.warn('plugin-conversation: downloaded conversation to determine its kmsResourceObjectUrl; make sure to pass all encryption related properties when calling Webex.conversation methods.');\n        }\n\n        activity[KEY] = activity.target.defaultActivityEncryptionKeyUrl = conversation.defaultActivityEncryptionKeyUrl;\n        activity.target.kmsResourceObjectUrl = conversation.kmsResourceObjectUrl;\n\n        return Promise.resolve();\n      });\n  },\n\n  prepareActivityKmsMessage(ctx, key, activity) {\n    if (activity.kmsMessage) {\n      if (!key && activity.verb === 'updateKey' && has(activity, 'object.defaultActivityEncryptionKeyUrl')) {\n        key = get(activity, 'object.defaultActivityEncryptionKeyUrl');\n      }\n\n      if (!key && activity.verb === 'leave' && has(activity, 'target.defaultActivityEncryptionKeyUrl')) {\n        key = get(activity, 'target.defaultActivityEncryptionKeyUrl');\n      }\n\n      if (key) {\n        const kro = activity.target.kmsResourceObjectUrl;\n\n        ['uri', 'resourceUri'].forEach((k) => {\n          if (activity.kmsMessage[k] && !kro && activity.kmsMessage[k].includes('<KRO>')) {\n            throw new Error('encrypter: cannot determine kro');\n          }\n\n          if (activity.kmsMessage[k]) {\n            activity.kmsMessage[k] = activity.kmsMessage[k].replace('<KRO>', kro);\n            // key may be a key or a key url\n            activity.kmsMessage[k] = activity.kmsMessage[k].replace('<KEYURL>', key.keyUrl || key);\n          }\n        });\n      }\n      // If we made it this far and still don't have an encryption key, assume\n      // this is a conversation that is not encrypted and we're performing an\n      // action that should not encrypt it (e.g. `leave`)\n      else {\n        Reflect.deleteProperty(activity, 'kmsMessage');\n      }\n    }\n  },\n\n  encryptVerbActivityWithKey: {\n    direction: 'outbound',\n    fn(ctx, key, activity) {\n      return ctx.transform('encryptVerbActivity', key, activity)\n        .then(() => {\n          key = key || activity[KEY];\n          activity.encryptionKeyUrl = key.uri || key;\n        });\n    }\n  },\n\n  encryptAddActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivity'\n  },\n\n  encryptAssignActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivityWithKey'\n  },\n\n  encryptCreateActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivity'\n  },\n\n  encryptPostActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivityWithKey'\n  },\n\n  encryptShareActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivityWithKey'\n  },\n\n  encryptCardactionActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivityWithKey'\n  },\n\n  encryptUpdateActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivityWithKey'\n  },\n\n  encryptUpdateKeyActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivity'\n  },\n\n  encryptComment(ctx, key, comment) {\n    return Promise.all([\n      ctx.transform('encryptPropDisplayName', key, comment),\n      ctx.transform('encryptPropContent', key, comment)\n    ]);\n  },\n\n  encryptContent(ctx, key, content) {\n    const promises = content.files.items.map((item) => ctx.transform('encryptObject', key, item));\n\n    promises.push(ctx.transform('encryptPropContent', key, content));\n    promises.push(ctx.transform('encryptPropDisplayName', key, content));\n\n    return Promise.all(promises);\n  },\n\n  encryptFile(ctx, key, file) {\n    if (file.image && !file.image.scr) {\n      return Promise.reject(new Error('`file.image` must have an `scr`'));\n    }\n\n    return Promise.all([\n      ctx.transform('encryptPropScr', key, file),\n      ctx.transform('encryptPropDisplayName', key, file),\n      ctx.transform('encryptPropContent', key, file),\n      file.image && ctx.transform('encryptPropScr', key, file.image)\n    ]);\n  },\n\n  encryptSubmit(ctx, key, submit) {\n    return ctx.transform('encryptPropInputs', key, submit);\n  },\n\n  // TODO is this used for anything other than the now-removed stickies service?\n  encryptImageURI(ctx, key, imageURI) {\n    return ctx.transform('encryptPropLocation', key, imageURI);\n  },\n\n  encryptPropContent: encryptTextProp('content'),\n\n  encryptPropDisplayName: encryptTextProp('displayName'),\n\n  encryptPropInputs: encryptJsonProp('inputs'),\n\n  encryptPropLocation: encryptTextProp('location'),\n\n  encryptPropScr(ctx, key, object) {\n    if (!object.scr) {\n      return Promise.resolve();\n    }\n\n    return ctx.webex.internal.encryption.encryptScr(key, object.scr)\n      .then((scr) => {\n        object.scr = scr;\n      });\n  },\n\n  encryptJsonProp(ctx, name, key, object) {\n    if (!object[name]) {\n      return Promise.resolve();\n    }\n\n    return ctx.webex.internal.encryption.encryptText(key.uri || key, JSON.stringify(object[name]))\n      .then((ciphertext) => {\n        object[name] = ciphertext;\n      });\n  },\n\n  encryptTextProp(ctx, name, key, object) {\n    if (!object[name]) {\n      return Promise.resolve();\n    }\n\n    return ctx.webex.internal.encryption.encryptText(key.uri || key, object[name])\n      .then((ciphertext) => {\n        object[name] = ciphertext;\n      });\n  }\n});\n"]},"metadata":{},"sourceType":"script"}