{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isNan = require('babel-runtime/core-js/number/is-nan');\n\nvar _isNan2 = _interopRequireDefault(_isNan);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _apply = require('babel-runtime/core-js/reflect/apply');\n\nvar _apply2 = _interopRequireDefault(_apply);\n\nvar _isObject2 = require('lodash/isObject');\n\nvar _isObject3 = _interopRequireDefault(_isObject2);\n\nvar _defaults2 = require('lodash/defaults');\n\nvar _defaults3 = _interopRequireDefault(_defaults2);\n\nvar _ampersandState = require('ampersand-state');\n\nvar _ampersandState2 = _interopRequireDefault(_ampersandState);\n\nvar _constants = require('../constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * The model returned from the {@link FeatureModel#parse} method.\n *\n * @typedef {Object} ParsedFeatureModel\n * @property {boolean|number|string} ParsedFeatureModel.value - The parsed val.\n * @property {string} ParsedFeatureModel.type - The type of the parsed val.\n */\n\n/**\n * Feature model.\n *\n * @description\n * This model contains details on a single feature and is received from the\n * **WDM** service upon registration.\n */\n// External dependencies.\n\n\nvar FeatureModel = _ampersandState2.default.extend({\n  idAttribute: 'key',\n  // needed by Ampersand to determine unique item\n  // Ampersand property members.\n  props: {\n    /**\n     * Contains the unique identifier for this feature to be addressed by.\n     *\n     * @type {string}\n     */\n    key: 'string',\n\n    /**\n     * This property contains the date in which this feature was last modified.\n     *\n     * @type {date}\n     */\n    lastModified: 'date',\n\n    /**\n     * This property defines whether or not the feature is mutable.\n     *\n     * @type {boolean}\n     */\n    mutable: 'boolean',\n\n    /**\n     * This property contains the data type the string value should be\n     * interpreted as.\n     *\n     * @type {FEATURE_TYPES}\n     */\n    type: 'string',\n\n    /**\n     * This property contains the string value of this feature.\n     *\n     * @type {string}\n     */\n    val: 'string',\n\n    /**\n     * This property contains the interpreted value of this feature.\n     *\n     * @type {any}\n     */\n    value: 'any'\n  },\n\n  /**\n   * Class object constructor. This method safely initializes the class object\n   * prior to it fully loading to allow data to be accessed and modified\n   * immediately after construction instead of initialization.\n   *\n   * @override\n   * @param {Object} attrs - An object to map against the feature's properties.\n   * @param {Object} [options={}] - Ampersand options for `parse` and `parent`.\n   */\n  constructor: function constructor(attrs) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    (0, _defaults3.default)(options, {\n      parse: true\n    });\n    return (0, _apply2.default)(_ampersandState2.default.prototype.constructor, this, [attrs, options]);\n  },\n  // Ampsersand method members.\n\n  /**\n   * Parse {@link FeatureModel} properties recieved as strings from **WDM**\n   * and cast them as their appropriate types.\n   *\n   * @private\n   * @memberof FeatureModel\n   * @param {Object} model - The model to parse.\n   * @property {string} model.val - The value to be parsed.\n   * @returns {ParsedFeatureModel} - The parsed model.\n   */\n  parse: function parse(model) {\n    // Validate that a model was provided and that it is an object.\n    if (!model || (typeof model === 'undefined' ? 'undefined' : (0, _typeof3.default)(model)) !== 'object') {\n      // Return an empty object to satisfy the requirements of `Ampersand`.\n      return {};\n    }\n\n    var parsedModel = (0, _extends3.default)({}, model);\n    var val = parsedModel.val; // Validate that the value is a number.\n\n    if (!(0, _isNan2.default)(Number(val))) {\n      parsedModel.type = _constants.FEATURE_TYPES.NUMBER;\n      parsedModel.value = Number(val);\n    } // Validate if the value should be a true boolean.\n    else if (val === 'true') {\n        parsedModel.type = _constants.FEATURE_TYPES.BOOLEAN;\n        parsedModel.value = true;\n      } // Validate if the value should be a false boolean.\n      else if (val === 'false') {\n          parsedModel.type = _constants.FEATURE_TYPES.BOOLEAN;\n          parsedModel.value = false;\n        } // In all other cases, the value is string, even if it is undefined.\n        else {\n            parsedModel.type = _constants.FEATURE_TYPES.STRING;\n            parsedModel.value = val;\n          }\n\n    return parsedModel;\n  },\n\n  /**\n   * Serialize the feature using the parent ampersand method with its date as an\n   * ISO string. This converts the feature into a request-transportable object.\n   *\n   * @override\n   * @param  {Record<string,boolean>} [args] - List of properties to serialize.\n   * @returns {Object} - The request-ready transport object.\n   */\n  serialize: function serialize() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    } // Call the overloaded class member.\n\n\n    var attrs = (0, _apply2.default)(_ampersandState2.default.prototype.serialize, this, args); // Validate that the overloaded class member returned an object with the\n    // `lastModified` key-value pair and instance it as an ISO string.\n\n    if (attrs.lastModified) {\n      attrs.lastModified = new Date(attrs.lastModified).toISOString();\n    }\n\n    return attrs;\n  },\n\n  /**\n   * Set a property of this object to a specific value. This method utilizes\n   * code that exists within the `ampersand-state` dependency to handle\n   * scenarios in which `key = {\"key\": \"value\"}` or\n   * `key = \"key\", value = \"value\"`. Since the snippet is pulled directly from\n   * `ampersand-state`, there is no need to test both scenarios.\n   *\n   * @override\n   * @param {object | string} key - The key value, or object to be set.\n   * @param {any} value - The key value or object to set the keyed pair to.\n   * @param {any} options - The object to set the keyed pair to.\n   * @returns {any} - The changed property.\n   */\n  set: function set(key, value, options) {\n    // Declare formatted output variables for properly setting the targetted\n    // property for this method.\n    var attrs = void 0;\n    var optns = void 0; // Validate if the key is an instance of any object or not.\n\n    if ((0, _isObject3.default)(key) || key === null) {\n      attrs = key;\n      optns = value;\n    } else {\n      attrs = {};\n      attrs[key] = value;\n      optns = options;\n    }\n\n    attrs = this.parse(attrs, optns);\n    return (0, _apply2.default)(_ampersandState2.default.prototype.set, this, [attrs, optns]);\n  }\n});\n\nexports.default = FeatureModel;","map":{"version":3,"sources":["feature-model.js"],"names":["FeatureModel","idAttribute","props","key","lastModified","mutable","type","val","value","constructor","options","parse","AmpState","parsedModel","Number","FEATURE_TYPES","serialize","args","attrs","set","optns"],"mappings":"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","sourcesContent":["// External dependencies.\nimport AmpState from 'ampersand-state';\nimport {defaults, isObject} from 'lodash';\n\nimport {FEATURE_TYPES} from '../constants';\n\n/**\n * The model returned from the {@link FeatureModel#parse} method.\n *\n * @typedef {Object} ParsedFeatureModel\n * @property {boolean|number|string} ParsedFeatureModel.value - The parsed val.\n * @property {string} ParsedFeatureModel.type - The type of the parsed val.\n */\n\n/**\n * Feature model.\n *\n * @description\n * This model contains details on a single feature and is received from the\n * **WDM** service upon registration.\n */\nconst FeatureModel = AmpState.extend({\n\n  idAttribute: 'key', // needed by Ampersand to determine unique item\n\n  // Ampersand property members.\n\n  props: {\n    /**\n     * Contains the unique identifier for this feature to be addressed by.\n     *\n     * @type {string}\n     */\n    key: 'string',\n\n    /**\n     * This property contains the date in which this feature was last modified.\n     *\n     * @type {date}\n     */\n    lastModified: 'date',\n\n    /**\n     * This property defines whether or not the feature is mutable.\n     *\n     * @type {boolean}\n     */\n    mutable: 'boolean',\n\n    /**\n     * This property contains the data type the string value should be\n     * interpreted as.\n     *\n     * @type {FEATURE_TYPES}\n     */\n    type: 'string',\n\n    /**\n     * This property contains the string value of this feature.\n     *\n     * @type {string}\n     */\n    val: 'string',\n\n    /**\n     * This property contains the interpreted value of this feature.\n     *\n     * @type {any}\n     */\n    value: 'any'\n  },\n\n  /**\n   * Class object constructor. This method safely initializes the class object\n   * prior to it fully loading to allow data to be accessed and modified\n   * immediately after construction instead of initialization.\n   *\n   * @override\n   * @param {Object} attrs - An object to map against the feature's properties.\n   * @param {Object} [options={}] - Ampersand options for `parse` and `parent`.\n   */\n  constructor(attrs, options = {}) {\n    defaults(options, {parse: true});\n\n    return Reflect.apply(\n      AmpState.prototype.constructor,\n      this,\n      [attrs, options]\n    );\n  },\n\n  // Ampsersand method members.\n\n  /**\n   * Parse {@link FeatureModel} properties recieved as strings from **WDM**\n   * and cast them as their appropriate types.\n   *\n   * @private\n   * @memberof FeatureModel\n   * @param {Object} model - The model to parse.\n   * @property {string} model.val - The value to be parsed.\n   * @returns {ParsedFeatureModel} - The parsed model.\n   */\n  parse(model) {\n    // Validate that a model was provided and that it is an object.\n    if (!model || typeof model !== 'object') {\n      // Return an empty object to satisfy the requirements of `Ampersand`.\n      return {};\n    }\n\n    const parsedModel = {...model};\n    const {val} = parsedModel;\n\n    // Validate that the value is a number.\n    if (!Number.isNaN(Number(val))) {\n      parsedModel.type = FEATURE_TYPES.NUMBER;\n      parsedModel.value = Number(val);\n    }\n    // Validate if the value should be a true boolean.\n    else if (val === 'true') {\n      parsedModel.type = FEATURE_TYPES.BOOLEAN;\n      parsedModel.value = true;\n    }\n    // Validate if the value should be a false boolean.\n    else if (val === 'false') {\n      parsedModel.type = FEATURE_TYPES.BOOLEAN;\n      parsedModel.value = false;\n    }\n    // In all other cases, the value is string, even if it is undefined.\n    else {\n      parsedModel.type = FEATURE_TYPES.STRING;\n      parsedModel.value = val;\n    }\n\n    return parsedModel;\n  },\n\n  /**\n   * Serialize the feature using the parent ampersand method with its date as an\n   * ISO string. This converts the feature into a request-transportable object.\n   *\n   * @override\n   * @param  {Record<string,boolean>} [args] - List of properties to serialize.\n   * @returns {Object} - The request-ready transport object.\n   */\n  serialize(...args) {\n    // Call the overloaded class member.\n    const attrs = Reflect.apply(AmpState.prototype.serialize, this, args);\n\n    // Validate that the overloaded class member returned an object with the\n    // `lastModified` key-value pair and instance it as an ISO string.\n    if (attrs.lastModified) {\n      attrs.lastModified = (new Date(attrs.lastModified).toISOString());\n    }\n\n    return attrs;\n  },\n\n  /**\n   * Set a property of this object to a specific value. This method utilizes\n   * code that exists within the `ampersand-state` dependency to handle\n   * scenarios in which `key = {\"key\": \"value\"}` or\n   * `key = \"key\", value = \"value\"`. Since the snippet is pulled directly from\n   * `ampersand-state`, there is no need to test both scenarios.\n   *\n   * @override\n   * @param {object | string} key - The key value, or object to be set.\n   * @param {any} value - The key value or object to set the keyed pair to.\n   * @param {any} options - The object to set the keyed pair to.\n   * @returns {any} - The changed property.\n   */\n  set(key, value, options) {\n    // Declare formatted output variables for properly setting the targetted\n    // property for this method.\n    let attrs;\n    let optns;\n\n    // Validate if the key is an instance of any object or not.\n    if (isObject(key) || key === null) {\n      attrs = key;\n      optns = value;\n    }\n    else {\n      attrs = {};\n      attrs[key] = value;\n      optns = options;\n    }\n\n    attrs = this.parse(attrs, optns);\n\n    return Reflect.apply(AmpState.prototype.set, this, [attrs, optns]);\n  }\n});\n\nexport default FeatureModel;\n"]},"metadata":{},"sourceType":"script"}