{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nexport default class BasicConstraints {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for BasicConstraints class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   * @property {Object} [cA]\r\n   * @property {Object} [pathLenConstraint]\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {boolean}\r\n     * @desc cA\r\n     */\n    this.cA = getParametersValue(parameters, \"cA\", false);\n    if (\"pathLenConstraint\" in parameters)\n      /**\r\n       * @type {number|Integer}\r\n       * @desc pathLenConstraint\r\n       */\n      this.pathLenConstraint = getParametersValue(parameters, \"pathLenConstraint\", 0); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"cA\":\n        return false;\n\n      default:\n        throw new Error(`Invalid member name for BasicConstraints class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * BasicConstraints ::= SEQUENCE {\r\n   *    cA                      BOOLEAN DEFAULT FALSE,\r\n   *    pathLenConstraint       INTEGER (0..MAX) OPTIONAL }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [cA]\r\n     * @property {string} [pathLenConstraint]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Boolean({\n        optional: true,\n        name: names.cA || \"\"\n      }), new asn1js.Integer({\n        optional: true,\n        name: names.pathLenConstraint || \"\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"cA\", \"pathLenConstraint\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, BasicConstraints.schema({\n      names: {\n        cA: \"cA\",\n        pathLenConstraint: \"pathLenConstraint\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for BasicConstraints\"); //endregion\n    //region Get internal properties from parsed schema\n\n    if (\"cA\" in asn1.result) this.cA = asn1.result.cA.valueBlock.value;\n\n    if (\"pathLenConstraint\" in asn1.result) {\n      if (asn1.result.pathLenConstraint.valueBlock.isHexOnly) this.pathLenConstraint = asn1.result.pathLenConstraint;else this.pathLenConstraint = asn1.result.pathLenConstraint.valueBlock.valueDec;\n    } //endregion\n\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n    if (this.cA !== BasicConstraints.defaultValues(\"cA\")) outputArray.push(new asn1js.Boolean({\n      value: this.cA\n    }));\n\n    if (\"pathLenConstraint\" in this) {\n      if (this.pathLenConstraint instanceof asn1js.Integer) outputArray.push(this.pathLenConstraint);else outputArray.push(new asn1js.Integer({\n        value: this.pathLenConstraint\n      }));\n    } //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const object = {};\n    if (this.cA !== BasicConstraints.defaultValues(\"cA\")) object.cA = this.cA;\n\n    if (\"pathLenConstraint\" in this) {\n      if (this.pathLenConstraint instanceof asn1js.Integer) object.pathLenConstraint = this.pathLenConstraint.toJSON();else object.pathLenConstraint = this.pathLenConstraint;\n    }\n\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/BasicConstraints.js"],"names":["asn1js","getParametersValue","clearProps","BasicConstraints","constructor","parameters","cA","pathLenConstraint","fromSchema","schema","defaultValues","memberName","Error","names","Sequence","name","blockName","value","Boolean","optional","Integer","asn1","compareSchema","verified","result","valueBlock","isHexOnly","valueDec","toSchema","outputArray","push","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class BasicConstraints\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for BasicConstraints class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {Object} [cA]\r\n\t * @property {Object} [pathLenConstraint]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {boolean}\r\n\t\t * @desc cA\r\n\t\t */\r\n\t\tthis.cA = getParametersValue(parameters, \"cA\", false);\r\n\r\n\t\tif(\"pathLenConstraint\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number|Integer}\r\n\t\t\t * @desc pathLenConstraint\r\n\t\t\t */\r\n\t\t\tthis.pathLenConstraint = getParametersValue(parameters, \"pathLenConstraint\", 0);\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"cA\":\r\n\t\t\t\treturn false;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for BasicConstraints class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * BasicConstraints ::= SEQUENCE {\r\n\t *    cA                      BOOLEAN DEFAULT FALSE,\r\n\t *    pathLenConstraint       INTEGER (0..MAX) OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [cA]\r\n\t\t * @property {string} [pathLenConstraint]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Boolean({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.cA || \"\")\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.pathLenConstraint || \"\")\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"cA\",\r\n\t\t\t\"pathLenConstraint\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tBasicConstraints.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcA: \"cA\",\r\n\t\t\t\t\tpathLenConstraint: \"pathLenConstraint\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for BasicConstraints\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"cA\" in asn1.result)\r\n\t\t\tthis.cA = asn1.result.cA.valueBlock.value;\r\n\r\n\t\tif(\"pathLenConstraint\" in asn1.result)\r\n\t\t{\r\n\t\t\tif(asn1.result.pathLenConstraint.valueBlock.isHexOnly)\r\n\t\t\t\tthis.pathLenConstraint = asn1.result.pathLenConstraint;\r\n\t\t\telse\r\n\t\t\t\tthis.pathLenConstraint = asn1.result.pathLenConstraint.valueBlock.valueDec;\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(this.cA !== BasicConstraints.defaultValues(\"cA\"))\r\n\t\t\toutputArray.push(new asn1js.Boolean({ value: this.cA }));\r\n\t\t\r\n\t\tif(\"pathLenConstraint\" in this)\r\n\t\t{\r\n\t\t\tif(this.pathLenConstraint instanceof asn1js.Integer)\r\n\t\t\t\toutputArray.push(this.pathLenConstraint);\r\n\t\t\telse\r\n\t\t\t\toutputArray.push(new asn1js.Integer({ value: this.pathLenConstraint }));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\r\n\t\tif(this.cA !== BasicConstraints.defaultValues(\"cA\"))\r\n\t\t\tobject.cA = this.cA;\r\n\r\n\t\tif(\"pathLenConstraint\" in this)\r\n\t\t{\r\n\t\t\tif(this.pathLenConstraint instanceof asn1js.Integer)\r\n\t\t\t\tobject.pathLenConstraint = this.pathLenConstraint.toJSON();\r\n\t\t\telse\r\n\t\t\t\tobject.pathLenConstraint = this.pathLenConstraint;\r\n\t\t}\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}