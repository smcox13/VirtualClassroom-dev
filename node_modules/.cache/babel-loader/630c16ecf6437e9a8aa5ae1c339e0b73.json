{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC3447\r\n */\n\nexport default class OtherPrimeInfo {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for OtherPrimeInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Integer}\r\n     * @desc prime\r\n     */\n    this.prime = getParametersValue(parameters, \"prime\", OtherPrimeInfo.defaultValues(\"prime\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc exponent\r\n     */\n\n    this.exponent = getParametersValue(parameters, \"exponent\", OtherPrimeInfo.defaultValues(\"exponent\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc coefficient\r\n     */\n\n    this.coefficient = getParametersValue(parameters, \"coefficient\", OtherPrimeInfo.defaultValues(\"coefficient\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n    //region If input argument array contains \"json\" for this object\n\n    if (\"json\" in parameters) this.fromJSON(parameters.json); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"prime\":\n        return new asn1js.Integer();\n\n      case \"exponent\":\n        return new asn1js.Integer();\n\n      case \"coefficient\":\n        return new asn1js.Integer();\n\n      default:\n        throw new Error(`Invalid member name for OtherPrimeInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * OtherPrimeInfo ::= Sequence {\r\n   *    prime             Integer,  -- ri\r\n   *    exponent          Integer,  -- di\r\n   *    coefficient       Integer   -- ti\r\n   * }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} prime\r\n     * @property {string} exponent\r\n     * @property {string} coefficient\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Integer({\n        name: names.prime || \"\"\n      }), new asn1js.Integer({\n        name: names.exponent || \"\"\n      }), new asn1js.Integer({\n        name: names.coefficient || \"\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"prime\", \"exponent\", \"coefficient\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, OtherPrimeInfo.schema({\n      names: {\n        prime: \"prime\",\n        exponent: \"exponent\",\n        coefficient: \"coefficient\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for OtherPrimeInfo\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.prime = asn1.result.prime.convertFromDER();\n    this.exponent = asn1.result.exponent.convertFromDER();\n    this.coefficient = asn1.result.coefficient.convertFromDER(); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [this.prime.convertToDER(), this.exponent.convertToDER(), this.coefficient.convertToDER()]\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      r: toBase64(arrayBufferToString(this.prime.valueBlock.valueHex), true, true),\n      d: toBase64(arrayBufferToString(this.exponent.valueBlock.valueHex), true, true),\n      t: toBase64(arrayBufferToString(this.coefficient.valueBlock.valueHex), true, true)\n    };\n  } //**********************************************************************************\n\n  /**\r\n   * Convert JSON value into current object\r\n   * @param {Object} json\r\n   */\n\n\n  fromJSON(json) {\n    if (\"r\" in json) this.prime = new asn1js.Integer({\n      valueHex: stringToArrayBuffer(fromBase64(json.r, true))\n    });else throw new Error(\"Absent mandatory parameter \\\"r\\\"\");\n    if (\"d\" in json) this.exponent = new asn1js.Integer({\n      valueHex: stringToArrayBuffer(fromBase64(json.d, true))\n    });else throw new Error(\"Absent mandatory parameter \\\"d\\\"\");\n    if (\"t\" in json) this.coefficient = new asn1js.Integer({\n      valueHex: stringToArrayBuffer(fromBase64(json.t, true))\n    });else throw new Error(\"Absent mandatory parameter \\\"t\\\"\");\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/OtherPrimeInfo.js"],"names":["asn1js","getParametersValue","toBase64","arrayBufferToString","stringToArrayBuffer","fromBase64","clearProps","OtherPrimeInfo","constructor","parameters","prime","defaultValues","exponent","coefficient","fromSchema","schema","fromJSON","json","memberName","Integer","Error","names","Sequence","name","blockName","value","asn1","compareSchema","verified","result","convertFromDER","toSchema","convertToDER","toJSON","r","valueBlock","valueHex","d","t"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3447\r\n */\r\nexport default class OtherPrimeInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherPrimeInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc prime\r\n\t\t */\r\n\t\tthis.prime = getParametersValue(parameters, \"prime\", OtherPrimeInfo.defaultValues(\"prime\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc exponent\r\n\t\t */\r\n\t\tthis.exponent = getParametersValue(parameters, \"exponent\", OtherPrimeInfo.defaultValues(\"exponent\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc coefficient\r\n\t\t */\r\n\t\tthis.coefficient = getParametersValue(parameters, \"coefficient\", OtherPrimeInfo.defaultValues(\"coefficient\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"prime\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"exponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"coefficient\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherPrimeInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OtherPrimeInfo ::= Sequence {\r\n\t *    prime             Integer,  -- ri\r\n\t *    exponent          Integer,  -- di\r\n\t *    coefficient       Integer   -- ti\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} prime\r\n\t\t * @property {string} exponent\r\n\t\t * @property {string} coefficient\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.prime || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.exponent || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.coefficient || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"prime\",\r\n\t\t\t\"exponent\",\r\n\t\t\t\"coefficient\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherPrimeInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tprime: \"prime\",\r\n\t\t\t\t\texponent: \"exponent\",\r\n\t\t\t\t\tcoefficient: \"coefficient\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherPrimeInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.prime = asn1.result.prime.convertFromDER();\r\n\t\tthis.exponent = asn1.result.exponent.convertFromDER();\r\n\t\tthis.coefficient = asn1.result.coefficient.convertFromDER();\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.prime.convertToDER(),\r\n\t\t\t\tthis.exponent.convertToDER(),\r\n\t\t\t\tthis.coefficient.convertToDER()\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tr: toBase64(arrayBufferToString(this.prime.valueBlock.valueHex), true, true),\r\n\t\t\td: toBase64(arrayBufferToString(this.exponent.valueBlock.valueHex), true, true),\r\n\t\t\tt: toBase64(arrayBufferToString(this.coefficient.valueBlock.valueHex), true, true)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"r\" in json)\r\n\t\t\tthis.prime = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.r, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"r\\\"\");\r\n\r\n\t\tif(\"d\" in json)\r\n\t\t\tthis.exponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.d, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"d\\\"\");\r\n\r\n\t\tif(\"t\" in json)\r\n\t\t\tthis.coefficient = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.t, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"t\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}