{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\nimport { stringPrep } from \"./common.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nexport default class AttributeTypeAndValue {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for AttributeTypeAndValue class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc type\r\n     */\n    this.type = getParametersValue(parameters, \"type\", AttributeTypeAndValue.defaultValues(\"type\"));\n    /**\r\n     * @type {Object}\r\n     * @desc Value of the AttributeTypeAndValue class\r\n     */\n\n    this.value = getParametersValue(parameters, \"value\", AttributeTypeAndValue.defaultValues(\"value\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"type\":\n        return \"\";\n\n      case \"value\":\n        return {};\n\n      default:\n        throw new Error(`Invalid member name for AttributeTypeAndValue class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * AttributeTypeAndValue ::= Sequence {\r\n   *    type     AttributeType,\r\n   *    value    AttributeValue }\r\n   *\r\n   * AttributeType ::= OBJECT IDENTIFIER\r\n   *\r\n   * AttributeValue ::= ANY -- DEFINED BY AttributeType\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName] Name for entire block\r\n     * @property {string} [type] Name for \"type\" element\r\n     * @property {string} [value] Name for \"value\" element\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.ObjectIdentifier({\n        name: names.type || \"\"\n      }), new asn1js.Any({\n        name: names.value || \"\"\n      })]\n    });\n  } //**********************************************************************************\n\n\n  static blockName() {\n    return \"AttributeTypeAndValue\";\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"type\", \"typeValue\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, AttributeTypeAndValue.schema({\n      names: {\n        type: \"type\",\n        value: \"typeValue\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AttributeTypeAndValue\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.type = asn1.result.type.valueBlock.toString(); // noinspection JSUnresolvedVariable\n\n    this.value = asn1.result.typeValue; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [new asn1js.ObjectIdentifier({\n        value: this.type\n      }), this.value]\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const _object = {\n      type: this.type\n    };\n    if (Object.keys(this.value).length !== 0) _object.value = this.value.toJSON();else _object.value = this.value;\n    return _object;\n  } //**********************************************************************************\n\n  /**\r\n   * Compare two AttributeTypeAndValue values, or AttributeTypeAndValue with ArrayBuffer value\r\n   * @param {(AttributeTypeAndValue|ArrayBuffer)} compareTo The value compare to current\r\n   * @returns {boolean}\r\n   */\n\n\n  isEqual(compareTo) {\n    const stringBlockNames = [asn1js.Utf8String.blockName(), asn1js.BmpString.blockName(), asn1js.UniversalString.blockName(), asn1js.NumericString.blockName(), asn1js.PrintableString.blockName(), asn1js.TeletexString.blockName(), asn1js.VideotexString.blockName(), asn1js.IA5String.blockName(), asn1js.GraphicString.blockName(), asn1js.VisibleString.blockName(), asn1js.GeneralString.blockName(), asn1js.CharacterString.blockName()];\n\n    if (compareTo.constructor.blockName() === AttributeTypeAndValue.blockName()) {\n      if (this.type !== compareTo.type) return false; //region Check we do have both strings\n\n      let isString = false;\n      const thisName = this.value.constructor.blockName();\n\n      if (thisName === compareTo.value.constructor.blockName()) {\n        for (const name of stringBlockNames) {\n          if (thisName === name) {\n            isString = true;\n            break;\n          }\n        }\n      } //endregion\n\n\n      if (isString) {\n        const value1 = stringPrep(this.value.valueBlock.value);\n        const value2 = stringPrep(compareTo.value.valueBlock.value);\n        if (value1.localeCompare(value2) !== 0) return false;\n      } else // Comparing as two ArrayBuffers\n        {\n          if (isEqualBuffer(this.value.valueBeforeDecode, compareTo.value.valueBeforeDecode) === false) return false;\n        }\n\n      return true;\n    }\n\n    if (compareTo instanceof ArrayBuffer) return isEqualBuffer(this.value.valueBeforeDecode, compareTo);\n    return false;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/AttributeTypeAndValue.js"],"names":["asn1js","getParametersValue","isEqualBuffer","clearProps","stringPrep","AttributeTypeAndValue","constructor","parameters","type","defaultValues","value","fromSchema","schema","memberName","Error","names","Sequence","name","blockName","ObjectIdentifier","Any","asn1","compareSchema","verified","result","valueBlock","toString","typeValue","toSchema","toJSON","_object","Object","keys","length","isEqual","compareTo","stringBlockNames","Utf8String","BmpString","UniversalString","NumericString","PrintableString","TeletexString","VideotexString","IA5String","GraphicString","VisibleString","GeneralString","CharacterString","isString","thisName","value1","value2","localeCompare","valueBeforeDecode","ArrayBuffer"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { stringPrep } from \"./common.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AttributeTypeAndValue\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeTypeAndValue class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc type\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", AttributeTypeAndValue.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc Value of the AttributeTypeAndValue class\r\n\t\t */\r\n\t\tthis.value = getParametersValue(parameters, \"value\", AttributeTypeAndValue.defaultValues(\"value\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"value\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeTypeAndValue class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AttributeTypeAndValue ::= Sequence {\r\n\t *    type     AttributeType,\r\n\t *    value    AttributeValue }\r\n\t *\r\n\t * AttributeType ::= OBJECT IDENTIFIER\r\n\t *\r\n\t * AttributeValue ::= ANY -- DEFINED BY AttributeType\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName] Name for entire block\r\n\t\t * @property {string} [type] Name for \"type\" element\r\n\t\t * @property {string} [value] Name for \"value\" element\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.type || \"\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.value || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"AttributeTypeAndValue\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"type\",\r\n\t\t\t\"typeValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeTypeAndValue.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttype: \"type\",\r\n\t\t\t\t\tvalue: \"typeValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeTypeAndValue\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.type = asn1.result.type.valueBlock.toString();\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tthis.value = asn1.result.typeValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.type }),\r\n\t\t\t\tthis.value\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttype: this.type\r\n\t\t};\r\n\r\n\t\tif(Object.keys(this.value).length !== 0)\r\n\t\t\t_object.value = this.value.toJSON();\r\n\t\telse\r\n\t\t\t_object.value = this.value;\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare two AttributeTypeAndValue values, or AttributeTypeAndValue with ArrayBuffer value\r\n\t * @param {(AttributeTypeAndValue|ArrayBuffer)} compareTo The value compare to current\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(compareTo)\r\n\t{\r\n\t\tconst stringBlockNames = [\r\n\t\t\tasn1js.Utf8String.blockName(),\r\n\t\t\tasn1js.BmpString.blockName(),\r\n\t\t\tasn1js.UniversalString.blockName(),\r\n\t\t\tasn1js.NumericString.blockName(),\r\n\t\t\tasn1js.PrintableString.blockName(),\r\n\t\t\tasn1js.TeletexString.blockName(),\r\n\t\t\tasn1js.VideotexString.blockName(),\r\n\t\t\tasn1js.IA5String.blockName(),\r\n\t\t\tasn1js.GraphicString.blockName(),\r\n\t\t\tasn1js.VisibleString.blockName(),\r\n\t\t\tasn1js.GeneralString.blockName(),\r\n\t\t\tasn1js.CharacterString.blockName()\r\n\t\t];\r\n\r\n\t\tif(compareTo.constructor.blockName() === AttributeTypeAndValue.blockName())\r\n\t\t{\r\n\t\t\tif(this.type !== compareTo.type)\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t//region Check we do have both strings\r\n\t\t\tlet isString = false;\r\n\t\t\tconst thisName = this.value.constructor.blockName();\r\n\r\n\t\t\tif(thisName === compareTo.value.constructor.blockName())\r\n\t\t\t{\r\n\t\t\t\tfor(const name of stringBlockNames)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(thisName === name)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tisString = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\tif(isString)\r\n\t\t\t{\r\n\t\t\t\tconst value1 = stringPrep(this.value.valueBlock.value);\r\n\t\t\t\tconst value2 = stringPrep(compareTo.value.valueBlock.value);\r\n\r\n\t\t\t\tif(value1.localeCompare(value2) !== 0)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse // Comparing as two ArrayBuffers\r\n\t\t\t{\r\n\t\t\t\tif(isEqualBuffer(this.value.valueBeforeDecode, compareTo.value.valueBeforeDecode) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(compareTo instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.value.valueBeforeDecode, compareTo);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}