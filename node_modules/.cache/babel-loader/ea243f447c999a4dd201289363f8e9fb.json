{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _values = require('babel-runtime/core-js/object/values');\n\nvar _values2 = _interopRequireDefault(_values);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _includes2 = require('lodash/includes');\n\nvar _includes3 = _interopRequireDefault(_includes2);\n\nvar _util = require('util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _bowser = require('bowser');\n\nvar _bowser2 = _interopRequireDefault(_bowser);\n\nvar _uuid = require('uuid');\n\nvar _uuid2 = _interopRequireDefault(_uuid);\n\nvar _window = require('global/window');\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _loggerProxy = require('../common/logs/logger-proxy');\n\nvar _loggerProxy2 = _interopRequireDefault(_loggerProxy);\n\nvar _constants = require('../constants');\n\nvar _config = require('../common/config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _config3 = require('./config');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @description Metrics handles all the call metrics events\n * @export\n * @class Metrics\n */\n\n\nvar Metrics = function () {\n  /**\n     * Create Metrics Object\n     * @constructor\n     * @public\n     * @memberof Meetings\n     */\n  function Metrics() {\n    (0, _classCallCheck3.default)(this, Metrics);\n\n    if (!Metrics.instance) {\n      /**\n       * @instance\n       * @type {Array}\n       * @private\n       * @memberof Metrics\n       */\n      this._events = [];\n      /**\n      * @instance\n      * @type {MeetingCollection}\n      * @private\n      * @memberof Metrics\n      */\n\n      this.meetingCollection = null;\n      /**\n      * @instance\n      * @type {MeetingCollection}\n      * @private\n      * @memberof Metrics\n      */\n\n      this.keys = (0, _values2.default)(_config3.eventType);\n      /**\n       * @instance\n       * @type {Metrics}\n       * @private\n       * @memberof Metrics\n       */\n\n      Metrics.instance = this;\n    }\n\n    return Metrics.instance;\n  }\n  /**\n   * setup Metrics with meeting Collection\n   * @param {object} meetingCollection meetings object\n   * @param {object} webexVersion webex version\n   * @returns {object} null\n   */\n\n\n  (0, _createClass3.default)(Metrics, [{\n    key: 'initialSetup',\n    value: function initialSetup(meetingCollection, webexVersion) {\n      this.meetingCollection = meetingCollection;\n      this.webexVersion = webexVersion;\n    }\n    /**\n     * poste Meeting event metrics\n     * @param {object} options {meetingId/meeting} as a json object\n     * @param {String} options.meetingId\n     * @param {object} options.data\n     * @param {object} options.event\n     * @returns {object} null\n     */\n\n  }, {\n    key: 'postEvent',\n    value: function postEvent(options) {\n      var meetingId = options.meetingId,\n          _options$data = options.data,\n          data = _options$data === undefined ? {} : _options$data,\n          event = options.event;\n      var meeting = options.meeting;\n\n      if (this.keys.indexOf(event) === -1) {\n        _loggerProxy2.default.logger.error('Metrics: Event ' + event + ' doesnt exist in dictionary');\n      }\n\n      if (!meeting && meetingId) {\n        meeting = this.meetingCollection.get(meetingId);\n      }\n\n      if (meeting) {\n        if (!meeting.callEvents) {\n          meeting.callEvents = [];\n        }\n\n        if (event === _config3.eventType.MEDIA_QUALITY) {\n          data.event = event;\n          meeting.sendMediaQualityAnalyzerMetrics(data);\n        } else {\n          meeting.callEvents.push(event);\n          data.event = event;\n          meeting.sendCallAnalyzerMetrics(data);\n        }\n      } else {\n        _loggerProxy2.default.logger.error('Metrics->postEvent: Meeting object not defined');\n      }\n    }\n    /**\n     *  Docs for Call analyzer metrics\n    *   https://sqbu-github.cisco.com/WebExSquared/call-analyzer/wiki\n    *   https://sqbu-github.cisco.com/WebExSquared/event-dictionary/blob/master/diagnostic-events.raml\n    */\n\n  }, {\n    key: 'initPayload',\n    value: function initPayload(eventType, identifiers, options) {\n      var payload = {\n        eventId: _uuid2.default.v4(),\n        version: 1,\n        origin: {\n          buildType: 'prod',\n          name: 'endpoint',\n          networkType: 'unknown',\n          userAgent: this.getUserAgentInfo(),\n          clientInfo: {\n            clientType: options.clientType,\n            os: 'linux',\n            // TODO: BUG AND DOESNT ACCEPT OSNAME ON CA -> bowser.osname || 'null'\n            osVersion: _bowser2.default.osVersion || '-1'\n          }\n        },\n        originTime: {\n          triggered: new Date().toISOString()\n        },\n        event: {\n          name: eventType,\n          canProceed: true,\n          identifiers: identifiers,\n          eventData: {\n            webClientDomain: _window2.default.location.hostname\n          }\n        }\n      }; // TODO: more options should be checked and some of them should be mandatory in certain conditions\n\n      if (options) {\n        if (Object.prototype.hasOwnProperty.call(options, 'canProceed')) {\n          payload.event.canProceed = options.canProceed;\n        }\n\n        if (options.errors) {\n          payload.event.errors = options.errors;\n        }\n\n        if (options.mediaType) {\n          payload.event.mediaType = options.mediaType;\n        }\n\n        if (options.trigger) {\n          payload.event.trigger = options.trigger;\n        }\n\n        if (options.pstnAudioType) {\n          payload.event.pstnAudioType = options.pstnAudioType;\n        }\n\n        if (options.mediaCapabilities) {\n          payload.event.mediaCapabilities = options.mediaCapabilities;\n        }\n\n        if (options.recoveredBy) {\n          payload.event.recoveredBy = options.recoveredBy;\n        }\n      }\n\n      return payload;\n    }\n    /**\n     * get the payload specific for a media quality event through call analyzer\n     * @param {String} eventType the event name\n     * @param {Object} identifiers contains the identifiers needed for CA\n     * @param {String} identifiers.correlationId\n     * @param {String} identifiers.locusUrl\n     * @param {String} identifiers.locusId\n     * @param {Object} options\n     * @param {Object} options.intervalData\n     * @param {String} options.clientType\n     * @returns {Object}\n     * @public\n     * @memberof Metrics\n     */\n\n  }, {\n    key: 'initMediaPayload',\n    value: function initMediaPayload(eventType, identifiers, options) {\n      var payload = {\n        eventId: _uuid2.default.v4(),\n        version: 1,\n        origin: {\n          buildType: 'prod',\n          name: 'endpoint',\n          networkType: 'unknown',\n          userAgent: this.getUserAgentInfo(),\n          clientInfo: {\n            clientType: options.clientType,\n            os: 'linux',\n            // TODO: BUG AND DOESNT ACCEPT OSNAME ON CA -> bowser.osname || 'null'\n            osVersion: _bowser2.default.osVersion || '-1'\n          }\n        },\n        originTime: {\n          triggered: new Date().toISOString()\n        },\n        event: {\n          name: eventType,\n          canProceed: true,\n          identifiers: identifiers,\n          intervals: [options.intervalData],\n          eventData: {\n            webClientDomain: _window2.default.location.hostname\n          }\n        }\n      };\n      return payload;\n    }\n    /*\n     * This function Parses a Locus error and returns a diagnostic event payload.\n     * It should keep updating from:\n     * https://sqbu-github.cisco.com/WebExSquared/spark-client-framework/blob/master/spark-client-framework/Adapters/TelephonyAdapter/TelephonyAdapter.cpp#L920\n     * @param err {Object} the error Object from Locus response\n     * @param {boolean} showToUser true if a toast is shown to user\n     * @returns {{showToUser: boolean, category: string, errorDescription: string,\n     *  errorCode: number, errorData: *, fatal: boolean, name: string}}\n     */\n\n  }, {\n    key: 'parseLocusError',\n    value: function parseLocusError(err, showToUser) {\n      var errorCode = void 0;\n\n      if (err && err.body && err.body.errorCode) {\n        switch (_config3.errorCodes[err.body.errorCode]) {\n          case _constants.MEETING_ERRORS.FREE_USER_MAX_PARTICIPANTS_EXCEEDED:\n            errorCode = 3007;\n            break;\n\n          case _constants.MEETING_ERRORS.PAID_USER_MAX_PARTICIPANTS_EXCEEDED:\n          case _constants.MEETING_ERRORS.SERVICE_MAX_PARTICIPANTS_EXCEEDED:\n            errorCode = 3002;\n            break;\n\n          case _constants.MEETING_ERRORS.INACTIVE:\n            errorCode = 4001;\n            break;\n\n          case _constants.MEETING_ERRORS.EXCEEDED_MAX_JOINED_PARTICIPANTS:\n          case _constants.MEETING_ERRORS.EXCEEDED_SERVICE_MAX_PARTICIPANTS:\n            errorCode = 3001;\n            break;\n\n          case _constants.MEETING_ERRORS.MEETING_IS_LOCKED:\n            errorCode = 4002;\n            break;\n\n          case _constants.MEETING_ERRORS.MEETING_IS_TERMINATING:\n            errorCode = 4003;\n            break;\n\n          case _constants.MEETING_ERRORS.MEETING_REQUIRE_MODERATOR_PIN_INTENT:\n            errorCode = 4004;\n            break;\n\n          case _constants.MEETING_ERRORS.MEETING_REQUIRE_MODERATOR_PIN:\n            errorCode = 4005;\n            break;\n\n          case _constants.MEETING_ERRORS.MEETING_REQUIRE_MODERATOR_ROLE:\n            errorCode = 4006;\n            break;\n\n          case _constants.MEETING_ERRORS.JOIN_RESTRICTED_USER:\n          case _constants.MEETING_ERRORS.GET_RESTRICTED_USER:\n          case _constants.MEETING_ERRORS.CREATE_MEDIA_RESTRICTED_USER:\n            errorCode = 3005;\n            break;\n\n          case _constants.MEETING_ERRORS.JOIN_RESTRICTED_USER_NOT_IN_ROOM:\n            errorCode = 4007;\n            break;\n\n          case _constants.MEETING_ERRORS.MEETING_NOT_FOUND:\n            errorCode = 4011;\n            break;\n\n          case _constants.MEETING_ERRORS.NOT_WEBEX_SITE:\n            errorCode = 4012;\n            break;\n\n          case _constants.MEETING_ERRORS.INVALID_JOIN_TIME:\n            errorCode = 4013;\n            break;\n\n          case _constants.MEETING_ERRORS.PHONE_NUMBER_NOT_A_NUMBER:\n            errorCode = 4016;\n            break;\n\n          case _constants.MEETING_ERRORS.PHONE_NUMBER_TOO_LONG:\n            errorCode = 4017;\n            break;\n\n          case _constants.MEETING_ERRORS.INVALID_DIALABLE_KEY:\n            errorCode = 4018;\n            break;\n\n          case _constants.MEETING_ERRORS.ONE_ON_ONE_TO_SELF_NOT_ALLOWED:\n            errorCode = 4019;\n            break;\n\n          case _constants.MEETING_ERRORS.REMOVED_PARTICIPANT:\n            errorCode = 4020;\n            break;\n\n          case _constants.MEETING_ERRORS.MEETING_LINK_NOT_FOUND:\n            errorCode = 4021;\n            break;\n\n          case _constants.MEETING_ERRORS.PHONE_NUMBER_TOO_SHORT_AFTER_IDD:\n            errorCode = 4022;\n            break;\n\n          case _constants.MEETING_ERRORS.INVALID_INVITEE_ADDRESS:\n            errorCode = 4023;\n            break;\n\n          case _constants.MEETING_ERRORS.PMR_ACCOUNT_LOCKED:\n            errorCode = 4024;\n            break;\n\n          case _constants.MEETING_ERRORS.RESOURCE_GUEST_FORBIDDEN:\n            errorCode = 4025;\n            break;\n\n          case _constants.MEETING_ERRORS.PMR_ACCOUNT_SUSPENDED:\n            errorCode = 4026;\n            break;\n\n          case _constants.MEETING_ERRORS.EMPTY_PHONE_NUMBER_OR_COUNTRY_CODE:\n            errorCode = 4027;\n            break;\n\n          case _constants.MEETING_ERRORS.INVALID_SINCE_OR_SEQUENCE_HASH_IN_REQUEST:\n            errorCode = 1006;\n            break;\n\n          case _constants.MEETING_ERRORS.CONVERSATION_NOT_FOUND:\n            errorCode = 4028;\n            break;\n\n          case _constants.MEETING_ERRORS.RECORDING_CONTROL_NOT_SUPPORTED:\n          case _constants.MEETING_ERRORS.RECORDING_NOT_STARTED:\n          case _constants.MEETING_ERRORS.RECORDING_NOT_ENABLED:\n            errorCode = 4029;\n            break;\n\n          default:\n            errorCode = 4008;\n        }\n      } else {\n        errorCode = 4008;\n      }\n\n      return this.generateErrorPayload(errorCode, showToUser, _config3.error.name.LOCUS_RESPONSE, err);\n    }\n  }, {\n    key: 'generateErrorPayload',\n    value: function generateErrorPayload(errorCode, shownToUser, name, err) {\n      if (_config3.error.errors[errorCode]) {\n        var errorPayload = {\n          shownToUser: shownToUser || false,\n          category: _config3.error.errors[errorCode][2],\n          errorDescription: _config3.error.errors[errorCode][0],\n          errorCode: errorCode,\n          fatal: !(0, _includes3.default)(_config3.error.notFatalErrorList, errorCode),\n          name: name || _config3.error.name.OTHER\n        };\n\n        if (err && err.body) {\n          errorPayload.errorData = err.body;\n        }\n\n        return errorPayload;\n      }\n\n      return null;\n    }\n  }, {\n    key: 'getUserAgentInfo',\n    value: function getUserAgentInfo() {\n      var userAgentOption = void 0;\n      var browserInfo = void 0;\n      var osInfo = void 0;\n\n      var clientInfo = _util2.default.format('client=%s', '' + _config2.default.meetings.metrics.clientName);\n\n      if (_bowser2.default.name && ['chrome', 'firefox', 'msie', 'msedge', 'safari'].indexOf(_bowser2.default.name.toLowerCase()) !== -1 && _bowser2.default.version) {\n        browserInfo = _util2.default.format('browser=%s', _bowser2.default.name.toLowerCase() + '/' + _bowser2.default.version.split('.')[0]);\n      }\n\n      if (_bowser2.default.osname && _bowser2.default.osversion) {\n        osInfo = _util2.default.format('os=%s', _bowser2.default.osname + '/' + _bowser2.default.osversion.split('.')[0]);\n      }\n\n      if (browserInfo) {\n        userAgentOption = '(' + browserInfo;\n      }\n\n      if (osInfo) {\n        userAgentOption = userAgentOption ? userAgentOption + '; ' + clientInfo + '; ' + osInfo : clientInfo + '; (' + osInfo;\n      }\n\n      if (userAgentOption) {\n        userAgentOption += ')';\n        return _util2.default.format('webex-js-sdk/%s %s', process.env.NODE_ENV + '-' + this.webexVersion, userAgentOption);\n      }\n\n      return _util2.default.format('webex-js-sdk/%s', process.env.NODE_ENV + '-' + this.webexVersion);\n    }\n  }]);\n  return Metrics;\n}();\n\nvar instance = new Metrics();\nexports.default = instance;","map":{"version":3,"sources":["index.js"],"names":["Metrics","eventType","meetingCollection","webexVersion","options","meetingId","data","event","meeting","LoggerProxy","identifiers","payload","eventId","uuid","version","origin","buildType","name","networkType","userAgent","clientInfo","clientType","os","osVersion","bowser","originTime","triggered","canProceed","eventData","webClientDomain","window","Object","intervals","err","showToUser","errorCode","ERROR_CODE","MEETING_ERRORS","error","shownToUser","errorPayload","category","errorDescription","fatal","OTHER","userAgentOption","browserInfo","osInfo","util","StaticConfig","process","instance"],"mappings":"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","sourcesContent":["\nimport util from 'util';\n\nimport {includes} from 'lodash';\nimport bowser from 'bowser';\nimport uuid from 'uuid';\nimport window from 'global/window';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {MEETING_ERRORS} from '../constants';\nimport StaticConfig from '../common/config';\n\nimport {error, eventType, errorCodes as ERROR_CODE} from './config';\n/**\n * @description Metrics handles all the call metrics events\n * @export\n * @class Metrics\n */\nclass Metrics {\n  /**\n     * Create Metrics Object\n     * @constructor\n     * @public\n     * @memberof Meetings\n     */\n  constructor() {\n    if (!Metrics.instance) {\n    /**\n     * @instance\n     * @type {Array}\n     * @private\n     * @memberof Metrics\n     */\n      this._events = [];\n      /**\n     * @instance\n     * @type {MeetingCollection}\n     * @private\n     * @memberof Metrics\n     */\n      this.meetingCollection = null;\n      /**\n     * @instance\n     * @type {MeetingCollection}\n     * @private\n     * @memberof Metrics\n     */\n      this.keys = Object.values(eventType);\n      /**\n       * @instance\n       * @type {Metrics}\n       * @private\n       * @memberof Metrics\n       */\n      Metrics.instance = this;\n    }\n\n    return Metrics.instance;\n  }\n\n  /**\n   * setup Metrics with meeting Collection\n   * @param {object} meetingCollection meetings object\n   * @param {object} webexVersion webex version\n   * @returns {object} null\n   */\n  initialSetup(meetingCollection, webexVersion) {\n    this.meetingCollection = meetingCollection;\n    this.webexVersion = webexVersion;\n  }\n\n  /**\n   * poste Meeting event metrics\n   * @param {object} options {meetingId/meeting} as a json object\n   * @param {String} options.meetingId\n   * @param {object} options.data\n   * @param {object} options.event\n   * @returns {object} null\n   */\n  postEvent(options) {\n    const {meetingId, data = {}, event} = options;\n    let {meeting} = options;\n\n    if (this.keys.indexOf(event) === -1) {\n      LoggerProxy.logger.error(`Metrics: Event ${event} doesnt exist in dictionary`);\n    }\n\n    if (!meeting && meetingId) {\n      meeting = this.meetingCollection.get(meetingId);\n    }\n\n    if (meeting) {\n      if (!meeting.callEvents) {\n        meeting.callEvents = [];\n      }\n      if (event === eventType.MEDIA_QUALITY) {\n        data.event = event;\n        meeting.sendMediaQualityAnalyzerMetrics(data);\n      }\n      else {\n        meeting.callEvents.push(event);\n        data.event = event;\n        meeting.sendCallAnalyzerMetrics(data);\n      }\n    }\n\n    else {\n      LoggerProxy.logger.error('Metrics->postEvent: Meeting object not defined');\n    }\n  }\n\n  /**\n   *  Docs for Call analyzer metrics\n  *   https://sqbu-github.cisco.com/WebExSquared/call-analyzer/wiki\n  *   https://sqbu-github.cisco.com/WebExSquared/event-dictionary/blob/master/diagnostic-events.raml\n */\n\n  initPayload(eventType, identifiers, options) {\n    const payload = {\n      eventId: uuid.v4(),\n      version: 1,\n      origin: {\n        buildType: 'prod',\n        name: 'endpoint',\n        networkType: 'unknown',\n        userAgent: this.getUserAgentInfo(),\n        clientInfo: {\n          clientType: options.clientType,\n          os: 'linux', // TODO: BUG AND DOESNT ACCEPT OSNAME ON CA -> bowser.osname || 'null'\n          osVersion: bowser.osVersion || '-1'\n        }\n      },\n      originTime: {\n        triggered: new Date().toISOString()\n      },\n      event: {\n        name: eventType,\n        canProceed: true,\n        identifiers,\n        eventData: {webClientDomain: window.location.hostname}\n      }\n    };\n\n    // TODO: more options should be checked and some of them should be mandatory in certain conditions\n    if (options) {\n      if (Object.prototype.hasOwnProperty.call(options, 'canProceed')) {\n        payload.event.canProceed = options.canProceed;\n      }\n      if (options.errors) {\n        payload.event.errors = options.errors;\n      }\n      if (options.mediaType) {\n        payload.event.mediaType = options.mediaType;\n      }\n      if (options.trigger) {\n        payload.event.trigger = options.trigger;\n      }\n      if (options.pstnAudioType) {\n        payload.event.pstnAudioType = options.pstnAudioType;\n      }\n      if (options.mediaCapabilities) {\n        payload.event.mediaCapabilities = options.mediaCapabilities;\n      }\n      if (options.recoveredBy) {\n        payload.event.recoveredBy = options.recoveredBy;\n      }\n    }\n\n    return payload;\n  }\n\n  /**\n   * get the payload specific for a media quality event through call analyzer\n   * @param {String} eventType the event name\n   * @param {Object} identifiers contains the identifiers needed for CA\n   * @param {String} identifiers.correlationId\n   * @param {String} identifiers.locusUrl\n   * @param {String} identifiers.locusId\n   * @param {Object} options\n   * @param {Object} options.intervalData\n   * @param {String} options.clientType\n   * @returns {Object}\n   * @public\n   * @memberof Metrics\n   */\n  initMediaPayload(eventType, identifiers, options) {\n    const payload = {\n      eventId: uuid.v4(),\n      version: 1,\n      origin: {\n        buildType: 'prod',\n        name: 'endpoint',\n        networkType: 'unknown',\n        userAgent: this.getUserAgentInfo(),\n        clientInfo: {\n          clientType: options.clientType,\n          os: 'linux', // TODO: BUG AND DOESNT ACCEPT OSNAME ON CA -> bowser.osname || 'null'\n          osVersion: bowser.osVersion || '-1'\n        }\n      },\n      originTime: {\n        triggered: new Date().toISOString()\n      },\n      event: {\n        name: eventType,\n        canProceed: true,\n        identifiers,\n        intervals: [options.intervalData],\n        eventData: {webClientDomain: window.location.hostname}\n      }\n    };\n\n    return payload;\n  }\n\n  /*\n   * This function Parses a Locus error and returns a diagnostic event payload.\n   * It should keep updating from:\n   * https://sqbu-github.cisco.com/WebExSquared/spark-client-framework/blob/master/spark-client-framework/Adapters/TelephonyAdapter/TelephonyAdapter.cpp#L920\n   * @param err {Object} the error Object from Locus response\n   * @param {boolean} showToUser true if a toast is shown to user\n   * @returns {{showToUser: boolean, category: string, errorDescription: string,\n   *  errorCode: number, errorData: *, fatal: boolean, name: string}}\n   */\n  parseLocusError(err, showToUser) {\n    let errorCode;\n\n    if (err && err.body && err.body.errorCode) {\n      switch (ERROR_CODE[err.body.errorCode]) {\n        case MEETING_ERRORS.FREE_USER_MAX_PARTICIPANTS_EXCEEDED:\n          errorCode = 3007;\n          break;\n        case MEETING_ERRORS.PAID_USER_MAX_PARTICIPANTS_EXCEEDED:\n        case MEETING_ERRORS.SERVICE_MAX_PARTICIPANTS_EXCEEDED:\n          errorCode = 3002;\n          break;\n        case MEETING_ERRORS.INACTIVE:\n          errorCode = 4001;\n          break;\n        case MEETING_ERRORS.EXCEEDED_MAX_JOINED_PARTICIPANTS:\n        case MEETING_ERRORS.EXCEEDED_SERVICE_MAX_PARTICIPANTS:\n          errorCode = 3001;\n          break;\n        case MEETING_ERRORS.MEETING_IS_LOCKED:\n          errorCode = 4002;\n          break;\n        case MEETING_ERRORS.MEETING_IS_TERMINATING:\n          errorCode = 4003;\n          break;\n        case MEETING_ERRORS.MEETING_REQUIRE_MODERATOR_PIN_INTENT:\n          errorCode = 4004;\n          break;\n        case MEETING_ERRORS.MEETING_REQUIRE_MODERATOR_PIN:\n          errorCode = 4005;\n          break;\n        case MEETING_ERRORS.MEETING_REQUIRE_MODERATOR_ROLE:\n          errorCode = 4006;\n          break;\n        case MEETING_ERRORS.JOIN_RESTRICTED_USER:\n        case MEETING_ERRORS.GET_RESTRICTED_USER:\n        case MEETING_ERRORS.CREATE_MEDIA_RESTRICTED_USER:\n          errorCode = 3005;\n          break;\n        case MEETING_ERRORS.JOIN_RESTRICTED_USER_NOT_IN_ROOM:\n          errorCode = 4007;\n          break;\n        case MEETING_ERRORS.MEETING_NOT_FOUND:\n          errorCode = 4011;\n          break;\n        case MEETING_ERRORS.NOT_WEBEX_SITE:\n          errorCode = 4012;\n          break;\n        case MEETING_ERRORS.INVALID_JOIN_TIME:\n          errorCode = 4013;\n          break;\n        case MEETING_ERRORS.PHONE_NUMBER_NOT_A_NUMBER:\n          errorCode = 4016;\n          break;\n        case MEETING_ERRORS.PHONE_NUMBER_TOO_LONG:\n          errorCode = 4017;\n          break;\n        case MEETING_ERRORS.INVALID_DIALABLE_KEY:\n          errorCode = 4018;\n          break;\n        case MEETING_ERRORS.ONE_ON_ONE_TO_SELF_NOT_ALLOWED:\n          errorCode = 4019;\n          break;\n        case MEETING_ERRORS.REMOVED_PARTICIPANT:\n          errorCode = 4020;\n          break;\n        case MEETING_ERRORS.MEETING_LINK_NOT_FOUND:\n          errorCode = 4021;\n          break;\n        case MEETING_ERRORS.PHONE_NUMBER_TOO_SHORT_AFTER_IDD:\n          errorCode = 4022;\n          break;\n        case MEETING_ERRORS.INVALID_INVITEE_ADDRESS:\n          errorCode = 4023;\n          break;\n        case MEETING_ERRORS.PMR_ACCOUNT_LOCKED:\n          errorCode = 4024;\n          break;\n        case MEETING_ERRORS.RESOURCE_GUEST_FORBIDDEN:\n          errorCode = 4025;\n          break;\n        case MEETING_ERRORS.PMR_ACCOUNT_SUSPENDED:\n          errorCode = 4026;\n          break;\n        case MEETING_ERRORS.EMPTY_PHONE_NUMBER_OR_COUNTRY_CODE:\n          errorCode = 4027;\n          break;\n        case MEETING_ERRORS.INVALID_SINCE_OR_SEQUENCE_HASH_IN_REQUEST:\n          errorCode = 1006;\n          break;\n        case MEETING_ERRORS.CONVERSATION_NOT_FOUND:\n          errorCode = 4028;\n          break;\n        case MEETING_ERRORS.RECORDING_CONTROL_NOT_SUPPORTED:\n        case MEETING_ERRORS.RECORDING_NOT_STARTED:\n        case MEETING_ERRORS.RECORDING_NOT_ENABLED:\n          errorCode = 4029;\n          break;\n        default:\n          errorCode = 4008;\n      }\n    }\n    else {\n      errorCode = 4008;\n    }\n\n    return this.generateErrorPayload(\n      errorCode, showToUser, error.name.LOCUS_RESPONSE, err\n    );\n  }\n\n\n  generateErrorPayload(errorCode, shownToUser, name, err) {\n    if (error.errors[errorCode]) {\n      const errorPayload = {\n        shownToUser: shownToUser || false,\n        category: error.errors[errorCode][2],\n        errorDescription: error.errors[errorCode][0],\n        errorCode,\n        fatal: !includes(error.notFatalErrorList, errorCode),\n        name: name || error.name.OTHER\n      };\n\n      if (err && err.body) {\n        errorPayload.errorData = err.body;\n      }\n\n      return errorPayload;\n    }\n\n    return null;\n  }\n\n  getUserAgentInfo() {\n    let userAgentOption;\n    let browserInfo;\n    let osInfo;\n    const clientInfo = util.format('client=%s', `${StaticConfig.meetings.metrics.clientName}`);\n\n    if (bowser.name && ['chrome', 'firefox', 'msie', 'msedge', 'safari'].indexOf(bowser.name.toLowerCase()) !== -1 && bowser.version) {\n      browserInfo = util.format('browser=%s', `${bowser.name.toLowerCase()}/${bowser.version.split('.')[0]}`);\n    }\n    if (bowser.osname && bowser.osversion) {\n      osInfo = util.format('os=%s', `${bowser.osname}/${bowser.osversion.split('.')[0]}`);\n    }\n\n    if (browserInfo) {\n      userAgentOption = `(${browserInfo}`;\n    }\n    if (osInfo) {\n      userAgentOption = userAgentOption ? `${userAgentOption}; ${clientInfo}; ${osInfo}` : `${clientInfo}; (${osInfo}`;\n    }\n    if (userAgentOption) {\n      userAgentOption += ')';\n\n      return util.format('webex-js-sdk/%s %s', `${process.env.NODE_ENV}-${this.webexVersion}`, userAgentOption);\n    }\n\n    return util.format('webex-js-sdk/%s', `${process.env.NODE_ENV}-${this.webexVersion}`);\n  }\n}\n\nconst instance = new Metrics();\n\nexport default instance;\n"]},"metadata":{},"sourceType":"script"}