{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, utilConcatBuf, isEqualBuffer, toBase64, fromBase64, arrayBufferToString, stringToArrayBuffer } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5480\r\n */\n\nexport default class ECPublicKey {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for ECCPublicKey class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {ArrayBuffer}\r\n     * @desc type\r\n     */\n    this.x = getParametersValue(parameters, \"x\", ECPublicKey.defaultValues(\"x\"));\n    /**\r\n     * @type {ArrayBuffer}\r\n     * @desc values\r\n     */\n\n    this.y = getParametersValue(parameters, \"y\", ECPublicKey.defaultValues(\"y\"));\n    /**\r\n     * @type {string}\r\n     * @desc namedCurve\r\n     */\n\n    this.namedCurve = getParametersValue(parameters, \"namedCurve\", ECPublicKey.defaultValues(\"namedCurve\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n    //region If input argument array contains \"json\" for this object\n\n    if (\"json\" in parameters) this.fromJSON(parameters.json); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"x\":\n      case \"y\":\n        return new ArrayBuffer(0);\n\n      case \"namedCurve\":\n        return \"\";\n\n      default:\n        throw new Error(`Invalid member name for ECCPublicKey class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"x\":\n      case \"y\":\n        return isEqualBuffer(memberValue, ECPublicKey.defaultValues(memberName));\n\n      case \"namedCurve\":\n        return memberValue === \"\";\n\n      default:\n        throw new Error(`Invalid member name for ECCPublicKey class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    return new asn1js.RawData();\n  } //**********************************************************************************\n\n  /**\r\n   * Convert ArrayBuffer into current class\r\n   * @param {!ArrayBuffer} schema Special case: schema is an ArrayBuffer\r\n   */\n\n\n  fromSchema(schema) {\n    //region Check the schema is valid\n    if (schema instanceof ArrayBuffer === false) throw new Error(\"Object's schema was not verified against input data for ECPublicKey\");\n    const view = new Uint8Array(schema);\n    if (view[0] !== 0x04) throw new Error(\"Object's schema was not verified against input data for ECPublicKey\"); //endregion\n    //region Get internal properties from parsed schema\n\n    let coordinateLength;\n\n    switch (this.namedCurve) {\n      case \"1.2.840.10045.3.1.7\":\n        // P-256\n        coordinateLength = 32;\n        break;\n\n      case \"1.3.132.0.34\":\n        // P-384\n        coordinateLength = 48;\n        break;\n\n      case \"1.3.132.0.35\":\n        // P-521\n        coordinateLength = 66;\n        break;\n\n      default:\n        throw new Error(`Incorrect curve OID: ${this.namedCurve}`);\n    }\n\n    if (schema.byteLength !== coordinateLength * 2 + 1) throw new Error(\"Object's schema was not verified against input data for ECPublicKey\");\n    this.x = schema.slice(1, coordinateLength + 1);\n    this.y = schema.slice(1 + coordinateLength, coordinateLength * 2 + 1); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    return new asn1js.RawData({\n      data: utilConcatBuf(new Uint8Array([0x04]).buffer, this.x, this.y)\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    let crvName = \"\";\n\n    switch (this.namedCurve) {\n      case \"1.2.840.10045.3.1.7\":\n        // P-256\n        crvName = \"P-256\";\n        break;\n\n      case \"1.3.132.0.34\":\n        // P-384\n        crvName = \"P-384\";\n        break;\n\n      case \"1.3.132.0.35\":\n        // P-521\n        crvName = \"P-521\";\n        break;\n\n      default:\n    }\n\n    return {\n      crv: crvName,\n      x: toBase64(arrayBufferToString(this.x), true, true, false),\n      y: toBase64(arrayBufferToString(this.y), true, true, false)\n    };\n  } //**********************************************************************************\n\n  /**\r\n   * Convert JSON value into current object\r\n   * @param {Object} json\r\n   */\n\n\n  fromJSON(json) {\n    let coodinateLength = 0;\n\n    if (\"crv\" in json) {\n      switch (json.crv.toUpperCase()) {\n        case \"P-256\":\n          this.namedCurve = \"1.2.840.10045.3.1.7\";\n          coodinateLength = 32;\n          break;\n\n        case \"P-384\":\n          this.namedCurve = \"1.3.132.0.34\";\n          coodinateLength = 48;\n          break;\n\n        case \"P-521\":\n          this.namedCurve = \"1.3.132.0.35\";\n          coodinateLength = 66;\n          break;\n\n        default:\n      }\n    } else throw new Error(\"Absent mandatory parameter \\\"crv\\\"\");\n\n    if (\"x\" in json) {\n      const convertBuffer = stringToArrayBuffer(fromBase64(json.x, true));\n\n      if (convertBuffer.byteLength < coodinateLength) {\n        this.x = new ArrayBuffer(coodinateLength);\n        const view = new Uint8Array(this.x);\n        const convertBufferView = new Uint8Array(convertBuffer);\n        view.set(convertBufferView, 1);\n      } else this.x = convertBuffer.slice(0, coodinateLength);\n    } else throw new Error(\"Absent mandatory parameter \\\"x\\\"\");\n\n    if (\"y\" in json) {\n      const convertBuffer = stringToArrayBuffer(fromBase64(json.y, true));\n\n      if (convertBuffer.byteLength < coodinateLength) {\n        this.y = new ArrayBuffer(coodinateLength);\n        const view = new Uint8Array(this.y);\n        const convertBufferView = new Uint8Array(convertBuffer);\n        view.set(convertBufferView, 1);\n      } else this.y = convertBuffer.slice(0, coodinateLength);\n    } else throw new Error(\"Absent mandatory parameter \\\"y\\\"\");\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/ECPublicKey.js"],"names":["asn1js","getParametersValue","utilConcatBuf","isEqualBuffer","toBase64","fromBase64","arrayBufferToString","stringToArrayBuffer","ECPublicKey","constructor","parameters","x","defaultValues","y","namedCurve","fromSchema","schema","fromJSON","json","memberName","ArrayBuffer","Error","compareWithDefault","memberValue","RawData","view","Uint8Array","coordinateLength","byteLength","slice","toSchema","data","buffer","toJSON","crvName","crv","coodinateLength","toUpperCase","convertBuffer","convertBufferView","set"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, isEqualBuffer, toBase64, fromBase64, arrayBufferToString, stringToArrayBuffer } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5480\r\n */\r\nexport default class ECPublicKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ECCPublicKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc type\r\n\t\t */\r\n\t\tthis.x = getParametersValue(parameters, \"x\", ECPublicKey.defaultValues(\"x\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc values\r\n\t\t */\r\n\t\tthis.y = getParametersValue(parameters, \"y\", ECPublicKey.defaultValues(\"y\"));\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc namedCurve\r\n\t\t */\r\n\t\tthis.namedCurve = getParametersValue(parameters, \"namedCurve\", ECPublicKey.defaultValues(\"namedCurve\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"x\":\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"x\":\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn (isEqualBuffer(memberValue, ECPublicKey.defaultValues(memberName)));\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\treturn new asn1js.RawData();\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert ArrayBuffer into current class\r\n\t * @param {!ArrayBuffer} schema Special case: schema is an ArrayBuffer\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tif((schema instanceof ArrayBuffer) === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\r\n\t\tconst view = new Uint8Array(schema);\r\n\t\tif(view[0] !== 0x04)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tlet coordinateLength;\r\n\r\n\t\tswitch(this.namedCurve)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\r\n\t\t\t\tcoordinateLength = 32;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.34\": // P-384\r\n\t\t\t\tcoordinateLength = 48;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.35\": // P-521\r\n\t\t\t\tcoordinateLength = 66;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Incorrect curve OID: ${this.namedCurve}`);\r\n\t\t}\r\n\r\n\t\tif(schema.byteLength !== (coordinateLength * 2 + 1))\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\t\t\r\n\t\tthis.x = schema.slice(1, coordinateLength + 1);\r\n\t\tthis.y = schema.slice(1 + coordinateLength, coordinateLength * 2 + 1);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\treturn new asn1js.RawData({ data: utilConcatBuf(\r\n\t\t\t(new Uint8Array([0x04])).buffer,\r\n\t\t\tthis.x,\r\n\t\t\tthis.y\r\n\t\t)\r\n\t\t});\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet crvName = \"\";\r\n\r\n\t\tswitch(this.namedCurve)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\r\n\t\t\t\tcrvName = \"P-256\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.34\": // P-384\r\n\t\t\t\tcrvName = \"P-384\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.35\": // P-521\r\n\t\t\t\tcrvName = \"P-521\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tcrv: crvName,\r\n\t\t\tx: toBase64(arrayBufferToString(this.x), true, true, false),\r\n\t\t\ty: toBase64(arrayBufferToString(this.y), true, true, false)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tlet coodinateLength = 0;\r\n\r\n\t\tif(\"crv\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.crv.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"P-256\":\r\n\t\t\t\t\tthis.namedCurve = \"1.2.840.10045.3.1.7\";\r\n\t\t\t\t\tcoodinateLength = 32;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-384\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.34\";\r\n\t\t\t\t\tcoodinateLength = 48;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-521\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.35\";\r\n\t\t\t\t\tcoodinateLength = 66;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"crv\\\"\");\r\n\r\n\t\tif(\"x\" in json)\r\n\t\t{\r\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.x, true));\r\n\t\t\t\r\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\r\n\t\t\t{\r\n\t\t\t\tthis.x = new ArrayBuffer(coodinateLength);\r\n\t\t\t\tconst view = new Uint8Array(this.x);\r\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\r\n\t\t\t\tview.set(convertBufferView, 1);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.x = convertBuffer.slice(0, coodinateLength);\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"x\\\"\");\r\n\r\n\t\tif(\"y\" in json)\r\n\t\t{\r\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.y, true));\r\n\t\t\t\r\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\r\n\t\t\t{\r\n\t\t\t\tthis.y = new ArrayBuffer(coodinateLength);\r\n\t\t\t\tconst view = new Uint8Array(this.y);\r\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\r\n\t\t\t\tview.set(convertBufferView, 1);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.y = convertBuffer.slice(0, coodinateLength);\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"y\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}