{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectFileType = exports.processImage = undefined;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nexports.drawImage = drawImage;\nexports.updateImageOrientation = updateImageOrientation;\nexports.readExifData = readExifData;\nexports.orient = orient;\n\nvar _processImage = require('./process-image');\n\nObject.defineProperty(exports, 'processImage', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_processImage).default;\n  }\n});\n\nvar _detectFiletype = require('./detect-filetype');\n\nObject.defineProperty(exports, 'detectFileType', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_detectFiletype).default;\n  }\n});\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint no-unused-vars: [\"error\", { \"vars\": \"local\" }] */\n\n/* global Uint8Array, FileReader */\n\n\nvar _require = require('exif'),\n    ExifImage = _require.ExifImage;\n/**\n* Draws the image on the canvas so that the thumbnail\n* could be generated\n* @param {Object} options(options(orientation: image exif orientation range from 1-8, img: Image object, x: start x-axis, y: start y-axis, width: width of the thumbnail, height: height of the thumbnail, deg: counterclockwise degree rotation, flip: flip Image, ctx: canvas context))\n* @returns {Object}\n*/\n\n\nfunction drawImage(options) {\n  // save current context before applying transformations\n  options.ctx.save();\n  var rad = void 0; // convert degrees to radians\n\n  if (options.flip) {\n    rad = options.deg * Math.PI / 180;\n  } else {\n    rad = 2 * Math.PI - options.deg * Math.PI / 180;\n  } // set the origin to the center of the image\n\n\n  options.ctx.translate(options.x + options.width / 2, options.y + options.height / 2); // rotate the canvas around the origin\n\n  options.ctx.rotate(rad);\n\n  if (options.flip) {\n    // flip the canvas\n    options.ctx.scale(-1, 1);\n  } // draw the image\n\n\n  options.ctx.drawImage(options.img, -options.width / 2, -options.height / 2, options.width, options.height); // restore the canvas\n\n  options.ctx.restore();\n}\n/**\n* Updates the image file with exif information, required to correctly rotate the image activity\n* @param {Object} file\n* @returns {Promise<Object>}\n*/\n\n\nfunction updateImageOrientation(file) {\n  return new _promise2.default(function (resolve) {\n    var reader = new FileReader();\n    reader.readAsArrayBuffer(file);\n\n    reader.onload = function onload() {\n      var arrayBuffer = reader.result;\n      var buf = Buffer.from(arrayBuffer);\n      resolve(buf);\n    };\n  }).then(function (buf) {\n    return readExifData(file, buf);\n  });\n}\n/**\n* Adds exif orientation information on the image file\n* @param {Object} file\n* @param {Object} buf\n* @returns {Promise<ExifImage>}\n*/\n\n\nfunction readExifData(file, buf) {\n  return new _promise2.default(function (resolve) {\n    // For avatar images the file.type is set as image/jpeg, however for images shared in an activity file.mimeType is set as image/jpeg. Handling both conditions.\n    if (file && file.image && (file.type === 'image/jpeg' || file.mimeType === 'image/jpeg')) {\n      /* eslint-disable no-new */\n      new ExifImage({\n        image: buf\n      }, function (error, exifData) {\n        if (!error && exifData) {\n          file.image.orientation = exifData.image.Orientation;\n        }\n\n        resolve(buf);\n      });\n    } else {\n      resolve(buf);\n    }\n  });\n}\n/* eslint-disable complexity */\n\n/**\n* Rotates/flips the image on the canvas as per exif information\n* @param {Object} options(orientation: image exif orientation range from 1-8, img: Image object, x: start x-axis, y: start y-axis, width: width of the thumbnail, height: height of the thumbnail, ctx: canvas context)\n* @param {Object} file\n* @returns {Object}\n*/\n\n\nfunction orient(options, file) {\n  if (file && file.image && file.image.orientation && file.image.orientation !== 1) {\n    var image = {\n      img: options.img,\n      x: options.x,\n      y: options.y,\n      width: options.width,\n      height: options.height,\n      deg: 0,\n      flip: true,\n      ctx: options.ctx\n    };\n\n    switch (options && options.orientation) {\n      case 3:\n        // rotateImage180\n        image.deg = 180;\n        image.flip = false;\n        break;\n\n      case 4:\n        // rotate180AndFlipImage\n        image.deg = 180;\n        image.flip = true;\n        break;\n\n      case 5:\n        // rotate90AndFlipImage\n        image.deg = 270;\n        image.flip = true;\n        break;\n\n      case 6:\n        // rotateImage90\n        image.deg = 270;\n        image.flip = false;\n        break;\n\n      case 7:\n        // rotateNeg90AndFlipImage\n        image.deg = 90;\n        image.flip = true;\n        break;\n\n      case 8:\n        // rotateNeg90\n        image.deg = 90;\n        image.flip = false;\n        break;\n\n      default:\n        break;\n    }\n\n    drawImage(image);\n  } else {\n    options.ctx.drawImage(options.img, options.x, options.y, options.width, options.height);\n  }\n}\n/* eslint-enable complexity */","map":{"version":3,"sources":["index.js"],"names":["ExifImage","require","drawImage","options","rad","Math","updateImageOrientation","reader","arrayBuffer","buf","Buffer","resolve","readExifData","file","image","exifData","orient","img","x","y","width","height","deg","flip","ctx","default"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint no-unused-vars: [\"error\", { \"vars\": \"local\" }] */\n/* global Uint8Array, FileReader */\n\nconst {ExifImage} = require('exif');\n\n/**\n* Draws the image on the canvas so that the thumbnail\n* could be generated\n* @param {Object} options(options(orientation: image exif orientation range from 1-8, img: Image object, x: start x-axis, y: start y-axis, width: width of the thumbnail, height: height of the thumbnail, deg: counterclockwise degree rotation, flip: flip Image, ctx: canvas context))\n* @returns {Object}\n*/\nexport function drawImage(options) {\n  // save current context before applying transformations\n  options.ctx.save();\n  let rad;\n\n  // convert degrees to radians\n  if (options.flip) {\n    rad = options.deg * Math.PI / 180;\n  }\n  else {\n    rad = 2 * Math.PI - options.deg * Math.PI / 180;\n  }\n  // set the origin to the center of the image\n  options.ctx.translate(options.x + options.width / 2, options.y + options.height / 2);\n  // rotate the canvas around the origin\n  options.ctx.rotate(rad);\n  if (options.flip) {\n    // flip the canvas\n    options.ctx.scale(-1, 1);\n  }\n  // draw the image\n  options.ctx.drawImage(options.img, -options.width / 2, -options.height / 2, options.width, options.height);\n  // restore the canvas\n  options.ctx.restore();\n}\n\n/**\n* Updates the image file with exif information, required to correctly rotate the image activity\n* @param {Object} file\n* @returns {Promise<Object>}\n*/\nexport function updateImageOrientation(file) {\n  return new Promise((resolve) => {\n    const reader = new FileReader();\n\n    reader.readAsArrayBuffer(file);\n    reader.onload = function onload() {\n      const arrayBuffer = reader.result;\n      const buf = Buffer.from(arrayBuffer);\n\n      resolve(buf);\n    };\n  })\n    .then((buf) => readExifData(file, buf));\n}\n\n/**\n* Adds exif orientation information on the image file\n* @param {Object} file\n* @param {Object} buf\n* @returns {Promise<ExifImage>}\n*/\nexport function readExifData(file, buf) {\n  return new Promise((resolve) => {\n    // For avatar images the file.type is set as image/jpeg, however for images shared in an activity file.mimeType is set as image/jpeg. Handling both conditions.\n    if (file && file.image && (file.type === 'image/jpeg' || file.mimeType === 'image/jpeg')) {\n      /* eslint-disable no-new */\n      new ExifImage({image: buf}, (error, exifData) => {\n        if (!error && exifData) {\n          file.image.orientation = exifData.image.Orientation;\n        }\n        resolve(buf);\n      });\n    }\n    else {\n      resolve(buf);\n    }\n  });\n}\n\n/* eslint-disable complexity */\n/**\n* Rotates/flips the image on the canvas as per exif information\n* @param {Object} options(orientation: image exif orientation range from 1-8, img: Image object, x: start x-axis, y: start y-axis, width: width of the thumbnail, height: height of the thumbnail, ctx: canvas context)\n* @param {Object} file\n* @returns {Object}\n*/\nexport function orient(options, file) {\n  if (file && file.image && file.image.orientation && file.image.orientation !== 1) {\n    const image = {\n      img: options.img,\n      x: options.x,\n      y: options.y,\n      width: options.width,\n      height: options.height,\n      deg: 0,\n      flip: true,\n      ctx: options.ctx\n    };\n\n    switch (options && options.orientation) {\n      case 3:\n      // rotateImage180\n        image.deg = 180;\n        image.flip = false;\n        break;\n      case 4:\n      // rotate180AndFlipImage\n        image.deg = 180;\n        image.flip = true;\n        break;\n      case 5:\n      // rotate90AndFlipImage\n        image.deg = 270;\n        image.flip = true;\n        break;\n      case 6:\n      // rotateImage90\n        image.deg = 270;\n        image.flip = false;\n        break;\n      case 7:\n      // rotateNeg90AndFlipImage\n        image.deg = 90;\n        image.flip = true;\n        break;\n      case 8:\n      // rotateNeg90\n        image.deg = 90;\n        image.flip = false;\n        break;\n      default:\n        break;\n    }\n    drawImage(image);\n  }\n  else {\n    options.ctx.drawImage(options.img, options.x, options.y, options.width, options.height);\n  }\n}\n/* eslint-enable complexity */\n\nexport {default as processImage} from './process-image';\nexport {default as detectFileType} from './detect-filetype';\n"]},"metadata":{},"sourceType":"script"}