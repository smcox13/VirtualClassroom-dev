{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, nearestPowerOf2, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC3447\r\n */\n\nexport default class RSAPublicKey {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for RSAPublicKey class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   * @property {Integer} [modulus]\r\n   * @property {Integer} [publicExponent]\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Integer}\r\n     * @desc Modulus part of RSA public key\r\n     */\n    this.modulus = getParametersValue(parameters, \"modulus\", RSAPublicKey.defaultValues(\"modulus\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc Public exponent of RSA public key\r\n     */\n\n    this.publicExponent = getParametersValue(parameters, \"publicExponent\", RSAPublicKey.defaultValues(\"publicExponent\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n    //region If input argument array contains \"json\" for this object\n\n    if (\"json\" in parameters) this.fromJSON(parameters.json); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"modulus\":\n        return new asn1js.Integer();\n\n      case \"publicExponent\":\n        return new asn1js.Integer();\n\n      default:\n        throw new Error(`Invalid member name for RSAPublicKey class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * RSAPublicKey ::= Sequence {\r\n   *    modulus           Integer,  -- n\r\n   *    publicExponent    Integer   -- e\r\n   * }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} utcTimeName Name for \"utcTimeName\" choice\r\n     * @property {string} generalTimeName Name for \"generalTimeName\" choice\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Integer({\n        name: names.modulus || \"\"\n      }), new asn1js.Integer({\n        name: names.publicExponent || \"\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"modulus\", \"publicExponent\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, RSAPublicKey.schema({\n      names: {\n        modulus: \"modulus\",\n        publicExponent: \"publicExponent\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for RSAPublicKey\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.modulus = asn1.result.modulus.convertFromDER(256);\n    this.publicExponent = asn1.result.publicExponent; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [this.modulus.convertToDER(), this.publicExponent]\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      n: toBase64(arrayBufferToString(this.modulus.valueBlock.valueHex), true, true, true),\n      e: toBase64(arrayBufferToString(this.publicExponent.valueBlock.valueHex), true, true, true)\n    };\n  } //**********************************************************************************\n\n  /**\r\n   * Convert JSON value into current object\r\n   * @param {Object} json\r\n   */\n\n\n  fromJSON(json) {\n    if (\"n\" in json) {\n      const array = stringToArrayBuffer(fromBase64(json.n, true));\n      this.modulus = new asn1js.Integer({\n        valueHex: array.slice(0, Math.pow(2, nearestPowerOf2(array.byteLength)))\n      });\n    } else throw new Error(\"Absent mandatory parameter \\\"n\\\"\");\n\n    if (\"e\" in json) this.publicExponent = new asn1js.Integer({\n      valueHex: stringToArrayBuffer(fromBase64(json.e, true)).slice(0, 3)\n    });else throw new Error(\"Absent mandatory parameter \\\"e\\\"\");\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/RSAPublicKey.js"],"names":["asn1js","getParametersValue","toBase64","arrayBufferToString","stringToArrayBuffer","fromBase64","nearestPowerOf2","clearProps","RSAPublicKey","constructor","parameters","modulus","defaultValues","publicExponent","fromSchema","schema","fromJSON","json","memberName","Integer","Error","names","Sequence","name","blockName","value","asn1","compareSchema","verified","result","convertFromDER","toSchema","convertToDER","toJSON","n","valueBlock","valueHex","e","array","slice","Math","pow","byteLength"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, nearestPowerOf2, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3447\r\n */\r\nexport default class RSAPublicKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RSAPublicKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {Integer} [modulus]\r\n\t * @property {Integer} [publicExponent]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc Modulus part of RSA public key\r\n\t\t */\r\n\t\tthis.modulus = getParametersValue(parameters, \"modulus\", RSAPublicKey.defaultValues(\"modulus\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc Public exponent of RSA public key\r\n\t\t */\r\n\t\tthis.publicExponent = getParametersValue(parameters, \"publicExponent\", RSAPublicKey.defaultValues(\"publicExponent\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"modulus\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"publicExponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RSAPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RSAPublicKey ::= Sequence {\r\n\t *    modulus           Integer,  -- n\r\n\t *    publicExponent    Integer   -- e\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} utcTimeName Name for \"utcTimeName\" choice\r\n\t\t * @property {string} generalTimeName Name for \"generalTimeName\" choice\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.modulus || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.publicExponent || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"modulus\",\r\n\t\t\t\"publicExponent\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRSAPublicKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tmodulus: \"modulus\",\r\n\t\t\t\t\tpublicExponent: \"publicExponent\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RSAPublicKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.modulus = asn1.result.modulus.convertFromDER(256);\r\n\t\tthis.publicExponent = asn1.result.publicExponent;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.modulus.convertToDER(),\r\n\t\t\t\tthis.publicExponent\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tn: toBase64(arrayBufferToString(this.modulus.valueBlock.valueHex), true, true, true),\r\n\t\t\te: toBase64(arrayBufferToString(this.publicExponent.valueBlock.valueHex), true, true, true)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"n\" in json)\r\n\t\t{\r\n\t\t\tconst array = stringToArrayBuffer(fromBase64(json.n, true));\r\n\t\t\tthis.modulus = new asn1js.Integer({ valueHex: array.slice(0, Math.pow(2, nearestPowerOf2(array.byteLength))) });\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"n\\\"\");\r\n\r\n\t\tif(\"e\" in json)\r\n\t\t\tthis.publicExponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.e, true)).slice(0, 3) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"e\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}