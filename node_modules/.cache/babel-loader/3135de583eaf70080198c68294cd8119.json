{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _constants = require('../constants');\n\nvar MembersUtil = {};\n/**\n * @param {Object} invitee with emailAddress or email\n * @param {String} locusUrl\n * @param {Boolean} alertIfActive\n * @returns {Object} the format object\n */\n\nMembersUtil.generateAddMemberOptions = function (invitee, locusUrl, alertIfActive) {\n  return {\n    invitee: invitee,\n    locusUrl: locusUrl,\n    alertIfActive: alertIfActive\n  };\n};\n/**\n * @param {Array} memberIds\n * @param {String} locusUrl\n * @returns {Object} the format object\n */\n\n\nMembersUtil.generateAdmitMemberOptions = function (memberIds, locusUrl) {\n  return {\n    locusUrl: locusUrl,\n    memberIds: memberIds\n  };\n};\n/**\n * @param {Object} options with {invitee: {emailAddress, email}, alertIfActive}\n * @returns {Object} with {invitees: [{address}], alertIfActive}\n */\n\n\nMembersUtil.getAddMemberBody = function (options) {\n  return {\n    invitees: [{\n      address: options.invitee.emailAddress || options.invitee.email\n    }],\n    alertIfActive: options.alertIfActive\n  };\n};\n/**\n * @param {Object} options with {memberIds}\n * @returns {Object} admit with {memberIds}\n */\n\n\nMembersUtil.getAdmitMemberRequestBody = function (options) {\n  return {\n    admit: {\n      participantIds: options.memberIds\n    }\n  };\n};\n/**\n * @param {Object} format with {memberIds, locusUrl}\n * @returns {Object} the request parameters (method, uri, body) needed to make a admitMember request\n */\n\n\nMembersUtil.getAdmitMemberRequestParams = function (format) {\n  var body = MembersUtil.getAdmitMemberRequestBody(format);\n  var uri = format.locusUrl + '/' + _constants.CONTROLS;\n  return {\n    method: _constants.HTTP_VERBS.PUT,\n    uri: uri,\n    body: body\n  };\n};\n/**\n * @param {Object} format with {invitee {emailAddress, email}, locusUrl, alertIfActive}\n * @returns {Object} the request parameters (method, uri, body) needed to make a addMember request\n */\n\n\nMembersUtil.getAddMemberRequestParams = function (format) {\n  var body = MembersUtil.getAddMemberBody(format);\n  var requestParams = {\n    method: _constants.HTTP_VERBS.PUT,\n    uri: format.locusUrl,\n    body: body\n  };\n  return requestParams;\n};\n\nMembersUtil.isInvalidInvitee = function (invitee) {\n  if (!(invitee && (invitee.email || invitee.emailAddress))) {\n    return true;\n  }\n\n  return !_constants.VALID_EMAIL_ADDRESS.test(invitee.email || invitee.emailAddress);\n};\n\nMembersUtil.getRemoveMemberRequestParams = function (options) {\n  var body = {\n    reason: options.reason\n  };\n  var uri = options.locusUrl + '/' + _constants.PARTICIPANT + '/' + options.memberId + '/' + _constants.LEAVE;\n  return {\n    method: _constants.HTTP_VERBS.PUT,\n    uri: uri,\n    body: body\n  };\n};\n\nMembersUtil.generateTransferHostMemberOptions = function (transfer, moderator, locusUrl) {\n  return {\n    moderator: moderator,\n    locusUrl: locusUrl,\n    memberId: transfer\n  };\n};\n\nMembersUtil.generateRemoveMemberOptions = function (removal, locusUrl) {\n  return {\n    reason: _constants._FORCED_,\n    memberId: removal,\n    locusUrl: locusUrl\n  };\n};\n\nMembersUtil.generateMuteMemberOptions = function (mute, status, locusUrl) {\n  return {\n    memberId: mute,\n    muted: status,\n    locusUrl: locusUrl\n  };\n};\n\nMembersUtil.getMuteMemberRequestParams = function (options) {\n  var body = {\n    audio: {\n      muted: options.muted\n    }\n  };\n  var uri = options.locusUrl + '/' + _constants.PARTICIPANT + '/' + options.memberId + '/' + _constants.CONTROLS;\n  return {\n    method: _constants.HTTP_VERBS.PATCH,\n    uri: uri,\n    body: body\n  };\n};\n\nMembersUtil.getTransferHostToMemberRequestParams = function (options) {\n  var body = {\n    role: {\n      moderator: options.moderator\n    }\n  };\n  var uri = options.locusUrl + '/' + _constants.PARTICIPANT + '/' + options.memberId + '/' + _constants.CONTROLS;\n  return {\n    method: _constants.HTTP_VERBS.PATCH,\n    uri: uri,\n    body: body\n  };\n};\n\nexports.default = MembersUtil;","map":{"version":3,"sources":["util.js"],"names":["MembersUtil","invitee","locusUrl","alertIfActive","memberIds","invitees","address","options","email","admit","participantIds","body","uri","format","CONTROLS","method","HTTP_VERBS","requestParams","VALID_EMAIL_ADDRESS","reason","PARTICIPANT","LEAVE","moderator","memberId","transfer","_FORCED_","muted","audio","role"],"mappings":"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","sourcesContent":["import {\n  HTTP_VERBS,\n  CONTROLS,\n  _FORCED_,\n  LEAVE,\n  PARTICIPANT,\n  VALID_EMAIL_ADDRESS\n} from '../constants';\n\nconst MembersUtil = {};\n\n/**\n * @param {Object} invitee with emailAddress or email\n * @param {String} locusUrl\n * @param {Boolean} alertIfActive\n * @returns {Object} the format object\n */\nMembersUtil.generateAddMemberOptions = (invitee, locusUrl, alertIfActive) => ({\n  invitee,\n  locusUrl,\n  alertIfActive\n});\n\n/**\n * @param {Array} memberIds\n * @param {String} locusUrl\n * @returns {Object} the format object\n */\nMembersUtil.generateAdmitMemberOptions = (memberIds, locusUrl) => ({\n  locusUrl,\n  memberIds\n});\n\n/**\n * @param {Object} options with {invitee: {emailAddress, email}, alertIfActive}\n * @returns {Object} with {invitees: [{address}], alertIfActive}\n */\nMembersUtil.getAddMemberBody = (options) => ({\n  invitees: [\n    {\n      address: options.invitee.emailAddress || options.invitee.email\n    }\n  ],\n  alertIfActive: options.alertIfActive\n});\n\n/**\n * @param {Object} options with {memberIds}\n * @returns {Object} admit with {memberIds}\n */\nMembersUtil.getAdmitMemberRequestBody = (options) => ({\n  admit: {participantIds: options.memberIds}\n});\n\n/**\n * @param {Object} format with {memberIds, locusUrl}\n * @returns {Object} the request parameters (method, uri, body) needed to make a admitMember request\n */\nMembersUtil.getAdmitMemberRequestParams = (format) => {\n  const body = MembersUtil.getAdmitMemberRequestBody(format);\n  const uri = `${format.locusUrl}/${CONTROLS}`;\n\n  return {\n    method: HTTP_VERBS.PUT,\n    uri,\n    body\n  };\n};\n\n/**\n * @param {Object} format with {invitee {emailAddress, email}, locusUrl, alertIfActive}\n * @returns {Object} the request parameters (method, uri, body) needed to make a addMember request\n */\nMembersUtil.getAddMemberRequestParams = (format) => {\n  const body = MembersUtil.getAddMemberBody(format);\n  const requestParams = {\n    method: HTTP_VERBS.PUT,\n    uri: format.locusUrl,\n    body\n  };\n\n  return requestParams;\n};\n\nMembersUtil.isInvalidInvitee = (invitee) => {\n  if (!(invitee && (invitee.email || invitee.emailAddress))) {\n    return true;\n  }\n\n  return !VALID_EMAIL_ADDRESS.test(invitee.email || invitee.emailAddress);\n};\n\nMembersUtil.getRemoveMemberRequestParams = (options) => {\n  const body = {\n    reason: options.reason\n  };\n  const uri = `${options.locusUrl}/${PARTICIPANT}/${options.memberId}/${LEAVE}`;\n\n  return {\n    method: HTTP_VERBS.PUT,\n    uri,\n    body\n  };\n};\n\nMembersUtil.generateTransferHostMemberOptions = (transfer, moderator, locusUrl) => ({\n  moderator,\n  locusUrl,\n  memberId: transfer\n});\n\nMembersUtil.generateRemoveMemberOptions = (removal, locusUrl) => ({\n  reason: _FORCED_,\n  memberId: removal,\n  locusUrl\n});\n\nMembersUtil.generateMuteMemberOptions = (mute, status, locusUrl) => ({\n  memberId: mute,\n  muted: status,\n  locusUrl\n});\n\nMembersUtil.getMuteMemberRequestParams = (options) => {\n  const body = {\n    audio: {\n      muted: options.muted\n    }\n  };\n  const uri = `${options.locusUrl}/${PARTICIPANT}/${options.memberId}/${CONTROLS}`;\n\n  return {\n    method: HTTP_VERBS.PATCH,\n    uri,\n    body\n  };\n};\n\nMembersUtil.getTransferHostToMemberRequestParams = (options) => {\n  const body = {\n    role: {\n      moderator: options.moderator\n    }\n  };\n  const uri = `${options.locusUrl}/${PARTICIPANT}/${options.memberId}/${CONTROLS}`;\n\n  return {\n    method: HTTP_VERBS.PATCH,\n    uri,\n    body\n  };\n};\n\nexport default MembersUtil;\n"]},"metadata":{},"sourceType":"script"}