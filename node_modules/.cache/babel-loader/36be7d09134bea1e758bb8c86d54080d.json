{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _map2 = require('babel-runtime/core-js/map');\n\nvar _map3 = _interopRequireDefault(_map2);\n\nvar _uniq2 = require('lodash/uniq');\n\nvar _uniq3 = _interopRequireDefault(_uniq2);\n\nvar _pick2 = require('lodash/pick');\n\nvar _pick3 = _interopRequireDefault(_pick2);\n\nvar _omit2 = require('lodash/omit');\n\nvar _omit3 = _interopRequireDefault(_omit2);\n\nvar _merge2 = require('lodash/merge');\n\nvar _merge3 = _interopRequireDefault(_merge2);\n\nvar _map4 = require('lodash/map');\n\nvar _map5 = _interopRequireDefault(_map4);\n\nvar _last2 = require('lodash/last');\n\nvar _last3 = _interopRequireDefault(_last2);\n\nvar _isString2 = require('lodash/isString');\n\nvar _isString3 = _interopRequireDefault(_isString2);\n\nvar _isObject2 = require('lodash/isObject');\n\nvar _isObject3 = _interopRequireDefault(_isObject2);\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nvar _defaults2 = require('lodash/defaults');\n\nvar _defaults3 = _interopRequireDefault(_defaults2);\n\nvar _cloneDeepWith2 = require('lodash/cloneDeepWith');\n\nvar _cloneDeepWith3 = _interopRequireDefault(_cloneDeepWith2);\n\nvar _cloneDeep2 = require('lodash/cloneDeep');\n\nvar _cloneDeep3 = _interopRequireDefault(_cloneDeep2);\n\nvar _querystring = require('querystring');\n\nvar _querystring2 = _interopRequireDefault(_querystring);\n\nvar _events = require('events');\n\nvar _common = require('@webex/common');\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _helperImage = require('@webex/helper-image');\n\nvar _uuid = require('uuid');\n\nvar _uuid2 = _interopRequireDefault(_uuid);\n\nvar _convoError = require('./convo-error');\n\nvar _shareActivity = require('./share-activity');\n\nvar _shareActivity2 = _interopRequireDefault(_shareActivity);\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar DEFAULT_CLUSTER = process.env.WEBEX_CONVERSATION_DEFAULT_CLUSTER || 'urn:TEAM:us-east-2_a:identityLookup';\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nvar idToUrl = new _map3.default();\n\nvar getConvoLimit = function getConvoLimit() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var limit = void 0;\n\n  if (options.conversationsLimit) {\n    limit = {\n      value: options.conversationsLimit,\n      name: 'conversationsLimit'\n    };\n  }\n\n  return limit;\n};\n\nvar Conversation = _webexCore.WebexPlugin.extend({\n  namespace: 'Conversation',\n\n  /**\n   * @param {String} cluster the cluster containing the id\n   * @param {UUID} [id] the id of the conversation.\n   *  If empty, just return the base URL.\n   * @returns {String} url of the conversation\n   */\n  getUrlFromClusterId: function getUrlFromClusterId() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$cluster = _ref.cluster,\n        cluster = _ref$cluster === undefined ? 'us' : _ref$cluster,\n        id = _ref.id;\n\n    var clusterId = cluster === 'us' ? DEFAULT_CLUSTER : cluster;\n\n    var _ref2 = this.webex.internal.services.getServiceFromClusterId({\n      clusterId: clusterId\n    }) || {},\n        url = _ref2.url;\n\n    if (!url) {\n      throw Error('Could not find service for cluster [' + cluster + ']');\n    }\n\n    return id ? url + '/conversations/' + id : url;\n  },\n\n  /**\n   * @param {Object} conversation\n   * @param {Object} object\n   * @param {Object} activity\n   * @returns {Promise}\n   */\n  acknowledge: function acknowledge(conversation, object, activity) {\n    var _this = this;\n\n    var url = this.getConvoUrl(conversation);\n    var convoWithUrl = (0, _assign2.default)({}, conversation, {\n      url: url\n    });\n\n    if (!(0, _isObject3.default)(object)) {\n      return _promise2.default.reject(new Error('`object` must be an object'));\n    }\n\n    return this.prepare(activity, {\n      verb: 'acknowledge',\n      target: this.prepareConversation(convoWithUrl),\n      object: {\n        objectType: 'activity',\n        id: object.id,\n        url: object.url\n      }\n    }).then(function (a) {\n      return _this.submit(a);\n    });\n  },\n\n  /**\n   * Adds a participant to a conversation\n   * @param {Object} conversation\n   * @param {Object|string} participant\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @returns {Promise<Activity>}\n   */\n  add: function add(conversation, participant, activity) {\n    var _this2 = this;\n\n    var url = this.getConvoUrl(conversation);\n    var convoWithUrl = (0, _assign2.default)({}, conversation, {\n      url: url\n    });\n    return this.webex.internal.user.asUUID(participant, {\n      create: true\n    }).then(function (id) {\n      return _this2.prepare(activity, {\n        verb: 'add',\n        target: _this2.prepareConversation(convoWithUrl),\n        object: {\n          id: id,\n          objectType: 'person'\n        },\n        kmsMessage: {\n          method: 'create',\n          uri: '/authorizations',\n          resourceUri: '<KRO>',\n          userIds: [id]\n        }\n      }).then(function (a) {\n        return _this2.submit(a);\n      });\n    });\n  },\n\n  /**\n   * Creates a conversation\n   * @param {Object} params\n   * @param {Array<Participant>} params.participants\n   * @param {Array<File>} params.files\n   * @param {string} params.comment\n   * @param {string} params.html\n   * @param {Object} params.displayName\n   * @param {Object} options\n   * @param {Boolean} options.allowPartialCreation\n   * @param {Boolean} options.forceGrouped\n   * @param {Boolean} options.skipOneOnOneFetch skips checking 1:1 exists before creating conversation\n   * @returns {Promise<Conversation>}\n   */\n  create: function create(params) {\n    var _this3 = this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!params.participants || params.participants.length === 0) {\n      return _promise2.default.reject(new Error('`params.participants` is required'));\n    }\n\n    return _promise2.default.all(params.participants.map(function (participant) {\n      return _this3.webex.internal.user.asUUID(participant, {\n        create: true\n      }) // eslint-disable-next-line arrow-body-style\n      .catch(function (err) {\n        return options.allowPartialCreation ? undefined : _promise2.default.reject(err);\n      });\n    })).then(function (participants) {\n      participants.unshift(_this3.webex.internal.device.userId);\n      participants = (0, _uniq3.default)(participants);\n      var validParticipants = participants.filter(function (participant) {\n        return participant;\n      });\n      params.participants = validParticipants; // check if original participants list was to create a 1:1\n\n      if (participants.length === 2 && !(options && options.forceGrouped)) {\n        if (!params.participants[1]) {\n          return _promise2.default.reject(new _convoError.InvalidUserCreation());\n        }\n\n        if (options.skipOneOnOneFetch) {\n          return _this3._createOneOnOne(params);\n        }\n\n        return _this3._maybeCreateOneOnOneThenPost(params, options);\n      }\n\n      return _this3._createGrouped(params, options);\n    }).then(function (c) {\n      idToUrl.set(c.id, c.url);\n\n      if (!params.files) {\n        return c;\n      }\n\n      return _this3.webex.internal.conversation.share(c, params.files).then(function (a) {\n        c.activities.items.push(a);\n        return c;\n      });\n    });\n  },\n\n  /**\n   * delete content\n   * @param {Object} conversation\n   * @param {Object} object\n   * @param {Object} activity\n   * @returns {Promise}\n   */\n  delete: function _delete(conversation, object, activity) {\n    var _this4 = this;\n\n    var url = this.getConvoUrl(conversation);\n    var convoWithUrl = (0, _assign2.default)({}, conversation, {\n      url: url\n    });\n\n    if (!(0, _isObject3.default)(object)) {\n      return _promise2.default.reject(new Error('`object` must be an object'));\n    }\n\n    return this.prepare(activity, {\n      verb: 'delete',\n      target: this.prepareConversation(convoWithUrl),\n      object: (0, _pick3.default)(object, 'id', 'url', 'objectType')\n    }).then(function (a) {\n      return _this4.submit(a);\n    });\n  },\n\n  /**\n   * Downloads the file specified in item.scr or item.url\n   * @param {Object} item\n   * @param {Object} item.scr\n   * @param {string} item.url\n   * @param {Object} options\n   * @param {Object} options.headers\n   * @returns {Promise<File>}\n   */\n  download: function download(item, options) {\n    var _this5 = this;\n\n    var isEncrypted = Boolean(item.scr && item.scr.key);\n    var shunt = new _events.EventEmitter();\n    var promise = void 0;\n\n    if (isEncrypted) {\n      promise = this.webex.internal.encryption.download(item.scr, item.options);\n    } else if (item.scr && item.scr.loc) {\n      promise = this._downloadUnencryptedFile(item.scr.loc, options);\n    } else {\n      promise = this._downloadUnencryptedFile(item.url, options);\n    }\n\n    promise = promise.on('progress', function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return shunt.emit.apply(shunt, ['progress'].concat(args));\n    }).then(function (res) {\n      return (0, _helperImage.readExifData)(item, res);\n    }).then(function (file) {\n      _this5.logger.info('conversation: file downloaded');\n\n      if (item.displayName && !file.name) {\n        file.name = item.displayName;\n      }\n\n      if (!file.type && item.mimeType) {\n        file.type = item.mimeType;\n      }\n\n      return file;\n    });\n    (0, _common.proxyEvents)(shunt, promise);\n    return promise;\n  },\n\n  /**\n   * Downloads an unencrypted file\n   * @param {string} uri\n   * @param {Object} options\n   * @param {Ojbect} options.headers\n   * @returns {Promise<File>}\n   */\n  _downloadUnencryptedFile: function _downloadUnencryptedFile(uri) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    (0, _assign2.default)(options, {\n      uri: uri,\n      responseType: 'buffer'\n    });\n    var promise = this.request(options).then(function (res) {\n      return res.body;\n    });\n    (0, _common.proxyEvents)(options.download, promise);\n    return promise;\n  },\n\n  /**\n   * Helper method that expands a set of parameters into an activty object\n   * @param {string} verb\n   * @param {Object} object\n   * @param {Object} target\n   * @param {Object|string} actor\n   * @returns {Object}\n   */\n  expand: function expand(verb, object, target, actor) {\n    var activity = {\n      actor: actor,\n      objectType: 'activity',\n      verb: verb\n    };\n\n    if (!actor) {\n      actor = this.webex.internal.device.userId;\n    }\n\n    if ((0, _isString3.default)(actor)) {\n      activity.actor = {\n        objectType: 'person',\n        id: actor\n      };\n    }\n\n    if (object) {\n      activity.object = object;\n    }\n\n    if (target) {\n      activity.target = target;\n    }\n\n    return activity;\n  },\n\n  /**\n  * Gets an array of activities with an array of activity URLS\n  * @param {Array} activityUrls\n  * @param {String} [cluster] cluster where the activities are located\n  * @returns {Promise<Object>} Resolves with the activities\n  * TODO: add cluster functionality when clusters are ready\n  */\n  bulkActivitiesFetch: function bulkActivitiesFetch(activityUrls, cluster) {\n    var resource = 'bulk_activities_fetch';\n    var params = {\n      method: 'POST',\n      body: {\n        activityUrls: activityUrls\n      }\n    };\n\n    if (cluster) {\n      var uri = this.getUrlFromClusterId({\n        cluster: cluster\n      }) + '/' + resource;\n      (0, _assign2.default)(params, {\n        uri: uri\n      });\n    } else {\n      (0, _assign2.default)(params, {\n        api: 'conversation',\n        resource: resource\n      });\n    }\n\n    return this.webex.request(params).then(function (res) {\n      var activitiesArr = [];\n\n      if (res.body.multistatus) {\n        res.body.multistatus.forEach(function (statusData) {\n          if (statusData.status === '200' && statusData.data && statusData.data.activity) {\n            activitiesArr.push(statusData.data.activity);\n          }\n        });\n      }\n\n      return activitiesArr;\n    });\n  },\n\n  /**\n   * Fetches a single conversation\n   * @param {Object} conversation\n   * @param {String} [conversation.url] The URL where the conversation is located.\n   * @param {String|UUID} [conversation.user] The user to look up in the conversation service\n   *   If specified, the user lookup will take precedence over the url lookup\n   * @param {Object} options\n   * @returns {Promise<Conversation>}\n   */\n  get: function get(conversation) {\n    var _this6 = this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var user = conversation.user;\n    var uri = void 0;\n\n    try {\n      uri = !user ? this.getConvoUrl(conversation) : '';\n    } catch (err) {\n      return _promise2.default.reject(Error(err));\n    }\n\n    var params = {\n      qs: (0, _assign2.default)({\n        uuidEntryFormat: true,\n        personRefresh: true,\n        activitiesLimit: 0,\n        includeConvWithDeletedUserUUID: false,\n        includeParticipants: false\n      }, (0, _omit3.default)(options, 'id', 'user', 'url'))\n    }; // Default behavior is to set includeParticipants=false,\n    // which makes the payload lighter by removing participant info.\n    // If the caller explicitly sets the participantAckFilter or\n    // participantsLimit, we don't want that default setting.\n\n    if ('participantAckFilter' in options || 'participantsLimit' in options) {\n      delete params.qs.includeParticipants;\n    }\n\n    return _promise2.default.resolve(user ? this.webex.internal.user.asUUID(user) : null).then(function (userId) {\n      if (userId) {\n        (0, _assign2.default)(params, {\n          service: 'conversation',\n          resource: 'conversations/user/' + userId\n        });\n      } else {\n        params.uri = uri;\n      }\n\n      return _this6.request(params);\n    }).then((0, _common.tap)(function (_ref3) {\n      var body = _ref3.body;\n      var id = body.id,\n          url = body.url;\n\n      _this6._recordUUIDs(body);\n\n      idToUrl.set(id, url);\n    })).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Leaves the conversation or removes the specified user from the specified\n   * conversation\n   * @param {Object} conversation\n   * @param {Object|string} participant If not specified, defaults to current\n   * user\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @returns {Promise<Activity>}\n   */\n  leave: function leave(conversation, participant, activity) {\n    var _this7 = this;\n\n    var convoWithUrl = (0, _assign2.default)({}, conversation, {\n      url: this.getConvoUrl(conversation)\n    });\n    return _promise2.default.resolve().then(function () {\n      if (!participant) {\n        participant = _this7.webex.internal.device.userId;\n      }\n\n      return _this7.webex.internal.user.asUUID(participant).then(function (id) {\n        return _this7.prepare(activity, {\n          verb: 'leave',\n          target: _this7.prepareConversation(convoWithUrl),\n          object: {\n            id: id,\n            objectType: 'person'\n          },\n          kmsMessage: {\n            method: 'delete',\n            uri: '<KRO>/authorizations?' + _querystring2.default.stringify({\n              authId: id\n            })\n          }\n        });\n      });\n    }).then(function (a) {\n      return _this7.submit(a);\n    });\n  },\n\n  /**\n   * Lists a set of conversations. By default does not fetch activities or\n   * participants\n   * @param {Object} options\n   * @param {boolean} options.deferDecrypt - when true, deferDecrypt tells the\n   * payload transformer to normalize (but not decrypt) each received\n   * conversation. Instead, the received conversations will each have a bound\n   * decrypt method that can be executed at the consumer's leisure\n   * @returns {Promise<Array<Conversation>>}\n   */\n  list: function list() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this._list({\n      service: 'conversation',\n      resource: 'conversations',\n      qs: (0, _omit3.default)(options, 'deferDecrypt'),\n      deferDecrypt: options.deferDecrypt,\n      limit: getConvoLimit(options)\n    }).then(function (results) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = (0, _getIterator3.default)(results), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var convo = _step.value;\n          idToUrl.set(convo.id, convo.url);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return results;\n    });\n  },\n\n  /**\n   * Lists the conversations the current user has left. By default does not\n   * fetch activities or participants\n   * @param {Object} options\n   * @returns {Promise<Array<Conversation>>}\n   */\n  listLeft: function listLeft(options) {\n    return this._list({\n      service: 'conversation',\n      resource: 'conversations/left',\n      qs: options,\n      limit: getConvoLimit(options)\n    }).then(function (results) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = (0, _getIterator3.default)(results), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var convo = _step2.value;\n          idToUrl.set(convo.id, convo.url);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return results;\n    });\n  },\n\n  /**\n   * List activities for the specified conversation\n   * @param {Object} options\n   * @param {String} options.conversationUrl URL to the conversation\n   * @returns {Promise<Array<Activity>>}\n   */\n  listActivities: function listActivities(options) {\n    return this._listActivities((0, _assign2.default)(options, {\n      resource: 'activities'\n    }));\n  },\n\n  /**\n   * Lists activities in which the current user was mentioned\n   * @param {Object} options\n   * @returns {Promise<Array<Activity>>}\n   */\n  listMentions: function listMentions(options) {\n    return this._list({\n      service: 'conversation',\n      resource: 'mentions',\n      qs: (0, _omit3.default)(options, 'mentions')\n    });\n  },\n\n  /**\n   * Mutes the mentions of a conversation\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  muteMentions: function muteMentions(conversation, activity) {\n    return this.tag(conversation, {\n      tags: ['MENTION_NOTIFICATIONS_OFF']\n    }, activity);\n  },\n\n  /**\n   * Mutes the messages of a conversation\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  muteMessages: function muteMessages(conversation, activity) {\n    return this.tag(conversation, {\n      tags: ['MESSAGE_NOTIFICATIONS_OFF']\n    }, activity);\n  },\n\n  /**\n   * @param {Object} conversation\n   * @param {Object} inputs\n   * @param {Object} parentActivity\n   * @param {Object} activity\n   * @returns {Promise}\n   */\n  cardAction: function cardAction(conversation, inputs, parentActivity) {\n    var _this8 = this;\n\n    var activity = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var convoWithUrl = (0, _assign2.default)({}, conversation, {\n      url: this.getConvoUrl(conversation)\n    });\n    activity.parent = {\n      id: parentActivity.id,\n      type: 'cardAction'\n    };\n    return this.prepare(activity, {\n      verb: 'cardAction',\n      target: this.prepareConversation(convoWithUrl),\n      object: (0, _assign2.default)({\n        objectType: 'submit'\n      }, inputs)\n    }).then(function (a) {\n      return _this8.submit(a);\n    });\n  },\n\n  /**\n   * Posts a message to a conversation\n   * @param {Object} conversation\n   * @param {Object|string} message if string, treated as plaintext; if object,\n   * assumed to be object property of `post` activity\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @returns {Promise<Activity>}\n   */\n  post: function post(conversation, message, activity) {\n    var _this9 = this;\n\n    var convoWithUrl = (0, _assign2.default)({}, conversation, {\n      url: this.getConvoUrl(conversation)\n    });\n\n    if ((0, _isString3.default)(message)) {\n      message = {\n        displayName: message\n      };\n    }\n\n    return this.prepare(activity, {\n      verb: 'post',\n      target: this.prepareConversation(convoWithUrl),\n      object: (0, _assign2.default)({\n        objectType: 'comment'\n      }, message)\n    }).then(function (a) {\n      return _this9.submit(a);\n    });\n  },\n  prepareConversation: function prepareConversation(conversation) {\n    return (0, _defaults3.default)((0, _pick3.default)(conversation, 'id', 'url', 'objectType', 'defaultActivityEncryptionKeyUrl', 'kmsResourceObjectUrl'), {\n      objectType: 'conversation'\n    });\n  },\n  prepare: function prepare(activity, params) {\n    var _this10 = this;\n\n    params = params || {};\n    activity = activity || {};\n    return _promise2.default.resolve(activity.prepare ? activity.prepare(params) : activity).then(function (act) {\n      (0, _defaults3.default)(act, {\n        verb: params.verb,\n        kmsMessage: params.kmsMessage,\n        objectType: 'activity',\n        clientTempId: _uuid2.default.v4(),\n        actor: _this10.webex.internal.device.userId\n      }); // Workaround because parent is a reserved props in Ampersand\n\n      if (activity.parentActivityId && activity.activityType || activity.parent && activity.parent.id && activity.parent.type) {\n        act.parent = {\n          id: activity.parentActivityId || activity.parent.id,\n          type: activity.activityType || activity.parent.type\n        };\n      }\n\n      if ((0, _isString3.default)(act.actor)) {\n        act.actor = {\n          objectType: 'person',\n          id: act.actor\n        };\n      }\n\n      ['actor', 'object'].forEach(function (key) {\n        if (params[key]) {\n          act[key] = act[key] || {};\n          (0, _defaults3.default)(act[key], params[key]);\n        }\n      });\n\n      if (params.target) {\n        (0, _merge3.default)(act, {\n          target: (0, _pick3.default)(params.target, 'id', 'url', 'objectType', 'kmsResourceObjectUrl', 'defaultActivityEncryptionKeyUrl')\n        });\n      }\n\n      ['object', 'target'].forEach(function (key) {\n        if (act[key] && act[key].url && !act[key].id) {\n          act[key].id = act[key].url.split('/').pop();\n        }\n      });\n      ['actor', 'object', 'target'].forEach(function (key) {\n        if (act[key] && !act[key].objectType) {\n          // Reminder: throwing here because it's the only way to get out of\n          // this loop in event of an error.\n          throw new Error('`act.' + key + '.objectType` must be defined');\n        }\n      });\n\n      if (act.object && act.object.content && !act.object.displayName) {\n        return _promise2.default.reject(new Error('Cannot submit activity object with `content` but no `displayName`'));\n      }\n\n      return act;\n    });\n  },\n\n  /**\n   * Handles incoming conversation.activity mercury messages\n   * @param {Event} event\n   * @returns {Promise}\n   */\n  processActivityEvent: function processActivityEvent(event) {\n    return this.webex.transform('inbound', event).then(function () {\n      return event;\n    });\n  },\n\n  /**\n   * Removes all mute-related tags\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  removeAllMuteTags: function removeAllMuteTags(conversation, activity) {\n    return this.untag(conversation, {\n      tags: ['MENTION_NOTIFICATIONS_OFF', 'MENTION_NOTIFICATIONS_ON', 'MESSAGE_NOTIFICATIONS_OFF', 'MESSAGE_NOTIFICATIONS_ON']\n    }, activity);\n  },\n\n  /**\n   * Creates a ShareActivty for the specified conversation\n   * @param {Object} conversation\n   * @param {Object} activity\n   * @returns {ShareActivty}\n   */\n  makeShare: function makeShare(conversation, activity) {\n    // if we pass activity as null then it does not take care of the\n    // clientTempId created by the web-client while making the provisional\n    // activity, hence we need to pass the activity which was created by the\n    // web-client. This fixes the issue where the image activities do not come\n    // back properly oriented from the server since the clientTempId is missing\n    return _shareActivity2.default.create(conversation, activity, this.webex);\n  },\n\n  /**\n   * Assigns an avatar to a room\n   * @param {Object} conversation\n   * @param {File} avatar\n   * @returns {Promise<Activity>}\n   */\n  assign: function assign(conversation, avatar) {\n    var _this11 = this;\n\n    if ((avatar.size || avatar.length) > 1024 * 1024) {\n      return _promise2.default.reject(new Error('Room avatars must be less than 1MB'));\n    }\n\n    var convoWithUrl = (0, _assign2.default)({}, conversation, {\n      url: this.getConvoUrl(conversation)\n    });\n    return _promise2.default.resolve().then(function () {\n      var activity = _shareActivity2.default.create(conversation, null, _this11.webex);\n\n      activity.enableThumbnails = false;\n      activity.add(avatar);\n      return _this11.prepare(activity, {\n        target: _this11.prepareConversation(convoWithUrl)\n      });\n    }).then(function (a) {\n      // yes, this seems a little hacky; will likely be resolved as a result\n      // of #213\n      a.verb = 'assign';\n      return _this11.submit(a);\n    });\n  },\n\n  /**\n   * Get url from convo object. If there isn't one, get it from the cache\n   *\n   * @param {String} url The location of the conversation\n   * @param {UUID} id If there is no url, fall back to id to lookup in cache or with cluster\n   * @param {String} cluster Used with id to lookup url\n   * @param {UUID} generalConversationUuid If this is a team, the id of the general conversation\n   * @param {Object} conversations If this is a team, the list of conversations in the team\n   * @returns {String} url for the specific convo\n   */\n  getConvoUrl: function getConvoUrl(_ref4) {\n    var id = _ref4.id,\n        url = _ref4.url,\n        cluster = _ref4.cluster,\n        conversations = _ref4.conversations,\n        generalConversationUuid = _ref4.generalConversationUuid;\n\n    if (generalConversationUuid) {\n      // This is a Team\n      // Because Convo doesn't have an endpoint for the team URL\n      // we have to use the general convo URL.\n      var generalConvo = conversations.items.find(function (convo) {\n        return convo.id === generalConversationUuid;\n      });\n      return generalConvo.url;\n    }\n\n    if (url) {\n      return url;\n    }\n\n    if (id) {\n      if (cluster) {\n        return this.getUrlFromClusterId({\n          cluster: cluster,\n          id: id\n        });\n      }\n\n      this.logger.warn('You should be using the `url` instead of the `id` property');\n      var relatedUrl = idToUrl.get(id);\n\n      if (!relatedUrl) {\n        throw Error('Could not find the `url` from the given `id`');\n      }\n\n      return relatedUrl;\n    }\n\n    throw Error('The space needs a `url` property');\n  },\n\n  /**\n   * Sets the typing status of the current user in a conversation\n   *\n   * @param {Object} conversation\n   * @param {Object} options\n   * @param {boolean} options.typing\n   * @returns {Promise}\n   */\n  updateTypingStatus: function updateTypingStatus(conversation, options) {\n    if (!conversation.id) {\n      if (conversation.url) {\n        conversation.id = conversation.url.split('/').pop();\n      } else {\n        return _promise2.default.reject(new Error('conversation: could not identify conversation'));\n      }\n    }\n\n    var eventType = void 0;\n\n    if (options.typing) {\n      eventType = 'status.start_typing';\n    } else {\n      eventType = 'status.stop_typing';\n    }\n\n    var url = this.getConvoUrl(conversation);\n    var resource = 'status/typing';\n    var params = {\n      method: 'POST',\n      body: {\n        conversationId: conversation.id,\n        eventType: eventType\n      },\n      url: url + '/' + resource\n    };\n    return this.request(params);\n  },\n\n  /**\n   * Shares files to the specified conversation\n   * @param {Object} conversation\n   * @param {ShareActivity|Array<File>} activity\n   * @returns {Promise<Activity>}\n   */\n  share: function share(conversation, activity) {\n    var _this12 = this;\n\n    if ((0, _isArray3.default)(activity)) {\n      activity = {\n        object: {\n          files: activity\n        }\n      };\n    }\n\n    var convoWithUrl = (0, _assign2.default)({}, conversation, {\n      url: this.getConvoUrl(conversation)\n    });\n\n    if (!(activity instanceof _shareActivity2.default)) {\n      activity = _shareActivity2.default.create(convoWithUrl, activity, this.webex);\n    }\n\n    return this.prepare(activity, {\n      target: this.prepareConversation(convoWithUrl)\n    }).then(function (a) {\n      return _this12.submit(a);\n    });\n  },\n\n  /**\n   * Submits an activity to the conversation service\n   * @param {Object} activity\n   * @param {String} [endpoint] endpoint to submit activity. If empty, find in activity\n   * @returns {Promise<Activity>}\n   */\n  submit: function submit(activity, endpoint) {\n    var _this13 = this;\n\n    var url = endpoint || this.getConvoUrl(activity.target);\n    var resource = activity.verb === 'share' ? 'content' : 'activities';\n    var params = {\n      method: 'POST',\n      body: activity,\n      qs: {\n        personRefresh: true\n      },\n      url: url + '/' + resource\n    };\n\n    if (activity.verb === 'share') {\n      (0, _assign2.default)(params.qs, {\n        transcode: true,\n        async: false\n      });\n    }\n    /**\n    * helper to cloneDeepWith for copying instance function\n    * @param {Object|String|Symbol|Array|Date} value (recursive value to clone from params)\n    * @returns {Object|null}\n    */\n    // eslint-disable-next-line consistent-return\n\n\n    var customActivityCopy = function customActivityCopy(value) {\n      var files = params.body.object.files;\n\n      if (files && value && files.items.length > 0 && value.constructor === files.items[0].scr.constructor) {\n        var copySrc = (0, _cloneDeep3.default)(value);\n        copySrc.toJWE = value.toJWE;\n        copySrc.toJSON = value.toJSON;\n        return copySrc;\n      }\n    };\n\n    var cloneActivity = (0, _cloneDeepWith3.default)(params, customActivityCopy); // triggers user-activity to reset logout timer\n\n    this.webex.trigger('user-activity');\n    return this.request(params).then(function (res) {\n      return res.body;\n    }).catch(function (error) {\n      // handle when key need to rotate\n      if (error.body && error.body.errorCode === _constants.KEY_ROTATION_REQUIRED) {\n        cloneActivity.body.target.defaultActivityEncryptionKeyUrl = null;\n\n        _this13.request(cloneActivity);\n      } else if (error.body && (error.body.errorCode === _constants.KEY_ALREADY_ROTATED || error.body.errorCode === _constants.ENCRYPTION_KEY_URL_MISMATCH)) {\n        // handle when key need to update\n        _this13.webex.request({\n          method: 'GET',\n          api: 'conversation',\n          resource: 'conversations/' + params.body.target.id\n        }).then(function (res) {\n          cloneActivity.body.target.defaultActivityEncryptionKeyUrl = res.body.defaultActivityEncryptionkeyUrl;\n\n          _this13.request(cloneActivity);\n        });\n      } else {\n        throw error;\n      }\n    });\n  },\n\n  /**\n   * Remove the avatar from a room\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise}\n   */\n  unassign: function unassign(conversation, activity) {\n    var _this14 = this;\n\n    var convoWithUrl = (0, _assign2.default)({}, conversation, {\n      url: this.getConvoUrl(conversation)\n    });\n    return this.prepare(activity, {\n      verb: 'unassign',\n      target: this.prepareConversation(convoWithUrl),\n      object: {\n        objectType: 'content',\n        files: {\n          items: []\n        }\n      }\n    }).then(function (a) {\n      return _this14.submit(a);\n    });\n  },\n\n  /**\n   * Mutes the mentions of a conversation\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  unmuteMentions: function unmuteMentions(conversation, activity) {\n    return this.tag(conversation, {\n      tags: ['MENTION_NOTIFICATIONS_ON']\n    }, activity);\n  },\n\n  /**\n   * Mutes the messages of a conversation\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  unmuteMessages: function unmuteMessages(conversation, activity) {\n    return this.tag(conversation, {\n      tags: ['MESSAGE_NOTIFICATIONS_ON']\n    }, activity);\n  },\n\n  /**\n   * Update an existing activity\n   * @param {Object} conversation\n   * @param {Object} object\n   * @param {Object} activity\n   * @returns {Promise}\n   */\n  update: function update(conversation, object, activity) {\n    var _this15 = this;\n\n    if (!(0, _isObject3.default)(object)) {\n      return _promise2.default.reject(new Error('`object` must be an object'));\n    }\n\n    var convoWithUrl = (0, _assign2.default)({}, conversation, {\n      url: this.getConvoUrl(conversation)\n    });\n    return this.prepare(activity, {\n      verb: 'update',\n      target: this.prepareConversation(convoWithUrl),\n      object: object\n    }).then(function (a) {\n      return _this15.submit(a);\n    });\n  },\n\n  /**\n   * Sets a new key for the conversation\n   * @param {Object} conversation\n   * @param {Key|string} key (optional)\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @returns {Promise<Activity>}\n   */\n  updateKey: function updateKey(conversation, key, activity) {\n    var _this16 = this;\n\n    var convoWithUrl = (0, _assign2.default)({}, conversation, {\n      url: this.getConvoUrl(conversation)\n    });\n    return this.get(convoWithUrl, {\n      activitiesLimit: 0,\n      includeParticipants: true\n    }).then(function (c) {\n      return _this16._updateKey(c, key, activity);\n    });\n  },\n\n  /**\n   * Sets a new key for the conversation\n   * @param {Object} conversation\n   * @param {Key|string} key (optional)\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @private\n   * @returns {Promise<Activity>}\n   */\n  _updateKey: function _updateKey(conversation, key, activity) {\n    var _this17 = this;\n\n    var convoWithUrl = (0, _assign2.default)({}, conversation, {\n      url: this.getConvoUrl(conversation)\n    });\n    return _promise2.default.resolve(key || this.webex.internal.encryption.kms.createUnboundKeys({\n      count: 1\n    })).then(function (keys) {\n      var k = (0, _isArray3.default)(keys) ? keys[0] : keys;\n      var params = {\n        verb: 'updateKey',\n        target: _this17.prepareConversation(convoWithUrl),\n        object: {\n          defaultActivityEncryptionKeyUrl: k.uri,\n          objectType: 'conversation'\n        }\n      }; // Reminder: the kmsResourceObjectUrl is only usable if there is\n      // defaultActivityEncryptionKeyUrl.\n      // Valid defaultActivityEncryptionKeyUrl start with 'kms:'\n\n      if (convoWithUrl.kmsResourceObjectUrl && convoWithUrl.kmsResourceObjectUrl.startsWith('kms:')) {\n        params.kmsMessage = {\n          method: 'update',\n          resourceUri: '<KRO>',\n          uri: k.uri\n        };\n      } else {\n        params.kmsMessage = {\n          method: 'create',\n          uri: '/resources',\n          userIds: (0, _map5.default)(convoWithUrl.participants.items, 'id'),\n          keyUris: [k.uri]\n        };\n      }\n\n      return _this17.prepare(activity, params).then(function (a) {\n        return _this17.submit(a);\n      });\n    });\n  },\n\n  /**\n   * @param {Object} payload\n   * @param {Object} options\n   * @private\n   * @returns {Promise<Activity>}\n   */\n  _create: function _create(payload) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.request({\n      method: 'POST',\n      service: 'conversation',\n      resource: 'conversations',\n      body: payload,\n      qs: {\n        forceCreate: options.allowPartialCreation\n      }\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * @param {Object} params\n   * @param {Object} options\n   * @private\n   * @returns {Promise}\n   */\n  _createGrouped: function _createGrouped(params, options) {\n    return this._create(this._prepareConversationForCreation(params), options);\n  },\n\n  /**\n   * @param {Object} params\n   * @param {Object} options\n   * @private\n   * @returns {Promise}\n   */\n  _createOneOnOne: function _createOneOnOne(params) {\n    var payload = this._prepareConversationForCreation(params);\n\n    payload.tags = ['ONE_ON_ONE'];\n    return this._create(payload);\n  },\n\n  /**\n   * Get the current conversation url.\n   *\n   * @returns {Promise<string>} - conversation url\n   */\n  getConversationUrl: function getConversationUrl() {\n    var _this18 = this;\n\n    this.logger.info('conversation: getting the conversation service url');\n    var convoUrl = this.webex.internal.services.get('conversation'); // Validate if the conversation url exists in the services plugin and\n    // resolve with its value.\n\n    if (convoUrl) {\n      return _promise2.default.resolve(convoUrl);\n    } // Wait for the postauth catalog to update and then try to retrieve the\n    // conversation service url again.\n\n\n    return this.webex.internal.waitForCatalog('postauth').then(function () {\n      return _this18.webex.internal.services.get('conversation');\n    }).catch(function (error) {\n      _this18.logger.warn('conversation: unable to get conversation url', error.message);\n\n      return _promise2.default.reject(error);\n    });\n  },\n\n  /**\n   * @param {Object} conversation\n   * @private\n   * @returns {Promise}\n   */\n  _inferConversationUrl: function _inferConversationUrl(conversation) {\n    var _this19 = this;\n\n    if (conversation.id) {\n      return this.webex.internal.feature.getFeature('developer', 'web-high-availability').then(function (haMessagingEnabled) {\n        if (haMessagingEnabled) {\n          // recompute conversation URL each time as the host may have changed\n          // since last usage\n          return _this19.getConversationUrl().then(function (url) {\n            conversation.url = url + '/conversations/' + conversation.id;\n            return conversation;\n          });\n        }\n\n        if (!conversation.url) {\n          return _this19.getConversationUrl().then(function (url) {\n            conversation.url = url + '/conversations/' + conversation.id;\n            /* istanbul ignore else */\n\n            if (process.env.NODE_ENV !== 'production') {\n              _this19.logger.warn('conversation: inferred conversation url from conversation id; please pass whole conversation objects to Conversation methods');\n            }\n\n            return conversation;\n          });\n        }\n\n        return _promise2.default.resolve(conversation);\n      });\n    }\n\n    return _promise2.default.resolve(conversation);\n  },\n\n  /**\n   * @param {Object} options\n   * @param {String} options.conversationUrl URL to the conversation\n   * @param {String} options.resource The URL resource to hit for a list of objects\n   * @private\n   * @returns {Promise<Array<Activity>>}\n   */\n  _listActivities: function _listActivities(options) {\n    var id = options.conversationId;\n    var url = this.getConvoUrl({\n      url: options.conversationUrl,\n      id: id\n    });\n    var resource = options.resource;\n    return this._list({\n      qs: (0, _omit3.default)(options, 'resource'),\n      url: url + '/' + resource\n    });\n  },\n\n  /**\n   * @param {Object} options\n   * @private\n   * @returns {Promise<Array<Conversation>>}\n   */\n  _list: function () {\n    var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(options) {\n      var _this20 = this;\n\n      var res, list, limit, results, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, result, items;\n\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options.qs = (0, _assign2.default)({\n                personRefresh: true,\n                uuidEntryFormat: true,\n                activitiesLimit: 0,\n                participantsLimit: 0\n              }, options.qs);\n              _context.next = 3;\n              return this.request(options);\n\n            case 3:\n              res = _context.sent;\n              list = void 0;\n\n              if (!res.body || !res.body.items || res.body.items.length === 0) {\n                list = [];\n              } else {\n                list = res.body.items.slice(0);\n\n                if ((0, _last3.default)(list).published < list[0].published) {\n                  list.reverse();\n                }\n              } // The user has more data in another cluster.\n              // Follow the 'additionalUrls' for that data.\n\n\n              if (!res.body.additionalUrls) {\n                _context.next = 32;\n                break;\n              }\n\n              limit = 0; // If the user asked for a specific amount of data,\n              // don't fetch more than what was asked.\n              // Here we figure out how much is left from the original request.\n              // Divide that by the number of additional URLS.\n              // This won't get us the exact limit but it will retrieve something\n              // from every cluster listed.\n\n              if (options.limit) {\n                limit = Math.floor((options.limit.value - list.length) / res.body.additionalUrls.length);\n              } // If the limit is 0 for some reason,\n              // don't bother requesting from other clusters\n\n\n              if (!(!options.limit || limit !== 0)) {\n                _context.next = 32;\n                break;\n              }\n\n              _context.next = 12;\n              return _promise2.default.all(res.body.additionalUrls.map(function (host) {\n                var url = host + '/' + options.resource;\n                var newOptions = (0, _assign2.default)({}, options, {\n                  uri: url,\n                  url: url\n                });\n\n                if (options.limit) {\n                  newOptions.qs[newOptions.limit.name] = limit;\n                }\n\n                return _this20.request(newOptions);\n              }));\n\n            case 12:\n              results = _context.sent;\n              _iteratorNormalCompletion3 = true;\n              _didIteratorError3 = false;\n              _iteratorError3 = undefined;\n              _context.prev = 16;\n\n              for (_iterator3 = (0, _getIterator3.default)(results); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                result = _step3.value;\n\n                if (result.body && result.body.items && result.body.items.length) {\n                  items = result.body.items;\n\n                  if ((0, _last3.default)(items).published < items[0].published) {\n                    items.reverse();\n                  }\n\n                  list = list.concat(items);\n                }\n              }\n\n              _context.next = 24;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context['catch'](16);\n              _didIteratorError3 = true;\n              _iteratorError3 = _context.t0;\n\n            case 24:\n              _context.prev = 24;\n              _context.prev = 25;\n\n              if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                _iterator3.return();\n              }\n\n            case 27:\n              _context.prev = 27;\n\n              if (!_didIteratorError3) {\n                _context.next = 30;\n                break;\n              }\n\n              throw _iteratorError3;\n\n            case 30:\n              return _context.finish(27);\n\n            case 31:\n              return _context.finish(24);\n\n            case 32:\n              _context.next = 34;\n              return _promise2.default.all(list.map(function (item) {\n                return _this20._recordUUIDs(item);\n              }));\n\n            case 34:\n              return _context.abrupt('return', list);\n\n            case 35:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[16, 20, 24, 32], [25,, 27, 31]]);\n    }));\n\n    function _list(_x9) {\n      return _ref5.apply(this, arguments);\n    }\n\n    return _list;\n  }(),\n\n  /**\n   * @param {Object} params\n   * @param {Object} options\n   * @private\n   * @returns {Promise<Conversation>}\n   */\n  _maybeCreateOneOnOneThenPost: function _maybeCreateOneOnOneThenPost(params, options) {\n    var _this21 = this;\n\n    return this.get((0, _defaults3.default)({\n      // the use of uniq in Conversation#create guarantees participant[1] will\n      // always be the other user\n      user: params.participants[1]\n    }), (0, _assign2.default)(options, {\n      includeConvWithDeletedUserUUID: true,\n      includeParticipants: true\n    })).then(function (conversation) {\n      if (params.comment || params.html) {\n        return _this21.post(conversation, {\n          content: params.html,\n          displayName: params.comment\n        }).then(function (activity) {\n          conversation.activities.items.push(activity);\n          return conversation;\n        });\n      }\n\n      return conversation;\n    }).catch(function (reason) {\n      if (reason.statusCode !== 404) {\n        return _promise2.default.reject(reason);\n      }\n\n      return _this21._createOneOnOne(params);\n    });\n  },\n\n  /**\n   * @param {Object} params\n   * @private\n   * @returns {Object}\n   */\n  _prepareConversationForCreation: function _prepareConversationForCreation(params) {\n    var _this22 = this;\n\n    var payload = {\n      activities: {\n        items: [this.expand('create')]\n      },\n      objectType: 'conversation',\n      kmsMessage: {\n        method: 'create',\n        uri: '/resources',\n        userIds: (0, _cloneDeep3.default)(params.participants),\n        keyUris: []\n      }\n    };\n\n    if (params.displayName) {\n      payload.displayName = params.displayName;\n    }\n\n    params.participants.forEach(function (participant) {\n      payload.activities.items.push(_this22.expand('add', {\n        objectType: 'person',\n        id: participant\n      }));\n    });\n\n    if (params.comment) {\n      payload.activities.items.push(this.expand('post', {\n        objectType: 'comment',\n        content: params.html,\n        displayName: params.comment\n      }));\n    }\n\n    return payload;\n  },\n\n  /**\n   * @param {Object} conversation\n   * @private\n   * @returns {Promise}\n   */\n  _recordUUIDs: function _recordUUIDs(conversation) {\n    var _this23 = this;\n\n    if (!conversation.participants || !conversation.participants.items) {\n      return _promise2.default.resolve(conversation);\n    }\n\n    return _promise2.default.all(conversation.participants.items.map(function (participant) {\n      // ROOMs or LYRA_SPACEs do not have email addresses, so there's no point attempting to\n      // record their UUIDs.\n      if (participant.type === 'ROOM' || participant.type === 'LYRA_SPACE') {\n        return _promise2.default.resolve();\n      }\n\n      return _this23.webex.internal.user.recordUUID(participant).catch(function (err) {\n        return _this23.logger.warn('Could not record uuid', err);\n      });\n    }));\n  },\n  version: '1.80.172'\n});\n\n['favorite', 'hide', 'lock', 'mute', 'unfavorite', 'unhide', 'unlock', 'unmute'].forEach(function (verb) {\n  Conversation.prototype[verb] = function submitSimpleActivity(conversation, activity) {\n    var _this24 = this;\n\n    var convoWithUrl = this.prepareConversation((0, _assign2.default)({}, conversation, {\n      url: this.getConvoUrl(conversation)\n    }));\n    return this.prepare(activity, {\n      verb: verb,\n      object: convoWithUrl,\n      target: convoWithUrl\n    }).then(function (a) {\n      return _this24.submit(a);\n    });\n  };\n});\n['assignModerator', 'unassignModerator'].forEach(function (verb) {\n  Conversation.prototype[verb] = function submitModerationChangeActivity(conversation, moderator, activity) {\n    var _this25 = this;\n\n    var convoWithUrl = (0, _assign2.default)({}, conversation, {\n      url: this.getConvoUrl(conversation)\n    });\n    return _promise2.default.all([convoWithUrl, moderator ? this.webex.internal.user.asUUID(moderator) : this.webex.internal.device.userId]).then(function (_ref6) {\n      var _ref7 = (0, _slicedToArray3.default)(_ref6, 2),\n          c = _ref7[0],\n          userId = _ref7[1];\n\n      return _this25.prepare(activity, {\n        verb: verb,\n        target: _this25.prepareConversation(c),\n        object: {\n          id: userId,\n          objectType: 'person'\n        }\n      });\n    }).then(function (a) {\n      return _this25.submit(a);\n    });\n  };\n});\n/**\n * Sets/unsets space property for convo\n * @param {Object} conversation\n * @param {string} tag\n * @param {Activity} activity\n * @returns {Promise<Activity>}\n */\n\n['setSpaceProperty', 'unsetSpaceProperty'].forEach(function (fnName) {\n  var verb = fnName.startsWith('set') ? 'set' : 'unset';\n\n  Conversation.prototype[fnName] = function submitSpacePropertyActivity(conversation, tag, activity) {\n    var _this26 = this;\n\n    if (!(0, _isString3.default)(tag)) {\n      return _promise2.default.reject(new Error('`tag` must be a string'));\n    }\n\n    var convoWithUrl = (0, _assign2.default)({}, conversation, {\n      url: this.getConvoUrl(conversation)\n    });\n    return this.prepare(activity, {\n      verb: verb,\n      target: this.prepareConversation(convoWithUrl),\n      object: {\n        tags: [tag],\n        objectType: 'spaceProperty'\n      }\n    }).then(function (a) {\n      return _this26.submit(a);\n    });\n  };\n});\n['tag', 'untag'].forEach(function (verb) {\n  Conversation.prototype[verb] = function submitObjectActivity(conversation, object, activity) {\n    var _this27 = this;\n\n    if (!(0, _isObject3.default)(object)) {\n      return _promise2.default.reject(new Error('`object` must be an object'));\n    }\n\n    var c = this.prepareConversation((0, _assign2.default)({}, conversation, {\n      url: this.getConvoUrl(conversation)\n    }));\n    return this.prepare(activity, {\n      verb: verb,\n      target: c,\n      object: (0, _assign2.default)(c, object)\n    }).then(function (a) {\n      return _this27.submit(a);\n    });\n  };\n});\nexports.default = Conversation;","map":{"version":3,"sources":["conversation.js"],"names":["DEFAULT_CLUSTER","process","idToUrl","getConvoLimit","options","limit","value","name","Conversation","namespace","getUrlFromClusterId","cluster","id","clusterId","url","Error","acknowledge","convoWithUrl","verb","target","object","objectType","add","create","kmsMessage","method","uri","resourceUri","userIds","params","participants","validParticipants","InvalidUserCreation","c","delete","download","isEncrypted","Boolean","item","shunt","EventEmitter","promise","args","file","_downloadUnencryptedFile","responseType","res","expand","activity","actor","bulkActivitiesFetch","resource","body","activityUrls","api","activitiesArr","statusData","get","user","conversation","qs","uuidEntryFormat","personRefresh","activitiesLimit","includeConvWithDeletedUserUUID","includeParticipants","service","userId","leave","participant","querystring","authId","list","deferDecrypt","convo","listLeft","listActivities","listMentions","muteMentions","tags","muteMessages","cardAction","parentActivity","type","post","message","displayName","prepareConversation","prepare","clientTempId","uuid","act","processActivityEvent","removeAllMuteTags","makeShare","ShareActivity","assign","avatar","a","getConvoUrl","conversations","generalConversationUuid","generalConvo","relatedUrl","updateTypingStatus","eventType","conversationId","share","files","submit","endpoint","transcode","async","customActivityCopy","copySrc","cloneActivity","error","KEY_ROTATION_REQUIRED","KEY_ALREADY_ROTATED","ENCRYPTION_KEY_URL_MISMATCH","unassign","items","unmuteMentions","unmuteMessages","update","updateKey","_updateKey","key","count","k","keys","defaultActivityEncryptionKeyUrl","keyUris","_create","forceCreate","allowPartialCreation","_createGrouped","_createOneOnOne","payload","getConversationUrl","convoUrl","_inferConversationUrl","_listActivities","_list","participantsLimit","Math","results","host","newOptions","result","_maybeCreateOneOnOneThenPost","content","reason","_prepareConversationForCreation","activities","comment","_recordUUIDs","moderator","fnName"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport querystring from 'querystring';\nimport {EventEmitter} from 'events';\n\nimport {proxyEvents, tap} from '@webex/common';\nimport {WebexPlugin} from '@webex/webex-core';\nimport {cloneDeep, cloneDeepWith, defaults, isArray, isObject, isString, last, map, merge, omit, pick, uniq} from 'lodash';\nimport {readExifData} from '@webex/helper-image';\nimport uuid from 'uuid';\n\nimport {InvalidUserCreation} from './convo-error';\nimport ShareActivity from './share-activity';\nimport {KEY_ROTATION_REQUIRED, KEY_ALREADY_ROTATED, ENCRYPTION_KEY_URL_MISMATCH} from './constants';\n\nconst DEFAULT_CLUSTER =\n  process.env.WEBEX_CONVERSATION_DEFAULT_CLUSTER ||\n  'urn:TEAM:us-east-2_a:identityLookup';\n\nconst idToUrl = new Map();\n\nconst getConvoLimit = (options = {}) => {\n  let limit;\n\n  if (options.conversationsLimit) {\n    limit = {\n      value: options.conversationsLimit,\n      name: 'conversationsLimit'\n    };\n  }\n\n  return limit;\n};\n\nconst Conversation = WebexPlugin.extend({\n  namespace: 'Conversation',\n\n  /**\n   * @param {String} cluster the cluster containing the id\n   * @param {UUID} [id] the id of the conversation.\n   *  If empty, just return the base URL.\n   * @returns {String} url of the conversation\n   */\n  getUrlFromClusterId({cluster = 'us', id} = {}) {\n    const clusterId =\n      cluster === 'us' ? DEFAULT_CLUSTER : cluster;\n\n    const {url} = this.webex.internal.services\n      .getServiceFromClusterId({clusterId}) || {};\n\n    if (!url) {\n      throw Error(`Could not find service for cluster [${cluster}]`);\n    }\n\n    return id ? `${url}/conversations/${id}` : url;\n  },\n\n  /**\n   * @param {Object} conversation\n   * @param {Object} object\n   * @param {Object} activity\n   * @returns {Promise}\n   */\n  acknowledge(conversation, object, activity) {\n    const url = this.getConvoUrl(conversation);\n    const convoWithUrl = Object.assign({}, conversation, {url});\n\n    if (!isObject(object)) {\n      return Promise.reject(new Error('`object` must be an object'));\n    }\n\n    return this.prepare(activity, {\n      verb: 'acknowledge',\n      target: this.prepareConversation(convoWithUrl),\n      object: {\n        objectType: 'activity',\n        id: object.id,\n        url: object.url\n      }\n    })\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Adds a participant to a conversation\n   * @param {Object} conversation\n   * @param {Object|string} participant\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @returns {Promise<Activity>}\n   */\n  add(conversation, participant, activity) {\n    const url = this.getConvoUrl(conversation);\n    const convoWithUrl = Object.assign({}, conversation, {url});\n\n    return this.webex.internal.user.asUUID(participant, {create: true})\n      .then((id) => this.prepare(activity, {\n        verb: 'add',\n        target: this.prepareConversation(convoWithUrl),\n        object: {\n          id,\n          objectType: 'person'\n        },\n        kmsMessage: {\n          method: 'create',\n          uri: '/authorizations',\n          resourceUri: '<KRO>',\n          userIds: [\n            id\n          ]\n        }\n      })\n        .then((a) => this.submit(a)));\n  },\n\n  /**\n   * Creates a conversation\n   * @param {Object} params\n   * @param {Array<Participant>} params.participants\n   * @param {Array<File>} params.files\n   * @param {string} params.comment\n   * @param {string} params.html\n   * @param {Object} params.displayName\n   * @param {Object} options\n   * @param {Boolean} options.allowPartialCreation\n   * @param {Boolean} options.forceGrouped\n   * @param {Boolean} options.skipOneOnOneFetch skips checking 1:1 exists before creating conversation\n   * @returns {Promise<Conversation>}\n   */\n  create(params, options = {}) {\n    if (!params.participants || params.participants.length === 0) {\n      return Promise.reject(new Error('`params.participants` is required'));\n    }\n\n    return Promise.all(params.participants.map((participant) => this.webex.internal.user.asUUID(participant, {create: true})\n      // eslint-disable-next-line arrow-body-style\n      .catch((err) => {\n        return options.allowPartialCreation ? undefined : Promise.reject(err);\n      })))\n      .then((participants) => {\n        participants.unshift(this.webex.internal.device.userId);\n        participants = uniq(participants);\n\n        const validParticipants = participants.filter((participant) => participant);\n\n        params.participants = validParticipants;\n\n        // check if original participants list was to create a 1:1\n        if (participants.length === 2 && !(options && options.forceGrouped)) {\n          if (!params.participants[1]) {\n            return Promise.reject(new InvalidUserCreation());\n          }\n\n          if (options.skipOneOnOneFetch) {\n            return this._createOneOnOne(params);\n          }\n\n          return this._maybeCreateOneOnOneThenPost(params, options);\n        }\n\n        return this._createGrouped(params, options);\n      })\n      .then((c) => {\n        idToUrl.set(c.id, c.url);\n\n        if (!params.files) {\n          return c;\n        }\n\n        return this.webex.internal.conversation.share(c, params.files)\n          .then((a) => {\n            c.activities.items.push(a);\n\n            return c;\n          });\n      });\n  },\n\n  /**\n   * delete content\n   * @param {Object} conversation\n   * @param {Object} object\n   * @param {Object} activity\n   * @returns {Promise}\n   */\n  delete(conversation, object, activity) {\n    const url = this.getConvoUrl(conversation);\n    const convoWithUrl = Object.assign({}, conversation, {url});\n\n    if (!isObject(object)) {\n      return Promise.reject(new Error('`object` must be an object'));\n    }\n\n    return this.prepare(activity, {\n      verb: 'delete',\n      target: this.prepareConversation(convoWithUrl),\n      object: pick(object, 'id', 'url', 'objectType')\n    })\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Downloads the file specified in item.scr or item.url\n   * @param {Object} item\n   * @param {Object} item.scr\n   * @param {string} item.url\n   * @param {Object} options\n   * @param {Object} options.headers\n   * @returns {Promise<File>}\n   */\n  download(item, options) {\n    const isEncrypted = Boolean(item.scr && item.scr.key);\n    const shunt = new EventEmitter();\n    let promise;\n\n    if (isEncrypted) {\n      promise = this.webex.internal.encryption.download(item.scr, item.options);\n    }\n    else if (item.scr && item.scr.loc) {\n      promise = this._downloadUnencryptedFile(item.scr.loc, options);\n    }\n    else {\n      promise = this._downloadUnencryptedFile(item.url, options);\n    }\n\n    promise = promise\n      .on('progress', (...args) => shunt.emit('progress', ...args))\n      .then((res) => readExifData(item, res))\n      .then((file) => {\n        this.logger.info('conversation: file downloaded');\n\n        if (item.displayName && !file.name) {\n          file.name = item.displayName;\n        }\n\n        if (!file.type && item.mimeType) {\n          file.type = item.mimeType;\n        }\n\n        return file;\n      });\n\n    proxyEvents(shunt, promise);\n\n    return promise;\n  },\n\n  /**\n   * Downloads an unencrypted file\n   * @param {string} uri\n   * @param {Object} options\n   * @param {Ojbect} options.headers\n   * @returns {Promise<File>}\n   */\n  _downloadUnencryptedFile(uri, options = {}) {\n    Object.assign(options, {\n      uri,\n      responseType: 'buffer'\n    });\n\n    const promise = this.request(options)\n      .then((res) => res.body);\n\n    proxyEvents(options.download, promise);\n\n    return promise;\n  },\n\n  /**\n   * Helper method that expands a set of parameters into an activty object\n   * @param {string} verb\n   * @param {Object} object\n   * @param {Object} target\n   * @param {Object|string} actor\n   * @returns {Object}\n   */\n  expand(verb, object, target, actor) {\n    const activity = {\n      actor,\n      objectType: 'activity',\n      verb\n    };\n\n    if (!actor) {\n      actor = this.webex.internal.device.userId;\n    }\n\n    if (isString(actor)) {\n      activity.actor = {\n        objectType: 'person',\n        id: actor\n      };\n    }\n\n    if (object) {\n      activity.object = object;\n    }\n\n    if (target) {\n      activity.target = target;\n    }\n\n    return activity;\n  },\n\n  /**\n  * Gets an array of activities with an array of activity URLS\n  * @param {Array} activityUrls\n  * @param {String} [cluster] cluster where the activities are located\n  * @returns {Promise<Object>} Resolves with the activities\n  * TODO: add cluster functionality when clusters are ready\n  */\n  bulkActivitiesFetch(activityUrls, cluster) {\n    const resource = 'bulk_activities_fetch';\n    const params = {\n      method: 'POST',\n      body: {\n        activityUrls\n      }\n    };\n\n    if (cluster) {\n      const uri = `${this.getUrlFromClusterId({cluster})}/${resource}`;\n\n      Object.assign(params, {\n        uri\n      });\n    }\n    else {\n      Object.assign(params, {\n        api: 'conversation',\n        resource\n      });\n    }\n\n    return this.webex.request(params)\n      .then((res) => {\n        const activitiesArr = [];\n\n        if (res.body.multistatus) {\n          res.body.multistatus.forEach((statusData) => {\n            if (statusData.status === '200' && statusData.data && statusData.data.activity) {\n              activitiesArr.push(statusData.data.activity);\n            }\n          });\n        }\n\n        return activitiesArr;\n      });\n  },\n\n  /**\n   * Fetches a single conversation\n   * @param {Object} conversation\n   * @param {String} [conversation.url] The URL where the conversation is located.\n   * @param {String|UUID} [conversation.user] The user to look up in the conversation service\n   *   If specified, the user lookup will take precedence over the url lookup\n   * @param {Object} options\n   * @returns {Promise<Conversation>}\n   */\n  get(conversation, options = {}) {\n    const {user} = conversation;\n    let uri;\n\n    try {\n      uri = !user ? this.getConvoUrl(conversation) : '';\n    }\n    catch (err) {\n      return Promise.reject(Error(err));\n    }\n\n    const params = {\n      qs: Object.assign({\n        uuidEntryFormat: true,\n        personRefresh: true,\n        activitiesLimit: 0,\n        includeConvWithDeletedUserUUID: false,\n        includeParticipants: false\n      }, omit(options, 'id', 'user', 'url'))\n    };\n\n    // Default behavior is to set includeParticipants=false,\n    // which makes the payload lighter by removing participant info.\n    // If the caller explicitly sets the participantAckFilter or\n    // participantsLimit, we don't want that default setting.\n    if (('participantAckFilter' in options) || ('participantsLimit' in options)) {\n      delete params.qs.includeParticipants;\n    }\n\n    return Promise.resolve(user ? this.webex.internal.user.asUUID(user) : null)\n      .then((userId) => {\n        if (userId) {\n          Object.assign(params, {\n            service: 'conversation',\n            resource: `conversations/user/${userId}`\n          });\n        }\n        else {\n          params.uri = uri;\n        }\n\n        return this.request(params);\n      })\n      .then(tap(({body}) => {\n        const {id, url} = body;\n\n        this._recordUUIDs(body);\n        idToUrl.set(id, url);\n      }))\n      .then((res) => res.body);\n  },\n\n  /**\n   * Leaves the conversation or removes the specified user from the specified\n   * conversation\n   * @param {Object} conversation\n   * @param {Object|string} participant If not specified, defaults to current\n   * user\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @returns {Promise<Activity>}\n   */\n  leave(conversation, participant, activity) {\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return Promise.resolve()\n      .then(() => {\n        if (!participant) {\n          participant = this.webex.internal.device.userId;\n        }\n\n        return this.webex.internal.user.asUUID(participant)\n          .then((id) => this.prepare(activity, {\n            verb: 'leave',\n            target: this.prepareConversation(convoWithUrl),\n            object: {\n              id,\n              objectType: 'person'\n            },\n            kmsMessage: {\n              method: 'delete',\n              uri: `<KRO>/authorizations?${querystring.stringify({authId: id})}`\n            }\n          }));\n      })\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Lists a set of conversations. By default does not fetch activities or\n   * participants\n   * @param {Object} options\n   * @param {boolean} options.deferDecrypt - when true, deferDecrypt tells the\n   * payload transformer to normalize (but not decrypt) each received\n   * conversation. Instead, the received conversations will each have a bound\n   * decrypt method that can be executed at the consumer's leisure\n   * @returns {Promise<Array<Conversation>>}\n   */\n  list(options = {}) {\n    return this._list({\n      service: 'conversation',\n      resource: 'conversations',\n      qs: omit(options, 'deferDecrypt'),\n      deferDecrypt: options.deferDecrypt,\n      limit: getConvoLimit(options)\n    })\n      .then((results) => {\n        for (const convo of results) {\n          idToUrl.set(convo.id, convo.url);\n        }\n\n        return results;\n      });\n  },\n\n  /**\n   * Lists the conversations the current user has left. By default does not\n   * fetch activities or participants\n   * @param {Object} options\n   * @returns {Promise<Array<Conversation>>}\n   */\n  listLeft(options) {\n    return this._list({\n      service: 'conversation',\n      resource: 'conversations/left',\n      qs: options,\n      limit: getConvoLimit(options)\n    })\n      .then((results) => {\n        for (const convo of results) {\n          idToUrl.set(convo.id, convo.url);\n        }\n\n        return results;\n      });\n  },\n\n  /**\n   * List activities for the specified conversation\n   * @param {Object} options\n   * @param {String} options.conversationUrl URL to the conversation\n   * @returns {Promise<Array<Activity>>}\n   */\n  listActivities(options) {\n    return this._listActivities(Object.assign(options, {resource: 'activities'}));\n  },\n\n  /**\n   * Lists activities in which the current user was mentioned\n   * @param {Object} options\n   * @returns {Promise<Array<Activity>>}\n   */\n  listMentions(options) {\n    return this._list({\n      service: 'conversation',\n      resource: 'mentions',\n      qs: omit(options, 'mentions')\n    });\n  },\n\n  /**\n   * Mutes the mentions of a conversation\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  muteMentions(conversation, activity) {\n    return this.tag(conversation, {\n      tags: ['MENTION_NOTIFICATIONS_OFF']\n    }, activity);\n  },\n\n  /**\n   * Mutes the messages of a conversation\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  muteMessages(conversation, activity) {\n    return this.tag(conversation, {\n      tags: ['MESSAGE_NOTIFICATIONS_OFF']\n    }, activity);\n  },\n\n  /**\n   * @param {Object} conversation\n   * @param {Object} inputs\n   * @param {Object} parentActivity\n   * @param {Object} activity\n   * @returns {Promise}\n   */\n  cardAction(conversation, inputs, parentActivity, activity = {}) {\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    activity.parent = {\n      id: parentActivity.id,\n      type: 'cardAction'\n    };\n\n    return this.prepare(activity, {\n      verb: 'cardAction',\n      target: this.prepareConversation(convoWithUrl),\n      object: Object.assign({objectType: 'submit'}, inputs)\n    })\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Posts a message to a conversation\n   * @param {Object} conversation\n   * @param {Object|string} message if string, treated as plaintext; if object,\n   * assumed to be object property of `post` activity\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @returns {Promise<Activity>}\n   */\n  post(conversation, message, activity) {\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    if (isString(message)) {\n      message = {\n        displayName: message\n      };\n    }\n\n    return this.prepare(activity, {\n      verb: 'post',\n      target: this.prepareConversation(convoWithUrl),\n      object: Object.assign({objectType: 'comment'}, message)\n    })\n      .then((a) => this.submit(a));\n  },\n\n  prepareConversation(conversation) {\n    return defaults(pick(conversation, 'id', 'url', 'objectType', 'defaultActivityEncryptionKeyUrl', 'kmsResourceObjectUrl'), {\n      objectType: 'conversation'\n    });\n  },\n\n  prepare(activity, params) {\n    params = params || {};\n    activity = activity || {};\n\n    return Promise.resolve(activity.prepare ? activity.prepare(params) : activity)\n      .then((act) => {\n        defaults(act, {\n          verb: params.verb,\n          kmsMessage: params.kmsMessage,\n          objectType: 'activity',\n          clientTempId: uuid.v4(),\n          actor: this.webex.internal.device.userId\n        });\n\n        // Workaround because parent is a reserved props in Ampersand\n        if ((activity.parentActivityId && activity.activityType) || (activity.parent && activity.parent.id && activity.parent.type)) {\n          act.parent = {\n            id: activity.parentActivityId || activity.parent.id,\n            type: activity.activityType || activity.parent.type\n          };\n        }\n\n        if (isString(act.actor)) {\n          act.actor = {\n            objectType: 'person',\n            id: act.actor\n          };\n        }\n\n        ['actor', 'object'].forEach((key) => {\n          if (params[key]) {\n            act[key] = act[key] || {};\n            defaults(act[key], params[key]);\n          }\n        });\n\n        if (params.target) {\n          merge(act, {\n            target: pick(params.target, 'id', 'url', 'objectType', 'kmsResourceObjectUrl', 'defaultActivityEncryptionKeyUrl')\n          });\n        }\n\n        ['object', 'target'].forEach((key) => {\n          if (act[key] && act[key].url && !act[key].id) {\n            act[key].id = act[key].url.split('/').pop();\n          }\n        });\n\n        ['actor', 'object', 'target'].forEach((key) => {\n          if (act[key] && !act[key].objectType) {\n            // Reminder: throwing here because it's the only way to get out of\n            // this loop in event of an error.\n            throw new Error(`\\`act.${key}.objectType\\` must be defined`);\n          }\n        });\n\n        if (act.object && act.object.content && !act.object.displayName) {\n          return Promise.reject(new Error('Cannot submit activity object with `content` but no `displayName`'));\n        }\n\n        return act;\n      });\n  },\n\n  /**\n   * Handles incoming conversation.activity mercury messages\n   * @param {Event} event\n   * @returns {Promise}\n   */\n  processActivityEvent(event) {\n    return this.webex.transform('inbound', event)\n      .then(() => event);\n  },\n\n  /**\n   * Removes all mute-related tags\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  removeAllMuteTags(conversation, activity) {\n    return this.untag(conversation, {\n      tags: [\n        'MENTION_NOTIFICATIONS_OFF',\n        'MENTION_NOTIFICATIONS_ON',\n        'MESSAGE_NOTIFICATIONS_OFF',\n        'MESSAGE_NOTIFICATIONS_ON'\n      ]\n    }, activity);\n  },\n\n  /**\n   * Creates a ShareActivty for the specified conversation\n   * @param {Object} conversation\n   * @param {Object} activity\n   * @returns {ShareActivty}\n   */\n  makeShare(conversation, activity) {\n    // if we pass activity as null then it does not take care of the\n    // clientTempId created by the web-client while making the provisional\n    // activity, hence we need to pass the activity which was created by the\n    // web-client. This fixes the issue where the image activities do not come\n    // back properly oriented from the server since the clientTempId is missing\n    return ShareActivity.create(conversation, activity, this.webex);\n  },\n\n  /**\n   * Assigns an avatar to a room\n   * @param {Object} conversation\n   * @param {File} avatar\n   * @returns {Promise<Activity>}\n   */\n  assign(conversation, avatar) {\n    if ((avatar.size || avatar.length) > 1024 * 1024) {\n      return Promise.reject(new Error('Room avatars must be less than 1MB'));\n    }\n\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return Promise.resolve()\n      .then(() => {\n        const activity = ShareActivity.create(conversation, null, this.webex);\n\n        activity.enableThumbnails = false;\n        activity.add(avatar);\n\n        return this.prepare(activity, {\n          target: this.prepareConversation(convoWithUrl)\n        });\n      })\n      .then((a) => {\n        // yes, this seems a little hacky; will likely be resolved as a result\n        // of #213\n        a.verb = 'assign';\n\n        return this.submit(a);\n      });\n  },\n\n  /**\n   * Get url from convo object. If there isn't one, get it from the cache\n   *\n   * @param {String} url The location of the conversation\n   * @param {UUID} id If there is no url, fall back to id to lookup in cache or with cluster\n   * @param {String} cluster Used with id to lookup url\n   * @param {UUID} generalConversationUuid If this is a team, the id of the general conversation\n   * @param {Object} conversations If this is a team, the list of conversations in the team\n   * @returns {String} url for the specific convo\n   */\n  getConvoUrl({\n    id, url, cluster, conversations, generalConversationUuid\n  }) {\n    if (generalConversationUuid) {\n      // This is a Team\n      // Because Convo doesn't have an endpoint for the team URL\n      // we have to use the general convo URL.\n      const generalConvo = conversations.items.find(\n        (convo) => convo.id === generalConversationUuid\n      );\n\n      return generalConvo.url;\n    }\n\n    if (url) {\n      return url;\n    }\n\n    if (id) {\n      if (cluster) {\n        return this.getUrlFromClusterId({cluster, id});\n      }\n      this.logger.warn(\n        'You should be using the `url` instead of the `id` property'\n      );\n      const relatedUrl = idToUrl.get(id);\n\n      if (!relatedUrl) {\n        throw Error('Could not find the `url` from the given `id`');\n      }\n\n      return relatedUrl;\n    }\n\n    throw Error('The space needs a `url` property');\n  },\n\n  /**\n   * Sets the typing status of the current user in a conversation\n   *\n   * @param {Object} conversation\n   * @param {Object} options\n   * @param {boolean} options.typing\n   * @returns {Promise}\n   */\n  updateTypingStatus(conversation, options) {\n    if (!conversation.id) {\n      if (conversation.url) {\n        conversation.id = conversation.url.split('/').pop();\n      }\n      else {\n        return Promise.reject(\n          new Error('conversation: could not identify conversation')\n        );\n      }\n    }\n\n    let eventType;\n\n    if (options.typing) {\n      eventType = 'status.start_typing';\n    }\n    else {\n      eventType = 'status.stop_typing';\n    }\n\n    const url = this.getConvoUrl(conversation);\n    const resource = 'status/typing';\n    const params = {\n      method: 'POST',\n      body: {\n        conversationId: conversation.id,\n        eventType\n      },\n      url: `${url}/${resource}`\n    };\n\n    return this.request(params);\n  },\n\n  /**\n   * Shares files to the specified conversation\n   * @param {Object} conversation\n   * @param {ShareActivity|Array<File>} activity\n   * @returns {Promise<Activity>}\n   */\n  share(conversation, activity) {\n    if (isArray(activity)) {\n      activity = {\n        object: {\n          files: activity\n        }\n      };\n    }\n\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    if (!(activity instanceof ShareActivity)) {\n      activity = ShareActivity.create(convoWithUrl, activity, this.webex);\n    }\n\n    return this.prepare(activity, {\n      target: this.prepareConversation(convoWithUrl)\n    })\n      .then((a) => this.submit(a));\n  },\n\n\n  /**\n   * Submits an activity to the conversation service\n   * @param {Object} activity\n   * @param {String} [endpoint] endpoint to submit activity. If empty, find in activity\n   * @returns {Promise<Activity>}\n   */\n  submit(activity, endpoint) {\n    const url = endpoint || this.getConvoUrl(activity.target);\n    const resource = activity.verb === 'share' ? 'content' : 'activities';\n    const params = {\n      method: 'POST',\n      body: activity,\n      qs: {\n        personRefresh: true\n      },\n      url: `${url}/${resource}`\n    };\n\n    if (activity.verb === 'share') {\n      Object.assign(params.qs, {\n        transcode: true,\n        async: false\n      });\n    }\n    /**\n   * helper to cloneDeepWith for copying instance function\n   * @param {Object|String|Symbol|Array|Date} value (recursive value to clone from params)\n   * @returns {Object|null}\n   */\n    // eslint-disable-next-line consistent-return\n    const customActivityCopy = (value) => {\n      const {files} = params.body.object;\n\n      if (files && value && files.items.length > 0 && value.constructor === files.items[0].scr.constructor) {\n        const copySrc = cloneDeep(value);\n\n        copySrc.toJWE = value.toJWE;\n        copySrc.toJSON = value.toJSON;\n\n        return copySrc;\n      }\n    };\n    const cloneActivity = cloneDeepWith(params, customActivityCopy);\n\n    // triggers user-activity to reset logout timer\n    this.webex.trigger('user-activity');\n\n    return this.request(params)\n      .then((res) => res.body)\n      .catch((error) => {\n        // handle when key need to rotate\n        if (error.body && error.body.errorCode === KEY_ROTATION_REQUIRED) {\n          cloneActivity.body.target.defaultActivityEncryptionKeyUrl = null;\n          this.request(cloneActivity);\n        }\n        else if (\n          error.body &&\n    (error.body.errorCode === KEY_ALREADY_ROTATED || error.body.errorCode === ENCRYPTION_KEY_URL_MISMATCH)\n        ) {\n          // handle when key need to update\n          this.webex.request({\n            method: 'GET',\n            api: 'conversation',\n            resource: `conversations/${params.body.target.id}`\n          }).then((res) => {\n            cloneActivity.body.target.defaultActivityEncryptionKeyUrl = res.body.defaultActivityEncryptionkeyUrl;\n            this.request(cloneActivity);\n          });\n        }\n        else {\n          throw error;\n        }\n      });\n  },\n  /**\n   * Remove the avatar from a room\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise}\n   */\n  unassign(conversation, activity) {\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return this.prepare(activity, {\n      verb: 'unassign',\n      target: this.prepareConversation(convoWithUrl),\n      object: {\n        objectType: 'content',\n        files: {\n          items: []\n        }\n      }\n    })\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Mutes the mentions of a conversation\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  unmuteMentions(conversation, activity) {\n    return this.tag(conversation, {\n      tags: ['MENTION_NOTIFICATIONS_ON']\n    }, activity);\n  },\n\n  /**\n   * Mutes the messages of a conversation\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  unmuteMessages(conversation, activity) {\n    return this.tag(conversation, {\n      tags: ['MESSAGE_NOTIFICATIONS_ON']\n    }, activity);\n  },\n\n  /**\n   * Update an existing activity\n   * @param {Object} conversation\n   * @param {Object} object\n   * @param {Object} activity\n   * @returns {Promise}\n   */\n  update(conversation, object, activity) {\n    if (!isObject(object)) {\n      return Promise.reject(new Error('`object` must be an object'));\n    }\n\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return this.prepare(activity, {\n      verb: 'update',\n      target: this.prepareConversation(convoWithUrl),\n      object\n    })\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Sets a new key for the conversation\n   * @param {Object} conversation\n   * @param {Key|string} key (optional)\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @returns {Promise<Activity>}\n   */\n  updateKey(conversation, key, activity) {\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return this.get(convoWithUrl, {\n      activitiesLimit: 0,\n      includeParticipants: true\n    })\n      .then((c) => this._updateKey(c, key, activity));\n  },\n\n  /**\n   * Sets a new key for the conversation\n   * @param {Object} conversation\n   * @param {Key|string} key (optional)\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @private\n   * @returns {Promise<Activity>}\n   */\n  _updateKey(conversation, key, activity) {\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return Promise.resolve(\n      key || this.webex.internal.encryption.kms.createUnboundKeys({count: 1})\n    )\n      .then((keys) => {\n        const k = isArray(keys) ? keys[0] : keys;\n        const params = {\n          verb: 'updateKey',\n          target: this.prepareConversation(convoWithUrl),\n          object: {\n            defaultActivityEncryptionKeyUrl: k.uri,\n            objectType: 'conversation'\n          }\n        };\n\n        // Reminder: the kmsResourceObjectUrl is only usable if there is\n        // defaultActivityEncryptionKeyUrl.\n        // Valid defaultActivityEncryptionKeyUrl start with 'kms:'\n        if (\n          convoWithUrl.kmsResourceObjectUrl &&\n          convoWithUrl.kmsResourceObjectUrl.startsWith('kms:')\n        ) {\n          params.kmsMessage = {\n            method: 'update',\n            resourceUri: '<KRO>',\n            uri: k.uri\n          };\n        }\n        else {\n          params.kmsMessage = {\n            method: 'create',\n            uri: '/resources',\n            userIds: map(convoWithUrl.participants.items, 'id'),\n            keyUris: [\n              k.uri\n            ]\n          };\n        }\n\n        return this.prepare(activity, params)\n          .then((a) => this.submit(a));\n      });\n  },\n\n  /**\n   * @param {Object} payload\n   * @param {Object} options\n   * @private\n   * @returns {Promise<Activity>}\n   */\n  _create(payload, options = {}) {\n    return this.request({\n      method: 'POST',\n      service: 'conversation',\n      resource: 'conversations',\n      body: payload,\n      qs: {\n        forceCreate: options.allowPartialCreation\n      }\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * @param {Object} params\n   * @param {Object} options\n   * @private\n   * @returns {Promise}\n   */\n  _createGrouped(params, options) {\n    return this._create(this._prepareConversationForCreation(params), options);\n  },\n\n  /**\n   * @param {Object} params\n   * @param {Object} options\n   * @private\n   * @returns {Promise}\n   */\n  _createOneOnOne(params) {\n    const payload = this._prepareConversationForCreation(params);\n\n    payload.tags = ['ONE_ON_ONE'];\n\n    return this._create(payload);\n  },\n\n  /**\n   * Get the current conversation url.\n   *\n   * @returns {Promise<string>} - conversation url\n   */\n  getConversationUrl() {\n    this.logger.info('conversation: getting the conversation service url');\n\n    const convoUrl = this.webex.internal.services.get('conversation');\n\n    // Validate if the conversation url exists in the services plugin and\n    // resolve with its value.\n    if (convoUrl) {\n      return Promise.resolve(convoUrl);\n    }\n\n    // Wait for the postauth catalog to update and then try to retrieve the\n    // conversation service url again.\n    return this.webex.internal.waitForCatalog('postauth')\n      .then(() => this.webex.internal.services.get('conversation'))\n      .catch((error) => {\n        this.logger.warn(\n          'conversation: unable to get conversation url',\n          error.message\n        );\n\n        return Promise.reject(error);\n      });\n  },\n\n  /**\n   * @param {Object} conversation\n   * @private\n   * @returns {Promise}\n   */\n  _inferConversationUrl(conversation) {\n    if (conversation.id) {\n      return this.webex.internal.feature.getFeature('developer', 'web-high-availability')\n        .then((haMessagingEnabled) => {\n          if (haMessagingEnabled) {\n            // recompute conversation URL each time as the host may have changed\n            // since last usage\n            return this.getConversationUrl()\n              .then((url) => {\n                conversation.url = `${url}/conversations/${conversation.id}`;\n\n                return conversation;\n              });\n          }\n          if (!conversation.url) {\n            return this.getConversationUrl()\n              .then((url) => {\n                conversation.url = `${url}/conversations/${conversation.id}`;\n                /* istanbul ignore else */\n                if (process.env.NODE_ENV !== 'production') {\n                  this.logger.warn('conversation: inferred conversation url from conversation id; please pass whole conversation objects to Conversation methods');\n                }\n\n                return conversation;\n              });\n          }\n\n          return Promise.resolve(conversation);\n        });\n    }\n\n    return Promise.resolve(conversation);\n  },\n\n  /**\n   * @param {Object} options\n   * @param {String} options.conversationUrl URL to the conversation\n   * @param {String} options.resource The URL resource to hit for a list of objects\n   * @private\n   * @returns {Promise<Array<Activity>>}\n   */\n  _listActivities(options) {\n    const id = options.conversationId;\n    const url = this.getConvoUrl({url: options.conversationUrl, id});\n    const {resource} = options;\n\n    return this._list({\n      qs: omit(options, 'resource'),\n      url: `${url}/${resource}`\n    });\n  },\n\n  /**\n   * @param {Object} options\n   * @private\n   * @returns {Promise<Array<Conversation>>}\n   */\n  async _list(options) {\n    options.qs = Object.assign({\n      personRefresh: true,\n      uuidEntryFormat: true,\n      activitiesLimit: 0,\n      participantsLimit: 0\n    }, options.qs);\n\n    const res = await this.request(options);\n\n    let list;\n\n    if (!res.body || !res.body.items || res.body.items.length === 0) {\n      list = [];\n    }\n    else {\n      list = res.body.items.slice(0);\n      if (last(list).published < list[0].published) {\n        list.reverse();\n      }\n    }\n\n    // The user has more data in another cluster.\n    // Follow the 'additionalUrls' for that data.\n    if (res.body.additionalUrls) {\n      let limit = 0;\n\n      // If the user asked for a specific amount of data,\n      // don't fetch more than what was asked.\n      // Here we figure out how much is left from the original request.\n      // Divide that by the number of additional URLS.\n      // This won't get us the exact limit but it will retrieve something\n      // from every cluster listed.\n      if (options.limit) {\n        limit = Math.floor(\n          (options.limit.value - list.length) / res.body.additionalUrls.length\n        );\n      }\n\n      // If the limit is 0 for some reason,\n      // don't bother requesting from other clusters\n      if (!options.limit || limit !== 0) {\n        const results = await Promise.all(\n          res.body.additionalUrls.map((host) => {\n            const url = `${host}/${options.resource}`;\n            const newOptions = Object.assign({}, options, {uri: url, url});\n\n            if (options.limit) {\n              newOptions.qs[newOptions.limit.name] = limit;\n            }\n\n            return this.request(newOptions);\n          })\n        );\n\n        for (const result of results) {\n          if (result.body && result.body.items && result.body.items.length) {\n            const {items} = result.body;\n\n            if (last(items).published < items[0].published) {\n              items.reverse();\n            }\n            list = list.concat(items);\n          }\n        }\n      }\n    }\n\n    await Promise.all(list.map((item) => this._recordUUIDs(item)));\n\n    return list;\n  },\n\n  /**\n   * @param {Object} params\n   * @param {Object} options\n   * @private\n   * @returns {Promise<Conversation>}\n   */\n  _maybeCreateOneOnOneThenPost(params, options) {\n    return this.get(defaults({\n      // the use of uniq in Conversation#create guarantees participant[1] will\n      // always be the other user\n      user: params.participants[1]\n    }), Object.assign(options, {includeConvWithDeletedUserUUID: true, includeParticipants: true}))\n      .then((conversation) => {\n        if (params.comment || params.html) {\n          return this.post(conversation, {content: params.html, displayName: params.comment})\n            .then((activity) => {\n              conversation.activities.items.push(activity);\n\n              return conversation;\n            });\n        }\n\n        return conversation;\n      })\n      .catch((reason) => {\n        if (reason.statusCode !== 404) {\n          return Promise.reject(reason);\n        }\n\n        return this._createOneOnOne(params);\n      });\n  },\n\n  /**\n   * @param {Object} params\n   * @private\n   * @returns {Object}\n   */\n  _prepareConversationForCreation(params) {\n    const payload = {\n      activities: {\n        items: [\n          this.expand('create')\n        ]\n      },\n      objectType: 'conversation',\n      kmsMessage: {\n        method: 'create',\n        uri: '/resources',\n        userIds: cloneDeep(params.participants),\n        keyUris: []\n      }\n    };\n\n    if (params.displayName) {\n      payload.displayName = params.displayName;\n    }\n\n    params.participants.forEach((participant) => {\n      payload.activities.items.push(this.expand('add', {\n        objectType: 'person',\n        id: participant\n      }));\n    });\n\n    if (params.comment) {\n      payload.activities.items.push(this.expand('post', {\n        objectType: 'comment',\n        content: params.html,\n        displayName: params.comment\n      }));\n    }\n\n    return payload;\n  },\n\n  /**\n   * @param {Object} conversation\n   * @private\n   * @returns {Promise}\n   */\n  _recordUUIDs(conversation) {\n    if (!conversation.participants || !conversation.participants.items) {\n      return Promise.resolve(conversation);\n    }\n\n    return Promise.all(conversation.participants.items.map((participant) => {\n      // ROOMs or LYRA_SPACEs do not have email addresses, so there's no point attempting to\n      // record their UUIDs.\n      if (participant.type === 'ROOM' || participant.type === 'LYRA_SPACE') {\n        return Promise.resolve();\n      }\n\n      return this.webex.internal.user.recordUUID(participant)\n        .catch((err) => this.logger.warn('Could not record uuid', err));\n    }));\n  }\n});\n\n[\n  'favorite',\n  'hide',\n  'lock',\n  'mute',\n  'unfavorite',\n  'unhide',\n  'unlock',\n  'unmute'\n].forEach((verb) => {\n  Conversation.prototype[verb] = function submitSimpleActivity(conversation, activity) {\n    const convoWithUrl =\n      this.prepareConversation(\n        Object.assign(\n          {}, conversation, {url: this.getConvoUrl(conversation)}\n        )\n      );\n\n    return this.prepare(activity, {\n      verb,\n      object: convoWithUrl,\n      target: convoWithUrl\n    })\n      .then((a) => this.submit(a));\n  };\n});\n\n[\n  'assignModerator',\n  'unassignModerator'\n].forEach((verb) => {\n  Conversation.prototype[verb] = function submitModerationChangeActivity(conversation, moderator, activity) {\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return Promise.all([\n      convoWithUrl,\n      moderator ? this.webex.internal.user.asUUID(moderator) : this.webex.internal.device.userId\n    ])\n      .then(([c, userId]) => this.prepare(activity, {\n        verb,\n        target: this.prepareConversation(c),\n        object: {\n          id: userId,\n          objectType: 'person'\n        }\n      }))\n      .then((a) => this.submit(a));\n  };\n});\n\n/**\n * Sets/unsets space property for convo\n * @param {Object} conversation\n * @param {string} tag\n * @param {Activity} activity\n * @returns {Promise<Activity>}\n */\n[\n  'setSpaceProperty',\n  'unsetSpaceProperty'\n].forEach((fnName) => {\n  const verb = fnName.startsWith('set') ? 'set' : 'unset';\n\n  Conversation.prototype[fnName] = function submitSpacePropertyActivity(conversation, tag, activity) {\n    if (!isString(tag)) {\n      return Promise.reject(new Error('`tag` must be a string'));\n    }\n\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return this.prepare(activity, {\n      verb,\n      target: this.prepareConversation(convoWithUrl),\n      object: {\n        tags: [tag],\n        objectType: 'spaceProperty'\n      }\n    })\n      .then((a) => this.submit(a));\n  };\n});\n\n[\n  'tag',\n  'untag'\n].forEach((verb) => {\n  Conversation.prototype[verb] = function submitObjectActivity(conversation, object, activity) {\n    if (!isObject(object)) {\n      return Promise.reject(new Error('`object` must be an object'));\n    }\n\n    const c =\n      this.prepareConversation(\n        Object.assign(\n          {}, conversation, {url: this.getConvoUrl(conversation)}\n        )\n      );\n\n    return this.prepare(activity, {\n      verb,\n      target: c,\n      object: Object.assign(c, object)\n    })\n      .then((a) => this.submit(a));\n  };\n});\n\nexport default Conversation;\n"]},"metadata":{},"sourceType":"script"}