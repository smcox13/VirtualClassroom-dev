{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC6960\r\n */\n\nexport default class ResponseBytes {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for ResponseBytes class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc responseType\r\n     */\n    this.responseType = getParametersValue(parameters, \"responseType\", ResponseBytes.defaultValues(\"responseType\"));\n    /**\r\n     * @type {OctetString}\r\n     * @desc response\r\n     */\n\n    this.response = getParametersValue(parameters, \"response\", ResponseBytes.defaultValues(\"response\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"responseType\":\n        return \"\";\n\n      case \"response\":\n        return new asn1js.OctetString();\n\n      default:\n        throw new Error(`Invalid member name for ResponseBytes class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"responseType\":\n        return memberValue === \"\";\n\n      case \"response\":\n        return memberValue.isEqual(ResponseBytes.defaultValues(memberName));\n\n      default:\n        throw new Error(`Invalid member name for ResponseBytes class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * ResponseBytes ::=       SEQUENCE {\r\n   *    responseType   OBJECT IDENTIFIER,\r\n   *    response       OCTET STRING }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [responseType]\r\n     * @property {string} [response]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.ObjectIdentifier({\n        name: names.responseType || \"\"\n      }), new asn1js.OctetString({\n        name: names.response || \"\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"responseType\", \"response\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, ResponseBytes.schema({\n      names: {\n        responseType: \"responseType\",\n        response: \"response\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for ResponseBytes\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.responseType = asn1.result.responseType.valueBlock.toString();\n    this.response = asn1.result.response; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [new asn1js.ObjectIdentifier({\n        value: this.responseType\n      }), this.response]\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      responseType: this.responseType,\n      response: this.response.toJSON()\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/ResponseBytes.js"],"names":["asn1js","getParametersValue","clearProps","ResponseBytes","constructor","parameters","responseType","defaultValues","response","fromSchema","schema","memberName","OctetString","Error","compareWithDefault","memberValue","isEqual","names","Sequence","name","blockName","value","ObjectIdentifier","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class ResponseBytes\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ResponseBytes class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc responseType\r\n\t\t */\r\n\t\tthis.responseType = getParametersValue(parameters, \"responseType\", ResponseBytes.defaultValues(\"responseType\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc response\r\n\t\t */\r\n\t\tthis.response = getParametersValue(parameters, \"response\", ResponseBytes.defaultValues(\"response\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"responseType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"response\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ResponseBytes class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"responseType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"response\":\r\n\t\t\t\treturn (memberValue.isEqual(ResponseBytes.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ResponseBytes class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * ResponseBytes ::=       SEQUENCE {\r\n\t *    responseType   OBJECT IDENTIFIER,\r\n\t *    response       OCTET STRING }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [responseType]\r\n\t\t * @property {string} [response]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.responseType || \"\") }),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.response || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"responseType\",\r\n\t\t\t\"response\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tResponseBytes.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tresponseType: \"responseType\",\r\n\t\t\t\t\tresponse: \"response\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ResponseBytes\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.responseType = asn1.result.responseType.valueBlock.toString();\r\n\t\tthis.response = asn1.result.response;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.responseType }),\r\n\t\t\t\tthis.response\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tresponseType: this.responseType,\r\n\t\t\tresponse: this.response.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}