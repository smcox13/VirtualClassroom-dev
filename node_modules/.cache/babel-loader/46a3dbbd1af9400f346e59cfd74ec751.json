{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _peerConnectionManager = require('../peer-connection-manager');\n\nvar _peerConnectionManager2 = _interopRequireDefault(_peerConnectionManager);\n\nvar _constants = require('../constants');\n\nvar _loggerProxy = require('../common/logs/logger-proxy');\n\nvar _loggerProxy2 = _interopRequireDefault(_loggerProxy);\n\nvar _parameter = require('../common/errors/parameter');\n\nvar _parameter2 = _interopRequireDefault(_parameter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar RoapUtil = {};\n\nvar ROAP_ANSWER = _constants._ANSWER_.toLowerCase();\n\nRoapUtil.shouldHandleMedia = function (meeting) {\n  var offer = meeting.mediaProperties.peerConnection && meeting.mediaProperties.peerConnection.signalingState === _constants.SDP.HAVE_LOCAL_OFFER;\n\n  if (offer) {\n    return false;\n  }\n\n  return true;\n};\n\nRoapUtil.handleError = function (pc) {\n  return _peerConnectionManager2.default.rollBackLocalDescription({\n    peerConnection: pc\n  }).then(function () {\n    return _promise2.default.resolve(true);\n  }).catch(function (err) {\n    return _promise2.default.reject(err);\n  });\n};\n\nRoapUtil.findError = function (messageType, errorType, type) {\n  return (type === _constants.ROAP.RECEIVE_ROAP_MSG || type === _constants.ROAP.SEND_ROAP_MSG) && messageType === _constants._ERROR_ && errorType === _constants._CONFLICT_;\n};\n\nRoapUtil.ensureMeeting = function (meeting, type) {\n  if (type === _constants.ROAP.RECEIVE_ROAP_MSG || type === _constants.ROAP.SEND_ROAP_MSG || type === _constants.ROAP.SEND_ROAP_MSG_SUCCESS) {\n    if (!meeting) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nRoapUtil.updatePeerConnection = function (meeting, session) {\n  return _peerConnectionManager2.default.updatePeerConnection({\n    offerSdp: session.OFFER.sdps,\n    peerConnection: meeting.mediaProperties.peerConnection\n  }, meeting.id).then(function (res) {\n    meeting.roap.lastRoapOffer = session.OFFER.sdps;\n    return res;\n  });\n};\n\nRoapUtil.setRemoteDescription = function (meeting, session) {\n  _loggerProxy2.default.logger.info('RoapUtil->setRemoteDescription#Transmit WAIT_TX_OK, correlationId: ' + meeting.correlationId);\n\n  if (!(meeting && meeting.mediaProperties.peerConnection)) {\n    _loggerProxy2.default.logger.error('RoapUtil->setRemoteDescription#DANGER no media or screen peer connection, correlationId: ' + meeting.correlationId);\n\n    return _promise2.default.reject(new _parameter2.default('Must provide a media or screen peer connection'));\n  }\n\n  return _peerConnectionManager2.default.setRemoteSessionDetails(meeting.mediaProperties.peerConnection, ROAP_ANSWER, session.ANSWER.sdps[0], meeting.id).then(function () {\n    _loggerProxy2.default.logger.info('RoapUtil->setRemoteDescription#Success for correlationId: ' + meeting.correlationId);\n\n    return {\n      seq: session.ANSWER.seq,\n      locusId: meeting.locusId,\n      locusSelfId: meeting.locusInfo.self.id,\n      mediaId: meeting.mediaId,\n      correlationId: meeting.correlationId\n    };\n  }).catch(function (err) {\n    throw err;\n  });\n};\n\nexports.default = RoapUtil;","map":{"version":3,"sources":["util.js"],"names":["RoapUtil","ROAP_ANSWER","_ANSWER_","offer","meeting","SDP","peerConnection","type","ROAP","messageType","_ERROR_","errorType","_CONFLICT_","offerSdp","session","LoggerProxy","ParameterError","seq","locusId","locusSelfId","mediaId","correlationId"],"mappings":"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","sourcesContent":["\nimport PeerConnectionManager from '../peer-connection-manager';\nimport {\n  _ANSWER_,\n  _ERROR_,\n  _CONFLICT_,\n  ROAP,\n  SDP\n} from '../constants';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport ParameterError from '../common/errors/parameter';\n\nconst RoapUtil = {};\nconst ROAP_ANSWER = _ANSWER_.toLowerCase();\n\nRoapUtil.shouldHandleMedia = (meeting) => {\n  const offer =\n    meeting.mediaProperties.peerConnection &&\n    meeting.mediaProperties.peerConnection.signalingState === SDP.HAVE_LOCAL_OFFER;\n\n  if (offer) {\n    return false;\n  }\n\n  return true;\n};\n\nRoapUtil.handleError = (pc) =>\n  PeerConnectionManager.rollBackLocalDescription({peerConnection: pc})\n    .then(() => Promise.resolve(true))\n    .catch((err) => Promise.reject(err));\n\nRoapUtil.findError = (messageType, errorType, type) =>\n  (type === ROAP.RECEIVE_ROAP_MSG || type === ROAP.SEND_ROAP_MSG) && messageType === _ERROR_ && errorType === _CONFLICT_;\n\nRoapUtil.ensureMeeting = (meeting, type) => {\n  if (type === ROAP.RECEIVE_ROAP_MSG || type === ROAP.SEND_ROAP_MSG || type === ROAP.SEND_ROAP_MSG_SUCCESS) {\n    if (!meeting) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nRoapUtil.updatePeerConnection = (meeting, session) => PeerConnectionManager.updatePeerConnection({\n  offerSdp: session.OFFER.sdps,\n  peerConnection: meeting.mediaProperties.peerConnection\n},\nmeeting.id)\n  .then((res) => {\n    meeting.roap.lastRoapOffer = session.OFFER.sdps;\n\n    return res;\n  });\n\n\nRoapUtil.setRemoteDescription = (meeting, session) => {\n  LoggerProxy.logger.info(`RoapUtil->setRemoteDescription#Transmit WAIT_TX_OK, correlationId: ${meeting.correlationId}`);\n  if (!(meeting && (meeting.mediaProperties.peerConnection))) {\n    LoggerProxy.logger.error(`RoapUtil->setRemoteDescription#DANGER no media or screen peer connection, correlationId: ${meeting.correlationId}`);\n\n    return Promise.reject(new ParameterError('Must provide a media or screen peer connection'));\n  }\n\n  return PeerConnectionManager.setRemoteSessionDetails(\n    meeting.mediaProperties.peerConnection,\n    ROAP_ANSWER,\n    session.ANSWER.sdps[0],\n    meeting.id\n  ).then(() => {\n    LoggerProxy.logger.info(`RoapUtil->setRemoteDescription#Success for correlationId: ${meeting.correlationId}`);\n\n    return {\n      seq: session.ANSWER.seq,\n      locusId: meeting.locusId,\n      locusSelfId: meeting.locusInfo.self.id,\n      mediaId: meeting.mediaId,\n      correlationId: meeting.correlationId\n    };\n  })\n    .catch((err) => {\n      throw err;\n    });\n};\n\nexport default RoapUtil;\n"]},"metadata":{},"sourceType":"script"}