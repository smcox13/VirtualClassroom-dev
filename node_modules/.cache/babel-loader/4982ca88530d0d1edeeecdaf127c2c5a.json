{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC6318\r\n */\n\nexport default class ECCCMSSharedInfo {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for ECCCMSSharedInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc keyInfo\r\n     */\n    this.keyInfo = getParametersValue(parameters, \"keyInfo\", ECCCMSSharedInfo.defaultValues(\"keyInfo\"));\n    if (\"entityUInfo\" in parameters)\n      /**\r\n       * @type {OctetString}\r\n       * @desc entityUInfo\r\n       */\n      this.entityUInfo = getParametersValue(parameters, \"entityUInfo\", ECCCMSSharedInfo.defaultValues(\"entityUInfo\"));\n    /**\r\n     * @type {OctetString}\r\n     * @desc suppPubInfo\r\n     */\n\n    this.suppPubInfo = getParametersValue(parameters, \"suppPubInfo\", ECCCMSSharedInfo.defaultValues(\"suppPubInfo\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"keyInfo\":\n        return new AlgorithmIdentifier();\n\n      case \"entityUInfo\":\n        return new asn1js.OctetString();\n\n      case \"suppPubInfo\":\n        return new asn1js.OctetString();\n\n      default:\n        throw new Error(`Invalid member name for ECCCMSSharedInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"keyInfo\":\n      case \"entityUInfo\":\n      case \"suppPubInfo\":\n        return memberValue.isEqual(ECCCMSSharedInfo.defaultValues(memberName));\n\n      default:\n        throw new Error(`Invalid member name for ECCCMSSharedInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * ECC-CMS-SharedInfo  ::=  SEQUENCE {\r\n   *    keyInfo      AlgorithmIdentifier,\r\n   *    entityUInfo  [0] EXPLICIT OCTET STRING OPTIONAL,\r\n   *    suppPubInfo  [2] EXPLICIT OCTET STRING }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [keyInfo]\r\n     * @property {string} [entityUInfo]\r\n     * @property {string} [suppPubInfo]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [AlgorithmIdentifier.schema(names.keyInfo || {}), new asn1js.Constructed({\n        name: names.entityUInfo || \"\",\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        optional: true,\n        value: [new asn1js.OctetString()]\n      }), new asn1js.Constructed({\n        name: names.suppPubInfo || \"\",\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 2 // [2]\n\n        },\n        value: [new asn1js.OctetString()]\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"keyInfo\", \"entityUInfo\", \"suppPubInfo\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, ECCCMSSharedInfo.schema({\n      names: {\n        keyInfo: {\n          names: {\n            blockName: \"keyInfo\"\n          }\n        },\n        entityUInfo: \"entityUInfo\",\n        suppPubInfo: \"suppPubInfo\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for ECCCMSSharedInfo\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.keyInfo = new AlgorithmIdentifier({\n      schema: asn1.result.keyInfo\n    });\n    if (\"entityUInfo\" in asn1.result) this.entityUInfo = asn1.result.entityUInfo.valueBlock.value[0];\n    this.suppPubInfo = asn1.result.suppPubInfo.valueBlock.value[0]; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create output array for sequence \n    const outputArray = [];\n    outputArray.push(this.keyInfo.toSchema());\n\n    if (\"entityUInfo\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [this.entityUInfo]\n      }));\n    }\n\n    outputArray.push(new asn1js.Constructed({\n      idBlock: {\n        tagClass: 3,\n        // CONTEXT-SPECIFIC\n        tagNumber: 2 // [2]\n\n      },\n      value: [this.suppPubInfo]\n    })); //endregion \n    //region Construct and return new ASN.1 schema for this object \n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion \n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const _object = {\n      keyInfo: this.keyInfo.toJSON()\n    };\n    if (\"entityUInfo\" in this) _object.entityUInfo = this.entityUInfo.toJSON();\n    _object.suppPubInfo = this.suppPubInfo.toJSON();\n    return _object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/ECCCMSSharedInfo.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","ECCCMSSharedInfo","constructor","parameters","keyInfo","defaultValues","entityUInfo","suppPubInfo","fromSchema","schema","memberName","OctetString","Error","compareWithDefault","memberValue","isEqual","names","Sequence","name","blockName","value","Constructed","idBlock","tagClass","tagNumber","optional","asn1","compareSchema","verified","result","valueBlock","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6318\r\n */\r\nexport default class ECCCMSSharedInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ECCCMSSharedInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc keyInfo\r\n\t\t */\r\n\t\tthis.keyInfo = getParametersValue(parameters, \"keyInfo\", ECCCMSSharedInfo.defaultValues(\"keyInfo\"));\r\n\r\n\t\tif(\"entityUInfo\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @desc entityUInfo\r\n\t\t\t */\r\n\t\t\tthis.entityUInfo = getParametersValue(parameters, \"entityUInfo\", ECCCMSSharedInfo.defaultValues(\"entityUInfo\"));\r\n\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc suppPubInfo\r\n\t\t */\r\n\t\tthis.suppPubInfo = getParametersValue(parameters, \"suppPubInfo\", ECCCMSSharedInfo.defaultValues(\"suppPubInfo\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyInfo\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"entityUInfo\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"suppPubInfo\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCCMSSharedInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyInfo\":\r\n\t\t\tcase \"entityUInfo\":\r\n\t\t\tcase \"suppPubInfo\":\r\n\t\t\t\treturn (memberValue.isEqual(ECCCMSSharedInfo.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCCMSSharedInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * ECC-CMS-SharedInfo  ::=  SEQUENCE {\r\n\t *    keyInfo      AlgorithmIdentifier,\r\n\t *    entityUInfo  [0] EXPLICIT OCTET STRING OPTIONAL,\r\n\t *    suppPubInfo  [2] EXPLICIT OCTET STRING }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyInfo]\r\n\t\t * @property {string} [entityUInfo]\r\n\t\t * @property {string} [suppPubInfo]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyInfo || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.entityUInfo || \"\"),\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [new asn1js.OctetString()]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.suppPubInfo || \"\"),\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.OctetString()]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"keyInfo\",\r\n\t\t\t\"entityUInfo\",\r\n\t\t\t\"suppPubInfo\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tECCCMSSharedInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyInfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyInfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tentityUInfo: \"entityUInfo\",\r\n\t\t\t\t\tsuppPubInfo: \"suppPubInfo\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECCCMSSharedInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.keyInfo = new AlgorithmIdentifier({ schema: asn1.result.keyInfo });\r\n\r\n\t\tif(\"entityUInfo\" in asn1.result)\r\n\t\t\tthis.entityUInfo = asn1.result.entityUInfo.valueBlock.value[0];\r\n\r\n\t\tthis.suppPubInfo = asn1.result.suppPubInfo.valueBlock.value[0];\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create output array for sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.keyInfo.toSchema());\r\n\t\t\r\n\t\tif(\"entityUInfo\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.entityUInfo]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\tidBlock: {\r\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t},\r\n\t\t\tvalue: [this.suppPubInfo]\r\n\t\t}));\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t});\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tkeyInfo: this.keyInfo.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"entityUInfo\" in this)\r\n\t\t\t_object.entityUInfo = this.entityUInfo.toJSON();\r\n\r\n\t\t_object.suppPubInfo = this.suppPubInfo.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}