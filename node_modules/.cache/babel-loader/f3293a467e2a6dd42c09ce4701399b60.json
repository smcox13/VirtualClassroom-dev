{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, stringToArrayBuffer, arrayBufferToString, utilConcatBuf } from \"pvutils\";\nimport { createCMSECDSASignature, createECDSASignatureFromCMS } from \"./common.js\";\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\nimport RSASSAPSSParams from \"./RSASSAPSSParams.js\";\nimport PBKDF2Params from \"./PBKDF2Params.js\";\nimport PBES2Params from \"./PBES2Params.js\"; //**************************************************************************************\n\n/**\r\n * Making MAC key using algorithm described in B.2 of PKCS#12 standard.\r\n */\n\nfunction makePKCS12B2Key(cryptoEngine, hashAlgorithm, keyLength, password, salt, iterationCount) {\n  //region Initial variables\n  let u;\n  let v;\n  const result = []; //endregion\n  //region Get \"u\" and \"v\" values\n\n  switch (hashAlgorithm.toUpperCase()) {\n    case \"SHA-1\":\n      u = 20; // 160\n\n      v = 64; // 512\n\n      break;\n\n    case \"SHA-256\":\n      u = 32; // 256\n\n      v = 64; // 512\n\n      break;\n\n    case \"SHA-384\":\n      u = 48; // 384\n\n      v = 128; // 1024\n\n      break;\n\n    case \"SHA-512\":\n      u = 64; // 512\n\n      v = 128; // 1024\n\n      break;\n\n    default:\n      throw new Error(\"Unsupported hashing algorithm\");\n  } //endregion\n  //region Main algorithm making key\n  //region Transform password to UTF-8 like string\n\n\n  const passwordViewInitial = new Uint8Array(password);\n  const passwordTransformed = new ArrayBuffer(password.byteLength * 2 + 2);\n  const passwordTransformedView = new Uint8Array(passwordTransformed);\n\n  for (let i = 0; i < passwordViewInitial.length; i++) {\n    passwordTransformedView[i * 2] = 0x00;\n    passwordTransformedView[i * 2 + 1] = passwordViewInitial[i];\n  }\n\n  passwordTransformedView[passwordTransformedView.length - 2] = 0x00;\n  passwordTransformedView[passwordTransformedView.length - 1] = 0x00;\n  password = passwordTransformed.slice(0); //endregion\n  //region Construct a string D (the \"diversifier\") by concatenating v/8 copies of ID\n\n  const D = new ArrayBuffer(v);\n  const dView = new Uint8Array(D);\n\n  for (let i = 0; i < D.byteLength; i++) dView[i] = 3; // The ID value equal to \"3\" for MACing (see B.3 of standard)\n  //endregion\n  //region Concatenate copies of the salt together to create a string S of length v * ceil(s / v) bytes (the final copy of the salt may be trunacted to create S)\n\n\n  const saltLength = salt.byteLength;\n  const sLen = v * Math.ceil(saltLength / v);\n  const S = new ArrayBuffer(sLen);\n  const sView = new Uint8Array(S);\n  const saltView = new Uint8Array(salt);\n\n  for (let i = 0; i < sLen; i++) sView[i] = saltView[i % saltLength]; //endregion\n  //region Concatenate copies of the password together to create a string P of length v * ceil(p / v) bytes (the final copy of the password may be truncated to create P)\n\n\n  const passwordLength = password.byteLength;\n  const pLen = v * Math.ceil(passwordLength / v);\n  const P = new ArrayBuffer(pLen);\n  const pView = new Uint8Array(P);\n  const passwordView = new Uint8Array(password);\n\n  for (let i = 0; i < pLen; i++) pView[i] = passwordView[i % passwordLength]; //endregion\n  //region Set I=S||P to be the concatenation of S and P\n\n\n  const sPlusPLength = S.byteLength + P.byteLength;\n  let I = new ArrayBuffer(sPlusPLength);\n  let iView = new Uint8Array(I);\n  iView.set(sView);\n  iView.set(pView, sView.length); //endregion\n  //region Set c=ceil(n / u)\n\n  const c = Math.ceil((keyLength >> 3) / u); //endregion\n  //region Initial variables\n\n  let internalSequence = Promise.resolve(I); //endregion\n  //region For i=1, 2, ..., c, do the following:\n\n  for (let i = 0; i <= c; i++) {\n    internalSequence = internalSequence.then(_I => {\n      //region Create contecanetion of D and I\n      const dAndI = new ArrayBuffer(D.byteLength + _I.byteLength);\n      const dAndIView = new Uint8Array(dAndI);\n      dAndIView.set(dView);\n      dAndIView.set(iView, dView.length); //endregion\n\n      return dAndI;\n    }); //region Make \"iterationCount\" rounds of hashing\n\n    for (let j = 0; j < iterationCount; j++) internalSequence = internalSequence.then(roundBuffer => cryptoEngine.digest({\n      name: hashAlgorithm\n    }, new Uint8Array(roundBuffer))); //endregion\n\n\n    internalSequence = internalSequence.then(roundBuffer => {\n      //region Concatenate copies of Ai to create a string B of length v bits (the final copy of Ai may be truncated to create B)\n      const B = new ArrayBuffer(v);\n      const bView = new Uint8Array(B);\n\n      for (let j = 0; j < B.byteLength; j++) bView[j] = roundBuffer[j % roundBuffer.length]; //endregion\n      //region Make new I value\n\n\n      const k = Math.ceil(saltLength / v) + Math.ceil(passwordLength / v);\n      const iRound = [];\n      let sliceStart = 0;\n      let sliceLength = v;\n\n      for (let j = 0; j < k; j++) {\n        const chunk = Array.from(new Uint8Array(I.slice(sliceStart, sliceStart + sliceLength)));\n        sliceStart += v;\n        if (sliceStart + v > I.byteLength) sliceLength = I.byteLength - sliceStart;\n        let x = 0x1ff;\n\n        for (let l = B.byteLength - 1; l >= 0; l--) {\n          x >>= 8;\n          x += bView[l] + chunk[l];\n          chunk[l] = x & 0xff;\n        }\n\n        iRound.push(...chunk);\n      }\n\n      I = new ArrayBuffer(iRound.length);\n      iView = new Uint8Array(I);\n      iView.set(iRound); //endregion\n\n      result.push(...new Uint8Array(roundBuffer));\n      return I;\n    });\n  } //endregion\n  //region Initialize final key\n\n\n  internalSequence = internalSequence.then(() => {\n    const resultBuffer = new ArrayBuffer(keyLength >> 3);\n    const resultView = new Uint8Array(resultBuffer);\n    resultView.set(new Uint8Array(result).slice(0, keyLength >> 3));\n    return resultBuffer;\n  }); //endregion\n  //endregion\n\n  return internalSequence;\n} //**************************************************************************************\n\n/**\r\n * Default cryptographic engine for Web Cryptography API\r\n */\n\n\nexport default class CryptoEngine {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for CryptoEngine class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Object}\r\n     * @desc Usually here we are expecting \"window.crypto\" or an equivalent from custom \"crypto engine\"\r\n     */\n    this.crypto = getParametersValue(parameters, \"crypto\", {});\n    /**\r\n     * @type {Object}\r\n     * @desc Usually here we are expecting \"window.crypto.subtle\" or an equivalent from custom \"crypto engine\"\r\n     */\n\n    this.subtle = getParametersValue(parameters, \"subtle\", {});\n    /**\r\n     * @type {string}\r\n     * @desc Name of the \"crypto engine\"\r\n     */\n\n    this.name = getParametersValue(parameters, \"name\", \"\"); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Import WebCrypto keys from different formats\r\n   * @param {string} format\r\n   * @param {ArrayBuffer|Uint8Array} keyData\r\n   * @param {Object} algorithm\r\n   * @param {boolean} extractable\r\n   * @param {Array} keyUsages\r\n   * @returns {Promise}\r\n   */\n\n\n  importKey(format, keyData, algorithm, extractable, keyUsages) {\n    //region Initial variables\n    let jwk = {}; //endregion\n    //region Change \"keyData\" type if needed\n\n    if (keyData instanceof Uint8Array) keyData = keyData.buffer; //endregion\n\n    switch (format.toLowerCase()) {\n      case \"raw\":\n        return this.subtle.importKey(\"raw\", keyData, algorithm, extractable, keyUsages);\n\n      case \"spki\":\n        {\n          const asn1 = asn1js.fromBER(keyData);\n          if (asn1.offset === -1) return Promise.reject(\"Incorrect keyData\");\n          const publicKeyInfo = new PublicKeyInfo();\n\n          try {\n            publicKeyInfo.fromSchema(asn1.result);\n          } catch (ex) {\n            return Promise.reject(\"Incorrect keyData\");\n          } // noinspection FallThroughInSwitchStatementJS\n\n\n          switch (algorithm.name.toUpperCase()) {\n            case \"RSA-PSS\":\n              {\n                //region Get information about used hash function\n                switch (algorithm.hash.name.toUpperCase()) {\n                  case \"SHA-1\":\n                    jwk.alg = \"PS1\";\n                    break;\n\n                  case \"SHA-256\":\n                    jwk.alg = \"PS256\";\n                    break;\n\n                  case \"SHA-384\":\n                    jwk.alg = \"PS384\";\n                    break;\n\n                  case \"SHA-512\":\n                    jwk.alg = \"PS512\";\n                    break;\n\n                  default:\n                    return Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\n                } //endregion\n\n              }\n            // break omitted\n\n            case \"RSASSA-PKCS1-V1_5\":\n              {\n                keyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\n\n                jwk.kty = \"RSA\";\n                jwk.ext = extractable;\n                jwk.key_ops = keyUsages;\n                if (publicKeyInfo.algorithm.algorithmId !== \"1.2.840.113549.1.1.1\") return Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`); //region Get information about used hash function\n\n                if (\"alg\" in jwk === false) {\n                  switch (algorithm.hash.name.toUpperCase()) {\n                    case \"SHA-1\":\n                      jwk.alg = \"RS1\";\n                      break;\n\n                    case \"SHA-256\":\n                      jwk.alg = \"RS256\";\n                      break;\n\n                    case \"SHA-384\":\n                      jwk.alg = \"RS384\";\n                      break;\n\n                    case \"SHA-512\":\n                      jwk.alg = \"RS512\";\n                      break;\n\n                    default:\n                      return Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\n                  }\n                } //endregion\n                //region Create RSA Public Key elements\n\n\n                const publicKeyJSON = publicKeyInfo.toJSON();\n\n                for (const key of Object.keys(publicKeyJSON)) jwk[key] = publicKeyJSON[key]; //endregion\n\n              }\n              break;\n\n            case \"ECDSA\":\n              keyUsages = [\"verify\"];\n            // Override existing keyUsages value since the key is a public key\n            // break omitted\n\n            case \"ECDH\":\n              {\n                //region Initial variables\n                jwk = {\n                  kty: \"EC\",\n                  ext: extractable,\n                  key_ops: keyUsages\n                }; //endregion\n                //region Get information about algorithm\n\n                if (publicKeyInfo.algorithm.algorithmId !== \"1.2.840.10045.2.1\") return Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`); //endregion\n                //region Create ECDSA Public Key elements\n\n                const publicKeyJSON = publicKeyInfo.toJSON();\n\n                for (const key of Object.keys(publicKeyJSON)) jwk[key] = publicKeyJSON[key]; //endregion\n\n              }\n              break;\n\n            case \"RSA-OAEP\":\n              {\n                jwk.kty = \"RSA\";\n                jwk.ext = extractable;\n                jwk.key_ops = keyUsages;\n                if (this.name.toLowerCase() === \"safari\") jwk.alg = \"RSA-OAEP\";else {\n                  switch (algorithm.hash.name.toUpperCase()) {\n                    case \"SHA-1\":\n                      jwk.alg = \"RSA-OAEP\";\n                      break;\n\n                    case \"SHA-256\":\n                      jwk.alg = \"RSA-OAEP-256\";\n                      break;\n\n                    case \"SHA-384\":\n                      jwk.alg = \"RSA-OAEP-384\";\n                      break;\n\n                    case \"SHA-512\":\n                      jwk.alg = \"RSA-OAEP-512\";\n                      break;\n\n                    default:\n                      return Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\n                  }\n                } //region Create ECDSA Public Key elements\n\n                const publicKeyJSON = publicKeyInfo.toJSON();\n\n                for (const key of Object.keys(publicKeyJSON)) jwk[key] = publicKeyJSON[key]; //endregion\n\n              }\n              break;\n\n            default:\n              return Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\n          }\n        }\n        break;\n\n      case \"pkcs8\":\n        {\n          const privateKeyInfo = new PrivateKeyInfo(); //region Parse \"PrivateKeyInfo\" object\n\n          const asn1 = asn1js.fromBER(keyData);\n          if (asn1.offset === -1) return Promise.reject(\"Incorrect keyData\");\n\n          try {\n            privateKeyInfo.fromSchema(asn1.result);\n          } catch (ex) {\n            return Promise.reject(\"Incorrect keyData\");\n          }\n\n          if (\"parsedKey\" in privateKeyInfo === false) return Promise.reject(\"Incorrect keyData\"); //endregion\n          // noinspection FallThroughInSwitchStatementJS\n          // noinspection FallThroughInSwitchStatementJS\n\n          switch (algorithm.name.toUpperCase()) {\n            case \"RSA-PSS\":\n              {\n                //region Get information about used hash function\n                switch (algorithm.hash.name.toUpperCase()) {\n                  case \"SHA-1\":\n                    jwk.alg = \"PS1\";\n                    break;\n\n                  case \"SHA-256\":\n                    jwk.alg = \"PS256\";\n                    break;\n\n                  case \"SHA-384\":\n                    jwk.alg = \"PS384\";\n                    break;\n\n                  case \"SHA-512\":\n                    jwk.alg = \"PS512\";\n                    break;\n\n                  default:\n                    return Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\n                } //endregion\n\n              }\n            // break omitted\n\n            case \"RSASSA-PKCS1-V1_5\":\n              {\n                keyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\n\n                jwk.kty = \"RSA\";\n                jwk.ext = extractable;\n                jwk.key_ops = keyUsages; //region Get information about used hash function\n\n                if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.113549.1.1.1\") return Promise.reject(`Incorrect private key algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`); //endregion\n                //region Get information about used hash function\n\n                if (\"alg\" in jwk === false) {\n                  switch (algorithm.hash.name.toUpperCase()) {\n                    case \"SHA-1\":\n                      jwk.alg = \"RS1\";\n                      break;\n\n                    case \"SHA-256\":\n                      jwk.alg = \"RS256\";\n                      break;\n\n                    case \"SHA-384\":\n                      jwk.alg = \"RS384\";\n                      break;\n\n                    case \"SHA-512\":\n                      jwk.alg = \"RS512\";\n                      break;\n\n                    default:\n                      return Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\n                  }\n                } //endregion\n                //region Create RSA Private Key elements\n\n\n                const privateKeyJSON = privateKeyInfo.toJSON();\n\n                for (const key of Object.keys(privateKeyJSON)) jwk[key] = privateKeyJSON[key]; //endregion\n\n              }\n              break;\n\n            case \"ECDSA\":\n              keyUsages = [\"sign\"];\n            // Override existing keyUsages value since the key is a private key\n            // break omitted\n\n            case \"ECDH\":\n              {\n                //region Initial variables\n                jwk = {\n                  kty: \"EC\",\n                  ext: extractable,\n                  key_ops: keyUsages\n                }; //endregion\n                //region Get information about used hash function\n\n                if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.10045.2.1\") return Promise.reject(`Incorrect algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`); //endregion\n                //region Create ECDSA Private Key elements\n\n                const privateKeyJSON = privateKeyInfo.toJSON();\n\n                for (const key of Object.keys(privateKeyJSON)) jwk[key] = privateKeyJSON[key]; //endregion\n\n              }\n              break;\n\n            case \"RSA-OAEP\":\n              {\n                jwk.kty = \"RSA\";\n                jwk.ext = extractable;\n                jwk.key_ops = keyUsages; //region Get information about used hash function\n\n                if (this.name.toLowerCase() === \"safari\") jwk.alg = \"RSA-OAEP\";else {\n                  switch (algorithm.hash.name.toUpperCase()) {\n                    case \"SHA-1\":\n                      jwk.alg = \"RSA-OAEP\";\n                      break;\n\n                    case \"SHA-256\":\n                      jwk.alg = \"RSA-OAEP-256\";\n                      break;\n\n                    case \"SHA-384\":\n                      jwk.alg = \"RSA-OAEP-384\";\n                      break;\n\n                    case \"SHA-512\":\n                      jwk.alg = \"RSA-OAEP-512\";\n                      break;\n\n                    default:\n                      return Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\n                  }\n                } //endregion\n                //region Create RSA Private Key elements\n\n                const privateKeyJSON = privateKeyInfo.toJSON();\n\n                for (const key of Object.keys(privateKeyJSON)) jwk[key] = privateKeyJSON[key]; //endregion\n\n              }\n              break;\n\n            default:\n              return Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\n          }\n        }\n        break;\n\n      case \"jwk\":\n        jwk = keyData;\n        break;\n\n      default:\n        return Promise.reject(`Incorrect format: ${format}`);\n    } //region Special case for Safari browser (since its acting not as WebCrypto standard describes)\n\n\n    if (this.name.toLowerCase() === \"safari\") {\n      // Try to use both ways - import using ArrayBuffer and pure JWK (for Safari Technology Preview)\n      return Promise.resolve().then(() => this.subtle.importKey(\"jwk\", stringToArrayBuffer(JSON.stringify(jwk)), algorithm, extractable, keyUsages)).then(result => result, () => this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages));\n    } //endregion\n\n\n    return this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\n  } //**********************************************************************************\n\n  /**\r\n   * Export WebCrypto keys to different formats\r\n   * @param {string} format\r\n   * @param {Object} key\r\n   * @returns {Promise}\r\n   */\n\n\n  exportKey(format, key) {\n    let sequence = this.subtle.exportKey(\"jwk\", key); //region Currently Safari returns ArrayBuffer as JWK thus we need an additional transformation\n\n    if (this.name.toLowerCase() === \"safari\") {\n      sequence = sequence.then(result => {\n        // Some additional checks for Safari Technology Preview\n        if (result instanceof ArrayBuffer) return JSON.parse(arrayBufferToString(result));\n        return result;\n      });\n    } //endregion\n\n\n    switch (format.toLowerCase()) {\n      case \"raw\":\n        return this.subtle.exportKey(\"raw\", key);\n\n      case \"spki\":\n        sequence = sequence.then(result => {\n          const publicKeyInfo = new PublicKeyInfo();\n\n          try {\n            publicKeyInfo.fromJSON(result);\n          } catch (ex) {\n            return Promise.reject(\"Incorrect key data\");\n          }\n\n          return publicKeyInfo.toSchema().toBER(false);\n        });\n        break;\n\n      case \"pkcs8\":\n        sequence = sequence.then(result => {\n          const privateKeyInfo = new PrivateKeyInfo();\n\n          try {\n            privateKeyInfo.fromJSON(result);\n          } catch (ex) {\n            return Promise.reject(\"Incorrect key data\");\n          }\n\n          return privateKeyInfo.toSchema().toBER(false);\n        });\n        break;\n\n      case \"jwk\":\n        break;\n\n      default:\n        return Promise.reject(`Incorrect format: ${format}`);\n    }\n\n    return sequence;\n  } //**********************************************************************************\n\n  /**\r\n   * Convert WebCrypto keys between different export formats\r\n   * @param {string} inputFormat\r\n   * @param {string} outputFormat\r\n   * @param {ArrayBuffer|Object} keyData\r\n   * @param {Object} algorithm\r\n   * @param {boolean} extractable\r\n   * @param {Array} keyUsages\r\n   * @returns {Promise}\r\n   */\n\n\n  convert(inputFormat, outputFormat, keyData, algorithm, extractable, keyUsages) {\n    switch (inputFormat.toLowerCase()) {\n      case \"raw\":\n        switch (outputFormat.toLowerCase()) {\n          case \"raw\":\n            return Promise.resolve(keyData);\n\n          case \"spki\":\n            return Promise.resolve().then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages)).then(result => this.exportKey(\"spki\", result));\n\n          case \"pkcs8\":\n            return Promise.resolve().then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages)).then(result => this.exportKey(\"pkcs8\", result));\n\n          case \"jwk\":\n            return Promise.resolve().then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages)).then(result => this.exportKey(\"jwk\", result));\n\n          default:\n            return Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\n        }\n\n      case \"spki\":\n        switch (outputFormat.toLowerCase()) {\n          case \"raw\":\n            return Promise.resolve().then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages)).then(result => this.exportKey(\"raw\", result));\n\n          case \"spki\":\n            return Promise.resolve(keyData);\n\n          case \"pkcs8\":\n            return Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\n\n          case \"jwk\":\n            return Promise.resolve().then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages)).then(result => this.exportKey(\"jwk\", result));\n\n          default:\n            return Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\n        }\n\n      case \"pkcs8\":\n        switch (outputFormat.toLowerCase()) {\n          case \"raw\":\n            return Promise.resolve().then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages)).then(result => this.exportKey(\"raw\", result));\n\n          case \"spki\":\n            return Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\n\n          case \"pkcs8\":\n            return Promise.resolve(keyData);\n\n          case \"jwk\":\n            return Promise.resolve().then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages)).then(result => this.exportKey(\"jwk\", result));\n\n          default:\n            return Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\n        }\n\n      case \"jwk\":\n        switch (outputFormat.toLowerCase()) {\n          case \"raw\":\n            return Promise.resolve().then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages)).then(result => this.exportKey(\"raw\", result));\n\n          case \"spki\":\n            return Promise.resolve().then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages)).then(result => this.exportKey(\"spki\", result));\n\n          case \"pkcs8\":\n            return Promise.resolve().then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages)).then(result => this.exportKey(\"pkcs8\", result));\n\n          case \"jwk\":\n            return Promise.resolve(keyData);\n\n          default:\n            return Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\n        }\n\n      default:\n        return Promise.reject(`Incorrect inputFormat: ${inputFormat}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Wrapper for standard function \"encrypt\"\r\n   * @param args\r\n   * @returns {Promise}\r\n   */\n\n\n  encrypt(...args) {\n    return this.subtle.encrypt(...args);\n  } //**********************************************************************************\n\n  /**\r\n   * Wrapper for standard function \"decrypt\"\r\n   * @param args\r\n   * @returns {Promise}\r\n   */\n\n\n  decrypt(...args) {\n    return this.subtle.decrypt(...args);\n  } //**********************************************************************************\n\n  /**\r\n   * Wrapper for standard function \"sign\"\r\n   * @param args\r\n   * @returns {Promise}\r\n   */\n\n\n  sign(...args) {\n    return this.subtle.sign(...args);\n  } //**********************************************************************************\n\n  /**\r\n   * Wrapper for standard function \"verify\"\r\n   * @param args\r\n   * @returns {Promise}\r\n   */\n\n\n  verify(...args) {\n    return this.subtle.verify(...args);\n  } //**********************************************************************************\n\n  /**\r\n   * Wrapper for standard function \"digest\"\r\n   * @param args\r\n   * @returns {Promise}\r\n   */\n\n\n  digest(...args) {\n    return this.subtle.digest(...args);\n  } //**********************************************************************************\n\n  /**\r\n   * Wrapper for standard function \"generateKey\"\r\n   * @param args\r\n   * @returns {Promise}\r\n   */\n\n\n  generateKey(...args) {\n    return this.subtle.generateKey(...args);\n  } //**********************************************************************************\n\n  /**\r\n   * Wrapper for standard function \"deriveKey\"\r\n   * @param args\r\n   * @returns {Promise}\r\n   */\n\n\n  deriveKey(...args) {\n    return this.subtle.deriveKey(...args);\n  } //**********************************************************************************\n\n  /**\r\n   * Wrapper for standard function \"deriveBits\"\r\n   * @param args\r\n   * @returns {Promise}\r\n   */\n\n\n  deriveBits(...args) {\n    return this.subtle.deriveBits(...args);\n  } //**********************************************************************************\n\n  /**\r\n   * Wrapper for standard function \"wrapKey\"\r\n   * @param args\r\n   * @returns {Promise}\r\n   */\n\n\n  wrapKey(...args) {\n    return this.subtle.wrapKey(...args);\n  } //**********************************************************************************\n\n  /**\r\n   * Wrapper for standard function \"unwrapKey\"\r\n   * @param args\r\n   * @returns {Promise}\r\n   */\n\n\n  unwrapKey(...args) {\n    return this.subtle.unwrapKey(...args);\n  } //**********************************************************************************\n\n  /**\r\n   * Initialize input Uint8Array by random values (with help from current \"crypto engine\")\r\n   * @param {!Uint8Array} view\r\n   * @returns {*}\r\n   */\n\n\n  getRandomValues(view) {\n    if (\"getRandomValues\" in this.crypto === false) throw new Error(\"No support for getRandomValues\");\n    return this.crypto.getRandomValues(view);\n  } //**********************************************************************************\n\n  /**\r\n   * Get WebCrypto algorithm by wel-known OID\r\n   * @param {string} oid well-known OID to search for\r\n   * @returns {Object}\r\n   */\n\n\n  getAlgorithmByOID(oid) {\n    switch (oid) {\n      case \"1.2.840.113549.1.1.1\":\n      case \"1.2.840.113549.1.1.5\":\n        return {\n          name: \"RSASSA-PKCS1-v1_5\",\n          hash: {\n            name: \"SHA-1\"\n          }\n        };\n\n      case \"1.2.840.113549.1.1.11\":\n        return {\n          name: \"RSASSA-PKCS1-v1_5\",\n          hash: {\n            name: \"SHA-256\"\n          }\n        };\n\n      case \"1.2.840.113549.1.1.12\":\n        return {\n          name: \"RSASSA-PKCS1-v1_5\",\n          hash: {\n            name: \"SHA-384\"\n          }\n        };\n\n      case \"1.2.840.113549.1.1.13\":\n        return {\n          name: \"RSASSA-PKCS1-v1_5\",\n          hash: {\n            name: \"SHA-512\"\n          }\n        };\n\n      case \"1.2.840.113549.1.1.10\":\n        return {\n          name: \"RSA-PSS\"\n        };\n\n      case \"1.2.840.113549.1.1.7\":\n        return {\n          name: \"RSA-OAEP\"\n        };\n\n      case \"1.2.840.10045.2.1\":\n      case \"1.2.840.10045.4.1\":\n        return {\n          name: \"ECDSA\",\n          hash: {\n            name: \"SHA-1\"\n          }\n        };\n\n      case \"1.2.840.10045.4.3.2\":\n        return {\n          name: \"ECDSA\",\n          hash: {\n            name: \"SHA-256\"\n          }\n        };\n\n      case \"1.2.840.10045.4.3.3\":\n        return {\n          name: \"ECDSA\",\n          hash: {\n            name: \"SHA-384\"\n          }\n        };\n\n      case \"1.2.840.10045.4.3.4\":\n        return {\n          name: \"ECDSA\",\n          hash: {\n            name: \"SHA-512\"\n          }\n        };\n\n      case \"1.3.133.16.840.63.0.2\":\n        return {\n          name: \"ECDH\",\n          kdf: \"SHA-1\"\n        };\n\n      case \"1.3.132.1.11.1\":\n        return {\n          name: \"ECDH\",\n          kdf: \"SHA-256\"\n        };\n\n      case \"1.3.132.1.11.2\":\n        return {\n          name: \"ECDH\",\n          kdf: \"SHA-384\"\n        };\n\n      case \"1.3.132.1.11.3\":\n        return {\n          name: \"ECDH\",\n          kdf: \"SHA-512\"\n        };\n\n      case \"2.16.840.1.101.3.4.1.2\":\n        return {\n          name: \"AES-CBC\",\n          length: 128\n        };\n\n      case \"2.16.840.1.101.3.4.1.22\":\n        return {\n          name: \"AES-CBC\",\n          length: 192\n        };\n\n      case \"2.16.840.1.101.3.4.1.42\":\n        return {\n          name: \"AES-CBC\",\n          length: 256\n        };\n\n      case \"2.16.840.1.101.3.4.1.6\":\n        return {\n          name: \"AES-GCM\",\n          length: 128\n        };\n\n      case \"2.16.840.1.101.3.4.1.26\":\n        return {\n          name: \"AES-GCM\",\n          length: 192\n        };\n\n      case \"2.16.840.1.101.3.4.1.46\":\n        return {\n          name: \"AES-GCM\",\n          length: 256\n        };\n\n      case \"2.16.840.1.101.3.4.1.4\":\n        return {\n          name: \"AES-CFB\",\n          length: 128\n        };\n\n      case \"2.16.840.1.101.3.4.1.24\":\n        return {\n          name: \"AES-CFB\",\n          length: 192\n        };\n\n      case \"2.16.840.1.101.3.4.1.44\":\n        return {\n          name: \"AES-CFB\",\n          length: 256\n        };\n\n      case \"2.16.840.1.101.3.4.1.5\":\n        return {\n          name: \"AES-KW\",\n          length: 128\n        };\n\n      case \"2.16.840.1.101.3.4.1.25\":\n        return {\n          name: \"AES-KW\",\n          length: 192\n        };\n\n      case \"2.16.840.1.101.3.4.1.45\":\n        return {\n          name: \"AES-KW\",\n          length: 256\n        };\n\n      case \"1.2.840.113549.2.7\":\n        return {\n          name: \"HMAC\",\n          hash: {\n            name: \"SHA-1\"\n          }\n        };\n\n      case \"1.2.840.113549.2.9\":\n        return {\n          name: \"HMAC\",\n          hash: {\n            name: \"SHA-256\"\n          }\n        };\n\n      case \"1.2.840.113549.2.10\":\n        return {\n          name: \"HMAC\",\n          hash: {\n            name: \"SHA-384\"\n          }\n        };\n\n      case \"1.2.840.113549.2.11\":\n        return {\n          name: \"HMAC\",\n          hash: {\n            name: \"SHA-512\"\n          }\n        };\n\n      case \"1.2.840.113549.1.9.16.3.5\":\n        return {\n          name: \"DH\"\n        };\n\n      case \"1.3.14.3.2.26\":\n        return {\n          name: \"SHA-1\"\n        };\n\n      case \"2.16.840.1.101.3.4.2.1\":\n        return {\n          name: \"SHA-256\"\n        };\n\n      case \"2.16.840.1.101.3.4.2.2\":\n        return {\n          name: \"SHA-384\"\n        };\n\n      case \"2.16.840.1.101.3.4.2.3\":\n        return {\n          name: \"SHA-512\"\n        };\n\n      case \"1.2.840.113549.1.5.12\":\n        return {\n          name: \"PBKDF2\"\n        };\n      //region Special case - OIDs for ECC curves\n\n      case \"1.2.840.10045.3.1.7\":\n        return {\n          name: \"P-256\"\n        };\n\n      case \"1.3.132.0.34\":\n        return {\n          name: \"P-384\"\n        };\n\n      case \"1.3.132.0.35\":\n        return {\n          name: \"P-521\"\n        };\n      //endregion\n\n      default:\n    }\n\n    return {};\n  } //**********************************************************************************\n\n  /**\r\n   * Get OID for each specific algorithm\r\n   * @param {Object} algorithm\r\n   * @returns {string}\r\n   */\n\n\n  getOIDByAlgorithm(algorithm) {\n    let result = \"\";\n\n    switch (algorithm.name.toUpperCase()) {\n      case \"RSASSA-PKCS1-V1_5\":\n        switch (algorithm.hash.name.toUpperCase()) {\n          case \"SHA-1\":\n            result = \"1.2.840.113549.1.1.5\";\n            break;\n\n          case \"SHA-256\":\n            result = \"1.2.840.113549.1.1.11\";\n            break;\n\n          case \"SHA-384\":\n            result = \"1.2.840.113549.1.1.12\";\n            break;\n\n          case \"SHA-512\":\n            result = \"1.2.840.113549.1.1.13\";\n            break;\n\n          default:\n        }\n\n        break;\n\n      case \"RSA-PSS\":\n        result = \"1.2.840.113549.1.1.10\";\n        break;\n\n      case \"RSA-OAEP\":\n        result = \"1.2.840.113549.1.1.7\";\n        break;\n\n      case \"ECDSA\":\n        switch (algorithm.hash.name.toUpperCase()) {\n          case \"SHA-1\":\n            result = \"1.2.840.10045.4.1\";\n            break;\n\n          case \"SHA-256\":\n            result = \"1.2.840.10045.4.3.2\";\n            break;\n\n          case \"SHA-384\":\n            result = \"1.2.840.10045.4.3.3\";\n            break;\n\n          case \"SHA-512\":\n            result = \"1.2.840.10045.4.3.4\";\n            break;\n\n          default:\n        }\n\n        break;\n\n      case \"ECDH\":\n        switch (algorithm.kdf.toUpperCase()) {\n          // Non-standard addition - hash algorithm of KDF function\n          case \"SHA-1\":\n            result = \"1.3.133.16.840.63.0.2\"; // dhSinglePass-stdDH-sha1kdf-scheme\n\n            break;\n\n          case \"SHA-256\":\n            result = \"1.3.132.1.11.1\"; // dhSinglePass-stdDH-sha256kdf-scheme\n\n            break;\n\n          case \"SHA-384\":\n            result = \"1.3.132.1.11.2\"; // dhSinglePass-stdDH-sha384kdf-scheme\n\n            break;\n\n          case \"SHA-512\":\n            result = \"1.3.132.1.11.3\"; // dhSinglePass-stdDH-sha512kdf-scheme\n\n            break;\n\n          default:\n        }\n\n        break;\n\n      case \"AES-CTR\":\n        break;\n\n      case \"AES-CBC\":\n        switch (algorithm.length) {\n          case 128:\n            result = \"2.16.840.1.101.3.4.1.2\";\n            break;\n\n          case 192:\n            result = \"2.16.840.1.101.3.4.1.22\";\n            break;\n\n          case 256:\n            result = \"2.16.840.1.101.3.4.1.42\";\n            break;\n\n          default:\n        }\n\n        break;\n\n      case \"AES-CMAC\":\n        break;\n\n      case \"AES-GCM\":\n        switch (algorithm.length) {\n          case 128:\n            result = \"2.16.840.1.101.3.4.1.6\";\n            break;\n\n          case 192:\n            result = \"2.16.840.1.101.3.4.1.26\";\n            break;\n\n          case 256:\n            result = \"2.16.840.1.101.3.4.1.46\";\n            break;\n\n          default:\n        }\n\n        break;\n\n      case \"AES-CFB\":\n        switch (algorithm.length) {\n          case 128:\n            result = \"2.16.840.1.101.3.4.1.4\";\n            break;\n\n          case 192:\n            result = \"2.16.840.1.101.3.4.1.24\";\n            break;\n\n          case 256:\n            result = \"2.16.840.1.101.3.4.1.44\";\n            break;\n\n          default:\n        }\n\n        break;\n\n      case \"AES-KW\":\n        switch (algorithm.length) {\n          case 128:\n            result = \"2.16.840.1.101.3.4.1.5\";\n            break;\n\n          case 192:\n            result = \"2.16.840.1.101.3.4.1.25\";\n            break;\n\n          case 256:\n            result = \"2.16.840.1.101.3.4.1.45\";\n            break;\n\n          default:\n        }\n\n        break;\n\n      case \"HMAC\":\n        switch (algorithm.hash.name.toUpperCase()) {\n          case \"SHA-1\":\n            result = \"1.2.840.113549.2.7\";\n            break;\n\n          case \"SHA-256\":\n            result = \"1.2.840.113549.2.9\";\n            break;\n\n          case \"SHA-384\":\n            result = \"1.2.840.113549.2.10\";\n            break;\n\n          case \"SHA-512\":\n            result = \"1.2.840.113549.2.11\";\n            break;\n\n          default:\n        }\n\n        break;\n\n      case \"DH\":\n        result = \"1.2.840.113549.1.9.16.3.5\";\n        break;\n\n      case \"SHA-1\":\n        result = \"1.3.14.3.2.26\";\n        break;\n\n      case \"SHA-256\":\n        result = \"2.16.840.1.101.3.4.2.1\";\n        break;\n\n      case \"SHA-384\":\n        result = \"2.16.840.1.101.3.4.2.2\";\n        break;\n\n      case \"SHA-512\":\n        result = \"2.16.840.1.101.3.4.2.3\";\n        break;\n\n      case \"CONCAT\":\n        break;\n\n      case \"HKDF\":\n        break;\n\n      case \"PBKDF2\":\n        result = \"1.2.840.113549.1.5.12\";\n        break;\n      //region Special case - OIDs for ECC curves\n\n      case \"P-256\":\n        result = \"1.2.840.10045.3.1.7\";\n        break;\n\n      case \"P-384\":\n        result = \"1.3.132.0.34\";\n        break;\n\n      case \"P-521\":\n        result = \"1.3.132.0.35\";\n        break;\n      //endregion\n\n      default:\n    }\n\n    return result;\n  } //**********************************************************************************\n\n  /**\r\n   * Get default algorithm parameters for each kind of operation\r\n   * @param {string} algorithmName Algorithm name to get common parameters for\r\n   * @param {string} operation Kind of operation: \"sign\", \"encrypt\", \"generatekey\", \"importkey\", \"exportkey\", \"verify\"\r\n   * @returns {*}\r\n   */\n\n\n  getAlgorithmParameters(algorithmName, operation) {\n    let result = {\n      algorithm: {},\n      usages: []\n    };\n\n    switch (algorithmName.toUpperCase()) {\n      case \"RSASSA-PKCS1-V1_5\":\n        switch (operation.toLowerCase()) {\n          case \"generatekey\":\n            result = {\n              algorithm: {\n                name: \"RSASSA-PKCS1-v1_5\",\n                modulusLength: 2048,\n                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                hash: {\n                  name: \"SHA-256\"\n                }\n              },\n              usages: [\"sign\", \"verify\"]\n            };\n            break;\n\n          case \"verify\":\n          case \"sign\":\n          case \"importkey\":\n            result = {\n              algorithm: {\n                name: \"RSASSA-PKCS1-v1_5\",\n                hash: {\n                  name: \"SHA-256\"\n                }\n              },\n              usages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\n\n            };\n            break;\n\n          case \"exportkey\":\n          default:\n            return {\n              algorithm: {\n                name: \"RSASSA-PKCS1-v1_5\"\n              },\n              usages: []\n            };\n        }\n\n        break;\n\n      case \"RSA-PSS\":\n        switch (operation.toLowerCase()) {\n          case \"sign\":\n          case \"verify\":\n            result = {\n              algorithm: {\n                name: \"RSA-PSS\",\n                hash: {\n                  name: \"SHA-1\"\n                },\n                saltLength: 20\n              },\n              usages: [\"sign\", \"verify\"]\n            };\n            break;\n\n          case \"generatekey\":\n            result = {\n              algorithm: {\n                name: \"RSA-PSS\",\n                modulusLength: 2048,\n                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                hash: {\n                  name: \"SHA-1\"\n                }\n              },\n              usages: [\"sign\", \"verify\"]\n            };\n            break;\n\n          case \"importkey\":\n            result = {\n              algorithm: {\n                name: \"RSA-PSS\",\n                hash: {\n                  name: \"SHA-1\"\n                }\n              },\n              usages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\n\n            };\n            break;\n\n          case \"exportkey\":\n          default:\n            return {\n              algorithm: {\n                name: \"RSA-PSS\"\n              },\n              usages: []\n            };\n        }\n\n        break;\n\n      case \"RSA-OAEP\":\n        switch (operation.toLowerCase()) {\n          case \"encrypt\":\n          case \"decrypt\":\n            result = {\n              algorithm: {\n                name: \"RSA-OAEP\"\n              },\n              usages: [\"encrypt\", \"decrypt\"]\n            };\n            break;\n\n          case \"generatekey\":\n            result = {\n              algorithm: {\n                name: \"RSA-OAEP\",\n                modulusLength: 2048,\n                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                hash: {\n                  name: \"SHA-256\"\n                }\n              },\n              usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n            };\n            break;\n\n          case \"importkey\":\n            result = {\n              algorithm: {\n                name: \"RSA-OAEP\",\n                hash: {\n                  name: \"SHA-256\"\n                }\n              },\n              usages: [\"encrypt\"] // encrypt for \"spki\" and decrypt for \"pkcs8\"\n\n            };\n            break;\n\n          case \"exportkey\":\n          default:\n            return {\n              algorithm: {\n                name: \"RSA-OAEP\"\n              },\n              usages: []\n            };\n        }\n\n        break;\n\n      case \"ECDSA\":\n        switch (operation.toLowerCase()) {\n          case \"generatekey\":\n            result = {\n              algorithm: {\n                name: \"ECDSA\",\n                namedCurve: \"P-256\"\n              },\n              usages: [\"sign\", \"verify\"]\n            };\n            break;\n\n          case \"importkey\":\n            result = {\n              algorithm: {\n                name: \"ECDSA\",\n                namedCurve: \"P-256\"\n              },\n              usages: [\"verify\"] // \"sign\" for \"pkcs8\"\n\n            };\n            break;\n\n          case \"verify\":\n          case \"sign\":\n            result = {\n              algorithm: {\n                name: \"ECDSA\",\n                hash: {\n                  name: \"SHA-256\"\n                }\n              },\n              usages: [\"sign\"]\n            };\n            break;\n\n          default:\n            return {\n              algorithm: {\n                name: \"ECDSA\"\n              },\n              usages: []\n            };\n        }\n\n        break;\n\n      case \"ECDH\":\n        switch (operation.toLowerCase()) {\n          case \"exportkey\":\n          case \"importkey\":\n          case \"generatekey\":\n            result = {\n              algorithm: {\n                name: \"ECDH\",\n                namedCurve: \"P-256\"\n              },\n              usages: [\"deriveKey\", \"deriveBits\"]\n            };\n            break;\n\n          case \"derivekey\":\n          case \"derivebits\":\n            result = {\n              algorithm: {\n                name: \"ECDH\",\n                namedCurve: \"P-256\",\n                public: [] // Must be a \"publicKey\"\n\n              },\n              usages: [\"encrypt\", \"decrypt\"]\n            };\n            break;\n\n          default:\n            return {\n              algorithm: {\n                name: \"ECDH\"\n              },\n              usages: []\n            };\n        }\n\n        break;\n\n      case \"AES-CTR\":\n        switch (operation.toLowerCase()) {\n          case \"importkey\":\n          case \"exportkey\":\n          case \"generatekey\":\n            result = {\n              algorithm: {\n                name: \"AES-CTR\",\n                length: 256\n              },\n              usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n            };\n            break;\n\n          case \"decrypt\":\n          case \"encrypt\":\n            result = {\n              algorithm: {\n                name: \"AES-CTR\",\n                counter: new Uint8Array(16),\n                length: 10\n              },\n              usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n            };\n            break;\n\n          default:\n            return {\n              algorithm: {\n                name: \"AES-CTR\"\n              },\n              usages: []\n            };\n        }\n\n        break;\n\n      case \"AES-CBC\":\n        switch (operation.toLowerCase()) {\n          case \"importkey\":\n          case \"exportkey\":\n          case \"generatekey\":\n            result = {\n              algorithm: {\n                name: \"AES-CBC\",\n                length: 256\n              },\n              usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n            };\n            break;\n\n          case \"decrypt\":\n          case \"encrypt\":\n            result = {\n              algorithm: {\n                name: \"AES-CBC\",\n                iv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\n\n              },\n              usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n            };\n            break;\n\n          default:\n            return {\n              algorithm: {\n                name: \"AES-CBC\"\n              },\n              usages: []\n            };\n        }\n\n        break;\n\n      case \"AES-GCM\":\n        switch (operation.toLowerCase()) {\n          case \"importkey\":\n          case \"exportkey\":\n          case \"generatekey\":\n            result = {\n              algorithm: {\n                name: \"AES-GCM\",\n                length: 256\n              },\n              usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n            };\n            break;\n\n          case \"decrypt\":\n          case \"encrypt\":\n            result = {\n              algorithm: {\n                name: \"AES-GCM\",\n                iv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\n\n              },\n              usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n            };\n            break;\n\n          default:\n            return {\n              algorithm: {\n                name: \"AES-GCM\"\n              },\n              usages: []\n            };\n        }\n\n        break;\n\n      case \"AES-KW\":\n        switch (operation.toLowerCase()) {\n          case \"importkey\":\n          case \"exportkey\":\n          case \"generatekey\":\n          case \"wrapkey\":\n          case \"unwrapkey\":\n            result = {\n              algorithm: {\n                name: \"AES-KW\",\n                length: 256\n              },\n              usages: [\"wrapKey\", \"unwrapKey\"]\n            };\n            break;\n\n          default:\n            return {\n              algorithm: {\n                name: \"AES-KW\"\n              },\n              usages: []\n            };\n        }\n\n        break;\n\n      case \"HMAC\":\n        switch (operation.toLowerCase()) {\n          case \"sign\":\n          case \"verify\":\n            result = {\n              algorithm: {\n                name: \"HMAC\"\n              },\n              usages: [\"sign\", \"verify\"]\n            };\n            break;\n\n          case \"importkey\":\n          case \"exportkey\":\n          case \"generatekey\":\n            result = {\n              algorithm: {\n                name: \"HMAC\",\n                length: 32,\n                hash: {\n                  name: \"SHA-256\"\n                }\n              },\n              usages: [\"sign\", \"verify\"]\n            };\n            break;\n\n          default:\n            return {\n              algorithm: {\n                name: \"HMAC\"\n              },\n              usages: []\n            };\n        }\n\n        break;\n\n      case \"HKDF\":\n        switch (operation.toLowerCase()) {\n          case \"derivekey\":\n            result = {\n              algorithm: {\n                name: \"HKDF\",\n                hash: \"SHA-256\",\n                salt: new Uint8Array([]),\n                info: new Uint8Array([])\n              },\n              usages: [\"encrypt\", \"decrypt\"]\n            };\n            break;\n\n          default:\n            return {\n              algorithm: {\n                name: \"HKDF\"\n              },\n              usages: []\n            };\n        }\n\n        break;\n\n      case \"PBKDF2\":\n        switch (operation.toLowerCase()) {\n          case \"derivekey\":\n            result = {\n              algorithm: {\n                name: \"PBKDF2\",\n                hash: {\n                  name: \"SHA-256\"\n                },\n                salt: new Uint8Array([]),\n                iterations: 10000\n              },\n              usages: [\"encrypt\", \"decrypt\"]\n            };\n            break;\n\n          default:\n            return {\n              algorithm: {\n                name: \"PBKDF2\"\n              },\n              usages: []\n            };\n        }\n\n        break;\n\n      default:\n    }\n\n    return result;\n  } //**********************************************************************************\n\n  /**\r\n   * Getting hash algorithm by signature algorithm\r\n   * @param {AlgorithmIdentifier} signatureAlgorithm Signature algorithm\r\n   * @returns {string}\r\n   */\n\n\n  getHashAlgorithm(signatureAlgorithm) {\n    let result = \"\";\n\n    switch (signatureAlgorithm.algorithmId) {\n      case \"1.2.840.10045.4.1\": // ecdsa-with-SHA1\n\n      case \"1.2.840.113549.1.1.5\":\n        result = \"SHA-1\";\n        break;\n\n      case \"1.2.840.10045.4.3.2\": // ecdsa-with-SHA256\n\n      case \"1.2.840.113549.1.1.11\":\n        result = \"SHA-256\";\n        break;\n\n      case \"1.2.840.10045.4.3.3\": // ecdsa-with-SHA384\n\n      case \"1.2.840.113549.1.1.12\":\n        result = \"SHA-384\";\n        break;\n\n      case \"1.2.840.10045.4.3.4\": // ecdsa-with-SHA512\n\n      case \"1.2.840.113549.1.1.13\":\n        result = \"SHA-512\";\n        break;\n\n      case \"1.2.840.113549.1.1.10\":\n        // RSA-PSS\n        {\n          try {\n            const params = new RSASSAPSSParams({\n              schema: signatureAlgorithm.algorithmParams\n            });\n\n            if (\"hashAlgorithm\" in params) {\n              const algorithm = this.getAlgorithmByOID(params.hashAlgorithm.algorithmId);\n              if (\"name\" in algorithm === false) return \"\";\n              result = algorithm.name;\n            } else result = \"SHA-1\";\n          } catch (ex) {}\n        }\n        break;\n\n      default:\n    }\n\n    return result;\n  } //**********************************************************************************\n\n  /**\r\n   * Specialized function encrypting \"EncryptedContentInfo\" object using parameters\r\n   * @param {Object} parameters\r\n   * @returns {Promise}\r\n   */\n\n\n  encryptEncryptedContentInfo(parameters) {\n    //region Check for input parameters\n    if (parameters instanceof Object === false) return Promise.reject(\"Parameters must have type \\\"Object\\\"\");\n    if (\"password\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\n    if (\"contentEncryptionAlgorithm\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"contentEncryptionAlgorithm\\\"\");\n    if (\"hmacHashAlgorithm\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"hmacHashAlgorithm\\\"\");\n    if (\"iterationCount\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\n    if (\"contentToEncrypt\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"contentToEncrypt\\\"\");\n    if (\"contentType\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"contentType\\\"\");\n    const contentEncryptionOID = this.getOIDByAlgorithm(parameters.contentEncryptionAlgorithm);\n    if (contentEncryptionOID === \"\") return Promise.reject(\"Wrong \\\"contentEncryptionAlgorithm\\\" value\");\n    const pbkdf2OID = this.getOIDByAlgorithm({\n      name: \"PBKDF2\"\n    });\n    if (pbkdf2OID === \"\") return Promise.reject(\"Can not find OID for PBKDF2\");\n    const hmacOID = this.getOIDByAlgorithm({\n      name: \"HMAC\",\n      hash: {\n        name: parameters.hmacHashAlgorithm\n      }\n    });\n    if (hmacOID === \"\") return Promise.reject(`Incorrect value for \"hmacHashAlgorithm\": ${parameters.hmacHashAlgorithm}`); //endregion\n    //region Initial variables\n\n    let sequence = Promise.resolve();\n    const ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long\n\n    const ivView = new Uint8Array(ivBuffer);\n    this.getRandomValues(ivView);\n    const saltBuffer = new ArrayBuffer(64);\n    const saltView = new Uint8Array(saltBuffer);\n    this.getRandomValues(saltView);\n    const contentView = new Uint8Array(parameters.contentToEncrypt);\n    const pbkdf2Params = new PBKDF2Params({\n      salt: new asn1js.OctetString({\n        valueHex: saltBuffer\n      }),\n      iterationCount: parameters.iterationCount,\n      prf: new AlgorithmIdentifier({\n        algorithmId: hmacOID,\n        algorithmParams: new asn1js.Null()\n      })\n    }); //endregion\n    //region Derive PBKDF2 key from \"password\" buffer\n\n    sequence = sequence.then(() => {\n      const passwordView = new Uint8Array(parameters.password);\n      return this.importKey(\"raw\", passwordView, \"PBKDF2\", false, [\"deriveKey\"]);\n    }, error => Promise.reject(error)); //endregion\n    //region Derive key for \"contentEncryptionAlgorithm\"\n\n    sequence = sequence.then(result => this.deriveKey({\n      name: \"PBKDF2\",\n      hash: {\n        name: parameters.hmacHashAlgorithm\n      },\n      salt: saltView,\n      iterations: parameters.iterationCount\n    }, result, parameters.contentEncryptionAlgorithm, false, [\"encrypt\"]), error => Promise.reject(error)); //endregion\n    //region Encrypt content\n\n    sequence = sequence.then(result => this.encrypt({\n      name: parameters.contentEncryptionAlgorithm.name,\n      iv: ivView\n    }, result, contentView), error => Promise.reject(error)); //endregion\n    //region Store all parameters in EncryptedData object\n\n    sequence = sequence.then(result => {\n      const pbes2Parameters = new PBES2Params({\n        keyDerivationFunc: new AlgorithmIdentifier({\n          algorithmId: pbkdf2OID,\n          algorithmParams: pbkdf2Params.toSchema()\n        }),\n        encryptionScheme: new AlgorithmIdentifier({\n          algorithmId: contentEncryptionOID,\n          algorithmParams: new asn1js.OctetString({\n            valueHex: ivBuffer\n          })\n        })\n      });\n      return new EncryptedContentInfo({\n        contentType: parameters.contentType,\n        contentEncryptionAlgorithm: new AlgorithmIdentifier({\n          algorithmId: \"1.2.840.113549.1.5.13\",\n          // pkcs5PBES2\n          algorithmParams: pbes2Parameters.toSchema()\n        }),\n        encryptedContent: new asn1js.OctetString({\n          valueHex: result\n        })\n      });\n    }, error => Promise.reject(error)); //endregion\n\n    return sequence;\n  } //**********************************************************************************\n\n  /**\r\n   * Decrypt data stored in \"EncryptedContentInfo\" object using parameters\r\n   * @param parameters\r\n   * @return {Promise}\r\n   */\n\n\n  decryptEncryptedContentInfo(parameters) {\n    //region Check for input parameters\n    if (parameters instanceof Object === false) return Promise.reject(\"Parameters must have type \\\"Object\\\"\");\n    if (\"password\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\n    if (\"encryptedContentInfo\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"encryptedContentInfo\\\"\");\n    if (parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId !== \"1.2.840.113549.1.5.13\") // pkcs5PBES2\n      return Promise.reject(`Unknown \"contentEncryptionAlgorithm\": ${parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`); //endregion\n    //region Initial variables\n\n    let sequence = Promise.resolve();\n    let pbes2Parameters;\n\n    try {\n      pbes2Parameters = new PBES2Params({\n        schema: parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams\n      });\n    } catch (ex) {\n      return Promise.reject(\"Incorrectly encoded \\\"pbes2Parameters\\\"\");\n    }\n\n    let pbkdf2Params;\n\n    try {\n      pbkdf2Params = new PBKDF2Params({\n        schema: pbes2Parameters.keyDerivationFunc.algorithmParams\n      });\n    } catch (ex) {\n      return Promise.reject(\"Incorrectly encoded \\\"pbkdf2Params\\\"\");\n    }\n\n    const contentEncryptionAlgorithm = this.getAlgorithmByOID(pbes2Parameters.encryptionScheme.algorithmId);\n    if (\"name\" in contentEncryptionAlgorithm === false) return Promise.reject(`Incorrect OID for \"contentEncryptionAlgorithm\": ${pbes2Parameters.encryptionScheme.algorithmId}`);\n    const ivBuffer = pbes2Parameters.encryptionScheme.algorithmParams.valueBlock.valueHex;\n    const ivView = new Uint8Array(ivBuffer);\n    const saltBuffer = pbkdf2Params.salt.valueBlock.valueHex;\n    const saltView = new Uint8Array(saltBuffer);\n    const iterationCount = pbkdf2Params.iterationCount;\n    let hmacHashAlgorithm = \"SHA-1\";\n\n    if (\"prf\" in pbkdf2Params) {\n      const algorithm = this.getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\n      if (\"name\" in algorithm === false) return Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\n      hmacHashAlgorithm = algorithm.hash.name;\n    } //endregion\n    //region Derive PBKDF2 key from \"password\" buffer\n\n\n    sequence = sequence.then(() => this.importKey(\"raw\", parameters.password, \"PBKDF2\", false, [\"deriveKey\"]), error => Promise.reject(error)); //endregion\n    //region Derive key for \"contentEncryptionAlgorithm\"\n\n    sequence = sequence.then(result => this.deriveKey({\n      name: \"PBKDF2\",\n      hash: {\n        name: hmacHashAlgorithm\n      },\n      salt: saltView,\n      iterations: iterationCount\n    }, result, contentEncryptionAlgorithm, false, [\"decrypt\"]), error => Promise.reject(error)); //endregion\n    //region Decrypt internal content using derived key\n\n    sequence = sequence.then(result => {\n      //region Create correct data block for decryption\n      let dataBuffer = new ArrayBuffer(0);\n      if (parameters.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false) dataBuffer = parameters.encryptedContentInfo.encryptedContent.valueBlock.valueHex;else {\n        for (const content of parameters.encryptedContentInfo.encryptedContent.valueBlock.value) dataBuffer = utilConcatBuf(dataBuffer, content.valueBlock.valueHex);\n      } //endregion\n\n      return this.decrypt({\n        name: contentEncryptionAlgorithm.name,\n        iv: ivView\n      }, result, dataBuffer);\n    }, error => Promise.reject(error)); //endregion\n\n    return sequence;\n  } //**********************************************************************************\n\n  /**\r\n   * Stamping (signing) data using algorithm simular to HMAC\r\n   * @param {Object} parameters\r\n   * @return {Promise.<T>|Promise}\r\n   */\n\n\n  stampDataWithPassword(parameters) {\n    //region Check for input parameters\n    if (parameters instanceof Object === false) return Promise.reject(\"Parameters must have type \\\"Object\\\"\");\n    if (\"password\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\n    if (\"hashAlgorithm\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\n    if (\"salt\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\n    if (\"iterationCount\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\n    if (\"contentToStamp\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"contentToStamp\\\"\"); //endregion\n    //region Choose correct length for HMAC key\n\n    let length;\n\n    switch (parameters.hashAlgorithm.toLowerCase()) {\n      case \"sha-1\":\n        length = 160;\n        break;\n\n      case \"sha-256\":\n        length = 256;\n        break;\n\n      case \"sha-384\":\n        length = 384;\n        break;\n\n      case \"sha-512\":\n        length = 512;\n        break;\n\n      default:\n        return Promise.reject(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\n    } //endregion\n    //region Initial variables\n\n\n    let sequence = Promise.resolve();\n    const hmacAlgorithm = {\n      name: \"HMAC\",\n      length,\n      hash: {\n        name: parameters.hashAlgorithm\n      }\n    }; //endregion\n    //region Create PKCS#12 key for integrity checking\n\n    sequence = sequence.then(() => makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount)); //endregion\n    //region Import HMAC key\n    // noinspection JSCheckFunctionSignatures\n\n    sequence = sequence.then(result => this.importKey(\"raw\", new Uint8Array(result), hmacAlgorithm, false, [\"sign\"])); //endregion\n    //region Make signed HMAC value\n\n    sequence = sequence.then(result => this.sign(hmacAlgorithm, result, new Uint8Array(parameters.contentToStamp)), error => Promise.reject(error)); //endregion\n\n    return sequence;\n  } //**********************************************************************************\n\n\n  verifyDataStampedWithPassword(parameters) {\n    //region Check for input parameters\n    if (parameters instanceof Object === false) return Promise.reject(\"Parameters must have type \\\"Object\\\"\");\n    if (\"password\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\n    if (\"hashAlgorithm\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\n    if (\"salt\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\n    if (\"iterationCount\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\n    if (\"contentToVerify\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"contentToVerify\\\"\");\n    if (\"signatureToVerify\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"signatureToVerify\\\"\"); //endregion\n    //region Choose correct length for HMAC key\n\n    let length;\n\n    switch (parameters.hashAlgorithm.toLowerCase()) {\n      case \"sha-1\":\n        length = 160;\n        break;\n\n      case \"sha-256\":\n        length = 256;\n        break;\n\n      case \"sha-384\":\n        length = 384;\n        break;\n\n      case \"sha-512\":\n        length = 512;\n        break;\n\n      default:\n        return Promise.reject(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\n    } //endregion\n    //region Initial variables\n\n\n    let sequence = Promise.resolve();\n    const hmacAlgorithm = {\n      name: \"HMAC\",\n      length,\n      hash: {\n        name: parameters.hashAlgorithm\n      }\n    }; //endregion\n    //region Create PKCS#12 key for integrity checking\n\n    sequence = sequence.then(() => makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount)); //endregion\n    //region Import HMAC key\n    // noinspection JSCheckFunctionSignatures\n\n    sequence = sequence.then(result => this.importKey(\"raw\", new Uint8Array(result), hmacAlgorithm, false, [\"verify\"])); //endregion\n    //region Make signed HMAC value\n\n    sequence = sequence.then(result => this.verify(hmacAlgorithm, result, new Uint8Array(parameters.signatureToVerify), new Uint8Array(parameters.contentToVerify)), error => Promise.reject(error)); //endregion\n\n    return sequence;\n  } //**********************************************************************************\n\n  /**\r\n   * Get signature parameters by analyzing private key algorithm\r\n   * @param {Object} privateKey The private key user would like to use\r\n   * @param {string} [hashAlgorithm=\"SHA-1\"] Hash algorithm user would like to use\r\n   * @return {Promise.<T>|Promise}\r\n   */\n\n\n  getSignatureParameters(privateKey, hashAlgorithm = \"SHA-1\") {\n    //region Check hashing algorithm\n    const oid = this.getOIDByAlgorithm({\n      name: hashAlgorithm\n    });\n    if (oid === \"\") return Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`); //endregion\n    //region Initial variables\n\n    const signatureAlgorithm = new AlgorithmIdentifier(); //endregion\n    //region Get a \"default parameters\" for current algorithm\n\n    const parameters = this.getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\n    parameters.algorithm.hash.name = hashAlgorithm; //endregion\n    //region Fill internal structures base on \"privateKey\" and \"hashAlgorithm\"\n\n    switch (privateKey.algorithm.name.toUpperCase()) {\n      case \"RSASSA-PKCS1-V1_5\":\n      case \"ECDSA\":\n        signatureAlgorithm.algorithmId = this.getOIDByAlgorithm(parameters.algorithm);\n        break;\n\n      case \"RSA-PSS\":\n        {\n          //region Set \"saltLength\" as a length (in octets) of hash function result\n          switch (hashAlgorithm.toUpperCase()) {\n            case \"SHA-256\":\n              parameters.algorithm.saltLength = 32;\n              break;\n\n            case \"SHA-384\":\n              parameters.algorithm.saltLength = 48;\n              break;\n\n            case \"SHA-512\":\n              parameters.algorithm.saltLength = 64;\n              break;\n\n            default:\n          } //endregion\n          //region Fill \"RSASSA_PSS_params\" object\n\n\n          const paramsObject = {};\n\n          if (hashAlgorithm.toUpperCase() !== \"SHA-1\") {\n            const hashAlgorithmOID = this.getOIDByAlgorithm({\n              name: hashAlgorithm\n            });\n            if (hashAlgorithmOID === \"\") return Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\n            paramsObject.hashAlgorithm = new AlgorithmIdentifier({\n              algorithmId: hashAlgorithmOID,\n              algorithmParams: new asn1js.Null()\n            });\n            paramsObject.maskGenAlgorithm = new AlgorithmIdentifier({\n              algorithmId: \"1.2.840.113549.1.1.8\",\n              // MGF1\n              algorithmParams: paramsObject.hashAlgorithm.toSchema()\n            });\n          }\n\n          if (parameters.algorithm.saltLength !== 20) paramsObject.saltLength = parameters.algorithm.saltLength;\n          const pssParameters = new RSASSAPSSParams(paramsObject); //endregion\n          //region Automatically set signature algorithm\n\n          signatureAlgorithm.algorithmId = \"1.2.840.113549.1.1.10\";\n          signatureAlgorithm.algorithmParams = pssParameters.toSchema(); //endregion\n        }\n        break;\n\n      default:\n        return Promise.reject(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);\n    } //endregion\n\n\n    return Promise.resolve().then(() => ({\n      signatureAlgorithm,\n      parameters\n    }));\n  } //**********************************************************************************\n\n  /**\r\n   * Sign data with pre-defined private key\r\n   * @param {ArrayBuffer} data Data to be signed\r\n   * @param {Object} privateKey Private key to use\r\n   * @param {Object} parameters Parameters for used algorithm\r\n   * @return {Promise.<T>|Promise}\r\n   */\n\n\n  signWithPrivateKey(data, privateKey, parameters) {\n    return this.sign(parameters.algorithm, privateKey, new Uint8Array(data)).then(result => {\n      //region Special case for ECDSA algorithm\n      if (parameters.algorithm.name === \"ECDSA\") result = createCMSECDSASignature(result); //endregion\n\n      return result;\n    }, error => Promise.reject(`Signing error: ${error}`));\n  } //**********************************************************************************\n\n\n  fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm) {\n    const parameters = {}; //region Find signer's hashing algorithm\n\n    const shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\n    if (shaAlgorithm === \"\") return Promise.reject(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`); //endregion\n    //region Get information about public key algorithm and default parameters for import\n\n    let algorithmId;\n    if (signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\") algorithmId = signatureAlgorithm.algorithmId;else algorithmId = publicKeyInfo.algorithm.algorithmId;\n    const algorithmObject = this.getAlgorithmByOID(algorithmId);\n    if (\"name\" in algorithmObject === \"\") return Promise.reject(`Unsupported public key algorithm: ${signatureAlgorithm.algorithmId}`);\n    parameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importkey\");\n    if (\"hash\" in parameters.algorithm.algorithm) parameters.algorithm.algorithm.hash.name = shaAlgorithm; //region Special case for ECDSA\n\n    if (algorithmObject.name === \"ECDSA\") {\n      //region Get information about named curve\n      let algorithmParamsChecked = false;\n\n      if (\"algorithmParams\" in publicKeyInfo.algorithm === true) {\n        if (\"idBlock\" in publicKeyInfo.algorithm.algorithmParams) {\n          if (publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1 && publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6) algorithmParamsChecked = true;\n        }\n      }\n\n      if (algorithmParamsChecked === false) return Promise.reject(\"Incorrect type for ECDSA public key parameters\");\n      const curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\n      if (\"name\" in curveObject === false) return Promise.reject(`Unsupported named curve algorithm: ${publicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`); //endregion\n\n      parameters.algorithm.algorithm.namedCurve = curveObject.name;\n    } //endregion\n    //endregion\n\n\n    return parameters;\n  } //**********************************************************************************\n\n\n  getPublicKey(publicKeyInfo, signatureAlgorithm, parameters = null) {\n    if (parameters === null) parameters = this.fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm);\n    const publicKeyInfoSchema = publicKeyInfo.toSchema();\n    const publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);\n    const publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);\n    return this.importKey(\"spki\", publicKeyInfoView, parameters.algorithm.algorithm, true, parameters.algorithm.usages);\n  } //**********************************************************************************\n\n\n  verifyWithPublicKey(data, signature, publicKeyInfo, signatureAlgorithm, shaAlgorithm = null) {\n    //region Initial variables\n    let sequence = Promise.resolve(); //endregion\n    //region Find signer's hashing algorithm\n\n    if (shaAlgorithm === null) {\n      shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\n      if (shaAlgorithm === \"\") return Promise.reject(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`); //region Import public key\n\n      sequence = sequence.then(() => this.getPublicKey(publicKeyInfo, signatureAlgorithm)); //endregion\n    } else {\n      const parameters = {}; //region Get information about public key algorithm and default parameters for import\n\n      let algorithmId;\n      if (signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\") algorithmId = signatureAlgorithm.algorithmId;else algorithmId = publicKeyInfo.algorithm.algorithmId;\n      const algorithmObject = this.getAlgorithmByOID(algorithmId);\n      if (\"name\" in algorithmObject === \"\") return Promise.reject(`Unsupported public key algorithm: ${signatureAlgorithm.algorithmId}`);\n      parameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importkey\");\n      if (\"hash\" in parameters.algorithm.algorithm) parameters.algorithm.algorithm.hash.name = shaAlgorithm; //region Special case for ECDSA\n\n      if (algorithmObject.name === \"ECDSA\") {\n        //region Get information about named curve\n        let algorithmParamsChecked = false;\n\n        if (\"algorithmParams\" in publicKeyInfo.algorithm === true) {\n          if (\"idBlock\" in publicKeyInfo.algorithm.algorithmParams) {\n            if (publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1 && publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6) algorithmParamsChecked = true;\n          }\n        }\n\n        if (algorithmParamsChecked === false) return Promise.reject(\"Incorrect type for ECDSA public key parameters\");\n        const curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\n        if (\"name\" in curveObject === false) return Promise.reject(`Unsupported named curve algorithm: ${publicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`); //endregion\n\n        parameters.algorithm.algorithm.namedCurve = curveObject.name;\n      } //endregion\n      //endregion\n      //region Import public key\n\n\n      sequence = sequence.then(() => this.getPublicKey(publicKeyInfo, null, parameters)); //endregion\n    } //endregion\n    //region Verify signature\n\n\n    sequence = sequence.then(publicKey => {\n      //region Get default algorithm parameters for verification\n      const algorithm = this.getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\n      if (\"hash\" in algorithm.algorithm) algorithm.algorithm.hash.name = shaAlgorithm; //endregion\n      //region Special case for ECDSA signatures\n\n      let signatureValue = signature.valueBlock.valueHex;\n\n      if (publicKey.algorithm.name === \"ECDSA\") {\n        const asn1 = asn1js.fromBER(signatureValue); // noinspection JSCheckFunctionSignatures\n\n        signatureValue = createECDSASignatureFromCMS(asn1.result);\n      } //endregion\n      //region Special case for RSA-PSS\n\n\n      if (publicKey.algorithm.name === \"RSA-PSS\") {\n        let pssParameters;\n\n        try {\n          pssParameters = new RSASSAPSSParams({\n            schema: signatureAlgorithm.algorithmParams\n          });\n        } catch (ex) {\n          return Promise.reject(ex);\n        }\n\n        if (\"saltLength\" in pssParameters) algorithm.algorithm.saltLength = pssParameters.saltLength;else algorithm.algorithm.saltLength = 20;\n        let hashAlgo = \"SHA-1\";\n\n        if (\"hashAlgorithm\" in pssParameters) {\n          const hashAlgorithm = this.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId);\n          if (\"name\" in hashAlgorithm === false) return Promise.reject(`Unrecognized hash algorithm: ${pssParameters.hashAlgorithm.algorithmId}`);\n          hashAlgo = hashAlgorithm.name;\n        }\n\n        algorithm.algorithm.hash.name = hashAlgo;\n      } //endregion\n\n\n      return this.verify(algorithm.algorithm, publicKey, new Uint8Array(signatureValue), new Uint8Array(data));\n    }); //endregion\n\n    return sequence;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/CryptoEngine.js"],"names":["asn1js","getParametersValue","stringToArrayBuffer","arrayBufferToString","utilConcatBuf","createCMSECDSASignature","createECDSASignatureFromCMS","PublicKeyInfo","PrivateKeyInfo","AlgorithmIdentifier","EncryptedContentInfo","RSASSAPSSParams","PBKDF2Params","PBES2Params","makePKCS12B2Key","cryptoEngine","hashAlgorithm","keyLength","password","salt","iterationCount","u","v","result","toUpperCase","Error","passwordViewInitial","Uint8Array","passwordTransformed","ArrayBuffer","byteLength","passwordTransformedView","i","length","slice","D","dView","saltLength","sLen","Math","ceil","S","sView","saltView","passwordLength","pLen","P","pView","passwordView","sPlusPLength","I","iView","set","c","internalSequence","Promise","resolve","then","_I","dAndI","dAndIView","j","roundBuffer","digest","name","B","bView","k","iRound","sliceStart","sliceLength","chunk","Array","from","x","l","push","resultBuffer","resultView","CryptoEngine","constructor","parameters","crypto","subtle","importKey","format","keyData","algorithm","extractable","keyUsages","jwk","buffer","toLowerCase","asn1","fromBER","offset","reject","publicKeyInfo","fromSchema","ex","hash","alg","kty","ext","key_ops","algorithmId","publicKeyJSON","toJSON","key","Object","keys","privateKeyInfo","privateKeyAlgorithm","privateKeyJSON","JSON","stringify","exportKey","sequence","parse","fromJSON","toSchema","toBER","convert","inputFormat","outputFormat","encrypt","args","decrypt","sign","verify","generateKey","deriveKey","deriveBits","wrapKey","unwrapKey","getRandomValues","view","getAlgorithmByOID","oid","kdf","getOIDByAlgorithm","getAlgorithmParameters","algorithmName","operation","usages","modulusLength","publicExponent","namedCurve","public","counter","iv","info","iterations","getHashAlgorithm","signatureAlgorithm","params","schema","algorithmParams","encryptEncryptedContentInfo","contentEncryptionOID","contentEncryptionAlgorithm","pbkdf2OID","hmacOID","hmacHashAlgorithm","ivBuffer","ivView","saltBuffer","contentView","contentToEncrypt","pbkdf2Params","OctetString","valueHex","prf","Null","error","pbes2Parameters","keyDerivationFunc","encryptionScheme","contentType","encryptedContent","decryptEncryptedContentInfo","encryptedContentInfo","valueBlock","dataBuffer","idBlock","isConstructed","content","value","stampDataWithPassword","hmacAlgorithm","contentToStamp","verifyDataStampedWithPassword","signatureToVerify","contentToVerify","getSignatureParameters","privateKey","paramsObject","hashAlgorithmOID","maskGenAlgorithm","pssParameters","signWithPrivateKey","data","fillPublicKeyParameters","shaAlgorithm","algorithmObject","algorithmParamsChecked","tagClass","tagNumber","curveObject","toString","getPublicKey","publicKeyInfoSchema","publicKeyInfoBuffer","publicKeyInfoView","verifyWithPublicKey","signature","publicKey","signatureValue","hashAlgo"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, stringToArrayBuffer, arrayBufferToString, utilConcatBuf } from \"pvutils\";\r\nimport { createCMSECDSASignature, createECDSASignatureFromCMS } from \"./common.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport RSASSAPSSParams from \"./RSASSAPSSParams.js\";\r\nimport PBKDF2Params from \"./PBKDF2Params.js\";\r\nimport PBES2Params from \"./PBES2Params.js\";\r\n//**************************************************************************************\r\n/**\r\n * Making MAC key using algorithm described in B.2 of PKCS#12 standard.\r\n */\r\nfunction makePKCS12B2Key(cryptoEngine, hashAlgorithm, keyLength, password, salt, iterationCount)\r\n{\r\n\t//region Initial variables\r\n\tlet u;\r\n\tlet v;\r\n\t\r\n\tconst result = [];\r\n\t//endregion\r\n\t\r\n\t//region Get \"u\" and \"v\" values\r\n\tswitch(hashAlgorithm.toUpperCase())\r\n\t{\r\n\t\tcase \"SHA-1\":\r\n\t\t\tu = 20; // 160\r\n\t\t\tv = 64; // 512\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-256\":\r\n\t\t\tu = 32; // 256\r\n\t\t\tv = 64; // 512\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-384\":\r\n\t\t\tu = 48; // 384\r\n\t\t\tv = 128; // 1024\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-512\":\r\n\t\t\tu = 64; // 512\r\n\t\t\tv = 128; // 1024\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(\"Unsupported hashing algorithm\");\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Main algorithm making key\r\n\t//region Transform password to UTF-8 like string\r\n\tconst passwordViewInitial = new Uint8Array(password);\r\n\t\r\n\tconst passwordTransformed = new ArrayBuffer((password.byteLength * 2) + 2);\r\n\tconst passwordTransformedView = new Uint8Array(passwordTransformed);\r\n\t\r\n\tfor(let i = 0; i < passwordViewInitial.length; i++)\r\n\t{\r\n\t\tpasswordTransformedView[i * 2] = 0x00;\r\n\t\tpasswordTransformedView[i * 2 + 1] = passwordViewInitial[i];\r\n\t}\r\n\t\r\n\tpasswordTransformedView[passwordTransformedView.length - 2] = 0x00;\r\n\tpasswordTransformedView[passwordTransformedView.length - 1] = 0x00;\r\n\t\r\n\tpassword = passwordTransformed.slice(0);\r\n\t//endregion\r\n\t\r\n\t//region Construct a string D (the \"diversifier\") by concatenating v/8 copies of ID\r\n\tconst D = new ArrayBuffer(v);\r\n\tconst dView = new Uint8Array(D);\r\n\t\r\n\tfor(let i = 0; i < D.byteLength; i++)\r\n\t\tdView[i] = 3; // The ID value equal to \"3\" for MACing (see B.3 of standard)\r\n\t//endregion\r\n\t\r\n\t//region Concatenate copies of the salt together to create a string S of length v * ceil(s / v) bytes (the final copy of the salt may be trunacted to create S)\r\n\tconst saltLength = salt.byteLength;\r\n\t\r\n\tconst sLen = v * Math.ceil(saltLength / v);\r\n\tconst S = new ArrayBuffer(sLen);\r\n\tconst sView = new Uint8Array(S);\r\n\t\r\n\tconst saltView = new Uint8Array(salt);\r\n\t\r\n\tfor(let i = 0; i < sLen; i++)\r\n\t\tsView[i] = saltView[i % saltLength];\r\n\t//endregion\r\n\t\r\n\t//region Concatenate copies of the password together to create a string P of length v * ceil(p / v) bytes (the final copy of the password may be truncated to create P)\r\n\tconst passwordLength = password.byteLength;\r\n\t\r\n\tconst pLen = v * Math.ceil(passwordLength / v);\r\n\tconst P = new ArrayBuffer(pLen);\r\n\tconst pView = new Uint8Array(P);\r\n\t\r\n\tconst passwordView = new Uint8Array(password);\r\n\t\r\n\tfor(let i = 0; i < pLen; i++)\r\n\t\tpView[i] = passwordView[i % passwordLength];\r\n\t//endregion\r\n\t\r\n\t//region Set I=S||P to be the concatenation of S and P\r\n\tconst sPlusPLength = S.byteLength + P.byteLength;\r\n\t\r\n\tlet I = new ArrayBuffer(sPlusPLength);\r\n\tlet iView = new Uint8Array(I);\r\n\t\r\n\tiView.set(sView);\r\n\tiView.set(pView, sView.length);\r\n\t//endregion\r\n\t\r\n\t//region Set c=ceil(n / u)\r\n\tconst c = Math.ceil((keyLength >> 3) / u);\r\n\t//endregion\r\n\t\r\n\t//region Initial variables\r\n\tlet internalSequence = Promise.resolve(I);\r\n\t//endregion\r\n\t\r\n\t//region For i=1, 2, ..., c, do the following:\r\n\tfor(let i = 0; i <= c; i++)\r\n\t{\r\n\t\tinternalSequence = internalSequence.then(_I =>\r\n\t\t{\r\n\t\t\t//region Create contecanetion of D and I\r\n\t\t\tconst dAndI = new ArrayBuffer(D.byteLength + _I.byteLength);\r\n\t\t\tconst dAndIView = new Uint8Array(dAndI);\r\n\t\t\t\r\n\t\t\tdAndIView.set(dView);\r\n\t\t\tdAndIView.set(iView, dView.length);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn dAndI;\r\n\t\t});\r\n\t\t\r\n\t\t//region Make \"iterationCount\" rounds of hashing\r\n\t\tfor(let j = 0; j < iterationCount; j++)\r\n\t\t\tinternalSequence = internalSequence.then(roundBuffer => cryptoEngine.digest({ name: hashAlgorithm }, new Uint8Array(roundBuffer)));\r\n\t\t//endregion\r\n\t\t\r\n\t\tinternalSequence = internalSequence.then(roundBuffer =>\r\n\t\t{\r\n\t\t\t//region Concatenate copies of Ai to create a string B of length v bits (the final copy of Ai may be truncated to create B)\r\n\t\t\tconst B = new ArrayBuffer(v);\r\n\t\t\tconst bView = new Uint8Array(B);\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < B.byteLength; j++)\r\n\t\t\t\tbView[j] = roundBuffer[j % roundBuffer.length];\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Make new I value\r\n\t\t\tconst k = Math.ceil(saltLength / v) + Math.ceil(passwordLength / v);\r\n\t\t\tconst iRound = [];\r\n\t\t\t\r\n\t\t\tlet sliceStart = 0;\r\n\t\t\tlet sliceLength = v;\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < k; j++)\r\n\t\t\t{\r\n\t\t\t\tconst chunk = Array.from(new Uint8Array(I.slice(sliceStart, sliceStart + sliceLength)));\r\n\t\t\t\tsliceStart += v;\r\n\t\t\t\tif((sliceStart + v) > I.byteLength)\r\n\t\t\t\t\tsliceLength = I.byteLength - sliceStart;\r\n\t\t\t\t\r\n\t\t\t\tlet x = 0x1ff;\r\n\t\t\t\t\r\n\t\t\t\tfor(let l = (B.byteLength - 1); l >= 0; l--)\r\n\t\t\t\t{\r\n\t\t\t\t\tx >>= 8;\r\n\t\t\t\t\tx += bView[l] + chunk[l];\r\n\t\t\t\t\tchunk[l] = (x & 0xff);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tiRound.push(...chunk);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tI = new ArrayBuffer(iRound.length);\r\n\t\t\tiView = new Uint8Array(I);\r\n\t\t\t\r\n\t\t\tiView.set(iRound);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tresult.push(...(new Uint8Array(roundBuffer)));\r\n\t\t\t\r\n\t\t\treturn I;\r\n\t\t});\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Initialize final key\r\n\tinternalSequence = internalSequence.then(() =>\r\n\t{\r\n\t\tconst resultBuffer = new ArrayBuffer(keyLength >> 3);\r\n\t\tconst resultView = new Uint8Array(resultBuffer);\r\n\t\t\r\n\t\tresultView.set((new Uint8Array(result)).slice(0, keyLength >> 3));\r\n\t\t\r\n\t\treturn resultBuffer;\r\n\t});\r\n\t//endregion\r\n\t//endregion\r\n\t\r\n\treturn internalSequence;\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Default cryptographic engine for Web Cryptography API\r\n */\r\nexport default class CryptoEngine\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CryptoEngine class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc Usually here we are expecting \"window.crypto\" or an equivalent from custom \"crypto engine\"\r\n\t\t */\r\n\t\tthis.crypto = getParametersValue(parameters, \"crypto\", {});\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc Usually here we are expecting \"window.crypto.subtle\" or an equivalent from custom \"crypto engine\"\r\n\t\t */\r\n\t\tthis.subtle = getParametersValue(parameters, \"subtle\", {});\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc Name of the \"crypto engine\"\r\n\t\t */\r\n\t\tthis.name = getParametersValue(parameters, \"name\", \"\");\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Import WebCrypto keys from different formats\r\n\t * @param {string} format\r\n\t * @param {ArrayBuffer|Uint8Array} keyData\r\n\t * @param {Object} algorithm\r\n\t * @param {boolean} extractable\r\n\t * @param {Array} keyUsages\r\n\t * @returns {Promise}\r\n\t */\r\n\timportKey(format, keyData, algorithm, extractable, keyUsages)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet jwk = {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Change \"keyData\" type if needed\r\n\t\tif(keyData instanceof Uint8Array)\r\n\t\t\tkeyData = keyData.buffer;\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(format.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\treturn this.subtle.importKey(\"raw\", keyData, algorithm, extractable, keyUsages);\r\n\t\t\tcase \"spki\":\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(keyData);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\r\n\t\t\t\t\tconst publicKeyInfo = new PublicKeyInfo();\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublicKeyInfo.fromSchema(asn1.result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\t\t\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS256\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS384\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS512\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\r\n\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\r\n\t\t\t\t\t\t\t\tif(publicKeyInfo.algorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif((\"alg\" in jwk) === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create RSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"ECDSA\":\r\n\t\t\t\t\t\t\tkeyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"ECDH\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\t\tjwk = {\r\n\t\t\t\t\t\t\t\t\tkty: \"EC\",\r\n\t\t\t\t\t\t\t\t\text: extractable,\r\n\t\t\t\t\t\t\t\t\tkey_ops: keyUsages\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about algorithm\r\n\t\t\t\t\t\t\t\tif(publicKeyInfo.algorithm.algorithmId !== \"1.2.840.10045.2.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyInfo = new PrivateKeyInfo();\r\n\r\n\t\t\t\t\t//region Parse \"PrivateKeyInfo\" object\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(keyData);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprivateKeyInfo.fromSchema(asn1.result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((\"parsedKey\" in privateKeyInfo) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\t\t\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS256\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS384\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS512\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\r\n\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect private key algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif((\"alg\" in jwk) === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"ECDSA\":\r\n\t\t\t\t\t\t\tkeyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"ECDH\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\t\tjwk = {\r\n\t\t\t\t\t\t\t\t\tkty: \"EC\",\r\n\t\t\t\t\t\t\t\t\text: extractable,\r\n\t\t\t\t\t\t\t\t\tkey_ops: keyUsages\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.10045.2.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tjwk = keyData;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect format: ${format}`);\r\n\t\t}\r\n\t\t\r\n\t\t//region Special case for Safari browser (since its acting not as WebCrypto standard describes)\r\n\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t{\r\n\t\t\t// Try to use both ways - import using ArrayBuffer and pure JWK (for Safari Technology Preview)\r\n\t\t\treturn Promise.resolve().then(() => this.subtle.importKey(\"jwk\", stringToArrayBuffer(JSON.stringify(jwk)), algorithm, extractable, keyUsages))\r\n\t\t\t\t.then(result => result, () => this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Export WebCrypto keys to different formats\r\n\t * @param {string} format\r\n\t * @param {Object} key\r\n\t * @returns {Promise}\r\n\t */\r\n\texportKey(format, key)\r\n\t{\r\n\t\tlet sequence = this.subtle.exportKey(\"jwk\", key);\r\n\t\t\r\n\t\t//region Currently Safari returns ArrayBuffer as JWK thus we need an additional transformation\r\n\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t{\r\n\t\t\tsequence = sequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t// Some additional checks for Safari Technology Preview\r\n\t\t\t\tif(result instanceof ArrayBuffer)\r\n\t\t\t\t\treturn JSON.parse(arrayBufferToString(result));\r\n\t\t\t\t\r\n\t\t\t\treturn result;\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(format.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\treturn this.subtle.exportKey(\"raw\", key);\r\n\t\t\tcase \"spki\":\r\n\t\t\t\tsequence = sequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst publicKeyInfo = new PublicKeyInfo();\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublicKeyInfo.fromJSON(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect key data\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn publicKeyInfo.toSchema().toBER(false);\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\tsequence = sequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyInfo = new PrivateKeyInfo();\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprivateKeyInfo.fromJSON(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect key data\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn privateKeyInfo.toSchema().toBER(false);\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect format: ${format}`);\r\n\t\t}\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert WebCrypto keys between different export formats\r\n\t * @param {string} inputFormat\r\n\t * @param {string} outputFormat\r\n\t * @param {ArrayBuffer|Object} keyData\r\n\t * @param {Object} algorithm\r\n\t * @param {boolean} extractable\r\n\t * @param {Array} keyUsages\r\n\t * @returns {Promise}\r\n\t */\r\n\tconvert(inputFormat, outputFormat, keyData, algorithm, extractable, keyUsages)\r\n\t{\r\n\t\tswitch(inputFormat.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"spki\", result));\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"pkcs8\", result));\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"spki\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"spki\", result));\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"pkcs8\", result));\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect inputFormat: ${inputFormat}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"encrypt\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(...args)\r\n\t{\r\n\t\treturn this.subtle.encrypt(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"decrypt\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tdecrypt(...args)\r\n\t{\r\n\t\treturn this.subtle.decrypt(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"sign\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(...args)\r\n\t{\r\n\t\treturn this.subtle.sign(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"verify\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(...args)\r\n\t{\r\n\t\treturn this.subtle.verify(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"digest\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tdigest(...args)\r\n\t{\r\n\t\treturn this.subtle.digest(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"generateKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tgenerateKey(...args)\r\n\t{\r\n\t\treturn this.subtle.generateKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"deriveKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tderiveKey(...args)\r\n\t{\r\n\t\treturn this.subtle.deriveKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"deriveBits\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tderiveBits(...args)\r\n\t{\r\n\t\treturn this.subtle.deriveBits(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"wrapKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\twrapKey(...args)\r\n\t{\r\n\t\treturn this.subtle.wrapKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"unwrapKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tunwrapKey(...args)\r\n\t{\r\n\t\treturn this.subtle.unwrapKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Initialize input Uint8Array by random values (with help from current \"crypto engine\")\r\n\t * @param {!Uint8Array} view\r\n\t * @returns {*}\r\n\t */\r\n\tgetRandomValues(view)\r\n\t{\r\n\t\tif((\"getRandomValues\" in this.crypto) === false)\r\n\t\t\tthrow new Error(\"No support for getRandomValues\");\r\n\t\t\r\n\t\treturn this.crypto.getRandomValues(view);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get WebCrypto algorithm by wel-known OID\r\n\t * @param {string} oid well-known OID to search for\r\n\t * @returns {Object}\r\n\t */\r\n\tgetAlgorithmByOID(oid)\r\n\t{\r\n\t\tswitch(oid)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.1.1\":\r\n\t\t\tcase \"1.2.840.113549.1.1.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.11\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.12\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.13\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.10\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSA-PSS\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.2.1\":\r\n\t\t\tcase \"1.2.840.10045.4.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.4\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.133.16.840.63.0.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-1\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-512\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.22\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.42\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.6\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.26\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.46\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.4\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.24\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.44\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.25\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.45\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.9\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.10\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.11\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.9.16.3.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"DH\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.14.3.2.26\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.5.12\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t};\r\n\t\t\t//region Special case - OIDs for ECC curves\r\n\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-521\"\r\n\t\t\t\t};\r\n\t\t\t//endregion\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn {};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OID for each specific algorithm\r\n\t * @param {Object} algorithm\r\n\t * @returns {string}\r\n\t */\r\n\tgetOIDByAlgorithm(algorithm)\r\n\t{\r\n\t\tlet result = \"\";\r\n\t\t\r\n\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.5\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.11\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.12\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.13\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.1.10\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.1.7\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.1\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.2\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.3\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.4\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDH\":\r\n\t\t\t\tswitch(algorithm.kdf.toUpperCase()) // Non-standard addition - hash algorithm of KDF function\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.3.133.16.840.63.0.2\"; // dhSinglePass-stdDH-sha1kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.1\"; // dhSinglePass-stdDH-sha256kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.2\"; // dhSinglePass-stdDH-sha384kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.3\"; // dhSinglePass-stdDH-sha512kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CTR\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CBC\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.2\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.22\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.42\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CMAC\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-GCM\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.6\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.26\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.46\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CFB\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.4\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.24\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.44\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-KW\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.5\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.25\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.45\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HMAC\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.7\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.9\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.10\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.11\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"DH\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.9.16.3.5\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-1\":\r\n\t\t\t\tresult = \"1.3.14.3.2.26\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-256\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.1\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-384\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.2\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-512\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.3\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"CONCAT\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HKDF\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"PBKDF2\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.5.12\";\r\n\t\t\t\tbreak;\r\n\t\t\t//region Special case - OIDs for ECC curves\r\n\t\t\tcase \"P-256\":\r\n\t\t\t\tresult = \"1.2.840.10045.3.1.7\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"P-384\":\r\n\t\t\t\tresult = \"1.3.132.0.34\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"P-521\":\r\n\t\t\t\tresult = \"1.3.132.0.35\";\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get default algorithm parameters for each kind of operation\r\n\t * @param {string} algorithmName Algorithm name to get common parameters for\r\n\t * @param {string} operation Kind of operation: \"sign\", \"encrypt\", \"generatekey\", \"importkey\", \"exportkey\", \"verify\"\r\n\t * @returns {*}\r\n\t */\r\n\tgetAlgorithmParameters(algorithmName, operation)\r\n\t{\r\n\t\tlet result = {\r\n\t\t\talgorithm: {},\r\n\t\t\tusages: []\r\n\t\t};\r\n\t\t\r\n\t\tswitch(algorithmName.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tsaltLength: 20\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\"] // encrypt for \"spki\" and decrypt for \"pkcs8\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // \"sign\" for \"pkcs8\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDH\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"deriveKey\", \"deriveBits\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\tcase \"derivebits\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\",\r\n\t\t\t\t\t\t\t\tpublic: [] // Must be a \"publicKey\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CTR\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\",\r\n\t\t\t\t\t\t\t\tcounter: new Uint8Array(16),\r\n\t\t\t\t\t\t\t\tlength: 10\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CBC\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\t\t\t\tiv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-GCM\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\t\t\t\tiv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-KW\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\tcase \"wrapkey\":\r\n\t\t\t\t\tcase \"unwrapkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-KW\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HMAC\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\t\t\t\tlength: 32,\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HKDF\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HKDF\",\r\n\t\t\t\t\t\t\t\thash: \"SHA-256\",\r\n\t\t\t\t\t\t\t\tsalt: new Uint8Array([]),\r\n\t\t\t\t\t\t\t\tinfo: new Uint8Array([])\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HKDF\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"PBKDF2\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\t\t\t\thash: { name: \"SHA-256\" },\r\n\t\t\t\t\t\t\t\tsalt: new Uint8Array([]),\r\n\t\t\t\t\t\t\t\titerations: 10000\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getting hash algorithm by signature algorithm\r\n\t * @param {AlgorithmIdentifier} signatureAlgorithm Signature algorithm\r\n\t * @returns {string}\r\n\t */\r\n\tgetHashAlgorithm(signatureAlgorithm)\r\n\t{\r\n\t\tlet result = \"\";\r\n\t\t\r\n\t\tswitch(signatureAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.4.1\": // ecdsa-with-SHA1\r\n\t\t\tcase \"1.2.840.113549.1.1.5\":\r\n\t\t\t\tresult = \"SHA-1\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.2\": // ecdsa-with-SHA256\r\n\t\t\tcase \"1.2.840.113549.1.1.11\":\r\n\t\t\t\tresult = \"SHA-256\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.3\": // ecdsa-with-SHA384\r\n\t\t\tcase \"1.2.840.113549.1.1.12\":\r\n\t\t\t\tresult = \"SHA-384\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.4\": // ecdsa-with-SHA512\r\n\t\t\tcase \"1.2.840.113549.1.1.13\":\r\n\t\t\t\tresult = \"SHA-512\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.10\": // RSA-PSS\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst params = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\r\n\t\t\t\t\t\tif(\"hashAlgorithm\" in params)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst algorithm = this.getAlgorithmByOID(params.hashAlgorithm.algorithmId);\r\n\t\t\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\t\t\treturn \"\";\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tresult = algorithm.name;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tresult = \"SHA-1\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Specialized function encrypting \"EncryptedContentInfo\" object using parameters\r\n\t * @param {Object} parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tencryptEncryptedContentInfo(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"contentEncryptionAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentEncryptionAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"hmacHashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hmacHashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"contentToEncrypt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToEncrypt\\\"\");\r\n\t\t\r\n\t\tif((\"contentType\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentType\\\"\");\r\n\r\n\t\tconst contentEncryptionOID = this.getOIDByAlgorithm(parameters.contentEncryptionAlgorithm);\r\n\t\tif(contentEncryptionOID === \"\")\r\n\t\t\treturn Promise.reject(\"Wrong \\\"contentEncryptionAlgorithm\\\" value\");\r\n\t\t\r\n\t\tconst pbkdf2OID = this.getOIDByAlgorithm({\r\n\t\t\tname: \"PBKDF2\"\r\n\t\t});\r\n\t\tif(pbkdf2OID === \"\")\r\n\t\t\treturn Promise.reject(\"Can not find OID for PBKDF2\");\r\n\t\t\r\n\t\tconst hmacOID = this.getOIDByAlgorithm({\r\n\t\t\tname: \"HMAC\",\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hmacHashAlgorithm\r\n\t\t\t}\r\n\t\t});\r\n\t\tif(hmacOID === \"\")\r\n\t\t\treturn Promise.reject(`Incorrect value for \"hmacHashAlgorithm\": ${parameters.hmacHashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\tthis.getRandomValues(ivView);\r\n\t\t\r\n\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\tthis.getRandomValues(saltView);\r\n\t\t\r\n\t\tconst contentView = new Uint8Array(parameters.contentToEncrypt);\r\n\t\t\r\n\t\tconst pbkdf2Params = new PBKDF2Params({\r\n\t\t\tsalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\titerationCount: parameters.iterationCount,\r\n\t\t\tprf: new AlgorithmIdentifier({\r\n\t\t\t\talgorithmId: hmacOID,\r\n\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t})\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tconst passwordView = new Uint8Array(parameters.password);\r\n\t\t\t\r\n\t\t\treturn this.importKey(\"raw\",\r\n\t\t\t\tpasswordView,\r\n\t\t\t\t\"PBKDF2\",\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"deriveKey\"]);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive key for \"contentEncryptionAlgorithm\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.deriveKey({\r\n\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: parameters.hmacHashAlgorithm\r\n\t\t\t\t},\r\n\t\t\t\tsalt: saltView,\r\n\t\t\t\titerations: parameters.iterationCount\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tparameters.contentEncryptionAlgorithm,\r\n\t\t\tfalse,\r\n\t\t\t[\"encrypt\"]),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Encrypt content\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.encrypt({\r\n\t\t\t\tname: parameters.contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tcontentView),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Store all parameters in EncryptedData object\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tconst pbes2Parameters = new PBES2Params({\r\n\t\t\t\tkeyDerivationFunc: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: pbkdf2OID,\r\n\t\t\t\t\talgorithmParams: pbkdf2Params.toSchema()\r\n\t\t\t\t}),\r\n\t\t\t\tencryptionScheme: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: contentEncryptionOID,\r\n\t\t\t\t\talgorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn new EncryptedContentInfo({\r\n\t\t\t\tcontentType: parameters.contentType,\r\n\t\t\t\tcontentEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: \"1.2.840.113549.1.5.13\", // pkcs5PBES2\r\n\t\t\t\t\talgorithmParams: pbes2Parameters.toSchema()\r\n\t\t\t\t}),\r\n\t\t\t\tencryptedContent: new asn1js.OctetString({ valueHex: result })\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Decrypt data stored in \"EncryptedContentInfo\" object using parameters\r\n\t * @param parameters\r\n\t * @return {Promise}\r\n\t */\r\n\tdecryptEncryptedContentInfo(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"encryptedContentInfo\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"encryptedContentInfo\\\"\");\r\n\r\n\t\tif(parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId !== \"1.2.840.113549.1.5.13\") // pkcs5PBES2\r\n\t\t\treturn Promise.reject(`Unknown \"contentEncryptionAlgorithm\": ${parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet pbes2Parameters;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tpbes2Parameters = new PBES2Params({ schema: parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"pbes2Parameters\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\tlet pbkdf2Params;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tpbkdf2Params = new PBKDF2Params({ schema: pbes2Parameters.keyDerivationFunc.algorithmParams });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"pbkdf2Params\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\tconst contentEncryptionAlgorithm = this.getAlgorithmByOID(pbes2Parameters.encryptionScheme.algorithmId);\r\n\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\treturn Promise.reject(`Incorrect OID for \"contentEncryptionAlgorithm\": ${pbes2Parameters.encryptionScheme.algorithmId}`);\r\n\t\t\r\n\t\tconst ivBuffer = pbes2Parameters.encryptionScheme.algorithmParams.valueBlock.valueHex;\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\t\r\n\t\tconst saltBuffer = pbkdf2Params.salt.valueBlock.valueHex;\r\n\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\r\n\t\tconst iterationCount = pbkdf2Params.iterationCount;\r\n\t\t\r\n\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\t\t\r\n\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t{\r\n\t\t\tconst algorithm = this.getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\t\t\t\r\n\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\tparameters.password,\r\n\t\t\t\t\"PBKDF2\",\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"deriveKey\"]),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive key for \"contentEncryptionAlgorithm\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.deriveKey({\r\n\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t},\r\n\t\t\t\tsalt: saltView,\r\n\t\t\t\titerations: iterationCount\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\tfalse,\r\n\t\t\t[\"decrypt\"]),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Decrypt internal content using derived key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Create correct data block for decryption\r\n\t\t\tlet dataBuffer = new ArrayBuffer(0);\r\n\t\t\t\r\n\t\t\tif(parameters.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\tdataBuffer = parameters.encryptedContentInfo.encryptedContent.valueBlock.valueHex;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor(const content of parameters.encryptedContentInfo.encryptedContent.valueBlock.value)\r\n\t\t\t\t\tdataBuffer = utilConcatBuf(dataBuffer, content.valueBlock.valueHex);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn this.decrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tdataBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Stamping (signing) data using algorithm simular to HMAC\r\n\t * @param {Object} parameters\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tstampDataWithPassword(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"salt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\r\n\t\t\r\n\t\tif((\"contentToStamp\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToStamp\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Choose correct length for HMAC key\r\n\t\tlet length;\r\n\t\t\r\n\t\tswitch(parameters.hashAlgorithm.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"sha-1\":\r\n\t\t\t\tlength = 160;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-256\":\r\n\t\t\t\tlength = 256;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-384\":\r\n\t\t\t\tlength = 384;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-512\":\r\n\t\t\t\tlength = 512;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst hmacAlgorithm = {\r\n\t\t\tname: \"HMAC\",\r\n\t\t\tlength,\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hashAlgorithm\r\n\t\t\t}\r\n\t\t};\r\n\t\t//endregion\r\n\r\n\t\t//region Create PKCS#12 key for integrity checking\r\n\t\tsequence = sequence.then(() => makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Import HMAC key\r\n\t\t// noinspection JSCheckFunctionSignatures\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\t\tnew Uint8Array(result),\r\n\t\t\t\t\thmacAlgorithm,\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\t[\"sign\"])\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make signed HMAC value\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.sign(hmacAlgorithm, result, new Uint8Array(parameters.contentToStamp)),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tverifyDataStampedWithPassword(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"salt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\r\n\t\t\r\n\t\tif((\"contentToVerify\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToVerify\\\"\");\r\n\t\t\r\n\t\tif((\"signatureToVerify\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"signatureToVerify\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Choose correct length for HMAC key\r\n\t\tlet length;\r\n\t\t\r\n\t\tswitch(parameters.hashAlgorithm.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"sha-1\":\r\n\t\t\t\tlength = 160;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-256\":\r\n\t\t\t\tlength = 256;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-384\":\r\n\t\t\t\tlength = 384;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-512\":\r\n\t\t\t\tlength = 512;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst hmacAlgorithm = {\r\n\t\t\tname: \"HMAC\",\r\n\t\t\tlength,\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hashAlgorithm\r\n\t\t\t}\r\n\t\t};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create PKCS#12 key for integrity checking\r\n\t\tsequence = sequence.then(() => makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Import HMAC key\r\n\t\t// noinspection JSCheckFunctionSignatures\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\tnew Uint8Array(result),\r\n\t\t\t\thmacAlgorithm,\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"verify\"])\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make signed HMAC value\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.verify(hmacAlgorithm, result, new Uint8Array(parameters.signatureToVerify), new Uint8Array(parameters.contentToVerify)),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get signature parameters by analyzing private key algorithm\r\n\t * @param {Object} privateKey The private key user would like to use\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hash algorithm user would like to use\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tgetSignatureParameters(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Check hashing algorithm\r\n\t\tconst oid = this.getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\tif(oid === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tconst signatureAlgorithm = new AlgorithmIdentifier();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm\r\n\t\tconst parameters = this.getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\r\n\t\tparameters.algorithm.hash.name = hashAlgorithm;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Fill internal structures base on \"privateKey\" and \"hashAlgorithm\"\r\n\t\tswitch(privateKey.algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tsignatureAlgorithm.algorithmId = this.getOIDByAlgorithm(parameters.algorithm);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Set \"saltLength\" as a length (in octets) of hash function result\r\n\t\t\t\t\tswitch(hashAlgorithm.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 32;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 48;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 64;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Fill \"RSASSA_PSS_params\" object\r\n\t\t\t\t\tconst paramsObject = {};\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(hashAlgorithm.toUpperCase() !== \"SHA-1\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst hashAlgorithmOID = this.getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\t\t\t\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\t\t\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tparamsObject.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tparamsObject.maskGenAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // MGF1\r\n\t\t\t\t\t\t\talgorithmParams: paramsObject.hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(parameters.algorithm.saltLength !== 20)\r\n\t\t\t\t\t\tparamsObject.saltLength = parameters.algorithm.saltLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst pssParameters = new RSASSAPSSParams(paramsObject);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Automatically set signature algorithm\r\n\t\t\t\t\tsignatureAlgorithm.algorithmId = \"1.2.840.113549.1.1.10\";\r\n\t\t\t\t\tsignatureAlgorithm.algorithmParams = pssParameters.toSchema();\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn Promise.resolve().then(() => ({\r\n\t\t\tsignatureAlgorithm,\r\n\t\t\tparameters\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Sign data with pre-defined private key\r\n\t * @param {ArrayBuffer} data Data to be signed\r\n\t * @param {Object} privateKey Private key to use\r\n\t * @param {Object} parameters Parameters for used algorithm\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tsignWithPrivateKey(data, privateKey, parameters)\r\n\t{\r\n\t\treturn this.sign(parameters.algorithm,\r\n\t\t\tprivateKey,\r\n\t\t\tnew Uint8Array(data))\r\n\t\t\t.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Special case for ECDSA algorithm\r\n\t\t\t\tif(parameters.algorithm.name === \"ECDSA\")\r\n\t\t\t\t\tresult = createCMSECDSASignature(result);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn result;\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(`Signing error: ${error}`)\r\n\t\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\tfillPublicKeyParameters(publicKeyInfo, signatureAlgorithm)\r\n\t{\r\n\t\tconst parameters = {};\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tconst shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\r\n\t\tif(shaAlgorithm === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\tlet algorithmId;\r\n\t\tif(signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n\t\t\talgorithmId = signatureAlgorithm.algorithmId;\r\n\t\telse\r\n\t\t\talgorithmId = publicKeyInfo.algorithm.algorithmId;\r\n\t\t\r\n\t\tconst algorithmObject = this.getAlgorithmByOID(algorithmId);\r\n\t\tif((\"name\" in algorithmObject) === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\r\n\t\tparameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importkey\");\r\n\t\tif(\"hash\" in parameters.algorithm.algorithm)\r\n\t\t\tparameters.algorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\r\n\t\t//region Special case for ECDSA\r\n\t\tif(algorithmObject.name === \"ECDSA\")\r\n\t\t{\r\n\t\t\t//region Get information about named curve\r\n\t\t\tlet algorithmParamsChecked = false;\r\n\t\t\t\r\n\t\t\tif((\"algorithmParams\" in publicKeyInfo.algorithm) === true)\r\n\t\t\t{\r\n\t\t\t\tif(\"idBlock\" in publicKeyInfo.algorithm.algorithmParams)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\r\n\t\t\t\t\t\talgorithmParamsChecked = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(algorithmParamsChecked === false)\r\n\t\t\t\treturn Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\t\t\t\r\n\t\t\tconst curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\r\n\t\t\tif((\"name\" in curveObject) === false)\r\n\t\t\t\treturn Promise.reject(`Unsupported named curve algorithm: ${publicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tparameters.algorithm.algorithm.namedCurve = curveObject.name;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn parameters;\r\n\t}\r\n\t//**********************************************************************************\r\n\tgetPublicKey(publicKeyInfo, signatureAlgorithm, parameters = null)\r\n\t{\r\n\t\tif(parameters === null)\r\n\t\t\tparameters = this.fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm);\r\n\t\t\r\n\t\tconst publicKeyInfoSchema = publicKeyInfo.toSchema();\r\n\t\tconst publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);\r\n\t\tconst publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);\r\n\t\t\r\n\t\treturn this.importKey(\"spki\",\r\n\t\t\tpublicKeyInfoView,\r\n\t\t\tparameters.algorithm.algorithm,\r\n\t\t\ttrue,\r\n\t\t\tparameters.algorithm.usages\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\tverifyWithPublicKey(data, signature, publicKeyInfo, signatureAlgorithm, shaAlgorithm = null)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tif(shaAlgorithm === null)\r\n\t\t{\r\n\t\t\tshaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\r\n\t\t\tif(shaAlgorithm === \"\")\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\t//region Import public key\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\tthis.getPublicKey(publicKeyInfo, signatureAlgorithm));\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tconst parameters = {};\r\n\t\t\t\r\n\t\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\t\tlet algorithmId;\r\n\t\t\tif(signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n\t\t\t\talgorithmId = signatureAlgorithm.algorithmId;\r\n\t\t\telse\r\n\t\t\t\talgorithmId = publicKeyInfo.algorithm.algorithmId;\r\n\t\t\t\r\n\t\t\tconst algorithmObject = this.getAlgorithmByOID(algorithmId);\r\n\t\t\tif((\"name\" in algorithmObject) === \"\")\r\n\t\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\tparameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importkey\");\r\n\t\t\tif(\"hash\" in parameters.algorithm.algorithm)\r\n\t\t\t\tparameters.algorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t\r\n\t\t\t//region Special case for ECDSA\r\n\t\t\tif(algorithmObject.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\t//region Get information about named curve\r\n\t\t\t\tlet algorithmParamsChecked = false;\r\n\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in publicKeyInfo.algorithm) === true)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"idBlock\" in publicKeyInfo.algorithm.algorithmParams)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\r\n\t\t\t\t\t\t\talgorithmParamsChecked = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(algorithmParamsChecked === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\t\t\t\t\r\n\t\t\t\tconst curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\r\n\t\t\t\tif((\"name\" in curveObject) === false)\r\n\t\t\t\t\treturn Promise.reject(`Unsupported named curve algorithm: ${publicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tparameters.algorithm.algorithm.namedCurve = curveObject.name;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Import public key\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\tthis.getPublicKey(publicKeyInfo, null, parameters));\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify signature\r\n\t\tsequence = sequence.then(publicKey =>\r\n\t\t{\r\n\t\t\t//region Get default algorithm parameters for verification\r\n\t\t\tconst algorithm = this.getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for ECDSA signatures\r\n\t\t\tlet signatureValue = signature.valueBlock.valueHex;\r\n\t\t\t\r\n\t\t\tif(publicKey.algorithm.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(signatureValue);\r\n\t\t\t\t// noinspection JSCheckFunctionSignatures\r\n\t\t\t\tsignatureValue = createECDSASignatureFromCMS(asn1.result);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for RSA-PSS\r\n\t\t\tif(publicKey.algorithm.name === \"RSA-PSS\")\r\n\t\t\t{\r\n\t\t\t\tlet pssParameters;\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpssParameters = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(ex);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(\"saltLength\" in pssParameters)\r\n\t\t\t\t\talgorithm.algorithm.saltLength = pssParameters.saltLength;\r\n\t\t\t\telse\r\n\t\t\t\t\talgorithm.algorithm.saltLength = 20;\r\n\t\t\t\t\r\n\t\t\t\tlet hashAlgo = \"SHA-1\";\r\n\t\t\t\t\r\n\t\t\t\tif(\"hashAlgorithm\" in pssParameters)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst hashAlgorithm = this.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Unrecognized hash algorithm: ${pssParameters.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\r\n\t\t\t\t\thashAlgo = hashAlgorithm.name;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\talgorithm.algorithm.hash.name = hashAlgo;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn this.verify(algorithm.algorithm,\r\n\t\t\t\tpublicKey,\r\n\t\t\t\tnew Uint8Array(signatureValue),\r\n\t\t\t\tnew Uint8Array(data)\r\n\t\t\t);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}