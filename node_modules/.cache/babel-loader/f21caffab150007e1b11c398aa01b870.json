{"ast":null,"code":"/** @component progress-bar */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nvar ProgressBar = function ProgressBar(props) {\n  var label = props.label,\n      min = props.min,\n      max = props.max,\n      value = props.value,\n      dynamic = props.dynamic,\n      displayFormat = props.displayFormat,\n      color = props.color;\n  var adjustedValue = max - value < 0 ? max : value;\n  var valueFraction = adjustedValue / max * 100 || 0;\n  var meterWidth = valueFraction + '%';\n\n  var getDisplayFormat = function getDisplayFormat() {\n    if (displayFormat === 'none') {\n      return null;\n    } else if (displayFormat === 'percentage') {\n      return meterWidth;\n    }\n\n    return adjustedValue + \" / \" + max;\n  };\n\n  var getColor = function getColor() {\n    if (color) {\n      return color;\n    } else if (dynamic) {\n      if (valueFraction < 25) {\n        return 'success';\n      } else if (valueFraction < 50) {\n        return 'info';\n      } else if (valueFraction < 75) {\n        return 'warning';\n      }\n\n      return 'danger';\n    }\n  };\n\n  return React.createElement(\"span\", null, React.createElement(\"div\", {\n    className: \"progressbar-info\",\n    key: 0\n  }, React.createElement(\"span\", {\n    className: \"progressbar-label\"\n  }, label), React.createElement(\"span\", {\n    className: \"progressbar-progress\"\n  }, getDisplayFormat())), React.createElement(\"div\", {\n    className: \"progress\" + (\" \" + (getColor() || '')),\n    key: 1\n  }, React.createElement(\"span\", {\n    className: \"meter\",\n    role: \"progressbar\",\n    \"aria-labelledby\": \"progressbar\",\n    \"aria-valuenow\": adjustedValue,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    \"aria-valuetext\": meterWidth,\n    style: {\n      width: meterWidth\n    }\n  })));\n};\n\nProgressBar.propTypes = {\n  /** @prop Color class optional that will overwrite dynamic | '' */\n  color: PropTypes.string,\n\n  /** @prop Format of dyanmic number | 'fraction' */\n  displayFormat: PropTypes.oneOf(['none', 'fraction', 'percentage']),\n\n  /** @prop Determines if the ProgressBar is dynamic | false */\n  dynamic: PropTypes.bool,\n\n  /** @prop Label text */\n  label: PropTypes.string.isRequired,\n\n  /** @prop Maximum number for progressBar | 100 */\n  max: PropTypes.number,\n\n  /** @prop Minimum number for progressBar | 0 */\n  min: PropTypes.number,\n\n  /** @prop Type of ProgressBar | 'determinate' */\n  type: PropTypes.oneOf(['determinate', 'indeterminate']),\n\n  /** @prop Number value */\n  value: PropTypes.number.isRequired\n};\nProgressBar.defaultProps = {\n  color: '',\n  displayFormat: 'fraction',\n  dynamic: false,\n  max: 100,\n  min: 0,\n  type: 'determinate'\n};\nProgressBar.displayName = 'ProgressBar';\nexport default ProgressBar;","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/@momentum-ui/react/es/ProgressBar/index.js"],"names":["React","PropTypes","ProgressBar","props","label","min","max","value","dynamic","displayFormat","color","adjustedValue","valueFraction","meterWidth","getDisplayFormat","getColor","createElement","className","key","role","style","width","propTypes","string","oneOf","bool","isRequired","number","type","defaultProps","displayName"],"mappings":"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","sourcesContent":["/** @component progress-bar */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nvar ProgressBar = function ProgressBar(props) {\n  var label = props.label,\n      min = props.min,\n      max = props.max,\n      value = props.value,\n      dynamic = props.dynamic,\n      displayFormat = props.displayFormat,\n      color = props.color;\n  var adjustedValue = max - value < 0 ? max : value;\n  var valueFraction = adjustedValue / max * 100 || 0;\n  var meterWidth = valueFraction + '%';\n\n  var getDisplayFormat = function getDisplayFormat() {\n    if (displayFormat === 'none') {\n      return null;\n    } else if (displayFormat === 'percentage') {\n      return meterWidth;\n    }\n\n    return adjustedValue + \" / \" + max;\n  };\n\n  var getColor = function getColor() {\n    if (color) {\n      return color;\n    } else if (dynamic) {\n      if (valueFraction < 25) {\n        return 'success';\n      } else if (valueFraction < 50) {\n        return 'info';\n      } else if (valueFraction < 75) {\n        return 'warning';\n      }\n\n      return 'danger';\n    }\n  };\n\n  return React.createElement(\"span\", null, React.createElement(\"div\", {\n    className: \"progressbar-info\",\n    key: 0\n  }, React.createElement(\"span\", {\n    className: \"progressbar-label\"\n  }, label), React.createElement(\"span\", {\n    className: \"progressbar-progress\"\n  }, getDisplayFormat())), React.createElement(\"div\", {\n    className: \"progress\" + (\" \" + (getColor() || '')),\n    key: 1\n  }, React.createElement(\"span\", {\n    className: \"meter\",\n    role: \"progressbar\",\n    \"aria-labelledby\": \"progressbar\",\n    \"aria-valuenow\": adjustedValue,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    \"aria-valuetext\": meterWidth,\n    style: {\n      width: meterWidth\n    }\n  })));\n};\n\nProgressBar.propTypes = {\n  /** @prop Color class optional that will overwrite dynamic | '' */\n  color: PropTypes.string,\n\n  /** @prop Format of dyanmic number | 'fraction' */\n  displayFormat: PropTypes.oneOf(['none', 'fraction', 'percentage']),\n\n  /** @prop Determines if the ProgressBar is dynamic | false */\n  dynamic: PropTypes.bool,\n\n  /** @prop Label text */\n  label: PropTypes.string.isRequired,\n\n  /** @prop Maximum number for progressBar | 100 */\n  max: PropTypes.number,\n\n  /** @prop Minimum number for progressBar | 0 */\n  min: PropTypes.number,\n\n  /** @prop Type of ProgressBar | 'determinate' */\n  type: PropTypes.oneOf(['determinate', 'indeterminate']),\n\n  /** @prop Number value */\n  value: PropTypes.number.isRequired\n};\nProgressBar.defaultProps = {\n  color: '',\n  displayFormat: 'fraction',\n  dynamic: false,\n  max: 100,\n  min: 0,\n  type: 'determinate'\n};\nProgressBar.displayName = 'ProgressBar';\nexport default ProgressBar;"]},"metadata":{},"sourceType":"module"}