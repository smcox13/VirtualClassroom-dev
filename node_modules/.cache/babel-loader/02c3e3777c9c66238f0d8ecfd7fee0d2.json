{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralName from \"./GeneralName.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nexport default class AuthorityKeyIdentifier {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for AuthorityKeyIdentifier class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    if (\"keyIdentifier\" in parameters)\n      /**\r\n       * @type {OctetString}\r\n       * @desc keyIdentifier\r\n       */\n      this.keyIdentifier = getParametersValue(parameters, \"keyIdentifier\", AuthorityKeyIdentifier.defaultValues(\"keyIdentifier\"));\n    if (\"authorityCertIssuer\" in parameters)\n      /**\r\n       * @type {Array.<GeneralName>}\r\n       * @desc authorityCertIssuer\r\n       */\n      this.authorityCertIssuer = getParametersValue(parameters, \"authorityCertIssuer\", AuthorityKeyIdentifier.defaultValues(\"authorityCertIssuer\"));\n    if (\"authorityCertSerialNumber\" in parameters)\n      /**\r\n       * @type {Integer}\r\n       * @desc authorityCertIssuer\r\n       */\n      this.authorityCertSerialNumber = getParametersValue(parameters, \"authorityCertSerialNumber\", AuthorityKeyIdentifier.defaultValues(\"authorityCertSerialNumber\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"keyIdentifier\":\n        return new asn1js.OctetString();\n\n      case \"authorityCertIssuer\":\n        return [];\n\n      case \"authorityCertSerialNumber\":\n        return new asn1js.Integer();\n\n      default:\n        throw new Error(`Invalid member name for AuthorityKeyIdentifier class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * AuthorityKeyIdentifier OID ::= 2.5.29.35\r\n   *\r\n   * AuthorityKeyIdentifier ::= SEQUENCE {\r\n   *    keyIdentifier             [0] KeyIdentifier           OPTIONAL,\r\n   *    authorityCertIssuer       [1] GeneralNames            OPTIONAL,\r\n   *    authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL  }\r\n   *\r\n   * KeyIdentifier ::= OCTET STRING\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [keyIdentifier]\r\n     * @property {string} [authorityCertIssuer]\r\n     * @property {string} [authorityCertSerialNumber]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Primitive({\n        name: names.keyIdentifier || \"\",\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        }\n      }), new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: [new asn1js.Repeated({\n          name: names.authorityCertIssuer || \"\",\n          value: GeneralName.schema()\n        })]\n      }), new asn1js.Primitive({\n        name: names.authorityCertSerialNumber || \"\",\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 2 // [2]\n\n        }\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"keyIdentifier\", \"authorityCertIssuer\", \"authorityCertSerialNumber\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, AuthorityKeyIdentifier.schema({\n      names: {\n        keyIdentifier: \"keyIdentifier\",\n        authorityCertIssuer: \"authorityCertIssuer\",\n        authorityCertSerialNumber: \"authorityCertSerialNumber\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AuthorityKeyIdentifier\"); //endregion\n    //region Get internal properties from parsed schema\n\n    if (\"keyIdentifier\" in asn1.result) this.keyIdentifier = new asn1js.OctetString({\n      valueHex: asn1.result.keyIdentifier.valueBlock.valueHex\n    });\n    if (\"authorityCertIssuer\" in asn1.result) this.authorityCertIssuer = Array.from(asn1.result.authorityCertIssuer, element => new GeneralName({\n      schema: element\n    }));\n    if (\"authorityCertSerialNumber\" in asn1.result) this.authorityCertSerialNumber = new asn1js.Integer({\n      valueHex: asn1.result.authorityCertSerialNumber.valueBlock.valueHex\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n\n    if (\"keyIdentifier\" in this) {\n      outputArray.push(new asn1js.Primitive({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        valueHex: this.keyIdentifier.valueBlock.valueHex\n      }));\n    }\n\n    if (\"authorityCertIssuer\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: Array.from(this.authorityCertIssuer, element => element.toSchema())\n      }));\n    }\n\n    if (\"authorityCertSerialNumber\" in this) {\n      outputArray.push(new asn1js.Primitive({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 2 // [2]\n\n        },\n        valueHex: this.authorityCertSerialNumber.valueBlock.valueHex\n      }));\n    } //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const object = {};\n    if (\"keyIdentifier\" in this) object.keyIdentifier = this.keyIdentifier.toJSON();\n    if (\"authorityCertIssuer\" in this) object.authorityCertIssuer = Array.from(this.authorityCertIssuer, element => element.toJSON());\n    if (\"authorityCertSerialNumber\" in this) object.authorityCertSerialNumber = this.authorityCertSerialNumber.toJSON();\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/AuthorityKeyIdentifier.js"],"names":["asn1js","getParametersValue","clearProps","GeneralName","AuthorityKeyIdentifier","constructor","parameters","keyIdentifier","defaultValues","authorityCertIssuer","authorityCertSerialNumber","fromSchema","schema","memberName","OctetString","Integer","Error","names","Sequence","name","blockName","value","Primitive","optional","idBlock","tagClass","tagNumber","Constructed","Repeated","asn1","compareSchema","verified","result","valueHex","valueBlock","Array","from","element","toSchema","outputArray","push","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AuthorityKeyIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AuthorityKeyIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"keyIdentifier\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @desc keyIdentifier\r\n\t\t\t */\r\n\t\t\tthis.keyIdentifier = getParametersValue(parameters, \"keyIdentifier\", AuthorityKeyIdentifier.defaultValues(\"keyIdentifier\"));\r\n\r\n\t\tif(\"authorityCertIssuer\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<GeneralName>}\r\n\t\t\t * @desc authorityCertIssuer\r\n\t\t\t */\r\n\t\t\tthis.authorityCertIssuer = getParametersValue(parameters, \"authorityCertIssuer\", AuthorityKeyIdentifier.defaultValues(\"authorityCertIssuer\"));\r\n\r\n\t\tif(\"authorityCertSerialNumber\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Integer}\r\n\t\t\t * @desc authorityCertIssuer\r\n\t\t\t */\r\n\t\t\tthis.authorityCertSerialNumber = getParametersValue(parameters, \"authorityCertSerialNumber\", AuthorityKeyIdentifier.defaultValues(\"authorityCertSerialNumber\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyIdentifier\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"authorityCertIssuer\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"authorityCertSerialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AuthorityKeyIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AuthorityKeyIdentifier OID ::= 2.5.29.35\r\n\t *\r\n\t * AuthorityKeyIdentifier ::= SEQUENCE {\r\n\t *    keyIdentifier             [0] KeyIdentifier           OPTIONAL,\r\n\t *    authorityCertIssuer       [1] GeneralNames            OPTIONAL,\r\n\t *    authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL  }\r\n\t *\r\n\t * KeyIdentifier ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyIdentifier]\r\n\t\t * @property {string} [authorityCertIssuer]\r\n\t\t * @property {string} [authorityCertSerialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.keyIdentifier || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.authorityCertIssuer || \"\"),\r\n\t\t\t\t\t\t\tvalue: GeneralName.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.authorityCertSerialNumber || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"keyIdentifier\",\r\n\t\t\t\"authorityCertIssuer\",\r\n\t\t\t\"authorityCertSerialNumber\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAuthorityKeyIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyIdentifier: \"keyIdentifier\",\r\n\t\t\t\t\tauthorityCertIssuer: \"authorityCertIssuer\",\r\n\t\t\t\t\tauthorityCertSerialNumber: \"authorityCertSerialNumber\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AuthorityKeyIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"keyIdentifier\" in asn1.result)\r\n\t\t\tthis.keyIdentifier = new asn1js.OctetString({ valueHex: asn1.result.keyIdentifier.valueBlock.valueHex });\r\n\r\n\t\tif(\"authorityCertIssuer\" in asn1.result)\r\n\t\t\tthis.authorityCertIssuer = Array.from(asn1.result.authorityCertIssuer, element => new GeneralName({ schema: element }));\r\n\r\n\t\tif(\"authorityCertSerialNumber\" in asn1.result)\r\n\t\t\tthis.authorityCertSerialNumber = new asn1js.Integer({ valueHex: asn1.result.authorityCertSerialNumber.valueBlock.valueHex });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(\"keyIdentifier\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.keyIdentifier.valueBlock.valueHex\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"authorityCertIssuer\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.authorityCertIssuer, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"authorityCertSerialNumber\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.authorityCertSerialNumber.valueBlock.valueHex\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\r\n\t\tif(\"keyIdentifier\" in this)\r\n\t\t\tobject.keyIdentifier = this.keyIdentifier.toJSON();\r\n\r\n\t\tif(\"authorityCertIssuer\" in this)\r\n\t\t\tobject.authorityCertIssuer = Array.from(this.authorityCertIssuer, element => element.toJSON());\r\n\r\n\t\tif(\"authorityCertSerialNumber\" in this)\r\n\t\t\tobject.authorityCertSerialNumber = this.authorityCertSerialNumber.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}