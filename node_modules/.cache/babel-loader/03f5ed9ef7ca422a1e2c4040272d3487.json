{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Certificate from \"./Certificate.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC6960\r\n */\n\nexport default class Signature {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for Signature class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc signatureAlgorithm\r\n     */\n    this.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", Signature.defaultValues(\"signatureAlgorithm\"));\n    /**\r\n     * @type {BitString}\r\n     * @desc signature\r\n     */\n\n    this.signature = getParametersValue(parameters, \"signature\", Signature.defaultValues(\"signature\"));\n    if (\"certs\" in parameters)\n      /**\r\n       * @type {Array.<Certificate>}\r\n       * @desc certs\r\n       */\n      this.certs = getParametersValue(parameters, \"certs\", Signature.defaultValues(\"certs\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"signatureAlgorithm\":\n        return new AlgorithmIdentifier();\n\n      case \"signature\":\n        return new asn1js.BitString();\n\n      case \"certs\":\n        return [];\n\n      default:\n        throw new Error(`Invalid member name for Signature class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"signatureAlgorithm\":\n        return memberValue.algorithmId === \"\" && \"algorithmParams\" in memberValue === false;\n\n      case \"signature\":\n        return memberValue.isEqual(Signature.defaultValues(memberName));\n\n      case \"certs\":\n        return memberValue.length === 0;\n\n      default:\n        throw new Error(`Invalid member name for Signature class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * Signature       ::=     SEQUENCE {\r\n   *    signatureAlgorithm      AlgorithmIdentifier,\r\n   *    signature               BIT STRING,\r\n   *    certs               [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [signatureAlgorithm]\r\n     * @property {string} [signature]\r\n     * @property {string} [certs]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [AlgorithmIdentifier.schema(names.signatureAlgorithm || {}), new asn1js.BitString({\n        name: names.signature || \"\"\n      }), new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [new asn1js.Sequence({\n          value: [new asn1js.Repeated({\n            name: names.certs || \"\",\n            value: Certificate.schema(names.certs || {})\n          })]\n        })]\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"signatureAlgorithm\", \"signature\", \"certs\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, Signature.schema({\n      names: {\n        signatureAlgorithm: {\n          names: {\n            blockName: \"signatureAlgorithm\"\n          }\n        },\n        signature: \"signature\",\n        certs: \"certs\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for Signature\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.signatureAlgorithm = new AlgorithmIdentifier({\n      schema: asn1.result.signatureAlgorithm\n    });\n    this.signature = asn1.result.signature;\n    if (\"certs\" in asn1.result) this.certs = Array.from(asn1.result.certs, element => new Certificate({\n      schema: element\n    })); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array of output sequence\n    const outputArray = [];\n    outputArray.push(this.signatureAlgorithm.toSchema());\n    outputArray.push(this.signature);\n\n    if (\"certs\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [new asn1js.Sequence({\n          value: Array.from(this.certs, element => element.toSchema())\n        })]\n      }));\n    } //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const _object = {\n      signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n      signature: this.signature.toJSON()\n    };\n    if (\"certs\" in this) _object.certs = Array.from(this.certs, element => element.toJSON());\n    return _object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/Signature.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","Certificate","Signature","constructor","parameters","signatureAlgorithm","defaultValues","signature","certs","fromSchema","schema","memberName","BitString","Error","compareWithDefault","memberValue","algorithmId","isEqual","length","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","asn1","compareSchema","verified","result","Array","from","element","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Certificate from \"./Certificate.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class Signature\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Signature class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", Signature.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", Signature.defaultValues(\"signature\"));\r\n\r\n\t\tif(\"certs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate>}\r\n\t\t\t * @desc certs\r\n\t\t\t */\r\n\t\t\tthis.certs = getParametersValue(parameters, \"certs\", Signature.defaultValues(\"certs\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Signature class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn (memberValue.isEqual(Signature.defaultValues(memberName)));\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Signature class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Signature       ::=     SEQUENCE {\r\n\t *    signatureAlgorithm      AlgorithmIdentifier,\r\n\t *    signature               BIT STRING,\r\n\t *    certs               [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signature]\r\n\t\t * @property {string} [certs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signature || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [new asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: (names.certs || \"\"),\r\n\t\t\t\t\t\t\t\tvalue: Certificate.schema(names.certs || {})\r\n\t\t\t\t\t\t\t})]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"signatureAlgorithm\",\r\n\t\t\t\"signature\",\r\n\t\t\t\"certs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignature.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tsignatureAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsignature: \"signature\",\r\n\t\t\t\t\tcerts: \"certs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Signature\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signature = asn1.result.signature;\r\n\r\n\t\tif(\"certs\" in asn1.result)\r\n\t\t\tthis.certs = Array.from(asn1.result.certs, element => new Certificate({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array of output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.signatureAlgorithm.toSchema());\r\n\t\toutputArray.push(this.signature);\r\n\r\n\t\tif(\"certs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.certs, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"certs\" in this)\r\n\t\t\t_object.certs = Array.from(this.certs, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}