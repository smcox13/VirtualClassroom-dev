{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _btoa = require('btoa');\n\nvar _btoa2 = _interopRequireDefault(_btoa);\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _collection = require('./collection');\n\nvar _collection2 = _interopRequireDefault(_collection);\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n   * Calendar Item Create Event\n   * Emitted when a calendar item has been added\n   * @event calendar:meeting:create\n   * @instance\n   * @memberof Calendar\n   */\n\n/**\n   * Calendar Item Update Event\n   * Emitted when a calendar item has been updated\n   * @event calendar:meeting:update\n   * @instance\n   * @memberof Calendar\n   */\n\n/**\n   * Calendar Item Update Event\n   * Emitted when a calendar item has been deleted\n   * @event calendar:meeting:delete\n   * @instance\n   * @memberof Calendar\n   */\n\n/**\n * Calendar Registered Event\n * Emitted when the calendar instance has been registered and listening\n * @event calendar:registered\n * @instance\n * @memberof Calendar\n */\n\n/**\n * Calendar Registered Event\n * Emitted when the calendar instance has been registered and listening\n * @event calendar:unregistered\n * @instance\n * @memberof Calendar\n */\n\n\nvar Calendar = _webexCore.WebexPlugin.extend({\n  namespace: 'Calendar',\n\n  /**\n   * registered value indicating events registration is successful\n   * @instance\n   * @type {Boolean}\n   * @memberof Calendar\n   */\n  registered: false,\n\n  /**\n   * Explicitly sets up the calendar plugin by registering\n   * the device, connecting to mercury, and listening for calendar events.\n   * @returns {Promise}\n   * @public\n   * @memberof Calendar\n   */\n  register: function register() {\n    var _this = this;\n\n    if (!this.webex.canAuthorize) {\n      this.logger.error('calendar->register#ERROR, Unable to register, SDK cannot authorize');\n      return _promise2.default.reject(new Error('SDK cannot authorize'));\n    }\n\n    if (this.registered) {\n      this.logger.info('calendar->register#INFO, Calendar plugin already registered');\n      return _promise2.default.resolve();\n    }\n\n    return this.webex.internal.device.register().then(function () {\n      return _this.webex.internal.mercury.connect();\n    }).then(function () {\n      _this.listenForEvents();\n\n      _this.trigger(_constants.CALENDAR_REGISTERED);\n\n      _this.registered = true;\n    }).catch(function (error) {\n      _this.logger.error('calendar->register#ERROR, Unable to register, ' + error.message);\n\n      return _promise2.default.reject(error);\n    });\n  },\n\n  /**\n   * Explicitly tears down the calendar plugin by deregistering\n   * the device, disconnecting from mercury, and stops listening to calendar events\n   *\n   * @returns {Promise}\n   * @public\n   * @memberof Calendar\n   */\n  unregister: function unregister() {\n    var _this2 = this;\n\n    if (!this.registered) {\n      this.logger.info('calendar->unregister#INFO, Calendar plugin already unregistered');\n      return _promise2.default.resolve();\n    }\n\n    this.stopListeningForEvents();\n    return this.webex.internal.mercury.disconnect().then(function () {\n      return _this2.webex.internal.device.unregister();\n    }).then(function () {\n      _this2.trigger(_constants.CALENDAR_UNREGISTERED);\n\n      _this2.registered = false;\n    });\n  },\n\n  /**\n   * registers for calendar events through mercury\n   * @returns {undefined}\n   * @private\n   */\n  listenForEvents: function listenForEvents() {\n    var _this3 = this; // Calendar mercury events listener\n\n\n    this.webex.internal.mercury.on('event:calendar.meeting.create', function (envelope) {\n      _this3._handleCreate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.update', function (envelope) {\n      _this3._handleUpdate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.create.minimal', function (envelope) {\n      _this3._handleCreate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.update.minimal', function (envelope) {\n      _this3._handleUpdate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.delete', function (envelope) {\n      _this3._handleDelete(envelope.data);\n    });\n  },\n\n  /**\n   * unregisteres all the calendar events from mercury\n   * @returns {undefined}\n   * @private\n   */\n  stopListeningForEvents: function stopListeningForEvents() {\n    this.webex.internal.mercury.off('event:calendar.meeting.create');\n    this.webex.internal.mercury.off('event:calendar.meeting.create.minimal');\n    this.webex.internal.mercury.off('event:calendar.meeting.update');\n    this.webex.internal.mercury.off('event:calendar.meeting.update.minimal');\n    this.webex.internal.mercury.off('event:calendar.meeting.delete');\n  },\n\n  /**\n   * handles update events, triggers after collection updates\n   * @param {Object} data\n   * @returns {undefined}\n   * @private\n   */\n  _handleUpdate: function _handleUpdate(data) {\n    var id = _collection2.default.set(data.calendarMeetingExternal);\n\n    this.trigger(_constants.CALENDAR_UPDATED, _collection2.default.get(id));\n  },\n\n  /**\n   * handles create events, triggers after collection updates\n   * @param {Object} data\n   * @returns {undefined}\n   * @private\n   */\n  _handleCreate: function _handleCreate(data) {\n    var id = _collection2.default.set(data.calendarMeetingExternal);\n\n    this.trigger(_constants.CALENDAR_CREATE, _collection2.default.get(id));\n  },\n\n  /**\n   * handles delete events, triggers after collection updates\n   * @param {Object} data\n   * @returns {undefined}\n   * @private\n   */\n  _handleDelete: function _handleDelete(data) {\n    var item = _collection2.default.remove(data.calendarMeetingExternal.id);\n\n    this.trigger(_constants.CALENDAR_DELETE, item);\n  },\n\n  /**\n   * Retrieves a collection of calendars based on the request parameters\n   * Defaults to 1 day before and 7 days ahead\n   * @param {Object} options\n   * @param {Date} options.fromDate the start of the time range\n   * @param {Date} options.toDate the end of the time range\n   * @returns {Promise} Resolves with an array of calendars\n   */\n  syncCalendar: function syncCalendar() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      fromDate: this.config.fromDate,\n      toDate: this.config.toDate\n    };\n    return this.list({\n      fromDate: options.fromDate,\n      toDate: options.toDate\n    }).then(function (res) {\n      _collection2.default.setAll(res);\n\n      return _collection2.default.getAll();\n    });\n  },\n\n  /**\n   * get the calendar item that has a matching value\n   * @param {String} key meeting property\n   * @param {Any} value the meeting property to match\n   * @returns {Object}\n   */\n  getByType: function getByType(key, value) {\n    if (['spaceURI', 'spaceMeetURL', 'conversationId'].includes(key)) {\n      return _collection2.default.getBy(key, value);\n    }\n\n    throw new Error('key must be one of, spaceURI, spaceMeetURL, or conversationId');\n  },\n\n  /**\n   * gets all the calendar items that have been populated\n   * @returns {Object}\n   */\n  getAll: function getAll() {\n    return _collection2.default.getAll();\n  },\n\n  /**\n   * Decrypts an encrypted incoming calendar event\n   * @param {Object} event\n   * @returns {Promise} Resolves with a decrypted calendar event\n   */\n  processMeetingEvent: function processMeetingEvent(event) {\n    return this.webex.transform('inbound', event).then(function () {\n      return event;\n    });\n  },\n\n  /**\n   * Retrieves an array of meeting participants for the meeting id\n   * @param {String} id\n   * @returns {Promise} Resolves with an object of meeting participants\n   */\n  getParticipants: function getParticipants(id) {\n    return this.request({\n      method: 'GET',\n      service: 'calendar',\n      resource: 'calendarEvents/' + (0, _btoa2.default)(id) + '/participants'\n    });\n  },\n\n  /**\n   * Retrieves a collection of meetings based on the request parameters\n   * @param {String} id\n   * @returns {Promise} Resolves with an object of meeting notes\n   */\n  getNotes: function getNotes(id) {\n    return this.request({\n      method: 'GET',\n      service: 'calendar',\n      resource: 'calendarEvents/' + (0, _btoa2.default)(id) + '/notes'\n    });\n  },\n\n  /**\n   * Retrieves a collection of meetings based on the request parameters\n   * @param {Object} options\n   * @param {Date} options.fromDate the start of the time range\n   * @param {Date} options.toDate the end of the time range\n   * @returns {Promise} Resolves with an array of meetings\n   */\n  list: function list(options) {\n    var _this4 = this;\n\n    options = options || {};\n    return this.webex.request({\n      method: 'GET',\n      service: 'calendar',\n      resource: 'calendarEvents',\n      qs: options\n    }).then(function (res) {\n      var meetingObjects = res.body.items;\n      var promises = [];\n      meetingObjects.forEach(function (meeting) {\n        if (!meeting.encryptedNotes) {\n          promises.push(_this4.getNotes(meeting.id).then(function (notesResponse) {\n            meeting.encryptedNotes = notesResponse.body && notesResponse.body.encryptedNotes;\n          }));\n        }\n\n        if (!meeting.encryptedParticipants) {\n          promises.push(_this4.getParticipants(meeting.id).then(function (notesResponse) {\n            meeting.encryptedParticipants = notesResponse.body.encryptedParticipants;\n          }));\n        }\n      });\n      return _promise2.default.all(promises).then(function () {\n        return meetingObjects;\n      });\n    });\n  },\n  version: '1.80.172'\n});\n\nexports.default = Calendar;","map":{"version":3,"sources":["calendar.js"],"names":["Calendar","namespace","registered","register","CALENDAR_REGISTERED","error","unregister","CALENDAR_UNREGISTERED","listenForEvents","envelope","stopListeningForEvents","_handleUpdate","id","CalendarCollection","data","CALENDAR_UPDATED","_handleCreate","CALENDAR_CREATE","_handleDelete","item","CALENDAR_DELETE","syncCalendar","options","fromDate","toDate","getByType","getAll","processMeetingEvent","getParticipants","method","service","resource","getNotes","list","qs","meetingObjects","res","promises","meeting","notesResponse"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n   * Calendar Item Create Event\n   * Emitted when a calendar item has been added\n   * @event calendar:meeting:create\n   * @instance\n   * @memberof Calendar\n   */\n\n/**\n   * Calendar Item Update Event\n   * Emitted when a calendar item has been updated\n   * @event calendar:meeting:update\n   * @instance\n   * @memberof Calendar\n   */\n\n/**\n   * Calendar Item Update Event\n   * Emitted when a calendar item has been deleted\n   * @event calendar:meeting:delete\n   * @instance\n   * @memberof Calendar\n   */\n\n/**\n * Calendar Registered Event\n * Emitted when the calendar instance has been registered and listening\n * @event calendar:registered\n * @instance\n * @memberof Calendar\n */\n\n/**\n * Calendar Registered Event\n * Emitted when the calendar instance has been registered and listening\n * @event calendar:unregistered\n * @instance\n * @memberof Calendar\n */\n\nimport btoa from 'btoa';\nimport {WebexPlugin} from '@webex/webex-core';\n\nimport CalendarCollection from './collection';\nimport {CALENDAR_REGISTERED, CALENDAR_UNREGISTERED, CALENDAR_DELETE, CALENDAR_CREATE, CALENDAR_UPDATED} from './constants';\n\nconst Calendar = WebexPlugin.extend({\n  namespace: 'Calendar',\n\n  /**\n   * registered value indicating events registration is successful\n   * @instance\n   * @type {Boolean}\n   * @memberof Calendar\n   */\n  registered: false,\n\n  /**\n   * Explicitly sets up the calendar plugin by registering\n   * the device, connecting to mercury, and listening for calendar events.\n   * @returns {Promise}\n   * @public\n   * @memberof Calendar\n   */\n  register() {\n    if (!this.webex.canAuthorize) {\n      this.logger.error('calendar->register#ERROR, Unable to register, SDK cannot authorize');\n\n      return Promise.reject(new Error('SDK cannot authorize'));\n    }\n\n    if (this.registered) {\n      this.logger.info('calendar->register#INFO, Calendar plugin already registered');\n\n      return Promise.resolve();\n    }\n\n    return this.webex.internal.device.register()\n      .then(() => this.webex.internal.mercury.connect())\n      .then(() => {\n        this.listenForEvents();\n        this.trigger(CALENDAR_REGISTERED);\n        this.registered = true;\n      })\n      .catch((error) => {\n        this.logger.error(`calendar->register#ERROR, Unable to register, ${error.message}`);\n\n        return Promise.reject(error);\n      });\n  },\n\n  /**\n   * Explicitly tears down the calendar plugin by deregistering\n   * the device, disconnecting from mercury, and stops listening to calendar events\n   *\n   * @returns {Promise}\n   * @public\n   * @memberof Calendar\n   */\n  unregister() {\n    if (!this.registered) {\n      this.logger.info('calendar->unregister#INFO, Calendar plugin already unregistered');\n\n      return Promise.resolve();\n    }\n\n    this.stopListeningForEvents();\n\n    return this.webex.internal.mercury.disconnect()\n      .then(() => this.webex.internal.device.unregister())\n      .then(() => {\n        this.trigger(CALENDAR_UNREGISTERED);\n        this.registered = false;\n      });\n  },\n\n  /**\n   * registers for calendar events through mercury\n   * @returns {undefined}\n   * @private\n   */\n  listenForEvents() {\n    // Calendar mercury events listener\n    this.webex.internal.mercury.on('event:calendar.meeting.create', (envelope) => {\n      this._handleCreate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.update', (envelope) => {\n      this._handleUpdate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.create.minimal', (envelope) => {\n      this._handleCreate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.update.minimal', (envelope) => {\n      this._handleUpdate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.delete', (envelope) => {\n      this._handleDelete(envelope.data);\n    });\n  },\n\n  /**\n   * unregisteres all the calendar events from mercury\n   * @returns {undefined}\n   * @private\n   */\n  stopListeningForEvents() {\n    this.webex.internal.mercury.off('event:calendar.meeting.create');\n    this.webex.internal.mercury.off('event:calendar.meeting.create.minimal');\n    this.webex.internal.mercury.off('event:calendar.meeting.update');\n    this.webex.internal.mercury.off('event:calendar.meeting.update.minimal');\n    this.webex.internal.mercury.off('event:calendar.meeting.delete');\n  },\n\n  /**\n   * handles update events, triggers after collection updates\n   * @param {Object} data\n   * @returns {undefined}\n   * @private\n   */\n  _handleUpdate(data) {\n    const id = CalendarCollection.set(data.calendarMeetingExternal);\n\n    this.trigger(CALENDAR_UPDATED, CalendarCollection.get(id));\n  },\n\n  /**\n   * handles create events, triggers after collection updates\n   * @param {Object} data\n   * @returns {undefined}\n   * @private\n   */\n  _handleCreate(data) {\n    const id = CalendarCollection.set(data.calendarMeetingExternal);\n\n    this.trigger(CALENDAR_CREATE, CalendarCollection.get(id));\n  },\n\n  /**\n   * handles delete events, triggers after collection updates\n   * @param {Object} data\n   * @returns {undefined}\n   * @private\n   */\n  _handleDelete(data) {\n    const item = CalendarCollection.remove(data.calendarMeetingExternal.id);\n\n    this.trigger(CALENDAR_DELETE, item);\n  },\n\n  /**\n   * Retrieves a collection of calendars based on the request parameters\n   * Defaults to 1 day before and 7 days ahead\n   * @param {Object} options\n   * @param {Date} options.fromDate the start of the time range\n   * @param {Date} options.toDate the end of the time range\n   * @returns {Promise} Resolves with an array of calendars\n   */\n  syncCalendar(options = {fromDate: this.config.fromDate, toDate: this.config.toDate}) {\n    return this.list({fromDate: options.fromDate, toDate: options.toDate}).then((res) => {\n      CalendarCollection.setAll(res);\n\n      return CalendarCollection.getAll();\n    });\n  },\n  /**\n   * get the calendar item that has a matching value\n   * @param {String} key meeting property\n   * @param {Any} value the meeting property to match\n   * @returns {Object}\n   */\n  getByType(key, value) {\n    if (['spaceURI', 'spaceMeetURL', 'conversationId'].includes(key)) {\n      return CalendarCollection.getBy(key, value);\n    }\n    throw new Error('key must be one of, spaceURI, spaceMeetURL, or conversationId');\n  },\n\n  /**\n   * gets all the calendar items that have been populated\n   * @returns {Object}\n   */\n  getAll() {\n    return CalendarCollection.getAll();\n  },\n\n  /**\n   * Decrypts an encrypted incoming calendar event\n   * @param {Object} event\n   * @returns {Promise} Resolves with a decrypted calendar event\n   */\n  processMeetingEvent(event) {\n    return this.webex.transform('inbound', event)\n      .then(() => event);\n  },\n\n  /**\n   * Retrieves an array of meeting participants for the meeting id\n   * @param {String} id\n   * @returns {Promise} Resolves with an object of meeting participants\n   */\n  getParticipants(id) {\n    return this.request({\n      method: 'GET',\n      service: 'calendar',\n      resource: `calendarEvents/${btoa(id)}/participants`\n    });\n  },\n\n  /**\n   * Retrieves a collection of meetings based on the request parameters\n   * @param {String} id\n   * @returns {Promise} Resolves with an object of meeting notes\n   */\n  getNotes(id) {\n    return this.request({\n      method: 'GET',\n      service: 'calendar',\n      resource: `calendarEvents/${btoa(id)}/notes`\n    });\n  },\n\n  /**\n   * Retrieves a collection of meetings based on the request parameters\n   * @param {Object} options\n   * @param {Date} options.fromDate the start of the time range\n   * @param {Date} options.toDate the end of the time range\n   * @returns {Promise} Resolves with an array of meetings\n   */\n  list(options) {\n    options = options || {};\n\n    return this.webex.request({\n      method: 'GET',\n      service: 'calendar',\n      resource: 'calendarEvents',\n      qs: options\n    })\n      .then((res) => {\n        const meetingObjects = res.body.items;\n        const promises = [];\n\n        meetingObjects.forEach((meeting) => {\n          if (!meeting.encryptedNotes) {\n            promises.push(\n              this.getNotes(meeting.id)\n                .then((notesResponse) => {\n                  meeting.encryptedNotes = notesResponse.body && notesResponse.body.encryptedNotes;\n                })\n            );\n          }\n\n          if (!meeting.encryptedParticipants) {\n            promises.push(\n              this.getParticipants(meeting.id)\n                .then((notesResponse) => {\n                  meeting.encryptedParticipants = notesResponse.body.encryptedParticipants;\n                })\n            );\n          }\n        });\n\n        return Promise.all(promises)\n          .then(() => meetingObjects);\n      });\n  }\n});\n\nexport default Calendar;\n"]},"metadata":{},"sourceType":"script"}