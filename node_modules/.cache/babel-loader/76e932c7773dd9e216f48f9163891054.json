{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n/** @component toggle-switch */\n\n\nimport omit from 'lodash/omit';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nvar ToggleSwitch = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(ToggleSwitch, _React$PureComponent);\n\n  function ToggleSwitch() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;\n    _this.state = {\n      isToggleOn: _this.props.checked\n    };\n\n    _this.handleClick = function (event) {\n      _this.setState({\n        isToggleOn: !_this.state.isToggleOn\n      });\n\n      if (_this.props.onChange) {\n        _this.props.onChange(event);\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = ToggleSwitch.prototype;\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        className = _this$props.className,\n        disabled = _this$props.disabled,\n        htmlId = _this$props.htmlId,\n        label = _this$props.label,\n        name = _this$props.name,\n        onChange = _this$props.onChange,\n        value = _this$props.value,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"disabled\", \"htmlId\", \"label\", \"name\", \"onChange\", \"value\"]);\n\n    var otherProps = omit(_extends({}, props), ['checked']);\n    return React.createElement(\"div\", _extends({\n      className: \"md-input-container md-toggle-switch\" + (\"\" + (className && \" \" + className || ''))\n    }, otherProps), React.createElement(\"input\", {\n      className: \"md-input md-toggle-switch__input\",\n      type: \"checkbox\",\n      disabled: disabled,\n      \"aria-checked\": this.state.isToggleOn,\n      checked: this.state.isToggleOn,\n      name: name,\n      value: value,\n      id: htmlId,\n      onChange: onChange,\n      tabIndex: 0,\n      onClick: function onClick(event) {\n        return _this2.handleClick(event);\n      }\n    }), React.createElement(\"label\", {\n      className: \"md-toggle-switch__label\",\n      htmlFor: htmlId\n    }, React.createElement(\"span\", {\n      className: \"md-toggle-switch__label__container\"\n    }), React.createElement(\"span\", {\n      className: \"md-toggle-switch__label__text\"\n    }, label)));\n  };\n\n  return ToggleSwitch;\n}(React.PureComponent);\n\nToggleSwitch.propTypes = {\n  /** @prop Set the toggle switch to checked | false */\n  checked: PropTypes.bool,\n\n  /** @prop Sets the className for the toggle switch | '' */\n  className: PropTypes.string,\n\n  /** @prop Set the toggle switch to disabled | false */\n  disabled: PropTypes.bool,\n\n  /** @prop Unique HTML ID used for tying label to HTML input for automated testing */\n  htmlId: PropTypes.string.isRequired,\n\n  /** @prop Sets the label string for the toggle switch | '' */\n  label: PropTypes.string.isRequired,\n\n  /** @prop Sets the name of the toggle switch | '' */\n  name: PropTypes.string,\n\n  /** @prop Callback function invoked when state is changed | null */\n  onChange: PropTypes.func,\n\n  /** @prop Sets the value of the toggle switch | '' */\n  value: PropTypes.string\n};\nToggleSwitch.defaultProps = {\n  checked: false,\n  className: '',\n  disabled: false,\n  label: '',\n  name: '',\n  onChange: null,\n  value: ''\n};\nToggleSwitch.displayName = 'ToggleSwitch';\nexport default ToggleSwitch;","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/VirtualClassroom/node_modules/@momentum-ui/react/es/ToggleSwitch/index.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","_inheritsLoose","subClass","superClass","create","constructor","__proto__","omit","PropTypes","React","ToggleSwitch","_React$PureComponent","_this","_len","args","Array","_key","concat","state","isToggleOn","props","checked","handleClick","event","setState","onChange","_proto","render","_this2","_this$props","className","disabled","htmlId","label","name","value","otherProps","createElement","type","id","tabIndex","onClick","htmlFor","PureComponent","propTypes","bool","string","isRequired","func","defaultProps","displayName"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n/** @component toggle-switch */\nimport omit from 'lodash/omit';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nvar ToggleSwitch = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(ToggleSwitch, _React$PureComponent);\n\n  function ToggleSwitch() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;\n    _this.state = {\n      isToggleOn: _this.props.checked\n    };\n\n    _this.handleClick = function (event) {\n      _this.setState({\n        isToggleOn: !_this.state.isToggleOn\n      });\n\n      if (_this.props.onChange) {\n        _this.props.onChange(event);\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = ToggleSwitch.prototype;\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        className = _this$props.className,\n        disabled = _this$props.disabled,\n        htmlId = _this$props.htmlId,\n        label = _this$props.label,\n        name = _this$props.name,\n        onChange = _this$props.onChange,\n        value = _this$props.value,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"disabled\", \"htmlId\", \"label\", \"name\", \"onChange\", \"value\"]);\n\n    var otherProps = omit(_extends({}, props), ['checked']);\n    return React.createElement(\"div\", _extends({\n      className: \"md-input-container md-toggle-switch\" + (\"\" + (className && \" \" + className || ''))\n    }, otherProps), React.createElement(\"input\", {\n      className: \"md-input md-toggle-switch__input\",\n      type: \"checkbox\",\n      disabled: disabled,\n      \"aria-checked\": this.state.isToggleOn,\n      checked: this.state.isToggleOn,\n      name: name,\n      value: value,\n      id: htmlId,\n      onChange: onChange,\n      tabIndex: 0,\n      onClick: function onClick(event) {\n        return _this2.handleClick(event);\n      }\n    }), React.createElement(\"label\", {\n      className: \"md-toggle-switch__label\",\n      htmlFor: htmlId\n    }, React.createElement(\"span\", {\n      className: \"md-toggle-switch__label__container\"\n    }), React.createElement(\"span\", {\n      className: \"md-toggle-switch__label__text\"\n    }, label)));\n  };\n\n  return ToggleSwitch;\n}(React.PureComponent);\n\nToggleSwitch.propTypes = {\n  /** @prop Set the toggle switch to checked | false */\n  checked: PropTypes.bool,\n\n  /** @prop Sets the className for the toggle switch | '' */\n  className: PropTypes.string,\n\n  /** @prop Set the toggle switch to disabled | false */\n  disabled: PropTypes.bool,\n\n  /** @prop Unique HTML ID used for tying label to HTML input for automated testing */\n  htmlId: PropTypes.string.isRequired,\n\n  /** @prop Sets the label string for the toggle switch | '' */\n  label: PropTypes.string.isRequired,\n\n  /** @prop Sets the name of the toggle switch | '' */\n  name: PropTypes.string,\n\n  /** @prop Callback function invoked when state is changed | null */\n  onChange: PropTypes.func,\n\n  /** @prop Sets the value of the toggle switch | '' */\n  value: PropTypes.string\n};\nToggleSwitch.defaultProps = {\n  checked: false,\n  className: '',\n  disabled: false,\n  label: '',\n  name: '',\n  onChange: null,\n  value: ''\n};\nToggleSwitch.displayName = 'ToggleSwitch';\nexport default ToggleSwitch;"]},"metadata":{},"sourceType":"module"}