{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralNames from \"./GeneralNames.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Attribute from \"./Attribute.js\";\nimport Extensions from \"./Extensions.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5755\r\n */\n\nexport class AttCertValidityPeriod {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for AttCertValidityPeriod class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {GeneralizedTime}\r\n     * @desc notBeforeTime\r\n     */\n    this.notBeforeTime = getParametersValue(parameters, \"notBeforeTime\", AttCertValidityPeriod.defaultValues(\"notBeforeTime\"));\n    /**\r\n     * @type {GeneralizedTime}\r\n     * @desc notAfterTime\r\n     */\n\n    this.notAfterTime = getParametersValue(parameters, \"notAfterTime\", AttCertValidityPeriod.defaultValues(\"notAfterTime\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"notBeforeTime\":\n      case \"notAfterTime\":\n        return new Date(0, 0, 0);\n\n      default:\n        throw new Error(`Invalid member name for AttCertValidityPeriod class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * AttCertValidityPeriod  ::= SEQUENCE {\r\n   *   notBeforeTime  GeneralizedTime,\r\n   *   notAfterTime   GeneralizedTime\r\n   * }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [notBeforeTime]\r\n     * @property {string} [notAfterTime]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.GeneralizedTime({\n        name: names.notBeforeTime || \"\"\n      }), new asn1js.GeneralizedTime({\n        name: names.notAfterTime || \"\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"notBeforeTime\", \"notAfterTime\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, AttCertValidityPeriod.schema({\n      names: {\n        notBeforeTime: \"notBeforeTime\",\n        notAfterTime: \"notAfterTime\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AttCertValidityPeriod\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.notBeforeTime = asn1.result.notBeforeTime.toDate();\n    this.notAfterTime = asn1.result.notAfterTime.toDate(); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [new asn1js.GeneralizedTime({\n        valueDate: this.notBeforeTime\n      }), new asn1js.GeneralizedTime({\n        valueDate: this.notAfterTime\n      })]\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      notBeforeTime: this.notBeforeTime,\n      notAfterTime: this.notAfterTime\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * Class from RFC5755\r\n */\n\nexport class IssuerSerial {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for IssuerSerial class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {RelativeDistinguishedNames}\r\n     * @desc issuer\r\n     */\n    this.issuer = getParametersValue(parameters, \"issuer\", IssuerSerial.defaultValues(\"issuer\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc serialNumber\r\n     */\n\n    this.serialNumber = getParametersValue(parameters, \"serialNumber\", IssuerSerial.defaultValues(\"serialNumber\"));\n    if (\"issuerUID\" in parameters)\n      /**\r\n       * @type {BitString}\r\n       * @desc issuerUID\r\n       */\n      this.issuerUID = getParametersValue(parameters, \"issuerUID\", IssuerSerial.defaultValues(\"issuerUID\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"issuer\":\n        return new GeneralNames();\n\n      case \"serialNumber\":\n        return new asn1js.Integer();\n\n      case \"issuerUID\":\n        return new asn1js.BitString();\n\n      default:\n        throw new Error(`Invalid member name for IssuerSerial class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * IssuerSerial  ::=  SEQUENCE {\r\n   *   \tissuer         GeneralNames,\r\n   * \t\tserial         CertificateSerialNumber,\r\n   * \t\tissuerUID      UniqueIdentifier OPTIONAL\r\n   * }\r\n   *\r\n   * CertificateSerialNumber ::= INTEGER\r\n   * UniqueIdentifier  ::=  BIT STRING\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [issuer]\r\n     * @property {string} [serialNumber]\r\n     * @property {string} [issuerUID]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [GeneralNames.schema(names.issuer || {}), new asn1js.Integer({\n        name: names.serialNumber || \"\"\n      }), new asn1js.BitString({\n        optional: true,\n        name: names.issuerUID || \"\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"issuer\", \"serialNumber\", \"issuerUID\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, IssuerSerial.schema({\n      names: {\n        issuer: {\n          names: {\n            blockName: \"issuer\"\n          }\n        },\n        serialNumber: \"serialNumber\",\n        issuerUID: \"issuerUID\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for IssuerSerial\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.issuer = new GeneralNames({\n      schema: asn1.result.issuer\n    });\n    this.serialNumber = asn1.result.serialNumber;\n    if (\"issuerUID\" in asn1.result) this.issuerUID = asn1.result.issuerUID; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    const result = new asn1js.Sequence({\n      value: [this.issuer.toSchema(), this.serialNumber]\n    });\n    if (\"issuerUID\" in this) result.valueBlock.value.push(this.issuerUID); //region Construct and return new ASN.1 schema for this object\n\n    return result; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const result = {\n      issuer: this.issuer.toJSON(),\n      serialNumber: this.serialNumber.toJSON()\n    };\n    if (\"issuerUID\" in this) result.issuerUID = this.issuerUID.toJSON();\n    return result;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * Class from RFC5755\r\n */\n\nexport class AttributeCertificateInfoV1 {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for AttributeCertificateInfoV1 class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", AttributeCertificateInfoV1.defaultValues(\"version\"));\n    if (\"baseCertificateID\" in parameters)\n      /**\r\n       * @type {IssuerSerial}\r\n       * @desc baseCertificateID\r\n       */\n      this.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", AttributeCertificateInfoV1.defaultValues(\"baseCertificateID\"));\n    if (\"subjectName\" in parameters)\n      /**\r\n       * @type {GeneralNames}\r\n       * @desc subjectName\r\n       */\n      this.subjectName = getParametersValue(parameters, \"subjectName\", AttributeCertificateInfoV1.defaultValues(\"subjectName\"));\n    /**\r\n     * @type {GeneralNames}\r\n     * @desc issuer\r\n     */\n\n    this.issuer = getParametersValue(parameters, \"issuer\", AttributeCertificateInfoV1.defaultValues(\"issuer\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc signature\r\n     */\n\n    this.signature = getParametersValue(parameters, \"signature\", AttributeCertificateInfoV1.defaultValues(\"signature\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc serialNumber\r\n     */\n\n    this.serialNumber = getParametersValue(parameters, \"serialNumber\", AttributeCertificateInfoV1.defaultValues(\"serialNumber\"));\n    /**\r\n     * @type {AttCertValidityPeriod}\r\n     * @desc attrCertValidityPeriod\r\n     */\n\n    this.attrCertValidityPeriod = getParametersValue(parameters, \"attrCertValidityPeriod\", AttributeCertificateInfoV1.defaultValues(\"attrCertValidityPeriod\"));\n    /**\r\n     * @type {Array.<Attribute>}\r\n     * @desc attributes\r\n     */\n\n    this.attributes = getParametersValue(parameters, \"attributes\", AttributeCertificateInfoV1.defaultValues(\"attributes\"));\n    if (\"issuerUniqueID\" in parameters)\n      /**\r\n       * @type {BitString}\r\n       * @desc issuerUniqueID\r\n       */\n      this.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", AttributeCertificateInfoV1.defaultValues(\"issuerUniqueID\"));\n    if (\"extensions\" in parameters)\n      /**\r\n       * @type {Extensions}\r\n       * @desc extensions\r\n       */\n      this.extensions = getParametersValue(parameters, \"extensions\", AttributeCertificateInfoV1.defaultValues(\"extensions\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"version\":\n        return 0;\n\n      case \"baseCertificateID\":\n        return new IssuerSerial();\n\n      case \"subjectName\":\n        return new GeneralNames();\n\n      case \"issuer\":\n        return {};\n\n      case \"signature\":\n        return new AlgorithmIdentifier();\n\n      case \"serialNumber\":\n        return new asn1js.Integer();\n\n      case \"attrCertValidityPeriod\":\n        return new AttCertValidityPeriod();\n\n      case \"attributes\":\n        return [];\n\n      case \"issuerUniqueID\":\n        return new asn1js.BitString();\n\n      case \"extensions\":\n        return new Extensions();\n\n      default:\n        throw new Error(`Invalid member name for AttributeCertificateInfoV1 class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * AttributeCertificateInfo ::= SEQUENCE {\r\n   * \tversion Version DEFAULT v1,\r\n   * \tsubject CHOICE {\r\n   * \t\tbaseCertificateID [0] IssuerSerial, -- associated with a Public Key Certificate\r\n   * \t\tsubjectName [1] GeneralNames }, -- associated with a name\r\n   * \tissuer GeneralNames, -- CA issuing the attribute certificate\r\n   * \tsignature AlgorithmIdentifier,\r\n   * \tserialNumber CertificateSerialNumber,\r\n   * \tattrCertValidityPeriod AttCertValidityPeriod,\r\n   * \tattributes SEQUENCE OF Attribute,\r\n   * \tissuerUniqueID UniqueIdentifier OPTIONAL,\r\n   * \textensions Extensions OPTIONAL\r\n   * }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [issuer]\r\n     * @property {string} [serialNumber]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Integer({\n        name: names.version || \"\"\n      }), new asn1js.Choice({\n        value: [new asn1js.Constructed({\n          name: names.baseCertificateID || \"\",\n          idBlock: {\n            tagClass: 3,\n            tagNumber: 0 // [0]\n\n          },\n          value: IssuerSerial.schema().valueBlock.value\n        }), new asn1js.Constructed({\n          name: names.subjectName || \"\",\n          idBlock: {\n            tagClass: 3,\n            tagNumber: 1 // [2]\n\n          },\n          value: GeneralNames.schema().valueBlock.value\n        })]\n      }), GeneralNames.schema({\n        names: {\n          blockName: names.issuer || \"\"\n        }\n      }), AlgorithmIdentifier.schema(names.signature || {}), new asn1js.Integer({\n        name: names.serialNumber || \"\"\n      }), AttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}), new asn1js.Sequence({\n        name: names.attributes || \"\",\n        value: [new asn1js.Repeated({\n          value: Attribute.schema()\n        })]\n      }), new asn1js.BitString({\n        optional: true,\n        name: names.issuerUniqueID || \"\"\n      }), Extensions.schema(names.extensions || {}, true)]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"version\", \"baseCertificateID\", \"subjectName\", \"issuer\", \"signature\", \"serialNumber\", \"attrCertValidityPeriod\", \"attributes\", \"issuerUniqueID\", \"extensions\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, AttributeCertificateInfoV1.schema({\n      names: {\n        version: \"version\",\n        baseCertificateID: \"baseCertificateID\",\n        subjectName: \"subjectName\",\n        issuer: \"issuer\",\n        signature: {\n          names: {\n            blockName: \"signature\"\n          }\n        },\n        serialNumber: \"serialNumber\",\n        attrCertValidityPeriod: {\n          names: {\n            blockName: \"attrCertValidityPeriod\"\n          }\n        },\n        attributes: \"attributes\",\n        issuerUniqueID: \"issuerUniqueID\",\n        extensions: {\n          names: {\n            blockName: \"extensions\"\n          }\n        }\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AttributeCertificateInfoV1\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.version = asn1.result.version.valueBlock.valueDec;\n\n    if (\"baseCertificateID\" in asn1.result) {\n      this.baseCertificateID = new IssuerSerial({\n        schema: new asn1js.Sequence({\n          value: asn1.result.baseCertificateID.valueBlock.value\n        })\n      });\n    }\n\n    if (\"subjectName\" in asn1.result) {\n      this.subjectName = new GeneralNames({\n        schema: new asn1js.Sequence({\n          value: asn1.result.subjectName.valueBlock.value\n        })\n      });\n    }\n\n    this.issuer = asn1.result.issuer;\n    this.signature = new AlgorithmIdentifier({\n      schema: asn1.result.signature\n    });\n    this.serialNumber = asn1.result.serialNumber;\n    this.attrCertValidityPeriod = new AttCertValidityPeriod({\n      schema: asn1.result.attrCertValidityPeriod\n    });\n    this.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({\n      schema: element\n    }));\n    if (\"issuerUniqueID\" in asn1.result) this.issuerUniqueID = asn1.result.issuerUniqueID;\n    if (\"extensions\" in asn1.result) this.extensions = new Extensions({\n      schema: asn1.result.extensions\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    const result = new asn1js.Sequence({\n      value: [new asn1js.Integer({\n        value: this.version\n      })]\n    });\n\n    if (\"baseCertificateID\" in this) {\n      result.valueBlock.value.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          tagNumber: 0 // [0]\n\n        },\n        value: this.baseCertificateID.toSchema().valueBlock.value\n      }));\n    }\n\n    if (\"subjectName\" in this) {\n      result.valueBlock.value.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          tagNumber: 1 // [1]\n\n        },\n        value: this.subjectName.toSchema().valueBlock.value\n      }));\n    }\n\n    result.valueBlock.value.push(this.issuer.toSchema());\n    result.valueBlock.value.push(this.signature.toSchema());\n    result.valueBlock.value.push(this.serialNumber);\n    result.valueBlock.value.push(this.attrCertValidityPeriod.toSchema());\n    result.valueBlock.value.push(new asn1js.Sequence({\n      value: Array.from(this.attributes, element => element.toSchema())\n    }));\n    if (\"issuerUniqueID\" in this) result.valueBlock.value.push(this.issuerUniqueID);\n    if (\"extensions\" in this) result.valueBlock.value.push(this.extensions.toSchema());\n    return result;\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const result = {\n      version: this.version\n    };\n    if (\"baseCertificateID\" in this) result.baseCertificateID = this.baseCertificateID.toJSON();\n    if (\"subjectName\" in this) result.subjectName = this.subjectName.toJSON();\n    result.issuer = this.issuer.toJSON();\n    result.signature = this.signature.toJSON();\n    result.serialNumber = this.serialNumber.toJSON();\n    result.attrCertValidityPeriod = this.attrCertValidityPeriod.toJSON();\n    result.attributes = Array.from(this.attributes, element => element.toJSON());\n    if (\"issuerUniqueID\" in this) result.issuerUniqueID = this.issuerUniqueID.toJSON();\n    if (\"extensions\" in this) result.extensions = this.extensions.toJSON();\n    return result;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * Class from X.509:1997\r\n */\n\nexport default class AttributeCertificateV1 {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for AttributeCertificateV1 class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {AttributeCertificateInfoV1}\r\n     * @desc acinfo\r\n     */\n    this.acinfo = getParametersValue(parameters, \"acinfo\", AttributeCertificateV1.defaultValues(\"acinfo\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc signatureAlgorithm\r\n     */\n\n    this.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", AttributeCertificateV1.defaultValues(\"signatureAlgorithm\"));\n    /**\r\n     * @type {BitString}\r\n     * @desc signatureValue\r\n     */\n\n    this.signatureValue = getParametersValue(parameters, \"signatureValue\", AttributeCertificateV1.defaultValues(\"signatureValue\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"acinfo\":\n        return new AttributeCertificateInfoV1();\n\n      case \"signatureAlgorithm\":\n        return new AlgorithmIdentifier();\n\n      case \"signatureValue\":\n        return new asn1js.BitString();\n\n      default:\n        throw new Error(`Invalid member name for AttributeCertificateV1 class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * AttributeCertificate ::= SEQUENCE {\r\n   *   acinfo               AttributeCertificateInfoV1,\r\n   *   signatureAlgorithm   AlgorithmIdentifier,\r\n   *   signatureValue       BIT STRING\r\n   * }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {Object} [acinfo]\r\n     * @property {Object} [signatureAlgorithm]\r\n     * @property {string} [signatureValue]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [AttributeCertificateInfoV1.schema(names.acinfo || {}), AlgorithmIdentifier.schema(names.signatureAlgorithm || {}), new asn1js.BitString({\n        name: names.signatureValue || \"\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"acinfo\", \"signatureValue\", \"signatureAlgorithm\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, AttributeCertificateV1.schema({\n      names: {\n        acinfo: {\n          names: {\n            blockName: \"acinfo\"\n          }\n        },\n        signatureAlgorithm: {\n          names: {\n            blockName: \"signatureAlgorithm\"\n          }\n        },\n        signatureValue: \"signatureValue\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AttributeCertificateV1\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.acinfo = new AttributeCertificateInfoV1({\n      schema: asn1.result.acinfo\n    });\n    this.signatureAlgorithm = new AlgorithmIdentifier({\n      schema: asn1.result.signatureAlgorithm\n    });\n    this.signatureValue = asn1.result.signatureValue; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    return new asn1js.Sequence({\n      value: [this.acinfo.toSchema(), this.signatureAlgorithm.toSchema(), this.signatureValue]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      acinfo: this.acinfo.toJSON(),\n      signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n      signatureValue: this.signatureValue.toJSON()\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/AttributeCertificateV1.js"],"names":["asn1js","getParametersValue","clearProps","GeneralNames","AlgorithmIdentifier","Attribute","Extensions","AttCertValidityPeriod","constructor","parameters","notBeforeTime","defaultValues","notAfterTime","fromSchema","schema","memberName","Date","Error","names","Sequence","name","blockName","value","GeneralizedTime","asn1","compareSchema","verified","result","toDate","toSchema","valueDate","toJSON","IssuerSerial","issuer","serialNumber","issuerUID","Integer","BitString","optional","valueBlock","push","AttributeCertificateInfoV1","version","baseCertificateID","subjectName","signature","attrCertValidityPeriod","attributes","issuerUniqueID","extensions","Choice","Constructed","idBlock","tagClass","tagNumber","Repeated","valueDec","Array","from","element","AttributeCertificateV1","acinfo","signatureAlgorithm","signatureValue"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralNames from \"./GeneralNames.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class AttCertValidityPeriod\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttCertValidityPeriod class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {GeneralizedTime}\r\n\t\t * @desc notBeforeTime\r\n\t\t */\r\n\t\tthis.notBeforeTime = getParametersValue(parameters, \"notBeforeTime\", AttCertValidityPeriod.defaultValues(\"notBeforeTime\"));\r\n\t\t/**\r\n\t\t * @type {GeneralizedTime}\r\n\t\t * @desc notAfterTime\r\n\t\t */\r\n\t\tthis.notAfterTime = getParametersValue(parameters, \"notAfterTime\", AttCertValidityPeriod.defaultValues(\"notAfterTime\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"notBeforeTime\":\r\n\t\t\tcase \"notAfterTime\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttCertValidityPeriod class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AttCertValidityPeriod  ::= SEQUENCE {\r\n\t *   notBeforeTime  GeneralizedTime,\r\n\t *   notAfterTime   GeneralizedTime\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [notBeforeTime]\r\n\t\t * @property {string} [notAfterTime]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.notBeforeTime || \"\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.notAfterTime || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"notBeforeTime\",\r\n\t\t\t\"notAfterTime\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttCertValidityPeriod.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tnotBeforeTime: \"notBeforeTime\",\r\n\t\t\t\t\tnotAfterTime: \"notAfterTime\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttCertValidityPeriod\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.notBeforeTime = asn1.result.notBeforeTime.toDate();\r\n\t\tthis.notAfterTime = asn1.result.notAfterTime.toDate();\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.GeneralizedTime({ valueDate: this.notBeforeTime }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ valueDate: this.notAfterTime }),\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tnotBeforeTime: this.notBeforeTime,\r\n\t\t\tnotAfterTime: this.notAfterTime\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class IssuerSerial\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for IssuerSerial class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", IssuerSerial.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", IssuerSerial.defaultValues(\"serialNumber\"));\r\n\t\t\r\n\t\tif(\"issuerUID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {BitString}\r\n\t\t\t * @desc issuerUID\r\n\t\t\t */\r\n\t\t\tthis.issuerUID = getParametersValue(parameters, \"issuerUID\", IssuerSerial.defaultValues(\"issuerUID\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new GeneralNames();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"issuerUID\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for IssuerSerial class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * IssuerSerial  ::=  SEQUENCE {\r\n\t *   \tissuer         GeneralNames,\r\n\t * \t\tserial         CertificateSerialNumber,\r\n\t * \t\tissuerUID      UniqueIdentifier OPTIONAL\r\n\t * }\r\n\t *\r\n\t * CertificateSerialNumber ::= INTEGER\r\n\t * UniqueIdentifier  ::=  BIT STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuer]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t * @property {string} [issuerUID]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tGeneralNames.schema(names.issuer || {}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\r\n\t\t\t\tnew asn1js.BitString({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.issuerUID || \"\")\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"issuer\",\r\n\t\t\t\"serialNumber\",\r\n\t\t\t\"issuerUID\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tIssuerSerial.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tissuer: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"issuer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tserialNumber: \"serialNumber\",\r\n\t\t\t\t\tissuerUID: \"issuerUID\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for IssuerSerial\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.issuer = new GeneralNames({ schema: asn1.result.issuer });\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\t\r\n\t\tif(\"issuerUID\" in asn1.result)\r\n\t\t\tthis.issuerUID = asn1.result.issuerUID;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst result = new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.issuer.toSchema(),\r\n\t\t\t\tthis.serialNumber\r\n\t\t\t]\r\n\t\t});\r\n\t\t\r\n\t\tif(\"issuerUID\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.issuerUID);\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst result = {\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"issuerUID\" in this)\r\n\t\t\tresult.issuerUID = this.issuerUID.toJSON();\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class AttributeCertificateInfoV1\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeCertificateInfoV1 class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", AttributeCertificateInfoV1.defaultValues(\"version\"));\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {IssuerSerial}\r\n\t\t\t * @desc baseCertificateID\r\n\t\t\t */\r\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", AttributeCertificateInfoV1.defaultValues(\"baseCertificateID\"));\r\n\t\t\r\n\t\tif(\"subjectName\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralNames}\r\n\t\t\t * @desc subjectName\r\n\t\t\t */\r\n\t\t\tthis.subjectName = getParametersValue(parameters, \"subjectName\", AttributeCertificateInfoV1.defaultValues(\"subjectName\"));\r\n\r\n\t\t/**\r\n\t\t * @type {GeneralNames}\r\n\t\t * @desc issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", AttributeCertificateInfoV1.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", AttributeCertificateInfoV1.defaultValues(\"signature\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", AttributeCertificateInfoV1.defaultValues(\"serialNumber\"));\r\n\t\t/**\r\n\t\t * @type {AttCertValidityPeriod}\r\n\t\t * @desc attrCertValidityPeriod\r\n\t\t */\r\n\t\tthis.attrCertValidityPeriod = getParametersValue(parameters, \"attrCertValidityPeriod\", AttributeCertificateInfoV1.defaultValues(\"attrCertValidityPeriod\"));\r\n\t\t/**\r\n\t\t * @type {Array.<Attribute>}\r\n\t\t * @desc attributes\r\n\t\t */\r\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", AttributeCertificateInfoV1.defaultValues(\"attributes\"));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {BitString}\r\n\t\t\t * @desc issuerUniqueID\r\n\t\t\t */\r\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", AttributeCertificateInfoV1.defaultValues(\"issuerUniqueID\"));\r\n\t\t\t\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Extensions}\r\n\t\t\t * @desc extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", AttributeCertificateInfoV1.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"baseCertificateID\":\r\n\t\t\t\treturn new IssuerSerial();\r\n\t\t\tcase \"subjectName\":\r\n\t\t\t\treturn new GeneralNames();\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"attrCertValidityPeriod\":\r\n\t\t\t\treturn new AttCertValidityPeriod();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"issuerUniqueID\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn new Extensions();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateInfoV1 class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AttributeCertificateInfo ::= SEQUENCE {\r\n\t * \tversion Version DEFAULT v1,\r\n\t * \tsubject CHOICE {\r\n\t * \t\tbaseCertificateID [0] IssuerSerial, -- associated with a Public Key Certificate\r\n\t * \t\tsubjectName [1] GeneralNames }, -- associated with a name\r\n\t * \tissuer GeneralNames, -- CA issuing the attribute certificate\r\n\t * \tsignature AlgorithmIdentifier,\r\n\t * \tserialNumber CertificateSerialNumber,\r\n\t * \tattrCertValidityPeriod AttCertValidityPeriod,\r\n\t * \tattributes SEQUENCE OF Attribute,\r\n\t * \tissuerUniqueID UniqueIdentifier OPTIONAL,\r\n\t * \textensions Extensions OPTIONAL\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuer]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.baseCertificateID || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.subjectName || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 1 // [2]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: GeneralNames.schema().valueBlock.value\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tGeneralNames.schema({\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: (names.issuer || \"\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signature || {}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\r\n\t\t\t\tAttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tname: (names.attributes || \"\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.issuerUniqueID || \"\")\r\n\t\t\t\t}),\r\n\t\t\t\tExtensions.schema(names.extensions || {}, true)\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"baseCertificateID\",\r\n\t\t\t\"subjectName\",\r\n\t\t\t\"issuer\",\r\n\t\t\t\"signature\",\r\n\t\t\t\"serialNumber\",\r\n\t\t\t\"attrCertValidityPeriod\",\r\n\t\t\t\"attributes\",\r\n\t\t\t\"issuerUniqueID\",\r\n\t\t\t\"extensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeCertificateInfoV1.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\r\n\t\t\t\t\tsubjectName: \"subjectName\",\r\n\t\t\t\t\tissuer: \"issuer\",\r\n\t\t\t\t\tsignature: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"signature\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tserialNumber: \"serialNumber\",\r\n\t\t\t\t\tattrCertValidityPeriod: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"attrCertValidityPeriod\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tattributes: \"attributes\",\r\n\t\t\t\t\tissuerUniqueID: \"issuerUniqueID\",\r\n\t\t\t\t\textensions: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"extensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateInfoV1\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.baseCertificateID = new IssuerSerial({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.baseCertificateID.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tif(\"subjectName\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.subjectName = new GeneralNames({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.subjectName.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tthis.issuer = asn1.result.issuer;\r\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\tthis.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\r\n\t\tthis.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in asn1.result)\r\n\t\t\tthis.issuerUniqueID = asn1.result.issuerUniqueID;\r\n\t\t\r\n\t\tif(\"extensions\" in asn1.result)\r\n\t\t\tthis.extensions = new Extensions({ schema: asn1.result.extensions });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst result = new asn1js.Sequence({\r\n\t\t\tvalue: [new asn1js.Integer({ value: this.version })]\r\n\t\t});\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"subjectName\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.subjectName.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tresult.valueBlock.value.push(this.issuer.toSchema());\r\n\t\tresult.valueBlock.value.push(this.signature.toSchema());\r\n\t\tresult.valueBlock.value.push(this.serialNumber);\r\n\t\tresult.valueBlock.value.push(this.attrCertValidityPeriod.toSchema());\r\n\t\tresult.valueBlock.value.push(new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t}));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.issuerUniqueID);\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.extensions.toSchema());\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst result = {\r\n\t\t\tversion: this.version\r\n\t\t};\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in this)\r\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\r\n\t\t\r\n\t\tif(\"subjectName\" in this)\r\n\t\t\tresult.subjectName = this.subjectName.toJSON();\r\n\r\n\t\tresult.issuer = this.issuer.toJSON();\r\n\t\tresult.signature = this.signature.toJSON();\r\n\t\tresult.serialNumber = this.serialNumber.toJSON();\r\n\t\tresult.attrCertValidityPeriod = this.attrCertValidityPeriod.toJSON();\r\n\t\tresult.attributes = Array.from(this.attributes, element => element.toJSON());\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t\tresult.issuerUniqueID = this.issuerUniqueID.toJSON();\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t\tresult.extensions = this.extensions.toJSON();\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from X.509:1997\r\n */\r\nexport default class AttributeCertificateV1\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeCertificateV1 class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AttributeCertificateInfoV1}\r\n\t\t * @desc acinfo\r\n\t\t */\r\n\t\tthis.acinfo = getParametersValue(parameters, \"acinfo\", AttributeCertificateV1.defaultValues(\"acinfo\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", AttributeCertificateV1.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc signatureValue\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", AttributeCertificateV1.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"acinfo\":\r\n\t\t\t\treturn new AttributeCertificateInfoV1();\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateV1 class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AttributeCertificate ::= SEQUENCE {\r\n\t *   acinfo               AttributeCertificateInfoV1,\r\n\t *   signatureAlgorithm   AlgorithmIdentifier,\r\n\t *   signatureValue       BIT STRING\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {Object} [acinfo]\r\n\t\t * @property {Object} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAttributeCertificateInfoV1.schema(names.acinfo || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"acinfo\",\r\n\t\t\t\"signatureValue\",\r\n\t\t\t\"signatureAlgorithm\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeCertificateV1.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tacinfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"acinfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsignatureAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsignatureValue: \"signatureValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateV1\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.acinfo = new AttributeCertificateInfoV1({ schema: asn1.result.acinfo });\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.acinfo.toSchema(),\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tacinfo: this.acinfo.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}