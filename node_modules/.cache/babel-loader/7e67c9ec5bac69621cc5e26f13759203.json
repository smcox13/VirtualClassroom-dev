{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, utilConcatBuf, isEqualBuffer, clearProps } from \"pvutils\";\nimport { getCrypto, getEngine, getOIDByAlgorithm, getAlgorithmByOID } from \"./common.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport EncapsulatedContentInfo from \"./EncapsulatedContentInfo.js\";\nimport Certificate from \"./Certificate.js\";\nimport CertificateRevocationList from \"./CertificateRevocationList.js\";\nimport OtherRevocationInfoFormat from \"./OtherRevocationInfoFormat.js\";\nimport SignerInfo from \"./SignerInfo.js\";\nimport CertificateSet from \"./CertificateSet.js\";\nimport RevocationInfoChoices from \"./RevocationInfoChoices.js\";\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\nimport TSTInfo from \"./TSTInfo.js\";\nimport CertificateChainValidationEngine from \"./CertificateChainValidationEngine.js\";\nimport BasicOCSPResponse from \"./BasicOCSPResponse.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nexport default class SignedData {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for SignedData class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", SignedData.defaultValues(\"version\"));\n    /**\r\n     * @type {Array.<AlgorithmIdentifier>}\r\n     * @desc digestAlgorithms\r\n     */\n\n    this.digestAlgorithms = getParametersValue(parameters, \"digestAlgorithms\", SignedData.defaultValues(\"digestAlgorithms\"));\n    /**\r\n     * @type {EncapsulatedContentInfo}\r\n     * @desc encapContentInfo\r\n     */\n\n    this.encapContentInfo = getParametersValue(parameters, \"encapContentInfo\", SignedData.defaultValues(\"encapContentInfo\"));\n    if (\"certificates\" in parameters)\n      /**\r\n       * @type {Array.<Certificate|OtherCertificateFormat>}\r\n       * @desc certificates\r\n       */\n      this.certificates = getParametersValue(parameters, \"certificates\", SignedData.defaultValues(\"certificates\"));\n    if (\"crls\" in parameters)\n      /**\r\n       * @type {Array.<CertificateRevocationList|OtherRevocationInfoFormat>}\r\n       * @desc crls\r\n       */\n      this.crls = getParametersValue(parameters, \"crls\", SignedData.defaultValues(\"crls\"));\n    if (\"ocsps\" in parameters)\n      /**\r\n       * @type {Array.<BasicOCSPResponse>}\r\n       * @desc crls\r\n       */\n      this.ocsps = getParametersValue(parameters, \"ocsps\", SignedData.defaultValues(\"ocsps\"));\n    /**\r\n     * @type {Array.<SignerInfo>}\r\n     * @desc signerInfos\r\n     */\n\n    this.signerInfos = getParametersValue(parameters, \"signerInfos\", SignedData.defaultValues(\"signerInfos\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"version\":\n        return 0;\n\n      case \"digestAlgorithms\":\n        return [];\n\n      case \"encapContentInfo\":\n        return new EncapsulatedContentInfo();\n\n      case \"certificates\":\n        return [];\n\n      case \"crls\":\n        return [];\n\n      case \"ocsps\":\n        return [];\n\n      case \"signerInfos\":\n        return [];\n\n      default:\n        throw new Error(`Invalid member name for SignedData class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"version\":\n        return memberValue === SignedData.defaultValues(\"version\");\n\n      case \"encapContentInfo\":\n        return new EncapsulatedContentInfo();\n\n      case \"digestAlgorithms\":\n      case \"certificates\":\n      case \"crls\":\n      case \"ocsps\":\n      case \"signerInfos\":\n        return memberValue.length === 0;\n\n      default:\n        throw new Error(`Invalid member name for SignedData class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * SignedData ::= SEQUENCE {\r\n   *    version CMSVersion,\r\n   *    digestAlgorithms DigestAlgorithmIdentifiers,\r\n   *    encapContentInfo EncapsulatedContentInfo,\r\n   *    certificates [0] IMPLICIT CertificateSet OPTIONAL,\r\n   *    crls [1] IMPLICIT RevocationInfoChoices OPTIONAL,\r\n   *    signerInfos SignerInfos }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [optional]\r\n     * @property {string} [digestAlgorithms]\r\n     * @property {string} [encapContentInfo]\r\n     * @property {string} [certificates]\r\n     * @property {string} [crls]\r\n     * @property {string} [signerInfos]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    if (\"optional\" in names === false) names.optional = false;\n    return new asn1js.Sequence({\n      name: names.blockName || \"SignedData\",\n      optional: names.optional,\n      value: [new asn1js.Integer({\n        name: names.version || \"SignedData.version\"\n      }), new asn1js.Set({\n        value: [new asn1js.Repeated({\n          name: names.digestAlgorithms || \"SignedData.digestAlgorithms\",\n          value: AlgorithmIdentifier.schema()\n        })]\n      }), EncapsulatedContentInfo.schema(names.encapContentInfo || {\n        names: {\n          blockName: \"SignedData.encapContentInfo\"\n        }\n      }), new asn1js.Constructed({\n        name: names.certificates || \"SignedData.certificates\",\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: CertificateSet.schema().valueBlock.value\n      }), // IMPLICIT CertificateSet\n      new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: RevocationInfoChoices.schema(names.crls || {\n          names: {\n            crls: \"SignedData.crls\"\n          }\n        }).valueBlock.value\n      }), // IMPLICIT RevocationInfoChoices\n      new asn1js.Set({\n        value: [new asn1js.Repeated({\n          name: names.signerInfos || \"SignedData.signerInfos\",\n          value: SignerInfo.schema()\n        })]\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"SignedData.version\", \"SignedData.digestAlgorithms\", \"SignedData.encapContentInfo\", \"SignedData.certificates\", \"SignedData.crls\", \"SignedData.signerInfos\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, SignedData.schema());\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for SignedData\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.version = asn1.result[\"SignedData.version\"].valueBlock.valueDec;\n    if (\"SignedData.digestAlgorithms\" in asn1.result) // Could be empty SET of digest algorithms\n      this.digestAlgorithms = Array.from(asn1.result[\"SignedData.digestAlgorithms\"], algorithm => new AlgorithmIdentifier({\n        schema: algorithm\n      }));\n    this.encapContentInfo = new EncapsulatedContentInfo({\n      schema: asn1.result[\"SignedData.encapContentInfo\"]\n    });\n\n    if (\"SignedData.certificates\" in asn1.result) {\n      const certificateSet = new CertificateSet({\n        schema: new asn1js.Set({\n          value: asn1.result[\"SignedData.certificates\"].valueBlock.value\n        })\n      });\n      this.certificates = certificateSet.certificates.slice(0); // Copy all just for making comfortable access\n    }\n\n    if (\"SignedData.crls\" in asn1.result) {\n      this.crls = Array.from(asn1.result[\"SignedData.crls\"], crl => {\n        if (crl.idBlock.tagClass === 1) return new CertificateRevocationList({\n          schema: crl\n        }); //region Create SEQUENCE from [1]\n\n        crl.idBlock.tagClass = 1; // UNIVERSAL\n\n        crl.idBlock.tagNumber = 16; // SEQUENCE\n        //endregion\n\n        return new OtherRevocationInfoFormat({\n          schema: crl\n        });\n      });\n    }\n\n    if (\"SignedData.signerInfos\" in asn1.result) // Could be empty SET SignerInfos\n      this.signerInfos = Array.from(asn1.result[\"SignedData.signerInfos\"], signerInfoSchema => new SignerInfo({\n        schema: signerInfoSchema\n      })); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema(encodeFlag = false) {\n    //region Create array for output sequence\n    const outputArray = [];\n    outputArray.push(new asn1js.Integer({\n      value: this.version\n    })); //region Create array of digest algorithms\n\n    outputArray.push(new asn1js.Set({\n      value: Array.from(this.digestAlgorithms, algorithm => algorithm.toSchema(encodeFlag))\n    })); //endregion\n\n    outputArray.push(this.encapContentInfo.toSchema());\n\n    if (\"certificates\" in this) {\n      const certificateSet = new CertificateSet({\n        certificates: this.certificates\n      });\n      const certificateSetSchema = certificateSet.toSchema();\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          tagNumber: 0\n        },\n        value: certificateSetSchema.valueBlock.value\n      }));\n    }\n\n    if (\"crls\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: Array.from(this.crls, crl => {\n          if (crl instanceof OtherRevocationInfoFormat) {\n            const crlSchema = crl.toSchema(encodeFlag);\n            crlSchema.idBlock.tagClass = 3;\n            crlSchema.idBlock.tagNumber = 1;\n            return crlSchema;\n          }\n\n          return crl.toSchema(encodeFlag);\n        })\n      }));\n    } //region Create array of signer infos\n\n\n    outputArray.push(new asn1js.Set({\n      value: Array.from(this.signerInfos, signerInfo => signerInfo.toSchema(encodeFlag))\n    })); //endregion\n    //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const _object = {\n      version: this.version,\n      digestAlgorithms: Array.from(this.digestAlgorithms, algorithm => algorithm.toJSON()),\n      encapContentInfo: this.encapContentInfo.toJSON()\n    };\n    if (\"certificates\" in this) _object.certificates = Array.from(this.certificates, certificate => certificate.toJSON());\n    if (\"crls\" in this) _object.crls = Array.from(this.crls, crl => crl.toJSON());\n    _object.signerInfos = Array.from(this.signerInfos, signerInfo => signerInfo.toJSON());\n    return _object;\n  } //**********************************************************************************\n\n  /**\r\n   * Verify current SignedData value\r\n   * @param {Object} [param={}]\r\n   * @param {Number} [param.signer = -1] Index of the signer which information we need to verify\r\n   * @param {ArrayBuffer} [param.data=new ArrayBuffer(0)]\r\n   * @param {Array.<Certificate>} [param.trustedCerts=[]]\r\n   * @param {Date} [param.checkDate=new Date()]\r\n   * @param {Boolean} [param.checkChain=false]\r\n   * @param {Boolean} [param.extendedMode=false]\r\n   * @param {?Function} [findOrigin=null]\r\n   * @param {?Function} [findIssuer=null]\r\n   */\n\n\n  verify({\n    signer = -1,\n    data = new ArrayBuffer(0),\n    trustedCerts = [],\n    checkDate = new Date(),\n    checkChain = false,\n    extendedMode = false,\n    passedWhenNotRevValues = false,\n    findOrigin = null,\n    findIssuer = null\n  } = {}) {\n    //region Global variables\n    let sequence = Promise.resolve();\n    let messageDigestValue = new ArrayBuffer(0);\n    let shaAlgorithm = \"\";\n    let signerCertificate = {};\n    let timestampSerial = null;\n    let certificatePath = [];\n    const engine = getEngine(); //endregion\n    //region Get a \"crypto\" extension\n\n    const crypto = getCrypto();\n    if (typeof crypto === \"undefined\") return Promise.reject(\"Unable to create WebCrypto object\"); //endregion\n    //region Get a signer number\n\n    if (signer === -1) {\n      if (extendedMode) {\n        return Promise.reject({\n          date: checkDate,\n          code: 1,\n          message: \"Unable to get signer index from input parameters\",\n          signatureVerified: null,\n          signerCertificate: null,\n          signerCertificateVerified: null\n        });\n      }\n\n      return Promise.reject(\"Unable to get signer index from input parameters\");\n    } //endregion\n    //region Check that certificates field was included in signed data\n\n\n    if (\"certificates\" in this === false) {\n      if (extendedMode) {\n        return Promise.reject({\n          date: checkDate,\n          code: 2,\n          message: \"No certificates attached to this signed data\",\n          signatureVerified: null,\n          signerCertificate: null,\n          signerCertificateVerified: null\n        });\n      }\n\n      return Promise.reject(\"No certificates attached to this signed data\");\n    } //endregion\n    //region Find a certificate for specified signer\n\n\n    if (this.signerInfos[signer].sid instanceof IssuerAndSerialNumber) {\n      sequence = sequence.then(() => {\n        for (const certificate of this.certificates) {\n          if (certificate instanceof Certificate === false) continue;\n\n          if (certificate.issuer.isEqual(this.signerInfos[signer].sid.issuer) && certificate.serialNumber.isEqual(this.signerInfos[signer].sid.serialNumber)) {\n            signerCertificate = certificate;\n            return Promise.resolve();\n          }\n        }\n\n        if (extendedMode) {\n          return Promise.reject({\n            date: checkDate,\n            code: 3,\n            message: \"Unable to find signer certificate\",\n            signatureVerified: null,\n            signerCertificate: null,\n            signerCertificateVerified: null\n          });\n        }\n\n        return Promise.reject(\"Unable to find signer certificate\");\n      });\n    } else // Find by SubjectKeyIdentifier\n      {\n        sequence = sequence.then(() => Promise.all(Array.from(this.certificates.filter(certificate => certificate instanceof Certificate), certificate => crypto.digest({\n          name: \"sha-1\"\n        }, new Uint8Array(certificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex)))).then(results => {\n          for (const [index, certificate] of this.certificates.entries()) {\n            if (certificate instanceof Certificate === false) continue;\n\n            if (isEqualBuffer(results[index], this.signerInfos[signer].sid.valueBlock.valueHex)) {\n              signerCertificate = certificate;\n              return Promise.resolve();\n            }\n          }\n\n          if (extendedMode) {\n            return Promise.reject({\n              date: checkDate,\n              code: 3,\n              message: \"Unable to find signer certificate\",\n              signatureVerified: null,\n              signerCertificate: null,\n              signerCertificateVerified: null\n            });\n          }\n\n          return Promise.reject(\"Unable to find signer certificate\");\n        }, () => {\n          if (extendedMode) {\n            return Promise.reject({\n              date: checkDate,\n              code: 3,\n              message: \"Unable to find signer certificate\",\n              signatureVerified: null,\n              signerCertificate: null,\n              signerCertificateVerified: null\n            });\n          }\n\n          return Promise.reject(\"Unable to find signer certificate\");\n        }));\n      } //endregion\n    //region Verify internal digest in case of \"tSTInfo\" content type\n\n\n    sequence = sequence.then(() => {\n      if (this.encapContentInfo.eContentType === \"1.2.840.113549.1.9.16.1.4\") {\n        //region Check \"eContent\" precense\n        if (\"eContent\" in this.encapContentInfo === false) return false; //endregion\n        //region Initialize TST_INFO value\n\n        const asn1 = asn1js.fromBER(this.encapContentInfo.eContent.valueBlock.valueHex);\n        let tstInfo;\n\n        try {\n          tstInfo = new TSTInfo({\n            schema: asn1.result\n          });\n        } catch (ex) {\n          return false;\n        } //endregion\n        //region Change \"checkDate\" and append \"timestampSerial\"\n\n\n        checkDate = tstInfo.genTime;\n        timestampSerial = tstInfo.serialNumber.valueBlock.valueHex; //endregion\n        //region Check that we do have detached data content\n\n        if (data.byteLength === 0) {\n          if (extendedMode) {\n            return Promise.reject({\n              date: checkDate,\n              code: 4,\n              message: \"Missed detached data input array\",\n              signatureVerified: null,\n              signerCertificate,\n              signerCertificateVerified: null\n            });\n          }\n\n          return Promise.reject(\"Missed detached data input array\");\n        } //endregion\n\n\n        return tstInfo.verify({\n          data\n        });\n      }\n\n      return true;\n    }); //endregion\n    //region Make additional verification for signer's certificate\n\n    function checkCA(cert) {\n      /// <param name=\"cert\" type=\"in_window.org.pkijs.simpl.CERT\">Certificate to find CA flag for</param>\n      //region Do not include signer's certificate\n      if (cert.issuer.isEqual(signerCertificate.issuer) === true && cert.serialNumber.isEqual(signerCertificate.serialNumber) === true) return null; //endregion\n\n      let isCA = false;\n\n      if (\"extensions\" in cert) {\n        for (const extension of cert.extensions) {\n          if (extension.extnID === \"2.5.29.19\") // BasicConstraints\n            {\n              if (\"cA\" in extension.parsedValue) {\n                if (extension.parsedValue.cA === true) isCA = true;\n              }\n            }\n        }\n      }\n\n      if (isCA) return cert;\n      return null;\n    }\n\n    if (checkChain) {\n      sequence = sequence.then(result => {\n        //region Verify result of previous operation\n        if (result === false) return false; //endregion\n\n        const promiseResults = Array.from(this.certificates.filter(certificate => certificate instanceof Certificate), certificate => checkCA(certificate));\n        const certificateChainValidationEngineParameters = {\n          checkDate,\n          certs: Array.from(promiseResults.filter(_result => _result !== null)),\n          trustedCerts\n        };\n        if (findIssuer !== null) certificateChainValidationEngineParameters.findIssuer = findIssuer;\n        if (findOrigin !== null) certificateChainValidationEngineParameters.findOrigin = findOrigin;\n        const certificateChainEngine = new CertificateChainValidationEngine(certificateChainValidationEngineParameters);\n        certificateChainEngine.certs.push(signerCertificate);\n\n        if (\"crls\" in this) {\n          for (const crl of this.crls) {\n            if (\"thisUpdate\" in crl) certificateChainEngine.crls.push(crl);else // Assumed \"revocation value\" has \"OtherRevocationInfoFormat\"\n              {\n                if (crl.otherRevInfoFormat === \"1.3.6.1.5.5.7.48.1.1\") // Basic OCSP response\n                  certificateChainEngine.ocsps.push(new BasicOCSPResponse({\n                    schema: crl.otherRevInfo\n                  }));\n              }\n          }\n        }\n\n        if (\"ocsps\" in this) certificateChainEngine.ocsps.push(...this.ocsps);\n        return certificateChainEngine.verify({\n          passedWhenNotRevValues\n        }).then(verificationResult => {\n          if (\"certificatePath\" in verificationResult) certificatePath = verificationResult.certificatePath;\n          if (verificationResult.result === true) return Promise.resolve(true);\n\n          if (extendedMode) {\n            return Promise.reject({\n              date: checkDate,\n              code: 5,\n              message: `Validation of signer's certificate failed: ${verificationResult.resultMessage}`,\n              signatureVerified: null,\n              signerCertificate,\n              signerCertificateVerified: false\n            });\n          }\n\n          return Promise.reject(\"Validation of signer's certificate failed\");\n        }, error => {\n          if (extendedMode) {\n            return Promise.reject({\n              date: checkDate,\n              code: 5,\n              message: `Validation of signer's certificate failed with error: ${error instanceof Object ? error.resultMessage : error}`,\n              signatureVerified: null,\n              signerCertificate,\n              signerCertificateVerified: false\n            });\n          }\n\n          return Promise.reject(`Validation of signer's certificate failed with error: ${error instanceof Object ? error.resultMessage : error}`);\n        });\n      });\n    } //endregion\n    //region Find signer's hashing algorithm\n\n\n    sequence = sequence.then(result => {\n      //region Verify result of previous operation\n      if (result === false) return false; //endregion\n\n      const signerInfoHashAlgorithm = getAlgorithmByOID(this.signerInfos[signer].digestAlgorithm.algorithmId);\n\n      if (\"name\" in signerInfoHashAlgorithm === false) {\n        if (extendedMode) {\n          return Promise.reject({\n            date: checkDate,\n            code: 7,\n            message: `Unsupported signature algorithm: ${this.signerInfos[signer].digestAlgorithm.algorithmId}`,\n            signatureVerified: null,\n            signerCertificate,\n            signerCertificateVerified: true\n          });\n        }\n\n        return Promise.reject(`Unsupported signature algorithm: ${this.signerInfos[signer].digestAlgorithm.algorithmId}`);\n      }\n\n      shaAlgorithm = signerInfoHashAlgorithm.name;\n      return true;\n    }); //endregion\n    //region Create correct data block for verification\n\n    sequence = sequence.then(result => {\n      //region Verify result of previous operation\n      if (result === false) return false; //endregion\n\n      if (\"eContent\" in this.encapContentInfo) // Attached data\n        {\n          if (this.encapContentInfo.eContent.idBlock.tagClass === 1 && this.encapContentInfo.eContent.idBlock.tagNumber === 4) {\n            if (this.encapContentInfo.eContent.idBlock.isConstructed === false) data = this.encapContentInfo.eContent.valueBlock.valueHex;else {\n              for (const contentValue of this.encapContentInfo.eContent.valueBlock.value) data = utilConcatBuf(data, contentValue.valueBlock.valueHex);\n            }\n          } else data = this.encapContentInfo.eContent.valueBlock.valueBeforeDecode;\n        } else // Detached data\n        {\n          if (data.byteLength === 0) // Check that \"data\" already provided by function parameter\n            {\n              if (extendedMode) {\n                return Promise.reject({\n                  date: checkDate,\n                  code: 8,\n                  message: \"Missed detached data input array\",\n                  signatureVerified: null,\n                  signerCertificate,\n                  signerCertificateVerified: true\n                });\n              }\n\n              return Promise.reject(\"Missed detached data input array\");\n            }\n        }\n\n      if (\"signedAttrs\" in this.signerInfos[signer]) {\n        //region Check mandatory attributes\n        let foundContentType = false;\n        let foundMessageDigest = false;\n\n        for (const attribute of this.signerInfos[signer].signedAttrs.attributes) {\n          //region Check that \"content-type\" attribute exists\n          if (attribute.type === \"1.2.840.113549.1.9.3\") foundContentType = true; //endregion\n          //region Check that \"message-digest\" attribute exists\n\n          if (attribute.type === \"1.2.840.113549.1.9.4\") {\n            foundMessageDigest = true;\n            messageDigestValue = attribute.values[0].valueBlock.valueHex;\n          } //endregion\n          //region Speed-up searching\n\n\n          if (foundContentType && foundMessageDigest) break; //endregion\n        }\n\n        if (foundContentType === false) {\n          if (extendedMode) {\n            return Promise.reject({\n              date: checkDate,\n              code: 9,\n              message: \"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\n              signatureVerified: null,\n              signerCertificate,\n              signerCertificateVerified: true\n            });\n          }\n\n          return Promise.reject(\"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\");\n        }\n\n        if (foundMessageDigest === false) {\n          if (extendedMode) {\n            return Promise.reject({\n              date: checkDate,\n              code: 10,\n              message: \"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\n              signatureVerified: null,\n              signerCertificate,\n              signerCertificateVerified: true\n            });\n          }\n\n          return Promise.reject(\"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\");\n        } //endregion\n\n      }\n\n      return true;\n    }); //endregion\n    //region Verify \"message-digest\" attribute in case of \"signedAttrs\"\n\n    sequence = sequence.then(result => {\n      //region Verify result of previous operation\n      if (result === false) return false; //endregion\n\n      if (\"signedAttrs\" in this.signerInfos[signer]) return crypto.digest(shaAlgorithm, new Uint8Array(data));\n      return true;\n    }).then(\n    /**\r\n     * @param {ArrayBuffer} result\r\n     */\n    result => {\n      //region Verify result of previous operation\n      if (result === false) return false; //endregion\n\n      if (\"signedAttrs\" in this.signerInfos[signer]) {\n        if (isEqualBuffer(result, messageDigestValue)) {\n          data = this.signerInfos[signer].signedAttrs.encodedValue;\n          return true;\n        }\n\n        return false;\n      }\n\n      return true;\n    }); //endregion\n\n    sequence = sequence.then(result => {\n      //region Verify result of previous operation\n      if (result === false) return false; //endregion\n\n      return engine.subtle.verifyWithPublicKey(data, this.signerInfos[signer].signature, signerCertificate.subjectPublicKeyInfo, signerCertificate.signatureAlgorithm, shaAlgorithm);\n    }); //region Make a final result\n\n    sequence = sequence.then(result => {\n      if (extendedMode) {\n        return {\n          date: checkDate,\n          code: 14,\n          message: \"\",\n          signatureVerified: result,\n          signerCertificate,\n          timestampSerial,\n          signerCertificateVerified: true,\n          certificatePath\n        };\n      }\n\n      return result;\n    }, error => {\n      if (extendedMode) {\n        if (\"code\" in error) return Promise.reject(error);\n        return Promise.reject({\n          date: checkDate,\n          code: 15,\n          message: `Error during verification: ${error.message}`,\n          signatureVerified: null,\n          signerCertificate,\n          timestampSerial,\n          signerCertificateVerified: true\n        });\n      }\n\n      return Promise.reject(error);\n    }); //endregion\n\n    return sequence;\n  } //**********************************************************************************\n\n  /**\r\n   * Signing current SignedData\r\n   * @param {key} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n   * @param {number} signerIndex Index number (starting from 0) of signer index to make signature for\r\n   * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm. Default SHA-1\r\n   * @param {ArrayBuffer} [data] Detached data\r\n   * @returns {*}\r\n   */\n\n\n  sign(privateKey, signerIndex, hashAlgorithm = \"SHA-1\", data = new ArrayBuffer(0)) {\n    //region Initial checking\n    if (typeof privateKey === \"undefined\") return Promise.reject(\"Need to provide a private key for signing\"); //endregion\n    //region Initial variables\n\n    let sequence = Promise.resolve();\n    let parameters;\n    const engine = getEngine(); //endregion\n    //region Simple check for supported algorithm\n\n    const hashAlgorithmOID = getOIDByAlgorithm({\n      name: hashAlgorithm\n    });\n    if (hashAlgorithmOID === \"\") return Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`); //endregion\n    //region Append information about hash algorithm\n\n    if (this.digestAlgorithms.filter(algorithm => algorithm.algorithmId === hashAlgorithmOID).length === 0) {\n      this.digestAlgorithms.push(new AlgorithmIdentifier({\n        algorithmId: hashAlgorithmOID,\n        algorithmParams: new asn1js.Null()\n      }));\n    }\n\n    this.signerInfos[signerIndex].digestAlgorithm = new AlgorithmIdentifier({\n      algorithmId: hashAlgorithmOID,\n      algorithmParams: new asn1js.Null()\n    }); //endregion\n    //region Get a \"default parameters\" for current algorithm and set correct signature algorithm\n\n    sequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\n    sequence = sequence.then(result => {\n      parameters = result.parameters;\n      this.signerInfos[signerIndex].signatureAlgorithm = result.signatureAlgorithm;\n    }); //endregion\n    //region Create TBS data for signing\n\n    sequence = sequence.then(() => {\n      if (\"signedAttrs\" in this.signerInfos[signerIndex]) {\n        if (this.signerInfos[signerIndex].signedAttrs.encodedValue.byteLength !== 0) data = this.signerInfos[signerIndex].signedAttrs.encodedValue;else {\n          data = this.signerInfos[signerIndex].signedAttrs.toSchema(true).toBER(false); //region Change type from \"[0]\" to \"SET\" acordingly to standard\n\n          const view = new Uint8Array(data);\n          view[0] = 0x31; //endregion\n        }\n      } else {\n        if (\"eContent\" in this.encapContentInfo) // Attached data\n          {\n            if (this.encapContentInfo.eContent.idBlock.tagClass === 1 && this.encapContentInfo.eContent.idBlock.tagNumber === 4) {\n              if (this.encapContentInfo.eContent.idBlock.isConstructed === false) data = this.encapContentInfo.eContent.valueBlock.valueHex;else {\n                for (const content of this.encapContentInfo.eContent.valueBlock.value) data = utilConcatBuf(data, content.valueBlock.valueHex);\n              }\n            } else data = this.encapContentInfo.eContent.valueBlock.valueBeforeDecode;\n          } else // Detached data\n          {\n            if (data.byteLength === 0) // Check that \"data\" already provided by function parameter\n              return Promise.reject(\"Missed detached data input array\");\n          }\n      }\n\n      return Promise.resolve();\n    }); //endregion\n    //region Signing TBS data on provided private key\n\n    sequence = sequence.then(() => engine.subtle.signWithPrivateKey(data, privateKey, parameters));\n    sequence = sequence.then(result => {\n      this.signerInfos[signerIndex].signature = new asn1js.OctetString({\n        valueHex: result\n      });\n      return result;\n    }); //endregion\n\n    return sequence;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/SignedData.js"],"names":["asn1js","getParametersValue","utilConcatBuf","isEqualBuffer","clearProps","getCrypto","getEngine","getOIDByAlgorithm","getAlgorithmByOID","AlgorithmIdentifier","EncapsulatedContentInfo","Certificate","CertificateRevocationList","OtherRevocationInfoFormat","SignerInfo","CertificateSet","RevocationInfoChoices","IssuerAndSerialNumber","TSTInfo","CertificateChainValidationEngine","BasicOCSPResponse","SignedData","constructor","parameters","version","defaultValues","digestAlgorithms","encapContentInfo","certificates","crls","ocsps","signerInfos","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","names","optional","Sequence","name","blockName","value","Integer","Set","Repeated","Constructed","idBlock","tagClass","tagNumber","valueBlock","asn1","compareSchema","verified","result","valueDec","Array","from","algorithm","certificateSet","slice","crl","signerInfoSchema","toSchema","encodeFlag","outputArray","push","certificateSetSchema","crlSchema","signerInfo","toJSON","_object","certificate","verify","signer","data","ArrayBuffer","trustedCerts","checkDate","Date","checkChain","extendedMode","passedWhenNotRevValues","findOrigin","findIssuer","sequence","Promise","resolve","messageDigestValue","shaAlgorithm","signerCertificate","timestampSerial","certificatePath","engine","crypto","reject","date","code","message","signatureVerified","signerCertificateVerified","sid","then","issuer","isEqual","serialNumber","all","filter","digest","Uint8Array","subjectPublicKeyInfo","subjectPublicKey","valueHex","results","index","entries","eContentType","fromBER","eContent","tstInfo","ex","genTime","byteLength","checkCA","cert","isCA","extension","extensions","extnID","parsedValue","cA","promiseResults","certificateChainValidationEngineParameters","certs","_result","certificateChainEngine","otherRevInfoFormat","otherRevInfo","verificationResult","resultMessage","error","Object","signerInfoHashAlgorithm","digestAlgorithm","algorithmId","isConstructed","contentValue","valueBeforeDecode","foundContentType","foundMessageDigest","attribute","signedAttrs","attributes","type","values","encodedValue","subtle","verifyWithPublicKey","signature","signatureAlgorithm","sign","privateKey","signerIndex","hashAlgorithm","hashAlgorithmOID","algorithmParams","Null","getSignatureParameters","toBER","view","content","signWithPrivateKey","OctetString"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { getCrypto, getEngine, getOIDByAlgorithm, getAlgorithmByOID } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport EncapsulatedContentInfo from \"./EncapsulatedContentInfo.js\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport CertificateRevocationList from \"./CertificateRevocationList.js\";\r\nimport OtherRevocationInfoFormat from \"./OtherRevocationInfoFormat.js\";\r\nimport SignerInfo from \"./SignerInfo.js\";\r\nimport CertificateSet from \"./CertificateSet.js\";\r\nimport RevocationInfoChoices from \"./RevocationInfoChoices.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\nimport TSTInfo from \"./TSTInfo.js\";\r\nimport CertificateChainValidationEngine from \"./CertificateChainValidationEngine.js\";\r\nimport BasicOCSPResponse from \"./BasicOCSPResponse.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class SignedData \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", SignedData.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Array.<AlgorithmIdentifier>}\r\n\t\t * @desc digestAlgorithms\r\n\t\t */\r\n\t\tthis.digestAlgorithms = getParametersValue(parameters, \"digestAlgorithms\", SignedData.defaultValues(\"digestAlgorithms\"));\r\n\t\t/**\r\n\t\t * @type {EncapsulatedContentInfo}\r\n\t\t * @desc encapContentInfo\r\n\t\t */\r\n\t\tthis.encapContentInfo = getParametersValue(parameters, \"encapContentInfo\", SignedData.defaultValues(\"encapContentInfo\"));\r\n\t\t\r\n\t\tif(\"certificates\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate|OtherCertificateFormat>}\r\n\t\t\t * @desc certificates\r\n\t\t\t */\r\n\t\t\tthis.certificates = getParametersValue(parameters, \"certificates\", SignedData.defaultValues(\"certificates\"));\r\n\t\t\r\n\t\tif(\"crls\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<CertificateRevocationList|OtherRevocationInfoFormat>}\r\n\t\t\t * @desc crls\r\n\t\t\t */\r\n\t\t\tthis.crls = getParametersValue(parameters, \"crls\", SignedData.defaultValues(\"crls\"));\r\n\t\t\r\n\t\tif(\"ocsps\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<BasicOCSPResponse>}\r\n\t\t\t * @desc crls\r\n\t\t\t */\r\n\t\t\tthis.ocsps = getParametersValue(parameters, \"ocsps\", SignedData.defaultValues(\"ocsps\"));\r\n\r\n\t\t/**\r\n\t\t * @type {Array.<SignerInfo>}\r\n\t\t * @desc signerInfos\r\n\t\t */\r\n\t\tthis.signerInfos = getParametersValue(parameters, \"signerInfos\", SignedData.defaultValues(\"signerInfos\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"digestAlgorithms\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"encapContentInfo\":\r\n\t\t\t\treturn new EncapsulatedContentInfo();\r\n\t\t\tcase \"certificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"ocsps\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signerInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === SignedData.defaultValues(\"version\"));\r\n\t\t\tcase \"encapContentInfo\":\r\n\t\t\t\treturn new EncapsulatedContentInfo();\r\n\t\t\tcase \"digestAlgorithms\":\r\n\t\t\tcase \"certificates\":\r\n\t\t\tcase \"crls\":\r\n\t\t\tcase \"ocsps\":\r\n\t\t\tcase \"signerInfos\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SignedData ::= SEQUENCE {\r\n\t *    version CMSVersion,\r\n\t *    digestAlgorithms DigestAlgorithmIdentifiers,\r\n\t *    encapContentInfo EncapsulatedContentInfo,\r\n\t *    certificates [0] IMPLICIT CertificateSet OPTIONAL,\r\n\t *    crls [1] IMPLICIT RevocationInfoChoices OPTIONAL,\r\n\t *    signerInfos SignerInfos }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t * @property {string} [digestAlgorithms]\r\n\t\t * @property {string} [encapContentInfo]\r\n\t\t * @property {string} [certificates]\r\n\t\t * @property {string} [crls]\r\n\t\t * @property {string} [signerInfos]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\tif((\"optional\" in names) === false)\r\n\t\t\tnames.optional = false;\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"SignedData\"),\r\n\t\t\toptional: names.optional,\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"SignedData.version\") }),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.digestAlgorithms || \"SignedData.digestAlgorithms\"),\r\n\t\t\t\t\t\t\tvalue: AlgorithmIdentifier.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tEncapsulatedContentInfo.schema(names.encapContentInfo || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"SignedData.encapContentInfo\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.certificates || \"SignedData.certificates\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: CertificateSet.schema().valueBlock.value\r\n\t\t\t\t}), // IMPLICIT CertificateSet\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: RevocationInfoChoices.schema(names.crls || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tcrls: \"SignedData.crls\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}).valueBlock.value\r\n\t\t\t\t}), // IMPLICIT RevocationInfoChoices\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.signerInfos || \"SignedData.signerInfos\"),\r\n\t\t\t\t\t\t\tvalue: SignerInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"SignedData.version\",\r\n\t\t\t\"SignedData.digestAlgorithms\",\r\n\t\t\t\"SignedData.encapContentInfo\",\r\n\t\t\t\"SignedData.certificates\",\r\n\t\t\t\"SignedData.crls\",\r\n\t\t\t\"SignedData.signerInfos\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignedData.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"SignedData.version\"].valueBlock.valueDec;\r\n\t\t\r\n\t\tif(\"SignedData.digestAlgorithms\" in asn1.result) // Could be empty SET of digest algorithms\r\n\t\t\tthis.digestAlgorithms = Array.from(asn1.result[\"SignedData.digestAlgorithms\"], algorithm => new AlgorithmIdentifier({ schema: algorithm }));\r\n\t\t\r\n\t\tthis.encapContentInfo = new EncapsulatedContentInfo({ schema: asn1.result[\"SignedData.encapContentInfo\"] });\r\n\t\t\r\n\t\tif(\"SignedData.certificates\" in asn1.result)\r\n\t\t{\r\n\t\t\tconst certificateSet = new CertificateSet({\r\n\t\t\t\tschema: new asn1js.Set({\r\n\t\t\t\t\tvalue: asn1.result[\"SignedData.certificates\"].valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tthis.certificates = certificateSet.certificates.slice(0); // Copy all just for making comfortable access\r\n\t\t}\r\n\t\t\r\n\t\tif(\"SignedData.crls\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.crls = Array.from(asn1.result[\"SignedData.crls\"], crl =>\r\n\t\t\t{\r\n\t\t\t\tif(crl.idBlock.tagClass === 1)\r\n\t\t\t\t\treturn new CertificateRevocationList({ schema: crl });\r\n\t\t\t\t\r\n\t\t\t\t//region Create SEQUENCE from [1]\r\n\t\t\t\tcrl.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\t\tcrl.idBlock.tagNumber = 16; // SEQUENCE\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn new OtherRevocationInfoFormat({ schema: crl });\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tif(\"SignedData.signerInfos\" in asn1.result) // Could be empty SET SignerInfos\r\n\t\t\tthis.signerInfos = Array.from(asn1.result[\"SignedData.signerInfos\"], signerInfoSchema => new SignerInfo({ schema: signerInfoSchema }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\t//region Create array of digest algorithms\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.digestAlgorithms, algorithm => algorithm.toSchema(encodeFlag))\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t\r\n\t\toutputArray.push(this.encapContentInfo.toSchema());\r\n\t\t\r\n\t\tif(\"certificates\" in this)\r\n\t\t{\r\n\t\t\tconst certificateSet = new CertificateSet({ certificates: this.certificates });\r\n\t\t\tconst certificateSetSchema = certificateSet.toSchema();\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 0\r\n\t\t\t\t},\r\n\t\t\t\tvalue: certificateSetSchema.valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"crls\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.crls, crl =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(crl instanceof OtherRevocationInfoFormat)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst crlSchema = crl.toSchema(encodeFlag);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcrlSchema.idBlock.tagClass = 3;\r\n\t\t\t\t\t\tcrlSchema.idBlock.tagNumber = 1;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn crlSchema;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn crl.toSchema(encodeFlag);\r\n\t\t\t\t})\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\t//region Create array of signer infos\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.signerInfos, signerInfo => signerInfo.toSchema(encodeFlag))\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tdigestAlgorithms: Array.from(this.digestAlgorithms, algorithm => algorithm.toJSON()),\r\n\t\t\tencapContentInfo: this.encapContentInfo.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"certificates\" in this)\r\n\t\t\t_object.certificates = Array.from(this.certificates, certificate => certificate.toJSON());\r\n\t\t\r\n\t\tif(\"crls\" in this)\r\n\t\t\t_object.crls = Array.from(this.crls, crl => crl.toJSON());\r\n\t\t\r\n\t\t_object.signerInfos = Array.from(this.signerInfos, signerInfo => signerInfo.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current SignedData value\r\n\t * @param {Object} [param={}]\r\n\t * @param {Number} [param.signer = -1] Index of the signer which information we need to verify\r\n\t * @param {ArrayBuffer} [param.data=new ArrayBuffer(0)]\r\n\t * @param {Array.<Certificate>} [param.trustedCerts=[]]\r\n\t * @param {Date} [param.checkDate=new Date()]\r\n\t * @param {Boolean} [param.checkChain=false]\r\n\t * @param {Boolean} [param.extendedMode=false]\r\n\t * @param {?Function} [findOrigin=null]\r\n\t * @param {?Function} [findIssuer=null]\r\n\t */\r\n\tverify({\r\n\t\tsigner = (-1),\r\n\t\tdata = (new ArrayBuffer(0)),\r\n\t\ttrustedCerts = [],\r\n\t\tcheckDate = (new Date()),\r\n\t\tcheckChain = false,\r\n\t\textendedMode = false,\r\n\t\tpassedWhenNotRevValues = false,\r\n\t\tfindOrigin = null,\r\n\t\tfindIssuer = null\r\n\t} = {})\r\n\t{\r\n\t\t//region Global variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet messageDigestValue = new ArrayBuffer(0);\r\n\t\t\r\n\t\tlet shaAlgorithm = \"\";\r\n\t\t\r\n\t\tlet signerCertificate = {};\r\n\t\t\r\n\t\tlet timestampSerial = null;\r\n\t\t\r\n\t\tlet certificatePath = [];\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a signer number\r\n\t\tif(signer === (-1))\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 1,\r\n\t\t\t\t\tmessage: \"Unable to get signer index from input parameters\",\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(\"Unable to get signer index from input parameters\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check that certificates field was included in signed data\r\n\t\tif((\"certificates\" in this) === false)\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 2,\r\n\t\t\t\t\tmessage: \"No certificates attached to this signed data\",\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(\"No certificates attached to this signed data\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find a certificate for specified signer\r\n\t\tif(this.signerInfos[signer].sid instanceof IssuerAndSerialNumber)\r\n\t\t{\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tfor(const certificate of this.certificates)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((certificate instanceof Certificate) === false)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((certificate.issuer.isEqual(this.signerInfos[signer].sid.issuer)) &&\r\n\t\t\t\t\t\t(certificate.serialNumber.isEqual(this.signerInfos[signer].sid.serialNumber)))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsignerCertificate = certificate;\r\n\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(extendedMode)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject(\"Unable to find signer certificate\");\r\n\t\t\t});\r\n\t\t}\r\n\t\telse // Find by SubjectKeyIdentifier\r\n\t\t{\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\tPromise.all(Array.from(this.certificates.filter(certificate => (certificate instanceof Certificate)), certificate =>\r\n\t\t\t\t\tcrypto.digest({ name: \"sha-1\" }, new Uint8Array(certificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex)))\r\n\t\t\t\t).then(results =>\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const [index, certificate] of this.certificates.entries())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((certificate instanceof Certificate) === false)\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(isEqualBuffer(results[index], this.signerInfos[signer].sid.valueBlock.valueHex))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsignerCertificate = certificate;\r\n\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Unable to find signer certificate\");\r\n\t\t\t\t}, () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Unable to find signer certificate\");\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify internal digest in case of \"tSTInfo\" content type\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tif(this.encapContentInfo.eContentType === \"1.2.840.113549.1.9.16.1.4\")\r\n\t\t\t{\r\n\t\t\t\t//region Check \"eContent\" precense\r\n\t\t\t\tif((\"eContent\" in this.encapContentInfo) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Initialize TST_INFO value\r\n\t\t\t\tconst asn1 = asn1js.fromBER(this.encapContentInfo.eContent.valueBlock.valueHex);\r\n\t\t\t\tlet tstInfo;\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\ttstInfo = new TSTInfo({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Change \"checkDate\" and append \"timestampSerial\"\r\n\t\t\t\tcheckDate = tstInfo.genTime;\r\n\t\t\t\ttimestampSerial = tstInfo.serialNumber.valueBlock.valueHex;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Check that we do have detached data content\r\n\t\t\t\tif(data.byteLength === 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 4,\r\n\t\t\t\t\t\t\tmessage: \"Missed detached data input array\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn tstInfo.verify({ data });\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make additional verification for signer's certificate\r\n\t\tfunction checkCA(cert)\r\n\t\t{\r\n\t\t\t/// <param name=\"cert\" type=\"in_window.org.pkijs.simpl.CERT\">Certificate to find CA flag for</param>\r\n\t\t\t\r\n\t\t\t//region Do not include signer's certificate\r\n\t\t\tif((cert.issuer.isEqual(signerCertificate.issuer) === true) && (cert.serialNumber.isEqual(signerCertificate.serialNumber) === true))\r\n\t\t\t\treturn null;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tlet isCA = false;\r\n\t\t\t\r\n\t\t\tif(\"extensions\" in cert)\r\n\t\t\t{\r\n\t\t\t\tfor(const extension of cert.extensions)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extension.extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"cA\" in extension.parsedValue)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(extension.parsedValue.cA === true)\r\n\t\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isCA)\r\n\t\t\t\treturn cert;\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tif(checkChain)\r\n\t\t{\r\n\t\t\tsequence = sequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Verify result of previous operation\r\n\t\t\t\tif(result === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tconst promiseResults = Array.from(this.certificates.filter(certificate => (certificate instanceof Certificate)), certificate => checkCA(certificate));\r\n\t\t\t\t\r\n\t\t\t\tconst certificateChainValidationEngineParameters = {\r\n\t\t\t\t\tcheckDate,\r\n\t\t\t\t\tcerts: Array.from(promiseResults.filter(_result => (_result !== null))),\r\n\t\t\t\t\ttrustedCerts\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tif(findIssuer !== null)\r\n\t\t\t\t\tcertificateChainValidationEngineParameters.findIssuer = findIssuer;\r\n\t\t\t\t\r\n\t\t\t\tif(findOrigin !== null)\r\n\t\t\t\t\tcertificateChainValidationEngineParameters.findOrigin = findOrigin;\r\n\t\t\t\t\r\n\t\t\t\tconst certificateChainEngine = new CertificateChainValidationEngine(certificateChainValidationEngineParameters);\r\n\t\t\t\t\r\n\t\t\t\tcertificateChainEngine.certs.push(signerCertificate);\r\n\t\t\t\t\r\n\t\t\t\tif(\"crls\" in this)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const crl of this.crls)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"thisUpdate\" in crl)\r\n\t\t\t\t\t\t\tcertificateChainEngine.crls.push(crl);\r\n\t\t\t\t\t\telse // Assumed \"revocation value\" has \"OtherRevocationInfoFormat\"\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(crl.otherRevInfoFormat === \"1.3.6.1.5.5.7.48.1.1\") // Basic OCSP response\r\n\t\t\t\t\t\t\t\tcertificateChainEngine.ocsps.push(new BasicOCSPResponse({ schema: crl.otherRevInfo }));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(\"ocsps\" in this)\r\n\t\t\t\t\tcertificateChainEngine.ocsps.push(...(this.ocsps));\r\n\t\t\t\t\r\n\t\t\t\treturn certificateChainEngine.verify({ passedWhenNotRevValues }).then(verificationResult =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"certificatePath\" in verificationResult)\r\n\t\t\t\t\t\tcertificatePath = verificationResult.certificatePath;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(verificationResult.result === true)\r\n\t\t\t\t\t\treturn Promise.resolve(true);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 5,\r\n\t\t\t\t\t\t\tmessage: `Validation of signer's certificate failed: ${verificationResult.resultMessage}`,\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: false\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Validation of signer's certificate failed\");\r\n\t\t\t\t}, error =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 5,\r\n\t\t\t\t\t\t\tmessage: `Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`,\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: false\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(`Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst signerInfoHashAlgorithm = getAlgorithmByOID(this.signerInfos[signer].digestAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in signerInfoHashAlgorithm) === false)\r\n\t\t\t{\r\n\t\t\t\tif(extendedMode)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\tcode: 7,\r\n\t\t\t\t\t\tmessage: `Unsupported signature algorithm: ${this.signerInfos[signer].digestAlgorithm.algorithmId}`,\r\n\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.signerInfos[signer].digestAlgorithm.algorithmId}`);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tshaAlgorithm = signerInfoHashAlgorithm.name;\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create correct data block for verification\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(\"eContent\" in this.encapContentInfo) // Attached data\r\n\t\t\t{\r\n\t\t\t\tif((this.encapContentInfo.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t\t(this.encapContentInfo.eContent.idBlock.tagNumber === 4))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(const contentValue of this.encapContentInfo.eContent.valueBlock.value)\r\n\t\t\t\t\t\t\tdata = utilConcatBuf(data, contentValue.valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueBeforeDecode;\r\n\t\t\t}\r\n\t\t\telse // Detached data\r\n\t\t\t{\r\n\t\t\t\tif(data.byteLength === 0) // Check that \"data\" already provided by function parameter\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 8,\r\n\t\t\t\t\t\t\tmessage: \"Missed detached data input array\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t{\r\n\t\t\t\t//region Check mandatory attributes\r\n\t\t\t\tlet foundContentType = false;\r\n\t\t\t\tlet foundMessageDigest = false;\r\n\t\t\t\t\r\n\t\t\t\tfor(const attribute of this.signerInfos[signer].signedAttrs.attributes)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check that \"content-type\" attribute exists\r\n\t\t\t\t\tif(attribute.type === \"1.2.840.113549.1.9.3\")\r\n\t\t\t\t\t\tfoundContentType = true;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check that \"message-digest\" attribute exists\r\n\t\t\t\t\tif(attribute.type === \"1.2.840.113549.1.9.4\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfoundMessageDigest = true;\r\n\t\t\t\t\t\tmessageDigestValue = attribute.values[0].valueBlock.valueHex;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Speed-up searching\r\n\t\t\t\t\tif(foundContentType && foundMessageDigest)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(foundContentType === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 9,\r\n\t\t\t\t\t\t\tmessage: \"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(foundMessageDigest === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 10,\r\n\t\t\t\t\t\t\tmessage: \"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify \"message-digest\" attribute in case of \"signedAttrs\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t\treturn crypto.digest(shaAlgorithm, new Uint8Array(data));\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}).then(\r\n\t\t\t/**\r\n\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t */\r\n\t\t\tresult =>\r\n\t\t\t{\r\n\t\t\t\t//region Verify result of previous operation\r\n\t\t\t\tif(result === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isEqualBuffer(result, messageDigestValue))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdata = this.signerInfos[signer].signedAttrs.encodedValue;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn engine.subtle.verifyWithPublicKey(data, this.signerInfos[signer].signature, signerCertificate.subjectPublicKeyInfo, signerCertificate.signatureAlgorithm, shaAlgorithm);\r\n\t\t});\r\n\t\t\r\n\t\t//region Make a final result\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 14,\r\n\t\t\t\t\tmessage: \"\",\r\n\t\t\t\t\tsignatureVerified: result,\r\n\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\ttimestampSerial,\r\n\t\t\t\t\tsignerCertificateVerified: true,\r\n\t\t\t\t\tcertificatePath\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}, error =>\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\tif(\"code\" in error)\r\n\t\t\t\t\treturn Promise.reject(error);\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 15,\r\n\t\t\t\t\tmessage: `Error during verification: ${error.message}`,\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\ttimestampSerial,\r\n\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(error);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Signing current SignedData\r\n\t * @param {key} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {number} signerIndex Index number (starting from 0) of signer index to make signature for\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm. Default SHA-1\r\n\t * @param {ArrayBuffer} [data] Detached data\r\n\t * @returns {*}\r\n\t */\r\n\tsign(privateKey, signerIndex, hashAlgorithm = \"SHA-1\", data = (new ArrayBuffer(0)))\r\n\t{\r\n\t\t//region Initial checking\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Simple check for supported algorithm\r\n\t\tconst hashAlgorithmOID = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Append information about hash algorithm\r\n\t\tif((this.digestAlgorithms.filter(algorithm => algorithm.algorithmId === hashAlgorithmOID)).length === 0)\r\n\t\t{\r\n\t\t\tthis.digestAlgorithms.push(new AlgorithmIdentifier({\r\n\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tthis.signerInfos[signerIndex].digestAlgorithm = new AlgorithmIdentifier({\r\n\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signerInfos[signerIndex].signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signerIndex])\r\n\t\t\t{\r\n\t\t\t\tif(this.signerInfos[signerIndex].signedAttrs.encodedValue.byteLength !== 0)\r\n\t\t\t\t\tdata = this.signerInfos[signerIndex].signedAttrs.encodedValue;\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tdata = this.signerInfos[signerIndex].signedAttrs.toSchema(true).toBER(false);\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Change type from \"[0]\" to \"SET\" acordingly to standard\r\n\t\t\t\t\tconst view = new Uint8Array(data);\r\n\t\t\t\t\tview[0] = 0x31;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(\"eContent\" in this.encapContentInfo) // Attached data\r\n\t\t\t\t{\r\n\t\t\t\t\tif((this.encapContentInfo.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t\t\t(this.encapContentInfo.eContent.idBlock.tagNumber === 4))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(this.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(const content of this.encapContentInfo.eContent.valueBlock.value)\r\n\t\t\t\t\t\t\t\tdata = utilConcatBuf(data, content.valueBlock.valueHex);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueBeforeDecode;\r\n\t\t\t\t}\r\n\t\t\t\telse // Detached data\r\n\t\t\t\t{\r\n\t\t\t\t\tif(data.byteLength === 0) // Check that \"data\" already provided by function parameter\r\n\t\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.resolve();\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(data, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signerInfos[signerIndex].signature = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}