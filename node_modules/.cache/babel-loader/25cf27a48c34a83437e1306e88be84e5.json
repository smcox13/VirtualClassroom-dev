{"ast":null,"code":"/*!\n * urlsafe-base64\n */\n\n/**\n * Module Dependencies\n */\n// None yet!\n\n/**\n * Library version.\n */\nexports.version = '1.0.0';\n/**\n * .encode\n *\n * return an encoded Buffer as URL Safe Base64\n *\n * Note: This function encodes to the RFC 4648 Spec where '+' is encoded\n *       as '-' and '/' is encoded as '_'. The padding character '=' is\n *       removed.\n *\n * @param {Buffer} buffer\n * @return {String}\n * @api public\n */\n\nexports.encode = function encode(buffer) {\n  return buffer.toString('base64').replace(/\\+/g, '-') // Convert '+' to '-'\n  .replace(/\\//g, '_') // Convert '/' to '_'\n  .replace(/=+$/, ''); // Remove ending '='\n};\n/**\n * .decode\n *\n * return an decoded URL Safe Base64 as Buffer\n *\n * @param {String}\n * @return {Buffer}\n * @api public\n */\n\n\nexports.decode = function decode(base64) {\n  // Add removed at end '='\n  base64 += Array(5 - base64.length % 4).join('=');\n  base64 = base64.replace(/\\-/g, '+') // Convert '-' to '+'\n  .replace(/\\_/g, '/'); // Convert '_' to '/'\n\n  return new Buffer(base64, 'base64');\n};\n/**\n * .validate\n *\n * Validates a string if it is URL Safe Base64 encoded.\n *\n * @param {String}\n * @return {Boolean}\n * @api public\n */\n\n\nexports.validate = function validate(base64) {\n  return /^[A-Za-z0-9\\-_]+$/.test(base64);\n};","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/urlsafe-base64/lib/urlsafe-base64.js"],"names":["exports","version","encode","buffer","toString","replace","decode","base64","Array","length","join","Buffer","validate","test"],"mappings":"AAAA;;;;AAIA;;;AAIA;;AAEA;;;AAIAA,OAAO,CAACC,OAAR,GAAkB,OAAlB;AAEA;;;;;;;;;;;;;;AAcAD,OAAO,CAACE,MAAR,GAAiB,SAASA,MAAT,CAAgBC,MAAhB,EAAwB;AAEvC,SAAOA,MAAM,CAACC,QAAP,CAAgB,QAAhB,EACJC,OADI,CACI,KADJ,EACW,GADX,EACgB;AADhB,GAEJA,OAFI,CAEI,KAFJ,EAEW,GAFX,EAEgB;AAFhB,GAGJA,OAHI,CAGI,KAHJ,EAGW,EAHX,CAAP,CAFuC,CAKhB;AAExB,CAPD;AASA;;;;;;;;;;;AAUAL,OAAO,CAACM,MAAR,GAAiB,SAASA,MAAT,CAAgBC,MAAhB,EAAwB;AAEvC;AACAA,EAAAA,MAAM,IAAIC,KAAK,CAAC,IAAID,MAAM,CAACE,MAAP,GAAgB,CAArB,CAAL,CAA6BC,IAA7B,CAAkC,GAAlC,CAAV;AAEAH,EAAAA,MAAM,GAAGA,MAAM,CACZF,OADM,CACE,KADF,EACS,GADT,EACc;AADd,GAENA,OAFM,CAEE,KAFF,EAES,GAFT,CAAT,CALuC,CAOf;;AAExB,SAAO,IAAIM,MAAJ,CAAWJ,MAAX,EAAmB,QAAnB,CAAP;AAED,CAXD;AAaA;;;;;;;;;;;AAUAP,OAAO,CAACY,QAAR,GAAmB,SAASA,QAAT,CAAkBL,MAAlB,EAA0B;AAE3C,SAAO,oBAAoBM,IAApB,CAAyBN,MAAzB,CAAP;AAED,CAJD","sourcesContent":["/*!\n * urlsafe-base64\n */\n\n/**\n * Module Dependencies\n */\n\n// None yet!\n\n/**\n * Library version.\n */\n\nexports.version = '1.0.0';\n\n/**\n * .encode\n *\n * return an encoded Buffer as URL Safe Base64\n *\n * Note: This function encodes to the RFC 4648 Spec where '+' is encoded\n *       as '-' and '/' is encoded as '_'. The padding character '=' is\n *       removed.\n *\n * @param {Buffer} buffer\n * @return {String}\n * @api public\n */\n\nexports.encode = function encode(buffer) {\n\n  return buffer.toString('base64')\n    .replace(/\\+/g, '-') // Convert '+' to '-'\n    .replace(/\\//g, '_') // Convert '/' to '_'\n    .replace(/=+$/, ''); // Remove ending '='\n\n};\n\n/**\n * .decode\n *\n * return an decoded URL Safe Base64 as Buffer\n *\n * @param {String}\n * @return {Buffer}\n * @api public\n */\n\nexports.decode = function decode(base64) {\n\n  // Add removed at end '='\n  base64 += Array(5 - base64.length % 4).join('=');\n\n  base64 = base64\n    .replace(/\\-/g, '+') // Convert '-' to '+'\n    .replace(/\\_/g, '/'); // Convert '_' to '/'\n\n  return new Buffer(base64, 'base64');\n\n};\n\n/**\n * .validate\n *\n * Validates a string if it is URL Safe Base64 encoded.\n *\n * @param {String}\n * @return {Boolean}\n * @api public\n */\n\nexports.validate = function validate(base64) {\n\n  return /^[A-Za-z0-9\\-_]+$/.test(base64);\n\n};"]},"metadata":{},"sourceType":"script"}