{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _batcher = require('./batcher');\n\nvar _batcher2 = _interopRequireDefault(_batcher);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar CallDiagnosticEventsBatcher = _batcher2.default.extend({\n  namespace: 'Metrics',\n  prepareItem: function prepareItem(item) {\n    // networkType should be a enum value: `wifi`, `ethernet`, `cellular`, or `unknown`.\n    // Browsers cannot provide such information right now. However, it is a required field.\n    var origin = {\n      buildType: process.env.NODE_ENV === 'production' ? 'prod' : 'test',\n      networkType: 'unknown'\n    };\n    item.eventPayload.origin = (0, _assign2.default)(origin, item.eventPayload.origin);\n    return _promise2.default.resolve(item);\n  },\n  prepareRequest: function prepareRequest(queue) {\n    // Add sent timestamp\n    queue.forEach(function (item) {\n      item.eventPayload.originTime = item.eventPayload.originTime || {};\n      item.eventPayload.originTime.sent = new Date().toISOString();\n    });\n    return _promise2.default.resolve(queue);\n  },\n  submitHttpRequest: function submitHttpRequest(payload) {\n    return this.webex.request({\n      method: 'POST',\n      service: 'metrics',\n      resource: 'clientmetrics',\n      body: {\n        metrics: payload\n      }\n    });\n  }\n});\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nexports.default = CallDiagnosticEventsBatcher;","map":{"version":3,"sources":["call-diagnostic-events-batcher.js"],"names":["CallDiagnosticEventsBatcher","namespace","prepareItem","origin","buildType","process","networkType","item","prepareRequest","queue","submitHttpRequest","method","service","resource","body","metrics","payload"],"mappings":";;;;;;;;;;;;;;AAIA,IAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;;;;;;;;;AAEA,IAAMA,2BAAAA,GAA8B,SAAA,CAAA,OAAA,CAAA,MAAA,CAAe;AACjDC,EAAAA,SAAAA,EADiD,SAAA;AAGjDC,EAAAA,WAHiD,EAAA,SAAA,WAAA,CAAA,IAAA,EAG/B;AAChB;AACA;AACA,QAAMC,MAAAA,GAAS;AACbC,MAAAA,SAAAA,EAAWC,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAAA,YAAAA,GAAAA,MAAAA,GADE,MAAA;AAEbC,MAAAA,WAAAA,EAAa;AAFA,KAAf;AAKAC,IAAAA,IAAAA,CAAAA,YAAAA,CAAAA,MAAAA,GAA2B,CAAA,GAAA,QAAA,CAAA,OAAA,EAAA,MAAA,EAAsBA,IAAAA,CAAAA,YAAAA,CAAjDA,MAA2B,CAA3BA;AAEA,WAAO,SAAA,CAAA,OAAA,CAAA,OAAA,CAAP,IAAO,CAAP;AAb+C,GAAA;AAgBjDC,EAAAA,cAhBiD,EAAA,SAAA,cAAA,CAAA,KAAA,EAgB3B;AACpB;AACAC,IAAAA,KAAAA,CAAAA,OAAAA,CAAc,UAAA,IAAA,EAAU;AACtBF,MAAAA,IAAAA,CAAAA,YAAAA,CAAAA,UAAAA,GAA+BA,IAAAA,CAAAA,YAAAA,CAAAA,UAAAA,IAA/BA,EAAAA;AACAA,MAAAA,IAAAA,CAAAA,YAAAA,CAAAA,UAAAA,CAAAA,IAAAA,GAAoC,IAAA,IAAA,GAApCA,WAAoC,EAApCA;AAFFE,KAAAA;AAKA,WAAO,SAAA,CAAA,OAAA,CAAA,OAAA,CAAP,KAAO,CAAP;AAvB+C,GAAA;AA0BjDC,EAAAA,iBA1BiD,EAAA,SAAA,iBAAA,CAAA,OAAA,EA0BtB;AACzB,WAAO,KAAA,KAAA,CAAA,OAAA,CAAmB;AACxBC,MAAAA,MAAAA,EADwB,MAAA;AAExBC,MAAAA,OAAAA,EAFwB,SAAA;AAGxBC,MAAAA,QAAAA,EAHwB,eAAA;AAIxBC,MAAAA,IAAAA,EAAM;AACJC,QAAAA,OAAAA,EAASC;AADL;AAJkB,KAAnB,CAAP;AAQD;AAnCgD,CAAf,CAApC;AANA;;;;;kBA4CehB,2B","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport Batcher from './batcher';\n\nconst CallDiagnosticEventsBatcher = Batcher.extend({\n  namespace: 'Metrics',\n\n  prepareItem(item) {\n    // networkType should be a enum value: `wifi`, `ethernet`, `cellular`, or `unknown`.\n    // Browsers cannot provide such information right now. However, it is a required field.\n    const origin = {\n      buildType: process.env.NODE_ENV === 'production' ? 'prod' : 'test',\n      networkType: 'unknown'\n    };\n\n    item.eventPayload.origin = Object.assign(origin, item.eventPayload.origin);\n\n    return Promise.resolve(item);\n  },\n\n  prepareRequest(queue) {\n    // Add sent timestamp\n    queue.forEach((item) => {\n      item.eventPayload.originTime = item.eventPayload.originTime || {};\n      item.eventPayload.originTime.sent = new Date().toISOString();\n    });\n\n    return Promise.resolve(queue);\n  },\n\n  submitHttpRequest(payload) {\n    return this.webex.request({\n      method: 'POST',\n      service: 'metrics',\n      resource: 'clientmetrics',\n      body: {\n        metrics: payload\n      }\n    });\n  }\n});\n\nexport default CallDiagnosticEventsBatcher;\n"]},"metadata":{},"sourceType":"script"}