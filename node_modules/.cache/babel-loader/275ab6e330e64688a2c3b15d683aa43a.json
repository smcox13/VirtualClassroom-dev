{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _httpCore = require('@webex/http-core');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @class\n */\n\n\nvar RequestEventInterceptor = function (_Interceptor) {\n  (0, _inherits3.default)(RequestEventInterceptor, _Interceptor);\n\n  function RequestEventInterceptor() {\n    (0, _classCallCheck3.default)(this, RequestEventInterceptor);\n    return (0, _possibleConstructorReturn3.default)(this, (RequestEventInterceptor.__proto__ || (0, _getPrototypeOf2.default)(RequestEventInterceptor)).apply(this, arguments));\n  }\n\n  (0, _createClass3.default)(RequestEventInterceptor, [{\n    key: 'onRequest',\n\n    /**\n     * @see Interceptor#onRequest\n     * @param {Object} options\n     * @returns {Object}\n     */\n    value: function onRequest(options) {\n      var logger = (0, _get3.default)(this, 'webex.logger', console);\n\n      try {\n        this.webex.trigger('request:start', options);\n      } catch (error) {\n        logger.warn('event handler for request:start failed ', error);\n      }\n\n      return _promise2.default.resolve(options);\n    }\n    /**\n     * @see Interceptor#onRequest\n     * @param {Object} options\n     * @param {Error} reason\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'onRequestError',\n    value: function onRequestError(options, reason) {\n      // We need to do the normal onRequest logging, but then log how the request\n      // failed since the response logger won't be called.\n      var logger = (0, _get3.default)(this, 'webex.logger', console);\n\n      try {\n        this.webex.trigger('request:end', options, reason);\n        this.webex.trigger('request:failure', options, reason);\n      } catch (error) {\n        logger.warn('event handler for request:end failed ', error);\n      }\n\n      return _promise2.default.reject(reason);\n    }\n    /**\n     * @see Interceptor#onResponse\n     * @param {Object} options\n     * @param {HttpResponse} response\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'onResponse',\n    value: function onResponse(options, response) {\n      var logger = (0, _get3.default)(this, 'webex.logger', console);\n\n      try {\n        this.webex.trigger('request:success', response.options, response);\n      } catch (error) {\n        logger.warn('event handler for request:success failed ', error);\n      }\n\n      return _promise2.default.resolve(response);\n    }\n    /**\n     * @see Interceptor#onResponseError\n     * @param {Object} options\n     * @param {Error} reason\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'onResponseError',\n    value: function onResponseError(options, reason) {\n      var logger = (0, _get3.default)(this, 'webex.logger', console);\n\n      try {\n        this.webex.trigger('request:end', options, reason);\n        this.webex.trigger('request:failure', options, reason);\n      } catch (error) {\n        logger.warn('event handler for request:failure failed ', error);\n      }\n\n      return _promise2.default.reject(reason);\n    }\n  }], [{\n    key: 'create',\n\n    /**\n     * @returns {RequestEventInterceptor}\n     */\n    value: function create() {\n      return new RequestEventInterceptor({\n        webex: this\n      });\n    }\n  }]);\n  return RequestEventInterceptor;\n}(_httpCore.Interceptor);\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nexports.default = RequestEventInterceptor;","map":{"version":3,"sources":["request-event.js"],"names":["RequestEventInterceptor","Interceptor","webex","options","logger","reason","response"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAA,SAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;;;;;;AAEA;;;;;IAGqBA,uB;;;;;;;;;;;AAQnB;;;;;8BAKUG,O,EAAS;AACjB,UAAMC,MAAAA,GAAS,CAAA,GAAA,KAAA,CAAA,OAAA,EAAA,IAAA,EAAA,cAAA,EAAf,OAAe,CAAf;;AAEA,UAAI;AACF,aAAA,KAAA,CAAA,OAAA,CAAA,eAAA,EAAA,OAAA;AADF,OAAA,CAGA,OAAA,KAAA,EAAc;AACZA,QAAAA,MAAAA,CAAAA,IAAAA,CAAAA,yCAAAA,EAAAA,KAAAA;AACD;;AAED,aAAO,SAAA,CAAA,OAAA,CAAA,OAAA,CAAP,OAAO,CAAP;AACD;AAED;;;;;;;;;mCAMeD,O,EAASE,M,EAAQ;AAC9B;AACA;AACA,UAAMD,MAAAA,GAAS,CAAA,GAAA,KAAA,CAAA,OAAA,EAAA,IAAA,EAAA,cAAA,EAAf,OAAe,CAAf;;AAEA,UAAI;AACF,aAAA,KAAA,CAAA,OAAA,CAAA,aAAA,EAAA,OAAA,EAAA,MAAA;AACA,aAAA,KAAA,CAAA,OAAA,CAAA,iBAAA,EAAA,OAAA,EAAA,MAAA;AAFF,OAAA,CAIA,OAAA,KAAA,EAAc;AACZA,QAAAA,MAAAA,CAAAA,IAAAA,CAAAA,uCAAAA,EAAAA,KAAAA;AACD;;AAED,aAAO,SAAA,CAAA,OAAA,CAAA,MAAA,CAAP,MAAO,CAAP;AACD;AAED;;;;;;;;;+BAMWD,O,EAASG,Q,EAAU;AAC5B,UAAMF,MAAAA,GAAS,CAAA,GAAA,KAAA,CAAA,OAAA,EAAA,IAAA,EAAA,cAAA,EAAf,OAAe,CAAf;;AAEA,UAAI;AACF,aAAA,KAAA,CAAA,OAAA,CAAA,iBAAA,EAAsCE,QAAAA,CAAtC,OAAA,EAAA,QAAA;AADF,OAAA,CAGA,OAAA,KAAA,EAAc;AACZF,QAAAA,MAAAA,CAAAA,IAAAA,CAAAA,2CAAAA,EAAAA,KAAAA;AACD;;AAED,aAAO,SAAA,CAAA,OAAA,CAAA,OAAA,CAAP,QAAO,CAAP;AACD;AAED;;;;;;;;;oCAMgBD,O,EAASE,M,EAAQ;AAC/B,UAAMD,MAAAA,GAAS,CAAA,GAAA,KAAA,CAAA,OAAA,EAAA,IAAA,EAAA,cAAA,EAAf,OAAe,CAAf;;AAEA,UAAI;AACF,aAAA,KAAA,CAAA,OAAA,CAAA,aAAA,EAAA,OAAA,EAAA,MAAA;AACA,aAAA,KAAA,CAAA,OAAA,CAAA,iBAAA,EAAA,OAAA,EAAA,MAAA;AAFF,OAAA,CAIA,OAAA,KAAA,EAAc;AACZA,QAAAA,MAAAA,CAAAA,IAAAA,CAAAA,2CAAAA,EAAAA,KAAAA;AACD;;AAED,aAAO,SAAA,CAAA,OAAA,CAAA,MAAA,CAAP,MAAO,CAAP;AACD;;;;AApFD;;;6BAGgB;AACd,aAAO,IAAA,uBAAA,CAA4B;AAACF,QAAAA,KAAAA,EAApC;AAAmC,OAA5B,CAAP;AACD;;;EANkDD,SAAAA,CAAAA,W;AAVrD;;;;;kBAUqBD,uB","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {get} from 'lodash';\nimport {Interceptor} from '@webex/http-core';\n\n/**\n * @class\n */\nexport default class RequestEventInterceptor extends Interceptor {\n  /**\n   * @returns {RequestEventInterceptor}\n   */\n  static create() {\n    return new RequestEventInterceptor({webex: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    const logger = get(this, 'webex.logger', console);\n\n    try {\n      this.webex.trigger('request:start', options);\n    }\n    catch (error) {\n      logger.warn('event handler for request:start failed ', error);\n    }\n\n    return Promise.resolve(options);\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @param {Error} reason\n   * @returns {Object}\n   */\n  onRequestError(options, reason) {\n    // We need to do the normal onRequest logging, but then log how the request\n    // failed since the response logger won't be called.\n    const logger = get(this, 'webex.logger', console);\n\n    try {\n      this.webex.trigger('request:end', options, reason);\n      this.webex.trigger('request:failure', options, reason);\n    }\n    catch (error) {\n      logger.warn('event handler for request:end failed ', error);\n    }\n\n    return Promise.reject(reason);\n  }\n\n  /**\n   * @see Interceptor#onResponse\n   * @param {Object} options\n   * @param {HttpResponse} response\n   * @returns {Object}\n   */\n  onResponse(options, response) {\n    const logger = get(this, 'webex.logger', console);\n\n    try {\n      this.webex.trigger('request:success', response.options, response);\n    }\n    catch (error) {\n      logger.warn('event handler for request:success failed ', error);\n    }\n\n    return Promise.resolve(response);\n  }\n\n  /**\n   * @see Interceptor#onResponseError\n   * @param {Object} options\n   * @param {Error} reason\n   * @returns {Object}\n   */\n  onResponseError(options, reason) {\n    const logger = get(this, 'webex.logger', console);\n\n    try {\n      this.webex.trigger('request:end', options, reason);\n      this.webex.trigger('request:failure', options, reason);\n    }\n    catch (error) {\n      logger.warn('event handler for request:failure failed ', error);\n    }\n\n    return Promise.reject(reason);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}