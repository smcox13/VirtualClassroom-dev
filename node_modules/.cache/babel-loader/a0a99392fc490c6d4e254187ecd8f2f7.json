{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _forEach2 = require('lodash/forEach');\n\nvar _forEach3 = _interopRequireDefault(_forEach2);\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _constants = require('../constants');\n\nvar _stats = require('../stats/stats');\n\nvar _stats2 = _interopRequireDefault(_stats);\n\nvar _util = require('../stats/util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @class WebRTCStats\n */\n\n\nvar WebRTCStats = function (_StatelessWebexPlugin) {\n  (0, _inherits3.default)(WebRTCStats, _StatelessWebexPlugin);\n  /**\n  *\n  * @param {Object} attrs\n  * @param {Object} options\n  * @param {Object} [optionalCreateOptions]\n  */\n\n  function WebRTCStats(attrs, options, optionalCreateOptions) {\n    (0, _classCallCheck3.default)(this, WebRTCStats);\n    /**\n    * @instance\n    * @type {Object}\n    * @private\n    * @memberof WebRTCStats\n    */\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (WebRTCStats.__proto__ || (0, _getPrototypeOf2.default)(WebRTCStats)).call(this, {}, options));\n\n    _this.namespace = _constants.MEETINGS;\n    _this.attrs = attrs;\n    /**\n    * @instance\n    * @type {Object}\n    * @private\n    * @memberof WebRTCStats\n    */\n\n    _this.options = options;\n    /**\n    * @instance\n    * @type {Object}\n    * @public\n    * @memberof WebRTCStats\n    */\n\n    _this.senders = {};\n    /**\n    * @instance\n    * @type {Object}\n    * @public\n    * @memberof WebRTCStats\n    */\n\n    _this.receivers = {};\n    /**\n    * @instance\n    * @type {Meeting}\n    * @private\n    * @memberof WebRTCStats\n    */\n\n    _this.meetingRef = null;\n    /**\n    * @instance\n    * @type {Object}\n    * @public\n    * @memberof WebRTCStats\n    */\n\n    _this.statsConfig = null;\n\n    _this.populate(optionalCreateOptions);\n\n    return _this;\n  }\n  /**\n   * @param {Object} [optionalCreateOptions]\n   * @param {Object} optionalCreateOptions.config\n   * @param {Meeting} optionalCreateOptions.meeting\n   * @param {Object} optionalCreateOptions.senders\n   * @param {Object} optionalCreateOptions.receivers\n   * @returns {WebRTCStats}\n   * @private\n   * @memberof WebRTCStats\n   */\n\n\n  (0, _createClass3.default)(WebRTCStats, [{\n    key: 'populate',\n    value: function populate(optionalCreateOptions) {\n      if (optionalCreateOptions) {\n        if (optionalCreateOptions.config) {\n          this.setConfig(optionalCreateOptions.config);\n        }\n\n        if (optionalCreateOptions.meeting) {\n          this.associateMeeting(optionalCreateOptions.meeting);\n        }\n\n        if (optionalCreateOptions.senders) {\n          this.addSenders(optionalCreateOptions.senders);\n        }\n\n        if (optionalCreateOptions.receivers) {\n          this.addReceivers(optionalCreateOptions.receivers);\n        }\n      }\n\n      return this;\n    }\n    /**\n     * @param {Object} config\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n\n  }, {\n    key: 'setConfig',\n    value: function setConfig(config) {\n      this.statsConfig = config;\n    }\n    /**\n     * @param {Meeting} meeting\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n\n  }, {\n    key: 'associateMeeting',\n    value: function associateMeeting(meeting) {\n      this.meetingRef = meeting;\n      return this;\n    }\n    /**\n     * @param {Object} senders\n     * @param {Boolean} useConfig\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n\n  }, {\n    key: 'addSenders',\n    value: function addSenders(senders) {\n      var _this2 = this;\n\n      var useConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!senders.forEach) {\n        throw new TypeError('Stats senders must be created with an iterable array of senders to act on.');\n      }\n\n      senders.forEach(function (sender) {\n        _this2.addSender(sender, useConfig);\n      });\n      return this;\n    }\n    /**\n     * @param {Object} sender\n     * @param {Boolean} useConfig\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n\n  }, {\n    key: 'addSender',\n    value: function addSender(sender) {\n      var useConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (sender) {\n        if (useConfig) {\n          _util2.default.generateSingularOptions(sender, this.statsConfig, this.meetingRef, _constants.STATS.SENDERS);\n        }\n\n        sender.type = _constants.STATS.SENDER;\n        this.senders[sender.id] = new _stats2.default(this.attrs, this.options, sender);\n      }\n\n      return this;\n    }\n    /**\n     *\n     * @param {String} id\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n\n  }, {\n    key: 'addSenderStats',\n    value: function addSenderStats(id) {\n      var newSender = new _stats2.default(this.attrs, this.options);\n      this.senders[id] = newSender;\n      return newSender;\n    }\n    /**\n     *\n     * @param {String} id\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n\n  }, {\n    key: 'addReceiverStats',\n    value: function addReceiverStats(id) {\n      var newReceiver = new _stats2.default(this.attrs, this.options);\n      this.receivers[id] = newReceiver;\n      return newReceiver;\n    }\n    /**\n     * @param {Object} receivers\n     * @param {boolean} useConfig\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n\n  }, {\n    key: 'addReceivers',\n    value: function addReceivers(receivers) {\n      var _this3 = this;\n\n      var useConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!receivers.forEach) {\n        throw new TypeError('Stats receivers must be created with an iterable array of receivers to act on.');\n      }\n\n      receivers.forEach(function (receiver) {\n        _this3.addReceiver(receiver, useConfig);\n      });\n      return this;\n    }\n    /**\n     * @param {Object} receiver\n     * @param {boolean} useConfig\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n\n  }, {\n    key: 'addReceiver',\n    value: function addReceiver(receiver) {\n      var useConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (receiver) {\n        if (useConfig) {\n          _util2.default.generateSingularOptions(receiver, this.statsConfig, this.meetingRef, _constants.STATS.RECEIVERS);\n        }\n\n        receiver.type = _constants.STATS.RECEIVER;\n        this.receivers[receiver.id] = new _stats2.default(this.attrs, this.options, receiver);\n      }\n\n      return this;\n    }\n    /**\n     * @returns {Object}\n     * @public\n     * @memberof WebRTCStats\n     */\n\n  }, {\n    key: 'getReceivers',\n    value: function getReceivers() {\n      return this.receivers;\n    }\n    /**\n     * @returns {Object}\n     * @public\n     * @memberof WebRTCStats\n     */\n\n  }, {\n    key: 'getSenders',\n    value: function getSenders() {\n      return this.senders;\n    }\n    /**\n     * @param {String} id\n     * @returns {Object}\n     * @public\n     * @memberof WebRTCStats\n     */\n\n  }, {\n    key: 'getSender',\n    value: function getSender(id) {\n      return this.senders[id];\n    }\n    /**\n     * @param {String} id\n     * @returns {Object}\n     * @public\n     * @memberof WebRTCStats\n     */\n\n  }, {\n    key: 'getReceiver',\n    value: function getReceiver(id) {\n      return this.receivers[id];\n    }\n    /**\n     * @returns {Object}\n     * @public\n     * @memberof WebRTCStats\n     */\n\n  }, {\n    key: 'destroySenders',\n    value: function destroySenders() {\n      var _this4 = this;\n\n      (0, _forEach3.default)(this.senders, function (v, k) {\n        _this4.destroySender(k);\n      });\n    }\n    /**\n     * @returns {undefined}\n     * @public\n     * @memberof WebRTCStats\n     */\n\n  }, {\n    key: 'destroyReceivers',\n    value: function destroyReceivers() {\n      var _this5 = this;\n\n      (0, _forEach3.default)(this.receivers, function (v, k) {\n        _this5.destroyReceiver(k);\n      });\n    }\n    /**\n     * @param {String} id\n     * @returns {undefined}\n     * @public\n     * @memberof WebRTCStats\n     */\n\n  }, {\n    key: 'destroySender',\n    value: function destroySender(id) {\n      var sender = this.getSender(id);\n\n      if (sender) {\n        if (sender.stream) {\n          sender.stream.destroy();\n        }\n      }\n\n      sender = null;\n      delete this.receivers[id];\n    }\n    /**\n     * @param {String} id\n     * @returns {undefined}\n     * @public\n     * @memberof WebRTCStats\n     */\n\n  }, {\n    key: 'destroyReceiver',\n    value: function destroyReceiver(id) {\n      var receiver = this.getReceiver(id);\n\n      if (receiver) {\n        if (receiver.stream) {\n          receiver.stream.destroy();\n        }\n      }\n\n      receiver = null;\n      delete this.receivers[id];\n    }\n  }]);\n  return WebRTCStats;\n}(_webexCore.StatelessWebexPlugin);\n\nexports.default = WebRTCStats;","map":{"version":3,"sources":["index.js"],"names":["WebRTCStats","StatelessWebexPlugin","namespace","MEETINGS","optionalCreateOptions","config","meeting","senders","useConfig","sender","StatsUtil","STATS","MeetingStats","id","newSender","newReceiver","receivers","receiver"],"mappings":"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","sourcesContent":["import {forEach} from 'lodash';\nimport {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport {\n  MEETINGS,\n  STATS\n} from '../constants';\nimport MeetingStats from '../stats/stats';\nimport StatsUtil from '../stats/util';\n\n/**\n * @class WebRTCStats\n */\nexport default class WebRTCStats extends StatelessWebexPlugin {\n    namespace = MEETINGS;\n\n    /**\n    *\n    * @param {Object} attrs\n    * @param {Object} options\n    * @param {Object} [optionalCreateOptions]\n   */\n    constructor(attrs, options, optionalCreateOptions) {\n      super({}, options);\n      /**\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof WebRTCStats\n     */\n      this.attrs = attrs;\n      /**\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof WebRTCStats\n     */\n      this.options = options;\n      /**\n     * @instance\n     * @type {Object}\n     * @public\n     * @memberof WebRTCStats\n     */\n      this.senders = {};\n      /**\n     * @instance\n     * @type {Object}\n     * @public\n     * @memberof WebRTCStats\n     */\n      this.receivers = {};\n      /**\n     * @instance\n     * @type {Meeting}\n     * @private\n     * @memberof WebRTCStats\n     */\n      this.meetingRef = null;\n      /**\n     * @instance\n     * @type {Object}\n     * @public\n     * @memberof WebRTCStats\n     */\n      this.statsConfig = null;\n      this.populate(optionalCreateOptions);\n    }\n\n    /**\n     * @param {Object} [optionalCreateOptions]\n     * @param {Object} optionalCreateOptions.config\n     * @param {Meeting} optionalCreateOptions.meeting\n     * @param {Object} optionalCreateOptions.senders\n     * @param {Object} optionalCreateOptions.receivers\n     * @returns {WebRTCStats}\n     * @private\n     * @memberof WebRTCStats\n     */\n    populate(optionalCreateOptions) {\n      if (optionalCreateOptions) {\n        if (optionalCreateOptions.config) {\n          this.setConfig(optionalCreateOptions.config);\n        }\n        if (optionalCreateOptions.meeting) {\n          this.associateMeeting(optionalCreateOptions.meeting);\n        }\n        if (optionalCreateOptions.senders) {\n          this.addSenders(optionalCreateOptions.senders);\n        }\n        if (optionalCreateOptions.receivers) {\n          this.addReceivers(optionalCreateOptions.receivers);\n        }\n      }\n\n      return this;\n    }\n\n    /**\n     * @param {Object} config\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n    setConfig(config) {\n      this.statsConfig = config;\n    }\n\n    /**\n     * @param {Meeting} meeting\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n    associateMeeting(meeting) {\n      this.meetingRef = meeting;\n\n      return this;\n    }\n\n    /**\n     * @param {Object} senders\n     * @param {Boolean} useConfig\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n    addSenders(senders, useConfig = false) {\n      if (!senders.forEach) {\n        throw new TypeError('Stats senders must be created with an iterable array of senders to act on.');\n      }\n      senders.forEach((sender) => {\n        this.addSender(sender, useConfig);\n      });\n\n      return this;\n    }\n\n    /**\n     * @param {Object} sender\n     * @param {Boolean} useConfig\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n    addSender(sender, useConfig = false) {\n      if (sender) {\n        if (useConfig) {\n          StatsUtil.generateSingularOptions(sender, this.statsConfig, this.meetingRef, STATS.SENDERS);\n        }\n        sender.type = STATS.SENDER;\n        this.senders[sender.id] = new MeetingStats(this.attrs, this.options, sender);\n      }\n\n      return this;\n    }\n\n    /**\n     *\n     * @param {String} id\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n    addSenderStats(id) {\n      const newSender = new MeetingStats(this.attrs, this.options);\n\n      this.senders[id] = newSender;\n\n      return newSender;\n    }\n\n    /**\n     *\n     * @param {String} id\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n    addReceiverStats(id) {\n      const newReceiver = new MeetingStats(this.attrs, this.options);\n\n      this.receivers[id] = newReceiver;\n\n      return newReceiver;\n    }\n\n    /**\n     * @param {Object} receivers\n     * @param {boolean} useConfig\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n    addReceivers(receivers, useConfig = false) {\n      if (!receivers.forEach) {\n        throw new TypeError('Stats receivers must be created with an iterable array of receivers to act on.');\n      }\n      receivers.forEach((receiver) => {\n        this.addReceiver(receiver, useConfig);\n      });\n\n      return this;\n    }\n\n    /**\n     * @param {Object} receiver\n     * @param {boolean} useConfig\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n    addReceiver(receiver, useConfig = false) {\n      if (receiver) {\n        if (useConfig) {\n          StatsUtil.generateSingularOptions(receiver, this.statsConfig, this.meetingRef, STATS.RECEIVERS);\n        }\n        receiver.type = STATS.RECEIVER;\n        this.receivers[receiver.id] = new MeetingStats(this.attrs, this.options, receiver);\n      }\n\n      return this;\n    }\n\n    /**\n     * @returns {Object}\n     * @public\n     * @memberof WebRTCStats\n     */\n    getReceivers() {\n      return this.receivers;\n    }\n\n    /**\n     * @returns {Object}\n     * @public\n     * @memberof WebRTCStats\n     */\n    getSenders() {\n      return this.senders;\n    }\n\n    /**\n     * @param {String} id\n     * @returns {Object}\n     * @public\n     * @memberof WebRTCStats\n     */\n    getSender(id) {\n      return this.senders[id];\n    }\n\n    /**\n     * @param {String} id\n     * @returns {Object}\n     * @public\n     * @memberof WebRTCStats\n     */\n    getReceiver(id) {\n      return this.receivers[id];\n    }\n\n    /**\n     * @returns {Object}\n     * @public\n     * @memberof WebRTCStats\n     */\n    destroySenders() {\n      forEach(this.senders, (v, k) => {\n        this.destroySender(k);\n      });\n    }\n\n    /**\n     * @returns {undefined}\n     * @public\n     * @memberof WebRTCStats\n     */\n    destroyReceivers() {\n      forEach(this.receivers, (v, k) => {\n        this.destroyReceiver(k);\n      });\n    }\n\n    /**\n     * @param {String} id\n     * @returns {undefined}\n     * @public\n     * @memberof WebRTCStats\n     */\n    destroySender(id) {\n      let sender = this.getSender(id);\n\n      if (sender) {\n        if (sender.stream) {\n          sender.stream.destroy();\n        }\n      }\n      sender = null;\n      delete this.receivers[id];\n    }\n\n    /**\n     * @param {String} id\n     * @returns {undefined}\n     * @public\n     * @memberof WebRTCStats\n     */\n    destroyReceiver(id) {\n      let receiver = this.getReceiver(id);\n\n      if (receiver) {\n        if (receiver.stream) {\n          receiver.stream.destroy();\n        }\n      }\n      receiver = null;\n      delete this.receivers[id];\n    }\n}\n"]},"metadata":{},"sourceType":"script"}