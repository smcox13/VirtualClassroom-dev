{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC3161. Accuracy represents the time deviation around the UTC time contained in GeneralizedTime.\r\n */\n\nexport default class Accuracy {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for Accuracy class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    if (\"seconds\" in parameters)\n      /**\r\n       * @type {number}\r\n       * @desc seconds\r\n       */\n      this.seconds = getParametersValue(parameters, \"seconds\", Accuracy.defaultValues(\"seconds\"));\n    if (\"millis\" in parameters)\n      /**\r\n       * @type {number}\r\n       * @desc millis\r\n       */\n      this.millis = getParametersValue(parameters, \"millis\", Accuracy.defaultValues(\"millis\"));\n    if (\"micros\" in parameters)\n      /**\r\n       * @type {number}\r\n       * @desc micros\r\n       */\n      this.micros = getParametersValue(parameters, \"micros\", Accuracy.defaultValues(\"micros\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"seconds\":\n      case \"millis\":\n      case \"micros\":\n        return 0;\n\n      default:\n        throw new Error(`Invalid member name for Accuracy class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"seconds\":\n      case \"millis\":\n      case \"micros\":\n        return memberValue === Accuracy.defaultValues(memberName);\n\n      default:\n        throw new Error(`Invalid member name for Accuracy class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * Accuracy ::= SEQUENCE {\r\n   *    seconds        INTEGER              OPTIONAL,\r\n   *    millis     [0] INTEGER  (1..999)    OPTIONAL,\r\n   *    micros     [1] INTEGER  (1..999)    OPTIONAL  }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [seconds]\r\n     * @property {string} [millis]\r\n     * @property {string} [micros]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      optional: true,\n      value: [new asn1js.Integer({\n        optional: true,\n        name: names.seconds || \"\"\n      }), new asn1js.Primitive({\n        name: names.millis || \"\",\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        }\n      }), new asn1js.Primitive({\n        name: names.micros || \"\",\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        }\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"seconds\", \"millis\", \"micros\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, Accuracy.schema({\n      names: {\n        seconds: \"seconds\",\n        millis: \"millis\",\n        micros: \"micros\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for Accuracy\"); //endregion\n    //region Get internal properties from parsed schema\n\n    if (\"seconds\" in asn1.result) this.seconds = asn1.result.seconds.valueBlock.valueDec;\n\n    if (\"millis\" in asn1.result) {\n      const intMillis = new asn1js.Integer({\n        valueHex: asn1.result.millis.valueBlock.valueHex\n      });\n      this.millis = intMillis.valueBlock.valueDec;\n    }\n\n    if (\"micros\" in asn1.result) {\n      const intMicros = new asn1js.Integer({\n        valueHex: asn1.result.micros.valueBlock.valueHex\n      });\n      this.micros = intMicros.valueBlock.valueDec;\n    } //endregion\n\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array of output sequence\n    const outputArray = [];\n    if (\"seconds\" in this) outputArray.push(new asn1js.Integer({\n      value: this.seconds\n    }));\n\n    if (\"millis\" in this) {\n      const intMillis = new asn1js.Integer({\n        value: this.millis\n      });\n      outputArray.push(new asn1js.Primitive({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        valueHex: intMillis.valueBlock.valueHex\n      }));\n    }\n\n    if (\"micros\" in this) {\n      const intMicros = new asn1js.Integer({\n        value: this.micros\n      });\n      outputArray.push(new asn1js.Primitive({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        valueHex: intMicros.valueBlock.valueHex\n      }));\n    } //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const _object = {};\n    if (\"seconds\" in this) _object.seconds = this.seconds;\n    if (\"millis\" in this) _object.millis = this.millis;\n    if (\"micros\" in this) _object.micros = this.micros;\n    return _object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/Accuracy.js"],"names":["asn1js","getParametersValue","clearProps","Accuracy","constructor","parameters","seconds","defaultValues","millis","micros","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","names","Sequence","name","blockName","optional","value","Integer","Primitive","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","valueBlock","valueDec","intMillis","valueHex","intMicros","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161. Accuracy represents the time deviation around the UTC time contained in GeneralizedTime.\r\n */\r\nexport default class Accuracy\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Accuracy class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"seconds\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @desc seconds\r\n\t\t\t */\r\n\t\t\tthis.seconds = getParametersValue(parameters, \"seconds\", Accuracy.defaultValues(\"seconds\"));\r\n\t\t\r\n\t\tif(\"millis\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @desc millis\r\n\t\t\t */\r\n\t\t\tthis.millis = getParametersValue(parameters, \"millis\", Accuracy.defaultValues(\"millis\"));\r\n\t\t\r\n\t\tif(\"micros\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @desc micros\r\n\t\t\t */\r\n\t\t\tthis.micros = getParametersValue(parameters, \"micros\", Accuracy.defaultValues(\"micros\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"seconds\":\r\n\t\t\tcase \"millis\":\r\n\t\t\tcase \"micros\":\r\n\t\t\t\treturn 0;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Accuracy class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"seconds\":\r\n\t\t\tcase \"millis\":\r\n\t\t\tcase \"micros\":\r\n\t\t\t\treturn (memberValue === Accuracy.defaultValues(memberName));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Accuracy class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Accuracy ::= SEQUENCE {\r\n\t *    seconds        INTEGER              OPTIONAL,\r\n\t *    millis     [0] INTEGER  (1..999)    OPTIONAL,\r\n\t *    micros     [1] INTEGER  (1..999)    OPTIONAL  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [seconds]\r\n\t\t * @property {string} [millis]\r\n\t\t * @property {string} [micros]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: true,\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.seconds || \"\")\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.millis || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.micros || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"seconds\",\r\n\t\t\t\"millis\",\r\n\t\t\t\"micros\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAccuracy.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tseconds: \"seconds\",\r\n\t\t\t\t\tmillis: \"millis\",\r\n\t\t\t\t\tmicros: \"micros\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Accuracy\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"seconds\" in asn1.result)\r\n\t\t\tthis.seconds = asn1.result.seconds.valueBlock.valueDec;\r\n\r\n\t\tif(\"millis\" in asn1.result)\r\n\t\t{\r\n\t\t\tconst intMillis = new asn1js.Integer({ valueHex: asn1.result.millis.valueBlock.valueHex });\r\n\t\t\tthis.millis = intMillis.valueBlock.valueDec;\r\n\t\t}\r\n\r\n\t\tif(\"micros\" in asn1.result)\r\n\t\t{\r\n\t\t\tconst intMicros = new asn1js.Integer({ valueHex: asn1.result.micros.valueBlock.valueHex });\r\n\t\t\tthis.micros = intMicros.valueBlock.valueDec;\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array of output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\tif(\"seconds\" in this)\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.seconds }));\r\n\r\n\t\tif(\"millis\" in this)\r\n\t\t{\r\n\t\t\tconst intMillis = new asn1js.Integer({ value: this.millis });\r\n\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: intMillis.valueBlock.valueHex\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"micros\" in this)\r\n\t\t{\r\n\t\t\tconst intMicros = new asn1js.Integer({ value: this.micros });\r\n\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: intMicros.valueBlock.valueHex\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {};\r\n\r\n\t\tif(\"seconds\" in this)\r\n\t\t\t_object.seconds = this.seconds;\r\n\r\n\t\tif(\"millis\" in this)\r\n\t\t\t_object.millis = this.millis;\r\n\r\n\t\tif(\"micros\" in this)\r\n\t\t\t_object.micros = this.micros;\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}