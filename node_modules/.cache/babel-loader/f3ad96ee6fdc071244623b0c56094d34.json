{"ast":null,"code":"/*jslint node: true */\n\"use strict\";\n\nvar assert = require('assert');\n\nvar fs = require('fs');\n\nvar util = require('util');\n\nvar BufferExtender = require('./Buffer'); // bad idea\n\n\nvar debug = require('debug')('exif');\n\nvar DEFAULT_MAX_ENTRIES = 128;\n/**\r\n * Represents an image with Exif information. When instantiating it you have to\r\n * provide an image and a callback function which is called once all metadata\r\n * is extracted from the image.\r\n *\r\n * Available options are:\r\n *  - image The image to get Exif data from can be either a filesystem path or\r\n *          a Buffer.\r\n *  - tiffOffsets  (boolean) an object named \"offsets\" is added to exifData \r\n *          and contains lot of offsets needed to get thumbnail and other things. \r\n *  - fixThumbnailOffset:  node-exif corrects the thumbnail offset in order to have an offset from the start of the buffer/file.\r\n *  - maxEntries: Specifies the maximum entries to be parsed\r\n *  - ifd0MaxEntries\r\n *  - ifd1MaxEntries\r\n *  - maxGpsEntries\r\n *  - maxInteroperabilityEntries\r\n *  - agfaMaxEntries \r\n *  - epsonMaxEntries\r\n *  - fujifilmMaxEntries\r\n *  - olympusMaxEntries\r\n *  - panasonicMaxEntries\r\n *  - sanyoMaxEntries\r\n *  - noPadding\r\n *\r\n * If you don't set the image field, you might call  exifImage.loadImage(image, callback) to get exif datas. \r\n *\r\n * @param options Configuration options as described above\r\n * @param callback Function to call when data is extracted or an error occurred\r\n * @return Nothing of importance, calls the specified callback function instead\r\n */\n\nfunction ExifImage(options, callback) {\n  if (!(this instanceof ExifImage)) {\n    if (typeof options === \"string\") {\n      options = {\n        image: options\n      };\n    }\n\n    assert(typeof options === \"object\", \"Invalid options object\");\n    var exifImage = new ExifImage(options, function (error, data) {\n      if (error) {\n        return callback(error);\n      }\n\n      callback(null, data, options.image);\n    });\n    return exifImage;\n  }\n\n  if (typeof options === \"string\") {\n    options = {\n      image: options\n    };\n  } else if (options instanceof Buffer) {\n    options = {\n      image: options\n    };\n  }\n\n  var ops = {};\n\n  if (options) {\n    for (var k in options) {\n      ops[k] = options[k];\n    }\n  }\n\n  this.options = ops; // Default option values\n\n  [\"ifd0MaxEntries\", \"ifd1MaxEntries\", \"maxGpsEntries\", \"maxInteroperabilityEntries\", \"agfaMaxEntries\", \"epsonMaxEntries\", \"fujifilmMaxEntries\", \"olympusMaxEntries\", \"panasonicMaxEntries\", \"sanyoMaxEntries\"].forEach(function (p) {\n    if (ops[p] === undefined) {\n      ops[p] = DEFAULT_MAX_ENTRIES;\n    }\n  });\n  this.exifData = {\n    image: {},\n    // Information about the main image\n    thumbnail: {},\n    // Information about the thumbnail\n    exif: {},\n    // Exif information\n    gps: {},\n    // GPS information\n    interoperability: {},\n    // Exif Interoperability information\n    makernote: {} // Makernote information\n\n  };\n  this.offsets = {};\n\n  if (ops.tiffOffsets) {\n    exifData.offsets = offsets;\n  }\n\n  debug(\"New ExifImage options=\", options);\n\n  if (!ops.image) {\n    // If options image is not specified, the developper must call loadImage() to parse the image.\n    //    callback(new Error('You have to provide an image, it is pretty hard to extract Exif data from nothing...'));\n    return;\n  }\n\n  if (typeof callback !== 'function') {\n    throw new Error('You have to provide a callback function.');\n  }\n\n  var self = this;\n  setImmediate(function () {\n    self.loadImage(ops.image, function (error, exifData) {\n      if (error) {\n        return callback(error);\n      }\n\n      callback(null, exifData, ops.image);\n    });\n  });\n}\n\nExifImage.ExifImage = ExifImage;\nmodule.exports = ExifImage;\n/**\r\n * Load image and parse exifDatas\r\n *\r\n * @param [String|Buffer] image the image\r\n * @param callback a callback which is called when exif datas are parsed.\r\n * @return Nothing\r\n */\n\nExifImage.prototype.loadImage = function (image, callback) {\n  assert(typeof callback === \"function\", \"Callback must be a function\");\n  var self = this;\n  debug(\"loadImage image=\", image);\n\n  if (image.constructor.name === 'Buffer') {\n    this.processImage(\"Buffer\", image, callback);\n    return;\n  }\n\n  if (image.constructor.name === 'String') {\n    fs.readFile(image, function (error, data) {\n      if (error) {\n        callback(new Error('Encountered the following error while trying to read given image: ' + error));\n        return;\n      }\n\n      self.processImage(\"File: \" + image, data, callback);\n    });\n    return;\n  }\n\n  callback(new Error('Given image is neither a buffer nor a file, please provide one of these.'));\n};\n\nExifImage.prototype.processImage = function (source, data, callback) {\n  assert(typeof source === \"string\", \"Source must be a string\");\n  assert(typeof callback === \"function\", \"Callback must be a function\");\n  var offset = 0;\n\n  if (data[offset++] != 0xFF || data[offset++] != 0xD8) {\n    var e = new Error('The given image is not a JPEG and thus unsupported right now.');\n    e.source = source;\n    e.code = \"NOT_A_JPEG\";\n    callback(e);\n    return;\n  }\n\n  this.imageType = 'JPEG';\n\n  while (offset < data.length) {\n    if (data[offset++] != 0xFF) {\n      break;\n    }\n\n    if (data[offset++] == 0xE1) {\n      try {\n        this.extractExifData(data, offset + 2, data.getShort(offset, true) - 2);\n      } catch (error) {\n        error.code = \"PARSING_ERROR\";\n        error.source = source;\n        debug(\"Extract exif data error source=\", source, \"offset=\", offset, \"error=\", error);\n        callback(error);\n        return;\n      }\n\n      debug(\"Extract exif data success source=\", source, \"exifData=\", this.exifData);\n      callback(null, this.exifData);\n      return;\n    }\n\n    offset += data.getShort(offset, true);\n  }\n\n  var e2 = new Error('No Exif segment found in the given image.');\n  e2.source = source;\n  e2.code = \"NO_EXIF_SEGMENT\";\n  callback(e2);\n};\n\nExifImage.prototype.extractExifData = function (data, start, length) {\n  var exifData = this.exifData;\n  var tiffOffset = start + 6;\n  var ifdOffset, numberOfEntries;\n  var noPadding = this.options.noPadding !== false;\n  this.offsets.tiff = tiffOffset; // Exif data always starts with Exif\\0\\0\n\n  if (data.toString('utf8', start, tiffOffset) != 'Exif\\0\\0') {\n    throw new Error('The Exif data is not valid.');\n  } // After the Exif start we either have 0x4949 if the following data is\n  // stored in big endian or 0x4D4D if it is stored in little endian\n\n\n  if (data.getShort(tiffOffset) == 0x4949) {\n    this.isBigEndian = false;\n  } else if (data.getShort(tiffOffset) == 0x4D4D) {\n    this.isBigEndian = true;\n  } else {\n    throw new Error('Invalid TIFF data! Expected 0x4949 or 0x4D4D at offset ' + tiffOffset + ' but found 0x' + data[tiffOffset].toString(16).toUpperCase() + data[tiffOffset + 1].toString(16).toUpperCase() + \".\");\n  }\n\n  debug(\"BigEndian=\", this.isBigEndian); // Valid TIFF headers always have 0x002A here\n\n  if (data.getShort(tiffOffset + 2, this.isBigEndian) != 0x002A) {\n    var expected = this.isBigEndian ? '0x002A' : '0x2A00';\n    throw new Error('Invalid TIFF data! Expected ' + expected + ' at offset ' + (tiffOffset + 2) + ' but found 0x' + data[tiffOffset + 2].toString(16).toUpperCase() + data[tiffOffset + 3].toString(16).toUpperCase() + \".\");\n  }\n  /********************************* IFD0 **********************************/\n  // Offset to IFD0 which is always followed by two bytes with the amount of\n  // entries in this IFD\n\n\n  ifdOffset = tiffOffset + data.getLong(tiffOffset + 4, this.isBigEndian);\n  this.offsets.ifd0 = ifdOffset;\n  numberOfEntries = data.getShort(ifdOffset, this.isBigEndian);\n\n  if (this.options.ifd0MaxEntries) {\n    numberOfEntries = Math.min(numberOfEntries, this.options.ifd0MaxEntries);\n  }\n\n  debug(\"IFD0 ifdOffset=\", ifdOffset, \"numberOfEntries=\", numberOfEntries); // Each IFD entry consists of 12 bytes which we loop through and extract\n  // the data from\n\n  for (var i = 0; i < numberOfEntries; i++) {\n    var exifEntry = this.extractExifEntry(data, ifdOffset + 2 + i * 12, tiffOffset, this.isBigEndian, ExifImage.TAGS.exif);\n\n    if (!exifEntry) {\n      continue;\n    }\n\n    if (exifEntry.tagId === 0xEA1C && noPadding) {\n      continue;\n    }\n\n    exifData.image[exifEntry.tagName] = exifEntry.value;\n  }\n\n  debug(\"IFD0 parsed\", exifData.image);\n  /********************************* IFD1 **********************************/\n  // Check if there is an offset for IFD1. If so it is always followed by two\n  // bytes with the amount of entries in this IFD, if not there is no IFD1\n\n  var nextIfdOffset = data.getLong(ifdOffset + 2 + numberOfEntries * 12, this.isBigEndian);\n\n  if (nextIfdOffset != 0x00000000) {\n    ifdOffset = tiffOffset + nextIfdOffset;\n    this.offsets.ifd1 = ifdOffset;\n    numberOfEntries = data.getShort(ifdOffset, this.isBigEndian);\n\n    if (this.options.ifd1MaxEntries) {\n      numberOfEntries = Math.min(numberOfEntries, this.options.ifd1MaxEntries);\n    }\n\n    debug(\"IFD1 ifdOffset=\", ifdOffset, \"numberOfEntries=\", numberOfEntries); // Each IFD entry consists of 12 bytes which we loop through and extract\n    // the data from\n\n    for (var i = 0; i < numberOfEntries; i++) {\n      var exifEntry = this.extractExifEntry(data, ifdOffset + 2 + i * 12, tiffOffset, this.isBigEndian, ExifImage.TAGS.exif);\n\n      if (!exifEntry) {\n        continue;\n      }\n\n      if (exifEntry.tagId === 0xEA1C && noPadding) {\n        continue;\n      }\n\n      exifData.thumbnail[exifEntry.tagName] = exifEntry.value;\n    }\n\n    if (this.options.fixThumbnailOffset) {\n      var thumbnailOffset = exifData.thumbnail[ExifImage.TAGS.exif[0x0201]];\n\n      if (thumbnailOffset) {\n        debug(\"IFD1 fix thumbnail offset, add=\", this.offsets.tiff);\n        exifData.thumbnail[ExifImage.TAGS.exif[0x0201]] += this.offsets.tiff;\n      }\n    }\n\n    debug(\"IFD1 parsed\", exifData.thumbnail);\n  }\n  /******************************* EXIF IFD ********************************/\n  // Look for a pointer to the Exif IFD in IFD0 and extract information from\n  // it if available\n\n\n  if (exifData.image[ExifImage.TAGS.exif[0x8769]]) {\n    ifdOffset = tiffOffset + exifData.image[ExifImage.TAGS.exif[0x8769]];\n    this.offsets.tags = ifdOffset;\n    numberOfEntries = data.getShort(ifdOffset, this.isBigEndian);\n\n    if (this.options.maxEntries) {\n      numberOfEntries = Math.min(numberOfEntries, this.options.maxEntries);\n    }\n\n    debug(\"EXIF IFD ifdOffset=\", ifdOffset, \"numberOfEntries=\", numberOfEntries); // Each IFD entry consists of 12 bytes which we loop through and extract\n    // the data from\n\n    for (var i = 0; i < numberOfEntries; i++) {\n      var exifEntry = this.extractExifEntry(data, ifdOffset + 2 + i * 12, tiffOffset, this.isBigEndian, ExifImage.TAGS.exif);\n\n      if (!exifEntry) {\n        continue;\n      }\n\n      if (exifEntry.tagId === 0xEA1C && noPadding) {\n        continue;\n      }\n\n      exifData.exif[exifEntry.tagName] = exifEntry.value;\n    }\n\n    debug(\"EXIF IFD parsed\", exifData.exif);\n  }\n  /******************************** GPS IFD ********************************/\n  // Look for a pointer to the GPS IFD in IFD0 and extract information from\n  // it if available\n\n\n  if (exifData.image[ExifImage.TAGS.exif[0x8825]]) {\n    ifdOffset = tiffOffset + exifData.image[ExifImage.TAGS.exif[0x8825]];\n    this.offsets.gps = ifdOffset;\n    numberOfEntries = data.getShort(ifdOffset, this.isBigEndian);\n\n    if (this.options.maxGpsEntries) {\n      numberOfEntries = Math.min(numberOfEntries, this.options.maxGpsEntries);\n    }\n\n    debug(\"GPS IFD ifdOffset=\", ifdOffset, \"numberOfEntries=\", numberOfEntries); // Each IFD entry consists of 12 bytes which we loop through and extract\n    // the data from\n\n    for (var i = 0; i < numberOfEntries; i++) {\n      var exifEntry = this.extractExifEntry(data, ifdOffset + 2 + i * 12, tiffOffset, this.isBigEndian, ExifImage.TAGS.gps);\n\n      if (!exifEntry) {\n        continue;\n      }\n\n      if (exifEntry.tagId === 0xEA1C && noPadding) {\n        continue;\n      }\n\n      exifData.gps[exifEntry.tagName] = exifEntry.value;\n    }\n\n    debug(\"GPS IFD parsed\", exifData.gps);\n  }\n  /************************* Interoperability IFD **************************/\n  // Look for a pointer to the interoperatbility IFD in the Exif IFD and\n  // extract information from it if available\n\n\n  if (exifData.exif[ExifImage.TAGS.exif[0xA005]]) {\n    ifdOffset = tiffOffset + exifData.exif[ExifImage.TAGS.exif[0xA005]];\n    this.offsets.interoperability = ifdOffset;\n    numberOfEntries = data.getShort(ifdOffset, this.isBigEndian);\n\n    if (this.options.maxInteroperabilityEntries) {\n      numberOfEntries = Math.min(numberOfEntries, this.options.maxInteroperabilityEntries);\n    }\n\n    debug(\"Interoperability IFD ifdOffset=\", ifdOffset, \"numberOfEntries=\", numberOfEntries); // Each IFD entry consists of 12 bytes which we loop through and extract\n    // the data from\n\n    for (var i = 0; i < numberOfEntries; i++) {\n      var exifEntry = this.extractExifEntry(data, ifdOffset + 2 + i * 12, tiffOffset, this.isBigEndian, ExifImage.TAGS.exif);\n\n      if (!exifEntry) {\n        break;\n      }\n\n      if (exifEntry.tagId === 0xEA1C && noPadding) {\n        continue;\n      }\n\n      exifData.interoperability[exifEntry.tagName] = exifEntry.value;\n    }\n\n    debug(\"Interoperability IFD parsed\", exifData.gps);\n  }\n  /***************************** Makernote IFD *****************************/\n  // Look for Makernote data in the Exif IFD, check which type of proprietary\n  // Makernotes the image contains, load the respective functionality and\n  // start the extraction\n\n\n  if (typeof exifData.exif[ExifImage.TAGS.exif[0x927C]] != \"undefined\") {\n    var type; // Check the header to see what kind of Makernote we are dealing with\n\n    if (exifData.exif[ExifImage.TAGS.exif[0x927C]].getString(0, 7) === \"OLYMP\\x00\\x01\" || exifData.exif[ExifImage.TAGS.exif[0x927C]].getString(0, 7) === \"OLYMP\\x00\\x02\") {\n      type = \"olympus\";\n    } else if (exifData.exif[ExifImage.TAGS.exif[0x927C]].getString(0, 7) === \"AGFA \\x00\\x01\") {\n      type = \"agfa\";\n    } else if (exifData.exif[ExifImage.TAGS.exif[0x927C]].getString(0, 8) === \"EPSON\\x00\\x01\\x00\") {\n      type = \"epson\";\n    } else if (exifData.exif[ExifImage.TAGS.exif[0x927C]].getString(0, 8) === \"FUJIFILM\") {\n      type = \"fujifilm\";\n    } else if (exifData.exif[ExifImage.TAGS.exif[0x927C]].getString(0, 9) === \"Panasonic\") {\n      type = \"panasonic\";\n    } else if (exifData.exif[ExifImage.TAGS.exif[0x927C]].getString(0, 5) === \"SANYO\") {\n      type = \"sanyo\";\n    }\n\n    debug(\"Makernote IFD ifdOffset=\", ifdOffset, \"type=\", type);\n\n    if (type) {\n      var extractMakernotes = require('./makernotes/' + type).extractMakernotes;\n\n      exifData.makernote = extractMakernotes.call(this, data, this.makernoteOffset, tiffOffset);\n    } else {\n      // Makernotes are available but the format is not recognized so\n      // an error message is pushed instead, this ain't the best\n      // solution but should do for now\n      exifData.makernote['error'] = 'Unable to extract Makernote information as it is in an unsupported or unrecognized format.';\n    }\n\n    debug(\"Makernote IFD parsed\", exifData.makernote);\n  }\n};\n\nExifImage.prototype.extractExifEntry = function (data, entryOffset, tiffOffset, isBigEndian, tags) {\n  var entry = {\n    tag: data.slice(entryOffset, entryOffset + 2),\n    tagId: null,\n    tagName: null,\n    format: data.getShort(entryOffset + 2, isBigEndian),\n    components: data.getLong(entryOffset + 4, isBigEndian),\n    valueOffset: null,\n    value: []\n  };\n  entry.tagId = entry.tag.getShort(0, isBigEndian); // The tagId may correspond to more then one tagName so check which\n\n  if (tags && tags[entry.tagId] && typeof tags[entry.tagId] == \"function\") {\n    entry.tagName = tags[entry.tagId].call(this, entry);\n\n    if (!entry.tagName) {\n      return false;\n    } // The tagId corresponds to exactly one tagName\n\n  } else if (tags && tags[entry.tagId]) {\n    entry.tagName = tags[entry.tagId];\n\n    if (entry.tagName === undefined) {\n      return false;\n    } // The tagId is not recognized\n\n  } else {\n    return false;\n  }\n\n  switch (entry.format) {\n    case 0x0001:\n      // unsigned byte, 1 byte per component\n      entry.valueOffset = entry.components <= 4 ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;\n\n      for (var i = 0; i < entry.components; i++) entry.value.push(data.getByte(entry.valueOffset + i));\n\n      break;\n\n    case 0x0002:\n      // ascii strings, 1 byte per component\n      entry.valueOffset = entry.components <= 4 ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;\n      entry.value = data.getString(entry.valueOffset, entry.components);\n      if (entry.value[entry.value.length - 1] === \"\\u0000\") // Trim null terminated strings\n        entry.value = entry.value.substring(0, entry.value.length - 1);\n      break;\n\n    case 0x0003:\n      // unsigned short, 2 byte per component\n      entry.valueOffset = entry.components <= 2 ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;\n\n      for (var i = 0; i < entry.components; i++) entry.value.push(data.getShort(entry.valueOffset + i * 2, isBigEndian));\n\n      break;\n\n    case 0x0004:\n      // unsigned long, 4 byte per component\n      entry.valueOffset = entry.components == 1 ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;\n\n      for (var i = 0; i < entry.components; i++) entry.value.push(data.getLong(entry.valueOffset + i * 4, isBigEndian));\n\n      break;\n\n    case 0x0005:\n      // unsigned rational, 8 byte per component (4 byte numerator and 4 byte denominator)\n      entry.valueOffset = data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;\n\n      for (var i = 0; i < entry.components; i++) entry.value.push(data.getLong(entry.valueOffset + i * 8, isBigEndian) / data.getLong(entry.valueOffset + i * 8 + 4, isBigEndian));\n\n      break;\n\n    case 0x0006:\n      // signed byte, 1 byte per component\n      entry.valueOffset = entry.components <= 4 ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;\n\n      for (var i = 0; i < entry.components; i++) entry.value.push(data.getSignedByte(entry.valueOffset + i));\n\n      break;\n\n    case 0x0007:\n      // undefined, 1 byte per component\n      entry.valueOffset = entry.components <= 4 ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;\n      entry.value.push(data.slice(entry.valueOffset, entry.valueOffset + entry.components));\n      break;\n\n    case 0x0008:\n      // signed short, 2 byte per component\n      entry.valueOffset = entry.components <= 2 ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;\n\n      for (var i = 0; i < entry.components; i++) entry.value.push(data.getSignedShort(entry.valueOffset + i * 2, isBigEndian));\n\n      break;\n\n    case 0x0009:\n      // signed long, 4 byte per component\n      entry.valueOffset = entry.components == 1 ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;\n\n      for (var i = 0; i < entry.components; i++) entry.value.push(data.getSignedLong(entry.valueOffset + i * 4, isBigEndian));\n\n      break;\n\n    case 0x000A:\n      // signed rational, 8 byte per component (4 byte numerator and 4 byte denominator)\n      entry.valueOffset = data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;\n\n      for (var i = 0; i < entry.components; i++) entry.value.push(data.getSignedLong(entry.valueOffset + i * 8, isBigEndian) / data.getSignedLong(entry.valueOffset + i * 8 + 4, isBigEndian));\n\n      break;\n\n    default:\n      return false;\n  } // If this is the Makernote tag save its offset for later use\n\n\n  if (entry.tagName === \"MakerNote\") {\n    this.offsets.makernoteOffset = entry.valueOffset;\n  } // If the value array has only one element we don't need an array\n\n\n  if (entry.value.length == 1) {\n    entry.value = entry.value[0];\n  }\n\n  return entry;\n};\n/**\r\n * Comprehensive list of TIFF and Exif tags found on\r\n * http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/EXIF.html\r\n */\n\n\nExifImage.TAGS = {\n  // Exif tags\n  exif: {\n    0x0001: \"InteropIndex\",\n    0x0002: \"InteropVersion\",\n    0x000B: \"ProcessingSoftware\",\n    0x00FE: \"SubfileType\",\n    0x00FF: \"OldSubfileType\",\n    0x0100: \"ImageWidth\",\n    0x0101: \"ImageHeight\",\n    0x0102: \"BitsPerSample\",\n    0x0103: \"Compression\",\n    0x0106: \"PhotometricInterpretation\",\n    0x0107: \"Thresholding\",\n    0x0108: \"CellWidth\",\n    0x0109: \"CellLength\",\n    0x010A: \"FillOrder\",\n    0x010D: \"DocumentName\",\n    0x010E: \"ImageDescription\",\n    0x010F: \"Make\",\n    0x0110: \"Model\",\n    0x0111: \"StripOffsets\",\n    0x0112: \"Orientation\",\n    0x0115: \"SamplesPerPixel\",\n    0x0116: \"RowsPerStrip\",\n    0x0117: \"StripByteCounts\",\n    0x0118: \"MinSampleValue\",\n    0x0119: \"MaxSampleValue\",\n    0x011A: \"XResolution\",\n    0x011B: \"YResolution\",\n    0x011C: \"PlanarConfiguration\",\n    0x011D: \"PageName\",\n    0x011E: \"XPosition\",\n    0x011F: \"YPosition\",\n    0x0120: \"FreeOffsets\",\n    0x0121: \"FreeByteCounts\",\n    0x0122: \"GrayResponseUnit\",\n    0x0123: \"GrayResponseCurve\",\n    0x0124: \"T4Options\",\n    0x0125: \"T6Options\",\n    0x0128: \"ResolutionUnit\",\n    0x0129: \"PageNumber\",\n    0x012C: \"ColorResponseUnit\",\n    0x012D: \"TransferFunction\",\n    0x0131: \"Software\",\n    0x0132: \"ModifyDate\",\n    0x013B: \"Artist\",\n    0x013C: \"HostComputer\",\n    0x013D: \"Predictor\",\n    0x013E: \"WhitePoint\",\n    0x013F: \"PrimaryChromaticities\",\n    0x0140: \"ColorMap\",\n    0x0141: \"HalftoneHints\",\n    0x0142: \"TileWidth\",\n    0x0143: \"TileLength\",\n    0x0144: \"TileOffsets\",\n    0x0145: \"TileByteCounts\",\n    0x0146: \"BadFaxLines\",\n    0x0147: \"CleanFaxData\",\n    0x0148: \"ConsecutiveBadFaxLines\",\n    0x014A: \"SubIFD\",\n    0x014C: \"InkSet\",\n    0x014D: \"InkNames\",\n    0x014E: \"NumberofInks\",\n    0x0150: \"DotRange\",\n    0x0151: \"TargetPrinter\",\n    0x0152: \"ExtraSamples\",\n    0x0153: \"SampleFormat\",\n    0x0154: \"SMinSampleValue\",\n    0x0155: \"SMaxSampleValue\",\n    0x0156: \"TransferRange\",\n    0x0157: \"ClipPath\",\n    0x0158: \"XClipPathUnits\",\n    0x0159: \"YClipPathUnits\",\n    0x015A: \"Indexed\",\n    0x015B: \"JPEGTables\",\n    0x015F: \"OPIProxy\",\n    0x0190: \"GlobalParametersIFD\",\n    0x0191: \"ProfileType\",\n    0x0192: \"FaxProfile\",\n    0x0193: \"CodingMethods\",\n    0x0194: \"VersionYear\",\n    0x0195: \"ModeNumber\",\n    0x01B1: \"Decode\",\n    0x01B2: \"DefaultImageColor\",\n    0x01B3: \"T82Options\",\n    0x01B5: \"JPEGTables\",\n    0x0200: \"JPEGProc\",\n    0x0201: \"ThumbnailOffset\",\n    0x0202: \"ThumbnailLength\",\n    0x0203: \"JPEGRestartInterval\",\n    0x0205: \"JPEGLosslessPredictors\",\n    0x0206: \"JPEGPointTransforms\",\n    0x0207: \"JPEGQTables\",\n    0x0208: \"JPEGDCTables\",\n    0x0209: \"JPEGACTables\",\n    0x0211: \"YCbCrCoefficients\",\n    0x0212: \"YCbCrSubSampling\",\n    0x0213: \"YCbCrPositioning\",\n    0x0214: \"ReferenceBlackWhite\",\n    0x022F: \"StripRowCounts\",\n    0x02BC: \"ApplicationNotes\",\n    0x03E7: \"USPTOMiscellaneous\",\n    0x1000: \"RelatedImageFileFormat\",\n    0x1001: \"RelatedImageWidth\",\n    0x1002: \"RelatedImageHeight\",\n    0x4746: \"Rating\",\n    0x4747: \"XP_DIP_XML\",\n    0x4748: \"StitchInfo\",\n    0x4749: \"RatingPercent\",\n    0x800D: \"ImageID\",\n    0x80A3: \"WangTag1\",\n    0x80A4: \"WangAnnotation\",\n    0x80A5: \"WangTag3\",\n    0x80A6: \"WangTag4\",\n    0x80E3: \"Matteing\",\n    0x80E4: \"DataType\",\n    0x80E5: \"ImageDepth\",\n    0x80E6: \"TileDepth\",\n    0x827D: \"Model2\",\n    0x828D: \"CFARepeatPatternDim\",\n    0x828E: \"CFAPattern2\",\n    0x828F: \"BatteryLevel\",\n    0x8290: \"KodakIFD\",\n    0x8298: \"Copyright\",\n    0x829A: \"ExposureTime\",\n    0x829D: \"FNumber\",\n    0x82A5: \"MDFileTag\",\n    0x82A6: \"MDScalePixel\",\n    0x82A7: \"MDColorTable\",\n    0x82A8: \"MDLabName\",\n    0x82A9: \"MDSampleInfo\",\n    0x82AA: \"MDPrepDate\",\n    0x82AB: \"MDPrepTime\",\n    0x82AC: \"MDFileUnits\",\n    0x830E: \"PixelScale\",\n    0x8335: \"AdventScale\",\n    0x8336: \"AdventRevision\",\n    0x835C: \"UIC1Tag\",\n    0x835D: \"UIC2Tag\",\n    0x835E: \"UIC3Tag\",\n    0x835F: \"UIC4Tag\",\n    0x83BB: \"IPTC-NAA\",\n    0x847E: \"IntergraphPacketData\",\n    0x847F: \"IntergraphFlagRegisters\",\n    0x8480: \"IntergraphMatrix\",\n    0x8481: \"INGRReserved\",\n    0x8482: \"ModelTiePoint\",\n    0x84E0: \"Site\",\n    0x84E1: \"ColorSequence\",\n    0x84E2: \"IT8Header\",\n    0x84E3: \"RasterPadding\",\n    0x84E4: \"BitsPerRunLength\",\n    0x84E5: \"BitsPerExtendedRunLength\",\n    0x84E6: \"ColorTable\",\n    0x84E7: \"ImageColorIndicator\",\n    0x84E8: \"BackgroundColorIndicator\",\n    0x84E9: \"ImageColorValue\",\n    0x84EA: \"BackgroundColorValue\",\n    0x84EB: \"PixelIntensityRange\",\n    0x84EC: \"TransparencyIndicator\",\n    0x84ED: \"ColorCharacterization\",\n    0x84EE: \"HCUsage\",\n    0x84EF: \"TrapIndicator\",\n    0x84F0: \"CMYKEquivalent\",\n    0x8546: \"SEMInfo\",\n    0x8568: \"AFCP_IPTC\",\n    0x85B8: \"PixelMagicJBIGOptions\",\n    0x85D8: \"ModelTransform\",\n    0x8602: \"WB_GRGBLevels\",\n    0x8606: \"LeafData\",\n    0x8649: \"PhotoshopSettings\",\n    0x8769: \"ExifOffset\",\n    0x8773: \"ICC_Profile\",\n    0x877F: \"TIFF_FXExtensions\",\n    0x8780: \"MultiProfiles\",\n    0x8781: \"SharedData\",\n    0x8782: \"T88Options\",\n    0x87AC: \"ImageLayer\",\n    0x87AF: \"GeoTiffDirectory\",\n    0x87B0: \"GeoTiffDoubleParams\",\n    0x87B1: \"GeoTiffAsciiParams\",\n    0x8822: \"ExposureProgram\",\n    0x8824: \"SpectralSensitivity\",\n    0x8825: \"GPSInfo\",\n    0x8827: \"ISO\",\n    0x8828: \"Opto-ElectricConvFactor\",\n    0x8829: \"Interlace\",\n    0x882A: \"TimeZoneOffset\",\n    0x882B: \"SelfTimerMode\",\n    0x8830: \"SensitivityType\",\n    0x8831: \"StandardOutputSensitivity\",\n    0x8832: \"RecommendedExposureIndex\",\n    0x8833: \"ISOSpeed\",\n    0x8834: \"ISOSpeedLatitudeyyy\",\n    0x8835: \"ISOSpeedLatitudezzz\",\n    0x885C: \"FaxRecvParams\",\n    0x885D: \"FaxSubAddress\",\n    0x885E: \"FaxRecvTime\",\n    0x888A: \"LeafSubIFD\",\n    0x9000: \"ExifVersion\",\n    0x9003: \"DateTimeOriginal\",\n    0x9004: \"CreateDate\",\n    0x9101: \"ComponentsConfiguration\",\n    0x9102: \"CompressedBitsPerPixel\",\n    0x9201: \"ShutterSpeedValue\",\n    0x9202: \"ApertureValue\",\n    0x9203: \"BrightnessValue\",\n    0x9204: \"ExposureCompensation\",\n    0x9205: \"MaxApertureValue\",\n    0x9206: \"SubjectDistance\",\n    0x9207: \"MeteringMode\",\n    0x9208: \"LightSource\",\n    0x9209: \"Flash\",\n    0x920A: \"FocalLength\",\n    0x920B: \"FlashEnergy\",\n    0x920C: \"SpatialFrequencyResponse\",\n    0x920D: \"Noise\",\n    0x920E: \"FocalPlaneXResolution\",\n    0x920F: \"FocalPlaneYResolution\",\n    0x9210: \"FocalPlaneResolutionUnit\",\n    0x9211: \"ImageNumber\",\n    0x9212: \"SecurityClassification\",\n    0x9213: \"ImageHistory\",\n    0x9214: \"SubjectArea\",\n    0x9215: \"ExposureIndex\",\n    0x9216: \"TIFF-EPStandardID\",\n    0x9217: \"SensingMethod\",\n    0x923A: \"CIP3DataFile\",\n    0x923B: \"CIP3Sheet\",\n    0x923C: \"CIP3Side\",\n    0x923F: \"StoNits\",\n    0x927C: \"MakerNote\",\n    0x9286: \"UserComment\",\n    0x9290: \"SubSecTime\",\n    0x9291: \"SubSecTimeOriginal\",\n    0x9292: \"SubSecTimeDigitized\",\n    0x932F: \"MSDocumentText\",\n    0x9330: \"MSPropertySetStorage\",\n    0x9331: \"MSDocumentTextPosition\",\n    0x935C: \"ImageSourceData\",\n    0x9C9B: \"XPTitle\",\n    0x9C9C: \"XPComment\",\n    0x9C9D: \"XPAuthor\",\n    0x9C9E: \"XPKeywords\",\n    0x9C9F: \"XPSubject\",\n    0xA000: \"FlashpixVersion\",\n    0xA001: \"ColorSpace\",\n    0xA002: \"ExifImageWidth\",\n    0xA003: \"ExifImageHeight\",\n    0xA004: \"RelatedSoundFile\",\n    0xA005: \"InteropOffset\",\n    0xA20B: \"FlashEnergy\",\n    0xA20C: \"SpatialFrequencyResponse\",\n    0xA20D: \"Noise\",\n    0xA20E: \"FocalPlaneXResolution\",\n    0xA20F: \"FocalPlaneYResolution\",\n    0xA210: \"FocalPlaneResolutionUnit\",\n    0xA211: \"ImageNumber\",\n    0xA212: \"SecurityClassification\",\n    0xA213: \"ImageHistory\",\n    0xA214: \"SubjectLocation\",\n    0xA215: \"ExposureIndex\",\n    0xA216: \"TIFF-EPStandardID\",\n    0xA217: \"SensingMethod\",\n    0xA300: \"FileSource\",\n    0xA301: \"SceneType\",\n    0xA302: \"CFAPattern\",\n    0xA401: \"CustomRendered\",\n    0xA402: \"ExposureMode\",\n    0xA403: \"WhiteBalance\",\n    0xA404: \"DigitalZoomRatio\",\n    0xA405: \"FocalLengthIn35mmFormat\",\n    0xA406: \"SceneCaptureType\",\n    0xA407: \"GainControl\",\n    0xA408: \"Contrast\",\n    0xA409: \"Saturation\",\n    0xA40A: \"Sharpness\",\n    0xA40B: \"DeviceSettingDescription\",\n    0xA40C: \"SubjectDistanceRange\",\n    0xA420: \"ImageUniqueID\",\n    0xA430: \"OwnerName\",\n    0xA431: \"SerialNumber\",\n    0xA432: \"LensInfo\",\n    0xA433: \"LensMake\",\n    0xA434: \"LensModel\",\n    0xA435: \"LensSerialNumber\",\n    0xA480: \"GDALMetadata\",\n    0xA481: \"GDALNoData\",\n    0xA500: \"Gamma\",\n    0xAFC0: \"ExpandSoftware\",\n    0xAFC1: \"ExpandLens\",\n    0xAFC2: \"ExpandFilm\",\n    0xAFC3: \"ExpandFilterLens\",\n    0xAFC4: \"ExpandScanner\",\n    0xAFC5: \"ExpandFlashLamp\",\n    0xBC01: \"PixelFormat\",\n    0xBC02: \"Transformation\",\n    0xBC03: \"Uncompressed\",\n    0xBC04: \"ImageType\",\n    0xBC80: \"ImageWidth\",\n    0xBC81: \"ImageHeight\",\n    0xBC82: \"WidthResolution\",\n    0xBC83: \"HeightResolution\",\n    0xBCC0: \"ImageOffset\",\n    0xBCC1: \"ImageByteCount\",\n    0xBCC2: \"AlphaOffset\",\n    0xBCC3: \"AlphaByteCount\",\n    0xBCC4: \"ImageDataDiscard\",\n    0xBCC5: \"AlphaDataDiscard\",\n    0xC427: \"OceScanjobDesc\",\n    0xC428: \"OceApplicationSelector\",\n    0xC429: \"OceIDNumber\",\n    0xC42A: \"OceImageLogic\",\n    0xC44F: \"Annotations\",\n    0xC4A5: \"PrintIM\",\n    0xC580: \"USPTOOriginalContentType\",\n    0xC612: \"DNGVersion\",\n    0xC613: \"DNGBackwardVersion\",\n    0xC614: \"UniqueCameraModel\",\n    0xC615: \"LocalizedCameraModel\",\n    0xC616: \"CFAPlaneColor\",\n    0xC617: \"CFALayout\",\n    0xC618: \"LinearizationTable\",\n    0xC619: \"BlackLevelRepeatDim\",\n    0xC61A: \"BlackLevel\",\n    0xC61B: \"BlackLevelDeltaH\",\n    0xC61C: \"BlackLevelDeltaV\",\n    0xC61D: \"WhiteLevel\",\n    0xC61E: \"DefaultScale\",\n    0xC61F: \"DefaultCropOrigin\",\n    0xC620: \"DefaultCropSize\",\n    0xC621: \"ColorMatrix1\",\n    0xC622: \"ColorMatrix2\",\n    0xC623: \"CameraCalibration1\",\n    0xC624: \"CameraCalibration2\",\n    0xC625: \"ReductionMatrix1\",\n    0xC626: \"ReductionMatrix2\",\n    0xC627: \"AnalogBalance\",\n    0xC628: \"AsShotNeutral\",\n    0xC629: \"AsShotWhiteXY\",\n    0xC62A: \"BaselineExposure\",\n    0xC62B: \"BaselineNoise\",\n    0xC62C: \"BaselineSharpness\",\n    0xC62D: \"BayerGreenSplit\",\n    0xC62E: \"LinearResponseLimit\",\n    0xC62F: \"CameraSerialNumber\",\n    0xC630: \"DNGLensInfo\",\n    0xC631: \"ChromaBlurRadius\",\n    0xC632: \"AntiAliasStrength\",\n    0xC633: \"ShadowScale\",\n    0xC634: \"DNGPrivateData\",\n    0xC635: \"MakerNoteSafety\",\n    0xC640: \"RawImageSegmentation\",\n    0xC65A: \"CalibrationIlluminant1\",\n    0xC65B: \"CalibrationIlluminant2\",\n    0xC65C: \"BestQualityScale\",\n    0xC65D: \"RawDataUniqueID\",\n    0xC660: \"AliasLayerMetadata\",\n    0xC68B: \"OriginalRawFileName\",\n    0xC68C: \"OriginalRawFileData\",\n    0xC68D: \"ActiveArea\",\n    0xC68E: \"MaskedAreas\",\n    0xC68F: \"AsShotICCProfile\",\n    0xC690: \"AsShotPreProfileMatrix\",\n    0xC691: \"CurrentICCProfile\",\n    0xC692: \"CurrentPreProfileMatrix\",\n    0xC6BF: \"ColorimetricReference\",\n    0xC6D2: \"PanasonicTitle\",\n    0xC6D3: \"PanasonicTitle2\",\n    0xC6F3: \"CameraCalibrationSig\",\n    0xC6F4: \"ProfileCalibrationSig\",\n    0xC6F5: \"ProfileIFD\",\n    0xC6F6: \"AsShotProfileName\",\n    0xC6F7: \"NoiseReductionApplied\",\n    0xC6F8: \"ProfileName\",\n    0xC6F9: \"ProfileHueSatMapDims\",\n    0xC6FA: \"ProfileHueSatMapData1\",\n    0xC6FB: \"ProfileHueSatMapData2\",\n    0xC6FC: \"ProfileToneCurve\",\n    0xC6FD: \"ProfileEmbedPolicy\",\n    0xC6FE: \"ProfileCopyright\",\n    0xC714: \"ForwardMatrix1\",\n    0xC715: \"ForwardMatrix2\",\n    0xC716: \"PreviewApplicationName\",\n    0xC717: \"PreviewApplicationVersion\",\n    0xC718: \"PreviewSettingsName\",\n    0xC719: \"PreviewSettingsDigest\",\n    0xC71A: \"PreviewColorSpace\",\n    0xC71B: \"PreviewDateTime\",\n    0xC71C: \"RawImageDigest\",\n    0xC71D: \"OriginalRawFileDigest\",\n    0xC71E: \"SubTileBlockSize\",\n    0xC71F: \"RowInterleaveFactor\",\n    0xC725: \"ProfileLookTableDims\",\n    0xC726: \"ProfileLookTableData\",\n    0xC740: \"OpcodeList1\",\n    0xC741: \"OpcodeList2\",\n    0xC74E: \"OpcodeList3\",\n    0xC761: \"NoiseProfile\",\n    0xC763: \"TimeCodes\",\n    0xC764: \"FrameRate\",\n    0xC772: \"TStop\",\n    0xC789: \"ReelName\",\n    0xC791: \"OriginalDefaultFinalSize\",\n    0xC792: \"OriginalBestQualitySize\",\n    0xC793: \"OriginalDefaultCropSize\",\n    0xC7A1: \"CameraLabel\",\n    0xC7A3: \"ProfileHueSatMapEncoding\",\n    0xC7A4: \"ProfileLookTableEncoding\",\n    0xC7A5: \"BaselineExposureOffset\",\n    0xC7A6: \"DefaultBlackRender\",\n    0xC7A7: \"NewRawImageDigest\",\n    0xC7A8: \"RawToPreviewGain\",\n    0xC7B5: \"DefaultUserCrop\",\n    0xEA1C: \"Padding\",\n    0xEA1D: \"OffsetSchema\",\n    0xFDE8: \"OwnerName\",\n    0xFDE9: \"SerialNumber\",\n    0xFDEA: \"Lens\",\n    0xFE00: \"KDC_IFD\",\n    0xFE4C: \"RawFile\",\n    0xFE4D: \"Converter\",\n    0xFE4E: \"WhiteBalance\",\n    0xFE51: \"Exposure\",\n    0xFE52: \"Shadows\",\n    0xFE53: \"Brightness\",\n    0xFE54: \"Contrast\",\n    0xFE55: \"Saturation\",\n    0xFE56: \"Sharpness\",\n    0xFE57: \"Smoothness\",\n    0xFE58: \"MoireFilter\"\n  },\n  // GPS Tags\n  gps: {\n    0x0000: 'GPSVersionID',\n    0x0001: 'GPSLatitudeRef',\n    0x0002: 'GPSLatitude',\n    0x0003: 'GPSLongitudeRef',\n    0x0004: 'GPSLongitude',\n    0x0005: 'GPSAltitudeRef',\n    0x0006: 'GPSAltitude',\n    0x0007: 'GPSTimeStamp',\n    0x0008: 'GPSSatellites',\n    0x0009: 'GPSStatus',\n    0x000A: 'GPSMeasureMode',\n    0x000B: 'GPSDOP',\n    0x000C: 'GPSSpeedRef',\n    0x000D: 'GPSSpeed',\n    0x000E: 'GPSTrackRef',\n    0x000F: 'GPSTrack',\n    0x0010: 'GPSImgDirectionRef',\n    0x0011: 'GPSImgDirection',\n    0x0012: 'GPSMapDatum',\n    0x0013: 'GPSDestLatitudeRef',\n    0x0014: 'GPSDestLatitude',\n    0x0015: 'GPSDestLongitudeRef',\n    0x0016: 'GPSDestLongitude',\n    0x0017: 'GPSDestBearingRef',\n    0x0018: 'GPSDestBearing',\n    0x0019: 'GPSDestDistanceRef',\n    0x001A: 'GPSDestDistance',\n    0x001B: 'GPSProcessingMethod',\n    0x001C: 'GPSAreaInformation',\n    0x001D: 'GPSDateStamp',\n    0x001E: 'GPSDifferential',\n    0x001F: 'GPSHPositioningError'\n  }\n};","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/exif/lib/exif/ExifImage.js"],"names":["assert","require","fs","util","BufferExtender","debug","DEFAULT_MAX_ENTRIES","ExifImage","options","callback","image","exifImage","error","data","Buffer","ops","k","forEach","p","undefined","exifData","thumbnail","exif","gps","interoperability","makernote","offsets","tiffOffsets","Error","self","setImmediate","loadImage","module","exports","prototype","constructor","name","processImage","readFile","source","offset","e","code","imageType","length","extractExifData","getShort","e2","start","tiffOffset","ifdOffset","numberOfEntries","noPadding","tiff","toString","isBigEndian","toUpperCase","expected","getLong","ifd0","ifd0MaxEntries","Math","min","i","exifEntry","extractExifEntry","TAGS","tagId","tagName","value","nextIfdOffset","ifd1","ifd1MaxEntries","fixThumbnailOffset","thumbnailOffset","tags","maxEntries","maxGpsEntries","maxInteroperabilityEntries","type","getString","extractMakernotes","call","makernoteOffset","entryOffset","entry","tag","slice","format","components","valueOffset","push","getByte","substring","getSignedByte","getSignedShort","getSignedLong"],"mappings":"AAAA;AACA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIG,cAAc,GAAGH,OAAO,CAAC,UAAD,CAA5B,C,CAA0C;;;AAC1C,IAAII,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAAP,CAAiB,MAAjB,CAAZ;;AAEA,IAAIK,mBAAmB,GAAC,GAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,SAASC,SAAT,CAAoBC,OAApB,EAA6BC,QAA7B,EAAuC;AACrC,MAAI,EAAE,gBAAgBF,SAAlB,CAAJ,EAAkC;AAChC,QAAI,OAAOC,OAAP,KAAkB,QAAtB,EAAgC;AAC9BA,MAAAA,OAAO,GAAG;AACNE,QAAAA,KAAK,EAAEF;AADD,OAAV;AAGD;;AAEDR,IAAAA,MAAM,CAAC,OAAOQ,OAAP,KAAkB,QAAnB,EAA6B,wBAA7B,CAAN;AAEA,QAAIG,SAAS,GAAG,IAAIJ,SAAJ,CAAcC,OAAd,EAAuB,UAASI,KAAT,EAAgBC,IAAhB,EAAsB;AAC3D,UAAID,KAAJ,EAAW;AACT,eAAOH,QAAQ,CAACG,KAAD,CAAf;AACD;;AAEDH,MAAAA,QAAQ,CAAC,IAAD,EAAOI,IAAP,EAAaL,OAAO,CAACE,KAArB,CAAR;AACD,KANe,CAAhB;AAQA,WAAOC,SAAP;AACD;;AAED,MAAI,OAAOH,OAAP,KAAkB,QAAtB,EAAgC;AAC9BA,IAAAA,OAAO,GAAE;AACLE,MAAAA,KAAK,EAAEF;AADF,KAAT;AAGD,GAJD,MAIO,IAAIA,OAAO,YAAYM,MAAvB,EAA+B;AACpCN,IAAAA,OAAO,GAAE;AACLE,MAAAA,KAAK,EAAEF;AADF,KAAT;AAGD;;AAED,MAAIO,GAAG,GAAC,EAAR;;AACA,MAAIP,OAAJ,EAAa;AACX,SAAI,IAAIQ,CAAR,IAAaR,OAAb,EAAsB;AACpBO,MAAAA,GAAG,CAACC,CAAD,CAAH,GAAOR,OAAO,CAACQ,CAAD,CAAd;AACD;AACF;;AACD,OAAKR,OAAL,GAAaO,GAAb,CArCqC,CAuCrC;;AACA,GAAC,gBAAD,EAAmB,gBAAnB,EAAqC,eAArC,EAAsD,4BAAtD,EAAoF,gBAApF,EAAsG,iBAAtG,EACG,oBADH,EACyB,mBADzB,EAC8C,qBAD9C,EACqE,iBADrE,EACwFE,OADxF,CACgG,UAASC,CAAT,EAAY;AACvG,QAAIH,GAAG,CAACG,CAAD,CAAH,KAASC,SAAb,EAAwB;AACtBJ,MAAAA,GAAG,CAACG,CAAD,CAAH,GAAOZ,mBAAP;AACD;AACF,GALJ;AAOA,OAAKc,QAAL,GAAgB;AACdV,IAAAA,KAAK,EAAG,EADM;AACc;AAC5BW,IAAAA,SAAS,EAAG,EAFE;AAEc;AAC5BC,IAAAA,IAAI,EAAG,EAHO;AAGc;AAC5BC,IAAAA,GAAG,EAAG,EAJQ;AAIc;AAC5BC,IAAAA,gBAAgB,EAAE,EALJ;AAKc;AAC5BC,IAAAA,SAAS,EAAG,EANE,CAMc;;AANd,GAAhB;AASA,OAAKC,OAAL,GAAa,EAAb;;AACA,MAAIX,GAAG,CAACY,WAAR,EAAqB;AACnBP,IAAAA,QAAQ,CAACM,OAAT,GAAiBA,OAAjB;AACD;;AAEDrB,EAAAA,KAAK,CAAC,wBAAD,EAA0BG,OAA1B,CAAL;;AAEA,MAAI,CAACO,GAAG,CAACL,KAAT,EAAgB;AACd;AACJ;AACI;AACD;;AAED,MAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;AAClC,UAAM,IAAImB,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAED,MAAIC,IAAI,GAAC,IAAT;AACAC,EAAAA,YAAY,CAAC,YAAW;AACtBD,IAAAA,IAAI,CAACE,SAAL,CAAehB,GAAG,CAACL,KAAnB,EAA0B,UAAUE,KAAV,EAAiBQ,QAAjB,EAA2B;AACnD,UAAIR,KAAJ,EAAW;AACT,eAAOH,QAAQ,CAACG,KAAD,CAAf;AACD;;AAEDH,MAAAA,QAAQ,CAAC,IAAD,EAAOW,QAAP,EAAiBL,GAAG,CAACL,KAArB,CAAR;AACD,KAND;AAOD,GARW,CAAZ;AASD;;AAEDH,SAAS,CAACA,SAAV,GAAoBA,SAApB;AAEAyB,MAAM,CAACC,OAAP,GAAiB1B,SAAjB;AAEA;;;;;;;;AAOAA,SAAS,CAAC2B,SAAV,CAAoBH,SAApB,GAAgC,UAAUrB,KAAV,EAAiBD,QAAjB,EAA2B;AACzDT,EAAAA,MAAM,CAAC,OAAOS,QAAP,KAAmB,UAApB,EAAgC,6BAAhC,CAAN;AAEA,MAAIoB,IAAI,GAAG,IAAX;AAEAxB,EAAAA,KAAK,CAAC,kBAAD,EAAqBK,KAArB,CAAL;;AAEA,MAAIA,KAAK,CAACyB,WAAN,CAAkBC,IAAlB,KAA2B,QAA/B,EAAyC;AACvC,SAAKC,YAAL,CAAkB,QAAlB,EAA4B3B,KAA5B,EAAmCD,QAAnC;AACA;AACD;;AAED,MAAIC,KAAK,CAACyB,WAAN,CAAkBC,IAAlB,KAA2B,QAA/B,EAAyC;AACvClC,IAAAA,EAAE,CAACoC,QAAH,CAAY5B,KAAZ,EAAmB,UAAUE,KAAV,EAAiBC,IAAjB,EAAuB;AACxC,UAAID,KAAJ,EAAW;AACTH,QAAAA,QAAQ,CAAC,IAAImB,KAAJ,CAAU,uEAAqEhB,KAA/E,CAAD,CAAR;AACA;AACD;;AAEDiB,MAAAA,IAAI,CAACQ,YAAL,CAAkB,WAAS3B,KAA3B,EAAkCG,IAAlC,EAAwCJ,QAAxC;AACD,KAPD;AAQA;AACD;;AAEDA,EAAAA,QAAQ,CAAC,IAAImB,KAAJ,CAAU,0EAAV,CAAD,CAAR;AACD,CAzBD;;AA2BArB,SAAS,CAAC2B,SAAV,CAAoBG,YAApB,GAAmC,UAAUE,MAAV,EAAkB1B,IAAlB,EAAwBJ,QAAxB,EAAkC;AACnET,EAAAA,MAAM,CAAC,OAAOuC,MAAP,KAAiB,QAAlB,EAA4B,yBAA5B,CAAN;AACAvC,EAAAA,MAAM,CAAC,OAAOS,QAAP,KAAmB,UAApB,EAAgC,6BAAhC,CAAN;AAEA,MAAI+B,MAAM,GAAG,CAAb;;AAEA,MAAI3B,IAAI,CAAC2B,MAAM,EAAP,CAAJ,IAAkB,IAAlB,IAA0B3B,IAAI,CAAC2B,MAAM,EAAP,CAAJ,IAAkB,IAAhD,EAAsD;AACpD,QAAIC,CAAC,GAAC,IAAIb,KAAJ,CAAU,+DAAV,CAAN;AACAa,IAAAA,CAAC,CAACF,MAAF,GAASA,MAAT;AACAE,IAAAA,CAAC,CAACC,IAAF,GAAO,YAAP;AACAjC,IAAAA,QAAQ,CAACgC,CAAD,CAAR;AACA;AACD;;AAED,OAAKE,SAAL,GAAiB,MAAjB;;AAEA,SAAOH,MAAM,GAAG3B,IAAI,CAAC+B,MAArB,EAA6B;AAE3B,QAAI/B,IAAI,CAAC2B,MAAM,EAAP,CAAJ,IAAkB,IAAtB,EAA4B;AAC1B;AACD;;AAED,QAAI3B,IAAI,CAAC2B,MAAM,EAAP,CAAJ,IAAkB,IAAtB,EAA4B;AAC1B,UAAI;AACF,aAAKK,eAAL,CAAqBhC,IAArB,EAA2B2B,MAAM,GAAG,CAApC,EAAuC3B,IAAI,CAACiC,QAAL,CAAcN,MAAd,EAAsB,IAAtB,IAA8B,CAArE;AAED,OAHD,CAGE,OAAO5B,KAAP,EAAc;AACdA,QAAAA,KAAK,CAAC8B,IAAN,GAAW,eAAX;AACA9B,QAAAA,KAAK,CAAC2B,MAAN,GAAaA,MAAb;AAEAlC,QAAAA,KAAK,CAAC,iCAAD,EAAoCkC,MAApC,EAA4C,SAA5C,EAAuDC,MAAvD,EAA+D,QAA/D,EAAwE5B,KAAxE,CAAL;AAEAH,QAAAA,QAAQ,CAACG,KAAD,CAAR;AACA;AACD;;AAEDP,MAAAA,KAAK,CAAC,mCAAD,EAAsCkC,MAAtC,EAA8C,WAA9C,EAA0D,KAAKnB,QAA/D,CAAL;AAEAX,MAAAA,QAAQ,CAAC,IAAD,EAAO,KAAKW,QAAZ,CAAR;AACA;AACD;;AAEDoB,IAAAA,MAAM,IAAI3B,IAAI,CAACiC,QAAL,CAAcN,MAAd,EAAsB,IAAtB,CAAV;AACD;;AAED,MAAIO,EAAE,GAAC,IAAInB,KAAJ,CAAU,2CAAV,CAAP;AACAmB,EAAAA,EAAE,CAACR,MAAH,GAAUA,MAAV;AACAQ,EAAAA,EAAE,CAACL,IAAH,GAAQ,iBAAR;AAEAjC,EAAAA,QAAQ,CAACsC,EAAD,CAAR;AACD,CAlDD;;AAoDAxC,SAAS,CAAC2B,SAAV,CAAoBW,eAApB,GAAsC,UAAUhC,IAAV,EAAgBmC,KAAhB,EAAuBJ,MAAvB,EAA+B;AAEnE,MAAIxB,QAAQ,GAAC,KAAKA,QAAlB;AACA,MAAI6B,UAAU,GAAGD,KAAK,GAAG,CAAzB;AACA,MAAIE,SAAJ,EAAeC,eAAf;AACA,MAAIC,SAAS,GAAI,KAAK5C,OAAL,CAAa4C,SAAb,KAAyB,KAA1C;AAEA,OAAK1B,OAAL,CAAa2B,IAAb,GAAkBJ,UAAlB,CAPmE,CASnE;;AACA,MAAIpC,IAAI,CAACyC,QAAL,CAAc,MAAd,EAAsBN,KAAtB,EAA6BC,UAA7B,KAA4C,UAAhD,EAA4D;AAC1D,UAAM,IAAIrB,KAAJ,CAAU,6BAAV,CAAN;AACD,GAZkE,CAcnE;AACA;;;AACA,MAAIf,IAAI,CAACiC,QAAL,CAAcG,UAAd,KAA6B,MAAjC,EAAyC;AACvC,SAAKM,WAAL,GAAmB,KAAnB;AAED,GAHD,MAGO,IAAI1C,IAAI,CAACiC,QAAL,CAAcG,UAAd,KAA6B,MAAjC,EAAyC;AAC9C,SAAKM,WAAL,GAAmB,IAAnB;AAED,GAHM,MAGA;AACL,UAAM,IAAI3B,KAAJ,CAAU,4DAA2DqB,UAA3D,GAAuE,eAAvE,GAAuFpC,IAAI,CAACoC,UAAD,CAAJ,CAAiBK,QAAjB,CAA0B,EAA1B,EAA8BE,WAA9B,EAAvF,GAAmI3C,IAAI,CAACoC,UAAU,GAAG,CAAd,CAAJ,CAAqBK,QAArB,CAA8B,EAA9B,EAAkCE,WAAlC,EAAnI,GAAmL,GAA7L,CAAN;AACD;;AAEDnD,EAAAA,KAAK,CAAC,YAAD,EAAc,KAAKkD,WAAnB,CAAL,CA1BmE,CA4BnE;;AACA,MAAI1C,IAAI,CAACiC,QAAL,CAAcG,UAAU,GAAG,CAA3B,EAA8B,KAAKM,WAAnC,KAAmD,MAAvD,EAA+D;AAC7D,QAAIE,QAAQ,GAAI,KAAKF,WAAN,GAAqB,QAArB,GAAgC,QAA/C;AACA,UAAM,IAAI3B,KAAJ,CAAU,iCAA+B6B,QAA/B,GAAwC,aAAxC,IAAuDR,UAAU,GAAG,CAApE,IAAuE,eAAvE,GAAuFpC,IAAI,CAACoC,UAAU,GAAG,CAAd,CAAJ,CAAqBK,QAArB,CAA8B,EAA9B,EAAkCE,WAAlC,EAAvF,GAAuI3C,IAAI,CAACoC,UAAU,GAAG,CAAd,CAAJ,CAAqBK,QAArB,CAA8B,EAA9B,EAAkCE,WAAlC,EAAvI,GAAuL,GAAjM,CAAN;AACD;AAED;AAEA;AACA;;;AACAN,EAAAA,SAAS,GAAGD,UAAU,GAAGpC,IAAI,CAAC6C,OAAL,CAAaT,UAAU,GAAG,CAA1B,EAA6B,KAAKM,WAAlC,CAAzB;AACA,OAAK7B,OAAL,CAAaiC,IAAb,GAAkBT,SAAlB;AAEAC,EAAAA,eAAe,GAAGtC,IAAI,CAACiC,QAAL,CAAcI,SAAd,EAAyB,KAAKK,WAA9B,CAAlB;;AACA,MAAI,KAAK/C,OAAL,CAAaoD,cAAjB,EAAiC;AAC/BT,IAAAA,eAAe,GAACU,IAAI,CAACC,GAAL,CAASX,eAAT,EAA0B,KAAK3C,OAAL,CAAaoD,cAAvC,CAAhB;AACD;;AAEDvD,EAAAA,KAAK,CAAC,iBAAD,EAAmB6C,SAAnB,EAA8B,kBAA9B,EAAkDC,eAAlD,CAAL,CA9CmE,CAgDnE;AACA;;AACA,OAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,eAApB,EAAqCY,CAAC,EAAtC,EAA0C;AACxC,QAAIC,SAAS,GAAG,KAAKC,gBAAL,CAAsBpD,IAAtB,EAA6BqC,SAAS,GAAG,CAAZ,GAAiBa,CAAC,GAAG,EAAlD,EAAwDd,UAAxD,EAAoE,KAAKM,WAAzE,EAAsFhD,SAAS,CAAC2D,IAAV,CAAe5C,IAArG,CAAhB;;AACA,QAAI,CAAC0C,SAAL,EAAgB;AACd;AACD;;AAED,QAAIA,SAAS,CAACG,KAAV,KAAkB,MAAlB,IAA4Bf,SAAhC,EAA2C;AACzC;AACD;;AAEDhC,IAAAA,QAAQ,CAACV,KAAT,CAAesD,SAAS,CAACI,OAAzB,IAAoCJ,SAAS,CAACK,KAA9C;AACD;;AAEDhE,EAAAA,KAAK,CAAC,aAAD,EAAgBe,QAAQ,CAACV,KAAzB,CAAL;AAEA;AAEA;AACA;;AACA,MAAI4D,aAAa,GAAGzD,IAAI,CAAC6C,OAAL,CAAaR,SAAS,GAAG,CAAZ,GAAiBC,eAAe,GAAG,EAAhD,EAAqD,KAAKI,WAA1D,CAApB;;AACA,MAAIe,aAAa,IAAI,UAArB,EAAiC;AAC/BpB,IAAAA,SAAS,GAAGD,UAAU,GAAGqB,aAAzB;AACA,SAAK5C,OAAL,CAAa6C,IAAb,GAAkBrB,SAAlB;AACAC,IAAAA,eAAe,GAAGtC,IAAI,CAACiC,QAAL,CAAcI,SAAd,EAAyB,KAAKK,WAA9B,CAAlB;;AACA,QAAI,KAAK/C,OAAL,CAAagE,cAAjB,EAAiC;AAC/BrB,MAAAA,eAAe,GAACU,IAAI,CAACC,GAAL,CAASX,eAAT,EAA0B,KAAK3C,OAAL,CAAagE,cAAvC,CAAhB;AACD;;AAEDnE,IAAAA,KAAK,CAAC,iBAAD,EAAmB6C,SAAnB,EAA8B,kBAA9B,EAAkDC,eAAlD,CAAL,CAR+B,CAU/B;AACA;;AACA,SAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,eAApB,EAAqCY,CAAC,EAAtC,EAA0C;AACxC,UAAIC,SAAS,GAAG,KAAKC,gBAAL,CAAsBpD,IAAtB,EAA6BqC,SAAS,GAAG,CAAZ,GAAiBa,CAAC,GAAG,EAAlD,EAAwDd,UAAxD,EAAoE,KAAKM,WAAzE,EAAsFhD,SAAS,CAAC2D,IAAV,CAAe5C,IAArG,CAAhB;;AACA,UAAI,CAAC0C,SAAL,EAAgB;AACd;AACD;;AAED,UAAIA,SAAS,CAACG,KAAV,KAAkB,MAAlB,IAA4Bf,SAAhC,EAA2C;AACzC;AACD;;AAEDhC,MAAAA,QAAQ,CAACC,SAAT,CAAmB2C,SAAS,CAACI,OAA7B,IAAwCJ,SAAS,CAACK,KAAlD;AACD;;AAED,QAAI,KAAK7D,OAAL,CAAaiE,kBAAjB,EAAqC;AACnC,UAAIC,eAAe,GAACtD,QAAQ,CAACC,SAAT,CAAmBd,SAAS,CAAC2D,IAAV,CAAe5C,IAAf,CAAoB,MAApB,CAAnB,CAApB;;AACA,UAAIoD,eAAJ,EAAqB;AACnBrE,QAAAA,KAAK,CAAC,iCAAD,EAAmC,KAAKqB,OAAL,CAAa2B,IAAhD,CAAL;AAEAjC,QAAAA,QAAQ,CAACC,SAAT,CAAmBd,SAAS,CAAC2D,IAAV,CAAe5C,IAAf,CAAoB,MAApB,CAAnB,KAAiD,KAAKI,OAAL,CAAa2B,IAA9D;AACD;AACF;;AAEDhD,IAAAA,KAAK,CAAC,aAAD,EAAgBe,QAAQ,CAACC,SAAzB,CAAL;AACD;AAED;AAEA;AACA;;;AACA,MAAID,QAAQ,CAACV,KAAT,CAAeH,SAAS,CAAC2D,IAAV,CAAe5C,IAAf,CAAoB,MAApB,CAAf,CAAJ,EAAiD;AAE/C4B,IAAAA,SAAS,GAAGD,UAAU,GAAG7B,QAAQ,CAACV,KAAT,CAAeH,SAAS,CAAC2D,IAAV,CAAe5C,IAAf,CAAoB,MAApB,CAAf,CAAzB;AACA,SAAKI,OAAL,CAAaiD,IAAb,GAAkBzB,SAAlB;AAEAC,IAAAA,eAAe,GAAGtC,IAAI,CAACiC,QAAL,CAAcI,SAAd,EAAyB,KAAKK,WAA9B,CAAlB;;AACA,QAAI,KAAK/C,OAAL,CAAaoE,UAAjB,EAA6B;AAC3BzB,MAAAA,eAAe,GAACU,IAAI,CAACC,GAAL,CAASX,eAAT,EAA0B,KAAK3C,OAAL,CAAaoE,UAAvC,CAAhB;AACD;;AAEDvE,IAAAA,KAAK,CAAC,qBAAD,EAAuB6C,SAAvB,EAAkC,kBAAlC,EAAsDC,eAAtD,CAAL,CAV+C,CAY/C;AACA;;AACA,SAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,eAApB,EAAqCY,CAAC,EAAtC,EAA0C;AACxC,UAAIC,SAAS,GAAG,KAAKC,gBAAL,CAAsBpD,IAAtB,EAA6BqC,SAAS,GAAG,CAAZ,GAAiBa,CAAC,GAAG,EAAlD,EAAwDd,UAAxD,EAAoE,KAAKM,WAAzE,EAAsFhD,SAAS,CAAC2D,IAAV,CAAe5C,IAArG,CAAhB;;AACA,UAAI,CAAC0C,SAAL,EAAgB;AACd;AACD;;AAED,UAAIA,SAAS,CAACG,KAAV,KAAkB,MAAlB,IAA4Bf,SAAhC,EAA2C;AACzC;AACD;;AAEDhC,MAAAA,QAAQ,CAACE,IAAT,CAAc0C,SAAS,CAACI,OAAxB,IAAmCJ,SAAS,CAACK,KAA7C;AACD;;AAEDhE,IAAAA,KAAK,CAAC,iBAAD,EAAmBe,QAAQ,CAACE,IAA5B,CAAL;AACD;AAED;AAEA;AACA;;;AACA,MAAIF,QAAQ,CAACV,KAAT,CAAeH,SAAS,CAAC2D,IAAV,CAAe5C,IAAf,CAAoB,MAApB,CAAf,CAAJ,EAAiD;AAE/C4B,IAAAA,SAAS,GAAGD,UAAU,GAAG7B,QAAQ,CAACV,KAAT,CAAeH,SAAS,CAAC2D,IAAV,CAAe5C,IAAf,CAAoB,MAApB,CAAf,CAAzB;AACA,SAAKI,OAAL,CAAaH,GAAb,GAAiB2B,SAAjB;AAEAC,IAAAA,eAAe,GAAGtC,IAAI,CAACiC,QAAL,CAAcI,SAAd,EAAyB,KAAKK,WAA9B,CAAlB;;AACA,QAAI,KAAK/C,OAAL,CAAaqE,aAAjB,EAAgC;AAC9B1B,MAAAA,eAAe,GAACU,IAAI,CAACC,GAAL,CAASX,eAAT,EAA0B,KAAK3C,OAAL,CAAaqE,aAAvC,CAAhB;AACD;;AAEDxE,IAAAA,KAAK,CAAC,oBAAD,EAAuB6C,SAAvB,EAAkC,kBAAlC,EAAsDC,eAAtD,CAAL,CAV+C,CAY/C;AACA;;AACA,SAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,eAApB,EAAqCY,CAAC,EAAtC,EAA0C;AACxC,UAAIC,SAAS,GAAG,KAAKC,gBAAL,CAAsBpD,IAAtB,EAA6BqC,SAAS,GAAG,CAAZ,GAAiBa,CAAC,GAAG,EAAlD,EAAwDd,UAAxD,EAAoE,KAAKM,WAAzE,EAAsFhD,SAAS,CAAC2D,IAAV,CAAe3C,GAArG,CAAhB;;AACA,UAAI,CAACyC,SAAL,EAAgB;AACd;AACD;;AAED,UAAIA,SAAS,CAACG,KAAV,KAAkB,MAAlB,IAA4Bf,SAAhC,EAA2C;AACzC;AACD;;AAEDhC,MAAAA,QAAQ,CAACG,GAAT,CAAayC,SAAS,CAACI,OAAvB,IAAkCJ,SAAS,CAACK,KAA5C;AACD;;AAEDhE,IAAAA,KAAK,CAAC,gBAAD,EAAkBe,QAAQ,CAACG,GAA3B,CAAL;AACA;AAEF;AAEA;AACA;;;AACA,MAAIH,QAAQ,CAACE,IAAT,CAAcf,SAAS,CAAC2D,IAAV,CAAe5C,IAAf,CAAoB,MAApB,CAAd,CAAJ,EAAgD;AAE9C4B,IAAAA,SAAS,GAAGD,UAAU,GAAG7B,QAAQ,CAACE,IAAT,CAAcf,SAAS,CAAC2D,IAAV,CAAe5C,IAAf,CAAoB,MAApB,CAAd,CAAzB;AACA,SAAKI,OAAL,CAAaF,gBAAb,GAA8B0B,SAA9B;AAEAC,IAAAA,eAAe,GAAGtC,IAAI,CAACiC,QAAL,CAAcI,SAAd,EAAyB,KAAKK,WAA9B,CAAlB;;AACA,QAAI,KAAK/C,OAAL,CAAasE,0BAAjB,EAA6C;AAC3C3B,MAAAA,eAAe,GAACU,IAAI,CAACC,GAAL,CAASX,eAAT,EAA0B,KAAK3C,OAAL,CAAasE,0BAAvC,CAAhB;AACD;;AAEDzE,IAAAA,KAAK,CAAC,iCAAD,EAAoC6C,SAApC,EAA+C,kBAA/C,EAAmEC,eAAnE,CAAL,CAV8C,CAY9C;AACA;;AACA,SAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,eAApB,EAAqCY,CAAC,EAAtC,EAA0C;AACxC,UAAIC,SAAS,GAAG,KAAKC,gBAAL,CAAsBpD,IAAtB,EAA6BqC,SAAS,GAAG,CAAZ,GAAiBa,CAAC,GAAG,EAAlD,EAAwDd,UAAxD,EAAoE,KAAKM,WAAzE,EAAsFhD,SAAS,CAAC2D,IAAV,CAAe5C,IAArG,CAAhB;;AACA,UAAI,CAAC0C,SAAL,EAAgB;AACd;AACD;;AAED,UAAIA,SAAS,CAACG,KAAV,KAAkB,MAAlB,IAA4Bf,SAAhC,EAA2C;AACzC;AACD;;AAEDhC,MAAAA,QAAQ,CAACI,gBAAT,CAA0BwC,SAAS,CAACI,OAApC,IAA+CJ,SAAS,CAACK,KAAzD;AACF;;AAEAhE,IAAAA,KAAK,CAAC,6BAAD,EAA+Be,QAAQ,CAACG,GAAxC,CAAL;AACD;AAED;AAEA;AACA;AACA;;;AACA,MAAI,OAAOH,QAAQ,CAACE,IAAT,CAAcf,SAAS,CAAC2D,IAAV,CAAe5C,IAAf,CAAoB,MAApB,CAAd,CAAP,IAAqD,WAAzD,EAAsE;AAEpE,QAAIyD,IAAJ,CAFoE,CAGpE;;AACA,QAAI3D,QAAQ,CAACE,IAAT,CAAcf,SAAS,CAAC2D,IAAV,CAAe5C,IAAf,CAAoB,MAApB,CAAd,EAA2C0D,SAA3C,CAAqD,CAArD,EAAwD,CAAxD,MAA+D,eAA/D,IAAkF5D,QAAQ,CAACE,IAAT,CAAcf,SAAS,CAAC2D,IAAV,CAAe5C,IAAf,CAAoB,MAApB,CAAd,EAA2C0D,SAA3C,CAAqD,CAArD,EAAwD,CAAxD,MAA+D,eAArJ,EAAsK;AACpKD,MAAAA,IAAI,GAAC,SAAL;AAED,KAHD,MAGO,IAAI3D,QAAQ,CAACE,IAAT,CAAcf,SAAS,CAAC2D,IAAV,CAAe5C,IAAf,CAAoB,MAApB,CAAd,EAA2C0D,SAA3C,CAAqD,CAArD,EAAwD,CAAxD,MAA+D,eAAnE,EAAoF;AACzFD,MAAAA,IAAI,GAAC,MAAL;AAED,KAHM,MAGA,IAAI3D,QAAQ,CAACE,IAAT,CAAcf,SAAS,CAAC2D,IAAV,CAAe5C,IAAf,CAAoB,MAApB,CAAd,EAA2C0D,SAA3C,CAAqD,CAArD,EAAwD,CAAxD,MAA+D,mBAAnE,EAAwF;AAC7FD,MAAAA,IAAI,GAAC,OAAL;AAED,KAHM,MAGA,IAAI3D,QAAQ,CAACE,IAAT,CAAcf,SAAS,CAAC2D,IAAV,CAAe5C,IAAf,CAAoB,MAApB,CAAd,EAA2C0D,SAA3C,CAAqD,CAArD,EAAwD,CAAxD,MAA+D,UAAnE,EAA+E;AACpFD,MAAAA,IAAI,GAAC,UAAL;AAED,KAHM,MAGA,IAAI3D,QAAQ,CAACE,IAAT,CAAcf,SAAS,CAAC2D,IAAV,CAAe5C,IAAf,CAAoB,MAApB,CAAd,EAA2C0D,SAA3C,CAAqD,CAArD,EAAwD,CAAxD,MAA+D,WAAnE,EAAgF;AACrFD,MAAAA,IAAI,GAAC,WAAL;AAED,KAHM,MAGA,IAAI3D,QAAQ,CAACE,IAAT,CAAcf,SAAS,CAAC2D,IAAV,CAAe5C,IAAf,CAAoB,MAApB,CAAd,EAA2C0D,SAA3C,CAAqD,CAArD,EAAwD,CAAxD,MAA+D,OAAnE,EAA4E;AACjFD,MAAAA,IAAI,GAAC,OAAL;AACD;;AAGD1E,IAAAA,KAAK,CAAC,0BAAD,EAA6B6C,SAA7B,EAAwC,OAAxC,EAAiD6B,IAAjD,CAAL;;AAEA,QAAIA,IAAJ,EAAU;AACR,UAAIE,iBAAiB,GAAGhF,OAAO,CAAC,kBAAgB8E,IAAjB,CAAP,CAA8BE,iBAAtD;;AAEA7D,MAAAA,QAAQ,CAACK,SAAT,GAAqBwD,iBAAiB,CAACC,IAAlB,CAAuB,IAAvB,EAA6BrE,IAA7B,EAAmC,KAAKsE,eAAxC,EAAyDlC,UAAzD,CAArB;AAED,KALD,MAKO;AACL;AACA;AACA;AACC7B,MAAAA,QAAQ,CAACK,SAAT,CAAmB,OAAnB,IAA8B,4FAA9B;AACF;;AAEDpB,IAAAA,KAAK,CAAC,sBAAD,EAAwBe,QAAQ,CAACK,SAAjC,CAAL;AACD;AACF,CA9PD;;AAgQAlB,SAAS,CAAC2B,SAAV,CAAoB+B,gBAApB,GAAuC,UAAUpD,IAAV,EAAgBuE,WAAhB,EAA6BnC,UAA7B,EAAyCM,WAAzC,EAAsDoB,IAAtD,EAA4D;AAEjG,MAAIU,KAAK,GAAG;AACVC,IAAAA,GAAG,EAAGzE,IAAI,CAAC0E,KAAL,CAAWH,WAAX,EAAwBA,WAAW,GAAG,CAAtC,CADI;AAEVjB,IAAAA,KAAK,EAAG,IAFE;AAGVC,IAAAA,OAAO,EAAG,IAHA;AAIVoB,IAAAA,MAAM,EAAG3E,IAAI,CAACiC,QAAL,CAAcsC,WAAW,GAAG,CAA5B,EAA+B7B,WAA/B,CAJC;AAKVkC,IAAAA,UAAU,EAAG5E,IAAI,CAAC6C,OAAL,CAAa0B,WAAW,GAAG,CAA3B,EAA8B7B,WAA9B,CALH;AAMVmC,IAAAA,WAAW,EAAE,IANH;AAOVrB,IAAAA,KAAK,EAAG;AAPE,GAAZ;AAUAgB,EAAAA,KAAK,CAAClB,KAAN,GAAckB,KAAK,CAACC,GAAN,CAAUxC,QAAV,CAAmB,CAAnB,EAAsBS,WAAtB,CAAd,CAZiG,CAcjG;;AACA,MAAIoB,IAAI,IAAIA,IAAI,CAACU,KAAK,CAAClB,KAAP,CAAZ,IAA6B,OAAOQ,IAAI,CAACU,KAAK,CAAClB,KAAP,CAAX,IAA4B,UAA7D,EAAyE;AACvEkB,IAAAA,KAAK,CAACjB,OAAN,GAAgBO,IAAI,CAACU,KAAK,CAAClB,KAAP,CAAJ,CAAkBe,IAAlB,CAAuB,IAAvB,EAA6BG,KAA7B,CAAhB;;AACA,QAAI,CAACA,KAAK,CAACjB,OAAX,EAAoB;AAClB,aAAO,KAAP;AACD,KAJsE,CAMzE;;AACC,GAPD,MAOO,IAAIO,IAAI,IAAIA,IAAI,CAACU,KAAK,CAAClB,KAAP,CAAhB,EAA+B;AACpCkB,IAAAA,KAAK,CAACjB,OAAN,GAAgBO,IAAI,CAACU,KAAK,CAAClB,KAAP,CAApB;;AACA,QAAIkB,KAAK,CAACjB,OAAN,KAAgBjD,SAApB,EAA+B;AAC7B,aAAO,KAAP;AACD,KAJmC,CAMtC;;AACC,GAPM,MAOA;AACL,WAAO,KAAP;AACD;;AAED,UAAQkE,KAAK,CAACG,MAAd;AAEE,SAAK,MAAL;AAAa;AACXH,MAAAA,KAAK,CAACK,WAAN,GAAqBL,KAAK,CAACI,UAAN,IAAoB,CAArB,GAA0BL,WAAW,GAAG,CAAxC,GAA4CvE,IAAI,CAAC6C,OAAL,CAAa0B,WAAW,GAAG,CAA3B,EAA8B7B,WAA9B,IAA6CN,UAA7G;;AACA,WAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,KAAK,CAACI,UAA1B,EAAsC1B,CAAC,EAAvC,EACEsB,KAAK,CAAChB,KAAN,CAAYsB,IAAZ,CAAiB9E,IAAI,CAAC+E,OAAL,CAAaP,KAAK,CAACK,WAAN,GAAoB3B,CAAjC,CAAjB;;AACF;;AAEF,SAAK,MAAL;AAAa;AACXsB,MAAAA,KAAK,CAACK,WAAN,GAAqBL,KAAK,CAACI,UAAN,IAAoB,CAArB,GAA0BL,WAAW,GAAG,CAAxC,GAA4CvE,IAAI,CAAC6C,OAAL,CAAa0B,WAAW,GAAG,CAA3B,EAA8B7B,WAA9B,IAA6CN,UAA7G;AACAoC,MAAAA,KAAK,CAAChB,KAAN,GAAcxD,IAAI,CAACmE,SAAL,CAAeK,KAAK,CAACK,WAArB,EAAkCL,KAAK,CAACI,UAAxC,CAAd;AACA,UAAIJ,KAAK,CAAChB,KAAN,CAAYgB,KAAK,CAAChB,KAAN,CAAYzB,MAAZ,GAAqB,CAAjC,MAAwC,QAA5C,EAAsD;AACpDyC,QAAAA,KAAK,CAAChB,KAAN,GAAcgB,KAAK,CAAChB,KAAN,CAAYwB,SAAZ,CAAsB,CAAtB,EAAyBR,KAAK,CAAChB,KAAN,CAAYzB,MAAZ,GAAqB,CAA9C,CAAd;AACF;;AAEF,SAAK,MAAL;AAAa;AACXyC,MAAAA,KAAK,CAACK,WAAN,GAAqBL,KAAK,CAACI,UAAN,IAAoB,CAArB,GAA0BL,WAAW,GAAG,CAAxC,GAA4CvE,IAAI,CAAC6C,OAAL,CAAa0B,WAAW,GAAG,CAA3B,EAA8B7B,WAA9B,IAA6CN,UAA7G;;AACA,WAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,KAAK,CAACI,UAA1B,EAAsC1B,CAAC,EAAvC,EACEsB,KAAK,CAAChB,KAAN,CAAYsB,IAAZ,CAAiB9E,IAAI,CAACiC,QAAL,CAAcuC,KAAK,CAACK,WAAN,GAAoB3B,CAAC,GAAG,CAAtC,EAAyCR,WAAzC,CAAjB;;AACF;;AAEF,SAAK,MAAL;AAAa;AACX8B,MAAAA,KAAK,CAACK,WAAN,GAAqBL,KAAK,CAACI,UAAN,IAAoB,CAArB,GAA0BL,WAAW,GAAG,CAAxC,GAA4CvE,IAAI,CAAC6C,OAAL,CAAa0B,WAAW,GAAG,CAA3B,EAA8B7B,WAA9B,IAA6CN,UAA7G;;AACA,WAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,KAAK,CAACI,UAA1B,EAAsC1B,CAAC,EAAvC,EACEsB,KAAK,CAAChB,KAAN,CAAYsB,IAAZ,CAAiB9E,IAAI,CAAC6C,OAAL,CAAa2B,KAAK,CAACK,WAAN,GAAoB3B,CAAC,GAAG,CAArC,EAAwCR,WAAxC,CAAjB;;AACF;;AAEF,SAAK,MAAL;AAAa;AACX8B,MAAAA,KAAK,CAACK,WAAN,GAAoB7E,IAAI,CAAC6C,OAAL,CAAa0B,WAAW,GAAG,CAA3B,EAA8B7B,WAA9B,IAA6CN,UAAjE;;AACA,WAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,KAAK,CAACI,UAA1B,EAAsC1B,CAAC,EAAvC,EACEsB,KAAK,CAAChB,KAAN,CAAYsB,IAAZ,CAAiB9E,IAAI,CAAC6C,OAAL,CAAa2B,KAAK,CAACK,WAAN,GAAoB3B,CAAC,GAAG,CAArC,EAAwCR,WAAxC,IAAuD1C,IAAI,CAAC6C,OAAL,CAAa2B,KAAK,CAACK,WAAN,GAAoB3B,CAAC,GAAG,CAAxB,GAA4B,CAAzC,EAA4CR,WAA5C,CAAxE;;AACF;;AAEF,SAAK,MAAL;AAAa;AACX8B,MAAAA,KAAK,CAACK,WAAN,GAAqBL,KAAK,CAACI,UAAN,IAAoB,CAArB,GAA0BL,WAAW,GAAG,CAAxC,GAA4CvE,IAAI,CAAC6C,OAAL,CAAa0B,WAAW,GAAG,CAA3B,EAA8B7B,WAA9B,IAA6CN,UAA7G;;AACA,WAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,KAAK,CAACI,UAA1B,EAAsC1B,CAAC,EAAvC,EACEsB,KAAK,CAAChB,KAAN,CAAYsB,IAAZ,CAAiB9E,IAAI,CAACiF,aAAL,CAAmBT,KAAK,CAACK,WAAN,GAAoB3B,CAAvC,CAAjB;;AACF;;AAEF,SAAK,MAAL;AAAa;AACXsB,MAAAA,KAAK,CAACK,WAAN,GAAqBL,KAAK,CAACI,UAAN,IAAoB,CAArB,GAA0BL,WAAW,GAAG,CAAxC,GAA4CvE,IAAI,CAAC6C,OAAL,CAAa0B,WAAW,GAAG,CAA3B,EAA8B7B,WAA9B,IAA6CN,UAA7G;AACAoC,MAAAA,KAAK,CAAChB,KAAN,CAAYsB,IAAZ,CAAiB9E,IAAI,CAAC0E,KAAL,CAAWF,KAAK,CAACK,WAAjB,EAA8BL,KAAK,CAACK,WAAN,GAAoBL,KAAK,CAACI,UAAxD,CAAjB;AACA;;AAEF,SAAK,MAAL;AAAa;AACXJ,MAAAA,KAAK,CAACK,WAAN,GAAqBL,KAAK,CAACI,UAAN,IAAoB,CAArB,GAA0BL,WAAW,GAAG,CAAxC,GAA4CvE,IAAI,CAAC6C,OAAL,CAAa0B,WAAW,GAAG,CAA3B,EAA8B7B,WAA9B,IAA6CN,UAA7G;;AACA,WAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,KAAK,CAACI,UAA1B,EAAsC1B,CAAC,EAAvC,EACEsB,KAAK,CAAChB,KAAN,CAAYsB,IAAZ,CAAiB9E,IAAI,CAACkF,cAAL,CAAoBV,KAAK,CAACK,WAAN,GAAoB3B,CAAC,GAAG,CAA5C,EAA+CR,WAA/C,CAAjB;;AACF;;AAEF,SAAK,MAAL;AAAa;AACX8B,MAAAA,KAAK,CAACK,WAAN,GAAqBL,KAAK,CAACI,UAAN,IAAoB,CAArB,GAA0BL,WAAW,GAAG,CAAxC,GAA4CvE,IAAI,CAAC6C,OAAL,CAAa0B,WAAW,GAAG,CAA3B,EAA8B7B,WAA9B,IAA6CN,UAA7G;;AACA,WAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,KAAK,CAACI,UAA1B,EAAsC1B,CAAC,EAAvC,EACEsB,KAAK,CAAChB,KAAN,CAAYsB,IAAZ,CAAiB9E,IAAI,CAACmF,aAAL,CAAmBX,KAAK,CAACK,WAAN,GAAoB3B,CAAC,GAAG,CAA3C,EAA8CR,WAA9C,CAAjB;;AACF;;AAEF,SAAK,MAAL;AAAa;AACX8B,MAAAA,KAAK,CAACK,WAAN,GAAoB7E,IAAI,CAAC6C,OAAL,CAAa0B,WAAW,GAAG,CAA3B,EAA8B7B,WAA9B,IAA6CN,UAAjE;;AACA,WAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,KAAK,CAACI,UAA1B,EAAsC1B,CAAC,EAAvC,EACEsB,KAAK,CAAChB,KAAN,CAAYsB,IAAZ,CAAiB9E,IAAI,CAACmF,aAAL,CAAmBX,KAAK,CAACK,WAAN,GAAoB3B,CAAC,GAAG,CAA3C,EAA8CR,WAA9C,IAA6D1C,IAAI,CAACmF,aAAL,CAAmBX,KAAK,CAACK,WAAN,GAAoB3B,CAAC,GAAG,CAAxB,GAA4B,CAA/C,EAAkDR,WAAlD,CAA9E;;AACF;;AAEF;AACE,aAAO,KAAP;AA/DJ,GAjCiG,CAoGjG;;;AACA,MAAI8B,KAAK,CAACjB,OAAN,KAAkB,WAAtB,EAAmC;AACjC,SAAK1C,OAAL,CAAayD,eAAb,GAA+BE,KAAK,CAACK,WAArC;AACD,GAvGgG,CAyGjG;;;AACA,MAAIL,KAAK,CAAChB,KAAN,CAAYzB,MAAZ,IAAsB,CAA1B,EAA6B;AAC3ByC,IAAAA,KAAK,CAAChB,KAAN,GAAcgB,KAAK,CAAChB,KAAN,CAAY,CAAZ,CAAd;AACD;;AAED,SAAOgB,KAAP;AACD,CA/GD;AAiHA;;;;;;AAIA9E,SAAS,CAAC2D,IAAV,GAAiB;AAEf;AACA5C,EAAAA,IAAI,EAAG;AAEL,YAAS,cAFJ;AAGL,YAAS,gBAHJ;AAIL,YAAS,oBAJJ;AAKL,YAAS,aALJ;AAML,YAAS,gBANJ;AAOL,YAAS,YAPJ;AAQL,YAAS,aARJ;AASL,YAAS,eATJ;AAUL,YAAS,aAVJ;AAWL,YAAS,2BAXJ;AAYL,YAAS,cAZJ;AAaL,YAAS,WAbJ;AAcL,YAAS,YAdJ;AAeL,YAAS,WAfJ;AAgBL,YAAS,cAhBJ;AAiBL,YAAS,kBAjBJ;AAkBL,YAAS,MAlBJ;AAmBL,YAAS,OAnBJ;AAoBL,YAAS,cApBJ;AAqBL,YAAS,aArBJ;AAsBL,YAAS,iBAtBJ;AAuBL,YAAS,cAvBJ;AAwBL,YAAS,iBAxBJ;AAyBL,YAAS,gBAzBJ;AA0BL,YAAS,gBA1BJ;AA2BL,YAAS,aA3BJ;AA4BL,YAAS,aA5BJ;AA6BL,YAAS,qBA7BJ;AA8BL,YAAS,UA9BJ;AA+BL,YAAS,WA/BJ;AAgCL,YAAS,WAhCJ;AAiCL,YAAS,aAjCJ;AAkCL,YAAS,gBAlCJ;AAmCL,YAAS,kBAnCJ;AAoCL,YAAS,mBApCJ;AAqCL,YAAS,WArCJ;AAsCL,YAAS,WAtCJ;AAuCL,YAAS,gBAvCJ;AAwCL,YAAS,YAxCJ;AAyCL,YAAS,mBAzCJ;AA0CL,YAAS,kBA1CJ;AA2CL,YAAS,UA3CJ;AA4CL,YAAS,YA5CJ;AA6CL,YAAS,QA7CJ;AA8CL,YAAS,cA9CJ;AA+CL,YAAS,WA/CJ;AAgDL,YAAS,YAhDJ;AAiDL,YAAS,uBAjDJ;AAkDL,YAAS,UAlDJ;AAmDL,YAAS,eAnDJ;AAoDL,YAAS,WApDJ;AAqDL,YAAS,YArDJ;AAsDL,YAAS,aAtDJ;AAuDL,YAAS,gBAvDJ;AAwDL,YAAS,aAxDJ;AAyDL,YAAS,cAzDJ;AA0DL,YAAS,wBA1DJ;AA2DL,YAAS,QA3DJ;AA4DL,YAAS,QA5DJ;AA6DL,YAAS,UA7DJ;AA8DL,YAAS,cA9DJ;AA+DL,YAAS,UA/DJ;AAgEL,YAAS,eAhEJ;AAiEL,YAAS,cAjEJ;AAkEL,YAAS,cAlEJ;AAmEL,YAAS,iBAnEJ;AAoEL,YAAS,iBApEJ;AAqEL,YAAS,eArEJ;AAsEL,YAAS,UAtEJ;AAuEL,YAAS,gBAvEJ;AAwEL,YAAS,gBAxEJ;AAyEL,YAAS,SAzEJ;AA0EL,YAAS,YA1EJ;AA2EL,YAAS,UA3EJ;AA4EL,YAAS,qBA5EJ;AA6EL,YAAS,aA7EJ;AA8EL,YAAS,YA9EJ;AA+EL,YAAS,eA/EJ;AAgFL,YAAS,aAhFJ;AAiFL,YAAS,YAjFJ;AAkFL,YAAS,QAlFJ;AAmFL,YAAS,mBAnFJ;AAoFL,YAAS,YApFJ;AAqFL,YAAS,YArFJ;AAsFL,YAAS,UAtFJ;AAuFL,YAAS,iBAvFJ;AAwFL,YAAS,iBAxFJ;AAyFL,YAAS,qBAzFJ;AA0FL,YAAS,wBA1FJ;AA2FL,YAAS,qBA3FJ;AA4FL,YAAS,aA5FJ;AA6FL,YAAS,cA7FJ;AA8FL,YAAS,cA9FJ;AA+FL,YAAS,mBA/FJ;AAgGL,YAAS,kBAhGJ;AAiGL,YAAS,kBAjGJ;AAkGL,YAAS,qBAlGJ;AAmGL,YAAS,gBAnGJ;AAoGL,YAAS,kBApGJ;AAqGL,YAAS,oBArGJ;AAsGL,YAAS,wBAtGJ;AAuGL,YAAS,mBAvGJ;AAwGL,YAAS,oBAxGJ;AAyGL,YAAS,QAzGJ;AA0GL,YAAS,YA1GJ;AA2GL,YAAS,YA3GJ;AA4GL,YAAS,eA5GJ;AA6GL,YAAS,SA7GJ;AA8GL,YAAS,UA9GJ;AA+GL,YAAS,gBA/GJ;AAgHL,YAAS,UAhHJ;AAiHL,YAAS,UAjHJ;AAkHL,YAAS,UAlHJ;AAmHL,YAAS,UAnHJ;AAoHL,YAAS,YApHJ;AAqHL,YAAS,WArHJ;AAsHL,YAAS,QAtHJ;AAuHL,YAAS,qBAvHJ;AAwHL,YAAS,aAxHJ;AAyHL,YAAS,cAzHJ;AA0HL,YAAS,UA1HJ;AA2HL,YAAS,WA3HJ;AA4HL,YAAS,cA5HJ;AA6HL,YAAS,SA7HJ;AA8HL,YAAS,WA9HJ;AA+HL,YAAS,cA/HJ;AAgIL,YAAS,cAhIJ;AAiIL,YAAS,WAjIJ;AAkIL,YAAS,cAlIJ;AAmIL,YAAS,YAnIJ;AAoIL,YAAS,YApIJ;AAqIL,YAAS,aArIJ;AAsIL,YAAS,YAtIJ;AAuIL,YAAS,aAvIJ;AAwIL,YAAS,gBAxIJ;AAyIL,YAAS,SAzIJ;AA0IL,YAAS,SA1IJ;AA2IL,YAAS,SA3IJ;AA4IL,YAAS,SA5IJ;AA6IL,YAAS,UA7IJ;AA8IL,YAAS,sBA9IJ;AA+IL,YAAS,yBA/IJ;AAgJL,YAAS,kBAhJJ;AAiJL,YAAS,cAjJJ;AAkJL,YAAS,eAlJJ;AAmJL,YAAS,MAnJJ;AAoJL,YAAS,eApJJ;AAqJL,YAAS,WArJJ;AAsJL,YAAS,eAtJJ;AAuJL,YAAS,kBAvJJ;AAwJL,YAAS,0BAxJJ;AAyJL,YAAS,YAzJJ;AA0JL,YAAS,qBA1JJ;AA2JL,YAAS,0BA3JJ;AA4JL,YAAS,iBA5JJ;AA6JL,YAAS,sBA7JJ;AA8JL,YAAS,qBA9JJ;AA+JL,YAAS,uBA/JJ;AAgKL,YAAS,uBAhKJ;AAiKL,YAAS,SAjKJ;AAkKL,YAAS,eAlKJ;AAmKL,YAAS,gBAnKJ;AAoKL,YAAS,SApKJ;AAqKL,YAAS,WArKJ;AAsKL,YAAS,uBAtKJ;AAuKL,YAAS,gBAvKJ;AAwKL,YAAS,eAxKJ;AAyKL,YAAS,UAzKJ;AA0KL,YAAS,mBA1KJ;AA2KL,YAAS,YA3KJ;AA4KL,YAAS,aA5KJ;AA6KL,YAAS,mBA7KJ;AA8KL,YAAS,eA9KJ;AA+KL,YAAS,YA/KJ;AAgLL,YAAS,YAhLJ;AAiLL,YAAS,YAjLJ;AAkLL,YAAS,kBAlLJ;AAmLL,YAAS,qBAnLJ;AAoLL,YAAS,oBApLJ;AAqLL,YAAS,iBArLJ;AAsLL,YAAS,qBAtLJ;AAuLL,YAAS,SAvLJ;AAwLL,YAAS,KAxLJ;AAyLL,YAAS,yBAzLJ;AA0LL,YAAS,WA1LJ;AA2LL,YAAS,gBA3LJ;AA4LL,YAAS,eA5LJ;AA6LL,YAAS,iBA7LJ;AA8LL,YAAS,2BA9LJ;AA+LL,YAAS,0BA/LJ;AAgML,YAAS,UAhMJ;AAiML,YAAS,qBAjMJ;AAkML,YAAS,qBAlMJ;AAmML,YAAS,eAnMJ;AAoML,YAAS,eApMJ;AAqML,YAAS,aArMJ;AAsML,YAAS,YAtMJ;AAuML,YAAS,aAvMJ;AAwML,YAAS,kBAxMJ;AAyML,YAAS,YAzMJ;AA0ML,YAAS,yBA1MJ;AA2ML,YAAS,wBA3MJ;AA4ML,YAAS,mBA5MJ;AA6ML,YAAS,eA7MJ;AA8ML,YAAS,iBA9MJ;AA+ML,YAAS,sBA/MJ;AAgNL,YAAS,kBAhNJ;AAiNL,YAAS,iBAjNJ;AAkNL,YAAS,cAlNJ;AAmNL,YAAS,aAnNJ;AAoNL,YAAS,OApNJ;AAqNL,YAAS,aArNJ;AAsNL,YAAS,aAtNJ;AAuNL,YAAS,0BAvNJ;AAwNL,YAAS,OAxNJ;AAyNL,YAAS,uBAzNJ;AA0NL,YAAS,uBA1NJ;AA2NL,YAAS,0BA3NJ;AA4NL,YAAS,aA5NJ;AA6NL,YAAS,wBA7NJ;AA8NL,YAAS,cA9NJ;AA+NL,YAAS,aA/NJ;AAgOL,YAAS,eAhOJ;AAiOL,YAAS,mBAjOJ;AAkOL,YAAS,eAlOJ;AAmOL,YAAS,cAnOJ;AAoOL,YAAS,WApOJ;AAqOL,YAAS,UArOJ;AAsOL,YAAS,SAtOJ;AAuOL,YAAS,WAvOJ;AAwOL,YAAS,aAxOJ;AAyOL,YAAS,YAzOJ;AA0OL,YAAS,oBA1OJ;AA2OL,YAAS,qBA3OJ;AA4OL,YAAS,gBA5OJ;AA6OL,YAAS,sBA7OJ;AA8OL,YAAS,wBA9OJ;AA+OL,YAAS,iBA/OJ;AAgPL,YAAS,SAhPJ;AAiPL,YAAS,WAjPJ;AAkPL,YAAS,UAlPJ;AAmPL,YAAS,YAnPJ;AAoPL,YAAS,WApPJ;AAqPL,YAAS,iBArPJ;AAsPL,YAAS,YAtPJ;AAuPL,YAAS,gBAvPJ;AAwPL,YAAS,iBAxPJ;AAyPL,YAAS,kBAzPJ;AA0PL,YAAS,eA1PJ;AA2PL,YAAS,aA3PJ;AA4PL,YAAS,0BA5PJ;AA6PL,YAAS,OA7PJ;AA8PL,YAAS,uBA9PJ;AA+PL,YAAS,uBA/PJ;AAgQL,YAAS,0BAhQJ;AAiQL,YAAS,aAjQJ;AAkQL,YAAS,wBAlQJ;AAmQL,YAAS,cAnQJ;AAoQL,YAAS,iBApQJ;AAqQL,YAAS,eArQJ;AAsQL,YAAS,mBAtQJ;AAuQL,YAAS,eAvQJ;AAwQL,YAAS,YAxQJ;AAyQL,YAAS,WAzQJ;AA0QL,YAAS,YA1QJ;AA2QL,YAAS,gBA3QJ;AA4QL,YAAS,cA5QJ;AA6QL,YAAS,cA7QJ;AA8QL,YAAS,kBA9QJ;AA+QL,YAAS,yBA/QJ;AAgRL,YAAS,kBAhRJ;AAiRL,YAAS,aAjRJ;AAkRL,YAAS,UAlRJ;AAmRL,YAAS,YAnRJ;AAoRL,YAAS,WApRJ;AAqRL,YAAS,0BArRJ;AAsRL,YAAS,sBAtRJ;AAuRL,YAAS,eAvRJ;AAwRL,YAAS,WAxRJ;AAyRL,YAAS,cAzRJ;AA0RL,YAAS,UA1RJ;AA2RL,YAAS,UA3RJ;AA4RL,YAAS,WA5RJ;AA6RL,YAAS,kBA7RJ;AA8RL,YAAS,cA9RJ;AA+RL,YAAS,YA/RJ;AAgSL,YAAS,OAhSJ;AAiSL,YAAS,gBAjSJ;AAkSL,YAAS,YAlSJ;AAmSL,YAAS,YAnSJ;AAoSL,YAAS,kBApSJ;AAqSL,YAAS,eArSJ;AAsSL,YAAS,iBAtSJ;AAuSL,YAAS,aAvSJ;AAwSL,YAAS,gBAxSJ;AAySL,YAAS,cAzSJ;AA0SL,YAAS,WA1SJ;AA2SL,YAAS,YA3SJ;AA4SL,YAAS,aA5SJ;AA6SL,YAAS,iBA7SJ;AA8SL,YAAS,kBA9SJ;AA+SL,YAAS,aA/SJ;AAgTL,YAAS,gBAhTJ;AAiTL,YAAS,aAjTJ;AAkTL,YAAS,gBAlTJ;AAmTL,YAAS,kBAnTJ;AAoTL,YAAS,kBApTJ;AAqTL,YAAS,gBArTJ;AAsTL,YAAS,wBAtTJ;AAuTL,YAAS,aAvTJ;AAwTL,YAAS,eAxTJ;AAyTL,YAAS,aAzTJ;AA0TL,YAAS,SA1TJ;AA2TL,YAAS,0BA3TJ;AA4TL,YAAS,YA5TJ;AA6TL,YAAS,oBA7TJ;AA8TL,YAAS,mBA9TJ;AA+TL,YAAS,sBA/TJ;AAgUL,YAAS,eAhUJ;AAiUL,YAAS,WAjUJ;AAkUL,YAAS,oBAlUJ;AAmUL,YAAS,qBAnUJ;AAoUL,YAAS,YApUJ;AAqUL,YAAS,kBArUJ;AAsUL,YAAS,kBAtUJ;AAuUL,YAAS,YAvUJ;AAwUL,YAAS,cAxUJ;AAyUL,YAAS,mBAzUJ;AA0UL,YAAS,iBA1UJ;AA2UL,YAAS,cA3UJ;AA4UL,YAAS,cA5UJ;AA6UL,YAAS,oBA7UJ;AA8UL,YAAS,oBA9UJ;AA+UL,YAAS,kBA/UJ;AAgVL,YAAS,kBAhVJ;AAiVL,YAAS,eAjVJ;AAkVL,YAAS,eAlVJ;AAmVL,YAAS,eAnVJ;AAoVL,YAAS,kBApVJ;AAqVL,YAAS,eArVJ;AAsVL,YAAS,mBAtVJ;AAuVL,YAAS,iBAvVJ;AAwVL,YAAS,qBAxVJ;AAyVL,YAAS,oBAzVJ;AA0VL,YAAS,aA1VJ;AA2VL,YAAS,kBA3VJ;AA4VL,YAAS,mBA5VJ;AA6VL,YAAS,aA7VJ;AA8VL,YAAS,gBA9VJ;AA+VL,YAAS,iBA/VJ;AAgWL,YAAS,sBAhWJ;AAiWL,YAAS,wBAjWJ;AAkWL,YAAS,wBAlWJ;AAmWL,YAAS,kBAnWJ;AAoWL,YAAS,iBApWJ;AAqWL,YAAS,oBArWJ;AAsWL,YAAS,qBAtWJ;AAuWL,YAAS,qBAvWJ;AAwWL,YAAS,YAxWJ;AAyWL,YAAS,aAzWJ;AA0WL,YAAS,kBA1WJ;AA2WL,YAAS,wBA3WJ;AA4WL,YAAS,mBA5WJ;AA6WL,YAAS,yBA7WJ;AA8WL,YAAS,uBA9WJ;AA+WL,YAAS,gBA/WJ;AAgXL,YAAS,iBAhXJ;AAiXL,YAAS,sBAjXJ;AAkXL,YAAS,uBAlXJ;AAmXL,YAAS,YAnXJ;AAoXL,YAAS,mBApXJ;AAqXL,YAAS,uBArXJ;AAsXL,YAAS,aAtXJ;AAuXL,YAAS,sBAvXJ;AAwXL,YAAS,uBAxXJ;AAyXL,YAAS,uBAzXJ;AA0XL,YAAS,kBA1XJ;AA2XL,YAAS,oBA3XJ;AA4XL,YAAS,kBA5XJ;AA6XL,YAAS,gBA7XJ;AA8XL,YAAS,gBA9XJ;AA+XL,YAAS,wBA/XJ;AAgYL,YAAS,2BAhYJ;AAiYL,YAAS,qBAjYJ;AAkYL,YAAS,uBAlYJ;AAmYL,YAAS,mBAnYJ;AAoYL,YAAS,iBApYJ;AAqYL,YAAS,gBArYJ;AAsYL,YAAS,uBAtYJ;AAuYL,YAAS,kBAvYJ;AAwYL,YAAS,qBAxYJ;AAyYL,YAAS,sBAzYJ;AA0YL,YAAS,sBA1YJ;AA2YL,YAAS,aA3YJ;AA4YL,YAAS,aA5YJ;AA6YL,YAAS,aA7YJ;AA8YL,YAAS,cA9YJ;AA+YL,YAAS,WA/YJ;AAgZL,YAAS,WAhZJ;AAiZL,YAAS,OAjZJ;AAkZL,YAAS,UAlZJ;AAmZL,YAAS,0BAnZJ;AAoZL,YAAS,yBApZJ;AAqZL,YAAS,yBArZJ;AAsZL,YAAS,aAtZJ;AAuZL,YAAS,0BAvZJ;AAwZL,YAAS,0BAxZJ;AAyZL,YAAS,wBAzZJ;AA0ZL,YAAS,oBA1ZJ;AA2ZL,YAAS,mBA3ZJ;AA4ZL,YAAS,kBA5ZJ;AA6ZL,YAAS,iBA7ZJ;AA8ZL,YAAS,SA9ZJ;AA+ZL,YAAS,cA/ZJ;AAgaL,YAAS,WAhaJ;AAiaL,YAAS,cAjaJ;AAkaL,YAAS,MAlaJ;AAmaL,YAAS,SAnaJ;AAoaL,YAAS,SApaJ;AAqaL,YAAS,WAraJ;AAsaL,YAAS,cAtaJ;AAuaL,YAAS,UAvaJ;AAwaL,YAAS,SAxaJ;AAyaL,YAAS,YAzaJ;AA0aL,YAAS,UA1aJ;AA2aL,YAAS,YA3aJ;AA4aL,YAAS,WA5aJ;AA6aL,YAAS,YA7aJ;AA8aL,YAAS;AA9aJ,GAHQ;AAqbf;AACAC,EAAAA,GAAG,EAAG;AAEJ,YAAS,cAFL;AAGJ,YAAS,gBAHL;AAIJ,YAAS,aAJL;AAKJ,YAAS,iBALL;AAMJ,YAAS,cANL;AAOJ,YAAS,gBAPL;AAQJ,YAAS,aARL;AASJ,YAAS,cATL;AAUJ,YAAS,eAVL;AAWJ,YAAS,WAXL;AAYJ,YAAS,gBAZL;AAaJ,YAAS,QAbL;AAcJ,YAAS,aAdL;AAeJ,YAAS,UAfL;AAgBJ,YAAS,aAhBL;AAiBJ,YAAS,UAjBL;AAkBJ,YAAS,oBAlBL;AAmBJ,YAAS,iBAnBL;AAoBJ,YAAS,aApBL;AAqBJ,YAAS,oBArBL;AAsBJ,YAAS,iBAtBL;AAuBJ,YAAS,qBAvBL;AAwBJ,YAAS,kBAxBL;AAyBJ,YAAS,mBAzBL;AA0BJ,YAAS,gBA1BL;AA2BJ,YAAS,oBA3BL;AA4BJ,YAAS,iBA5BL;AA6BJ,YAAS,qBA7BL;AA8BJ,YAAS,oBA9BL;AA+BJ,YAAS,cA/BL;AAgCJ,YAAS,iBAhCL;AAiCJ,YAAS;AAjCL;AAtbS,CAAjB","sourcesContent":["/*jslint node: true */\r\n\"use strict\";\r\n\r\nvar assert = require('assert');\r\nvar fs = require('fs');\r\nvar util = require('util');\r\nvar BufferExtender = require('./Buffer'); // bad idea\r\nvar debug = require('debug')('exif');\r\n\r\nvar DEFAULT_MAX_ENTRIES=128;\r\n\r\n/**\r\n * Represents an image with Exif information. When instantiating it you have to\r\n * provide an image and a callback function which is called once all metadata\r\n * is extracted from the image.\r\n *\r\n * Available options are:\r\n *  - image The image to get Exif data from can be either a filesystem path or\r\n *          a Buffer.\r\n *  - tiffOffsets  (boolean) an object named \"offsets\" is added to exifData \r\n *          and contains lot of offsets needed to get thumbnail and other things. \r\n *  - fixThumbnailOffset:  node-exif corrects the thumbnail offset in order to have an offset from the start of the buffer/file.\r\n *  - maxEntries: Specifies the maximum entries to be parsed\r\n *  - ifd0MaxEntries\r\n *  - ifd1MaxEntries\r\n *  - maxGpsEntries\r\n *  - maxInteroperabilityEntries\r\n *  - agfaMaxEntries \r\n *  - epsonMaxEntries\r\n *  - fujifilmMaxEntries\r\n *  - olympusMaxEntries\r\n *  - panasonicMaxEntries\r\n *  - sanyoMaxEntries\r\n *  - noPadding\r\n *\r\n * If you don't set the image field, you might call  exifImage.loadImage(image, callback) to get exif datas. \r\n *\r\n * @param options Configuration options as described above\r\n * @param callback Function to call when data is extracted or an error occurred\r\n * @return Nothing of importance, calls the specified callback function instead\r\n */\r\nfunction ExifImage (options, callback) {\r\n  if (!(this instanceof ExifImage)) {\r\n    if (typeof(options)===\"string\") {\r\n      options = {\r\n          image: options\r\n      }\r\n    }\r\n\r\n    assert(typeof(options)===\"object\", \"Invalid options object\");\r\n    \r\n    var exifImage = new ExifImage(options, function(error, data) {\r\n      if (error) {\r\n        return callback(error);\r\n      }\r\n      \r\n      callback(null, data, options.image);      \r\n    });\r\n    \r\n    return exifImage;\r\n  }\r\n\r\n  if (typeof(options)===\"string\") {\r\n    options= {\r\n        image: options\r\n    }\r\n  } else if (options instanceof Buffer) {\r\n    options= {\r\n        image: options\r\n    }\r\n  }\r\n  \r\n  var ops={};\r\n  if (options) {\r\n    for(var k in options) {\r\n      ops[k]=options[k];\r\n    }\r\n  }\r\n  this.options=ops;\r\n\r\n  // Default option values\r\n  [\"ifd0MaxEntries\", \"ifd1MaxEntries\", \"maxGpsEntries\", \"maxInteroperabilityEntries\", \"agfaMaxEntries\", \"epsonMaxEntries\", \r\n     \"fujifilmMaxEntries\", \"olympusMaxEntries\", \"panasonicMaxEntries\", \"sanyoMaxEntries\"].forEach(function(p) {\r\n       if (ops[p]===undefined) {\r\n         ops[p]=DEFAULT_MAX_ENTRIES;\r\n       }\r\n     });\r\n\r\n  this.exifData = {\r\n    image : {},                 // Information about the main image\r\n    thumbnail : {},             // Information about the thumbnail\r\n    exif : {},                  // Exif information\r\n    gps : {},                   // GPS information\r\n    interoperability: {},       // Exif Interoperability information\r\n    makernote : {}              // Makernote information\r\n  };\r\n   \r\n  this.offsets={};\r\n  if (ops.tiffOffsets) {\r\n    exifData.offsets=offsets;\r\n  }\r\n  \r\n  debug(\"New ExifImage options=\",options);\r\n\r\n  if (!ops.image) {\r\n    // If options image is not specified, the developper must call loadImage() to parse the image.\r\n//    callback(new Error('You have to provide an image, it is pretty hard to extract Exif data from nothing...'));\r\n    return;\r\n  }\r\n\r\n  if (typeof callback !== 'function') {\r\n    throw new Error('You have to provide a callback function.');\r\n  }\r\n \r\n  var self=this;\r\n  setImmediate(function() {\r\n    self.loadImage(ops.image, function (error, exifData) {\r\n      if (error) {\r\n        return callback(error);\r\n      }\r\n    \r\n      callback(null, exifData, ops.image);\r\n    });\r\n  });\r\n}\r\n\r\nExifImage.ExifImage=ExifImage;\r\n\r\nmodule.exports = ExifImage;\r\n\r\n/**\r\n * Load image and parse exifDatas\r\n *\r\n * @param [String|Buffer] image the image\r\n * @param callback a callback which is called when exif datas are parsed.\r\n * @return Nothing\r\n */\r\nExifImage.prototype.loadImage = function (image, callback) {\r\n  assert(typeof(callback)===\"function\", \"Callback must be a function\");\r\n  \r\n  var self = this;\r\n\r\n  debug(\"loadImage image=\", image);\r\n  \r\n  if (image.constructor.name === 'Buffer') {\r\n    this.processImage(\"Buffer\", image, callback);\r\n    return;\r\n  }\r\n  \r\n  if (image.constructor.name === 'String') {\r\n    fs.readFile(image, function (error, data) {\r\n      if (error) {\r\n        callback(new Error('Encountered the following error while trying to read given image: '+error));\r\n        return;\r\n      }\r\n\r\n      self.processImage(\"File: \"+image, data, callback);\r\n    });\r\n    return;\r\n  }\r\n\r\n  callback(new Error('Given image is neither a buffer nor a file, please provide one of these.'));\r\n};\r\n\r\nExifImage.prototype.processImage = function (source, data, callback) {\r\n  assert(typeof(source)===\"string\", \"Source must be a string\");\r\n  assert(typeof(callback)===\"function\", \"Callback must be a function\");\r\n  \r\n  var offset = 0;\r\n\r\n  if (data[offset++] != 0xFF || data[offset++] != 0xD8) {\r\n    var e=new Error('The given image is not a JPEG and thus unsupported right now.');\r\n    e.source=source;\r\n    e.code=\"NOT_A_JPEG\";\r\n    callback(e);\r\n    return;\r\n  }\r\n\r\n  this.imageType = 'JPEG';\r\n\r\n  while (offset < data.length) {\r\n\r\n    if (data[offset++] != 0xFF) {\r\n      break;\r\n    }\r\n\r\n    if (data[offset++] == 0xE1) {\r\n      try {\r\n        this.extractExifData(data, offset + 2, data.getShort(offset, true) - 2);\r\n\r\n      } catch (error) {\r\n        error.code=\"PARSING_ERROR\";\r\n        error.source=source;        \r\n\r\n        debug(\"Extract exif data error source=\", source, \"offset=\", offset, \"error=\",error);\r\n        \r\n        callback(error);\r\n        return;\r\n      }\r\n      \r\n      debug(\"Extract exif data success source=\", source, \"exifData=\",this.exifData);\r\n\r\n      callback(null, this.exifData);\r\n      return;\r\n    }\r\n\r\n    offset += data.getShort(offset, true);\r\n  }\r\n\r\n  var e2=new Error('No Exif segment found in the given image.');\r\n  e2.source=source;\r\n  e2.code=\"NO_EXIF_SEGMENT\";\r\n  \r\n  callback(e2);\r\n};\r\n\r\nExifImage.prototype.extractExifData = function (data, start, length) {\r\n\r\n  var exifData=this.exifData;\r\n  var tiffOffset = start + 6;\r\n  var ifdOffset, numberOfEntries;\r\n  var noPadding = (this.options.noPadding!==false);\r\n  \r\n  this.offsets.tiff=tiffOffset;\r\n\r\n  // Exif data always starts with Exif\\0\\0\r\n  if (data.toString('utf8', start, tiffOffset) != 'Exif\\0\\0') {\r\n    throw new Error('The Exif data is not valid.');\r\n  }\r\n\r\n  // After the Exif start we either have 0x4949 if the following data is\r\n  // stored in big endian or 0x4D4D if it is stored in little endian\r\n  if (data.getShort(tiffOffset) == 0x4949) {\r\n    this.isBigEndian = false;\r\n    \r\n  } else if (data.getShort(tiffOffset) == 0x4D4D) {\r\n    this.isBigEndian = true;\r\n    \r\n  } else {\r\n    throw new Error('Invalid TIFF data! Expected 0x4949 or 0x4D4D at offset '+(tiffOffset)+' but found 0x'+data[tiffOffset].toString(16).toUpperCase()+data[tiffOffset + 1].toString(16).toUpperCase()+\".\");\r\n  }\r\n\r\n  debug(\"BigEndian=\",this.isBigEndian);\r\n  \r\n  // Valid TIFF headers always have 0x002A here\r\n  if (data.getShort(tiffOffset + 2, this.isBigEndian) != 0x002A) {\r\n    var expected = (this.isBigEndian) ? '0x002A' : '0x2A00';\r\n    throw new Error('Invalid TIFF data! Expected '+expected+' at offset '+(tiffOffset + 2)+' but found 0x'+data[tiffOffset + 2].toString(16).toUpperCase()+data[tiffOffset + 3].toString(16).toUpperCase()+\".\");\r\n  }\r\n\r\n  /********************************* IFD0 **********************************/\r\n\r\n  // Offset to IFD0 which is always followed by two bytes with the amount of\r\n  // entries in this IFD\r\n  ifdOffset = tiffOffset + data.getLong(tiffOffset + 4, this.isBigEndian);\r\n  this.offsets.ifd0=ifdOffset;\r\n  \r\n  numberOfEntries = data.getShort(ifdOffset, this.isBigEndian);\r\n  if (this.options.ifd0MaxEntries) {\r\n    numberOfEntries=Math.min(numberOfEntries, this.options.ifd0MaxEntries);\r\n  }\r\n\r\n  debug(\"IFD0 ifdOffset=\",ifdOffset, \"numberOfEntries=\", numberOfEntries);\r\n\r\n  // Each IFD entry consists of 12 bytes which we loop through and extract\r\n  // the data from\r\n  for (var i = 0; i < numberOfEntries; i++) {\r\n    var exifEntry = this.extractExifEntry(data, (ifdOffset + 2 + (i * 12)), tiffOffset, this.isBigEndian, ExifImage.TAGS.exif);\r\n    if (!exifEntry) {\r\n      continue;\r\n    }\r\n    \r\n    if (exifEntry.tagId===0xEA1C && noPadding) {\r\n      continue;\r\n    }\r\n    \r\n    exifData.image[exifEntry.tagName] = exifEntry.value;\r\n  }\r\n\r\n  debug(\"IFD0 parsed\", exifData.image);\r\n\r\n  /********************************* IFD1 **********************************/\r\n\r\n  // Check if there is an offset for IFD1. If so it is always followed by two\r\n  // bytes with the amount of entries in this IFD, if not there is no IFD1\r\n  var nextIfdOffset = data.getLong(ifdOffset + 2 + (numberOfEntries * 12), this.isBigEndian)\r\n  if (nextIfdOffset != 0x00000000) {\r\n    ifdOffset = tiffOffset + nextIfdOffset;\r\n    this.offsets.ifd1=ifdOffset;\r\n    numberOfEntries = data.getShort(ifdOffset, this.isBigEndian);\r\n    if (this.options.ifd1MaxEntries) {\r\n      numberOfEntries=Math.min(numberOfEntries, this.options.ifd1MaxEntries);\r\n    }\r\n\r\n    debug(\"IFD1 ifdOffset=\",ifdOffset, \"numberOfEntries=\", numberOfEntries);\r\n\r\n    // Each IFD entry consists of 12 bytes which we loop through and extract\r\n    // the data from\r\n    for (var i = 0; i < numberOfEntries; i++) {\r\n      var exifEntry = this.extractExifEntry(data, (ifdOffset + 2 + (i * 12)), tiffOffset, this.isBigEndian, ExifImage.TAGS.exif);\r\n      if (!exifEntry) {\r\n        continue;\r\n      }\r\n\r\n      if (exifEntry.tagId===0xEA1C && noPadding) {\r\n        continue;\r\n      }\r\n                  \r\n      exifData.thumbnail[exifEntry.tagName] = exifEntry.value;\r\n    }\r\n    \r\n    if (this.options.fixThumbnailOffset) {\r\n      var thumbnailOffset=exifData.thumbnail[ExifImage.TAGS.exif[0x0201]];\r\n      if (thumbnailOffset) {\r\n        debug(\"IFD1 fix thumbnail offset, add=\",this.offsets.tiff);\r\n        \r\n        exifData.thumbnail[ExifImage.TAGS.exif[0x0201]]+=this.offsets.tiff;\r\n      }\r\n    }\r\n\r\n    debug(\"IFD1 parsed\", exifData.thumbnail);\r\n  }\r\n\r\n  /******************************* EXIF IFD ********************************/\r\n\r\n  // Look for a pointer to the Exif IFD in IFD0 and extract information from\r\n  // it if available\r\n  if (exifData.image[ExifImage.TAGS.exif[0x8769]]) {\r\n\r\n    ifdOffset = tiffOffset + exifData.image[ExifImage.TAGS.exif[0x8769]];\r\n    this.offsets.tags=ifdOffset;\r\n    \r\n    numberOfEntries = data.getShort(ifdOffset, this.isBigEndian);\r\n    if (this.options.maxEntries) {\r\n      numberOfEntries=Math.min(numberOfEntries, this.options.maxEntries);\r\n    }\r\n    \r\n    debug(\"EXIF IFD ifdOffset=\",ifdOffset, \"numberOfEntries=\", numberOfEntries);\r\n    \r\n    // Each IFD entry consists of 12 bytes which we loop through and extract\r\n    // the data from\r\n    for (var i = 0; i < numberOfEntries; i++) {\r\n      var exifEntry = this.extractExifEntry(data, (ifdOffset + 2 + (i * 12)), tiffOffset, this.isBigEndian, ExifImage.TAGS.exif);\r\n      if (!exifEntry) {\r\n        continue;\r\n      }\r\n\r\n      if (exifEntry.tagId===0xEA1C && noPadding) {\r\n        continue;\r\n      }\r\n            \r\n      exifData.exif[exifEntry.tagName] = exifEntry.value;\r\n    }\r\n\r\n    debug(\"EXIF IFD parsed\",exifData.exif);\r\n  }\r\n\r\n  /******************************** GPS IFD ********************************/\r\n\r\n  // Look for a pointer to the GPS IFD in IFD0 and extract information from\r\n  // it if available\r\n  if (exifData.image[ExifImage.TAGS.exif[0x8825]]) {\r\n\r\n    ifdOffset = tiffOffset + exifData.image[ExifImage.TAGS.exif[0x8825]];\r\n    this.offsets.gps=ifdOffset;\r\n\r\n    numberOfEntries = data.getShort(ifdOffset, this.isBigEndian);\r\n    if (this.options.maxGpsEntries) {\r\n      numberOfEntries=Math.min(numberOfEntries, this.options.maxGpsEntries);\r\n    }\r\n    \r\n    debug(\"GPS IFD ifdOffset=\", ifdOffset, \"numberOfEntries=\", numberOfEntries);\r\n\r\n    // Each IFD entry consists of 12 bytes which we loop through and extract\r\n    // the data from\r\n    for (var i = 0; i < numberOfEntries; i++) {\r\n      var exifEntry = this.extractExifEntry(data, (ifdOffset + 2 + (i * 12)), tiffOffset, this.isBigEndian, ExifImage.TAGS.gps);\r\n      if (!exifEntry) {\r\n        continue;\r\n      }\r\n\r\n      if (exifEntry.tagId===0xEA1C && noPadding) {\r\n        continue;\r\n      }\r\n      \r\n      exifData.gps[exifEntry.tagName] = exifEntry.value;\r\n    }\r\n\r\n    debug(\"GPS IFD parsed\",exifData.gps);\r\n   }\r\n\r\n  /************************* Interoperability IFD **************************/\r\n\r\n  // Look for a pointer to the interoperatbility IFD in the Exif IFD and\r\n  // extract information from it if available\r\n  if (exifData.exif[ExifImage.TAGS.exif[0xA005]]) {\r\n\r\n    ifdOffset = tiffOffset + exifData.exif[ExifImage.TAGS.exif[0xA005]];\r\n    this.offsets.interoperability=ifdOffset;\r\n    \r\n    numberOfEntries = data.getShort(ifdOffset, this.isBigEndian);\r\n    if (this.options.maxInteroperabilityEntries) {\r\n      numberOfEntries=Math.min(numberOfEntries, this.options.maxInteroperabilityEntries);\r\n    }\r\n    \r\n    debug(\"Interoperability IFD ifdOffset=\", ifdOffset, \"numberOfEntries=\", numberOfEntries);\r\n\r\n    // Each IFD entry consists of 12 bytes which we loop through and extract\r\n    // the data from\r\n    for (var i = 0; i < numberOfEntries; i++) {\r\n      var exifEntry = this.extractExifEntry(data, (ifdOffset + 2 + (i * 12)), tiffOffset, this.isBigEndian, ExifImage.TAGS.exif);\r\n      if (!exifEntry) {\r\n        break;\r\n      }\r\n\r\n      if (exifEntry.tagId===0xEA1C && noPadding) {\r\n        continue;\r\n      }\r\n            \r\n      exifData.interoperability[exifEntry.tagName] = exifEntry.value;\r\n   }\r\n\r\n    debug(\"Interoperability IFD parsed\",exifData.gps);\r\n  }\r\n\r\n  /***************************** Makernote IFD *****************************/\r\n\r\n  // Look for Makernote data in the Exif IFD, check which type of proprietary\r\n  // Makernotes the image contains, load the respective functionality and\r\n  // start the extraction\r\n  if (typeof exifData.exif[ExifImage.TAGS.exif[0x927C]] != \"undefined\") {\r\n\r\n    var type;\r\n    // Check the header to see what kind of Makernote we are dealing with\r\n    if (exifData.exif[ExifImage.TAGS.exif[0x927C]].getString(0, 7) === \"OLYMP\\x00\\x01\" || exifData.exif[ExifImage.TAGS.exif[0x927C]].getString(0, 7) === \"OLYMP\\x00\\x02\") {\r\n      type=\"olympus\"\r\n\r\n    } else if (exifData.exif[ExifImage.TAGS.exif[0x927C]].getString(0, 7) === \"AGFA \\x00\\x01\") {\r\n      type=\"agfa\";\r\n\r\n    } else if (exifData.exif[ExifImage.TAGS.exif[0x927C]].getString(0, 8) === \"EPSON\\x00\\x01\\x00\") {\r\n      type=\"epson\";\r\n\r\n    } else if (exifData.exif[ExifImage.TAGS.exif[0x927C]].getString(0, 8) === \"FUJIFILM\") {\r\n      type=\"fujifilm\";\r\n\r\n    } else if (exifData.exif[ExifImage.TAGS.exif[0x927C]].getString(0, 9) === \"Panasonic\") {\r\n      type=\"panasonic\";\r\n\r\n    } else if (exifData.exif[ExifImage.TAGS.exif[0x927C]].getString(0, 5) === \"SANYO\") {\r\n      type=\"sanyo\";\r\n    }\r\n   \r\n\r\n    debug(\"Makernote IFD ifdOffset=\", ifdOffset, \"type=\", type);\r\n\r\n    if (type) {\r\n      var extractMakernotes = require('./makernotes/'+type).extractMakernotes;\r\n\r\n      exifData.makernote = extractMakernotes.call(this, data, this.makernoteOffset, tiffOffset);\r\n      \r\n    } else {      \r\n      // Makernotes are available but the format is not recognized so\r\n      // an error message is pushed instead, this ain't the best\r\n      // solution but should do for now\r\n       exifData.makernote['error'] = 'Unable to extract Makernote information as it is in an unsupported or unrecognized format.';    \r\n    }\r\n\r\n    debug(\"Makernote IFD parsed\",exifData.makernote);\r\n  }\r\n};\r\n\r\nExifImage.prototype.extractExifEntry = function (data, entryOffset, tiffOffset, isBigEndian, tags) {\r\n\r\n  var entry = {\r\n    tag : data.slice(entryOffset, entryOffset + 2),\r\n    tagId : null,\r\n    tagName : null,\r\n    format : data.getShort(entryOffset + 2, isBigEndian),\r\n    components : data.getLong(entryOffset + 4, isBigEndian),\r\n    valueOffset: null,\r\n    value : []\r\n  }\r\n\r\n  entry.tagId = entry.tag.getShort(0, isBigEndian);\r\n\r\n  // The tagId may correspond to more then one tagName so check which\r\n  if (tags && tags[entry.tagId] && typeof tags[entry.tagId] == \"function\") {\r\n    entry.tagName = tags[entry.tagId].call(this, entry);    \r\n    if (!entry.tagName) {\r\n      return false;\r\n    }\r\n\r\n  // The tagId corresponds to exactly one tagName\r\n  } else if (tags && tags[entry.tagId]) {\r\n    entry.tagName = tags[entry.tagId];\r\n    if (entry.tagName===undefined) {\r\n      return false;\r\n    }\r\n\r\n  // The tagId is not recognized\r\n  } else {\r\n    return false;\r\n  }\r\n\r\n  switch (entry.format) {\r\n\r\n    case 0x0001: // unsigned byte, 1 byte per component\r\n      entry.valueOffset = (entry.components <= 4) ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;\r\n      for (var i = 0; i < entry.components; i++)\r\n        entry.value.push(data.getByte(entry.valueOffset + i));\r\n      break;\r\n\r\n    case 0x0002: // ascii strings, 1 byte per component\r\n      entry.valueOffset = (entry.components <= 4) ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;\r\n      entry.value = data.getString(entry.valueOffset, entry.components);\r\n      if (entry.value[entry.value.length - 1] === \"\\u0000\") // Trim null terminated strings\r\n        entry.value = entry.value.substring(0, entry.value.length - 1);\r\n      break;\r\n\r\n    case 0x0003: // unsigned short, 2 byte per component\r\n      entry.valueOffset = (entry.components <= 2) ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;\r\n      for (var i = 0; i < entry.components; i++)\r\n        entry.value.push(data.getShort(entry.valueOffset + i * 2, isBigEndian));\r\n      break;\r\n\r\n    case 0x0004: // unsigned long, 4 byte per component\r\n      entry.valueOffset = (entry.components == 1) ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;\r\n      for (var i = 0; i < entry.components; i++)\r\n        entry.value.push(data.getLong(entry.valueOffset + i * 4, isBigEndian));\r\n      break;\r\n\r\n    case 0x0005: // unsigned rational, 8 byte per component (4 byte numerator and 4 byte denominator)\r\n      entry.valueOffset = data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;\r\n      for (var i = 0; i < entry.components; i++)\r\n        entry.value.push(data.getLong(entry.valueOffset + i * 8, isBigEndian) / data.getLong(entry.valueOffset + i * 8 + 4, isBigEndian));\r\n      break;\r\n\r\n    case 0x0006: // signed byte, 1 byte per component\r\n      entry.valueOffset = (entry.components <= 4) ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;\r\n      for (var i = 0; i < entry.components; i++)\r\n        entry.value.push(data.getSignedByte(entry.valueOffset + i));\r\n      break;\r\n\r\n    case 0x0007: // undefined, 1 byte per component\r\n      entry.valueOffset = (entry.components <= 4) ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;\r\n      entry.value.push(data.slice(entry.valueOffset, entry.valueOffset + entry.components));\r\n      break;\r\n\r\n    case 0x0008: // signed short, 2 byte per component\r\n      entry.valueOffset = (entry.components <= 2) ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;\r\n      for (var i = 0; i < entry.components; i++)\r\n        entry.value.push(data.getSignedShort(entry.valueOffset + i * 2, isBigEndian));\r\n      break;\r\n\r\n    case 0x0009: // signed long, 4 byte per component\r\n      entry.valueOffset = (entry.components == 1) ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;\r\n      for (var i = 0; i < entry.components; i++)\r\n        entry.value.push(data.getSignedLong(entry.valueOffset + i * 4, isBigEndian));\r\n      break;\r\n\r\n    case 0x000A: // signed rational, 8 byte per component (4 byte numerator and 4 byte denominator)\r\n      entry.valueOffset = data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;\r\n      for (var i = 0; i < entry.components; i++)\r\n        entry.value.push(data.getSignedLong(entry.valueOffset + i * 8, isBigEndian) / data.getSignedLong(entry.valueOffset + i * 8 + 4, isBigEndian));\r\n      break;\r\n\r\n    default:\r\n      return false;\r\n\r\n  }\r\n\r\n  // If this is the Makernote tag save its offset for later use\r\n  if (entry.tagName === \"MakerNote\") {\r\n    this.offsets.makernoteOffset = entry.valueOffset;\r\n  }\r\n\r\n  // If the value array has only one element we don't need an array\r\n  if (entry.value.length == 1) {\r\n    entry.value = entry.value[0];\r\n  }\r\n\r\n  return entry;\r\n};\r\n\r\n/**\r\n * Comprehensive list of TIFF and Exif tags found on\r\n * http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/EXIF.html\r\n */\r\nExifImage.TAGS = {\r\n\r\n  // Exif tags\r\n  exif : {\r\n\r\n    0x0001 : \"InteropIndex\",\r\n    0x0002 : \"InteropVersion\",\r\n    0x000B : \"ProcessingSoftware\",\r\n    0x00FE : \"SubfileType\",\r\n    0x00FF : \"OldSubfileType\",\r\n    0x0100 : \"ImageWidth\",\r\n    0x0101 : \"ImageHeight\",\r\n    0x0102 : \"BitsPerSample\",\r\n    0x0103 : \"Compression\",\r\n    0x0106 : \"PhotometricInterpretation\",\r\n    0x0107 : \"Thresholding\",\r\n    0x0108 : \"CellWidth\",\r\n    0x0109 : \"CellLength\",\r\n    0x010A : \"FillOrder\",\r\n    0x010D : \"DocumentName\",\r\n    0x010E : \"ImageDescription\",\r\n    0x010F : \"Make\",\r\n    0x0110 : \"Model\",\r\n    0x0111 : \"StripOffsets\",\r\n    0x0112 : \"Orientation\",\r\n    0x0115 : \"SamplesPerPixel\",\r\n    0x0116 : \"RowsPerStrip\",\r\n    0x0117 : \"StripByteCounts\",\r\n    0x0118 : \"MinSampleValue\",\r\n    0x0119 : \"MaxSampleValue\",\r\n    0x011A : \"XResolution\",\r\n    0x011B : \"YResolution\",\r\n    0x011C : \"PlanarConfiguration\",\r\n    0x011D : \"PageName\",\r\n    0x011E : \"XPosition\",\r\n    0x011F : \"YPosition\",\r\n    0x0120 : \"FreeOffsets\",\r\n    0x0121 : \"FreeByteCounts\",\r\n    0x0122 : \"GrayResponseUnit\",\r\n    0x0123 : \"GrayResponseCurve\",\r\n    0x0124 : \"T4Options\",\r\n    0x0125 : \"T6Options\",\r\n    0x0128 : \"ResolutionUnit\",\r\n    0x0129 : \"PageNumber\",\r\n    0x012C : \"ColorResponseUnit\",\r\n    0x012D : \"TransferFunction\",\r\n    0x0131 : \"Software\",\r\n    0x0132 : \"ModifyDate\",\r\n    0x013B : \"Artist\",\r\n    0x013C : \"HostComputer\",\r\n    0x013D : \"Predictor\",\r\n    0x013E : \"WhitePoint\",\r\n    0x013F : \"PrimaryChromaticities\",\r\n    0x0140 : \"ColorMap\",\r\n    0x0141 : \"HalftoneHints\",\r\n    0x0142 : \"TileWidth\",\r\n    0x0143 : \"TileLength\",\r\n    0x0144 : \"TileOffsets\",\r\n    0x0145 : \"TileByteCounts\",\r\n    0x0146 : \"BadFaxLines\",\r\n    0x0147 : \"CleanFaxData\",\r\n    0x0148 : \"ConsecutiveBadFaxLines\",\r\n    0x014A : \"SubIFD\",\r\n    0x014C : \"InkSet\",\r\n    0x014D : \"InkNames\",\r\n    0x014E : \"NumberofInks\",\r\n    0x0150 : \"DotRange\",\r\n    0x0151 : \"TargetPrinter\",\r\n    0x0152 : \"ExtraSamples\",\r\n    0x0153 : \"SampleFormat\",\r\n    0x0154 : \"SMinSampleValue\",\r\n    0x0155 : \"SMaxSampleValue\",\r\n    0x0156 : \"TransferRange\",\r\n    0x0157 : \"ClipPath\",\r\n    0x0158 : \"XClipPathUnits\",\r\n    0x0159 : \"YClipPathUnits\",\r\n    0x015A : \"Indexed\",\r\n    0x015B : \"JPEGTables\",\r\n    0x015F : \"OPIProxy\",\r\n    0x0190 : \"GlobalParametersIFD\",\r\n    0x0191 : \"ProfileType\",\r\n    0x0192 : \"FaxProfile\",\r\n    0x0193 : \"CodingMethods\",\r\n    0x0194 : \"VersionYear\",\r\n    0x0195 : \"ModeNumber\",\r\n    0x01B1 : \"Decode\",\r\n    0x01B2 : \"DefaultImageColor\",\r\n    0x01B3 : \"T82Options\",\r\n    0x01B5 : \"JPEGTables\",\r\n    0x0200 : \"JPEGProc\",\r\n    0x0201 : \"ThumbnailOffset\",\r\n    0x0202 : \"ThumbnailLength\",\r\n    0x0203 : \"JPEGRestartInterval\",\r\n    0x0205 : \"JPEGLosslessPredictors\",\r\n    0x0206 : \"JPEGPointTransforms\",\r\n    0x0207 : \"JPEGQTables\",\r\n    0x0208 : \"JPEGDCTables\",\r\n    0x0209 : \"JPEGACTables\",\r\n    0x0211 : \"YCbCrCoefficients\",\r\n    0x0212 : \"YCbCrSubSampling\",\r\n    0x0213 : \"YCbCrPositioning\",\r\n    0x0214 : \"ReferenceBlackWhite\",\r\n    0x022F : \"StripRowCounts\",\r\n    0x02BC : \"ApplicationNotes\",\r\n    0x03E7 : \"USPTOMiscellaneous\",\r\n    0x1000 : \"RelatedImageFileFormat\",\r\n    0x1001 : \"RelatedImageWidth\",\r\n    0x1002 : \"RelatedImageHeight\",\r\n    0x4746 : \"Rating\",\r\n    0x4747 : \"XP_DIP_XML\",\r\n    0x4748 : \"StitchInfo\",\r\n    0x4749 : \"RatingPercent\",\r\n    0x800D : \"ImageID\",\r\n    0x80A3 : \"WangTag1\",\r\n    0x80A4 : \"WangAnnotation\",\r\n    0x80A5 : \"WangTag3\",\r\n    0x80A6 : \"WangTag4\",\r\n    0x80E3 : \"Matteing\",\r\n    0x80E4 : \"DataType\",\r\n    0x80E5 : \"ImageDepth\",\r\n    0x80E6 : \"TileDepth\",\r\n    0x827D : \"Model2\",\r\n    0x828D : \"CFARepeatPatternDim\",\r\n    0x828E : \"CFAPattern2\",\r\n    0x828F : \"BatteryLevel\",\r\n    0x8290 : \"KodakIFD\",\r\n    0x8298 : \"Copyright\",\r\n    0x829A : \"ExposureTime\",\r\n    0x829D : \"FNumber\",\r\n    0x82A5 : \"MDFileTag\",\r\n    0x82A6 : \"MDScalePixel\",\r\n    0x82A7 : \"MDColorTable\",\r\n    0x82A8 : \"MDLabName\",\r\n    0x82A9 : \"MDSampleInfo\",\r\n    0x82AA : \"MDPrepDate\",\r\n    0x82AB : \"MDPrepTime\",\r\n    0x82AC : \"MDFileUnits\",\r\n    0x830E : \"PixelScale\",\r\n    0x8335 : \"AdventScale\",\r\n    0x8336 : \"AdventRevision\",\r\n    0x835C : \"UIC1Tag\",\r\n    0x835D : \"UIC2Tag\",\r\n    0x835E : \"UIC3Tag\",\r\n    0x835F : \"UIC4Tag\",\r\n    0x83BB : \"IPTC-NAA\",\r\n    0x847E : \"IntergraphPacketData\",\r\n    0x847F : \"IntergraphFlagRegisters\",\r\n    0x8480 : \"IntergraphMatrix\",\r\n    0x8481 : \"INGRReserved\",\r\n    0x8482 : \"ModelTiePoint\",\r\n    0x84E0 : \"Site\",\r\n    0x84E1 : \"ColorSequence\",\r\n    0x84E2 : \"IT8Header\",\r\n    0x84E3 : \"RasterPadding\",\r\n    0x84E4 : \"BitsPerRunLength\",\r\n    0x84E5 : \"BitsPerExtendedRunLength\",\r\n    0x84E6 : \"ColorTable\",\r\n    0x84E7 : \"ImageColorIndicator\",\r\n    0x84E8 : \"BackgroundColorIndicator\",\r\n    0x84E9 : \"ImageColorValue\",\r\n    0x84EA : \"BackgroundColorValue\",\r\n    0x84EB : \"PixelIntensityRange\",\r\n    0x84EC : \"TransparencyIndicator\",\r\n    0x84ED : \"ColorCharacterization\",\r\n    0x84EE : \"HCUsage\",\r\n    0x84EF : \"TrapIndicator\",\r\n    0x84F0 : \"CMYKEquivalent\",\r\n    0x8546 : \"SEMInfo\",\r\n    0x8568 : \"AFCP_IPTC\",\r\n    0x85B8 : \"PixelMagicJBIGOptions\",\r\n    0x85D8 : \"ModelTransform\",\r\n    0x8602 : \"WB_GRGBLevels\",\r\n    0x8606 : \"LeafData\",\r\n    0x8649 : \"PhotoshopSettings\",\r\n    0x8769 : \"ExifOffset\",\r\n    0x8773 : \"ICC_Profile\",\r\n    0x877F : \"TIFF_FXExtensions\",\r\n    0x8780 : \"MultiProfiles\",\r\n    0x8781 : \"SharedData\",\r\n    0x8782 : \"T88Options\",\r\n    0x87AC : \"ImageLayer\",\r\n    0x87AF : \"GeoTiffDirectory\",\r\n    0x87B0 : \"GeoTiffDoubleParams\",\r\n    0x87B1 : \"GeoTiffAsciiParams\",\r\n    0x8822 : \"ExposureProgram\",\r\n    0x8824 : \"SpectralSensitivity\",\r\n    0x8825 : \"GPSInfo\",\r\n    0x8827 : \"ISO\",\r\n    0x8828 : \"Opto-ElectricConvFactor\",\r\n    0x8829 : \"Interlace\",\r\n    0x882A : \"TimeZoneOffset\",\r\n    0x882B : \"SelfTimerMode\",\r\n    0x8830 : \"SensitivityType\",\r\n    0x8831 : \"StandardOutputSensitivity\",\r\n    0x8832 : \"RecommendedExposureIndex\",\r\n    0x8833 : \"ISOSpeed\",\r\n    0x8834 : \"ISOSpeedLatitudeyyy\",\r\n    0x8835 : \"ISOSpeedLatitudezzz\",\r\n    0x885C : \"FaxRecvParams\",\r\n    0x885D : \"FaxSubAddress\",\r\n    0x885E : \"FaxRecvTime\",\r\n    0x888A : \"LeafSubIFD\",\r\n    0x9000 : \"ExifVersion\",\r\n    0x9003 : \"DateTimeOriginal\",\r\n    0x9004 : \"CreateDate\",\r\n    0x9101 : \"ComponentsConfiguration\",\r\n    0x9102 : \"CompressedBitsPerPixel\",\r\n    0x9201 : \"ShutterSpeedValue\",\r\n    0x9202 : \"ApertureValue\",\r\n    0x9203 : \"BrightnessValue\",\r\n    0x9204 : \"ExposureCompensation\",\r\n    0x9205 : \"MaxApertureValue\",\r\n    0x9206 : \"SubjectDistance\",\r\n    0x9207 : \"MeteringMode\",\r\n    0x9208 : \"LightSource\",\r\n    0x9209 : \"Flash\",\r\n    0x920A : \"FocalLength\",\r\n    0x920B : \"FlashEnergy\",\r\n    0x920C : \"SpatialFrequencyResponse\",\r\n    0x920D : \"Noise\",\r\n    0x920E : \"FocalPlaneXResolution\",\r\n    0x920F : \"FocalPlaneYResolution\",\r\n    0x9210 : \"FocalPlaneResolutionUnit\",\r\n    0x9211 : \"ImageNumber\",\r\n    0x9212 : \"SecurityClassification\",\r\n    0x9213 : \"ImageHistory\",\r\n    0x9214 : \"SubjectArea\",\r\n    0x9215 : \"ExposureIndex\",\r\n    0x9216 : \"TIFF-EPStandardID\",\r\n    0x9217 : \"SensingMethod\",\r\n    0x923A : \"CIP3DataFile\",\r\n    0x923B : \"CIP3Sheet\",\r\n    0x923C : \"CIP3Side\",\r\n    0x923F : \"StoNits\",\r\n    0x927C : \"MakerNote\",\r\n    0x9286 : \"UserComment\",\r\n    0x9290 : \"SubSecTime\",\r\n    0x9291 : \"SubSecTimeOriginal\",\r\n    0x9292 : \"SubSecTimeDigitized\",\r\n    0x932F : \"MSDocumentText\",\r\n    0x9330 : \"MSPropertySetStorage\",\r\n    0x9331 : \"MSDocumentTextPosition\",\r\n    0x935C : \"ImageSourceData\",\r\n    0x9C9B : \"XPTitle\",\r\n    0x9C9C : \"XPComment\",\r\n    0x9C9D : \"XPAuthor\",\r\n    0x9C9E : \"XPKeywords\",\r\n    0x9C9F : \"XPSubject\",\r\n    0xA000 : \"FlashpixVersion\",\r\n    0xA001 : \"ColorSpace\",\r\n    0xA002 : \"ExifImageWidth\",\r\n    0xA003 : \"ExifImageHeight\",\r\n    0xA004 : \"RelatedSoundFile\",\r\n    0xA005 : \"InteropOffset\",\r\n    0xA20B : \"FlashEnergy\",\r\n    0xA20C : \"SpatialFrequencyResponse\",\r\n    0xA20D : \"Noise\",\r\n    0xA20E : \"FocalPlaneXResolution\",\r\n    0xA20F : \"FocalPlaneYResolution\",\r\n    0xA210 : \"FocalPlaneResolutionUnit\",\r\n    0xA211 : \"ImageNumber\",\r\n    0xA212 : \"SecurityClassification\",\r\n    0xA213 : \"ImageHistory\",\r\n    0xA214 : \"SubjectLocation\",\r\n    0xA215 : \"ExposureIndex\",\r\n    0xA216 : \"TIFF-EPStandardID\",\r\n    0xA217 : \"SensingMethod\",\r\n    0xA300 : \"FileSource\",\r\n    0xA301 : \"SceneType\",\r\n    0xA302 : \"CFAPattern\",\r\n    0xA401 : \"CustomRendered\",\r\n    0xA402 : \"ExposureMode\",\r\n    0xA403 : \"WhiteBalance\",\r\n    0xA404 : \"DigitalZoomRatio\",\r\n    0xA405 : \"FocalLengthIn35mmFormat\",\r\n    0xA406 : \"SceneCaptureType\",\r\n    0xA407 : \"GainControl\",\r\n    0xA408 : \"Contrast\",\r\n    0xA409 : \"Saturation\",\r\n    0xA40A : \"Sharpness\",\r\n    0xA40B : \"DeviceSettingDescription\",\r\n    0xA40C : \"SubjectDistanceRange\",\r\n    0xA420 : \"ImageUniqueID\",\r\n    0xA430 : \"OwnerName\",\r\n    0xA431 : \"SerialNumber\",\r\n    0xA432 : \"LensInfo\",\r\n    0xA433 : \"LensMake\",\r\n    0xA434 : \"LensModel\",\r\n    0xA435 : \"LensSerialNumber\",\r\n    0xA480 : \"GDALMetadata\",\r\n    0xA481 : \"GDALNoData\",\r\n    0xA500 : \"Gamma\",\r\n    0xAFC0 : \"ExpandSoftware\",\r\n    0xAFC1 : \"ExpandLens\",\r\n    0xAFC2 : \"ExpandFilm\",\r\n    0xAFC3 : \"ExpandFilterLens\",\r\n    0xAFC4 : \"ExpandScanner\",\r\n    0xAFC5 : \"ExpandFlashLamp\",\r\n    0xBC01 : \"PixelFormat\",\r\n    0xBC02 : \"Transformation\",\r\n    0xBC03 : \"Uncompressed\",\r\n    0xBC04 : \"ImageType\",\r\n    0xBC80 : \"ImageWidth\",\r\n    0xBC81 : \"ImageHeight\",\r\n    0xBC82 : \"WidthResolution\",\r\n    0xBC83 : \"HeightResolution\",\r\n    0xBCC0 : \"ImageOffset\",\r\n    0xBCC1 : \"ImageByteCount\",\r\n    0xBCC2 : \"AlphaOffset\",\r\n    0xBCC3 : \"AlphaByteCount\",\r\n    0xBCC4 : \"ImageDataDiscard\",\r\n    0xBCC5 : \"AlphaDataDiscard\",\r\n    0xC427 : \"OceScanjobDesc\",\r\n    0xC428 : \"OceApplicationSelector\",\r\n    0xC429 : \"OceIDNumber\",\r\n    0xC42A : \"OceImageLogic\",\r\n    0xC44F : \"Annotations\",\r\n    0xC4A5 : \"PrintIM\",\r\n    0xC580 : \"USPTOOriginalContentType\",\r\n    0xC612 : \"DNGVersion\",\r\n    0xC613 : \"DNGBackwardVersion\",\r\n    0xC614 : \"UniqueCameraModel\",\r\n    0xC615 : \"LocalizedCameraModel\",\r\n    0xC616 : \"CFAPlaneColor\",\r\n    0xC617 : \"CFALayout\",\r\n    0xC618 : \"LinearizationTable\",\r\n    0xC619 : \"BlackLevelRepeatDim\",\r\n    0xC61A : \"BlackLevel\",\r\n    0xC61B : \"BlackLevelDeltaH\",\r\n    0xC61C : \"BlackLevelDeltaV\",\r\n    0xC61D : \"WhiteLevel\",\r\n    0xC61E : \"DefaultScale\",\r\n    0xC61F : \"DefaultCropOrigin\",\r\n    0xC620 : \"DefaultCropSize\",\r\n    0xC621 : \"ColorMatrix1\",\r\n    0xC622 : \"ColorMatrix2\",\r\n    0xC623 : \"CameraCalibration1\",\r\n    0xC624 : \"CameraCalibration2\",\r\n    0xC625 : \"ReductionMatrix1\",\r\n    0xC626 : \"ReductionMatrix2\",\r\n    0xC627 : \"AnalogBalance\",\r\n    0xC628 : \"AsShotNeutral\",\r\n    0xC629 : \"AsShotWhiteXY\",\r\n    0xC62A : \"BaselineExposure\",\r\n    0xC62B : \"BaselineNoise\",\r\n    0xC62C : \"BaselineSharpness\",\r\n    0xC62D : \"BayerGreenSplit\",\r\n    0xC62E : \"LinearResponseLimit\",\r\n    0xC62F : \"CameraSerialNumber\",\r\n    0xC630 : \"DNGLensInfo\",\r\n    0xC631 : \"ChromaBlurRadius\",\r\n    0xC632 : \"AntiAliasStrength\",\r\n    0xC633 : \"ShadowScale\",\r\n    0xC634 : \"DNGPrivateData\",\r\n    0xC635 : \"MakerNoteSafety\",\r\n    0xC640 : \"RawImageSegmentation\",\r\n    0xC65A : \"CalibrationIlluminant1\",\r\n    0xC65B : \"CalibrationIlluminant2\",\r\n    0xC65C : \"BestQualityScale\",\r\n    0xC65D : \"RawDataUniqueID\",\r\n    0xC660 : \"AliasLayerMetadata\",\r\n    0xC68B : \"OriginalRawFileName\",\r\n    0xC68C : \"OriginalRawFileData\",\r\n    0xC68D : \"ActiveArea\",\r\n    0xC68E : \"MaskedAreas\",\r\n    0xC68F : \"AsShotICCProfile\",\r\n    0xC690 : \"AsShotPreProfileMatrix\",\r\n    0xC691 : \"CurrentICCProfile\",\r\n    0xC692 : \"CurrentPreProfileMatrix\",\r\n    0xC6BF : \"ColorimetricReference\",\r\n    0xC6D2 : \"PanasonicTitle\",\r\n    0xC6D3 : \"PanasonicTitle2\",\r\n    0xC6F3 : \"CameraCalibrationSig\",\r\n    0xC6F4 : \"ProfileCalibrationSig\",\r\n    0xC6F5 : \"ProfileIFD\",\r\n    0xC6F6 : \"AsShotProfileName\",\r\n    0xC6F7 : \"NoiseReductionApplied\",\r\n    0xC6F8 : \"ProfileName\",\r\n    0xC6F9 : \"ProfileHueSatMapDims\",\r\n    0xC6FA : \"ProfileHueSatMapData1\",\r\n    0xC6FB : \"ProfileHueSatMapData2\",\r\n    0xC6FC : \"ProfileToneCurve\",\r\n    0xC6FD : \"ProfileEmbedPolicy\",\r\n    0xC6FE : \"ProfileCopyright\",\r\n    0xC714 : \"ForwardMatrix1\",\r\n    0xC715 : \"ForwardMatrix2\",\r\n    0xC716 : \"PreviewApplicationName\",\r\n    0xC717 : \"PreviewApplicationVersion\",\r\n    0xC718 : \"PreviewSettingsName\",\r\n    0xC719 : \"PreviewSettingsDigest\",\r\n    0xC71A : \"PreviewColorSpace\",\r\n    0xC71B : \"PreviewDateTime\",\r\n    0xC71C : \"RawImageDigest\",\r\n    0xC71D : \"OriginalRawFileDigest\",\r\n    0xC71E : \"SubTileBlockSize\",\r\n    0xC71F : \"RowInterleaveFactor\",\r\n    0xC725 : \"ProfileLookTableDims\",\r\n    0xC726 : \"ProfileLookTableData\",\r\n    0xC740 : \"OpcodeList1\",\r\n    0xC741 : \"OpcodeList2\",\r\n    0xC74E : \"OpcodeList3\",\r\n    0xC761 : \"NoiseProfile\",\r\n    0xC763 : \"TimeCodes\",\r\n    0xC764 : \"FrameRate\",\r\n    0xC772 : \"TStop\",\r\n    0xC789 : \"ReelName\",\r\n    0xC791 : \"OriginalDefaultFinalSize\",\r\n    0xC792 : \"OriginalBestQualitySize\",\r\n    0xC793 : \"OriginalDefaultCropSize\",\r\n    0xC7A1 : \"CameraLabel\",\r\n    0xC7A3 : \"ProfileHueSatMapEncoding\",\r\n    0xC7A4 : \"ProfileLookTableEncoding\",\r\n    0xC7A5 : \"BaselineExposureOffset\",\r\n    0xC7A6 : \"DefaultBlackRender\",\r\n    0xC7A7 : \"NewRawImageDigest\",\r\n    0xC7A8 : \"RawToPreviewGain\",\r\n    0xC7B5 : \"DefaultUserCrop\",\r\n    0xEA1C : \"Padding\",\r\n    0xEA1D : \"OffsetSchema\",\r\n    0xFDE8 : \"OwnerName\",\r\n    0xFDE9 : \"SerialNumber\",\r\n    0xFDEA : \"Lens\",\r\n    0xFE00 : \"KDC_IFD\",\r\n    0xFE4C : \"RawFile\",\r\n    0xFE4D : \"Converter\",\r\n    0xFE4E : \"WhiteBalance\",\r\n    0xFE51 : \"Exposure\",\r\n    0xFE52 : \"Shadows\",\r\n    0xFE53 : \"Brightness\",\r\n    0xFE54 : \"Contrast\",\r\n    0xFE55 : \"Saturation\",\r\n    0xFE56 : \"Sharpness\",\r\n    0xFE57 : \"Smoothness\",\r\n    0xFE58 : \"MoireFilter\"\r\n\r\n  },\r\n\r\n  // GPS Tags\r\n  gps : {\r\n\r\n    0x0000 : 'GPSVersionID',\r\n    0x0001 : 'GPSLatitudeRef',\r\n    0x0002 : 'GPSLatitude',\r\n    0x0003 : 'GPSLongitudeRef',\r\n    0x0004 : 'GPSLongitude',\r\n    0x0005 : 'GPSAltitudeRef',\r\n    0x0006 : 'GPSAltitude',\r\n    0x0007 : 'GPSTimeStamp',\r\n    0x0008 : 'GPSSatellites',\r\n    0x0009 : 'GPSStatus',\r\n    0x000A : 'GPSMeasureMode',\r\n    0x000B : 'GPSDOP',\r\n    0x000C : 'GPSSpeedRef',\r\n    0x000D : 'GPSSpeed',\r\n    0x000E : 'GPSTrackRef',\r\n    0x000F : 'GPSTrack',\r\n    0x0010 : 'GPSImgDirectionRef',\r\n    0x0011 : 'GPSImgDirection',\r\n    0x0012 : 'GPSMapDatum',\r\n    0x0013 : 'GPSDestLatitudeRef',\r\n    0x0014 : 'GPSDestLatitude',\r\n    0x0015 : 'GPSDestLongitudeRef',\r\n    0x0016 : 'GPSDestLongitude',\r\n    0x0017 : 'GPSDestBearingRef',\r\n    0x0018 : 'GPSDestBearing',\r\n    0x0019 : 'GPSDestDistanceRef',\r\n    0x001A : 'GPSDestDistance',\r\n    0x001B : 'GPSProcessingMethod',\r\n    0x001C : 'GPSAreaInformation',\r\n    0x001D : 'GPSDateStamp',\r\n    0x001E : 'GPSDifferential',\r\n    0x001F : 'GPSHPositioningError'\r\n\r\n  }\r\n\r\n};"]},"metadata":{},"sourceType":"script"}