{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _has2 = require('lodash/has');\n\nvar _has3 = _interopRequireDefault(_has2);\n\nvar _calendar = require('./calendar');\n\nObject.defineProperty(exports, 'default', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_calendar).default;\n  }\n});\n\nrequire('@webex/internal-plugin-device');\n\nrequire('@webex/internal-plugin-encryption');\n\nrequire('@webex/internal-plugin-conversation');\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _calendar2 = _interopRequireDefault(_calendar);\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\n(0, _webexCore.registerInternalPlugin)('calendar', _calendar2.default, {\n  config: _config2.default,\n  payloadTransformer: {\n    predicates: [{\n      name: 'transformMeetingNotes',\n      direction: 'inbound',\n      test: function test(ctx, response) {\n        return _promise2.default.resolve((0, _has3.default)(response, 'body.encryptedNotes'));\n      },\n      extract: function extract(response) {\n        return _promise2.default.resolve(response.body);\n      }\n    }, {\n      name: 'transformMeetingParticipants',\n      direction: 'inbound',\n      test: function test(ctx, response) {\n        return _promise2.default.resolve((0, _has3.default)(response, 'body.encryptedParticipants'));\n      },\n      extract: function extract(response) {\n        return _promise2.default.resolve(response.body);\n      }\n    }, {\n      name: 'transformMeetingArray',\n      direction: 'inbound',\n      test: function test(ctx, response) {\n        return _promise2.default.resolve((0, _has3.default)(response, 'body.items[0].seriesId'));\n      },\n      extract: function extract(response) {\n        return _promise2.default.resolve(response.body.items);\n      }\n    }, {\n      name: 'transformMeeting',\n      direction: 'inbound',\n      test: function test(ctx, response) {\n        return _promise2.default.resolve((0, _has3.default)(response, 'body.seriesId'));\n      },\n      extract: function extract(response) {\n        return _promise2.default.resolve(response.body);\n      }\n    }, {\n      name: 'transformMeeting',\n      direction: 'inbound',\n      test: function test(ctx, response) {\n        return _promise2.default.resolve((0, _has3.default)(response, 'calendarMeetingExternal'));\n      },\n      extract: function extract(response) {\n        return _promise2.default.resolve(response.calendarMeetingExternal);\n      }\n    }],\n    transforms: [{\n      name: 'transformMeetingArray',\n      fn: function fn(ctx, array) {\n        return _promise2.default.all(array.map(function (item) {\n          return ctx.transform('transformMeeting', item);\n        }));\n      }\n    }, {\n      name: 'transformMeeting',\n      direction: 'inbound',\n      fn: function fn(ctx, object) {\n        if (!object) {\n          return _promise2.default.resolve();\n        }\n\n        if (!object.encryptionKeyUrl) {\n          return _promise2.default.resolve();\n        } // Decrypt participant properties if meeting object contains participants\n\n\n        var decryptedParticipants = object.encryptedParticipants ? object.encryptedParticipants.map(function (participant) {\n          return _promise2.default.all([ctx.transform('decryptTextProp', 'encryptedEmailAddress', object.encryptionKeyUrl, participant), ctx.transform('decryptTextProp', 'encryptedName', object.encryptionKeyUrl, participant)]);\n        }) : [];\n        return _promise2.default.all([ctx.transform('decryptTextProp', 'encryptedSubject', object.encryptionKeyUrl, object), ctx.transform('decryptTextProp', 'encryptedLocation', object.encryptionKeyUrl, object), ctx.transform('decryptTextProp', 'encryptedNotes', object.encryptionKeyUrl, object), ctx.transform('decryptTextProp', 'webexURI', object.encryptionKeyUrl, object), ctx.transform('decryptTextProp', 'webexURL', object.encryptionKeyUrl, object), ctx.transform('decryptTextProp', 'spaceMeetURL', object.encryptionKeyUrl, object), ctx.transform('decryptTextProp', 'spaceURI', object.encryptionKeyUrl, object), ctx.transform('decryptTextProp', 'spaceURL', object.encryptionKeyUrl, object)].concat(decryptedParticipants));\n      }\n    }, {\n      name: 'transformMeetingNotes',\n      direction: 'inbound',\n      fn: function fn(ctx, object) {\n        if (!object) {\n          return _promise2.default.resolve();\n        }\n\n        if (!object.encryptionKeyUrl) {\n          return _promise2.default.resolve();\n        }\n\n        return _promise2.default.all([ctx.transform('decryptTextProp', 'encryptedNotes', object.encryptionKeyUrl, object)]);\n      }\n    }, {\n      name: 'transformMeetingParticipants',\n      direction: 'inbound',\n      fn: function fn(ctx, object) {\n        if (!object) {\n          return _promise2.default.resolve();\n        }\n\n        if (!object.encryptionKeyUrl || !object.encryptedParticipants) {\n          return _promise2.default.resolve();\n        } // Decrypt participant properties\n\n\n        var decryptedParticipants = object.encryptedParticipants.map(function (participant) {\n          return _promise2.default.all([ctx.transform('decryptTextProp', 'encryptedEmailAddress', object.encryptionKeyUrl, participant), ctx.transform('decryptTextProp', 'encryptedName', object.encryptionKeyUrl, participant)]);\n        });\n        return _promise2.default.all(decryptedParticipants);\n      }\n    }]\n  }\n});","map":{"version":3,"sources":["index.js"],"names":["Calendar","config","payloadTransformer","predicates","name","direction","test","extract","response","transforms","fn","ctx","object","decryptedParticipants","default"],"mappings":";;;;;;;;;;;;;;;AAWA,IAAA,SAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;;;;6CAyIQc,O;;;;AAhJR,OAAA,CAAA,+BAAA,CAAA;;AACA,OAAA,CAAA,mCAAA,CAAA;;AACA,OAAA,CAAA,qCAAA,CAAA;;AAEA,IAAA,UAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;;;AAIA,IAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;;;;;;;;AAZA;;;;;AAcA,CAAA,GAAA,UAAA,CAAA,sBAAA,EAAA,UAAA,EAAmCd,UAAAA,CAAnC,OAAA,EAA6C;AAC3CC,EAAAA,MAAAA,EAAAA,QAAAA,CAD2C,OAAA;AAE3CC,EAAAA,kBAAAA,EAAoB;AAClBC,IAAAA,UAAAA,EAAY,CACV;AACEC,MAAAA,IAAAA,EADF,uBAAA;AAEEC,MAAAA,SAAAA,EAFF,SAAA;AAGEC,MAAAA,IAHF,EAAA,SAAA,IAAA,CAAA,GAAA,EAAA,QAAA,EAGsB;AAClB,eAAO,SAAA,CAAA,OAAA,CAAA,OAAA,CAAgB,CAAA,GAAA,KAAA,CAAA,OAAA,EAAA,QAAA,EAAvB,qBAAuB,CAAhB,CAAP;AAJJ,OAAA;AAMEC,MAAAA,OANF,EAAA,SAAA,OAAA,CAAA,QAAA,EAMoB;AAChB,eAAO,SAAA,CAAA,OAAA,CAAA,OAAA,CAAgBC,QAAAA,CAAvB,IAAO,CAAP;AACD;AARH,KADU,EAWV;AACEJ,MAAAA,IAAAA,EADF,8BAAA;AAEEC,MAAAA,SAAAA,EAFF,SAAA;AAGEC,MAAAA,IAHF,EAAA,SAAA,IAAA,CAAA,GAAA,EAAA,QAAA,EAGsB;AAClB,eAAO,SAAA,CAAA,OAAA,CAAA,OAAA,CAAgB,CAAA,GAAA,KAAA,CAAA,OAAA,EAAA,QAAA,EAAvB,4BAAuB,CAAhB,CAAP;AAJJ,OAAA;AAMEC,MAAAA,OANF,EAAA,SAAA,OAAA,CAAA,QAAA,EAMoB;AAChB,eAAO,SAAA,CAAA,OAAA,CAAA,OAAA,CAAgBC,QAAAA,CAAvB,IAAO,CAAP;AACD;AARH,KAXU,EAqBV;AACEJ,MAAAA,IAAAA,EADF,uBAAA;AAEEC,MAAAA,SAAAA,EAFF,SAAA;AAGEC,MAAAA,IAHF,EAAA,SAAA,IAAA,CAAA,GAAA,EAAA,QAAA,EAGsB;AAClB,eAAO,SAAA,CAAA,OAAA,CAAA,OAAA,CAAgB,CAAA,GAAA,KAAA,CAAA,OAAA,EAAA,QAAA,EAAvB,wBAAuB,CAAhB,CAAP;AAJJ,OAAA;AAMEC,MAAAA,OANF,EAAA,SAAA,OAAA,CAAA,QAAA,EAMoB;AAChB,eAAO,SAAA,CAAA,OAAA,CAAA,OAAA,CAAgBC,QAAAA,CAAAA,IAAAA,CAAvB,KAAO,CAAP;AACD;AARH,KArBU,EA+BV;AACEJ,MAAAA,IAAAA,EADF,kBAAA;AAEEC,MAAAA,SAAAA,EAFF,SAAA;AAGEC,MAAAA,IAHF,EAAA,SAAA,IAAA,CAAA,GAAA,EAAA,QAAA,EAGsB;AAClB,eAAO,SAAA,CAAA,OAAA,CAAA,OAAA,CAAgB,CAAA,GAAA,KAAA,CAAA,OAAA,EAAA,QAAA,EAAvB,eAAuB,CAAhB,CAAP;AAJJ,OAAA;AAMEC,MAAAA,OANF,EAAA,SAAA,OAAA,CAAA,QAAA,EAMoB;AAChB,eAAO,SAAA,CAAA,OAAA,CAAA,OAAA,CAAgBC,QAAAA,CAAvB,IAAO,CAAP;AACD;AARH,KA/BU,EAyCV;AACEJ,MAAAA,IAAAA,EADF,kBAAA;AAEEC,MAAAA,SAAAA,EAFF,SAAA;AAGEC,MAAAA,IAHF,EAAA,SAAA,IAAA,CAAA,GAAA,EAAA,QAAA,EAGsB;AAClB,eAAO,SAAA,CAAA,OAAA,CAAA,OAAA,CAAgB,CAAA,GAAA,KAAA,CAAA,OAAA,EAAA,QAAA,EAAvB,yBAAuB,CAAhB,CAAP;AAJJ,OAAA;AAMEC,MAAAA,OANF,EAAA,SAAA,OAAA,CAAA,QAAA,EAMoB;AAChB,eAAO,SAAA,CAAA,OAAA,CAAA,OAAA,CAAgBC,QAAAA,CAAvB,uBAAO,CAAP;AACD;AARH,KAzCU,CADM;AAqDlBC,IAAAA,UAAAA,EAAY,CACV;AACEL,MAAAA,IAAAA,EADF,uBAAA;AAEEM,MAAAA,EAFF,EAAA,SAAA,EAAA,CAAA,GAAA,EAAA,KAAA,EAEiB;AACb,eAAO,SAAA,CAAA,OAAA,CAAA,GAAA,CAAY,KAAA,CAAA,GAAA,CAAU,UAAA,IAAA,EAAA;AAAA,iBAAUC,GAAAA,CAAAA,SAAAA,CAAAA,kBAAAA,EAAV,IAAUA,CAAV;AAA7B,SAAmB,CAAZ,CAAP;AACD;AAJH,KADU,EAOV;AACEP,MAAAA,IAAAA,EADF,kBAAA;AAEEC,MAAAA,SAAAA,EAFF,SAAA;AAGEK,MAAAA,EAHF,EAAA,SAAA,EAAA,CAAA,GAAA,EAAA,MAAA,EAGkB;AACd,YAAI,CAAJ,MAAA,EAAa;AACX,iBAAO,SAAA,CAAA,OAAA,CAAP,OAAO,EAAP;AACD;;AAED,YAAI,CAACE,MAAAA,CAAL,gBAAA,EAA8B;AAC5B,iBAAO,SAAA,CAAA,OAAA,CAAP,OAAO,EAAP;AACD,SAPa,CASd;;;AACA,YAAMC,qBAAAA,GAAwB,MAAA,CAAA,qBAAA,GAA+B,MAAA,CAAA,qBAAA,CAAA,GAAA,CAAiC,UAAA,WAAA,EAAA;AAAA,iBAAiB,SAAA,CAAA,OAAA,CAAA,GAAA,CAAY,CACzHF,GAAAA,CAAAA,SAAAA,CAAAA,iBAAAA,EAAAA,uBAAAA,EAA0DC,MAAAA,CAA1DD,gBAAAA,EADyH,WACzHA,CADyH,EAEzHA,GAAAA,CAAAA,SAAAA,CAAAA,iBAAAA,EAAAA,eAAAA,EAAkDC,MAAAA,CAAlDD,gBAAAA,EAF4F,WAE5FA,CAFyH,CAAZ,CAAjB;AAAhE,SAA+B,CAA/B,GAA9B,EAAA;AAKA,eAAO,SAAA,CAAA,OAAA,CAAA,GAAA,CAAY,CACjBA,GAAAA,CAAAA,SAAAA,CAAAA,iBAAAA,EAAAA,kBAAAA,EAAqDC,MAAAA,CAArDD,gBAAAA,EADiB,MACjBA,CADiB,EAEjBA,GAAAA,CAAAA,SAAAA,CAAAA,iBAAAA,EAAAA,mBAAAA,EAAsDC,MAAAA,CAAtDD,gBAAAA,EAFiB,MAEjBA,CAFiB,EAGjBA,GAAAA,CAAAA,SAAAA,CAAAA,iBAAAA,EAAAA,gBAAAA,EAAmDC,MAAAA,CAAnDD,gBAAAA,EAHiB,MAGjBA,CAHiB,EAIjBA,GAAAA,CAAAA,SAAAA,CAAAA,iBAAAA,EAAAA,UAAAA,EAA6CC,MAAAA,CAA7CD,gBAAAA,EAJiB,MAIjBA,CAJiB,EAKjBA,GAAAA,CAAAA,SAAAA,CAAAA,iBAAAA,EAAAA,UAAAA,EAA6CC,MAAAA,CAA7CD,gBAAAA,EALiB,MAKjBA,CALiB,EAMjBA,GAAAA,CAAAA,SAAAA,CAAAA,iBAAAA,EAAAA,cAAAA,EAAiDC,MAAAA,CAAjDD,gBAAAA,EANiB,MAMjBA,CANiB,EAOjBA,GAAAA,CAAAA,SAAAA,CAAAA,iBAAAA,EAAAA,UAAAA,EAA6CC,MAAAA,CAA7CD,gBAAAA,EAPiB,MAOjBA,CAPiB,EAQjBA,GAAAA,CAAAA,SAAAA,CAAAA,iBAAAA,EAAAA,UAAAA,EAA6CC,MAAAA,CAA7CD,gBAAAA,EARiB,MAQjBA,CARiB,EAAA,MAAA,CAAnB,qBAAmB,CAAZ,CAAP;AAUD;AA5BH,KAPU,EAqCV;AACEP,MAAAA,IAAAA,EADF,uBAAA;AAEEC,MAAAA,SAAAA,EAFF,SAAA;AAGEK,MAAAA,EAHF,EAAA,SAAA,EAAA,CAAA,GAAA,EAAA,MAAA,EAGkB;AACd,YAAI,CAAJ,MAAA,EAAa;AACX,iBAAO,SAAA,CAAA,OAAA,CAAP,OAAO,EAAP;AACD;;AAED,YAAI,CAACE,MAAAA,CAAL,gBAAA,EAA8B;AAC5B,iBAAO,SAAA,CAAA,OAAA,CAAP,OAAO,EAAP;AACD;;AAED,eAAO,SAAA,CAAA,OAAA,CAAA,GAAA,CAAY,CACjBD,GAAAA,CAAAA,SAAAA,CAAAA,iBAAAA,EAAAA,gBAAAA,EAAmDC,MAAAA,CAAnDD,gBAAAA,EADF,MACEA,CADiB,CAAZ,CAAP;AAGD;AAfH,KArCU,EAsDV;AACEP,MAAAA,IAAAA,EADF,8BAAA;AAEEC,MAAAA,SAAAA,EAFF,SAAA;AAGEK,MAAAA,EAHF,EAAA,SAAA,EAAA,CAAA,GAAA,EAAA,MAAA,EAGkB;AACd,YAAI,CAAJ,MAAA,EAAa;AACX,iBAAO,SAAA,CAAA,OAAA,CAAP,OAAO,EAAP;AACD;;AAED,YAAI,CAACE,MAAAA,CAAD,gBAAA,IAA4B,CAACA,MAAAA,CAAjC,qBAAA,EAA+D;AAC7D,iBAAO,SAAA,CAAA,OAAA,CAAP,OAAO,EAAP;AACD,SAPa,CASd;;;AACA,YAAMC,qBAAAA,GAAwB,MAAA,CAAA,qBAAA,CAAA,GAAA,CAAiC,UAAA,WAAA,EAAA;AAAA,iBAAiB,SAAA,CAAA,OAAA,CAAA,GAAA,CAAY,CAC1FF,GAAAA,CAAAA,SAAAA,CAAAA,iBAAAA,EAAAA,uBAAAA,EAA0DC,MAAAA,CAA1DD,gBAAAA,EAD0F,WAC1FA,CAD0F,EAE1FA,GAAAA,CAAAA,SAAAA,CAAAA,iBAAAA,EAAAA,eAAAA,EAAkDC,MAAAA,CAAlDD,gBAAAA,EAF6D,WAE7DA,CAF0F,CAAZ,CAAjB;AAA/D,SAA8B,CAA9B;AAKA,eAAO,SAAA,CAAA,OAAA,CAAA,GAAA,CAAP,qBAAO,CAAP;AACD;AAnBH,KAtDU;AArDM;AAFuB,CAA7C","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport '@webex/internal-plugin-device';\nimport '@webex/internal-plugin-encryption';\nimport '@webex/internal-plugin-conversation';\n\nimport {registerInternalPlugin} from '@webex/webex-core';\nimport {has} from 'lodash';\n\nimport Calendar from './calendar';\nimport config from './config';\n\nregisterInternalPlugin('calendar', Calendar, {\n  config,\n  payloadTransformer: {\n    predicates: [\n      {\n        name: 'transformMeetingNotes',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(has(response, 'body.encryptedNotes'));\n        },\n        extract(response) {\n          return Promise.resolve(response.body);\n        }\n      },\n      {\n        name: 'transformMeetingParticipants',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(has(response, 'body.encryptedParticipants'));\n        },\n        extract(response) {\n          return Promise.resolve(response.body);\n        }\n      },\n      {\n        name: 'transformMeetingArray',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(has(response, 'body.items[0].seriesId'));\n        },\n        extract(response) {\n          return Promise.resolve(response.body.items);\n        }\n      },\n      {\n        name: 'transformMeeting',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(has(response, 'body.seriesId'));\n        },\n        extract(response) {\n          return Promise.resolve(response.body);\n        }\n      },\n      {\n        name: 'transformMeeting',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(has(response, 'calendarMeetingExternal'));\n        },\n        extract(response) {\n          return Promise.resolve(response.calendarMeetingExternal);\n        }\n      }\n    ],\n    transforms: [\n      {\n        name: 'transformMeetingArray',\n        fn(ctx, array) {\n          return Promise.all(array.map((item) => ctx.transform('transformMeeting', item)));\n        }\n      },\n      {\n        name: 'transformMeeting',\n        direction: 'inbound',\n        fn(ctx, object) {\n          if (!object) {\n            return Promise.resolve();\n          }\n\n          if (!object.encryptionKeyUrl) {\n            return Promise.resolve();\n          }\n\n          // Decrypt participant properties if meeting object contains participants\n          const decryptedParticipants = object.encryptedParticipants ? object.encryptedParticipants.map((participant) => Promise.all([\n            ctx.transform('decryptTextProp', 'encryptedEmailAddress', object.encryptionKeyUrl, participant),\n            ctx.transform('decryptTextProp', 'encryptedName', object.encryptionKeyUrl, participant)\n          ])) : [];\n\n          return Promise.all([\n            ctx.transform('decryptTextProp', 'encryptedSubject', object.encryptionKeyUrl, object),\n            ctx.transform('decryptTextProp', 'encryptedLocation', object.encryptionKeyUrl, object),\n            ctx.transform('decryptTextProp', 'encryptedNotes', object.encryptionKeyUrl, object),\n            ctx.transform('decryptTextProp', 'webexURI', object.encryptionKeyUrl, object),\n            ctx.transform('decryptTextProp', 'webexURL', object.encryptionKeyUrl, object),\n            ctx.transform('decryptTextProp', 'spaceMeetURL', object.encryptionKeyUrl, object),\n            ctx.transform('decryptTextProp', 'spaceURI', object.encryptionKeyUrl, object),\n            ctx.transform('decryptTextProp', 'spaceURL', object.encryptionKeyUrl, object)\n          ].concat(decryptedParticipants));\n        }\n      },\n      {\n        name: 'transformMeetingNotes',\n        direction: 'inbound',\n        fn(ctx, object) {\n          if (!object) {\n            return Promise.resolve();\n          }\n\n          if (!object.encryptionKeyUrl) {\n            return Promise.resolve();\n          }\n\n          return Promise.all([\n            ctx.transform('decryptTextProp', 'encryptedNotes', object.encryptionKeyUrl, object)\n          ]);\n        }\n      },\n      {\n        name: 'transformMeetingParticipants',\n        direction: 'inbound',\n        fn(ctx, object) {\n          if (!object) {\n            return Promise.resolve();\n          }\n\n          if (!object.encryptionKeyUrl || !object.encryptedParticipants) {\n            return Promise.resolve();\n          }\n\n          // Decrypt participant properties\n          const decryptedParticipants = object.encryptedParticipants.map((participant) => Promise.all([\n            ctx.transform('decryptTextProp', 'encryptedEmailAddress', object.encryptionKeyUrl, participant),\n            ctx.transform('decryptTextProp', 'encryptedName', object.encryptionKeyUrl, participant)\n          ]));\n\n          return Promise.all(decryptedParticipants);\n        }\n      }\n    ]\n  }\n});\n\nexport {default} from './calendar';\n"]},"metadata":{},"sourceType":"script"}