{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport CertificateRevocationList from \"./CertificateRevocationList.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC7292\r\n */\n\nexport default class CRLBag {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for CRLBag class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc crlId\r\n     */\n    this.crlId = getParametersValue(parameters, \"crlId\", CRLBag.defaultValues(\"crlId\"));\n    /**\r\n     * @type {*}\r\n     * @desc crlValue\r\n     */\n\n    this.crlValue = getParametersValue(parameters, \"crlValue\", CRLBag.defaultValues(\"crlValue\"));\n    if (\"parsedValue\" in parameters)\n      /**\r\n       * @type {*}\r\n       * @desc parsedValue\r\n       */\n      this.parsedValue = getParametersValue(parameters, \"parsedValue\", CRLBag.defaultValues(\"parsedValue\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"crlId\":\n        return \"\";\n\n      case \"crlValue\":\n        return new asn1js.Any();\n\n      case \"parsedValue\":\n        return {};\n\n      default:\n        throw new Error(`Invalid member name for CRLBag class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"crlId\":\n        return memberValue === \"\";\n\n      case \"crlValue\":\n        return memberValue instanceof asn1js.Any;\n\n      case \"parsedValue\":\n        return memberValue instanceof Object && Object.keys(memberValue).length === 0;\n\n      default:\n        throw new Error(`Invalid member name for CRLBag class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * CRLBag ::= SEQUENCE {\r\n   *    crlId     \tBAG-TYPE.&id ({CRLTypes}),\r\n   *    crlValue \t[0] EXPLICIT BAG-TYPE.&Type ({CRLTypes}{@crlId})\r\n   *}\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [id]\r\n     * @property {string} [value]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.ObjectIdentifier({\n        name: names.id || \"id\"\n      }), new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [new asn1js.Any({\n          name: names.value || \"value\"\n        })] // EXPLICIT ANY value\n\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"crlId\", \"crlValue\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, CRLBag.schema({\n      names: {\n        id: \"crlId\",\n        value: \"crlValue\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for CRLBag\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.crlId = asn1.result.crlId.valueBlock.toString();\n    this.crlValue = asn1.result.crlValue;\n\n    switch (this.crlId) {\n      case \"1.2.840.113549.1.9.23.1\":\n        // x509CRL\n        {\n          const asn1Inner = asn1js.fromBER(this.certValue.valueBlock.valueHex);\n          this.parsedValue = new CertificateRevocationList({\n            schema: asn1Inner.result\n          });\n        }\n        break;\n\n      default:\n        throw new Error(`Incorrect \"crlId\" value in CRLBag: ${this.crlId}`);\n    } //endregion\n\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    if (\"parsedValue\" in this) {\n      this.certId = \"1.2.840.113549.1.9.23.1\";\n      this.certValue = new asn1js.OctetString({\n        valueHex: this.parsedValue.toSchema().toBER(false)\n      });\n    }\n\n    return new asn1js.Sequence({\n      value: [new asn1js.ObjectIdentifier({\n        value: this.crlId\n      }), new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [this.crlValue.toSchema()]\n      })]\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      crlId: this.crlId,\n      crlValue: this.crlValue.toJSON()\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/CRLBag.js"],"names":["asn1js","getParametersValue","clearProps","CertificateRevocationList","CRLBag","constructor","parameters","crlId","defaultValues","crlValue","parsedValue","fromSchema","schema","memberName","Any","Error","compareWithDefault","memberValue","Object","keys","length","names","Sequence","name","blockName","value","ObjectIdentifier","id","Constructed","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","valueBlock","toString","asn1Inner","fromBER","certValue","valueHex","toSchema","certId","OctetString","toBER","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport CertificateRevocationList from \"./CertificateRevocationList.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class CRLBag\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CRLBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc crlId\r\n\t\t */\r\n\t\tthis.crlId = getParametersValue(parameters, \"crlId\", CRLBag.defaultValues(\"crlId\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @desc crlValue\r\n\t\t */\r\n\t\tthis.crlValue = getParametersValue(parameters, \"crlValue\", CRLBag.defaultValues(\"crlValue\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", CRLBag.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crlId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"crlValue\":\r\n\t\t\t\treturn (new asn1js.Any());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CRLBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crlId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"crlValue\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CRLBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CRLBag ::= SEQUENCE {\r\n\t *    crlId     \tBAG-TYPE.&id ({CRLTypes}),\r\n\t *    crlValue \t[0] EXPLICIT BAG-TYPE.&Type ({CRLTypes}{@crlId})\r\n\t *}\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [id]\r\n\t\t * @property {string} [value]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.value || \"value\") })] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"crlId\",\r\n\t\t\t\"crlValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCRLBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tid: \"crlId\",\r\n\t\t\t\t\tvalue: \"crlValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CRLBag\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.crlId = asn1.result.crlId.valueBlock.toString();\r\n\t\tthis.crlValue = asn1.result.crlValue;\r\n\t\t\r\n\t\tswitch(this.crlId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.9.23.1\": // x509CRL\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1Inner = asn1js.fromBER(this.certValue.valueBlock.valueHex);\r\n\t\t\t\t\tthis.parsedValue = new CertificateRevocationList({ schema: asn1Inner.result });\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Incorrect \"crlId\" value in CRLBag: ${this.crlId}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tif(\"parsedValue\" in this)\r\n\t\t{\r\n\t\t\tthis.certId = \"1.2.840.113549.1.9.23.1\";\r\n\t\t\tthis.certValue = new asn1js.OctetString({ valueHex: this.parsedValue.toSchema().toBER(false) });\r\n\t\t}\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.crlId }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.crlValue.toSchema()]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcrlId: this.crlId,\r\n\t\t\tcrlValue: this.crlValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}