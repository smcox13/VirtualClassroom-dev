{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _bowser = require('bowser');\n\nvar _bowser2 = _interopRequireDefault(_bowser);\n\nvar _constants = require('../constants');\n\nvar _loggerProxy = require('../common/logs/logger-proxy');\n\nvar _loggerProxy2 = _interopRequireDefault(_loggerProxy);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar MediaUtil = {};\n/* globals window, MediaStream */\n\nMediaUtil.createPeerConnection = function () {\n  return new window.RTCPeerConnection(_bowser2.default.firefox ? _constants.RTC_CONFIGURATION_FIREFOX : _constants.RTC_CONFIGURATION);\n};\n\nMediaUtil.createMediaStream = function (tracks) {\n  if (!tracks) {\n    _loggerProxy2.default.logger.error('Tracks don\\'t exist');\n  }\n\n  var filtredTracks = tracks.filter(function (element) {\n    return !!element;\n  });\n  return new MediaStream(filtredTracks);\n};\n\nexports.default = MediaUtil;","map":{"version":3,"sources":["util.js"],"names":["MediaUtil","window","bowser","RTC_CONFIGURATION_FIREFOX","RTC_CONFIGURATION","LoggerProxy","filtredTracks"],"mappings":";;;;;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;;;AAEA,IAAA,UAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAIA,IAAA,YAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;;;;;;;;;AAEA,IAAMA,SAAAA,GAAN,EAAA;AATA;;AAWAA,SAAAA,CAAAA,oBAAAA,GAAiC,YAAA;AAAA,SAAM,IAAIC,MAAAA,CAAJ,iBAAA,CACrCC,QAAAA,CAAAA,OAAAA,CAAAA,OAAAA,GAAiBC,UAAAA,CAAjBD,yBAAAA,GAA6CE,UAAAA,CADd,iBAAM,CAAN;AAAjCJ,CAAAA;;AAIAA,SAAAA,CAAAA,iBAAAA,GAA8B,UAAA,MAAA,EAAY;AACxC,MAAI,CAAJ,MAAA,EAAa;AACXK,IAAAA,aAAAA,CAAAA,OAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAAA,qBAAAA;AACD;;AACD,MAAMC,aAAAA,GAAgB,MAAA,CAAA,MAAA,CAAc,UAAA,OAAA,EAAA;AAAA,WAAa,CAAC,CAAd,OAAA;AAApC,GAAsB,CAAtB;AAEA,SAAO,IAAA,WAAA,CAAP,aAAO,CAAP;AANFN,CAAAA;;kBASeA,S","sourcesContent":["/* globals window, MediaStream */\nimport bowser from 'bowser';\n\nimport {\n  RTC_CONFIGURATION,\n  RTC_CONFIGURATION_FIREFOX\n} from '../constants';\nimport LoggerProxy from '../common/logs/logger-proxy';\n\nconst MediaUtil = {};\n\nMediaUtil.createPeerConnection = () => new window.RTCPeerConnection(\n  bowser.firefox ? RTC_CONFIGURATION_FIREFOX : RTC_CONFIGURATION\n);\n\nMediaUtil.createMediaStream = (tracks) => {\n  if (!tracks) {\n    LoggerProxy.logger.error('Tracks don\\'t exist');\n  }\n  const filtredTracks = tracks.filter((element) => !!element);\n\n  return new MediaStream(filtredTracks);\n};\n\nexport default MediaUtil;\n"]},"metadata":{},"sourceType":"script"}