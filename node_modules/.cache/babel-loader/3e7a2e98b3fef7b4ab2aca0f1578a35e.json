{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _forEach2 = require('lodash/forEach');\n\nvar _forEach3 = _interopRequireDefault(_forEach2);\n\nvar _constants = require('../constants');\n\nvar _parameter = require('../common/errors/parameter');\n\nvar _parameter2 = _interopRequireDefault(_parameter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar StatsUtil = {};\n\nStatsUtil.generateSingularOptions = function (senderReceiver, config, meeting, name) {\n  var options = {};\n  options[name] = {};\n  options[name][senderReceiver.correlate] = senderReceiver;\n  StatsUtil.generateOptions(options, config, meeting);\n};\n\nStatsUtil.generateOptions = function (options, config, meeting) {\n  if (!options || !config || !meeting) {\n    throw new _parameter2.default('stats/util->validateInitialization#options, config, and meeting must be provided to execute getStats');\n  }\n\n  StatsUtil.configOptions(meeting, config, options, _constants.STATS.SENDERS);\n  StatsUtil.configOptions(meeting, config, options, _constants.STATS.RECEIVERS);\n};\n\nStatsUtil.configOptions = function (meeting, config, options, name) {\n  if (options[name]) {\n    (0, _forEach3.default)(options[name], function (type) {\n      if (!type.correlate) {\n        throw new _parameter2.default('stats/util->validateInitialization#each ' + type + ' must be provided with a correlate as audio OR video OR share.');\n      }\n\n      if (!config[name][type.correlate]) {\n        return;\n      }\n\n      var typeConfig = config[name][type.correlate];\n      var media = meeting[typeConfig.parent][typeConfig.peerConnection];\n      var filter = media[typeConfig.transceiver][typeConfig.child];\n      (0, _assign2.default)(type, {\n        media: media,\n        filter: filter,\n        name: typeConfig.name\n      });\n    });\n  }\n};\n\nexports.default = StatsUtil;","map":{"version":3,"sources":["util.js"],"names":["StatsUtil","options","senderReceiver","ParameterError","STATS","type","config","typeConfig","media","meeting","filter","name"],"mappings":";;;;;;;;;;;;;;AAEA,IAAA,UAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAGA,IAAA,UAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;;;;;;;;;AAEA,IAAMA,SAAAA,GAAN,EAAA;;AAEAA,SAAAA,CAAAA,uBAAAA,GAAoC,UAAA,cAAA,EAAA,MAAA,EAAA,OAAA,EAAA,IAAA,EAA2C;AAC7E,MAAMC,OAAAA,GAAN,EAAA;AAEAA,EAAAA,OAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAAA;AACAA,EAAAA,OAAAA,CAAAA,IAAAA,CAAAA,CAAcC,cAAAA,CAAdD,SAAAA,IAAAA,cAAAA;AACAD,EAAAA,SAAAA,CAAAA,eAAAA,CAAAA,OAAAA,EAAAA,MAAAA,EAAAA,OAAAA;AALFA,CAAAA;;AAQAA,SAAAA,CAAAA,eAAAA,GAA4B,UAAA,OAAA,EAAA,MAAA,EAAA,OAAA,EAA8B;AACxD,MAAI,CAAA,OAAA,IAAY,CAAZ,MAAA,IAAuB,CAA3B,OAAA,EAAqC;AACnC,UAAM,IAAIG,WAAAA,CAAJ,OAAA,CAAN,sGAAM,CAAN;AACD;;AACDH,EAAAA,SAAAA,CAAAA,aAAAA,CAAAA,OAAAA,EAAAA,MAAAA,EAAAA,OAAAA,EAAkDI,UAAAA,CAAAA,KAAAA,CAAlDJ,OAAAA;AACAA,EAAAA,SAAAA,CAAAA,aAAAA,CAAAA,OAAAA,EAAAA,MAAAA,EAAAA,OAAAA,EAAkDI,UAAAA,CAAAA,KAAAA,CAAlDJ,SAAAA;AALFA,CAAAA;;AAQAA,SAAAA,CAAAA,aAAAA,GAA0B,UAAA,OAAA,EAAA,MAAA,EAAA,OAAA,EAAA,IAAA,EAAoC;AAC5D,MAAIC,OAAAA,CAAJ,IAAIA,CAAJ,EAAmB;AACjB,KAAA,GAAA,SAAA,CAAA,OAAA,EAAQA,OAAAA,CAAR,IAAQA,CAAR,EAAuB,UAAA,IAAA,EAAU;AAC/B,UAAI,CAACI,IAAAA,CAAL,SAAA,EAAqB;AACnB,cAAM,IAAIF,WAAAA,CAAJ,OAAA,CAAA,6CAAA,IAAA,GAAN,gEAAM,CAAN;AACD;;AACD,UAAI,CAACG,MAAAA,CAAAA,IAAAA,CAAAA,CAAaD,IAAAA,CAAlB,SAAKC,CAAL,EAAmC;AACjC;AACD;;AACD,UAAMC,UAAAA,GAAaD,MAAAA,CAAAA,IAAAA,CAAAA,CAAaD,IAAAA,CAAhC,SAAmBC,CAAnB;AACA,UAAME,KAAAA,GAAQC,OAAAA,CAAQF,UAAAA,CAARE,MAAAA,CAAAA,CAA2BF,UAAAA,CAAzC,cAAcE,CAAd;AACA,UAAMC,MAAAA,GAASF,KAAAA,CAAMD,UAAAA,CAANC,WAAAA,CAAAA,CAA8BD,UAAAA,CAA7C,KAAeC,CAAf;AAEA,OAAA,GAAA,QAAA,CAAA,OAAA,EAAA,IAAA,EAAoB;AAACA,QAAAA,KAAAA,EAAD,KAAA;AAAQE,QAAAA,MAAAA,EAAR,MAAA;AAAgBC,QAAAA,IAAAA,EAAMJ,UAAAA,CAA1C;AAAoB,OAApB;AAXF,KAAA;AAaD;AAfHP,CAAAA;;kBAkBeA,S","sourcesContent":["import {forEach} from 'lodash';\n\nimport {\n  STATS\n} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\nconst StatsUtil = {};\n\nStatsUtil.generateSingularOptions = (senderReceiver, config, meeting, name) => {\n  const options = {};\n\n  options[name] = {};\n  options[name][senderReceiver.correlate] = senderReceiver;\n  StatsUtil.generateOptions(options, config, meeting);\n};\n\nStatsUtil.generateOptions = (options, config, meeting) => {\n  if (!options || !config || !meeting) {\n    throw new ParameterError('stats/util->validateInitialization#options, config, and meeting must be provided to execute getStats');\n  }\n  StatsUtil.configOptions(meeting, config, options, STATS.SENDERS);\n  StatsUtil.configOptions(meeting, config, options, STATS.RECEIVERS);\n};\n\nStatsUtil.configOptions = (meeting, config, options, name) => {\n  if (options[name]) {\n    forEach(options[name], (type) => {\n      if (!type.correlate) {\n        throw new ParameterError(`stats/util->validateInitialization#each ${type} must be provided with a correlate as audio OR video OR share.`);\n      }\n      if (!config[name][type.correlate]) {\n        return;\n      }\n      const typeConfig = config[name][type.correlate];\n      const media = meeting[typeConfig.parent][typeConfig.peerConnection];\n      const filter = media[typeConfig.transceiver][typeConfig.child];\n\n      Object.assign(type, {media, filter, name: typeConfig.name});\n    });\n  }\n};\n\nexport default StatsUtil;\n"]},"metadata":{},"sourceType":"script"}