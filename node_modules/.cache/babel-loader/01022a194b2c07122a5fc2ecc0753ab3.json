{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _bowser = require('bowser');\n\nvar _bowser2 = _interopRequireDefault(_bowser);\n\nvar _constants = require('../constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @description MQAProcessor handles interval data for MQA\n * @export\n * @class MQAProcessor\n */\n\n\nvar MQAProcessor = function () {\n  /**\n     * @constructor\n     * @public\n     * @memberof MQAProcessor\n     */\n  function MQAProcessor() {\n    (0, _classCallCheck3.default)(this, MQAProcessor);\n    this.data = {\n      videoReceive: [],\n      audioTransmit: [],\n      audioReceive: [],\n      videoTransmit: []\n    };\n    this.intervalNumber = 1;\n  }\n  /**\n   * @param {String} id\n   * @param {Array<WebRTCData>} interval - a slice of metrics history\n   * @returns {undefined}\n   * @memberof MQAProcessor\n   */\n\n\n  (0, _createClass3.default)(MQAProcessor, [{\n    key: 'process',\n    value: function process(id, interval) {\n      var rtcCandidatePair = void 0,\n          rtcOutVideo = void 0,\n          rtpOutVideo = void 0; // TODO: , rtcInVideo, rtpInVideo, rtcOutAudio, rtcInAudio, rtpInAudio, rtpOutAudio; // TODO:\n\n      var vsTransmit = void 0;\n      var _data = this.data,\n          videoReceive = _data.videoReceive,\n          audioTransmit = _data.audioTransmit,\n          audioReceive = _data.audioReceive,\n          videoTransmit = _data.videoTransmit;\n      var sumValue = interval[0]; // the head is the last interval value, webRTC spec has some values automatically summed\n\n      if (sumValue) {\n        rtcCandidatePair = sumValue.rtcCandidatePair;\n      }\n\n      switch (id) {\n        case _constants.STATS.AUDIO_SENDER_ID:\n          audioTransmit.push();\n          break;\n\n        case _constants.STATS.AUDIO_RECEIVER_ID:\n          audioReceive.push();\n          break;\n\n        case _constants.STATS.VIDEO_SENDER_ID:\n          videoTransmit.push();\n          break;\n\n        case _constants.STATS.VIDEO_RECEIVER_ID:\n          videoReceive.push();\n          break;\n\n        case _constants.STATS.SHARE_SENDER_ID:\n          if (sumValue) {\n            rtcOutVideo = sumValue.rtcOutVideo;\n            rtpOutVideo = sumValue.rtpOutVideo;\n          }\n\n          vsTransmit = (0, _extends3.default)({}, _constants.MQA_STATS.DEFAULT_SHARE_SENDER_STATS);\n\n          if (_bowser2.default.name.toLowerCase() === 'firefox') {\n            vsTransmit.common.remoteLossRate = rtpOutVideo ? rtpOutVideo.pliCount / (interval.length * this.intervalNumber) : -1;\n            vsTransmit.common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : -1;\n            vsTransmit.streams[0].common.transmittedFrameRate = rtcOutVideo ? rtcOutVideo.framesEncoded / (interval.length * this.intervalNumber) : -1;\n            vsTransmit.streams[0].common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : -1;\n          } else {\n            vsTransmit.common.availableBitRate = rtcCandidatePair ? rtcCandidatePair.availableOutgoingBitrate : -1;\n            vsTransmit.common.remoteLossRate = rtpOutVideo ? rtpOutVideo.pliCount / (interval.length * this.intervalNumber) : -1;\n            vsTransmit.common.roundTripTime = rtcCandidatePair ? rtcCandidatePair.totalRoundTripTime / (interval.length * this.intervalNumber) : -1;\n            vsTransmit.common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : -1;\n            vsTransmit.streams[0].common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : -1;\n            vsTransmit.streams[0].common.transmittedBitrate = rtcCandidatePair ? rtcCandidatePair.availableOutgoingBitrate : -1;\n            vsTransmit.streams[0].common.transmittedFrameRate = rtcOutVideo ? rtcOutVideo.framesSent / (interval.length * this.intervalNumber) : -1;\n            vsTransmit.streams[0].transmittedHeight = rtcOutVideo ? rtcOutVideo.frameHeight : -1;\n            vsTransmit.streams[0].transmittedKeyFrames = rtcOutVideo ? rtcOutVideo.hugeFramesSent : -1;\n            vsTransmit.streams[0].transmittedWidth = rtcOutVideo ? rtcOutVideo.frameWidth : -1;\n          }\n\n          videoTransmit.push(vsTransmit);\n          break;\n\n        default:\n          break;\n      }\n\n      this.data.intervalMetadata = this.data.intervalMetadata || (0, _extends3.default)({}, _constants.MQA_STATS.intervalMetadata);\n    }\n    /**\n     * get the data payload for media quality events after they all have been processed\n     * wait to call this until after you have all the data from the interval you want\n     * this method clears the data as a side effect\n     * @returns {Object}\n     * @memberof MQAProcessor\n     */\n\n  }, {\n    key: 'getData',\n    value: function getData() {\n      this.intervalNumber += 1;\n      var payload = (0, _extends3.default)({}, this.data, {\n        intervalNumber: this.intervalNumber\n      });\n      this.data = {\n        videoReceive: [],\n        audioTransmit: [],\n        audioReceive: [],\n        videoTransmit: []\n      };\n      return payload;\n    }\n  }]);\n  return MQAProcessor;\n}();\n\nexports.default = MQAProcessor;","map":{"version":3,"sources":["mqa-processor.js"],"names":["MQAProcessor","videoReceive","audioTransmit","audioReceive","videoTransmit","id","interval","rtcCandidatePair","rtcOutVideo","rtpOutVideo","vsTransmit","sumValue","STATS","MQA_STATS","bowser","payload","intervalNumber"],"mappings":"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","sourcesContent":["import bowser from 'bowser';\n\nimport {\n  STATS,\n  MQA_STATS\n} from '../constants';\n\n\n/**\n * @description MQAProcessor handles interval data for MQA\n * @export\n * @class MQAProcessor\n */\nclass MQAProcessor {\n  /**\n     * @constructor\n     * @public\n     * @memberof MQAProcessor\n     */\n  constructor() {\n    this.data = {\n      videoReceive: [],\n      audioTransmit: [],\n      audioReceive: [],\n      videoTransmit: []\n    };\n    this.intervalNumber = 1;\n  }\n\n  /**\n   * @param {String} id\n   * @param {Array<WebRTCData>} interval - a slice of metrics history\n   * @returns {undefined}\n   * @memberof MQAProcessor\n   */\n  process(id, interval) {\n    let rtcCandidatePair, rtcOutVideo, rtpOutVideo; // TODO: , rtcInVideo, rtpInVideo, rtcOutAudio, rtcInAudio, rtpInAudio, rtpOutAudio; // TODO:\n    let vsTransmit;\n\n    const {\n      videoReceive, audioTransmit, audioReceive, videoTransmit\n    } = this.data;\n\n    const sumValue = interval[0]; // the head is the last interval value, webRTC spec has some values automatically summed\n\n    if (sumValue) {\n      rtcCandidatePair = sumValue.rtcCandidatePair;\n    }\n\n    switch (id) {\n      case STATS.AUDIO_SENDER_ID:\n        audioTransmit.push();\n        break;\n      case STATS.AUDIO_RECEIVER_ID:\n        audioReceive.push();\n        break;\n      case STATS.VIDEO_SENDER_ID:\n        videoTransmit.push();\n        break;\n      case STATS.VIDEO_RECEIVER_ID:\n        videoReceive.push();\n        break;\n      case STATS.SHARE_SENDER_ID:\n        if (sumValue) {\n          rtcOutVideo = sumValue.rtcOutVideo;\n          rtpOutVideo = sumValue.rtpOutVideo;\n        }\n        vsTransmit = {...MQA_STATS.DEFAULT_SHARE_SENDER_STATS};\n        if (bowser.name.toLowerCase() === 'firefox') {\n          vsTransmit.common.remoteLossRate = rtpOutVideo ? rtpOutVideo.pliCount / (interval.length * this.intervalNumber) : -1;\n          vsTransmit.common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : -1;\n          vsTransmit.streams[0].common.transmittedFrameRate = rtcOutVideo ? rtcOutVideo.framesEncoded / (interval.length * this.intervalNumber) : -1;\n          vsTransmit.streams[0].common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : -1;\n        }\n        else {\n          vsTransmit.common.availableBitRate = rtcCandidatePair ? rtcCandidatePair.availableOutgoingBitrate : -1;\n          vsTransmit.common.remoteLossRate = rtpOutVideo ? rtpOutVideo.pliCount / (interval.length * this.intervalNumber) : -1;\n          vsTransmit.common.roundTripTime = rtcCandidatePair ? rtcCandidatePair.totalRoundTripTime / (interval.length * this.intervalNumber) : -1;\n          vsTransmit.common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : -1;\n          vsTransmit.streams[0].common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : -1;\n          vsTransmit.streams[0].common.transmittedBitrate = rtcCandidatePair ? rtcCandidatePair.availableOutgoingBitrate : -1;\n          vsTransmit.streams[0].common.transmittedFrameRate = rtcOutVideo ? rtcOutVideo.framesSent / (interval.length * this.intervalNumber) : -1;\n          vsTransmit.streams[0].transmittedHeight = rtcOutVideo ? rtcOutVideo.frameHeight : -1;\n          vsTransmit.streams[0].transmittedKeyFrames = rtcOutVideo ? rtcOutVideo.hugeFramesSent : -1;\n          vsTransmit.streams[0].transmittedWidth = rtcOutVideo ? rtcOutVideo.frameWidth : -1;\n        }\n        videoTransmit.push(vsTransmit);\n        break;\n      default:\n        break;\n    }\n    this.data.intervalMetadata = this.data.intervalMetadata || {...MQA_STATS.intervalMetadata};\n  }\n\n  /**\n   * get the data payload for media quality events after they all have been processed\n   * wait to call this until after you have all the data from the interval you want\n   * this method clears the data as a side effect\n   * @returns {Object}\n   * @memberof MQAProcessor\n   */\n  getData() {\n    this.intervalNumber += 1;\n\n    const payload = {...this.data, intervalNumber: this.intervalNumber};\n\n    this.data = {\n      videoReceive: [],\n      audioTransmit: [],\n      audioReceive: [],\n      videoTransmit: []\n    };\n\n    return payload;\n  }\n}\n\nexport default MQAProcessor;\n"]},"metadata":{},"sourceType":"script"}