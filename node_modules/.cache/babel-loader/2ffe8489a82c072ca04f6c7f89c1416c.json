{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Certificate from \"./Certificate.js\";\nimport RecipientIdentifier from \"./RecipientIdentifier.js\";\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nexport default class KeyTransRecipientInfo {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for KeyTransRecipientInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", KeyTransRecipientInfo.defaultValues(\"version\"));\n    /**\r\n     * @type {RecipientIdentifier}\r\n     * @desc rid\r\n     */\n\n    this.rid = getParametersValue(parameters, \"rid\", KeyTransRecipientInfo.defaultValues(\"rid\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc keyEncryptionAlgorithm\r\n     */\n\n    this.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KeyTransRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\n    /**\r\n     * @type {OctetString}\r\n     * @desc encryptedKey\r\n     */\n\n    this.encryptedKey = getParametersValue(parameters, \"encryptedKey\", KeyTransRecipientInfo.defaultValues(\"encryptedKey\"));\n    /**\r\n     * @type {Certificate}\r\n     * @desc recipientCertificate For some reasons we need to store recipient's certificate here\r\n     */\n\n    this.recipientCertificate = getParametersValue(parameters, \"recipientCertificate\", KeyTransRecipientInfo.defaultValues(\"recipientCertificate\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"version\":\n        return -1;\n\n      case \"rid\":\n        return {};\n\n      case \"keyEncryptionAlgorithm\":\n        return new AlgorithmIdentifier();\n\n      case \"encryptedKey\":\n        return new asn1js.OctetString();\n\n      case \"recipientCertificate\":\n        return new Certificate();\n\n      default:\n        throw new Error(`Invalid member name for KeyTransRecipientInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"version\":\n        return memberValue === KeyTransRecipientInfo.defaultValues(\"version\");\n\n      case \"rid\":\n        return Object.keys(memberValue).length === 0;\n\n      case \"keyEncryptionAlgorithm\":\n      case \"encryptedKey\":\n        return memberValue.isEqual(KeyTransRecipientInfo.defaultValues(memberName));\n\n      case \"recipientCertificate\":\n        return false;\n      // For now we do not need to compare any values with the \"recipientCertificate\"\n\n      default:\n        throw new Error(`Invalid member name for KeyTransRecipientInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * KeyTransRecipientInfo ::= SEQUENCE {\r\n   *    version CMSVersion,  -- always set to 0 or 2\r\n   *    rid RecipientIdentifier,\r\n   *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n   *    encryptedKey EncryptedKey }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [version]\r\n     * @property {string} [rid]\r\n     * @property {string} [keyEncryptionAlgorithm]\r\n     * @property {string} [encryptedKey]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Integer({\n        name: names.version || \"\"\n      }), RecipientIdentifier.schema(names.rid || {}), AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}), new asn1js.OctetString({\n        name: names.encryptedKey || \"\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"version\", \"rid\", \"keyEncryptionAlgorithm\", \"encryptedKey\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, KeyTransRecipientInfo.schema({\n      names: {\n        version: \"version\",\n        rid: {\n          names: {\n            blockName: \"rid\"\n          }\n        },\n        keyEncryptionAlgorithm: {\n          names: {\n            blockName: \"keyEncryptionAlgorithm\"\n          }\n        },\n        encryptedKey: \"encryptedKey\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for KeyTransRecipientInfo\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.version = asn1.result.version.valueBlock.valueDec;\n    if (asn1.result.rid.idBlock.tagClass === 3) this.rid = new asn1js.OctetString({\n      valueHex: asn1.result.rid.valueBlock.valueHex\n    }); // SubjectKeyIdentifier\n    else this.rid = new IssuerAndSerialNumber({\n        schema: asn1.result.rid\n      });\n    this.keyEncryptionAlgorithm = new AlgorithmIdentifier({\n      schema: asn1.result.keyEncryptionAlgorithm\n    });\n    this.encryptedKey = asn1.result.encryptedKey; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence \n    const outputArray = [];\n\n    if (this.rid instanceof IssuerAndSerialNumber) {\n      this.version = 0;\n      outputArray.push(new asn1js.Integer({\n        value: this.version\n      }));\n      outputArray.push(this.rid.toSchema());\n    } else {\n      this.version = 2;\n      outputArray.push(new asn1js.Integer({\n        value: this.version\n      }));\n      outputArray.push(new asn1js.Primitive({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        valueHex: this.rid.valueBlock.valueHex\n      }));\n    }\n\n    outputArray.push(this.keyEncryptionAlgorithm.toSchema());\n    outputArray.push(this.encryptedKey); //endregion \n    //region Construct and return new ASN.1 schema for this object \n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion \n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      version: this.version,\n      rid: this.rid.toJSON(),\n      keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n      encryptedKey: this.encryptedKey.toJSON()\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/KeyTransRecipientInfo.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","Certificate","RecipientIdentifier","IssuerAndSerialNumber","KeyTransRecipientInfo","constructor","parameters","version","defaultValues","rid","keyEncryptionAlgorithm","encryptedKey","recipientCertificate","fromSchema","schema","memberName","OctetString","Error","compareWithDefault","memberValue","Object","keys","length","isEqual","names","Sequence","name","blockName","value","Integer","asn1","compareSchema","verified","result","valueBlock","valueDec","idBlock","tagClass","valueHex","toSchema","outputArray","push","Primitive","tagNumber","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport RecipientIdentifier from \"./RecipientIdentifier.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class KeyTransRecipientInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for KeyTransRecipientInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", KeyTransRecipientInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {RecipientIdentifier}\r\n\t\t * @desc rid\r\n\t\t */\r\n\t\tthis.rid = getParametersValue(parameters, \"rid\", KeyTransRecipientInfo.defaultValues(\"rid\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc keyEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KeyTransRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc encryptedKey\r\n\t\t */\r\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", KeyTransRecipientInfo.defaultValues(\"encryptedKey\"));\r\n\t\t/**\r\n\t\t * @type {Certificate}\r\n\t\t * @desc recipientCertificate For some reasons we need to store recipient's certificate here\r\n\t\t */\r\n\t\tthis.recipientCertificate = getParametersValue(parameters, \"recipientCertificate\", KeyTransRecipientInfo.defaultValues(\"recipientCertificate\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"rid\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"recipientCertificate\":\r\n\t\t\t\treturn new Certificate();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyTransRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === KeyTransRecipientInfo.defaultValues(\"version\"));\r\n\t\t\tcase \"rid\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn memberValue.isEqual(KeyTransRecipientInfo.defaultValues(memberName));\r\n\t\t\tcase \"recipientCertificate\":\r\n\t\t\t\treturn false; // For now we do not need to compare any values with the \"recipientCertificate\"\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyTransRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * KeyTransRecipientInfo ::= SEQUENCE {\r\n\t *    version CMSVersion,  -- always set to 0 or 2\r\n\t *    rid RecipientIdentifier,\r\n\t *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n\t *    encryptedKey EncryptedKey }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [rid]\r\n\t\t * @property {string} [keyEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tRecipientIdentifier.schema(names.rid || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"rid\",\r\n\t\t\t\"keyEncryptionAlgorithm\",\r\n\t\t\t\"encryptedKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tKeyTransRecipientInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\trid: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"rid\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tkeyEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KeyTransRecipientInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\r\n\t\tif(asn1.result.rid.idBlock.tagClass === 3)\r\n\t\t\tthis.rid = new asn1js.OctetString({ valueHex: asn1.result.rid.valueBlock.valueHex }); // SubjectKeyIdentifier\r\n\t\telse\r\n\t\t\tthis.rid = new IssuerAndSerialNumber({ schema: asn1.result.rid });\r\n\r\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(this.rid instanceof IssuerAndSerialNumber)\r\n\t\t{\r\n\t\t\tthis.version = 0;\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\toutputArray.push(this.rid.toSchema());\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.version = 2;\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.rid.valueBlock.valueHex\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(this.keyEncryptionAlgorithm.toSchema());\r\n\t\toutputArray.push(this.encryptedKey);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tversion: this.version,\r\n\t\t\trid: this.rid.toJSON(),\r\n\t\t\tkeyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}