{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport OtherKeyAttribute from \"./OtherKeyAttribute.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nexport default class KEKIdentifier {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for KEKIdentifier class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {OctetString}\r\n     * @desc keyIdentifier\r\n     */\n    this.keyIdentifier = getParametersValue(parameters, \"keyIdentifier\", KEKIdentifier.defaultValues(\"keyIdentifier\"));\n    if (\"date\" in parameters)\n      /**\r\n       * @type {GeneralizedTime}\r\n       * @desc date\r\n       */\n      this.date = getParametersValue(parameters, \"date\", KEKIdentifier.defaultValues(\"date\"));\n    if (\"other\" in parameters)\n      /**\r\n       * @type {OtherKeyAttribute}\r\n       * @desc other\r\n       */\n      this.other = getParametersValue(parameters, \"other\", KEKIdentifier.defaultValues(\"other\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"keyIdentifier\":\n        return new asn1js.OctetString();\n\n      case \"date\":\n        return new asn1js.GeneralizedTime();\n\n      case \"other\":\n        return new OtherKeyAttribute();\n\n      default:\n        throw new Error(`Invalid member name for KEKIdentifier class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"keyIdentifier\":\n        return memberValue.isEqual(KEKIdentifier.defaultValues(\"keyIdentifier\"));\n\n      case \"date\":\n        // noinspection OverlyComplexBooleanExpressionJS\n        return memberValue.year === 0 && memberValue.month === 0 && memberValue.day === 0 && memberValue.hour === 0 && memberValue.minute === 0 && memberValue.second === 0 && memberValue.millisecond === 0;\n\n      case \"other\":\n        return memberValue.compareWithDefault(\"keyAttrId\", memberValue.keyAttrId) && \"keyAttr\" in memberValue === false;\n\n      default:\n        throw new Error(`Invalid member name for KEKIdentifier class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * KEKIdentifier ::= SEQUENCE {\r\n   *    keyIdentifier OCTET STRING,\r\n   *    date GeneralizedTime OPTIONAL,\r\n   *    other OtherKeyAttribute OPTIONAL }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [keyIdentifier]\r\n     * @property {string} [date]\r\n     * @property {string} [other]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.OctetString({\n        name: names.keyIdentifier || \"\"\n      }), new asn1js.GeneralizedTime({\n        optional: true,\n        name: names.date || \"\"\n      }), OtherKeyAttribute.schema(names.other || {})]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"keyIdentifier\", \"date\", \"other\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, KEKIdentifier.schema({\n      names: {\n        keyIdentifier: \"keyIdentifier\",\n        date: \"date\",\n        other: {\n          names: {\n            blockName: \"other\"\n          }\n        }\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for KEKIdentifier\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.keyIdentifier = asn1.result.keyIdentifier;\n    if (\"date\" in asn1.result) this.date = asn1.result.date;\n    if (\"other\" in asn1.result) this.other = new OtherKeyAttribute({\n      schema: asn1.result.other\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n    outputArray.push(this.keyIdentifier);\n    if (\"date\" in this) outputArray.push(this.date);\n    if (\"other\" in this) outputArray.push(this.other.toSchema()); //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const _object = {\n      keyIdentifier: this.keyIdentifier.toJSON()\n    };\n    if (\"date\" in this) _object.date = this.date;\n    if (\"other\" in this) _object.other = this.other.toJSON();\n    return _object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/KEKIdentifier.js"],"names":["asn1js","getParametersValue","clearProps","OtherKeyAttribute","KEKIdentifier","constructor","parameters","keyIdentifier","defaultValues","date","other","fromSchema","schema","memberName","OctetString","GeneralizedTime","Error","compareWithDefault","memberValue","isEqual","year","month","day","hour","minute","second","millisecond","keyAttrId","names","Sequence","name","blockName","value","optional","asn1","compareSchema","verified","result","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport OtherKeyAttribute from \"./OtherKeyAttribute.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class KEKIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for KEKIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc keyIdentifier\r\n\t\t */\r\n\t\tthis.keyIdentifier = getParametersValue(parameters, \"keyIdentifier\", KEKIdentifier.defaultValues(\"keyIdentifier\"));\r\n\r\n\t\tif(\"date\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralizedTime}\r\n\t\t\t * @desc date\r\n\t\t\t */\r\n\t\t\tthis.date = getParametersValue(parameters, \"date\", KEKIdentifier.defaultValues(\"date\"));\r\n\t\tif(\"other\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OtherKeyAttribute}\r\n\t\t\t * @desc other\r\n\t\t\t */\r\n\t\t\tthis.other = getParametersValue(parameters, \"other\", KEKIdentifier.defaultValues(\"other\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyIdentifier\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"date\":\r\n\t\t\t\treturn new asn1js.GeneralizedTime();\r\n\t\t\tcase \"other\":\r\n\t\t\t\treturn new OtherKeyAttribute();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KEKIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyIdentifier\":\r\n\t\t\t\treturn (memberValue.isEqual(KEKIdentifier.defaultValues(\"keyIdentifier\")));\r\n\t\t\tcase \"date\":\r\n\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\treturn ((memberValue.year === 0) &&\r\n\t\t\t\t\t\t(memberValue.month === 0) &&\r\n\t\t\t\t\t\t(memberValue.day === 0) &&\r\n\t\t\t\t\t\t(memberValue.hour === 0) &&\r\n\t\t\t\t\t\t(memberValue.minute === 0) &&\r\n\t\t\t\t\t\t(memberValue.second === 0) &&\r\n\t\t\t\t\t\t(memberValue.millisecond === 0));\r\n\t\t\tcase \"other\":\r\n\t\t\t\treturn ((memberValue.compareWithDefault(\"keyAttrId\", memberValue.keyAttrId)) &&\r\n\t\t\t\t\t\t((\"keyAttr\" in memberValue) === false));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KEKIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * KEKIdentifier ::= SEQUENCE {\r\n\t *    keyIdentifier OCTET STRING,\r\n\t *    date GeneralizedTime OPTIONAL,\r\n\t *    other OtherKeyAttribute OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyIdentifier]\r\n\t\t * @property {string} [date]\r\n\t\t * @property {string} [other]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.keyIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.date || \"\")\r\n\t\t\t\t}),\r\n\t\t\t\tOtherKeyAttribute.schema(names.other || {})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"keyIdentifier\",\r\n\t\t\t\"date\",\r\n\t\t\t\"other\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tKEKIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyIdentifier: \"keyIdentifier\",\r\n\t\t\t\t\tdate: \"date\",\r\n\t\t\t\t\tother: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"other\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KEKIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.keyIdentifier = asn1.result.keyIdentifier;\r\n\r\n\t\tif(\"date\" in asn1.result)\r\n\t\t\tthis.date = asn1.result.date;\r\n\r\n\t\tif(\"other\" in asn1.result)\r\n\t\t\tthis.other = new OtherKeyAttribute({ schema: asn1.result.other });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.keyIdentifier);\r\n\r\n\t\tif(\"date\" in this)\r\n\t\t\toutputArray.push(this.date);\r\n\r\n\t\tif(\"other\" in this)\r\n\t\t\toutputArray.push(this.other.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tkeyIdentifier: this.keyIdentifier.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"date\" in this)\r\n\t\t\t_object.date = this.date;\r\n\r\n\t\tif(\"other\" in this)\r\n\t\t\t_object.other = this.other.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}