{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { utilConcatBuf } from \"pvutils\";\nimport CryptoEngine from \"./CryptoEngine.js\"; //**************************************************************************************\n//region Crypto engine related function\n//**************************************************************************************\n\nlet engine = {\n  name: \"none\",\n  crypto: null,\n  subtle: null\n}; //**************************************************************************************\n\nexport function setEngine(name, crypto, subtle) {\n  //region We are in Node\n  // noinspection JSUnresolvedVariable\n  if (typeof process !== \"undefined\" && \"pid\" in process && typeof global !== \"undefined\" && typeof window === \"undefined\") {\n    // noinspection ES6ModulesDependencies, JSUnresolvedVariable\n    if (typeof global[process.pid] === \"undefined\") {\n      // noinspection JSUnresolvedVariable\n      global[process.pid] = {};\n    } else {\n      // noinspection JSUnresolvedVariable\n      if (typeof global[process.pid] !== \"object\") {\n        // noinspection JSUnresolvedVariable\n        throw new Error(`Name global.${process.pid} already exists and it is not an object`);\n      }\n    } // noinspection JSUnresolvedVariable\n\n\n    if (typeof global[process.pid].pkijs === \"undefined\") {\n      // noinspection JSUnresolvedVariable\n      global[process.pid].pkijs = {};\n    } else {\n      // noinspection JSUnresolvedVariable\n      if (typeof global[process.pid].pkijs !== \"object\") {\n        // noinspection JSUnresolvedVariable\n        throw new Error(`Name global.${process.pid}.pkijs already exists and it is not an object`);\n      }\n    } // noinspection JSUnresolvedVariable\n\n\n    global[process.pid].pkijs.engine = {\n      name: name,\n      crypto: crypto,\n      subtle: subtle\n    };\n  } //endregion\n  //region We are in browser\n  else {\n      engine = {\n        name: name,\n        crypto: crypto,\n        subtle: subtle\n      };\n    } //endregion\n\n} //**************************************************************************************\n\nexport function getEngine() {\n  //region We are in Node\n  // noinspection JSUnresolvedVariable\n  if (typeof process !== \"undefined\" && \"pid\" in process && typeof global !== \"undefined\" && typeof window === \"undefined\") {\n    let _engine;\n\n    try {\n      // noinspection JSUnresolvedVariable\n      _engine = global[process.pid].pkijs.engine;\n    } catch (ex) {\n      throw new Error(\"Please call \\\"setEngine\\\" before call to \\\"getEngine\\\"\");\n    }\n\n    return _engine;\n  } //endregion\n\n\n  return engine;\n} //**************************************************************************************\n\n(function initCryptoEngine() {\n  if (typeof self !== \"undefined\") {\n    if (\"crypto\" in self) {\n      let engineName = \"webcrypto\";\n      /**\r\n       * Standard crypto object\r\n       * @type {Object}\r\n       * @property {Object} [webkitSubtle] Subtle object from Apple\r\n       */\n\n      const cryptoObject = self.crypto;\n      let subtleObject; // Apple Safari support\n\n      if (\"webkitSubtle\" in self.crypto) {\n        try {\n          subtleObject = self.crypto.webkitSubtle;\n        } catch (ex) {\n          subtleObject = self.crypto.subtle;\n        }\n\n        engineName = \"safari\";\n      }\n\n      if (\"subtle\" in self.crypto) subtleObject = self.crypto.subtle;\n\n      if (typeof subtleObject === \"undefined\") {\n        engine = {\n          name: engineName,\n          crypto: cryptoObject,\n          subtle: null\n        };\n      } else {\n        engine = {\n          name: engineName,\n          crypto: cryptoObject,\n          subtle: new CryptoEngine({\n            name: engineName,\n            crypto: self.crypto,\n            subtle: subtleObject\n          })\n        };\n      }\n    }\n  }\n\n  setEngine(engine.name, engine.crypto, engine.subtle);\n})(); //**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of common functions\n//**************************************************************************************\n\n/**\r\n * Get crypto subtle from current \"crypto engine\" or \"undefined\"\r\n * @returns {({decrypt, deriveKey, digest, encrypt, exportKey, generateKey, importKey, sign, unwrapKey, verify, wrapKey}|null)}\r\n */\n\n\nexport function getCrypto() {\n  const _engine = getEngine();\n\n  if (_engine.subtle !== null) return _engine.subtle;\n  return undefined;\n} //**************************************************************************************\n\n/**\r\n * Initialize input Uint8Array by random values (with help from current \"crypto engine\")\r\n * @param {!Uint8Array} view\r\n * @returns {*}\r\n */\n\nexport function getRandomValues(view) {\n  return getEngine().subtle.getRandomValues(view);\n} //**************************************************************************************\n\n/**\r\n * Get OID for each specific algorithm\r\n * @param {Object} algorithm\r\n * @returns {string}\r\n */\n\nexport function getOIDByAlgorithm(algorithm) {\n  return getEngine().subtle.getOIDByAlgorithm(algorithm);\n} //**************************************************************************************\n\n/**\r\n * Get default algorithm parameters for each kind of operation\r\n * @param {string} algorithmName Algorithm name to get common parameters for\r\n * @param {string} operation Kind of operation: \"sign\", \"encrypt\", \"generatekey\", \"importkey\", \"exportkey\", \"verify\"\r\n * @returns {*}\r\n */\n\nexport function getAlgorithmParameters(algorithmName, operation) {\n  return getEngine().subtle.getAlgorithmParameters(algorithmName, operation);\n} //**************************************************************************************\n\n/**\r\n * Create CMS ECDSA signature from WebCrypto ECDSA signature\r\n * @param {ArrayBuffer} signatureBuffer WebCrypto result of \"sign\" function\r\n * @returns {ArrayBuffer}\r\n */\n\nexport function createCMSECDSASignature(signatureBuffer) {\n  //region Initial check for correct length\n  if (signatureBuffer.byteLength % 2 !== 0) return new ArrayBuffer(0); //endregion\n  //region Initial variables\n\n  const length = signatureBuffer.byteLength / 2; // There are two equal parts inside incoming ArrayBuffer\n\n  const rBuffer = new ArrayBuffer(length);\n  const rView = new Uint8Array(rBuffer);\n  rView.set(new Uint8Array(signatureBuffer, 0, length));\n  const rInteger = new asn1js.Integer({\n    valueHex: rBuffer\n  });\n  const sBuffer = new ArrayBuffer(length);\n  const sView = new Uint8Array(sBuffer);\n  sView.set(new Uint8Array(signatureBuffer, length, length));\n  const sInteger = new asn1js.Integer({\n    valueHex: sBuffer\n  }); //endregion\n\n  return new asn1js.Sequence({\n    value: [rInteger.convertToDER(), sInteger.convertToDER()]\n  }).toBER(false);\n} //**************************************************************************************\n\n/**\r\n * String preparation function. In a future here will be realization of algorithm from RFC4518\r\n * @param {string} inputString JavaScript string. As soon as for each ASN.1 string type we have a specific transformation function here we will work with pure JavaScript string\r\n * @returns {string} Formated string\r\n */\n\nexport function stringPrep(inputString) {\n  //region Initial variables\n  let isSpace = false;\n  let cuttedResult = \"\"; //endregion\n\n  const result = inputString.trim(); // Trim input string\n  //region Change all sequence of SPACE down to SPACE char\n\n  for (let i = 0; i < result.length; i++) {\n    if (result.charCodeAt(i) === 32) {\n      if (isSpace === false) isSpace = true;\n    } else {\n      if (isSpace) {\n        cuttedResult += \" \";\n        isSpace = false;\n      }\n\n      cuttedResult += result[i];\n    }\n  } //endregion\n\n\n  return cuttedResult.toLowerCase();\n} //**************************************************************************************\n\n/**\r\n * Create a single ArrayBuffer from CMS ECDSA signature\r\n * @param {Sequence} cmsSignature ASN.1 SEQUENCE contains CMS ECDSA signature\r\n * @returns {ArrayBuffer}\r\n */\n\nexport function createECDSASignatureFromCMS(cmsSignature) {\n  //region Check input variables\n  if (cmsSignature instanceof asn1js.Sequence === false) return new ArrayBuffer(0);\n  if (cmsSignature.valueBlock.value.length !== 2) return new ArrayBuffer(0);\n  if (cmsSignature.valueBlock.value[0] instanceof asn1js.Integer === false) return new ArrayBuffer(0);\n  if (cmsSignature.valueBlock.value[1] instanceof asn1js.Integer === false) return new ArrayBuffer(0); //endregion\n\n  const rValue = cmsSignature.valueBlock.value[0].convertFromDER();\n  const sValue = cmsSignature.valueBlock.value[1].convertFromDER(); //region Check the lengths of two parts are equal\n\n  switch (true) {\n    case rValue.valueBlock.valueHex.byteLength < sValue.valueBlock.valueHex.byteLength:\n      {\n        if (sValue.valueBlock.valueHex.byteLength - rValue.valueBlock.valueHex.byteLength !== 1) throw new Error(\"Incorrect DER integer decoding\");\n        const correctedLength = sValue.valueBlock.valueHex.byteLength;\n        const rValueView = new Uint8Array(rValue.valueBlock.valueHex);\n        const rValueBufferCorrected = new ArrayBuffer(correctedLength);\n        const rValueViewCorrected = new Uint8Array(rValueBufferCorrected);\n        rValueViewCorrected.set(rValueView, 1);\n        rValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\n\n        return utilConcatBuf(rValueBufferCorrected, sValue.valueBlock.valueHex);\n      }\n\n    case rValue.valueBlock.valueHex.byteLength > sValue.valueBlock.valueHex.byteLength:\n      {\n        if (rValue.valueBlock.valueHex.byteLength - sValue.valueBlock.valueHex.byteLength !== 1) throw new Error(\"Incorrect DER integer decoding\");\n        const correctedLength = rValue.valueBlock.valueHex.byteLength;\n        const sValueView = new Uint8Array(sValue.valueBlock.valueHex);\n        const sValueBufferCorrected = new ArrayBuffer(correctedLength);\n        const sValueViewCorrected = new Uint8Array(sValueBufferCorrected);\n        sValueViewCorrected.set(sValueView, 1);\n        sValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\n\n        return utilConcatBuf(rValue.valueBlock.valueHex, sValueBufferCorrected);\n      }\n\n    default:\n      {\n        //region In case we have equal length and the length is not even with 2\n        if (rValue.valueBlock.valueHex.byteLength % 2) {\n          const correctedLength = rValue.valueBlock.valueHex.byteLength + 1;\n          const rValueView = new Uint8Array(rValue.valueBlock.valueHex);\n          const rValueBufferCorrected = new ArrayBuffer(correctedLength);\n          const rValueViewCorrected = new Uint8Array(rValueBufferCorrected);\n          rValueViewCorrected.set(rValueView, 1);\n          rValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\n\n          const sValueView = new Uint8Array(sValue.valueBlock.valueHex);\n          const sValueBufferCorrected = new ArrayBuffer(correctedLength);\n          const sValueViewCorrected = new Uint8Array(sValueBufferCorrected);\n          sValueViewCorrected.set(sValueView, 1);\n          sValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\n\n          return utilConcatBuf(rValueBufferCorrected, sValueBufferCorrected);\n        } //endregion\n\n      }\n  } //endregion\n\n\n  return utilConcatBuf(rValue.valueBlock.valueHex, sValue.valueBlock.valueHex);\n} //**************************************************************************************\n\n/**\r\n * Get WebCrypto algorithm by wel-known OID\r\n * @param {string} oid well-known OID to search for\r\n * @returns {Object}\r\n */\n\nexport function getAlgorithmByOID(oid) {\n  return getEngine().subtle.getAlgorithmByOID(oid);\n} //**************************************************************************************\n\n/**\r\n * Getting hash algorithm by signature algorithm\r\n * @param {AlgorithmIdentifier} signatureAlgorithm Signature algorithm\r\n * @returns {string}\r\n */\n\nexport function getHashAlgorithm(signatureAlgorithm) {\n  return getEngine().subtle.getHashAlgorithm(signatureAlgorithm);\n} //**************************************************************************************\n\n/**\r\n * ANS X9.63 Key Derivation Function having a \"Counter\" as a parameter\r\n * @param {string} hashFunction Used hash function\r\n * @param {ArrayBuffer} Zbuffer ArrayBuffer containing ECDH shared secret to derive from\r\n * @param {number} Counter\r\n * @param {ArrayBuffer} SharedInfo Usually DER encoded \"ECC_CMS_SharedInfo\" structure\r\n */\n\nexport function kdfWithCounter(hashFunction, Zbuffer, Counter, SharedInfo) {\n  //region Check of input parameters\n  switch (hashFunction.toUpperCase()) {\n    case \"SHA-1\":\n    case \"SHA-256\":\n    case \"SHA-384\":\n    case \"SHA-512\":\n      break;\n\n    default:\n      return Promise.reject(`Unknown hash function: ${hashFunction}`);\n  }\n\n  if (Zbuffer instanceof ArrayBuffer === false) return Promise.reject(\"Please set \\\"Zbuffer\\\" as \\\"ArrayBuffer\\\"\");\n  if (Zbuffer.byteLength === 0) return Promise.reject(\"\\\"Zbuffer\\\" has zero length, error\");\n  if (SharedInfo instanceof ArrayBuffer === false) return Promise.reject(\"Please set \\\"SharedInfo\\\" as \\\"ArrayBuffer\\\"\");\n  if (Counter > 255) return Promise.reject(\"Please set \\\"Counter\\\" variable to value less or equal to 255\"); //endregion\n  //region Initial variables\n\n  const counterBuffer = new ArrayBuffer(4);\n  const counterView = new Uint8Array(counterBuffer);\n  counterView[0] = 0x00;\n  counterView[1] = 0x00;\n  counterView[2] = 0x00;\n  counterView[3] = Counter;\n  let combinedBuffer = new ArrayBuffer(0); //endregion\n  //region Get a \"crypto\" extension\n\n  const crypto = getCrypto();\n  if (typeof crypto === \"undefined\") return Promise.reject(\"Unable to create WebCrypto object\"); //endregion\n  //region Create a combined ArrayBuffer for digesting\n\n  combinedBuffer = utilConcatBuf(combinedBuffer, Zbuffer);\n  combinedBuffer = utilConcatBuf(combinedBuffer, counterBuffer);\n  combinedBuffer = utilConcatBuf(combinedBuffer, SharedInfo); //endregion\n  //region Return digest of combined ArrayBuffer and information about current counter\n\n  return crypto.digest({\n    name: hashFunction\n  }, combinedBuffer).then(result => ({\n    counter: Counter,\n    result\n  })); //endregion\n} //**************************************************************************************\n\n/**\r\n * ANS X9.63 Key Derivation Function\r\n * @param {string} hashFunction Used hash function\r\n * @param {ArrayBuffer} Zbuffer ArrayBuffer containing ECDH shared secret to derive from\r\n * @param {number} keydatalen Length (!!! in BITS !!!) of used kew derivation function\r\n * @param {ArrayBuffer} SharedInfo Usually DER encoded \"ECC_CMS_SharedInfo\" structure\r\n */\n\nexport function kdf(hashFunction, Zbuffer, keydatalen, SharedInfo) {\n  //region Initial variables\n  let hashLength = 0;\n  let maxCounter = 1;\n  const kdfArray = []; //endregion\n  //region Check of input parameters\n\n  switch (hashFunction.toUpperCase()) {\n    case \"SHA-1\":\n      hashLength = 160; // In bits\n\n      break;\n\n    case \"SHA-256\":\n      hashLength = 256; // In bits\n\n      break;\n\n    case \"SHA-384\":\n      hashLength = 384; // In bits\n\n      break;\n\n    case \"SHA-512\":\n      hashLength = 512; // In bits\n\n      break;\n\n    default:\n      return Promise.reject(`Unknown hash function: ${hashFunction}`);\n  }\n\n  if (Zbuffer instanceof ArrayBuffer === false) return Promise.reject(\"Please set \\\"Zbuffer\\\" as \\\"ArrayBuffer\\\"\");\n  if (Zbuffer.byteLength === 0) return Promise.reject(\"\\\"Zbuffer\\\" has zero length, error\");\n  if (SharedInfo instanceof ArrayBuffer === false) return Promise.reject(\"Please set \\\"SharedInfo\\\" as \\\"ArrayBuffer\\\"\"); //endregion\n  //region Calculated maximum value of \"Counter\" variable\n\n  const quotient = keydatalen / hashLength;\n\n  if (Math.floor(quotient) > 0) {\n    maxCounter = Math.floor(quotient);\n    if (quotient - maxCounter > 0) maxCounter++;\n  } //endregion\n  //region Create an array of \"kdfWithCounter\"\n\n\n  for (let i = 1; i <= maxCounter; i++) kdfArray.push(kdfWithCounter(hashFunction, Zbuffer, i, SharedInfo)); //endregion\n  //region Return combined digest with specified length\n\n\n  return Promise.all(kdfArray).then(incomingResult => {\n    //region Initial variables\n    let combinedBuffer = new ArrayBuffer(0);\n    let currentCounter = 1;\n    let found = true; //endregion\n    //region Combine all buffer together\n\n    while (found) {\n      found = false;\n\n      for (const result of incomingResult) {\n        if (result.counter === currentCounter) {\n          combinedBuffer = utilConcatBuf(combinedBuffer, result.result);\n          found = true;\n          break;\n        }\n      }\n\n      currentCounter++;\n    } //endregion\n    //region Create output buffer with specified length\n\n\n    keydatalen >>= 3; // Divide by 8 since \"keydatalen\" is in bits\n\n    if (combinedBuffer.byteLength > keydatalen) {\n      const newBuffer = new ArrayBuffer(keydatalen);\n      const newView = new Uint8Array(newBuffer);\n      const combinedView = new Uint8Array(combinedBuffer);\n\n      for (let i = 0; i < keydatalen; i++) newView[i] = combinedView[i];\n\n      return newBuffer;\n    }\n\n    return combinedBuffer; // Since the situation when \"combinedBuffer.byteLength < keydatalen\" here we have only \"combinedBuffer.byteLength === keydatalen\"\n    //endregion\n  }); //endregion\n} //**************************************************************************************\n//endregion\n//**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/common.js"],"names":["asn1js","utilConcatBuf","CryptoEngine","engine","name","crypto","subtle","setEngine","process","global","window","pid","Error","pkijs","getEngine","_engine","ex","initCryptoEngine","self","engineName","cryptoObject","subtleObject","webkitSubtle","getCrypto","undefined","getRandomValues","view","getOIDByAlgorithm","algorithm","getAlgorithmParameters","algorithmName","operation","createCMSECDSASignature","signatureBuffer","byteLength","ArrayBuffer","length","rBuffer","rView","Uint8Array","set","rInteger","Integer","valueHex","sBuffer","sView","sInteger","Sequence","value","convertToDER","toBER","stringPrep","inputString","isSpace","cuttedResult","result","trim","i","charCodeAt","toLowerCase","createECDSASignatureFromCMS","cmsSignature","valueBlock","rValue","convertFromDER","sValue","correctedLength","rValueView","rValueBufferCorrected","rValueViewCorrected","sValueView","sValueBufferCorrected","sValueViewCorrected","getAlgorithmByOID","oid","getHashAlgorithm","signatureAlgorithm","kdfWithCounter","hashFunction","Zbuffer","Counter","SharedInfo","toUpperCase","Promise","reject","counterBuffer","counterView","combinedBuffer","digest","then","counter","kdf","keydatalen","hashLength","maxCounter","kdfArray","quotient","Math","floor","push","all","incomingResult","currentCounter","found","newBuffer","newView","combinedView"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { utilConcatBuf } from \"pvutils\";\r\nimport CryptoEngine from \"./CryptoEngine.js\";\r\n//**************************************************************************************\r\n//region Crypto engine related function\r\n//**************************************************************************************\r\nlet engine = {\r\n\tname: \"none\",\r\n\tcrypto: null,\r\n\tsubtle: null\r\n};\r\n//**************************************************************************************\r\nexport function setEngine(name, crypto, subtle)\r\n{\r\n\t//region We are in Node\r\n\t// noinspection JSUnresolvedVariable\r\n\tif((typeof process !== \"undefined\") && (\"pid\" in process) && (typeof global !== \"undefined\") && (typeof window === \"undefined\"))\r\n\t{\r\n\t\t// noinspection ES6ModulesDependencies, JSUnresolvedVariable\r\n\t\tif(typeof global[process.pid] === \"undefined\")\r\n\t\t{\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\tglobal[process.pid] = {};\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\tif(typeof global[process.pid] !== \"object\")\r\n\t\t\t{\r\n\t\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\t\tthrow new Error(`Name global.${process.pid} already exists and it is not an object`);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tif(typeof global[process.pid].pkijs === \"undefined\")\r\n\t\t{\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\tglobal[process.pid].pkijs = {};\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\tif(typeof global[process.pid].pkijs !== \"object\")\r\n\t\t\t{\r\n\t\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\t\tthrow new Error(`Name global.${process.pid}.pkijs already exists and it is not an object`);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tglobal[process.pid].pkijs.engine = {\r\n\t\t\tname: name,\r\n\t\t\tcrypto: crypto,\r\n\t\t\tsubtle: subtle\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region We are in browser\r\n\telse\r\n\t{\r\n\t\tengine = {\r\n\t\t\tname: name,\r\n\t\t\tcrypto: crypto,\r\n\t\t\tsubtle: subtle\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\nexport function getEngine()\r\n{\r\n\t//region We are in Node\r\n\t// noinspection JSUnresolvedVariable\r\n\tif((typeof process !== \"undefined\") && (\"pid\" in process) && (typeof global !== \"undefined\") && (typeof window === \"undefined\"))\r\n\t{\r\n\t\tlet _engine;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\t_engine = global[process.pid].pkijs.engine;\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\tthrow new Error(\"Please call \\\"setEngine\\\" before call to \\\"getEngine\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\treturn _engine;\r\n\t}\r\n\t//endregion\r\n\t\r\n\treturn engine;\r\n}\r\n//**************************************************************************************\r\n(function initCryptoEngine()\r\n{\r\n\tif(typeof self !== \"undefined\")\r\n\t{\r\n\t\tif(\"crypto\" in self)\r\n\t\t{\r\n\t\t\tlet engineName = \"webcrypto\";\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Standard crypto object\r\n\t\t\t * @type {Object}\r\n\t\t\t * @property {Object} [webkitSubtle] Subtle object from Apple\r\n\t\t\t */\r\n\t\t\tconst cryptoObject = self.crypto;\r\n\t\t\tlet subtleObject;\r\n\t\t\t\r\n\t\t\t// Apple Safari support\r\n\t\t\tif(\"webkitSubtle\" in self.crypto)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tsubtleObject = self.crypto.webkitSubtle;\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tsubtleObject = self.crypto.subtle;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tengineName = \"safari\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(\"subtle\" in self.crypto)\r\n\t\t\t\tsubtleObject = self.crypto.subtle;\r\n\r\n\r\n\t\t\tif(typeof subtleObject === \"undefined\")\r\n\t\t\t{\r\n\t\t\t\tengine = {\r\n\t\t\t\t\tname: engineName,\r\n\t\t\t\t\tcrypto: cryptoObject,\r\n\t\t\t\t\tsubtle: null\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tengine = {\r\n\t\t\t\t\tname: engineName,\r\n\t\t\t\t\tcrypto: cryptoObject,\r\n\t\t\t\t\tsubtle: new CryptoEngine({name: engineName, crypto: self.crypto, subtle: subtleObject})\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tsetEngine(engine.name, engine.crypto, engine.subtle);\r\n})();\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of common functions\r\n//**************************************************************************************\r\n/**\r\n * Get crypto subtle from current \"crypto engine\" or \"undefined\"\r\n * @returns {({decrypt, deriveKey, digest, encrypt, exportKey, generateKey, importKey, sign, unwrapKey, verify, wrapKey}|null)}\r\n */\r\nexport function getCrypto()\r\n{\r\n\tconst _engine = getEngine();\r\n\t\r\n\tif(_engine.subtle !== null)\r\n\t\treturn _engine.subtle;\r\n\t\r\n\treturn undefined;\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Initialize input Uint8Array by random values (with help from current \"crypto engine\")\r\n * @param {!Uint8Array} view\r\n * @returns {*}\r\n */\r\nexport function getRandomValues(view)\r\n{\r\n\treturn getEngine().subtle.getRandomValues(view);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Get OID for each specific algorithm\r\n * @param {Object} algorithm\r\n * @returns {string}\r\n */\r\nexport function getOIDByAlgorithm(algorithm)\r\n{\r\n\treturn getEngine().subtle.getOIDByAlgorithm(algorithm);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Get default algorithm parameters for each kind of operation\r\n * @param {string} algorithmName Algorithm name to get common parameters for\r\n * @param {string} operation Kind of operation: \"sign\", \"encrypt\", \"generatekey\", \"importkey\", \"exportkey\", \"verify\"\r\n * @returns {*}\r\n */\r\nexport function getAlgorithmParameters(algorithmName, operation)\r\n{\r\n\treturn getEngine().subtle.getAlgorithmParameters(algorithmName, operation);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Create CMS ECDSA signature from WebCrypto ECDSA signature\r\n * @param {ArrayBuffer} signatureBuffer WebCrypto result of \"sign\" function\r\n * @returns {ArrayBuffer}\r\n */\r\nexport function createCMSECDSASignature(signatureBuffer)\r\n{\r\n\t//region Initial check for correct length\r\n\tif((signatureBuffer.byteLength % 2) !== 0)\r\n\t\treturn new ArrayBuffer(0);\r\n\t//endregion\r\n\t\r\n\t//region Initial variables\r\n\tconst length = signatureBuffer.byteLength / 2; // There are two equal parts inside incoming ArrayBuffer\r\n\t\r\n\tconst rBuffer = new ArrayBuffer(length);\r\n\tconst rView = new Uint8Array(rBuffer);\r\n\trView.set(new Uint8Array(signatureBuffer, 0, length));\r\n\t\r\n\tconst rInteger = new asn1js.Integer({ valueHex: rBuffer });\r\n\t\r\n\tconst sBuffer = new ArrayBuffer(length);\r\n\tconst sView = new Uint8Array(sBuffer);\r\n\tsView.set(new Uint8Array(signatureBuffer, length, length));\r\n\t\r\n\tconst sInteger = new asn1js.Integer({ valueHex: sBuffer });\r\n\t//endregion\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tvalue: [\r\n\t\t\trInteger.convertToDER(),\r\n\t\t\tsInteger.convertToDER()\r\n\t\t]\r\n\t})).toBER(false);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * String preparation function. In a future here will be realization of algorithm from RFC4518\r\n * @param {string} inputString JavaScript string. As soon as for each ASN.1 string type we have a specific transformation function here we will work with pure JavaScript string\r\n * @returns {string} Formated string\r\n */\r\nexport function stringPrep(inputString)\r\n{\r\n\t//region Initial variables\r\n\tlet isSpace = false;\r\n\tlet cuttedResult = \"\";\r\n\t//endregion\r\n\t\r\n\tconst result = inputString.trim(); // Trim input string\r\n\t\r\n\t//region Change all sequence of SPACE down to SPACE char\r\n\tfor(let i = 0; i < result.length; i++)\r\n\t{\r\n\t\tif(result.charCodeAt(i) === 32)\r\n\t\t{\r\n\t\t\tif(isSpace === false)\r\n\t\t\t\tisSpace = true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(isSpace)\r\n\t\t\t{\r\n\t\t\t\tcuttedResult += \" \";\r\n\t\t\t\tisSpace = false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcuttedResult += result[i];\r\n\t\t}\r\n\t}\r\n\t//endregion\r\n\t\r\n\treturn cuttedResult.toLowerCase();\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Create a single ArrayBuffer from CMS ECDSA signature\r\n * @param {Sequence} cmsSignature ASN.1 SEQUENCE contains CMS ECDSA signature\r\n * @returns {ArrayBuffer}\r\n */\r\nexport function createECDSASignatureFromCMS(cmsSignature)\r\n{\r\n\t//region Check input variables\r\n\tif((cmsSignature instanceof asn1js.Sequence) === false)\r\n\t\treturn new ArrayBuffer(0);\r\n\t\r\n\tif(cmsSignature.valueBlock.value.length !== 2)\r\n\t\treturn new ArrayBuffer(0);\r\n\t\r\n\tif((cmsSignature.valueBlock.value[0] instanceof asn1js.Integer) === false)\r\n\t\treturn new ArrayBuffer(0);\r\n\t\r\n\tif((cmsSignature.valueBlock.value[1] instanceof asn1js.Integer) === false)\r\n\t\treturn new ArrayBuffer(0);\r\n\t//endregion\r\n\t\r\n\tconst rValue = cmsSignature.valueBlock.value[0].convertFromDER();\r\n\tconst sValue = cmsSignature.valueBlock.value[1].convertFromDER();\r\n\t\r\n\t//region Check the lengths of two parts are equal\r\n\tswitch(true)\r\n\t{\r\n\t\tcase (rValue.valueBlock.valueHex.byteLength < sValue.valueBlock.valueHex.byteLength):\r\n\t\t\t{\r\n\t\t\t\tif((sValue.valueBlock.valueHex.byteLength - rValue.valueBlock.valueHex.byteLength) !== 1)\r\n\t\t\t\t\tthrow new Error(\"Incorrect DER integer decoding\");\r\n\t\t\t\t\r\n\t\t\t\tconst correctedLength = sValue.valueBlock.valueHex.byteLength;\r\n\t\t\t\t\r\n\t\t\t\tconst rValueView = new Uint8Array(rValue.valueBlock.valueHex);\r\n\t\t\t\t\r\n\t\t\t\tconst rValueBufferCorrected = new ArrayBuffer(correctedLength);\r\n\t\t\t\tconst rValueViewCorrected = new Uint8Array(rValueBufferCorrected);\r\n\t\t\t\t\r\n\t\t\t\trValueViewCorrected.set(rValueView, 1);\r\n\t\t\t\trValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\r\n\t\t\t\t\r\n\t\t\t\treturn utilConcatBuf(rValueBufferCorrected, sValue.valueBlock.valueHex);\r\n\t\t\t}\r\n\t\tcase (rValue.valueBlock.valueHex.byteLength > sValue.valueBlock.valueHex.byteLength):\r\n\t\t\t{\r\n\t\t\t\tif((rValue.valueBlock.valueHex.byteLength - sValue.valueBlock.valueHex.byteLength) !== 1)\r\n\t\t\t\t\tthrow new Error(\"Incorrect DER integer decoding\");\r\n\t\t\t\t\r\n\t\t\t\tconst correctedLength = rValue.valueBlock.valueHex.byteLength;\r\n\t\t\t\t\r\n\t\t\t\tconst sValueView = new Uint8Array(sValue.valueBlock.valueHex);\r\n\t\t\t\t\r\n\t\t\t\tconst sValueBufferCorrected = new ArrayBuffer(correctedLength);\r\n\t\t\t\tconst sValueViewCorrected = new Uint8Array(sValueBufferCorrected);\r\n\t\t\t\t\r\n\t\t\t\tsValueViewCorrected.set(sValueView, 1);\r\n\t\t\t\tsValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\r\n\t\t\t\t\r\n\t\t\t\treturn utilConcatBuf(rValue.valueBlock.valueHex, sValueBufferCorrected);\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\t{\r\n\t\t\t\t//region In case we have equal length and the length is not even with 2\r\n\t\t\t\tif(rValue.valueBlock.valueHex.byteLength % 2)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst correctedLength = (rValue.valueBlock.valueHex.byteLength + 1);\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst rValueView = new Uint8Array(rValue.valueBlock.valueHex);\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst rValueBufferCorrected = new ArrayBuffer(correctedLength);\r\n\t\t\t\t\tconst rValueViewCorrected = new Uint8Array(rValueBufferCorrected);\r\n\t\t\t\t\t\r\n\t\t\t\t\trValueViewCorrected.set(rValueView, 1);\r\n\t\t\t\t\trValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst sValueView = new Uint8Array(sValue.valueBlock.valueHex);\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst sValueBufferCorrected = new ArrayBuffer(correctedLength);\r\n\t\t\t\t\tconst sValueViewCorrected = new Uint8Array(sValueBufferCorrected);\r\n\t\t\t\t\t\r\n\t\t\t\t\tsValueViewCorrected.set(sValueView, 1);\r\n\t\t\t\t\tsValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn utilConcatBuf(rValueBufferCorrected, sValueBufferCorrected);\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t}\r\n\t//endregion\r\n\t\r\n\treturn utilConcatBuf(rValue.valueBlock.valueHex, sValue.valueBlock.valueHex);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Get WebCrypto algorithm by wel-known OID\r\n * @param {string} oid well-known OID to search for\r\n * @returns {Object}\r\n */\r\nexport function getAlgorithmByOID(oid)\r\n{\r\n\treturn getEngine().subtle.getAlgorithmByOID(oid);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Getting hash algorithm by signature algorithm\r\n * @param {AlgorithmIdentifier} signatureAlgorithm Signature algorithm\r\n * @returns {string}\r\n */\r\nexport function getHashAlgorithm(signatureAlgorithm)\r\n{\r\n\treturn getEngine().subtle.getHashAlgorithm(signatureAlgorithm);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * ANS X9.63 Key Derivation Function having a \"Counter\" as a parameter\r\n * @param {string} hashFunction Used hash function\r\n * @param {ArrayBuffer} Zbuffer ArrayBuffer containing ECDH shared secret to derive from\r\n * @param {number} Counter\r\n * @param {ArrayBuffer} SharedInfo Usually DER encoded \"ECC_CMS_SharedInfo\" structure\r\n */\r\nexport function kdfWithCounter(hashFunction, Zbuffer, Counter, SharedInfo)\r\n{\r\n\t//region Check of input parameters\r\n\tswitch(hashFunction.toUpperCase())\r\n\t{\r\n\t\tcase \"SHA-1\":\r\n\t\tcase \"SHA-256\":\r\n\t\tcase \"SHA-384\":\r\n\t\tcase \"SHA-512\":\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\treturn Promise.reject(`Unknown hash function: ${hashFunction}`);\r\n\t}\r\n\t\r\n\tif((Zbuffer instanceof ArrayBuffer) === false)\r\n\t\treturn Promise.reject(\"Please set \\\"Zbuffer\\\" as \\\"ArrayBuffer\\\"\");\r\n\t\r\n\tif(Zbuffer.byteLength === 0)\r\n\t\treturn Promise.reject(\"\\\"Zbuffer\\\" has zero length, error\");\r\n\t\r\n\tif((SharedInfo instanceof ArrayBuffer) === false)\r\n\t\treturn Promise.reject(\"Please set \\\"SharedInfo\\\" as \\\"ArrayBuffer\\\"\");\r\n\t\r\n\tif(Counter > 255)\r\n\t\treturn Promise.reject(\"Please set \\\"Counter\\\" variable to value less or equal to 255\");\r\n\t//endregion\r\n\t\r\n\t//region Initial variables\r\n\tconst counterBuffer = new ArrayBuffer(4);\r\n\tconst counterView = new Uint8Array(counterBuffer);\r\n\tcounterView[0] = 0x00;\r\n\tcounterView[1] = 0x00;\r\n\tcounterView[2] = 0x00;\r\n\tcounterView[3] = Counter;\r\n\t\r\n\tlet combinedBuffer = new ArrayBuffer(0);\r\n\t//endregion\r\n\t\r\n\t//region Get a \"crypto\" extension\r\n\tconst crypto = getCrypto();\r\n\tif(typeof crypto === \"undefined\")\r\n\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t//endregion\r\n\t\r\n\t//region Create a combined ArrayBuffer for digesting\r\n\tcombinedBuffer = utilConcatBuf(combinedBuffer, Zbuffer);\r\n\tcombinedBuffer = utilConcatBuf(combinedBuffer, counterBuffer);\r\n\tcombinedBuffer = utilConcatBuf(combinedBuffer, SharedInfo);\r\n\t//endregion\r\n\t\r\n\t//region Return digest of combined ArrayBuffer and information about current counter\r\n\treturn crypto.digest({\r\n\t\tname: hashFunction\r\n\t},\r\n\tcombinedBuffer)\r\n\t\t.then(result =>\r\n\t\t\t({\r\n\t\t\t\tcounter: Counter,\r\n\t\t\t\tresult\r\n\t\t\t}));\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\n/**\r\n * ANS X9.63 Key Derivation Function\r\n * @param {string} hashFunction Used hash function\r\n * @param {ArrayBuffer} Zbuffer ArrayBuffer containing ECDH shared secret to derive from\r\n * @param {number} keydatalen Length (!!! in BITS !!!) of used kew derivation function\r\n * @param {ArrayBuffer} SharedInfo Usually DER encoded \"ECC_CMS_SharedInfo\" structure\r\n */\r\nexport function kdf(hashFunction, Zbuffer, keydatalen, SharedInfo)\r\n{\r\n\t//region Initial variables\r\n\tlet hashLength = 0;\r\n\tlet maxCounter = 1;\r\n\t\r\n\tconst kdfArray = [];\r\n\t//endregion\r\n\t\r\n\t//region Check of input parameters\r\n\tswitch(hashFunction.toUpperCase())\r\n\t{\r\n\t\tcase \"SHA-1\":\r\n\t\t\thashLength = 160; // In bits\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-256\":\r\n\t\t\thashLength = 256; // In bits\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-384\":\r\n\t\t\thashLength = 384; // In bits\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-512\":\r\n\t\t\thashLength = 512; // In bits\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\treturn Promise.reject(`Unknown hash function: ${hashFunction}`);\r\n\t}\r\n\t\r\n\tif((Zbuffer instanceof ArrayBuffer) === false)\r\n\t\treturn Promise.reject(\"Please set \\\"Zbuffer\\\" as \\\"ArrayBuffer\\\"\");\r\n\t\r\n\tif(Zbuffer.byteLength === 0)\r\n\t\treturn Promise.reject(\"\\\"Zbuffer\\\" has zero length, error\");\r\n\t\r\n\tif((SharedInfo instanceof ArrayBuffer) === false)\r\n\t\treturn Promise.reject(\"Please set \\\"SharedInfo\\\" as \\\"ArrayBuffer\\\"\");\r\n\t//endregion\r\n\t\r\n\t//region Calculated maximum value of \"Counter\" variable\r\n\tconst quotient = keydatalen / hashLength;\r\n\t\r\n\tif(Math.floor(quotient) > 0)\r\n\t{\r\n\t\tmaxCounter = Math.floor(quotient);\r\n\t\t\r\n\t\tif((quotient - maxCounter) > 0)\r\n\t\t\tmaxCounter++;\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Create an array of \"kdfWithCounter\"\r\n\tfor(let i = 1; i <= maxCounter; i++)\r\n\t\tkdfArray.push(kdfWithCounter(hashFunction, Zbuffer, i, SharedInfo));\r\n\t//endregion\r\n\t\r\n\t//region Return combined digest with specified length\r\n\treturn Promise.all(kdfArray).then(incomingResult =>\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet combinedBuffer = new ArrayBuffer(0);\r\n\t\tlet currentCounter = 1;\r\n\t\tlet found = true;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Combine all buffer together\r\n\t\twhile(found)\r\n\t\t{\r\n\t\t\tfound = false;\r\n\t\t\t\r\n\t\t\tfor(const result of incomingResult)\r\n\t\t\t{\r\n\t\t\t\tif(result.counter === currentCounter)\r\n\t\t\t\t{\r\n\t\t\t\t\tcombinedBuffer = utilConcatBuf(combinedBuffer, result.result);\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcurrentCounter++;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create output buffer with specified length\r\n\t\tkeydatalen >>= 3; // Divide by 8 since \"keydatalen\" is in bits\r\n\t\t\r\n\t\tif(combinedBuffer.byteLength > keydatalen)\r\n\t\t{\r\n\t\t\tconst newBuffer = new ArrayBuffer(keydatalen);\r\n\t\t\tconst newView = new Uint8Array(newBuffer);\r\n\t\t\tconst combinedView = new Uint8Array(combinedBuffer);\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < keydatalen; i++)\r\n\t\t\t\tnewView[i] = combinedView[i];\r\n\t\t\t\r\n\t\t\treturn newBuffer;\r\n\t\t}\r\n\t\t\r\n\t\treturn combinedBuffer; // Since the situation when \"combinedBuffer.byteLength < keydatalen\" here we have only \"combinedBuffer.byteLength === keydatalen\"\r\n\t\t//endregion\r\n\t});\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}