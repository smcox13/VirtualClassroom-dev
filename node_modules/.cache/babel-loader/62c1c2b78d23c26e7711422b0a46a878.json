{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _constants = require('../constants');\n\nvar _parameter = require('../common/errors/parameter');\n\nvar _parameter2 = _interopRequireDefault(_parameter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar MeetingsUtil = {};\n\nMeetingsUtil.extractDestination = function (destination, type) {\n  var dest = destination;\n\n  if (type === _constants._LOCUS_ID_) {\n    if (!(destination && destination.url)) {\n      throw new _parameter2.default('You cannot create a meeting by locus without a locus.url defined');\n    }\n\n    dest = destination.url;\n  }\n\n  return dest;\n};\n\nMeetingsUtil.getMeetingAddedType = function (type) {\n  return type === _constants._LOCUS_ID_ ? _constants._INCOMING_ : _constants._CREATED_;\n};\n\nMeetingsUtil.handleRoapMercury = function (envelope, meetingCollection) {\n  var data = envelope.data;\n  var eventType = data.eventType;\n\n  if (eventType === _constants.LOCUSEVENT.MESSAGE_ROAP) {\n    var meeting = meetingCollection.getByKey(_constants.CORRELATION_ID, data.correlationId);\n\n    if (meeting) {\n      meeting.roap.roapEvent(data);\n    }\n  }\n};\n\nMeetingsUtil.checkForCorrelationId = function (deviceUrl, locus) {\n  var devices = [];\n\n  if (locus) {\n    if (locus && locus.self && locus.self.devices) {\n      devices = locus.self.devices;\n    }\n\n    var foundDevice = devices.find(function (device) {\n      return device.url === deviceUrl;\n    });\n\n    if (foundDevice && foundDevice.correlationId) {\n      return foundDevice.correlationId;\n    }\n  }\n\n  return false;\n};\n\nexports.default = MeetingsUtil;","map":{"version":3,"sources":["util.js"],"names":["MeetingsUtil","dest","type","_LOCUS_ID_","destination","ParameterError","_INCOMING_","_CREATED_","data","envelope","eventType","LOCUSEVENT","meeting","meetingCollection","CORRELATION_ID","devices","locus","foundDevice","device"],"mappings":";;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAOA,IAAA,UAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;;;;;;;;;AAEA,IAAMA,YAAAA,GAAN,EAAA;;AAEAA,YAAAA,CAAAA,kBAAAA,GAAkC,UAAA,WAAA,EAAA,IAAA,EAAuB;AACvD,MAAIC,IAAAA,GAAJ,WAAA;;AAEA,MAAIC,IAAAA,KAASC,UAAAA,CAAb,UAAA,EAAyB;AACvB,QAAI,EAAEC,WAAAA,IAAeA,WAAAA,CAArB,GAAI,CAAJ,EAAuC;AACrC,YAAM,IAAIC,WAAAA,CAAJ,OAAA,CAAN,kEAAM,CAAN;AACD;;AACDJ,IAAAA,IAAAA,GAAOG,WAAAA,CAAPH,GAAAA;AACD;;AAED,SAAA,IAAA;AAVFD,CAAAA;;AAaAA,YAAAA,CAAAA,mBAAAA,GAAmC,UAAA,IAAA,EAAA;AAAA,SAAWE,IAAAA,KAASC,UAAAA,CAATD,UAAAA,GAAsBI,UAAAA,CAAtBJ,UAAAA,GAAmCK,UAAAA,CAA9C,SAAA;AAAnCP,CAAAA;;AAEAA,YAAAA,CAAAA,iBAAAA,GAAiC,UAAA,QAAA,EAAA,iBAAA,EAAiC;AAAA,MACzDQ,IADyD,GACjDC,QADiD,CAAA,IAAA;AAAA,MAEzDC,SAFyD,GAE5CF,IAF4C,CAAA,SAAA;;AAIhE,MAAIE,SAAAA,KAAcC,UAAAA,CAAAA,UAAAA,CAAlB,YAAA,EAA2C;AACzC,QAAMC,OAAAA,GAAUC,iBAAAA,CAAAA,QAAAA,CAA2BC,UAAAA,CAA3BD,cAAAA,EAA2CL,IAAAA,CAA3D,aAAgBK,CAAhB;;AAEA,QAAA,OAAA,EAAa;AACXD,MAAAA,OAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA,IAAAA;AACD;AACF;AAVHZ,CAAAA;;AAaAA,YAAAA,CAAAA,qBAAAA,GAAqC,UAAA,SAAA,EAAA,KAAA,EAAsB;AACzD,MAAIe,OAAAA,GAAJ,EAAA;;AAEA,MAAA,KAAA,EAAW;AACT,QAAIC,KAAAA,IAASA,KAAAA,CAATA,IAAAA,IAAuBA,KAAAA,CAAAA,IAAAA,CAA3B,OAAA,EAA+C;AAC7CD,MAAAA,OAAAA,GAAUC,KAAAA,CAAAA,IAAAA,CAAVD,OAAAA;AACD;;AAED,QAAME,WAAAA,GAAc,OAAA,CAAA,IAAA,CAAa,UAAA,MAAA,EAAA;AAAA,aAAYC,MAAAA,CAAAA,GAAAA,KAAZ,SAAA;AAAjC,KAAoB,CAApB;;AAEA,QAAID,WAAAA,IAAeA,WAAAA,CAAnB,aAAA,EAA8C;AAC5C,aAAOA,WAAAA,CAAP,aAAA;AACD;AACF;;AAED,SAAA,KAAA;AAfFjB,CAAAA;;kBAkBeA,Y","sourcesContent":["import {\n  _LOCUS_ID_,\n  _INCOMING_,\n  _CREATED_,\n  LOCUSEVENT,\n  CORRELATION_ID\n} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\nconst MeetingsUtil = {};\n\nMeetingsUtil.extractDestination = (destination, type) => {\n  let dest = destination;\n\n  if (type === _LOCUS_ID_) {\n    if (!(destination && destination.url)) {\n      throw new ParameterError('You cannot create a meeting by locus without a locus.url defined');\n    }\n    dest = destination.url;\n  }\n\n  return dest;\n};\n\nMeetingsUtil.getMeetingAddedType = (type) => (type === _LOCUS_ID_ ? _INCOMING_ : _CREATED_);\n\nMeetingsUtil.handleRoapMercury = (envelope, meetingCollection) => {\n  const {data} = envelope;\n  const {eventType} = data;\n\n  if (eventType === LOCUSEVENT.MESSAGE_ROAP) {\n    const meeting = meetingCollection.getByKey(CORRELATION_ID, data.correlationId);\n\n    if (meeting) {\n      meeting.roap.roapEvent(data);\n    }\n  }\n};\n\nMeetingsUtil.checkForCorrelationId = (deviceUrl, locus) => {\n  let devices = [];\n\n  if (locus) {\n    if (locus && locus.self && locus.self.devices) {\n      devices = locus.self.devices;\n    }\n\n    const foundDevice = devices.find((device) => device.url === deviceUrl);\n\n    if (foundDevice && foundDevice.correlationId) {\n      return foundDevice.correlationId;\n    }\n  }\n\n  return false;\n};\n\nexport default MeetingsUtil;\n"]},"metadata":{},"sourceType":"script"}