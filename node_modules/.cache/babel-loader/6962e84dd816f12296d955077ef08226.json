{"ast":null,"code":"/**\n * Copyright (c) 2019, Peculiar Ventures, All rights reserved.\n */\nimport { Convert, BufferSourceConverter } from 'pvtsutils';\nexport { BufferSourceConverter } from 'pvtsutils';\nimport { __decorate } from 'tslib';\nimport { AsnProp, AsnPropTypes, AsnType, AsnTypeTypes, AsnIntegerConverter, AsnSerializer } from '@peculiar/asn1-schema';\nimport { JsonProp } from '@peculiar/json-schema';\nimport { Integer } from 'asn1js';\n\nclass CryptoError extends Error {}\n\nclass AlgorithmError extends CryptoError {}\n\nclass UnsupportedOperationError extends CryptoError {\n  constructor(methodName) {\n    super(`Unsupported operation: ${methodName ? `${methodName}` : \"\"}`);\n  }\n\n}\n\nclass OperationError extends CryptoError {}\n\nclass RequiredPropertyError extends CryptoError {\n  constructor(propName) {\n    super(`${propName}: Missing required property`);\n  }\n\n}\n\nclass PemConverter {\n  static toArrayBuffer(pem) {\n    const base64 = pem.replace(/-{5}(BEGIN|END) .*-{5}/g, \"\").replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n    return Convert.FromBase64(base64);\n  }\n\n  static toUint8Array(pem) {\n    const bytes = this.toArrayBuffer(pem);\n    return new Uint8Array(bytes);\n  }\n\n  static fromBufferSource(buffer, tag) {\n    const base64 = Convert.ToBase64(buffer);\n    let sliced;\n    let offset = 0;\n    const rows = [];\n\n    while (true) {\n      sliced = base64.slice(offset, offset = offset + 64);\n\n      if (sliced.length) {\n        rows.push(sliced);\n\n        if (sliced.length < 64) {\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n\n    const upperCaseTag = tag.toUpperCase();\n    return `-----BEGIN ${upperCaseTag}-----\\n${rows.join(\"\\n\")}\\n-----END ${upperCaseTag}-----`;\n  }\n\n  static isPEM(data) {\n    return /-----BEGIN .+-----[A-Za-z0-9+\\/\\+\\=\\s\\n]+-----END .+-----/i.test(data);\n  }\n\n  static getTagName(pem) {\n    if (!this.isPEM(pem)) {\n      throw new Error(\"Bad parameter. Incoming data is not right PEM\");\n    }\n\n    const res = /-----BEGIN (.+)-----/.exec(pem);\n\n    if (!res) {\n      throw new Error(\"Cannot get tag from PEM\");\n    }\n\n    return res[1];\n  }\n\n  static hasTagName(pem, tagName) {\n    const tag = this.getTagName(pem);\n    return tagName.toLowerCase() === tag.toLowerCase();\n  }\n\n  static isCertificate(pem) {\n    return this.hasTagName(pem, \"certificate\");\n  }\n\n  static isCertificateRequest(pem) {\n    return this.hasTagName(pem, \"certificate request\");\n  }\n\n  static isCRL(pem) {\n    return this.hasTagName(pem, \"x509 crl\");\n  }\n\n  static isPublicKey(pem) {\n    return this.hasTagName(pem, \"public key\");\n  }\n\n}\n\nfunction isJWK(data) {\n  return typeof data === \"object\" && \"kty\" in data;\n}\n\nclass ProviderCrypto {\n  async digest(algorithm, data) {\n    this.checkDigest.apply(this, arguments);\n    return this.onDigest.apply(this, arguments);\n  }\n\n  checkDigest(algorithm, data) {\n    this.checkAlgorithmName(algorithm);\n  }\n\n  async onDigest(algorithm, data) {\n    throw new UnsupportedOperationError(\"digest\");\n  }\n\n  async generateKey(algorithm, extractable, keyUsages) {\n    this.checkGenerateKey.apply(this, arguments);\n    return this.onGenerateKey.apply(this, arguments);\n  }\n\n  checkGenerateKey(algorithm, extractable, keyUsages) {\n    this.checkAlgorithmName(algorithm);\n    this.checkGenerateKeyParams(algorithm);\n\n    if (!(keyUsages && keyUsages.length)) {\n      throw new TypeError(`Usages cannot be empty when creating a key.`);\n    }\n\n    let allowedUsages;\n\n    if (Array.isArray(this.usages)) {\n      allowedUsages = this.usages;\n    } else {\n      allowedUsages = this.usages.privateKey.concat(this.usages.publicKey);\n    }\n\n    this.checkKeyUsages(keyUsages, allowedUsages);\n  }\n\n  checkGenerateKeyParams(algorithm) {}\n\n  async onGenerateKey(algorithm, extractable, keyUsages) {\n    throw new UnsupportedOperationError(\"generateKey\");\n  }\n\n  async sign(algorithm, key, data) {\n    this.checkSign.apply(this, arguments);\n    return this.onSign.apply(this, arguments);\n  }\n\n  checkSign(algorithm, key, data) {\n    this.checkAlgorithmName(algorithm);\n    this.checkAlgorithmParams(algorithm);\n    this.checkCryptoKey(key, \"sign\");\n  }\n\n  async onSign(algorithm, key, data) {\n    throw new UnsupportedOperationError(\"sign\");\n  }\n\n  async verify(algorithm, key, signature, data) {\n    this.checkVerify.apply(this, arguments);\n    return this.onVerify.apply(this, arguments);\n  }\n\n  checkVerify(algorithm, key, signature, data) {\n    this.checkAlgorithmName(algorithm);\n    this.checkAlgorithmParams(algorithm);\n    this.checkCryptoKey(key, \"verify\");\n  }\n\n  async onVerify(algorithm, key, signature, data) {\n    throw new UnsupportedOperationError(\"verify\");\n  }\n\n  async encrypt(algorithm, key, data, options) {\n    this.checkEncrypt.apply(this, arguments);\n    return this.onEncrypt.apply(this, arguments);\n  }\n\n  checkEncrypt(algorithm, key, data, options = {}) {\n    this.checkAlgorithmName(algorithm);\n    this.checkAlgorithmParams(algorithm);\n    this.checkCryptoKey(key, options.keyUsage ? \"encrypt\" : void 0);\n  }\n\n  async onEncrypt(algorithm, key, data) {\n    throw new UnsupportedOperationError(\"encrypt\");\n  }\n\n  async decrypt(algorithm, key, data, options) {\n    this.checkDecrypt.apply(this, arguments);\n    return this.onDecrypt.apply(this, arguments);\n  }\n\n  checkDecrypt(algorithm, key, data, options = {}) {\n    this.checkAlgorithmName(algorithm);\n    this.checkAlgorithmParams(algorithm);\n    this.checkCryptoKey(key, options.keyUsage ? \"decrypt\" : void 0);\n  }\n\n  async onDecrypt(algorithm, key, data) {\n    throw new UnsupportedOperationError(\"decrypt\");\n  }\n\n  async deriveBits(algorithm, baseKey, length, options) {\n    this.checkDeriveBits.apply(this, arguments);\n    return this.onDeriveBits.apply(this, arguments);\n  }\n\n  checkDeriveBits(algorithm, baseKey, length, options = {}) {\n    this.checkAlgorithmName(algorithm);\n    this.checkAlgorithmParams(algorithm);\n    this.checkCryptoKey(baseKey, options.keyUsage ? \"deriveBits\" : void 0);\n\n    if (length % 8 !== 0) {\n      throw new OperationError(\"length: Is not multiple of 8\");\n    }\n  }\n\n  async onDeriveBits(algorithm, baseKey, length) {\n    throw new UnsupportedOperationError(\"deriveBits\");\n  }\n\n  async exportKey(format, key) {\n    this.checkExportKey.apply(this, arguments);\n    return this.onExportKey.apply(this, arguments);\n  }\n\n  checkExportKey(format, key) {\n    this.checkKeyFormat(format);\n    this.checkCryptoKey(key);\n\n    if (!key.extractable) {\n      throw new CryptoError(\"key: Is not extractable\");\n    }\n  }\n\n  async onExportKey(format, key) {\n    throw new UnsupportedOperationError(\"exportKey\");\n  }\n\n  async importKey(format, keyData, algorithm, extractable, keyUsages) {\n    this.checkImportKey.apply(this, arguments);\n    return this.onImportKey.apply(this, arguments);\n  }\n\n  checkImportKey(format, keyData, algorithm, extractable, keyUsages) {\n    this.checkKeyFormat(format);\n    this.checkKeyData(format, keyData);\n    this.checkAlgorithmName(algorithm);\n    this.checkImportParams(algorithm);\n\n    if (Array.isArray(this.usages)) {\n      this.checkKeyUsages(keyUsages, this.usages);\n    }\n  }\n\n  async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n    throw new UnsupportedOperationError(\"importKey\");\n  }\n\n  checkAlgorithmName(algorithm) {\n    if (algorithm.name.toLowerCase() !== this.name.toLowerCase()) {\n      throw new AlgorithmError(\"Unrecognized name\");\n    }\n  }\n\n  checkAlgorithmParams(algorithm) {}\n\n  checkDerivedKeyParams(algorithm) {}\n\n  checkKeyUsages(usages, allowed) {\n    for (const usage of usages) {\n      if (allowed.indexOf(usage) === -1) {\n        throw new TypeError(\"Cannot create a key using the specified key usages\");\n      }\n    }\n  }\n\n  checkCryptoKey(key, keyUsage) {\n    this.checkAlgorithmName(key.algorithm);\n\n    if (keyUsage && key.usages.indexOf(keyUsage) === -1) {\n      throw new CryptoError(`key does not match that of operation`);\n    }\n  }\n\n  checkRequiredProperty(data, propName) {\n    if (!(propName in data)) {\n      throw new RequiredPropertyError(propName);\n    }\n  }\n\n  checkHashAlgorithm(algorithm, hashAlgorithms) {\n    for (const item of hashAlgorithms) {\n      if (item.toLowerCase() === algorithm.name.toLowerCase()) {\n        return;\n      }\n    }\n\n    throw new OperationError(`hash: Must be one of ${hashAlgorithms.join(\", \")}`);\n  }\n\n  checkImportParams(algorithm) {}\n\n  checkKeyFormat(format) {\n    switch (format) {\n      case \"raw\":\n      case \"pkcs8\":\n      case \"spki\":\n      case \"jwk\":\n        break;\n\n      default:\n        throw new TypeError(\"format: Is invalid value. Must be 'jwk', 'raw', 'spki', or 'pkcs8'\");\n    }\n  }\n\n  checkKeyData(format, keyData) {\n    if (!keyData) {\n      throw new TypeError(\"keyData: Cannot be empty on empty on key importing\");\n    }\n\n    if (format === \"jwk\") {\n      if (!isJWK(keyData)) {\n        throw new TypeError(\"keyData: Is not JsonWebToken\");\n      }\n    } else if (!BufferSourceConverter.isBufferSource(keyData)) {\n      throw new TypeError(\"keyData: Is not ArrayBufferView or ArrayBuffer\");\n    }\n  }\n\n  prepareData(data) {\n    return BufferSourceConverter.toArrayBuffer(data);\n  }\n\n}\n\nclass AesProvider extends ProviderCrypto {\n  checkGenerateKeyParams(algorithm) {\n    this.checkRequiredProperty(algorithm, \"length\");\n\n    if (typeof algorithm.length !== \"number\") {\n      throw new TypeError(\"length: Is not of type Number\");\n    }\n\n    switch (algorithm.length) {\n      case 128:\n      case 192:\n      case 256:\n        break;\n\n      default:\n        throw new TypeError(\"length: Must be 128, 192, or 256\");\n    }\n  }\n\n  checkDerivedKeyParams(algorithm) {\n    this.checkGenerateKeyParams(algorithm);\n  }\n\n}\n\nclass AesCbcProvider extends AesProvider {\n  constructor() {\n    super(...arguments);\n    this.name = \"AES-CBC\";\n    this.usages = [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"];\n  }\n\n  checkAlgorithmParams(algorithm) {\n    this.checkRequiredProperty(algorithm, \"iv\");\n\n    if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {\n      throw new TypeError(\"iv: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n    }\n\n    if (algorithm.iv.byteLength !== 16) {\n      throw new TypeError(\"iv: Must have length 16 bytes\");\n    }\n  }\n\n}\n\nclass AesCmacProvider extends AesProvider {\n  constructor() {\n    super(...arguments);\n    this.name = \"AES-CMAC\";\n    this.usages = [\"sign\", \"verify\"];\n  }\n\n  checkAlgorithmParams(algorithm) {\n    this.checkRequiredProperty(algorithm, \"length\");\n\n    if (typeof algorithm.length !== \"number\") {\n      throw new TypeError(\"length: Is not a Number\");\n    }\n\n    if (algorithm.length < 1) {\n      throw new OperationError(\"length: Must be more than 0\");\n    }\n  }\n\n}\n\nclass AesCtrProvider extends AesProvider {\n  constructor() {\n    super(...arguments);\n    this.name = \"AES-CTR\";\n    this.usages = [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"];\n  }\n\n  checkAlgorithmParams(algorithm) {\n    this.checkRequiredProperty(algorithm, \"counter\");\n\n    if (!(algorithm.counter instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.counter))) {\n      throw new TypeError(\"counter: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n    }\n\n    if (algorithm.counter.byteLength !== 16) {\n      throw new TypeError(\"iv: Must have length 16 bytes\");\n    }\n\n    this.checkRequiredProperty(algorithm, \"length\");\n\n    if (typeof algorithm.length !== \"number\") {\n      throw new TypeError(\"length: Is not a Number\");\n    }\n\n    if (algorithm.length < 1) {\n      throw new OperationError(\"length: Must be more than 0\");\n    }\n  }\n\n}\n\nclass AesEcbProvider extends AesProvider {\n  constructor() {\n    super(...arguments);\n    this.name = \"AES-ECB\";\n    this.usages = [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"];\n  }\n\n}\n\nclass AesGcmProvider extends AesProvider {\n  constructor() {\n    super(...arguments);\n    this.name = \"AES-GCM\";\n    this.usages = [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"];\n  }\n\n  checkAlgorithmParams(algorithm) {\n    this.checkRequiredProperty(algorithm, \"iv\");\n\n    if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {\n      throw new TypeError(\"iv: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n    }\n\n    if (algorithm.iv.byteLength < 1) {\n      throw new OperationError(\"iv: Must have length more than 0 and less than 2^64 - 1\");\n    }\n\n    if (!(\"tagLength\" in algorithm)) {\n      algorithm.tagLength = 128;\n    }\n\n    switch (algorithm.tagLength) {\n      case 32:\n      case 64:\n      case 96:\n      case 104:\n      case 112:\n      case 120:\n      case 128:\n        break;\n\n      default:\n        throw new OperationError(\"tagLength: Must be one of 32, 64, 96, 104, 112, 120 or 128\");\n    }\n  }\n\n}\n\nclass AesKwProvider extends AesProvider {\n  constructor() {\n    super(...arguments);\n    this.name = \"AES-KW\";\n    this.usages = [\"wrapKey\", \"unwrapKey\"];\n  }\n\n}\n\nclass DesProvider extends ProviderCrypto {\n  constructor() {\n    super(...arguments);\n    this.usages = [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"];\n  }\n\n  checkAlgorithmParams(algorithm) {\n    if (this.ivSize) {\n      this.checkRequiredProperty(algorithm, \"iv\");\n\n      if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {\n        throw new TypeError(\"iv: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n      }\n\n      if (algorithm.iv.byteLength !== this.ivSize) {\n        throw new TypeError(`iv: Must have length ${this.ivSize} bytes`);\n      }\n    }\n  }\n\n  checkGenerateKeyParams(algorithm) {\n    this.checkRequiredProperty(algorithm, \"length\");\n\n    if (typeof algorithm.length !== \"number\") {\n      throw new TypeError(\"length: Is not of type Number\");\n    }\n\n    if (algorithm.length !== this.keySizeBits) {\n      throw new OperationError(`algorith.length: Must be ${this.keySizeBits}`);\n    }\n  }\n\n  checkDerivedKeyParams(algorithm) {\n    this.checkGenerateKeyParams(algorithm);\n  }\n\n}\n\nclass RsaProvider extends ProviderCrypto {\n  constructor() {\n    super(...arguments);\n    this.hashAlgorithms = [\"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\"];\n  }\n\n  checkGenerateKeyParams(algorithm) {\n    this.checkRequiredProperty(algorithm, \"hash\");\n    this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\n    this.checkRequiredProperty(algorithm, \"publicExponent\");\n\n    if (!(algorithm.publicExponent && algorithm.publicExponent instanceof Uint8Array)) {\n      throw new TypeError(\"publicExponent: Missing or not a Uint8Array\");\n    }\n\n    const publicExponent = Convert.ToBase64(algorithm.publicExponent);\n\n    if (!(publicExponent === \"Aw==\" || publicExponent === \"AQAB\")) {\n      throw new TypeError(\"publicExponent: Must be [3] or [1,0,1]\");\n    }\n\n    this.checkRequiredProperty(algorithm, \"modulusLength\");\n\n    switch (algorithm.modulusLength) {\n      case 1024:\n      case 2048:\n      case 4096:\n        break;\n\n      default:\n        throw new TypeError(\"modulusLength: Must be 1024, 2048, or 4096\");\n    }\n  }\n\n  checkImportParams(algorithm) {\n    this.checkRequiredProperty(algorithm, \"hash\");\n    this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\n  }\n\n}\n\nclass RsaSsaProvider extends RsaProvider {\n  constructor() {\n    super(...arguments);\n    this.name = \"RSASSA-PKCS1-v1_5\";\n    this.usages = {\n      privateKey: [\"sign\"],\n      publicKey: [\"verify\"]\n    };\n  }\n\n}\n\nclass RsaPssProvider extends RsaProvider {\n  constructor() {\n    super(...arguments);\n    this.name = \"RSA-PSS\";\n    this.usages = {\n      privateKey: [\"sign\"],\n      publicKey: [\"verify\"]\n    };\n  }\n\n  checkAlgorithmParams(algorithm) {\n    this.checkRequiredProperty(algorithm, \"saltLength\");\n\n    if (typeof algorithm.saltLength !== \"number\") {\n      throw new TypeError(\"saltLength: Is not a Number\");\n    }\n\n    if (algorithm.saltLength < 1) {\n      throw new RangeError(\"saltLength: Must be more than 0\");\n    }\n  }\n\n}\n\nclass RsaOaepProvider extends RsaProvider {\n  constructor() {\n    super(...arguments);\n    this.name = \"RSA-OAEP\";\n    this.usages = {\n      privateKey: [\"decrypt\", \"unwrapKey\"],\n      publicKey: [\"encrypt\", \"wrapKey\"]\n    };\n  }\n\n  checkAlgorithmParams(algorithm) {\n    if (algorithm.label && !(algorithm.label instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.label))) {\n      throw new TypeError(\"label: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n    }\n  }\n\n}\n\nclass EllipticProvider extends ProviderCrypto {\n  checkGenerateKeyParams(algorithm) {\n    this.checkRequiredProperty(algorithm, \"namedCurve\");\n    this.checkNamedCurve(algorithm.namedCurve);\n  }\n\n  checkNamedCurve(namedCurve) {\n    for (const item of this.namedCurves) {\n      if (item.toLowerCase() === namedCurve.toLowerCase()) {\n        return;\n      }\n    }\n\n    throw new OperationError(`namedCurve: Must be one of ${this.namedCurves.join(\", \")}`);\n  }\n\n}\n\nclass EcdsaProvider extends EllipticProvider {\n  constructor() {\n    super(...arguments);\n    this.name = \"ECDSA\";\n    this.hashAlgorithms = [\"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\"];\n    this.usages = {\n      privateKey: [\"sign\"],\n      publicKey: [\"verify\"]\n    };\n    this.namedCurves = [\"P-256\", \"P-384\", \"P-521\", \"K-256\"];\n  }\n\n  checkAlgorithmParams(algorithm) {\n    this.checkRequiredProperty(algorithm, \"hash\");\n    this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\n  }\n\n}\n\nconst KEY_TYPES = [\"secret\", \"private\", \"public\"];\n\nclass CryptoKey {\n  static create(algorithm, type, extractable, usages) {\n    const key = new this();\n    key.algorithm = algorithm;\n    key.type = type;\n    key.extractable = extractable;\n    key.usages = usages;\n    return key;\n  }\n\n  static isKeyType(data) {\n    return KEY_TYPES.indexOf(data) !== -1;\n  }\n\n}\n\nclass EcdhProvider extends EllipticProvider {\n  constructor() {\n    super(...arguments);\n    this.name = \"ECDH\";\n    this.usages = {\n      privateKey: [\"deriveBits\", \"deriveKey\"],\n      publicKey: []\n    };\n    this.namedCurves = [\"P-256\", \"P-384\", \"P-521\", \"K-256\"];\n  }\n\n  checkAlgorithmParams(algorithm) {\n    this.checkRequiredProperty(algorithm, \"public\");\n\n    if (!(algorithm.public instanceof CryptoKey)) {\n      throw new TypeError(\"public: Is not a CryptoKey\");\n    }\n\n    if (algorithm.public.type !== \"public\") {\n      throw new OperationError(\"public: Is not a public key\");\n    }\n\n    if (algorithm.public.algorithm.name !== this.name) {\n      throw new OperationError(`public: Is not ${this.name} key`);\n    }\n  }\n\n}\n\nclass HmacProvider extends ProviderCrypto {\n  constructor() {\n    super(...arguments);\n    this.name = \"HMAC\";\n    this.hashAlgorithms = [\"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\"];\n    this.usages = [\"sign\", \"verify\"];\n  }\n\n  getDefaultLength(algName) {\n    switch (algName.toUpperCase()) {\n      case \"SHA-1\":\n        return 160;\n\n      case \"SHA-256\":\n        return 256;\n\n      case \"SHA-384\":\n        return 384;\n\n      case \"SHA-512\":\n        return 512;\n\n      default:\n        throw new Error(`Unknown algorithm name '${algName}'`);\n    }\n  }\n\n  checkGenerateKeyParams(algorithm) {\n    this.checkRequiredProperty(algorithm, \"hash\");\n    this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\n\n    if (\"length\" in algorithm) {\n      if (typeof algorithm.length !== \"number\") {\n        throw new TypeError(\"length: Is not a Number\");\n      }\n\n      if (algorithm.length < 1) {\n        throw new RangeError(\"length: Number is out of range\");\n      }\n    }\n  }\n\n  checkImportParams(algorithm) {\n    this.checkRequiredProperty(algorithm, \"hash\");\n    this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\n  }\n\n}\n\nclass Pbkdf2Provider extends ProviderCrypto {\n  constructor() {\n    super(...arguments);\n    this.name = \"PBKDF2\";\n    this.hashAlgorithms = [\"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\"];\n    this.usages = [\"deriveBits\", \"deriveKey\"];\n  }\n\n  checkAlgorithmParams(algorithm) {\n    this.checkRequiredProperty(algorithm, \"hash\");\n    this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\n    this.checkRequiredProperty(algorithm, \"salt\");\n\n    if (!(algorithm.salt instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.salt))) {\n      throw new TypeError(\"salt: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n    }\n\n    this.checkRequiredProperty(algorithm, \"iterations\");\n\n    if (typeof algorithm.iterations !== \"number\") {\n      throw new TypeError(\"iterations: Is not a Number\");\n    }\n\n    if (algorithm.iterations < 1) {\n      throw new TypeError(\"iterations: Is less than 1\");\n    }\n  }\n\n  checkImportKey(format, keyData, algorithm, extractable, keyUsages) {\n    super.checkImportKey(format, keyData, algorithm, extractable, keyUsages);\n\n    if (extractable) {\n      throw new SyntaxError(\"extractable: Must be False\");\n    }\n  }\n\n}\n\nclass HkdfProvider extends ProviderCrypto {\n  constructor() {\n    super(...arguments);\n    this.name = \"HKDF\";\n    this.hashAlgorithms = [\"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\"];\n    this.usages = [\"deriveKey\", \"deriveBits\"];\n  }\n\n  checkAlgorithmParams(algorithm) {\n    this.checkRequiredProperty(algorithm, \"hash\");\n    this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\n    this.checkRequiredProperty(algorithm, \"salt\");\n\n    if (!BufferSourceConverter.isBufferSource(algorithm.salt)) {\n      throw new TypeError(\"salt: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n    }\n\n    this.checkRequiredProperty(algorithm, \"info\");\n\n    if (!BufferSourceConverter.isBufferSource(algorithm.info)) {\n      throw new TypeError(\"salt: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n    }\n  }\n\n  checkImportKey(format, keyData, algorithm, extractable, keyUsages) {\n    super.checkImportKey(format, keyData, algorithm, extractable, keyUsages);\n\n    if (extractable) {\n      throw new SyntaxError(\"extractable: Must be False\");\n    }\n  }\n\n}\n\nclass Crypto {}\n\nclass ProviderStorage {\n  constructor() {\n    this.items = {};\n  }\n\n  get(algorithmName) {\n    return this.items[algorithmName.toLowerCase()] || null;\n  }\n\n  set(provider) {\n    this.items[provider.name.toLowerCase()] = provider;\n  }\n\n  removeAt(algorithmName) {\n    const provider = this.get(algorithmName.toLowerCase());\n\n    if (provider) {\n      delete this.items[algorithmName];\n    }\n\n    return provider;\n  }\n\n  has(name) {\n    return !!this.get(name);\n  }\n\n  get length() {\n    return Object.keys(this.items).length;\n  }\n\n  get algorithms() {\n    const algorithms = [];\n\n    for (const key in this.items) {\n      const provider = this.items[key];\n      algorithms.push(provider.name);\n    }\n\n    return algorithms.sort();\n  }\n\n}\n\nclass SubtleCrypto {\n  constructor() {\n    this.providers = new ProviderStorage();\n  }\n\n  static isHashedAlgorithm(data) {\n    return data instanceof Object && \"name\" in data && \"hash\" in data;\n  }\n\n  async digest(algorithm, data) {\n    this.checkRequiredArguments(arguments, 2, \"digest\");\n    const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n    const preparedData = BufferSourceConverter.toArrayBuffer(data);\n    const provider = this.getProvider(preparedAlgorithm.name);\n    const result = await provider.digest(preparedAlgorithm, preparedData);\n    return result;\n  }\n\n  async generateKey(algorithm, extractable, keyUsages) {\n    this.checkRequiredArguments(arguments, 3, \"generateKey\");\n    const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n    const provider = this.getProvider(preparedAlgorithm.name);\n    const result = await provider.generateKey({ ...preparedAlgorithm,\n      name: provider.name\n    }, extractable, keyUsages);\n    return result;\n  }\n\n  async sign(algorithm, key, data) {\n    this.checkRequiredArguments(arguments, 3, \"sign\");\n    this.checkCryptoKey(key);\n    const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n    const preparedData = BufferSourceConverter.toArrayBuffer(data);\n    const provider = this.getProvider(preparedAlgorithm.name);\n    const result = await provider.sign({ ...preparedAlgorithm,\n      name: provider.name\n    }, key, preparedData);\n    return result;\n  }\n\n  async verify(algorithm, key, signature, data) {\n    this.checkRequiredArguments(arguments, 4, \"verify\");\n    this.checkCryptoKey(key);\n    const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n    const preparedData = BufferSourceConverter.toArrayBuffer(data);\n    const preparedSignature = BufferSourceConverter.toArrayBuffer(signature);\n    const provider = this.getProvider(preparedAlgorithm.name);\n    const result = await provider.verify({ ...preparedAlgorithm,\n      name: provider.name\n    }, key, preparedSignature, preparedData);\n    return result;\n  }\n\n  async encrypt(algorithm, key, data) {\n    this.checkRequiredArguments(arguments, 3, \"encrypt\");\n    this.checkCryptoKey(key);\n    const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n    const preparedData = BufferSourceConverter.toArrayBuffer(data);\n    const provider = this.getProvider(preparedAlgorithm.name);\n    const result = await provider.encrypt({ ...preparedAlgorithm,\n      name: provider.name\n    }, key, preparedData, {\n      keyUsage: true\n    });\n    return result;\n  }\n\n  async decrypt(algorithm, key, data) {\n    this.checkRequiredArguments(arguments, 3, \"decrypt\");\n    this.checkCryptoKey(key);\n    const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n    const preparedData = BufferSourceConverter.toArrayBuffer(data);\n    const provider = this.getProvider(preparedAlgorithm.name);\n    const result = await provider.decrypt({ ...preparedAlgorithm,\n      name: provider.name\n    }, key, preparedData, {\n      keyUsage: true\n    });\n    return result;\n  }\n\n  async deriveBits(algorithm, baseKey, length) {\n    this.checkRequiredArguments(arguments, 3, \"deriveBits\");\n    this.checkCryptoKey(baseKey);\n    const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n    const provider = this.getProvider(preparedAlgorithm.name);\n    const result = await provider.deriveBits({ ...preparedAlgorithm,\n      name: provider.name\n    }, baseKey, length, {\n      keyUsage: true\n    });\n    return result;\n  }\n\n  async deriveKey(algorithm, baseKey, derivedKeyType, extractable, keyUsages) {\n    this.checkRequiredArguments(arguments, 5, \"deriveKey\");\n    const preparedDerivedKeyType = this.prepareAlgorithm(derivedKeyType);\n    const importProvider = this.getProvider(preparedDerivedKeyType.name);\n    importProvider.checkDerivedKeyParams(preparedDerivedKeyType);\n    const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n    const provider = this.getProvider(preparedAlgorithm.name);\n    provider.checkCryptoKey(baseKey, \"deriveKey\");\n    const derivedBits = await provider.deriveBits({ ...preparedAlgorithm,\n      name: provider.name\n    }, baseKey, derivedKeyType.length, {\n      keyUsage: false\n    });\n    return this.importKey(\"raw\", derivedBits, derivedKeyType, extractable, keyUsages);\n  }\n\n  async exportKey(format, key) {\n    this.checkRequiredArguments(arguments, 2, \"exportKey\");\n    this.checkCryptoKey(key);\n    const provider = this.getProvider(key.algorithm.name);\n    const result = await provider.exportKey(format, key);\n    return result;\n  }\n\n  async importKey(format, keyData, algorithm, extractable, keyUsages) {\n    this.checkRequiredArguments(arguments, 5, \"importKey\");\n    const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n    const provider = this.getProvider(preparedAlgorithm.name);\n\n    if ([\"pkcs8\", \"spki\", \"raw\"].indexOf(format) !== -1) {\n      const preparedData = BufferSourceConverter.toArrayBuffer(keyData);\n      return provider.importKey(format, preparedData, { ...preparedAlgorithm,\n        name: provider.name\n      }, extractable, keyUsages);\n    } else {\n      if (!keyData.kty) {\n        throw new TypeError(\"keyData: Is not JSON\");\n      }\n    }\n\n    return provider.importKey(format, keyData, { ...preparedAlgorithm,\n      name: provider.name\n    }, extractable, keyUsages);\n  }\n\n  async wrapKey(format, key, wrappingKey, wrapAlgorithm) {\n    let keyData = await this.exportKey(format, key);\n\n    if (format === \"jwk\") {\n      const json = JSON.stringify(keyData);\n      keyData = Convert.FromUtf8String(json);\n    }\n\n    const preparedAlgorithm = this.prepareAlgorithm(wrapAlgorithm);\n    const preparedData = BufferSourceConverter.toArrayBuffer(keyData);\n    const provider = this.getProvider(preparedAlgorithm.name);\n    return provider.encrypt({ ...preparedAlgorithm,\n      name: provider.name\n    }, wrappingKey, preparedData, {\n      keyUsage: false\n    });\n  }\n\n  async unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages) {\n    const preparedAlgorithm = this.prepareAlgorithm(unwrapAlgorithm);\n    const preparedData = BufferSourceConverter.toArrayBuffer(wrappedKey);\n    const provider = this.getProvider(preparedAlgorithm.name);\n    let keyData = await provider.decrypt({ ...preparedAlgorithm,\n      name: provider.name\n    }, unwrappingKey, preparedData, {\n      keyUsage: false\n    });\n\n    if (format === \"jwk\") {\n      try {\n        keyData = JSON.parse(Convert.ToUtf8String(keyData));\n      } catch (e) {\n        const error = new TypeError(\"wrappedKey: Is not a JSON\");\n        error.internal = e;\n        throw error;\n      }\n    }\n\n    return this.importKey(format, keyData, unwrappedKeyAlgorithm, extractable, keyUsages);\n  }\n\n  checkRequiredArguments(args, size, methodName) {\n    if (args.length !== size) {\n      throw new TypeError(`Failed to execute '${methodName}' on 'SubtleCrypto': ${size} arguments required, but only ${args.length} present`);\n    }\n  }\n\n  prepareAlgorithm(algorithm) {\n    if (typeof algorithm === \"string\") {\n      return {\n        name: algorithm\n      };\n    }\n\n    if (SubtleCrypto.isHashedAlgorithm(algorithm)) {\n      const preparedAlgorithm = { ...algorithm\n      };\n      preparedAlgorithm.hash = this.prepareAlgorithm(algorithm.hash);\n      return preparedAlgorithm;\n    }\n\n    return { ...algorithm\n    };\n  }\n\n  getProvider(name) {\n    const provider = this.providers.get(name);\n\n    if (!provider) {\n      throw new AlgorithmError(\"Unrecognized name\");\n    }\n\n    return provider;\n  }\n\n  checkCryptoKey(key) {\n    if (!(key instanceof CryptoKey)) {\n      throw new TypeError(`Key is not of type 'CryptoKey'`);\n    }\n  }\n\n}\n\nlet ObjectIdentifier = class ObjectIdentifier {\n  constructor(value) {\n    if (value) {\n      this.value = value;\n    }\n  }\n\n};\n\n__decorate([AsnProp({\n  type: AsnPropTypes.ObjectIdentifier\n})], ObjectIdentifier.prototype, \"value\", void 0);\n\nObjectIdentifier = __decorate([AsnType({\n  type: AsnTypeTypes.Choice\n})], ObjectIdentifier);\n\nclass AlgorithmIdentifier {\n  constructor(params) {\n    Object.assign(this, params);\n  }\n\n}\n\n__decorate([AsnProp({\n  type: AsnPropTypes.ObjectIdentifier\n})], AlgorithmIdentifier.prototype, \"algorithm\", void 0);\n\n__decorate([AsnProp({\n  type: AsnPropTypes.Any,\n  optional: true\n})], AlgorithmIdentifier.prototype, \"parameters\", void 0);\n\nclass PrivateKeyInfo {\n  constructor() {\n    this.version = 0;\n    this.privateKeyAlgorithm = new AlgorithmIdentifier();\n    this.privateKey = new ArrayBuffer(0);\n  }\n\n}\n\n__decorate([AsnProp({\n  type: AsnPropTypes.Integer\n})], PrivateKeyInfo.prototype, \"version\", void 0);\n\n__decorate([AsnProp({\n  type: AlgorithmIdentifier\n})], PrivateKeyInfo.prototype, \"privateKeyAlgorithm\", void 0);\n\n__decorate([AsnProp({\n  type: AsnPropTypes.OctetString\n})], PrivateKeyInfo.prototype, \"privateKey\", void 0);\n\n__decorate([AsnProp({\n  type: AsnPropTypes.Any,\n  optional: true\n})], PrivateKeyInfo.prototype, \"attributes\", void 0);\n\nclass PublicKeyInfo {\n  constructor() {\n    this.publicKeyAlgorithm = new AlgorithmIdentifier();\n    this.publicKey = new ArrayBuffer(0);\n  }\n\n}\n\n__decorate([AsnProp({\n  type: AlgorithmIdentifier\n})], PublicKeyInfo.prototype, \"publicKeyAlgorithm\", void 0);\n\n__decorate([AsnProp({\n  type: AsnPropTypes.BitString\n})], PublicKeyInfo.prototype, \"publicKey\", void 0);\n\nconst JsonBase64UrlArrayBufferConverter = {\n  fromJSON: value => Convert.FromBase64Url(value),\n  toJSON: value => Convert.ToBase64Url(new Uint8Array(value))\n};\nconst AsnIntegerArrayBufferConverter = {\n  fromASN: value => {\n    const valueHex = value.valueBlock.valueHex;\n    return !new Uint8Array(valueHex)[0] ? value.valueBlock.valueHex.slice(1) : value.valueBlock.valueHex;\n  },\n  toASN: value => {\n    const valueHex = new Uint8Array(value)[0] > 127 ? Buffer.concat([Buffer.from([0]), Buffer.from(value)]) : Buffer.from(value);\n    return new Integer({\n      valueHex: new Uint8Array(valueHex).buffer\n    });\n  }\n};\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  JsonBase64UrlArrayBufferConverter: JsonBase64UrlArrayBufferConverter,\n  AsnIntegerArrayBufferConverter: AsnIntegerArrayBufferConverter\n});\n\nclass RsaPrivateKey {\n  constructor() {\n    this.version = 0;\n    this.modulus = new ArrayBuffer(0);\n    this.publicExponent = new ArrayBuffer(0);\n    this.privateExponent = new ArrayBuffer(0);\n    this.prime1 = new ArrayBuffer(0);\n    this.prime2 = new ArrayBuffer(0);\n    this.exponent1 = new ArrayBuffer(0);\n    this.exponent2 = new ArrayBuffer(0);\n    this.coefficient = new ArrayBuffer(0);\n  }\n\n}\n\n__decorate([AsnProp({\n  type: AsnPropTypes.Integer,\n  converter: AsnIntegerConverter\n})], RsaPrivateKey.prototype, \"version\", void 0);\n\n__decorate([AsnProp({\n  type: AsnPropTypes.Integer,\n  converter: AsnIntegerArrayBufferConverter\n}), JsonProp({\n  name: \"n\",\n  converter: JsonBase64UrlArrayBufferConverter\n})], RsaPrivateKey.prototype, \"modulus\", void 0);\n\n__decorate([AsnProp({\n  type: AsnPropTypes.Integer,\n  converter: AsnIntegerArrayBufferConverter\n}), JsonProp({\n  name: \"e\",\n  converter: JsonBase64UrlArrayBufferConverter\n})], RsaPrivateKey.prototype, \"publicExponent\", void 0);\n\n__decorate([AsnProp({\n  type: AsnPropTypes.Integer,\n  converter: AsnIntegerArrayBufferConverter\n}), JsonProp({\n  name: \"d\",\n  converter: JsonBase64UrlArrayBufferConverter\n})], RsaPrivateKey.prototype, \"privateExponent\", void 0);\n\n__decorate([AsnProp({\n  type: AsnPropTypes.Integer,\n  converter: AsnIntegerArrayBufferConverter\n}), JsonProp({\n  name: \"p\",\n  converter: JsonBase64UrlArrayBufferConverter\n})], RsaPrivateKey.prototype, \"prime1\", void 0);\n\n__decorate([AsnProp({\n  type: AsnPropTypes.Integer,\n  converter: AsnIntegerArrayBufferConverter\n}), JsonProp({\n  name: \"q\",\n  converter: JsonBase64UrlArrayBufferConverter\n})], RsaPrivateKey.prototype, \"prime2\", void 0);\n\n__decorate([AsnProp({\n  type: AsnPropTypes.Integer,\n  converter: AsnIntegerArrayBufferConverter\n}), JsonProp({\n  name: \"dp\",\n  converter: JsonBase64UrlArrayBufferConverter\n})], RsaPrivateKey.prototype, \"exponent1\", void 0);\n\n__decorate([AsnProp({\n  type: AsnPropTypes.Integer,\n  converter: AsnIntegerArrayBufferConverter\n}), JsonProp({\n  name: \"dq\",\n  converter: JsonBase64UrlArrayBufferConverter\n})], RsaPrivateKey.prototype, \"exponent2\", void 0);\n\n__decorate([AsnProp({\n  type: AsnPropTypes.Integer,\n  converter: AsnIntegerArrayBufferConverter\n}), JsonProp({\n  name: \"qi\",\n  converter: JsonBase64UrlArrayBufferConverter\n})], RsaPrivateKey.prototype, \"coefficient\", void 0);\n\n__decorate([AsnProp({\n  type: AsnPropTypes.Any,\n  optional: true\n})], RsaPrivateKey.prototype, \"otherPrimeInfos\", void 0);\n\nclass RsaPublicKey {\n  constructor() {\n    this.modulus = new ArrayBuffer(0);\n    this.publicExponent = new ArrayBuffer(0);\n  }\n\n}\n\n__decorate([AsnProp({\n  type: AsnPropTypes.Integer,\n  converter: AsnIntegerArrayBufferConverter\n}), JsonProp({\n  name: \"n\",\n  converter: JsonBase64UrlArrayBufferConverter\n})], RsaPublicKey.prototype, \"modulus\", void 0);\n\n__decorate([AsnProp({\n  type: AsnPropTypes.Integer,\n  converter: AsnIntegerArrayBufferConverter\n}), JsonProp({\n  name: \"e\",\n  converter: JsonBase64UrlArrayBufferConverter\n})], RsaPublicKey.prototype, \"publicExponent\", void 0);\n\nlet EcPublicKey = class EcPublicKey {\n  constructor(value) {\n    this.value = new ArrayBuffer(0);\n\n    if (value) {\n      this.value = value;\n    }\n  }\n\n  toJSON() {\n    let bytes = new Uint8Array(this.value);\n\n    if (bytes[0] !== 0x04) {\n      throw new CryptoError(\"Wrong ECPoint. Current version supports only Uncompressed (0x04) point\");\n    }\n\n    bytes = new Uint8Array(this.value.slice(1));\n    const size = bytes.length / 2;\n    const offset = 0;\n    const json = {\n      x: Convert.ToBase64Url(bytes.buffer.slice(offset, offset + size)),\n      y: Convert.ToBase64Url(bytes.buffer.slice(offset + size, offset + size + size))\n    };\n    return json;\n  }\n\n  fromJSON(json) {\n    if (!(\"x\" in json)) {\n      throw new Error(\"x: Missing required property\");\n    }\n\n    if (!(\"y\" in json)) {\n      throw new Error(\"y: Missing required property\");\n    }\n\n    const x = Convert.FromBase64Url(json.x);\n    const y = Convert.FromBase64Url(json.y);\n    const value = Buffer.concat([new Uint8Array([0x04]), new Uint8Array(x), new Uint8Array(y)]);\n    this.value = new Uint8Array(value).buffer;\n    return this;\n  }\n\n};\n\n__decorate([AsnProp({\n  type: AsnPropTypes.OctetString\n})], EcPublicKey.prototype, \"value\", void 0);\n\nEcPublicKey = __decorate([AsnType({\n  type: AsnTypeTypes.Choice\n})], EcPublicKey);\n\nclass EcPrivateKey {\n  constructor() {\n    this.version = 1;\n    this.privateKey = new ArrayBuffer(0);\n  }\n\n  fromJSON(json) {\n    if (!(\"d\" in json)) {\n      throw new Error(\"d: Missing required property\");\n    }\n\n    this.privateKey = Convert.FromBase64Url(json.d);\n\n    if (\"x\" in json) {\n      const publicKey = new EcPublicKey();\n      publicKey.fromJSON(json);\n      this.publicKey = AsnSerializer.toASN(publicKey).valueBlock.valueHex;\n    }\n\n    return this;\n  }\n\n  toJSON() {\n    const jwk = {};\n    jwk.d = Convert.ToBase64Url(this.privateKey);\n\n    if (this.publicKey) {\n      Object.assign(jwk, new EcPublicKey(this.publicKey).toJSON());\n    }\n\n    return jwk;\n  }\n\n}\n\n__decorate([AsnProp({\n  type: AsnPropTypes.Integer,\n  converter: AsnIntegerConverter\n})], EcPrivateKey.prototype, \"version\", void 0);\n\n__decorate([AsnProp({\n  type: AsnPropTypes.OctetString\n})], EcPrivateKey.prototype, \"privateKey\", void 0);\n\n__decorate([AsnProp({\n  context: 0,\n  type: AsnPropTypes.Any,\n  optional: true\n})], EcPrivateKey.prototype, \"parameters\", void 0);\n\n__decorate([AsnProp({\n  context: 1,\n  type: AsnPropTypes.BitString,\n  optional: true\n})], EcPrivateKey.prototype, \"publicKey\", void 0);\n\nconst AsnIntegerWithoutPaddingConverter = {\n  fromASN: value => {\n    const bytes = new Uint8Array(value.valueBlock.valueHex);\n    return bytes[0] === 0 ? bytes.buffer.slice(1) : bytes.buffer;\n  },\n  toASN: value => {\n    const bytes = new Uint8Array(value);\n\n    if (bytes[0] > 127) {\n      const newValue = new Uint8Array(bytes.length + 1);\n      newValue.set(bytes, 1);\n      return new Integer({\n        valueHex: newValue\n      });\n    }\n\n    return new Integer({\n      valueHex: value\n    });\n  }\n};\nvar index$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  AsnIntegerWithoutPaddingConverter: AsnIntegerWithoutPaddingConverter\n});\n\nclass EcDsaSignature {\n  constructor() {\n    this.r = new ArrayBuffer(0);\n    this.s = new ArrayBuffer(0);\n  }\n\n  static fromWebCryptoSignature(value) {\n    const wcSignature = BufferSourceConverter.toUint8Array(value);\n    const pointSize = wcSignature.byteLength / 2;\n    const ecSignature = new this();\n    ecSignature.r = ecSignature.removePadding(wcSignature.slice(0, pointSize));\n    ecSignature.s = ecSignature.removePadding(wcSignature.slice(pointSize, pointSize * 2));\n    return ecSignature;\n  }\n\n  toWebCryptoSignature(pointSize) {\n    pointSize = this.getPointSize();\n    const r = this.addPadding(pointSize, BufferSourceConverter.toUint8Array(this.r));\n    const s = this.addPadding(pointSize, BufferSourceConverter.toUint8Array(this.s));\n    const wcSignature = new Uint8Array(r.byteLength + s.byteLength);\n    wcSignature.set(r, 0);\n    wcSignature.set(s, r.length);\n    return wcSignature.buffer;\n  }\n\n  getPointSize() {\n    const size = Math.max(this.r.byteLength, this.s.byteLength);\n\n    switch (size) {\n      case 31:\n      case 32:\n        return 32;\n\n      case 47:\n      case 48:\n        return 48;\n\n      case 65:\n      case 66:\n        return 66;\n    }\n\n    throw new Error(\"Unsupported EC point size\");\n  }\n\n  addPadding(pointSize, bytes) {\n    const res = new Uint8Array(pointSize);\n    const uint8Array = BufferSourceConverter.toUint8Array(bytes);\n    res.set(uint8Array, pointSize - uint8Array.length);\n    return res;\n  }\n\n  removePadding(bytes) {\n    const uint8Array = BufferSourceConverter.toUint8Array(bytes);\n\n    for (let i = 0; i < uint8Array.length; i++) {\n      if (!uint8Array[i]) {\n        continue;\n      }\n\n      return uint8Array.slice(i);\n    }\n\n    return new Uint8Array(0);\n  }\n\n}\n\n__decorate([AsnProp({\n  type: AsnPropTypes.Integer,\n  converter: AsnIntegerWithoutPaddingConverter\n})], EcDsaSignature.prototype, \"r\", void 0);\n\n__decorate([AsnProp({\n  type: AsnPropTypes.Integer,\n  converter: AsnIntegerWithoutPaddingConverter\n})], EcDsaSignature.prototype, \"s\", void 0);\n\nvar index$2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  converters: index$1,\n\n  get ObjectIdentifier() {\n    return ObjectIdentifier;\n  },\n\n  AlgorithmIdentifier: AlgorithmIdentifier,\n  PrivateKeyInfo: PrivateKeyInfo,\n  PublicKeyInfo: PublicKeyInfo,\n  RsaPrivateKey: RsaPrivateKey,\n  RsaPublicKey: RsaPublicKey,\n  EcPrivateKey: EcPrivateKey,\n\n  get EcPublicKey() {\n    return EcPublicKey;\n  },\n\n  EcDsaSignature: EcDsaSignature\n});\nvar index$3 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  converters: index\n});\nexport { AesCbcProvider, AesCmacProvider, AesCtrProvider, AesEcbProvider, AesGcmProvider, AesKwProvider, AesProvider, AlgorithmError, Crypto, CryptoError, CryptoKey, DesProvider, EcdhProvider, EcdsaProvider, EllipticProvider, HkdfProvider, HmacProvider, OperationError, Pbkdf2Provider, PemConverter, ProviderCrypto, ProviderStorage, RequiredPropertyError, RsaOaepProvider, RsaProvider, RsaPssProvider, RsaSsaProvider, SubtleCrypto, UnsupportedOperationError, index$2 as asn1, isJWK, index$3 as json };","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/webcrypto-core/build/webcrypto-core.es.js"],"names":["Convert","BufferSourceConverter","__decorate","AsnProp","AsnPropTypes","AsnType","AsnTypeTypes","AsnIntegerConverter","AsnSerializer","JsonProp","Integer","CryptoError","Error","AlgorithmError","UnsupportedOperationError","constructor","methodName","OperationError","RequiredPropertyError","propName","PemConverter","toArrayBuffer","pem","base64","replace","FromBase64","toUint8Array","bytes","Uint8Array","fromBufferSource","buffer","tag","ToBase64","sliced","offset","rows","slice","length","push","upperCaseTag","toUpperCase","join","isPEM","data","test","getTagName","res","exec","hasTagName","tagName","toLowerCase","isCertificate","isCertificateRequest","isCRL","isPublicKey","isJWK","ProviderCrypto","digest","algorithm","checkDigest","apply","arguments","onDigest","checkAlgorithmName","generateKey","extractable","keyUsages","checkGenerateKey","onGenerateKey","checkGenerateKeyParams","TypeError","allowedUsages","Array","isArray","usages","privateKey","concat","publicKey","checkKeyUsages","sign","key","checkSign","onSign","checkAlgorithmParams","checkCryptoKey","verify","signature","checkVerify","onVerify","encrypt","options","checkEncrypt","onEncrypt","keyUsage","decrypt","checkDecrypt","onDecrypt","deriveBits","baseKey","checkDeriveBits","onDeriveBits","exportKey","format","checkExportKey","onExportKey","checkKeyFormat","importKey","keyData","checkImportKey","onImportKey","checkKeyData","checkImportParams","name","checkDerivedKeyParams","allowed","usage","indexOf","checkRequiredProperty","checkHashAlgorithm","hashAlgorithms","item","isBufferSource","prepareData","AesProvider","AesCbcProvider","iv","ArrayBuffer","isView","byteLength","AesCmacProvider","AesCtrProvider","counter","AesEcbProvider","AesGcmProvider","tagLength","AesKwProvider","DesProvider","ivSize","keySizeBits","RsaProvider","hash","publicExponent","modulusLength","RsaSsaProvider","RsaPssProvider","saltLength","RangeError","RsaOaepProvider","label","EllipticProvider","checkNamedCurve","namedCurve","namedCurves","EcdsaProvider","KEY_TYPES","CryptoKey","create","type","isKeyType","EcdhProvider","public","HmacProvider","getDefaultLength","algName","Pbkdf2Provider","salt","iterations","SyntaxError","HkdfProvider","info","Crypto","ProviderStorage","items","get","algorithmName","set","provider","removeAt","has","Object","keys","algorithms","sort","SubtleCrypto","providers","isHashedAlgorithm","checkRequiredArguments","preparedAlgorithm","prepareAlgorithm","preparedData","getProvider","result","preparedSignature","deriveKey","derivedKeyType","preparedDerivedKeyType","importProvider","derivedBits","kty","wrapKey","wrappingKey","wrapAlgorithm","json","JSON","stringify","FromUtf8String","unwrapKey","wrappedKey","unwrappingKey","unwrapAlgorithm","unwrappedKeyAlgorithm","parse","ToUtf8String","e","error","internal","args","size","ObjectIdentifier","value","prototype","Choice","AlgorithmIdentifier","params","assign","Any","optional","PrivateKeyInfo","version","privateKeyAlgorithm","OctetString","PublicKeyInfo","publicKeyAlgorithm","BitString","JsonBase64UrlArrayBufferConverter","fromJSON","FromBase64Url","toJSON","ToBase64Url","AsnIntegerArrayBufferConverter","fromASN","valueHex","valueBlock","toASN","Buffer","from","index","freeze","__proto__","RsaPrivateKey","modulus","privateExponent","prime1","prime2","exponent1","exponent2","coefficient","converter","RsaPublicKey","EcPublicKey","x","y","EcPrivateKey","d","jwk","context","AsnIntegerWithoutPaddingConverter","newValue","index$1","EcDsaSignature","r","s","fromWebCryptoSignature","wcSignature","pointSize","ecSignature","removePadding","toWebCryptoSignature","getPointSize","addPadding","Math","max","uint8Array","i","index$2","converters","index$3","asn1"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2019, Peculiar Ventures, All rights reserved.\n */\n\nimport { Convert, BufferSourceConverter } from 'pvtsutils';\nexport { BufferSourceConverter } from 'pvtsutils';\nimport { __decorate } from 'tslib';\nimport { AsnProp, AsnPropTypes, AsnType, AsnTypeTypes, AsnIntegerConverter, AsnSerializer } from '@peculiar/asn1-schema';\nimport { JsonProp } from '@peculiar/json-schema';\nimport { Integer } from 'asn1js';\n\nclass CryptoError extends Error {\r\n}\n\nclass AlgorithmError extends CryptoError {\r\n}\n\nclass UnsupportedOperationError extends CryptoError {\r\n    constructor(methodName) {\r\n        super(`Unsupported operation: ${methodName ? `${methodName}` : \"\"}`);\r\n    }\r\n}\n\nclass OperationError extends CryptoError {\r\n}\n\nclass RequiredPropertyError extends CryptoError {\r\n    constructor(propName) {\r\n        super(`${propName}: Missing required property`);\r\n    }\r\n}\n\nclass PemConverter {\r\n    static toArrayBuffer(pem) {\r\n        const base64 = pem\r\n            .replace(/-{5}(BEGIN|END) .*-{5}/g, \"\")\r\n            .replace(\"\\r\", \"\")\r\n            .replace(\"\\n\", \"\");\r\n        return Convert.FromBase64(base64);\r\n    }\r\n    static toUint8Array(pem) {\r\n        const bytes = this.toArrayBuffer(pem);\r\n        return new Uint8Array(bytes);\r\n    }\r\n    static fromBufferSource(buffer, tag) {\r\n        const base64 = Convert.ToBase64(buffer);\r\n        let sliced;\r\n        let offset = 0;\r\n        const rows = [];\r\n        while (true) {\r\n            sliced = base64.slice(offset, offset = offset + 64);\r\n            if (sliced.length) {\r\n                rows.push(sliced);\r\n                if (sliced.length < 64) {\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        const upperCaseTag = tag.toUpperCase();\r\n        return `-----BEGIN ${upperCaseTag}-----\\n${rows.join(\"\\n\")}\\n-----END ${upperCaseTag}-----`;\r\n    }\r\n    static isPEM(data) {\r\n        return /-----BEGIN .+-----[A-Za-z0-9+\\/\\+\\=\\s\\n]+-----END .+-----/i.test(data);\r\n    }\r\n    static getTagName(pem) {\r\n        if (!this.isPEM(pem)) {\r\n            throw new Error(\"Bad parameter. Incoming data is not right PEM\");\r\n        }\r\n        const res = /-----BEGIN (.+)-----/.exec(pem);\r\n        if (!res) {\r\n            throw new Error(\"Cannot get tag from PEM\");\r\n        }\r\n        return res[1];\r\n    }\r\n    static hasTagName(pem, tagName) {\r\n        const tag = this.getTagName(pem);\r\n        return tagName.toLowerCase() === tag.toLowerCase();\r\n    }\r\n    static isCertificate(pem) {\r\n        return this.hasTagName(pem, \"certificate\");\r\n    }\r\n    static isCertificateRequest(pem) {\r\n        return this.hasTagName(pem, \"certificate request\");\r\n    }\r\n    static isCRL(pem) {\r\n        return this.hasTagName(pem, \"x509 crl\");\r\n    }\r\n    static isPublicKey(pem) {\r\n        return this.hasTagName(pem, \"public key\");\r\n    }\r\n}\n\nfunction isJWK(data) {\r\n    return typeof data === \"object\" && \"kty\" in data;\r\n}\n\nclass ProviderCrypto {\r\n    async digest(algorithm, data) {\r\n        this.checkDigest.apply(this, arguments);\r\n        return this.onDigest.apply(this, arguments);\r\n    }\r\n    checkDigest(algorithm, data) {\r\n        this.checkAlgorithmName(algorithm);\r\n    }\r\n    async onDigest(algorithm, data) {\r\n        throw new UnsupportedOperationError(\"digest\");\r\n    }\r\n    async generateKey(algorithm, extractable, keyUsages) {\r\n        this.checkGenerateKey.apply(this, arguments);\r\n        return this.onGenerateKey.apply(this, arguments);\r\n    }\r\n    checkGenerateKey(algorithm, extractable, keyUsages) {\r\n        this.checkAlgorithmName(algorithm);\r\n        this.checkGenerateKeyParams(algorithm);\r\n        if (!(keyUsages && keyUsages.length)) {\r\n            throw new TypeError(`Usages cannot be empty when creating a key.`);\r\n        }\r\n        let allowedUsages;\r\n        if (Array.isArray(this.usages)) {\r\n            allowedUsages = this.usages;\r\n        }\r\n        else {\r\n            allowedUsages = this.usages.privateKey.concat(this.usages.publicKey);\r\n        }\r\n        this.checkKeyUsages(keyUsages, allowedUsages);\r\n    }\r\n    checkGenerateKeyParams(algorithm) {\r\n    }\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        throw new UnsupportedOperationError(\"generateKey\");\r\n    }\r\n    async sign(algorithm, key, data) {\r\n        this.checkSign.apply(this, arguments);\r\n        return this.onSign.apply(this, arguments);\r\n    }\r\n    checkSign(algorithm, key, data) {\r\n        this.checkAlgorithmName(algorithm);\r\n        this.checkAlgorithmParams(algorithm);\r\n        this.checkCryptoKey(key, \"sign\");\r\n    }\r\n    async onSign(algorithm, key, data) {\r\n        throw new UnsupportedOperationError(\"sign\");\r\n    }\r\n    async verify(algorithm, key, signature, data) {\r\n        this.checkVerify.apply(this, arguments);\r\n        return this.onVerify.apply(this, arguments);\r\n    }\r\n    checkVerify(algorithm, key, signature, data) {\r\n        this.checkAlgorithmName(algorithm);\r\n        this.checkAlgorithmParams(algorithm);\r\n        this.checkCryptoKey(key, \"verify\");\r\n    }\r\n    async onVerify(algorithm, key, signature, data) {\r\n        throw new UnsupportedOperationError(\"verify\");\r\n    }\r\n    async encrypt(algorithm, key, data, options) {\r\n        this.checkEncrypt.apply(this, arguments);\r\n        return this.onEncrypt.apply(this, arguments);\r\n    }\r\n    checkEncrypt(algorithm, key, data, options = {}) {\r\n        this.checkAlgorithmName(algorithm);\r\n        this.checkAlgorithmParams(algorithm);\r\n        this.checkCryptoKey(key, options.keyUsage ? \"encrypt\" : void 0);\r\n    }\r\n    async onEncrypt(algorithm, key, data) {\r\n        throw new UnsupportedOperationError(\"encrypt\");\r\n    }\r\n    async decrypt(algorithm, key, data, options) {\r\n        this.checkDecrypt.apply(this, arguments);\r\n        return this.onDecrypt.apply(this, arguments);\r\n    }\r\n    checkDecrypt(algorithm, key, data, options = {}) {\r\n        this.checkAlgorithmName(algorithm);\r\n        this.checkAlgorithmParams(algorithm);\r\n        this.checkCryptoKey(key, options.keyUsage ? \"decrypt\" : void 0);\r\n    }\r\n    async onDecrypt(algorithm, key, data) {\r\n        throw new UnsupportedOperationError(\"decrypt\");\r\n    }\r\n    async deriveBits(algorithm, baseKey, length, options) {\r\n        this.checkDeriveBits.apply(this, arguments);\r\n        return this.onDeriveBits.apply(this, arguments);\r\n    }\r\n    checkDeriveBits(algorithm, baseKey, length, options = {}) {\r\n        this.checkAlgorithmName(algorithm);\r\n        this.checkAlgorithmParams(algorithm);\r\n        this.checkCryptoKey(baseKey, options.keyUsage ? \"deriveBits\" : void 0);\r\n        if (length % 8 !== 0) {\r\n            throw new OperationError(\"length: Is not multiple of 8\");\r\n        }\r\n    }\r\n    async onDeriveBits(algorithm, baseKey, length) {\r\n        throw new UnsupportedOperationError(\"deriveBits\");\r\n    }\r\n    async exportKey(format, key) {\r\n        this.checkExportKey.apply(this, arguments);\r\n        return this.onExportKey.apply(this, arguments);\r\n    }\r\n    checkExportKey(format, key) {\r\n        this.checkKeyFormat(format);\r\n        this.checkCryptoKey(key);\r\n        if (!key.extractable) {\r\n            throw new CryptoError(\"key: Is not extractable\");\r\n        }\r\n    }\r\n    async onExportKey(format, key) {\r\n        throw new UnsupportedOperationError(\"exportKey\");\r\n    }\r\n    async importKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        this.checkImportKey.apply(this, arguments);\r\n        return this.onImportKey.apply(this, arguments);\r\n    }\r\n    checkImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        this.checkKeyFormat(format);\r\n        this.checkKeyData(format, keyData);\r\n        this.checkAlgorithmName(algorithm);\r\n        this.checkImportParams(algorithm);\r\n        if (Array.isArray(this.usages)) {\r\n            this.checkKeyUsages(keyUsages, this.usages);\r\n        }\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        throw new UnsupportedOperationError(\"importKey\");\r\n    }\r\n    checkAlgorithmName(algorithm) {\r\n        if (algorithm.name.toLowerCase() !== this.name.toLowerCase()) {\r\n            throw new AlgorithmError(\"Unrecognized name\");\r\n        }\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n    }\r\n    checkDerivedKeyParams(algorithm) {\r\n    }\r\n    checkKeyUsages(usages, allowed) {\r\n        for (const usage of usages) {\r\n            if (allowed.indexOf(usage) === -1) {\r\n                throw new TypeError(\"Cannot create a key using the specified key usages\");\r\n            }\r\n        }\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        this.checkAlgorithmName(key.algorithm);\r\n        if (keyUsage && key.usages.indexOf(keyUsage) === -1) {\r\n            throw new CryptoError(`key does not match that of operation`);\r\n        }\r\n    }\r\n    checkRequiredProperty(data, propName) {\r\n        if (!(propName in data)) {\r\n            throw new RequiredPropertyError(propName);\r\n        }\r\n    }\r\n    checkHashAlgorithm(algorithm, hashAlgorithms) {\r\n        for (const item of hashAlgorithms) {\r\n            if (item.toLowerCase() === algorithm.name.toLowerCase()) {\r\n                return;\r\n            }\r\n        }\r\n        throw new OperationError(`hash: Must be one of ${hashAlgorithms.join(\", \")}`);\r\n    }\r\n    checkImportParams(algorithm) {\r\n    }\r\n    checkKeyFormat(format) {\r\n        switch (format) {\r\n            case \"raw\":\r\n            case \"pkcs8\":\r\n            case \"spki\":\r\n            case \"jwk\":\r\n                break;\r\n            default:\r\n                throw new TypeError(\"format: Is invalid value. Must be 'jwk', 'raw', 'spki', or 'pkcs8'\");\r\n        }\r\n    }\r\n    checkKeyData(format, keyData) {\r\n        if (!keyData) {\r\n            throw new TypeError(\"keyData: Cannot be empty on empty on key importing\");\r\n        }\r\n        if (format === \"jwk\") {\r\n            if (!isJWK(keyData)) {\r\n                throw new TypeError(\"keyData: Is not JsonWebToken\");\r\n            }\r\n        }\r\n        else if (!BufferSourceConverter.isBufferSource(keyData)) {\r\n            throw new TypeError(\"keyData: Is not ArrayBufferView or ArrayBuffer\");\r\n        }\r\n    }\r\n    prepareData(data) {\r\n        return BufferSourceConverter.toArrayBuffer(data);\r\n    }\r\n}\n\nclass AesProvider extends ProviderCrypto {\r\n    checkGenerateKeyParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"length\");\r\n        if (typeof algorithm.length !== \"number\") {\r\n            throw new TypeError(\"length: Is not of type Number\");\r\n        }\r\n        switch (algorithm.length) {\r\n            case 128:\r\n            case 192:\r\n            case 256:\r\n                break;\r\n            default:\r\n                throw new TypeError(\"length: Must be 128, 192, or 256\");\r\n        }\r\n    }\r\n    checkDerivedKeyParams(algorithm) {\r\n        this.checkGenerateKeyParams(algorithm);\r\n    }\r\n}\n\nclass AesCbcProvider extends AesProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"AES-CBC\";\r\n        this.usages = [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"];\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"iv\");\r\n        if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {\r\n            throw new TypeError(\"iv: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n        }\r\n        if (algorithm.iv.byteLength !== 16) {\r\n            throw new TypeError(\"iv: Must have length 16 bytes\");\r\n        }\r\n    }\r\n}\n\nclass AesCmacProvider extends AesProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"AES-CMAC\";\r\n        this.usages = [\"sign\", \"verify\"];\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"length\");\r\n        if (typeof algorithm.length !== \"number\") {\r\n            throw new TypeError(\"length: Is not a Number\");\r\n        }\r\n        if (algorithm.length < 1) {\r\n            throw new OperationError(\"length: Must be more than 0\");\r\n        }\r\n    }\r\n}\n\nclass AesCtrProvider extends AesProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"AES-CTR\";\r\n        this.usages = [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"];\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"counter\");\r\n        if (!(algorithm.counter instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.counter))) {\r\n            throw new TypeError(\"counter: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n        }\r\n        if (algorithm.counter.byteLength !== 16) {\r\n            throw new TypeError(\"iv: Must have length 16 bytes\");\r\n        }\r\n        this.checkRequiredProperty(algorithm, \"length\");\r\n        if (typeof algorithm.length !== \"number\") {\r\n            throw new TypeError(\"length: Is not a Number\");\r\n        }\r\n        if (algorithm.length < 1) {\r\n            throw new OperationError(\"length: Must be more than 0\");\r\n        }\r\n    }\r\n}\n\nclass AesEcbProvider extends AesProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"AES-ECB\";\r\n        this.usages = [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"];\r\n    }\r\n}\n\nclass AesGcmProvider extends AesProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"AES-GCM\";\r\n        this.usages = [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"];\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"iv\");\r\n        if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {\r\n            throw new TypeError(\"iv: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n        }\r\n        if (algorithm.iv.byteLength < 1) {\r\n            throw new OperationError(\"iv: Must have length more than 0 and less than 2^64 - 1\");\r\n        }\r\n        if (!(\"tagLength\" in algorithm)) {\r\n            algorithm.tagLength = 128;\r\n        }\r\n        switch (algorithm.tagLength) {\r\n            case 32:\r\n            case 64:\r\n            case 96:\r\n            case 104:\r\n            case 112:\r\n            case 120:\r\n            case 128:\r\n                break;\r\n            default:\r\n                throw new OperationError(\"tagLength: Must be one of 32, 64, 96, 104, 112, 120 or 128\");\r\n        }\r\n    }\r\n}\n\nclass AesKwProvider extends AesProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"AES-KW\";\r\n        this.usages = [\"wrapKey\", \"unwrapKey\"];\r\n    }\r\n}\n\nclass DesProvider extends ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.usages = [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"];\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        if (this.ivSize) {\r\n            this.checkRequiredProperty(algorithm, \"iv\");\r\n            if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {\r\n                throw new TypeError(\"iv: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n            }\r\n            if (algorithm.iv.byteLength !== this.ivSize) {\r\n                throw new TypeError(`iv: Must have length ${this.ivSize} bytes`);\r\n            }\r\n        }\r\n    }\r\n    checkGenerateKeyParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"length\");\r\n        if (typeof algorithm.length !== \"number\") {\r\n            throw new TypeError(\"length: Is not of type Number\");\r\n        }\r\n        if (algorithm.length !== this.keySizeBits) {\r\n            throw new OperationError(`algorith.length: Must be ${this.keySizeBits}`);\r\n        }\r\n    }\r\n    checkDerivedKeyParams(algorithm) {\r\n        this.checkGenerateKeyParams(algorithm);\r\n    }\r\n}\n\nclass RsaProvider extends ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.hashAlgorithms = [\"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\"];\r\n    }\r\n    checkGenerateKeyParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"hash\");\r\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\r\n        this.checkRequiredProperty(algorithm, \"publicExponent\");\r\n        if (!(algorithm.publicExponent && algorithm.publicExponent instanceof Uint8Array)) {\r\n            throw new TypeError(\"publicExponent: Missing or not a Uint8Array\");\r\n        }\r\n        const publicExponent = Convert.ToBase64(algorithm.publicExponent);\r\n        if (!(publicExponent === \"Aw==\" || publicExponent === \"AQAB\")) {\r\n            throw new TypeError(\"publicExponent: Must be [3] or [1,0,1]\");\r\n        }\r\n        this.checkRequiredProperty(algorithm, \"modulusLength\");\r\n        switch (algorithm.modulusLength) {\r\n            case 1024:\r\n            case 2048:\r\n            case 4096:\r\n                break;\r\n            default:\r\n                throw new TypeError(\"modulusLength: Must be 1024, 2048, or 4096\");\r\n        }\r\n    }\r\n    checkImportParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"hash\");\r\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\r\n    }\r\n}\n\nclass RsaSsaProvider extends RsaProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"RSASSA-PKCS1-v1_5\";\r\n        this.usages = {\r\n            privateKey: [\"sign\"],\r\n            publicKey: [\"verify\"],\r\n        };\r\n    }\r\n}\n\nclass RsaPssProvider extends RsaProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"RSA-PSS\";\r\n        this.usages = {\r\n            privateKey: [\"sign\"],\r\n            publicKey: [\"verify\"],\r\n        };\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"saltLength\");\r\n        if (typeof algorithm.saltLength !== \"number\") {\r\n            throw new TypeError(\"saltLength: Is not a Number\");\r\n        }\r\n        if (algorithm.saltLength < 1) {\r\n            throw new RangeError(\"saltLength: Must be more than 0\");\r\n        }\r\n    }\r\n}\n\nclass RsaOaepProvider extends RsaProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"RSA-OAEP\";\r\n        this.usages = {\r\n            privateKey: [\"decrypt\", \"unwrapKey\"],\r\n            publicKey: [\"encrypt\", \"wrapKey\"],\r\n        };\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        if (algorithm.label\r\n            && !(algorithm.label instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.label))) {\r\n            throw new TypeError(\"label: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n        }\r\n    }\r\n}\n\nclass EllipticProvider extends ProviderCrypto {\r\n    checkGenerateKeyParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"namedCurve\");\r\n        this.checkNamedCurve(algorithm.namedCurve);\r\n    }\r\n    checkNamedCurve(namedCurve) {\r\n        for (const item of this.namedCurves) {\r\n            if (item.toLowerCase() === namedCurve.toLowerCase()) {\r\n                return;\r\n            }\r\n        }\r\n        throw new OperationError(`namedCurve: Must be one of ${this.namedCurves.join(\", \")}`);\r\n    }\r\n}\n\nclass EcdsaProvider extends EllipticProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"ECDSA\";\r\n        this.hashAlgorithms = [\"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\"];\r\n        this.usages = {\r\n            privateKey: [\"sign\"],\r\n            publicKey: [\"verify\"],\r\n        };\r\n        this.namedCurves = [\"P-256\", \"P-384\", \"P-521\", \"K-256\"];\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"hash\");\r\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\r\n    }\r\n}\n\nconst KEY_TYPES = [\"secret\", \"private\", \"public\"];\r\nclass CryptoKey {\r\n    static create(algorithm, type, extractable, usages) {\r\n        const key = new this();\r\n        key.algorithm = algorithm;\r\n        key.type = type;\r\n        key.extractable = extractable;\r\n        key.usages = usages;\r\n        return key;\r\n    }\r\n    static isKeyType(data) {\r\n        return KEY_TYPES.indexOf(data) !== -1;\r\n    }\r\n}\n\nclass EcdhProvider extends EllipticProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"ECDH\";\r\n        this.usages = {\r\n            privateKey: [\"deriveBits\", \"deriveKey\"],\r\n            publicKey: [],\r\n        };\r\n        this.namedCurves = [\"P-256\", \"P-384\", \"P-521\", \"K-256\"];\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"public\");\r\n        if (!(algorithm.public instanceof CryptoKey)) {\r\n            throw new TypeError(\"public: Is not a CryptoKey\");\r\n        }\r\n        if (algorithm.public.type !== \"public\") {\r\n            throw new OperationError(\"public: Is not a public key\");\r\n        }\r\n        if (algorithm.public.algorithm.name !== this.name) {\r\n            throw new OperationError(`public: Is not ${this.name} key`);\r\n        }\r\n    }\r\n}\n\nclass HmacProvider extends ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"HMAC\";\r\n        this.hashAlgorithms = [\"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\"];\r\n        this.usages = [\"sign\", \"verify\"];\r\n    }\r\n    getDefaultLength(algName) {\r\n        switch (algName.toUpperCase()) {\r\n            case \"SHA-1\":\r\n                return 160;\r\n            case \"SHA-256\":\r\n                return 256;\r\n            case \"SHA-384\":\r\n                return 384;\r\n            case \"SHA-512\":\r\n                return 512;\r\n            default:\r\n                throw new Error(`Unknown algorithm name '${algName}'`);\r\n        }\r\n    }\r\n    checkGenerateKeyParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"hash\");\r\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\r\n        if (\"length\" in algorithm) {\r\n            if (typeof algorithm.length !== \"number\") {\r\n                throw new TypeError(\"length: Is not a Number\");\r\n            }\r\n            if (algorithm.length < 1) {\r\n                throw new RangeError(\"length: Number is out of range\");\r\n            }\r\n        }\r\n    }\r\n    checkImportParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"hash\");\r\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\r\n    }\r\n}\n\nclass Pbkdf2Provider extends ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"PBKDF2\";\r\n        this.hashAlgorithms = [\"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\"];\r\n        this.usages = [\"deriveBits\", \"deriveKey\"];\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"hash\");\r\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\r\n        this.checkRequiredProperty(algorithm, \"salt\");\r\n        if (!(algorithm.salt instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.salt))) {\r\n            throw new TypeError(\"salt: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n        }\r\n        this.checkRequiredProperty(algorithm, \"iterations\");\r\n        if (typeof algorithm.iterations !== \"number\") {\r\n            throw new TypeError(\"iterations: Is not a Number\");\r\n        }\r\n        if (algorithm.iterations < 1) {\r\n            throw new TypeError(\"iterations: Is less than 1\");\r\n        }\r\n    }\r\n    checkImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        super.checkImportKey(format, keyData, algorithm, extractable, keyUsages);\r\n        if (extractable) {\r\n            throw new SyntaxError(\"extractable: Must be False\");\r\n        }\r\n    }\r\n}\n\nclass HkdfProvider extends ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"HKDF\";\r\n        this.hashAlgorithms = [\"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\"];\r\n        this.usages = [\"deriveKey\", \"deriveBits\"];\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"hash\");\r\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\r\n        this.checkRequiredProperty(algorithm, \"salt\");\r\n        if (!BufferSourceConverter.isBufferSource(algorithm.salt)) {\r\n            throw new TypeError(\"salt: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n        }\r\n        this.checkRequiredProperty(algorithm, \"info\");\r\n        if (!BufferSourceConverter.isBufferSource(algorithm.info)) {\r\n            throw new TypeError(\"salt: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n        }\r\n    }\r\n    checkImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        super.checkImportKey(format, keyData, algorithm, extractable, keyUsages);\r\n        if (extractable) {\r\n            throw new SyntaxError(\"extractable: Must be False\");\r\n        }\r\n    }\r\n}\n\nclass Crypto {\r\n}\n\nclass ProviderStorage {\r\n    constructor() {\r\n        this.items = {};\r\n    }\r\n    get(algorithmName) {\r\n        return this.items[algorithmName.toLowerCase()] || null;\r\n    }\r\n    set(provider) {\r\n        this.items[provider.name.toLowerCase()] = provider;\r\n    }\r\n    removeAt(algorithmName) {\r\n        const provider = this.get(algorithmName.toLowerCase());\r\n        if (provider) {\r\n            delete this.items[algorithmName];\r\n        }\r\n        return provider;\r\n    }\r\n    has(name) {\r\n        return !!this.get(name);\r\n    }\r\n    get length() {\r\n        return Object.keys(this.items).length;\r\n    }\r\n    get algorithms() {\r\n        const algorithms = [];\r\n        for (const key in this.items) {\r\n            const provider = this.items[key];\r\n            algorithms.push(provider.name);\r\n        }\r\n        return algorithms.sort();\r\n    }\r\n}\n\nclass SubtleCrypto {\r\n    constructor() {\r\n        this.providers = new ProviderStorage();\r\n    }\r\n    static isHashedAlgorithm(data) {\r\n        return data instanceof Object\r\n            && \"name\" in data\r\n            && \"hash\" in data;\r\n    }\r\n    async digest(algorithm, data) {\r\n        this.checkRequiredArguments(arguments, 2, \"digest\");\r\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\r\n        const preparedData = BufferSourceConverter.toArrayBuffer(data);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        const result = await provider.digest(preparedAlgorithm, preparedData);\r\n        return result;\r\n    }\r\n    async generateKey(algorithm, extractable, keyUsages) {\r\n        this.checkRequiredArguments(arguments, 3, \"generateKey\");\r\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        const result = await provider.generateKey({ ...preparedAlgorithm, name: provider.name }, extractable, keyUsages);\r\n        return result;\r\n    }\r\n    async sign(algorithm, key, data) {\r\n        this.checkRequiredArguments(arguments, 3, \"sign\");\r\n        this.checkCryptoKey(key);\r\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\r\n        const preparedData = BufferSourceConverter.toArrayBuffer(data);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        const result = await provider.sign({ ...preparedAlgorithm, name: provider.name }, key, preparedData);\r\n        return result;\r\n    }\r\n    async verify(algorithm, key, signature, data) {\r\n        this.checkRequiredArguments(arguments, 4, \"verify\");\r\n        this.checkCryptoKey(key);\r\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\r\n        const preparedData = BufferSourceConverter.toArrayBuffer(data);\r\n        const preparedSignature = BufferSourceConverter.toArrayBuffer(signature);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        const result = await provider.verify({ ...preparedAlgorithm, name: provider.name }, key, preparedSignature, preparedData);\r\n        return result;\r\n    }\r\n    async encrypt(algorithm, key, data) {\r\n        this.checkRequiredArguments(arguments, 3, \"encrypt\");\r\n        this.checkCryptoKey(key);\r\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\r\n        const preparedData = BufferSourceConverter.toArrayBuffer(data);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        const result = await provider.encrypt({ ...preparedAlgorithm, name: provider.name }, key, preparedData, { keyUsage: true });\r\n        return result;\r\n    }\r\n    async decrypt(algorithm, key, data) {\r\n        this.checkRequiredArguments(arguments, 3, \"decrypt\");\r\n        this.checkCryptoKey(key);\r\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\r\n        const preparedData = BufferSourceConverter.toArrayBuffer(data);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        const result = await provider.decrypt({ ...preparedAlgorithm, name: provider.name }, key, preparedData, { keyUsage: true });\r\n        return result;\r\n    }\r\n    async deriveBits(algorithm, baseKey, length) {\r\n        this.checkRequiredArguments(arguments, 3, \"deriveBits\");\r\n        this.checkCryptoKey(baseKey);\r\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        const result = await provider.deriveBits({ ...preparedAlgorithm, name: provider.name }, baseKey, length, { keyUsage: true });\r\n        return result;\r\n    }\r\n    async deriveKey(algorithm, baseKey, derivedKeyType, extractable, keyUsages) {\r\n        this.checkRequiredArguments(arguments, 5, \"deriveKey\");\r\n        const preparedDerivedKeyType = this.prepareAlgorithm(derivedKeyType);\r\n        const importProvider = this.getProvider(preparedDerivedKeyType.name);\r\n        importProvider.checkDerivedKeyParams(preparedDerivedKeyType);\r\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        provider.checkCryptoKey(baseKey, \"deriveKey\");\r\n        const derivedBits = await provider.deriveBits({ ...preparedAlgorithm, name: provider.name }, baseKey, derivedKeyType.length, { keyUsage: false });\r\n        return this.importKey(\"raw\", derivedBits, derivedKeyType, extractable, keyUsages);\r\n    }\r\n    async exportKey(format, key) {\r\n        this.checkRequiredArguments(arguments, 2, \"exportKey\");\r\n        this.checkCryptoKey(key);\r\n        const provider = this.getProvider(key.algorithm.name);\r\n        const result = await provider.exportKey(format, key);\r\n        return result;\r\n    }\r\n    async importKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        this.checkRequiredArguments(arguments, 5, \"importKey\");\r\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        if ([\"pkcs8\", \"spki\", \"raw\"].indexOf(format) !== -1) {\r\n            const preparedData = BufferSourceConverter.toArrayBuffer(keyData);\r\n            return provider.importKey(format, preparedData, { ...preparedAlgorithm, name: provider.name }, extractable, keyUsages);\r\n        }\r\n        else {\r\n            if (!keyData.kty) {\r\n                throw new TypeError(\"keyData: Is not JSON\");\r\n            }\r\n        }\r\n        return provider.importKey(format, keyData, { ...preparedAlgorithm, name: provider.name }, extractable, keyUsages);\r\n    }\r\n    async wrapKey(format, key, wrappingKey, wrapAlgorithm) {\r\n        let keyData = await this.exportKey(format, key);\r\n        if (format === \"jwk\") {\r\n            const json = JSON.stringify(keyData);\r\n            keyData = Convert.FromUtf8String(json);\r\n        }\r\n        const preparedAlgorithm = this.prepareAlgorithm(wrapAlgorithm);\r\n        const preparedData = BufferSourceConverter.toArrayBuffer(keyData);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        return provider.encrypt({ ...preparedAlgorithm, name: provider.name }, wrappingKey, preparedData, { keyUsage: false });\r\n    }\r\n    async unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages) {\r\n        const preparedAlgorithm = this.prepareAlgorithm(unwrapAlgorithm);\r\n        const preparedData = BufferSourceConverter.toArrayBuffer(wrappedKey);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        let keyData = await provider.decrypt({ ...preparedAlgorithm, name: provider.name }, unwrappingKey, preparedData, { keyUsage: false });\r\n        if (format === \"jwk\") {\r\n            try {\r\n                keyData = JSON.parse(Convert.ToUtf8String(keyData));\r\n            }\r\n            catch (e) {\r\n                const error = new TypeError(\"wrappedKey: Is not a JSON\");\r\n                error.internal = e;\r\n                throw error;\r\n            }\r\n        }\r\n        return this.importKey(format, keyData, unwrappedKeyAlgorithm, extractable, keyUsages);\r\n    }\r\n    checkRequiredArguments(args, size, methodName) {\r\n        if (args.length !== size) {\r\n            throw new TypeError(`Failed to execute '${methodName}' on 'SubtleCrypto': ${size} arguments required, but only ${args.length} present`);\r\n        }\r\n    }\r\n    prepareAlgorithm(algorithm) {\r\n        if (typeof algorithm === \"string\") {\r\n            return {\r\n                name: algorithm,\r\n            };\r\n        }\r\n        if (SubtleCrypto.isHashedAlgorithm(algorithm)) {\r\n            const preparedAlgorithm = { ...algorithm };\r\n            preparedAlgorithm.hash = this.prepareAlgorithm(algorithm.hash);\r\n            return preparedAlgorithm;\r\n        }\r\n        return { ...algorithm };\r\n    }\r\n    getProvider(name) {\r\n        const provider = this.providers.get(name);\r\n        if (!provider) {\r\n            throw new AlgorithmError(\"Unrecognized name\");\r\n        }\r\n        return provider;\r\n    }\r\n    checkCryptoKey(key) {\r\n        if (!(key instanceof CryptoKey)) {\r\n            throw new TypeError(`Key is not of type 'CryptoKey'`);\r\n        }\r\n    }\r\n}\n\nlet ObjectIdentifier = class ObjectIdentifier {\r\n    constructor(value) {\r\n        if (value) {\r\n            this.value = value;\r\n        }\r\n    }\r\n};\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\r\n], ObjectIdentifier.prototype, \"value\", void 0);\r\nObjectIdentifier = __decorate([\r\n    AsnType({ type: AsnTypeTypes.Choice })\r\n], ObjectIdentifier);\n\nclass AlgorithmIdentifier {\r\n    constructor(params) {\r\n        Object.assign(this, params);\r\n    }\r\n}\r\n__decorate([\r\n    AsnProp({\r\n        type: AsnPropTypes.ObjectIdentifier,\r\n    })\r\n], AlgorithmIdentifier.prototype, \"algorithm\", void 0);\r\n__decorate([\r\n    AsnProp({\r\n        type: AsnPropTypes.Any,\r\n        optional: true,\r\n    })\r\n], AlgorithmIdentifier.prototype, \"parameters\", void 0);\n\nclass PrivateKeyInfo {\r\n    constructor() {\r\n        this.version = 0;\r\n        this.privateKeyAlgorithm = new AlgorithmIdentifier();\r\n        this.privateKey = new ArrayBuffer(0);\r\n    }\r\n}\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer })\r\n], PrivateKeyInfo.prototype, \"version\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AlgorithmIdentifier })\r\n], PrivateKeyInfo.prototype, \"privateKeyAlgorithm\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.OctetString })\r\n], PrivateKeyInfo.prototype, \"privateKey\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Any, optional: true })\r\n], PrivateKeyInfo.prototype, \"attributes\", void 0);\n\nclass PublicKeyInfo {\r\n    constructor() {\r\n        this.publicKeyAlgorithm = new AlgorithmIdentifier();\r\n        this.publicKey = new ArrayBuffer(0);\r\n    }\r\n}\r\n__decorate([\r\n    AsnProp({ type: AlgorithmIdentifier })\r\n], PublicKeyInfo.prototype, \"publicKeyAlgorithm\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.BitString })\r\n], PublicKeyInfo.prototype, \"publicKey\", void 0);\n\nconst JsonBase64UrlArrayBufferConverter = {\r\n    fromJSON: (value) => Convert.FromBase64Url(value),\r\n    toJSON: (value) => Convert.ToBase64Url(new Uint8Array(value)),\r\n};\n\nconst AsnIntegerArrayBufferConverter = {\r\n    fromASN: (value) => {\r\n        const valueHex = value.valueBlock.valueHex;\r\n        return !(new Uint8Array(valueHex)[0])\r\n            ? value.valueBlock.valueHex.slice(1)\r\n            : value.valueBlock.valueHex;\r\n    },\r\n    toASN: (value) => {\r\n        const valueHex = new Uint8Array(value)[0] > 127\r\n            ? Buffer.concat([Buffer.from([0]), Buffer.from(value)])\r\n            : Buffer.from(value);\r\n        return new Integer({ valueHex: new Uint8Array(valueHex).buffer });\r\n    },\r\n};\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  JsonBase64UrlArrayBufferConverter: JsonBase64UrlArrayBufferConverter,\n  AsnIntegerArrayBufferConverter: AsnIntegerArrayBufferConverter\n});\n\nclass RsaPrivateKey {\r\n    constructor() {\r\n        this.version = 0;\r\n        this.modulus = new ArrayBuffer(0);\r\n        this.publicExponent = new ArrayBuffer(0);\r\n        this.privateExponent = new ArrayBuffer(0);\r\n        this.prime1 = new ArrayBuffer(0);\r\n        this.prime2 = new ArrayBuffer(0);\r\n        this.exponent1 = new ArrayBuffer(0);\r\n        this.exponent2 = new ArrayBuffer(0);\r\n        this.coefficient = new ArrayBuffer(0);\r\n    }\r\n}\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerConverter })\r\n], RsaPrivateKey.prototype, \"version\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter }),\r\n    JsonProp({ name: \"n\", converter: JsonBase64UrlArrayBufferConverter })\r\n], RsaPrivateKey.prototype, \"modulus\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter }),\r\n    JsonProp({ name: \"e\", converter: JsonBase64UrlArrayBufferConverter })\r\n], RsaPrivateKey.prototype, \"publicExponent\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter }),\r\n    JsonProp({ name: \"d\", converter: JsonBase64UrlArrayBufferConverter })\r\n], RsaPrivateKey.prototype, \"privateExponent\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter }),\r\n    JsonProp({ name: \"p\", converter: JsonBase64UrlArrayBufferConverter })\r\n], RsaPrivateKey.prototype, \"prime1\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter }),\r\n    JsonProp({ name: \"q\", converter: JsonBase64UrlArrayBufferConverter })\r\n], RsaPrivateKey.prototype, \"prime2\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter }),\r\n    JsonProp({ name: \"dp\", converter: JsonBase64UrlArrayBufferConverter })\r\n], RsaPrivateKey.prototype, \"exponent1\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter }),\r\n    JsonProp({ name: \"dq\", converter: JsonBase64UrlArrayBufferConverter })\r\n], RsaPrivateKey.prototype, \"exponent2\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter }),\r\n    JsonProp({ name: \"qi\", converter: JsonBase64UrlArrayBufferConverter })\r\n], RsaPrivateKey.prototype, \"coefficient\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Any, optional: true })\r\n], RsaPrivateKey.prototype, \"otherPrimeInfos\", void 0);\n\nclass RsaPublicKey {\r\n    constructor() {\r\n        this.modulus = new ArrayBuffer(0);\r\n        this.publicExponent = new ArrayBuffer(0);\r\n    }\r\n}\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter }),\r\n    JsonProp({ name: \"n\", converter: JsonBase64UrlArrayBufferConverter })\r\n], RsaPublicKey.prototype, \"modulus\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter }),\r\n    JsonProp({ name: \"e\", converter: JsonBase64UrlArrayBufferConverter })\r\n], RsaPublicKey.prototype, \"publicExponent\", void 0);\n\nlet EcPublicKey = class EcPublicKey {\r\n    constructor(value) {\r\n        this.value = new ArrayBuffer(0);\r\n        if (value) {\r\n            this.value = value;\r\n        }\r\n    }\r\n    toJSON() {\r\n        let bytes = new Uint8Array(this.value);\r\n        if (bytes[0] !== 0x04) {\r\n            throw new CryptoError(\"Wrong ECPoint. Current version supports only Uncompressed (0x04) point\");\r\n        }\r\n        bytes = new Uint8Array(this.value.slice(1));\r\n        const size = bytes.length / 2;\r\n        const offset = 0;\r\n        const json = {\r\n            x: Convert.ToBase64Url(bytes.buffer.slice(offset, offset + size)),\r\n            y: Convert.ToBase64Url(bytes.buffer.slice(offset + size, offset + size + size)),\r\n        };\r\n        return json;\r\n    }\r\n    fromJSON(json) {\r\n        if (!(\"x\" in json)) {\r\n            throw new Error(\"x: Missing required property\");\r\n        }\r\n        if (!(\"y\" in json)) {\r\n            throw new Error(\"y: Missing required property\");\r\n        }\r\n        const x = Convert.FromBase64Url(json.x);\r\n        const y = Convert.FromBase64Url(json.y);\r\n        const value = Buffer.concat([\r\n            new Uint8Array([0x04]),\r\n            new Uint8Array(x),\r\n            new Uint8Array(y),\r\n        ]);\r\n        this.value = new Uint8Array(value).buffer;\r\n        return this;\r\n    }\r\n};\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.OctetString })\r\n], EcPublicKey.prototype, \"value\", void 0);\r\nEcPublicKey = __decorate([\r\n    AsnType({ type: AsnTypeTypes.Choice })\r\n], EcPublicKey);\n\nclass EcPrivateKey {\r\n    constructor() {\r\n        this.version = 1;\r\n        this.privateKey = new ArrayBuffer(0);\r\n    }\r\n    fromJSON(json) {\r\n        if (!(\"d\" in json)) {\r\n            throw new Error(\"d: Missing required property\");\r\n        }\r\n        this.privateKey = Convert.FromBase64Url(json.d);\r\n        if (\"x\" in json) {\r\n            const publicKey = new EcPublicKey();\r\n            publicKey.fromJSON(json);\r\n            this.publicKey = AsnSerializer.toASN(publicKey).valueBlock.valueHex;\r\n        }\r\n        return this;\r\n    }\r\n    toJSON() {\r\n        const jwk = {};\r\n        jwk.d = Convert.ToBase64Url(this.privateKey);\r\n        if (this.publicKey) {\r\n            Object.assign(jwk, new EcPublicKey(this.publicKey).toJSON());\r\n        }\r\n        return jwk;\r\n    }\r\n}\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerConverter })\r\n], EcPrivateKey.prototype, \"version\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.OctetString })\r\n], EcPrivateKey.prototype, \"privateKey\", void 0);\r\n__decorate([\r\n    AsnProp({ context: 0, type: AsnPropTypes.Any, optional: true })\r\n], EcPrivateKey.prototype, \"parameters\", void 0);\r\n__decorate([\r\n    AsnProp({ context: 1, type: AsnPropTypes.BitString, optional: true })\r\n], EcPrivateKey.prototype, \"publicKey\", void 0);\n\nconst AsnIntegerWithoutPaddingConverter = {\r\n    fromASN: (value) => {\r\n        const bytes = new Uint8Array(value.valueBlock.valueHex);\r\n        return (bytes[0] === 0)\r\n            ? bytes.buffer.slice(1)\r\n            : bytes.buffer;\r\n    },\r\n    toASN: (value) => {\r\n        const bytes = new Uint8Array(value);\r\n        if (bytes[0] > 127) {\r\n            const newValue = new Uint8Array(bytes.length + 1);\r\n            newValue.set(bytes, 1);\r\n            return new Integer({ valueHex: newValue });\r\n        }\r\n        return new Integer({ valueHex: value });\r\n    },\r\n};\n\nvar index$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  AsnIntegerWithoutPaddingConverter: AsnIntegerWithoutPaddingConverter\n});\n\nclass EcDsaSignature {\r\n    constructor() {\r\n        this.r = new ArrayBuffer(0);\r\n        this.s = new ArrayBuffer(0);\r\n    }\r\n    static fromWebCryptoSignature(value) {\r\n        const wcSignature = BufferSourceConverter.toUint8Array(value);\r\n        const pointSize = wcSignature.byteLength / 2;\r\n        const ecSignature = new this();\r\n        ecSignature.r = ecSignature.removePadding(wcSignature.slice(0, pointSize));\r\n        ecSignature.s = ecSignature.removePadding(wcSignature.slice(pointSize, pointSize * 2));\r\n        return ecSignature;\r\n    }\r\n    toWebCryptoSignature(pointSize) {\r\n        pointSize = this.getPointSize();\r\n        const r = this.addPadding(pointSize, BufferSourceConverter.toUint8Array(this.r));\r\n        const s = this.addPadding(pointSize, BufferSourceConverter.toUint8Array(this.s));\r\n        const wcSignature = new Uint8Array(r.byteLength + s.byteLength);\r\n        wcSignature.set(r, 0);\r\n        wcSignature.set(s, r.length);\r\n        return wcSignature.buffer;\r\n    }\r\n    getPointSize() {\r\n        const size = Math.max(this.r.byteLength, this.s.byteLength);\r\n        switch (size) {\r\n            case 31:\r\n            case 32:\r\n                return 32;\r\n            case 47:\r\n            case 48:\r\n                return 48;\r\n            case 65:\r\n            case 66:\r\n                return 66;\r\n        }\r\n        throw new Error(\"Unsupported EC point size\");\r\n    }\r\n    addPadding(pointSize, bytes) {\r\n        const res = new Uint8Array(pointSize);\r\n        const uint8Array = BufferSourceConverter.toUint8Array(bytes);\r\n        res.set(uint8Array, pointSize - uint8Array.length);\r\n        return res;\r\n    }\r\n    removePadding(bytes) {\r\n        const uint8Array = BufferSourceConverter.toUint8Array(bytes);\r\n        for (let i = 0; i < uint8Array.length; i++) {\r\n            if (!uint8Array[i]) {\r\n                continue;\r\n            }\r\n            return uint8Array.slice(i);\r\n        }\r\n        return new Uint8Array(0);\r\n    }\r\n}\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerWithoutPaddingConverter })\r\n], EcDsaSignature.prototype, \"r\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerWithoutPaddingConverter })\r\n], EcDsaSignature.prototype, \"s\", void 0);\n\nvar index$2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  converters: index$1,\n  get ObjectIdentifier () { return ObjectIdentifier; },\n  AlgorithmIdentifier: AlgorithmIdentifier,\n  PrivateKeyInfo: PrivateKeyInfo,\n  PublicKeyInfo: PublicKeyInfo,\n  RsaPrivateKey: RsaPrivateKey,\n  RsaPublicKey: RsaPublicKey,\n  EcPrivateKey: EcPrivateKey,\n  get EcPublicKey () { return EcPublicKey; },\n  EcDsaSignature: EcDsaSignature\n});\n\nvar index$3 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  converters: index\n});\n\nexport { AesCbcProvider, AesCmacProvider, AesCtrProvider, AesEcbProvider, AesGcmProvider, AesKwProvider, AesProvider, AlgorithmError, Crypto, CryptoError, CryptoKey, DesProvider, EcdhProvider, EcdsaProvider, EllipticProvider, HkdfProvider, HmacProvider, OperationError, Pbkdf2Provider, PemConverter, ProviderCrypto, ProviderStorage, RequiredPropertyError, RsaOaepProvider, RsaProvider, RsaPssProvider, RsaSsaProvider, SubtleCrypto, UnsupportedOperationError, index$2 as asn1, isJWK, index$3 as json };\n"]},"metadata":{},"sourceType":"module"}