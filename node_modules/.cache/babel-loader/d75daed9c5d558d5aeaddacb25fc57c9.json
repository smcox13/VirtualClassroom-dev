{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, utilConcatBuf, clearProps } from \"pvutils\";\nimport ContentInfo from \"./ContentInfo.js\";\nimport SafeContents from \"./SafeContents.js\";\nimport EnvelopedData from \"./EnvelopedData.js\";\nimport EncryptedData from \"./EncryptedData.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC7292\r\n */\n\nexport default class AuthenticatedSafe {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for AuthenticatedSafe class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Array.<ContentInfo>}\r\n     * @desc safeContents\r\n     */\n    this.safeContents = getParametersValue(parameters, \"safeContents\", AuthenticatedSafe.defaultValues(\"safeContents\"));\n    if (\"parsedValue\" in parameters)\n      /**\r\n       * @type {*}\r\n       * @desc parsedValue\r\n       */\n      this.parsedValue = getParametersValue(parameters, \"parsedValue\", AuthenticatedSafe.defaultValues(\"parsedValue\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"safeContents\":\n        return [];\n\n      case \"parsedValue\":\n        return {};\n\n      default:\n        throw new Error(`Invalid member name for AuthenticatedSafe class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"safeContents\":\n        return memberValue.length === 0;\n\n      case \"parsedValue\":\n        return memberValue instanceof Object && Object.keys(memberValue).length === 0;\n\n      default:\n        throw new Error(`Invalid member name for AuthenticatedSafe class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * AuthenticatedSafe ::= SEQUENCE OF ContentInfo\r\n   * -- Data if unencrypted\r\n   * -- EncryptedData if password-encrypted\r\n   * -- EnvelopedData if public key-encrypted\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [contentInfos]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Repeated({\n        name: names.contentInfos || \"\",\n        value: ContentInfo.schema()\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"contentInfos\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, AuthenticatedSafe.schema({\n      names: {\n        contentInfos: \"contentInfos\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AuthenticatedSafe\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.safeContents = Array.from(asn1.result.contentInfos, element => new ContentInfo({\n      schema: element\n    })); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: Array.from(this.safeContents, element => element.toSchema())\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      safeContents: Array.from(this.safeContents, element => element.toJSON())\n    };\n  } //**********************************************************************************\n\n\n  parseInternalValues(parameters) {\n    //region Check input data from \"parameters\" \n    if (parameters instanceof Object === false) return Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\n    if (\"safeContents\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"safeContents\\\"\");\n    if (parameters.safeContents instanceof Array === false) return Promise.reject(\"The \\\"parameters.safeContents\\\" must has \\\"Array\\\" type\");\n    if (parameters.safeContents.length !== this.safeContents.length) return Promise.reject(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.safeContents.length\\\"\"); //endregion \n    //region Initial variables \n\n    let sequence = Promise.resolve(); //endregion\n    //region Create value for \"this.parsedValue.authenticatedSafe\" \n\n    this.parsedValue = {\n      safeContents: []\n    };\n\n    for (const [index, content] of this.safeContents.entries()) {\n      switch (content.contentType) {\n        //region data \n        case \"1.2.840.113549.1.7.1\":\n          {\n            //region Check that we do have OCTETSTRING as \"content\"\n            if (content.content instanceof asn1js.OctetString === false) return Promise.reject(\"Wrong type of \\\"this.safeContents[j].content\\\"\"); //endregion\n            //region Check we have \"constructive encoding\" for AuthSafe content\n\n            let authSafeContent = new ArrayBuffer(0);\n\n            if (content.content.valueBlock.isConstructed) {\n              for (const contentValue of content.content.valueBlock.value) authSafeContent = utilConcatBuf(authSafeContent, contentValue.valueBlock.valueHex);\n            } else authSafeContent = content.content.valueBlock.valueHex; //endregion\n            //region Parse internal ASN.1 data\n\n\n            const asn1 = asn1js.fromBER(authSafeContent);\n            if (asn1.offset === -1) return Promise.reject(\"Error during parsing of ASN.1 data inside \\\"content.content\\\"\"); //endregion\n            //region Finilly initialize initial values of \"SafeContents\" type\n\n            this.parsedValue.safeContents.push({\n              privacyMode: 0,\n              // No privacy, clear data\n              value: new SafeContents({\n                schema: asn1.result\n              })\n            }); //endregion\n          }\n          break;\n        //endregion \n        //region envelopedData \n\n        case \"1.2.840.113549.1.7.3\":\n          {\n            //region Initial variables\n            const cmsEnveloped = new EnvelopedData({\n              schema: content.content\n            }); //endregion\n            //region Check mandatory parameters\n\n            if (\"recipientCertificate\" in parameters.safeContents[index] === false) return Promise.reject(\"Absent mandatory parameter \\\"recipientCertificate\\\" in \\\"parameters.safeContents[j]\\\"\");\n            const recipientCertificate = parameters.safeContents[index].recipientCertificate;\n            if (\"recipientKey\" in parameters.safeContents[index] === false) return Promise.reject(\"Absent mandatory parameter \\\"recipientKey\\\" in \\\"parameters.safeContents[j]\\\"\"); // noinspection JSUnresolvedVariable\n\n            const recipientKey = parameters.safeContents[index].recipientKey; //endregion\n            //region Decrypt CMS EnvelopedData using first recipient information\n\n            sequence = sequence.then(() => cmsEnveloped.decrypt(0, {\n              recipientCertificate,\n              recipientPrivateKey: recipientKey\n            }));\n            sequence = sequence.then(\n            /**\r\n             * @param {ArrayBuffer} result\r\n             */\n            result => {\n              const asn1 = asn1js.fromBER(result);\n              if (asn1.offset === -1) return Promise.reject(\"Error during parsing of decrypted data\");\n              this.parsedValue.safeContents.push({\n                privacyMode: 2,\n                // Public-key privacy mode\n                value: new SafeContents({\n                  schema: asn1.result\n                })\n              });\n              return Promise.resolve();\n            }); //endregion\n          }\n          break;\n        //endregion   \n        //region encryptedData \n\n        case \"1.2.840.113549.1.7.6\":\n          {\n            //region Initial variables\n            const cmsEncrypted = new EncryptedData({\n              schema: content.content\n            }); //endregion\n            //region Check mandatory parameters\n\n            if (\"password\" in parameters.safeContents[index] === false) return Promise.reject(\"Absent mandatory parameter \\\"password\\\" in \\\"parameters.safeContents[j]\\\"\");\n            const password = parameters.safeContents[index].password; //endregion\n            //region Decrypt CMS EncryptedData using password\n\n            sequence = sequence.then(() => cmsEncrypted.decrypt({\n              password\n            }), error => Promise.reject(error)); //endregion\n            //region Initialize internal data\n\n            sequence = sequence.then(\n            /**\r\n             * @param {ArrayBuffer} result\r\n             */\n            result => {\n              const asn1 = asn1js.fromBER(result);\n              if (asn1.offset === -1) return Promise.reject(\"Error during parsing of decrypted data\");\n              this.parsedValue.safeContents.push({\n                privacyMode: 1,\n                // Password-based privacy mode\n                value: new SafeContents({\n                  schema: asn1.result\n                })\n              });\n              return Promise.resolve();\n            }, error => Promise.reject(error)); //endregion\n          }\n          break;\n        //endregion   \n        //region default \n\n        default:\n          throw new Error(`Unknown \"contentType\" for AuthenticatedSafe: \" ${content.contentType}`);\n        //endregion \n      }\n    } //endregion \n\n\n    return sequence;\n  } //**********************************************************************************\n\n\n  makeInternalValues(parameters) {\n    //region Check data in \"parsedValue\" \n    if (\"parsedValue\" in this === false) return Promise.reject(\"Please run \\\"parseValues\\\" first or add \\\"parsedValue\\\" manually\");\n    if (this.parsedValue instanceof Object === false) return Promise.reject(\"The \\\"this.parsedValue\\\" must has \\\"Object\\\" type\");\n    if (this.parsedValue.safeContents instanceof Array === false) return Promise.reject(\"The \\\"this.parsedValue.safeContents\\\" must has \\\"Array\\\" type\"); //endregion \n    //region Check input data from \"parameters\" \n\n    if (parameters instanceof Object === false) return Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\n    if (\"safeContents\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"safeContents\\\"\");\n    if (parameters.safeContents instanceof Array === false) return Promise.reject(\"The \\\"parameters.safeContents\\\" must has \\\"Array\\\" type\");\n    if (parameters.safeContents.length !== this.parsedValue.safeContents.length) return Promise.reject(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.parsedValue.safeContents\\\"\"); //endregion \n    //region Initial variables \n\n    let sequence = Promise.resolve(); //endregion\n    //region Create internal values from already parsed values \n\n    this.safeContents = [];\n\n    for (const [index, content] of this.parsedValue.safeContents.entries()) {\n      //region Check current \"content\" value\n      if (\"privacyMode\" in content === false) return Promise.reject(\"The \\\"privacyMode\\\" is a mandatory parameter for \\\"content\\\"\");\n      if (\"value\" in content === false) return Promise.reject(\"The \\\"value\\\" is a mandatory parameter for \\\"content\\\"\");\n      if (content.value instanceof SafeContents === false) return Promise.reject(\"The \\\"content.value\\\" must has \\\"SafeContents\\\" type\"); //endregion \n\n      switch (content.privacyMode) {\n        //region No privacy \n        case 0:\n          {\n            const contentBuffer = content.value.toSchema().toBER(false);\n            sequence = sequence.then(() => {\n              this.safeContents.push(new ContentInfo({\n                contentType: \"1.2.840.113549.1.7.1\",\n                content: new asn1js.OctetString({\n                  valueHex: contentBuffer\n                })\n              }));\n            });\n          }\n          break;\n        //endregion \n        //region Privacy with password\n\n        case 1:\n          {\n            //region Initial variables\n            const cmsEncrypted = new EncryptedData();\n            const currentParameters = parameters.safeContents[index];\n            currentParameters.contentToEncrypt = content.value.toSchema().toBER(false); //endregion\n            //region Encrypt CMS EncryptedData using password\n\n            sequence = sequence.then(() => cmsEncrypted.encrypt(currentParameters), error => Promise.reject(error)); //endregion\n            //region Store result content in CMS_CONTENT_INFO type\n\n            sequence = sequence.then(() => {\n              this.safeContents.push(new ContentInfo({\n                contentType: \"1.2.840.113549.1.7.6\",\n                content: cmsEncrypted.toSchema()\n              }));\n            }, error => Promise.reject(error)); //endregion\n          }\n          break;\n        //endregion \n        //region Privacy with public key\n\n        case 2:\n          {\n            //region Initial variables\n            const cmsEnveloped = new EnvelopedData();\n            const contentToEncrypt = content.value.toSchema().toBER(false); //endregion\n            //region Check mandatory parameters\n\n            if (\"encryptingCertificate\" in parameters.safeContents[index] === false) return Promise.reject(\"Absent mandatory parameter \\\"encryptingCertificate\\\" in \\\"parameters.safeContents[i]\\\"\");\n            if (\"encryptionAlgorithm\" in parameters.safeContents[index] === false) return Promise.reject(\"Absent mandatory parameter \\\"encryptionAlgorithm\\\" in \\\"parameters.safeContents[i]\\\"\");\n\n            switch (true) {\n              case parameters.safeContents[index].encryptionAlgorithm.name.toLowerCase() === \"aes-cbc\":\n              case parameters.safeContents[index].encryptionAlgorithm.name.toLowerCase() === \"aes-gcm\":\n                break;\n\n              default:\n                return Promise.reject(`Incorrect parameter \"encryptionAlgorithm\" in \"parameters.safeContents[i]\": ${parameters.safeContents[index].encryptionAlgorithm}`);\n            }\n\n            switch (true) {\n              case parameters.safeContents[index].encryptionAlgorithm.length === 128:\n              case parameters.safeContents[index].encryptionAlgorithm.length === 192:\n              case parameters.safeContents[index].encryptionAlgorithm.length === 256:\n                break;\n\n              default:\n                return Promise.reject(`Incorrect parameter \"encryptionAlgorithm.length\" in \"parameters.safeContents[i]\": ${parameters.safeContents[index].encryptionAlgorithm.length}`);\n            } //endregion\n            //region Making correct \"encryptionAlgorithm\" variable\n\n\n            const encryptionAlgorithm = parameters.safeContents[index].encryptionAlgorithm; //endregion\n            //region Append recipient for enveloped data\n\n            cmsEnveloped.addRecipientByCertificate(parameters.safeContents[index].encryptingCertificate); //endregion\n            //region Making encryption\n\n            sequence = sequence.then(() => cmsEnveloped.encrypt(encryptionAlgorithm, contentToEncrypt));\n            sequence = sequence.then(() => {\n              this.safeContents.push(new ContentInfo({\n                contentType: \"1.2.840.113549.1.7.3\",\n                content: cmsEnveloped.toSchema()\n              }));\n            }); //endregion\n          }\n          break;\n        //endregion \n        //region default \n\n        default:\n          return Promise.reject(`Incorrect value for \"content.privacyMode\": ${content.privacyMode}`);\n        //endregion \n      }\n    } //endregion \n    //region Return result of the function \n\n\n    return sequence.then(() => this, error => Promise.reject(`Error during parsing: ${error}`)); //endregion   \n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/AuthenticatedSafe.js"],"names":["asn1js","getParametersValue","utilConcatBuf","clearProps","ContentInfo","SafeContents","EnvelopedData","EncryptedData","AuthenticatedSafe","constructor","parameters","safeContents","defaultValues","parsedValue","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","Object","keys","names","Sequence","name","blockName","value","Repeated","contentInfos","asn1","compareSchema","verified","Array","from","result","element","toSchema","toJSON","parseInternalValues","Promise","reject","sequence","resolve","index","content","entries","contentType","OctetString","authSafeContent","ArrayBuffer","valueBlock","isConstructed","contentValue","valueHex","fromBER","offset","push","privacyMode","cmsEnveloped","recipientCertificate","recipientKey","then","decrypt","recipientPrivateKey","cmsEncrypted","password","error","makeInternalValues","contentBuffer","toBER","currentParameters","contentToEncrypt","encrypt","encryptionAlgorithm","toLowerCase","addRecipientByCertificate","encryptingCertificate"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, clearProps } from \"pvutils\";\r\nimport ContentInfo from \"./ContentInfo.js\";\r\nimport SafeContents from \"./SafeContents.js\";\r\nimport EnvelopedData from \"./EnvelopedData.js\";\r\nimport EncryptedData from \"./EncryptedData.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class AuthenticatedSafe\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AuthenticatedSafe class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<ContentInfo>}\r\n\t\t * @desc safeContents\r\n\t\t */\r\n\t\tthis.safeContents = getParametersValue(parameters, \"safeContents\", AuthenticatedSafe.defaultValues(\"safeContents\"));\r\n\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", AuthenticatedSafe.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"safeContents\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AuthenticatedSafe class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"safeContents\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AuthenticatedSafe class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AuthenticatedSafe ::= SEQUENCE OF ContentInfo\r\n\t * -- Data if unencrypted\r\n\t * -- EncryptedData if password-encrypted\r\n\t * -- EnvelopedData if public key-encrypted\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [contentInfos]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.contentInfos || \"\"),\r\n\t\t\t\t\tvalue: ContentInfo.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"contentInfos\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAuthenticatedSafe.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcontentInfos: \"contentInfos\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AuthenticatedSafe\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.safeContents = Array.from(asn1.result.contentInfos, element => new ContentInfo({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.safeContents, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tsafeContents: Array.from(this.safeContents, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\tparseInternalValues(parameters)\r\n\t{\r\n\t\t//region Check input data from \"parameters\" \r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"safeContents\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"safeContents\\\"\");\r\n\t\t\r\n\t\tif((parameters.safeContents instanceof Array) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters.safeContents\\\" must has \\\"Array\\\" type\");\r\n\t\t\r\n\t\tif(parameters.safeContents.length !== this.safeContents.length)\r\n\t\t\treturn Promise.reject(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.safeContents.length\\\"\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create value for \"this.parsedValue.authenticatedSafe\" \r\n\t\tthis.parsedValue = {\r\n\t\t\tsafeContents: []\r\n\t\t};\r\n\t\t\r\n\t\tfor(const [index, content] of this.safeContents.entries())\r\n\t\t{\r\n\t\t\tswitch(content.contentType)\r\n\t\t\t{\r\n\t\t\t\t//region data \r\n\t\t\t\tcase \"1.2.840.113549.1.7.1\":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Check that we do have OCTETSTRING as \"content\"\r\n\t\t\t\t\t\tif((content.content instanceof asn1js.OctetString) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Wrong type of \\\"this.safeContents[j].content\\\"\");\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check we have \"constructive encoding\" for AuthSafe content\r\n\t\t\t\t\t\tlet authSafeContent = new ArrayBuffer(0);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(content.content.valueBlock.isConstructed)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(const contentValue of content.content.valueBlock.value)\r\n\t\t\t\t\t\t\t\tauthSafeContent = utilConcatBuf(authSafeContent, contentValue.valueBlock.valueHex);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tauthSafeContent = content.content.valueBlock.valueHex;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Parse internal ASN.1 data\r\n\t\t\t\t\t\tconst asn1 = asn1js.fromBER(authSafeContent);\r\n\t\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of ASN.1 data inside \\\"content.content\\\"\");\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Finilly initialize initial values of \"SafeContents\" type\r\n\t\t\t\t\t\tthis.parsedValue.safeContents.push({\r\n\t\t\t\t\t\t\tprivacyMode: 0, // No privacy, clear data\r\n\t\t\t\t\t\t\tvalue: new SafeContents({ schema: asn1.result })\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion \r\n\t\t\t\t//region envelopedData \r\n\t\t\t\tcase \"1.2.840.113549.1.7.3\":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst cmsEnveloped = new EnvelopedData({ schema: content.content });\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check mandatory parameters\r\n\t\t\t\t\t\tif((\"recipientCertificate\" in parameters.safeContents[index]) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"recipientCertificate\\\" in \\\"parameters.safeContents[j]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst recipientCertificate = parameters.safeContents[index].recipientCertificate;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((\"recipientKey\" in parameters.safeContents[index]) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"recipientKey\\\" in \\\"parameters.safeContents[j]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\t\t\t\tconst recipientKey = parameters.safeContents[index].recipientKey;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Decrypt CMS EnvelopedData using first recipient information\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() => cmsEnveloped.decrypt(0, {\r\n\t\t\t\t\t\t\t\trecipientCertificate,\r\n\t\t\t\t\t\t\t\trecipientPrivateKey: recipientKey\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconst asn1 = asn1js.fromBER(result);\r\n\t\t\t\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of decrypted data\");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tthis.parsedValue.safeContents.push({\r\n\t\t\t\t\t\t\t\t\tprivacyMode: 2, // Public-key privacy mode\r\n\t\t\t\t\t\t\t\t\tvalue: new SafeContents({ schema: asn1.result })\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion   \r\n\t\t\t\t//region encryptedData \r\n\t\t\t\tcase \"1.2.840.113549.1.7.6\":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst cmsEncrypted = new EncryptedData({ schema: content.content });\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check mandatory parameters\r\n\t\t\t\t\t\tif((\"password\" in parameters.safeContents[index]) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\" in \\\"parameters.safeContents[j]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst password = parameters.safeContents[index].password;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Decrypt CMS EncryptedData using password\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() => cmsEncrypted.decrypt({\r\n\t\t\t\t\t\t\t\tpassword\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Initialize internal data\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconst asn1 = asn1js.fromBER(result);\r\n\t\t\t\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of decrypted data\");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tthis.parsedValue.safeContents.push({\r\n\t\t\t\t\t\t\t\t\tprivacyMode: 1, // Password-based privacy mode\r\n\t\t\t\t\t\t\t\t\tvalue: new SafeContents({ schema: asn1.result })\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion   \r\n\t\t\t\t//region default \r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Unknown \"contentType\" for AuthenticatedSafe: \" ${content.contentType}`);\r\n\t\t\t\t//endregion \r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tmakeInternalValues(parameters)\r\n\t{\r\n\t\t//region Check data in \"parsedValue\" \r\n\t\tif((\"parsedValue\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Please run \\\"parseValues\\\" first or add \\\"parsedValue\\\" manually\");\r\n\t\t\r\n\t\tif((this.parsedValue instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"this.parsedValue\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((this.parsedValue.safeContents instanceof Array) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"this.parsedValue.safeContents\\\" must has \\\"Array\\\" type\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Check input data from \"parameters\" \r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"safeContents\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"safeContents\\\"\");\r\n\t\t\r\n\t\tif((parameters.safeContents instanceof Array) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters.safeContents\\\" must has \\\"Array\\\" type\");\r\n\t\t\r\n\t\tif(parameters.safeContents.length !== this.parsedValue.safeContents.length)\r\n\t\t\treturn Promise.reject(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.parsedValue.safeContents\\\"\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create internal values from already parsed values \r\n\t\tthis.safeContents = [];\r\n\t\t\r\n\t\tfor(const [index, content] of this.parsedValue.safeContents.entries())\r\n\t\t{\r\n\t\t\t//region Check current \"content\" value\r\n\t\t\tif((\"privacyMode\" in content) === false)\r\n\t\t\t\treturn Promise.reject(\"The \\\"privacyMode\\\" is a mandatory parameter for \\\"content\\\"\");\r\n\t\t\t\r\n\t\t\tif((\"value\" in content) === false)\r\n\t\t\t\treturn Promise.reject(\"The \\\"value\\\" is a mandatory parameter for \\\"content\\\"\");\r\n\t\t\t\r\n\t\t\tif((content.value instanceof SafeContents) === false)\r\n\t\t\t\treturn Promise.reject(\"The \\\"content.value\\\" must has \\\"SafeContents\\\" type\");\r\n\t\t\t//endregion \r\n\t\t\t\r\n\t\t\tswitch(content.privacyMode)\r\n\t\t\t{\r\n\t\t\t\t//region No privacy \r\n\t\t\t\tcase 0:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst contentBuffer = content.value.toSchema().toBER(false);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.safeContents.push(new ContentInfo({\r\n\t\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.1\",\r\n\t\t\t\t\t\t\t\t\tcontent: new asn1js.OctetString({ valueHex: contentBuffer })\r\n\t\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion \r\n\t\t\t\t//region Privacy with password\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst cmsEncrypted = new EncryptedData();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst currentParameters = parameters.safeContents[index];\r\n\t\t\t\t\t\tcurrentParameters.contentToEncrypt = content.value.toSchema().toBER(false);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Encrypt CMS EncryptedData using password\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() => cmsEncrypted.encrypt(currentParameters),\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Store result content in CMS_CONTENT_INFO type\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.safeContents.push(new ContentInfo({\r\n\t\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.6\",\r\n\t\t\t\t\t\t\t\t\tcontent: cmsEncrypted.toSchema()\r\n\t\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion \r\n\t\t\t\t//region Privacy with public key\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst cmsEnveloped = new EnvelopedData();\r\n\t\t\t\t\t\tconst contentToEncrypt = content.value.toSchema().toBER(false);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check mandatory parameters\r\n\t\t\t\t\t\tif((\"encryptingCertificate\" in parameters.safeContents[index]) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"encryptingCertificate\\\" in \\\"parameters.safeContents[i]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((\"encryptionAlgorithm\" in parameters.safeContents[index]) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"encryptionAlgorithm\\\" in \\\"parameters.safeContents[i]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tswitch(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.name.toLowerCase() === \"aes-cbc\"):\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.name.toLowerCase() === \"aes-gcm\"):\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect parameter \"encryptionAlgorithm\" in \"parameters.safeContents[i]\": ${parameters.safeContents[index].encryptionAlgorithm}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tswitch(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.length === 128):\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.length === 192):\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.length === 256):\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect parameter \"encryptionAlgorithm.length\" in \"parameters.safeContents[i]\": ${parameters.safeContents[index].encryptionAlgorithm.length}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Making correct \"encryptionAlgorithm\" variable\r\n\t\t\t\t\t\tconst encryptionAlgorithm = parameters.safeContents[index].encryptionAlgorithm;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Append recipient for enveloped data\r\n\t\t\t\t\t\tcmsEnveloped.addRecipientByCertificate(parameters.safeContents[index].encryptingCertificate);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Making encryption\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() => cmsEnveloped.encrypt(encryptionAlgorithm, contentToEncrypt)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.safeContents.push(new ContentInfo({\r\n\t\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.3\",\r\n\t\t\t\t\t\t\t\t\tcontent: cmsEnveloped.toSchema()\r\n\t\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion \r\n\t\t\t\t//region default \r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn Promise.reject(`Incorrect value for \"content.privacyMode\": ${content.privacyMode}`);\r\n\t\t\t\t//endregion \r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Return result of the function \r\n\t\treturn sequence.then(\r\n\t\t\t() => this,\r\n\t\t\terror => Promise.reject(`Error during parsing: ${error}`)\r\n\t\t);\r\n\t\t//endregion   \r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}