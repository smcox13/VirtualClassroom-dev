{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _values = require('babel-runtime/core-js/object/values');\n\nvar _values2 = _interopRequireDefault(_values);\n\nvar _find2 = require('lodash/find');\n\nvar _find3 = _interopRequireDefault(_find2);\n\nvar _util = require('./util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @class CalendarCollection\n */\n\n\nvar CalendarCollection = {\n  namespace: _constants.CALENDAR,\n  items: {},\n\n  /**\n   * @param {String} id calendar ID\n   * @returns {Any} Calendar Item specifc to that id\n   * @private\n   * @memberof CalendarCollection\n   */\n  get: function get(id) {\n    return this.items[id];\n  },\n\n  /**\n   * @param {String} key any key and the corresponding calendar Item\n   * @param {String} value any values corresponding to calendar item\n   * @returns {Any} returns whatever is being stuffed into the collection\n   * @private\n   * @memberof CalendarCollection\n   */\n  getBy: function getBy(key, value) {\n    if (key && value) {\n      return (0, _find3.default)(this.items, function (item) {\n        return item[key] === value;\n      });\n    }\n\n    return null;\n  },\n\n  /**\n   * @param {Object} item CalendarObject passed to the collection\n   * @returns {Any} returns calender id whats get set\n   * @private\n   * @memberof CalendarCollection\n   */\n  set: function set(item) {\n    var itemId = item.id;\n\n    var meeting = _util2.default.calculateEndTime(item);\n\n    this.items[itemId] = meeting;\n    return itemId;\n  },\n\n  /**\n   * resets all the values in the calendarcollection\n   * @returns {undefined}\n   * @private\n   * @memberof CalendarCollection\n   */\n  reset: function reset() {\n    this.items = {};\n  },\n\n  /**\n   * @param {Id} id is the id for the calendar item to be removed\n   * @returns {Any} calendar item which got removed\n   * @private\n   * @memberof CalendarCollection\n   */\n  remove: function remove(id) {\n    var meeting = this.get(id);\n    delete this.items[id];\n    return meeting;\n  },\n\n  /**\n   * sets all the item passed to the collection\n   * @param {Array} items array of calendar items\n   * @private\n   * @returns {undefined}\n   * @memberof CalendarCollection\n   */\n  setAll: function setAll(items) {\n    var _this = this;\n\n    items.forEach(function (item) {\n      _this.set(item);\n    });\n  },\n\n  /**\n   * gets all the calendar stored in the collection\n   * @param {Array} items array of calendar items\n   * @private\n   * @returns {Array} returns an array of calendar items\n   * @memberof CalendarCollection\n   */\n  getAll: function getAll() {\n    return (0, _values2.default)(this.items);\n  }\n};\nexports.default = CalendarCollection;","map":{"version":3,"sources":["collection.js"],"names":["CalendarCollection","namespace","CALENDAR","items","get","getBy","key","item","set","itemId","meeting","CalendarUtil","reset","remove","setAll","getAll"],"mappings":";;;;;;;;;;;;;;AAEA,IAAA,KAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;;;;;;AACA;;;;;AAGA,IAAMA,kBAAAA,GAAqB;AACzBC,EAAAA,SAAAA,EAAWC,UAAAA,CADc,QAAA;AAEzBC,EAAAA,KAAAA,EAFyB,EAAA;;AAGzB;;;;;;AAMAC,EAAAA,GATyB,EAAA,SAAA,GAAA,CAAA,EAAA,EASjB;AACN,WAAO,KAAA,KAAA,CAAP,EAAO,CAAP;AAVuB,GAAA;;AAazB;;;;;;;AAOAC,EAAAA,KApByB,EAAA,SAAA,KAAA,CAAA,GAAA,EAAA,KAAA,EAoBP;AAChB,QAAIC,GAAAA,IAAJ,KAAA,EAAkB;AAChB,aAAO,CAAA,GAAA,MAAA,CAAA,OAAA,EAAK,KAAL,KAAA,EAAiB,UAAA,IAAA,EAAA;AAAA,eAAWC,IAAAA,CAAAA,GAAAA,CAAAA,KAAX,KAAA;AAAxB,OAAO,CAAP;AACD;;AAED,WAAA,IAAA;AAzBuB,GAAA;;AA4BzB;;;;;;AAMAC,EAAAA,GAlCyB,EAAA,SAAA,GAAA,CAAA,IAAA,EAkCf;AACR,QAAMC,MAAAA,GAASF,IAAAA,CAAf,EAAA;;AACA,QAAMG,OAAAA,GAAUC,MAAAA,CAAAA,OAAAA,CAAAA,gBAAAA,CAAhB,IAAgBA,CAAhB;;AAEA,SAAA,KAAA,CAAA,MAAA,IAAA,OAAA;AAEA,WAAA,MAAA;AAxCuB,GAAA;;AA2CzB;;;;;;AAMAC,EAAAA,KAjDyB,EAAA,SAAA,KAAA,GAiDjB;AACN,SAAA,KAAA,GAAA,EAAA;AAlDuB,GAAA;;AAsDzB;;;;;;AAMAC,EAAAA,MA5DyB,EAAA,SAAA,MAAA,CAAA,EAAA,EA4Dd;AACT,QAAMH,OAAAA,GAAU,KAAA,GAAA,CAAhB,EAAgB,CAAhB;AAEA,WAAO,KAAA,KAAA,CAAP,EAAO,CAAP;AAEA,WAAA,OAAA;AAjEuB,GAAA;;AAoEzB;;;;;;;AAOAI,EAAAA,MA3EyB,EAAA,SAAA,MAAA,CAAA,KAAA,EA2EX;AAAA,QAAA,KAAA,GAAA,IAAA;;AACZX,IAAAA,KAAAA,CAAAA,OAAAA,CAAc,UAAA,IAAA,EAAU;AACtB,MAAA,KAAA,CAAA,GAAA,CAAA,IAAA;AADFA,KAAAA;AA5EuB,GAAA;;AAiFzB;;;;;;;AAOAY,EAAAA,MAxFyB,EAAA,SAAA,MAAA,GAwFhB;AACP,WAAO,CAAA,GAAA,QAAA,CAAA,OAAA,EAAc,KAArB,KAAO,CAAP;AACD;AA1FwB,CAA3B;kBA8Fef,kB","sourcesContent":["import {find} from 'lodash';\n\nimport CalendarUtil from './util';\nimport {CALENDAR} from './constants';\n/**\n * @class CalendarCollection\n */\nconst CalendarCollection = {\n  namespace: CALENDAR,\n  items: {},\n  /**\n   * @param {String} id calendar ID\n   * @returns {Any} Calendar Item specifc to that id\n   * @private\n   * @memberof CalendarCollection\n   */\n  get(id) {\n    return this.items[id];\n  },\n\n  /**\n   * @param {String} key any key and the corresponding calendar Item\n   * @param {String} value any values corresponding to calendar item\n   * @returns {Any} returns whatever is being stuffed into the collection\n   * @private\n   * @memberof CalendarCollection\n   */\n  getBy(key, value) {\n    if (key && value) {\n      return find(this.items, (item) => (item[key] === value));\n    }\n\n    return null;\n  },\n\n  /**\n   * @param {Object} item CalendarObject passed to the collection\n   * @returns {Any} returns calender id whats get set\n   * @private\n   * @memberof CalendarCollection\n   */\n  set(item) {\n    const itemId = item.id;\n    const meeting = CalendarUtil.calculateEndTime(item);\n\n    this.items[itemId] = meeting;\n\n    return itemId;\n  },\n\n  /**\n   * resets all the values in the calendarcollection\n   * @returns {undefined}\n   * @private\n   * @memberof CalendarCollection\n   */\n  reset() {\n    this.items = {};\n  },\n\n\n  /**\n   * @param {Id} id is the id for the calendar item to be removed\n   * @returns {Any} calendar item which got removed\n   * @private\n   * @memberof CalendarCollection\n   */\n  remove(id) {\n    const meeting = this.get(id);\n\n    delete this.items[id];\n\n    return meeting;\n  },\n\n  /**\n   * sets all the item passed to the collection\n   * @param {Array} items array of calendar items\n   * @private\n   * @returns {undefined}\n   * @memberof CalendarCollection\n   */\n  setAll(items) {\n    items.forEach((item) => {\n      this.set(item);\n    });\n  },\n\n  /**\n   * gets all the calendar stored in the collection\n   * @param {Array} items array of calendar items\n   * @private\n   * @returns {Array} returns an array of calendar items\n   * @memberof CalendarCollection\n   */\n  getAll() {\n    return Object.values(this.items);\n  }\n\n};\n\nexport default CalendarCollection;\n"]},"metadata":{},"sourceType":"script"}