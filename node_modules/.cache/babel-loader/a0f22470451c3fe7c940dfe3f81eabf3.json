{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _constants = require('../constants');\n\nvar _parameter = require('../common/errors/parameter');\n\nvar _parameter2 = _interopRequireDefault(_parameter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar MemberUtil = {};\n/**\n * @param {Object} participant the locus participant\n * @returns {Boolean}\n */\n\nMemberUtil.isUser = function (participant) {\n  return participant && participant.type === _constants._USER_;\n};\n\nMemberUtil.isModerator = function (participant) {\n  return participant && participant.moderator;\n};\n/**\n * @param {Object} participant the locus participant\n * @returns {Boolean}\n */\n\n\nMemberUtil.isGuest = function (participant) {\n  return participant && participant.guest;\n};\n/**\n * @param {Object} participant the locus participant\n * @returns {Boolean}\n */\n\n\nMemberUtil.isDevice = function (participant) {\n  return participant && participant.type === _constants._RESOURCE_ROOM_;\n};\n\nMemberUtil.isModeratorAssignmentProhibited = function (participant) {\n  return participant && participant.moderatorAssignmentNotAllowed;\n};\n/**\n * checks to see if the participant id is the same as the passed id\n * there are multiple ids that can be used\n * @param {Object} participant the locus participant\n * @param {String} id\n * @returns {Boolean}\n */\n\n\nMemberUtil.isSame = function (participant, id) {\n  return participant && (participant.id === id || participant.person && participant.person.id === id);\n};\n/**\n * checks to see if the participant id is the same as the passed id for associated devices\n * there are multiple ids that can be used\n * @param {Object} participant the locus participant\n * @param {String} id\n * @returns {Boolean}\n */\n\n\nMemberUtil.isAssociatedSame = function (participant, id) {\n  return participant && participant.associatedUsers && participant.associatedUsers.some(function (user) {\n    return user.id === id || user.person && user.person.id === id;\n  });\n};\n/**\n * @param {Object} participant the locus participant\n * @param {Boolean} isGuest\n * @param {String} status\n * @returns {Boolean}\n */\n\n\nMemberUtil.isNotAdmitted = function (participant, isGuest, status) {\n  return participant && participant.guest && (participant.devices && participant.devices[0] && participant.devices[0].intent && participant.devices[0].intent.type === _constants._WAIT_ && isGuest && status === _constants._IN_LOBBY_ || !status === _constants._IN_MEETING_);\n};\n/**\n * @param {Object} participant the locus participant\n * @returns {Boolean}\n */\n\n\nMemberUtil.isAudioMuted = function (participant) {\n  if (!participant) {\n    throw new _parameter2.default('Audio could not be processed, participant is undefined.');\n  }\n\n  var mutedStatus = MemberUtil.isMuted(participant.status, _constants.AUDIO_STATUS);\n\n  if (participant.controls && participant.controls.audio) {\n    if (participant.controls.audio.muted) {\n      return true;\n    }\n\n    if (mutedStatus) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * @param {Object} participant the locus participant\n * @returns {Boolean}\n */\n\n\nMemberUtil.isVideoMuted = function (participant) {\n  if (!participant) {\n    throw new _parameter2.default('Video could not be processed, participant is undefined.');\n  }\n\n  return MemberUtil.isMuted(participant.status, _constants.VIDEO_STATUS);\n};\n/**\n * utility method for audio/video muted status\n * @param {String} status\n * @param {String} accessor\n * @returns {Boolean}\n */\n\n\nMemberUtil.isMuted = function (status, accessor) {\n  if (status) {\n    if (status[accessor] === _constants._RECEIVE_ONLY_) {\n      return true;\n    }\n\n    if (status[accessor] === _constants._SEND_RECEIVE_) {\n      return false;\n    }\n  }\n\n  return null;\n};\n/**\n * utility method for getting the recording member for later comparison\n * @param {Object} controls\n * @returns {String|null}\n */\n\n\nMemberUtil.getRecordingMember = function (controls) {\n  if (!controls) {\n    return null;\n  }\n\n  if (controls.record && controls.record.recording && controls.record.meta) {\n    return controls.record.meta.modifiedBy;\n  }\n\n  return null;\n};\n/**\n * @param {Object} participant the locus participant\n * @returns {Boolean}\n */\n\n\nMemberUtil.isRecording = function (participant) {\n  if (!participant) {\n    throw new _parameter2.default('Recording could not be processed, participant is undefined.');\n  }\n\n  if (participant.controls && participant.controls.localRecord) {\n    return participant.controls.localRecord.recording;\n  }\n\n  return false;\n};\n\nMemberUtil.isRemovable = function (isSelf, isGuest, isInMeeting, type) {\n  if (isGuest || isSelf) {\n    return false;\n  }\n\n  if (type === _constants._CALL_) {\n    return false;\n  }\n\n  if (isInMeeting) {\n    return true;\n  }\n\n  return false;\n};\n\nMemberUtil.isMutable = function (isSelf, isDevice, isInMeeting, isMuted, type) {\n  if (!isInMeeting) {\n    return false;\n  }\n\n  if (isMuted) {\n    return false;\n  }\n\n  if (type === _constants._CALL_) {\n    return false;\n  }\n\n  if (isSelf || isDevice) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * @param {Object} participant the locus participant\n * @returns {String}\n */\n\n\nMemberUtil.extractStatus = function (participant) {\n  if (!(participant && participant.devices && participant.devices.length)) {\n    return _constants._NOT_IN_MEETING_;\n  }\n\n  if (participant.state === _constants._JOINED_) {\n    return _constants._IN_MEETING_;\n  }\n\n  if (participant.state === _constants._IDLE_) {\n    if (participant.devices && participant.devices.length > 0) {\n      var foundDevice = participant.devices.find(function (device) {\n        return device.intent && (device.intent.type === _constants._WAIT_ || device.intent.type === _constants._OBSERVE_);\n      });\n      return foundDevice ? _constants._IN_LOBBY_ : _constants._NOT_IN_MEETING_;\n    }\n\n    return _constants._NOT_IN_MEETING_;\n  }\n\n  if (participant.state === _constants._LEFT_) {\n    return _constants._NOT_IN_MEETING_;\n  }\n\n  return _constants._NOT_IN_MEETING_;\n};\n/**\n * @param {Object} participant the locus participant\n * @returns {String}\n */\n\n\nMemberUtil.extractId = function (participant) {\n  if (participant) {\n    return participant.id;\n  }\n\n  return null;\n};\n/**\n * @param {Object} participant the locus participant\n * @returns {String}\n */\n\n\nMemberUtil.extractName = function (participant) {\n  if (participant && participant.person) {\n    return participant.person.name;\n  }\n\n  return null;\n};\n\nMemberUtil.extractEmail = function (participant) {\n  if (participant && participant.person) {\n    return participant.person.email;\n  }\n\n  return null;\n};\n\nexports.default = MemberUtil;","map":{"version":3,"sources":["util.js"],"names":["MemberUtil","participant","_USER_","_RESOURCE_ROOM_","user","_WAIT_","status","_IN_LOBBY_","_IN_MEETING_","ParameterError","mutedStatus","AUDIO_STATUS","VIDEO_STATUS","_RECEIVE_ONLY_","_SEND_RECEIVE_","controls","isGuest","type","_CALL_","isSelf","_NOT_IN_MEETING_","_JOINED_","_IDLE_","foundDevice","device","_OBSERVE_","_LEFT_"],"mappings":"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","sourcesContent":["import {\n  _USER_,\n  _RESOURCE_ROOM_,\n  _OBSERVE_,\n  _WAIT_,\n  _LEFT_,\n  _JOINED_,\n  _IDLE_,\n  _IN_LOBBY_,\n  _NOT_IN_MEETING_,\n  _IN_MEETING_,\n  AUDIO_STATUS,\n  VIDEO_STATUS,\n  _SEND_RECEIVE_,\n  _RECEIVE_ONLY_,\n  _CALL_\n} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\nconst MemberUtil = {};\n\n/**\n * @param {Object} participant the locus participant\n * @returns {Boolean}\n */\nMemberUtil.isUser = (participant) => participant && participant.type === _USER_;\n\nMemberUtil.isModerator = (participant) => participant && participant.moderator;\n\n/**\n * @param {Object} participant the locus participant\n * @returns {Boolean}\n */\nMemberUtil.isGuest = (participant) => participant && participant.guest;\n\n/**\n * @param {Object} participant the locus participant\n * @returns {Boolean}\n */\nMemberUtil.isDevice = (participant) => participant && participant.type === _RESOURCE_ROOM_;\n\nMemberUtil.isModeratorAssignmentProhibited = (participant) => participant && participant.moderatorAssignmentNotAllowed;\n\n/**\n * checks to see if the participant id is the same as the passed id\n * there are multiple ids that can be used\n * @param {Object} participant the locus participant\n * @param {String} id\n * @returns {Boolean}\n */\nMemberUtil.isSame = (participant, id) => participant &&\n  (participant.id === id || participant.person && participant.person.id === id);\n\n/**\n * checks to see if the participant id is the same as the passed id for associated devices\n * there are multiple ids that can be used\n * @param {Object} participant the locus participant\n * @param {String} id\n * @returns {Boolean}\n */\nMemberUtil.isAssociatedSame = (participant, id) => participant &&\nparticipant.associatedUsers &&\nparticipant.associatedUsers.some((user) => (user.id === id || user.person && user.person.id === id));\n\n/**\n * @param {Object} participant the locus participant\n * @param {Boolean} isGuest\n * @param {String} status\n * @returns {Boolean}\n */\nMemberUtil.isNotAdmitted = (participant, isGuest, status) => participant &&\n  participant.guest && ((participant.devices && participant.devices[0] &&\n  participant.devices[0].intent && participant.devices[0].intent.type === _WAIT_ &&\n  isGuest && status === _IN_LOBBY_) || !status === _IN_MEETING_);\n\n/**\n * @param {Object} participant the locus participant\n * @returns {Boolean}\n */\nMemberUtil.isAudioMuted = (participant) => {\n  if (!participant) {\n    throw new ParameterError('Audio could not be processed, participant is undefined.');\n  }\n  const mutedStatus = MemberUtil.isMuted(participant.status, AUDIO_STATUS);\n\n  if (participant.controls && participant.controls.audio) {\n    if (participant.controls.audio.muted) {\n      return true;\n    }\n    if (mutedStatus) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * @param {Object} participant the locus participant\n * @returns {Boolean}\n */\nMemberUtil.isVideoMuted = (participant) => {\n  if (!participant) {\n    throw new ParameterError('Video could not be processed, participant is undefined.');\n  }\n\n  return MemberUtil.isMuted(participant.status, VIDEO_STATUS);\n};\n\n/**\n * utility method for audio/video muted status\n * @param {String} status\n * @param {String} accessor\n * @returns {Boolean}\n */\nMemberUtil.isMuted = (status, accessor) => {\n  if (status) {\n    if (status[accessor] === _RECEIVE_ONLY_) {\n      return true;\n    }\n    if (status[accessor] === _SEND_RECEIVE_) {\n      return false;\n    }\n  }\n\n  return null;\n};\n\n/**\n * utility method for getting the recording member for later comparison\n * @param {Object} controls\n * @returns {String|null}\n */\nMemberUtil.getRecordingMember = (controls) => {\n  if (!controls) {\n    return null;\n  }\n  if (controls.record && controls.record.recording && controls.record.meta) {\n    return controls.record.meta.modifiedBy;\n  }\n\n  return null;\n};\n\n/**\n * @param {Object} participant the locus participant\n * @returns {Boolean}\n */\nMemberUtil.isRecording = (participant) => {\n  if (!participant) {\n    throw new ParameterError('Recording could not be processed, participant is undefined.');\n  }\n  if (participant.controls && participant.controls.localRecord) {\n    return participant.controls.localRecord.recording;\n  }\n\n  return false;\n};\n\nMemberUtil.isRemovable = (isSelf, isGuest, isInMeeting, type) => {\n  if (isGuest || isSelf) {\n    return false;\n  }\n  if (type === _CALL_) {\n    return false;\n  }\n  if (isInMeeting) {\n    return true;\n  }\n\n  return false;\n};\n\nMemberUtil.isMutable = (isSelf, isDevice, isInMeeting, isMuted, type) => {\n  if (!isInMeeting) {\n    return false;\n  }\n  if (isMuted) {\n    return false;\n  }\n  if (type === _CALL_) {\n    return false;\n  }\n  if (isSelf || isDevice) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * @param {Object} participant the locus participant\n * @returns {String}\n */\nMemberUtil.extractStatus = (participant) => {\n  if (!(participant && participant.devices && participant.devices.length)) {\n    return _NOT_IN_MEETING_;\n  }\n  if (participant.state === _JOINED_) {\n    return _IN_MEETING_;\n  }\n  if (participant.state === _IDLE_) {\n    if (participant.devices && participant.devices.length > 0) {\n      const foundDevice = participant.devices.find((device) => device.intent && (device.intent.type === _WAIT_ || device.intent.type === _OBSERVE_));\n\n      return foundDevice ? _IN_LOBBY_ : _NOT_IN_MEETING_;\n    }\n\n    return _NOT_IN_MEETING_;\n  }\n  if (participant.state === _LEFT_) {\n    return _NOT_IN_MEETING_;\n  }\n\n  return _NOT_IN_MEETING_;\n};\n\n/**\n * @param {Object} participant the locus participant\n * @returns {String}\n */\nMemberUtil.extractId = (participant) => {\n  if (participant) {\n    return participant.id;\n  }\n\n  return null;\n};\n\n/**\n * @param {Object} participant the locus participant\n * @returns {String}\n */\nMemberUtil.extractName = (participant) => {\n  if (participant && participant.person) {\n    return participant.person.name;\n  }\n\n  return null;\n};\n\nMemberUtil.extractEmail = (participant) => {\n  if (participant && (participant.person)) {\n    return participant.person.email;\n  }\n\n  return null;\n};\n\nexport default MemberUtil;\n"]},"metadata":{},"sourceType":"script"}