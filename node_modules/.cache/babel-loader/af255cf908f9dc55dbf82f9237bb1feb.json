{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralSubtree from \"./GeneralSubtree.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nexport default class NameConstraints {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for NameConstraints class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    if (\"permittedSubtrees\" in parameters)\n      /**\r\n       * @type {Array.<GeneralSubtree>}\r\n       * @desc permittedSubtrees\r\n       */\n      this.permittedSubtrees = getParametersValue(parameters, \"permittedSubtrees\", NameConstraints.defaultValues(\"permittedSubtrees\"));\n    if (\"excludedSubtrees\" in parameters)\n      /**\r\n       * @type {Array.<GeneralSubtree>}\r\n       * @desc excludedSubtrees\r\n       */\n      this.excludedSubtrees = getParametersValue(parameters, \"excludedSubtrees\", NameConstraints.defaultValues(\"excludedSubtrees\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"permittedSubtrees\":\n        return [];\n\n      case \"excludedSubtrees\":\n        return [];\n\n      default:\n        throw new Error(`Invalid member name for NameConstraints class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * NameConstraints ::= SEQUENCE {\r\n   *    permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,\r\n   *    excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [permittedSubtrees]\r\n     * @property {string} [excludedSubtrees]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [new asn1js.Repeated({\n          name: names.permittedSubtrees || \"\",\n          value: GeneralSubtree.schema()\n        })]\n      }), new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: [new asn1js.Repeated({\n          name: names.excludedSubtrees || \"\",\n          value: GeneralSubtree.schema()\n        })]\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"permittedSubtrees\", \"excludedSubtrees\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, NameConstraints.schema({\n      names: {\n        permittedSubtrees: \"permittedSubtrees\",\n        excludedSubtrees: \"excludedSubtrees\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for NameConstraints\"); //endregion\n    //region Get internal properties from parsed schema\n\n    if (\"permittedSubtrees\" in asn1.result) this.permittedSubtrees = Array.from(asn1.result.permittedSubtrees, element => new GeneralSubtree({\n      schema: element\n    }));\n    if (\"excludedSubtrees\" in asn1.result) this.excludedSubtrees = Array.from(asn1.result.excludedSubtrees, element => new GeneralSubtree({\n      schema: element\n    })); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n\n    if (\"permittedSubtrees\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: Array.from(this.permittedSubtrees, element => element.toSchema())\n      }));\n    }\n\n    if (\"excludedSubtrees\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: Array.from(this.excludedSubtrees, element => element.toSchema())\n      }));\n    } //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const object = {};\n    if (\"permittedSubtrees\" in this) object.permittedSubtrees = Array.from(this.permittedSubtrees, element => element.toJSON());\n    if (\"excludedSubtrees\" in this) object.excludedSubtrees = Array.from(this.excludedSubtrees, element => element.toJSON());\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/NameConstraints.js"],"names":["asn1js","getParametersValue","clearProps","GeneralSubtree","NameConstraints","constructor","parameters","permittedSubtrees","defaultValues","excludedSubtrees","fromSchema","schema","memberName","Error","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","asn1","compareSchema","verified","result","Array","from","element","toSchema","outputArray","push","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralSubtree from \"./GeneralSubtree.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class NameConstraints\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for NameConstraints class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"permittedSubtrees\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<GeneralSubtree>}\r\n\t\t\t * @desc permittedSubtrees\r\n\t\t\t */\r\n\t\t\tthis.permittedSubtrees = getParametersValue(parameters, \"permittedSubtrees\", NameConstraints.defaultValues(\"permittedSubtrees\"));\r\n\r\n\t\tif(\"excludedSubtrees\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<GeneralSubtree>}\r\n\t\t\t * @desc excludedSubtrees\r\n\t\t\t */\r\n\t\t\tthis.excludedSubtrees = getParametersValue(parameters, \"excludedSubtrees\", NameConstraints.defaultValues(\"excludedSubtrees\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"permittedSubtrees\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"excludedSubtrees\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for NameConstraints class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * NameConstraints ::= SEQUENCE {\r\n\t *    permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,\r\n\t *    excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [permittedSubtrees]\r\n\t\t * @property {string} [excludedSubtrees]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.permittedSubtrees || \"\"),\r\n\t\t\t\t\t\t\tvalue: GeneralSubtree.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.excludedSubtrees || \"\"),\r\n\t\t\t\t\t\t\tvalue: GeneralSubtree.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"permittedSubtrees\",\r\n\t\t\t\"excludedSubtrees\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tNameConstraints.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tpermittedSubtrees: \"permittedSubtrees\",\r\n\t\t\t\t\texcludedSubtrees: \"excludedSubtrees\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for NameConstraints\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"permittedSubtrees\" in asn1.result)\r\n\t\t\tthis.permittedSubtrees = Array.from(asn1.result.permittedSubtrees, element => new GeneralSubtree({ schema: element }));\r\n\r\n\t\tif(\"excludedSubtrees\" in asn1.result)\r\n\t\t\tthis.excludedSubtrees = Array.from(asn1.result.excludedSubtrees, element => new GeneralSubtree({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(\"permittedSubtrees\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.permittedSubtrees, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"excludedSubtrees\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.excludedSubtrees, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\t\t\r\n\t\tif(\"permittedSubtrees\" in this)\r\n\t\t\tobject.permittedSubtrees = Array.from(this.permittedSubtrees, element => element.toJSON());\r\n\r\n\t\tif(\"excludedSubtrees\" in this)\r\n\t\t\tobject.excludedSubtrees = Array.from(this.excludedSubtrees, element => element.toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}