{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _set = require('babel-runtime/core-js/set');\n\nvar _set2 = _interopRequireDefault(_set);\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nvar _isFinite2 = require('lodash/isFinite');\n\nvar _isFinite3 = _interopRequireDefault(_isFinite2);\n\nvar _forEach2 = require('lodash/forEach');\n\nvar _forEach3 = _interopRequireDefault(_forEach2);\n\nvar _constants = require('../constants');\n\nvar _parameter = require('../common/errors/parameter');\n\nvar _parameter2 = _interopRequireDefault(_parameter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar StatsAnalyzer = {};\n/**\n * Can involve changing of the default plugin-meetings sdk for deeper results\n * @param {Array} series of WebRTCData\n * @param {Object} options\n * @param {Array} options.analysisKeys [{key: 'bytesSent', check: 'increasing'}, {key: 'bytesReceived', check: 'increasing'}]\n * @returns {Object} analysis {valid: true/false, failed: { key: [number] }, data: { webRtcKeyToAnalyze: { valid: true/false, reports: [ { value: number, valid: true/false, difference: number } ] } } }\n * @public\n */\n\nStatsAnalyzer.analyze = function (series) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    analysisKeys: _constants.ANALYSIS_STATS.DEFAULT_KEYS\n  };\n\n  if (!(0, _isArray3.default)(series) || !series.length || !options || !(0, _isArray3.default)(options.analysisKeys) || !options.analysisKeys.length) {\n    throw new _parameter2.default('analyzer->analyze#series must be defined as a nonempty array of WebRTCData objects, and options.analysisKeys must be a nonempty array of strings, representing the properties to analyze.');\n  }\n\n  var properties = new _set2.default(options.analysisKeys);\n  var analysis = {\n    valid: true,\n    failed: {},\n    data: {}\n  };\n  properties.forEach(function (config) {\n    var property = config.key;\n    analysis.data[property] = {\n      valid: true,\n      reports: []\n    };\n    analysis.failed[property] = [];\n    var previous = {\n      value: 0\n    };\n    var index = 0;\n\n    var _loop = function _loop(i) {\n      var singular = {};\n      (0, _forEach3.default)(series[i].data.getData()[config.prop], function (webrtcData) {\n        // eslint-disable-line\n        var value = webrtcData[property];\n\n        if (!value || !(0, _isFinite3.default)(value)) {\n          return;\n        }\n\n        singular.value = value;\n        singular.difference = 0;\n        singular.valid = false;\n        singular.index = index;\n        singular.difference = singular.value - previous.value;\n\n        if (config.check === _constants.ANALYSIS_CHECKS.INCREASING && singular.difference > 0) {\n          singular.valid = true;\n        } else if (config.check === _constants.ANALYSIS_CHECKS.DECREASING && singular.difference < 0) {\n          singular.valid = true;\n        } else if (config.check === _constants.ANALYSIS_CHECKS.CONSTANT) {\n          singular.valid = true;\n        } else {\n          singular.valid = false;\n        }\n\n        if (!singular.valid) {\n          analysis.data[property].valid = false;\n          analysis.valid = false;\n          analysis.failed[property].push(i);\n        }\n\n        previous = singular;\n        analysis.data[property].reports.push(singular);\n      });\n      index += 1;\n    };\n\n    for (var i = series.length - 1; i > 0; i -= 1) {\n      _loop(i);\n    }\n\n    if (!analysis.data[property].valid) {\n      analysis.valid = false;\n    }\n  });\n  return analysis;\n};\n\nexports.default = StatsAnalyzer;","map":{"version":3,"sources":["analyzer.js"],"names":["StatsAnalyzer","options","analysisKeys","ANALYSIS_STATS","series","ParameterError","properties","analysis","valid","failed","data","property","config","reports","previous","value","index","i","singular","webrtcData","ANALYSIS_CHECKS"],"mappings":"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","sourcesContent":["import {forEach, isFinite, isArray} from 'lodash';\n\nimport {\n  ANALYSIS_STATS,\n  ANALYSIS_CHECKS\n} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\nconst StatsAnalyzer = {};\n\n/**\n * Can involve changing of the default plugin-meetings sdk for deeper results\n * @param {Array} series of WebRTCData\n * @param {Object} options\n * @param {Array} options.analysisKeys [{key: 'bytesSent', check: 'increasing'}, {key: 'bytesReceived', check: 'increasing'}]\n * @returns {Object} analysis {valid: true/false, failed: { key: [number] }, data: { webRtcKeyToAnalyze: { valid: true/false, reports: [ { value: number, valid: true/false, difference: number } ] } } }\n * @public\n */\nStatsAnalyzer.analyze = (series, options = {analysisKeys: ANALYSIS_STATS.DEFAULT_KEYS}) => {\n  if (!isArray(series) || !series.length || !options || !isArray(options.analysisKeys) || !options.analysisKeys.length) {\n    throw new ParameterError('analyzer->analyze#series must be defined as a nonempty array of WebRTCData objects, and options.analysisKeys must be a nonempty array of strings, representing the properties to analyze.');\n  }\n  const properties = new Set(options.analysisKeys);\n  const analysis = {valid: true, failed: {}, data: {}};\n\n  properties.forEach((config) => {\n    const property = config.key;\n\n    analysis.data[property] = {valid: true, reports: []};\n    analysis.failed[property] = [];\n    let previous = {value: 0};\n    let index = 0;\n\n    for (let i = series.length - 1; i > 0; i -= 1) {\n      const singular = {};\n\n      forEach(series[i].data.getData()[config.prop], (webrtcData) => { // eslint-disable-line\n        const value = webrtcData[property];\n\n        if (!value || !isFinite(value)) {\n          return;\n        }\n        singular.value = value;\n        singular.difference = 0;\n        singular.valid = false;\n        singular.index = index;\n        singular.difference = singular.value - previous.value;\n        if (config.check === ANALYSIS_CHECKS.INCREASING && singular.difference > 0) {\n          singular.valid = true;\n        }\n        else if (config.check === ANALYSIS_CHECKS.DECREASING && singular.difference < 0) {\n          singular.valid = true;\n        }\n        else if (config.check === ANALYSIS_CHECKS.CONSTANT) {\n          singular.valid = true;\n        }\n        else {\n          singular.valid = false;\n        }\n        if (!singular.valid) {\n          analysis.data[property].valid = false;\n          analysis.valid = false;\n          analysis.failed[property].push(i);\n        }\n        previous = singular;\n        analysis.data[property].reports.push(singular);\n      });\n      index += 1;\n    }\n    if (!analysis.data[property].valid) {\n      analysis.valid = false;\n    }\n  });\n\n  return analysis;\n};\n\nexport default StatsAnalyzer;\n"]},"metadata":{},"sourceType":"script"}