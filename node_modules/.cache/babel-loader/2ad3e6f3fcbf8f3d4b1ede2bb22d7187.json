{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _apply = require('babel-runtime/core-js/reflect/apply');\n\nvar _apply2 = _interopRequireDefault(_apply);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _partition2 = require('lodash/partition');\n\nvar _partition3 = _interopRequireDefault(_partition2);\n\nrequire('@webex/internal-plugin-device');\n\nvar _webexCore = require('@webex/webex-core');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar Feature = _webexCore.WebexPlugin.extend({\n  namespace: 'Feature',\n\n  /**\n   * Returns the value of the requested feature toggle.\n   * @param {string} keyType <developer|user|entitlement>\n   * @param {string} key\n   * @param {Object} options\n   * @param {boolean} options.full to get full feature record including metadata.\n   * @returns {string|boolean|number|FeatureModel|null}\n   */\n  getFeature: function getFeature(keyType, key, options) {\n    if (keyType !== 'developer' && keyType !== 'user' && keyType !== 'entitlement') {\n      return _promise2.default.reject(new Error('Invalid feature keyType provided. Only `developer`, `user`, and `entitlement` feature toggles are permitted.'));\n    }\n\n    options = options || {};\n    var feature = this.webex.internal.device.features[keyType].get(key);\n\n    if (!feature) {\n      return _promise2.default.resolve(null);\n    }\n\n    if (options.full) {\n      return _promise2.default.resolve(feature.serialize());\n    }\n\n    return _promise2.default.resolve(feature.value);\n  },\n\n  /**\n   * Handles a feature toggle update from the server.\n   * @param {Object} envelope\n   * @returns {undefined}\n   */\n  handleFeatureUpdate: function handleFeatureUpdate(envelope) {\n    if (envelope && envelope.data) {\n      var feature = envelope.data.featureToggle;\n      var keyType = feature.type.toLowerCase();\n\n      if (keyType === 'user' || keyType === 'developer') {\n        this.webex.internal.device.features[keyType].add([feature], {\n          merge: true\n        });\n      }\n    }\n  },\n\n  /**\n   * Register to listen for incoming feature events\n   * @instance\n   * @returns {undefined}\n   */\n  listen: function listen() {\n    this.listenTo(this.webex.internal.mercury, 'event:featureToggle_update', this.handleFeatureUpdate);\n  },\n\n  /**\n   * Issues request to server to set a value for a feature toggle.\n   * @param {string} keyType <developer|user>\n   * @param {string} key\n   * @param {string} value\n   * @returns {Promise} Refreshes the local device and resolves with the features endpoint's response.\n   */\n  setFeature: function setFeature(keyType, key, value) {\n    var _this = this; // Limit only to developer feature toggles for now.\n\n\n    if (keyType !== 'developer' && keyType !== 'user') {\n      return _promise2.default.reject(new Error('Only `developer` and `user` feature toggles can be set.'));\n    }\n\n    return this.request({\n      method: 'POST',\n      api: 'feature',\n      resource: 'features/users/' + this.webex.internal.device.userId + '/' + keyType,\n      body: {\n        key: key,\n        mutable: true,\n        val: value\n      }\n    }).then(function (res) {\n      return _this.webex.internal.device.features[keyType].add(res.body, {\n        merge: true\n      });\n    });\n  },\n\n  /**\n   * Issues request to server to set a value for a feature toggle.\n   * @param {array} featureList\n   * @returns {Promise} Refreshes the local device and resolves with the features endpoint`s response.\n   */\n  setBundledFeatures: function setBundledFeatures(featureList) {\n    var _this2 = this;\n\n    featureList.forEach(function (item) {\n      item.mutable = item.mutable || 'true';\n\n      if (item.type !== 'USER' && item.type !== 'DEV') {\n        item.type = 'USER';\n      }\n    });\n    return this.request({\n      method: 'POST',\n      api: 'feature',\n      resource: 'features/users/' + this.webex.internal.device.userId + '/toggles',\n      body: featureList\n    }).then(function (res) {\n      var partitionedToggles = (0, _partition3.default)(res.body.featureToggles, {\n        type: 'USER'\n      });\n\n      _this2.webex.internal.device.features.user.add(partitionedToggles[0], {\n        merge: true\n      });\n\n      _this2.webex.internal.device.features.developer.add(partitionedToggles[1], {\n        merge: true\n      });\n    });\n  },\n  initialize: function initialize() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    (0, _apply2.default)(_webexCore.WebexPlugin.prototype.initialize, this, args);\n    this.listenToAndRun(this.webex, 'change:internal.device.features.developer', this.trigger.bind(this, 'change:developer'));\n    this.listenToAndRun(this.webex, 'change:internal.device.features.entitlement', this.trigger.bind(this, 'change:entitlement'));\n    this.listenToAndRun(this.webex, 'change:internal.device.features.user', this.trigger.bind(this, 'change:user'));\n  },\n  version: '1.80.172'\n});\n\nexports.default = Feature;","map":{"version":3,"sources":["feature.js"],"names":["Feature","namespace","getFeature","keyType","options","feature","handleFeatureUpdate","envelope","merge","listen","setFeature","method","api","resource","body","key","mutable","val","value","res","setBundledFeatures","featureList","item","partitionedToggles","type","initialize","args","WebexPlugin"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport '@webex/internal-plugin-device';\nimport {partition} from 'lodash';\nimport {WebexPlugin} from '@webex/webex-core';\n\nconst Feature = WebexPlugin.extend({\n  namespace: 'Feature',\n\n  /**\n   * Returns the value of the requested feature toggle.\n   * @param {string} keyType <developer|user|entitlement>\n   * @param {string} key\n   * @param {Object} options\n   * @param {boolean} options.full to get full feature record including metadata.\n   * @returns {string|boolean|number|FeatureModel|null}\n   */\n  getFeature(keyType, key, options) {\n    if (keyType !== 'developer' && keyType !== 'user' && keyType !== 'entitlement') {\n      return Promise.reject(new Error('Invalid feature keyType provided. Only `developer`, `user`, and `entitlement` feature toggles are permitted.'));\n    }\n\n    options = options || {};\n\n    const feature = this.webex.internal.device.features[keyType].get(key);\n\n    if (!feature) {\n      return Promise.resolve(null);\n    }\n\n    if (options.full) {\n      return Promise.resolve(feature.serialize());\n    }\n\n    return Promise.resolve(feature.value);\n  },\n\n  /**\n   * Handles a feature toggle update from the server.\n   * @param {Object} envelope\n   * @returns {undefined}\n   */\n  handleFeatureUpdate(envelope) {\n    if (envelope && envelope.data) {\n      const feature = envelope.data.featureToggle;\n      const keyType = feature.type.toLowerCase();\n\n      if (keyType === 'user' || keyType === 'developer') {\n        this.webex.internal.device.features[keyType].add([feature], {merge: true});\n      }\n    }\n  },\n\n  /**\n   * Register to listen for incoming feature events\n   * @instance\n   * @returns {undefined}\n   */\n  listen() {\n    this.listenTo(this.webex.internal.mercury, 'event:featureToggle_update', this.handleFeatureUpdate);\n  },\n\n  /**\n   * Issues request to server to set a value for a feature toggle.\n   * @param {string} keyType <developer|user>\n   * @param {string} key\n   * @param {string} value\n   * @returns {Promise} Refreshes the local device and resolves with the features endpoint's response.\n   */\n  setFeature(keyType, key, value) {\n    // Limit only to developer feature toggles for now.\n    if (keyType !== 'developer' && keyType !== 'user') {\n      return Promise.reject(new Error('Only `developer` and `user` feature toggles can be set.'));\n    }\n\n    return this.request({\n      method: 'POST',\n      api: 'feature',\n      resource: `features/users/${this.webex.internal.device.userId}/${keyType}`,\n      body: {\n        key,\n        mutable: true,\n        val: value\n      }\n    })\n      .then((res) => this.webex.internal.device.features[keyType].add(res.body, {merge: true}));\n  },\n\n  /**\n   * Issues request to server to set a value for a feature toggle.\n   * @param {array} featureList\n   * @returns {Promise} Refreshes the local device and resolves with the features endpoint`s response.\n   */\n  setBundledFeatures(featureList) {\n    featureList.forEach((item) => {\n      item.mutable = item.mutable || 'true';\n      if (item.type !== 'USER' && item.type !== 'DEV') {\n        item.type = 'USER';\n      }\n    });\n\n    return this.request({\n      method: 'POST',\n      api: 'feature',\n      resource: `features/users/${this.webex.internal.device.userId}/toggles`,\n      body: featureList\n    })\n      .then((res) => {\n        const partitionedToggles = partition(res.body.featureToggles, {type: 'USER'});\n\n        this.webex.internal.device.features.user.add(partitionedToggles[0], {merge: true});\n        this.webex.internal.device.features.developer.add(partitionedToggles[1], {merge: true});\n      });\n  },\n\n  initialize(...args) {\n    Reflect.apply(WebexPlugin.prototype.initialize, this, args);\n\n    this.listenToAndRun(this.webex, 'change:internal.device.features.developer', this.trigger.bind(this, 'change:developer'));\n    this.listenToAndRun(this.webex, 'change:internal.device.features.entitlement', this.trigger.bind(this, 'change:entitlement'));\n    this.listenToAndRun(this.webex, 'change:internal.device.features.user', this.trigger.bind(this, 'change:user'));\n  }\n});\n\nexport default Feature;\n"]},"metadata":{},"sourceType":"script"}