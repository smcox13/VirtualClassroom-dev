{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport PKIStatusInfo from \"./PKIStatusInfo.js\";\nimport ContentInfo from \"./ContentInfo.js\";\nimport SignedData from \"./SignedData.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC3161\r\n */\n\nexport default class TimeStampResp {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for TimeStampResp class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {PKIStatusInfo}\r\n     * @desc status\r\n     */\n    this.status = getParametersValue(parameters, \"status\", TimeStampResp.defaultValues(\"status\"));\n    if (\"timeStampToken\" in parameters)\n      /**\r\n       * @type {ContentInfo}\r\n       * @desc timeStampToken\r\n       */\n      this.timeStampToken = getParametersValue(parameters, \"timeStampToken\", TimeStampResp.defaultValues(\"timeStampToken\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"status\":\n        return new PKIStatusInfo();\n\n      case \"timeStampToken\":\n        return new ContentInfo();\n\n      default:\n        throw new Error(`Invalid member name for TimeStampResp class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"status\":\n        return PKIStatusInfo.compareWithDefault(\"status\", memberValue.status) && \"statusStrings\" in memberValue === false && \"failInfo\" in memberValue === false;\n\n      case \"timeStampToken\":\n        return memberValue.contentType === \"\" && memberValue.content instanceof asn1js.Any;\n\n      default:\n        throw new Error(`Invalid member name for TimeStampResp class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * TimeStampResp ::= SEQUENCE  {\r\n   *    status                  PKIStatusInfo,\r\n   *    timeStampToken          TimeStampToken     OPTIONAL  }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [status]\r\n     * @property {string} [timeStampToken]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"TimeStampResp\",\n      value: [PKIStatusInfo.schema(names.status || {\n        names: {\n          blockName: \"TimeStampResp.status\"\n        }\n      }), ContentInfo.schema(names.timeStampToken || {\n        names: {\n          blockName: \"TimeStampResp.timeStampToken\",\n          optional: true\n        }\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"TimeStampResp.status\", \"TimeStampResp.timeStampToken\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, TimeStampResp.schema());\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for TimeStampResp\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.status = new PKIStatusInfo({\n      schema: asn1.result[\"TimeStampResp.status\"]\n    });\n    if (\"TimeStampResp.timeStampToken\" in asn1.result) this.timeStampToken = new ContentInfo({\n      schema: asn1.result[\"TimeStampResp.timeStampToken\"]\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n    outputArray.push(this.status.toSchema());\n    if (\"timeStampToken\" in this) outputArray.push(this.timeStampToken.toSchema()); //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const _object = {\n      status: this.status\n    };\n    if (\"timeStampToken\" in this) _object.timeStampToken = this.timeStampToken.toJSON();\n    return _object;\n  } //**********************************************************************************\n\n  /**\r\n   * Sign current TSP Response\r\n   * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n   * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n   * @returns {Promise}\r\n   */\n\n\n  sign(privateKey, hashAlgorithm) {\n    //region Check that \"timeStampToken\" exists\n    if (\"timeStampToken\" in this === false) return Promise.reject(\"timeStampToken is absent in TSP response\"); //endregion\n    //region Check that \"timeStampToken\" has a right internal format\n\n    if (this.timeStampToken.contentType !== \"1.2.840.113549.1.7.2\") // Must be a CMS signed data\n      return Promise.reject(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`); //endregion\n    //region Sign internal signed data value\n\n    const signed = new ContentInfo({\n      schema: this.timeStampToken.content\n    });\n    return signed.sign(privateKey, 0, hashAlgorithm); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Verify current TSP Response\r\n   * @param {Object} verificationParameters Input parameters for verification\r\n   * @returns {Promise}\r\n   */\n\n\n  verify(verificationParameters = {\n    signer: 0,\n    trustedCerts: [],\n    data: new ArrayBuffer(0)\n  }) {\n    //region Check that \"timeStampToken\" exists\n    if (\"timeStampToken\" in this === false) return Promise.reject(\"timeStampToken is absent in TSP response\"); //endregion\n    //region Check that \"timeStampToken\" has a right internal format\n\n    if (this.timeStampToken.contentType !== \"1.2.840.113549.1.7.2\") // Must be a CMS signed data\n      return Promise.reject(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`); //endregion\n    //region Verify internal signed data value\n\n    const signed = new SignedData({\n      schema: this.timeStampToken.content\n    });\n    return signed.verify(verificationParameters); //endregion\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/TimeStampResp.js"],"names":["asn1js","getParametersValue","clearProps","PKIStatusInfo","ContentInfo","SignedData","TimeStampResp","constructor","parameters","status","defaultValues","timeStampToken","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","contentType","content","Any","names","Sequence","name","blockName","value","optional","asn1","compareSchema","verified","result","toSchema","outputArray","push","toJSON","_object","sign","privateKey","hashAlgorithm","Promise","reject","signed","verify","verificationParameters","signer","trustedCerts","data","ArrayBuffer"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport PKIStatusInfo from \"./PKIStatusInfo.js\";\r\nimport ContentInfo from \"./ContentInfo.js\";\r\nimport SignedData from \"./SignedData.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class TimeStampResp\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TimeStampResp class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {PKIStatusInfo}\r\n\t\t * @desc status\r\n\t\t */\r\n\t\tthis.status = getParametersValue(parameters, \"status\", TimeStampResp.defaultValues(\"status\"));\r\n\r\n\t\tif(\"timeStampToken\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ContentInfo}\r\n\t\t\t * @desc timeStampToken\r\n\t\t\t */\r\n\t\t\tthis.timeStampToken = getParametersValue(parameters, \"timeStampToken\", TimeStampResp.defaultValues(\"timeStampToken\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn new PKIStatusInfo();\r\n\t\t\tcase \"timeStampToken\":\r\n\t\t\t\treturn new ContentInfo();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampResp class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn ((PKIStatusInfo.compareWithDefault(\"status\", memberValue.status)) &&\r\n\t\t\t\t\t\t((\"statusStrings\" in memberValue) === false) &&\r\n\t\t\t\t\t\t((\"failInfo\" in memberValue) === false));\r\n\t\t\tcase \"timeStampToken\":\r\n\t\t\t\treturn ((memberValue.contentType === \"\") &&\r\n\t\t\t\t\t\t(memberValue.content instanceof asn1js.Any));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampResp class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * TimeStampResp ::= SEQUENCE  {\r\n\t *    status                  PKIStatusInfo,\r\n\t *    timeStampToken          TimeStampToken     OPTIONAL  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [status]\r\n\t\t * @property {string} [timeStampToken]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TimeStampResp\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tPKIStatusInfo.schema(names.status || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TimeStampResp.status\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tContentInfo.schema(names.timeStampToken || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TimeStampResp.timeStampToken\",\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"TimeStampResp.status\",\r\n\t\t\t\"TimeStampResp.timeStampToken\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTimeStampResp.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TimeStampResp\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.status = new PKIStatusInfo({ schema: asn1.result[\"TimeStampResp.status\"] });\r\n\t\tif(\"TimeStampResp.timeStampToken\" in asn1.result)\r\n\t\t\tthis.timeStampToken = new ContentInfo({ schema: asn1.result[\"TimeStampResp.timeStampToken\"] });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.status.toSchema());\r\n\t\tif(\"timeStampToken\" in this)\r\n\t\t\toutputArray.push(this.timeStampToken.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tstatus: this.status\r\n\t\t};\r\n\r\n\t\tif(\"timeStampToken\" in this)\r\n\t\t\t_object.timeStampToken = this.timeStampToken.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Sign current TSP Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm)\r\n\t{\r\n\t\t//region Check that \"timeStampToken\" exists\r\n\t\tif((\"timeStampToken\" in this) === false)\r\n\t\t\treturn Promise.reject(\"timeStampToken is absent in TSP response\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"timeStampToken\" has a right internal format\r\n\t\tif(this.timeStampToken.contentType !== \"1.2.840.113549.1.7.2\") // Must be a CMS signed data\r\n\t\t\treturn Promise.reject(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Sign internal signed data value\r\n\t\tconst signed = new ContentInfo({ schema: this.timeStampToken.content });\r\n\r\n\t\treturn signed.sign(privateKey, 0, hashAlgorithm);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current TSP Response\r\n\t * @param {Object} verificationParameters Input parameters for verification\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(verificationParameters = { signer: 0, trustedCerts: [], data: new ArrayBuffer(0) })\r\n\t{\r\n\t\t//region Check that \"timeStampToken\" exists\r\n\t\tif((\"timeStampToken\" in this) === false)\r\n\t\t\treturn Promise.reject(\"timeStampToken is absent in TSP response\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"timeStampToken\" has a right internal format\r\n\t\tif(this.timeStampToken.contentType !== \"1.2.840.113549.1.7.2\") // Must be a CMS signed data\r\n\t\t\treturn Promise.reject(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Verify internal signed data value\r\n\t\tconst signed = new SignedData({ schema: this.timeStampToken.content });\r\n\r\n\t\treturn signed.verify(verificationParameters);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}