{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nexport default class AlgorithmIdentifier {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for AlgorithmIdentifier class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   * @property {string} [algorithmId] ObjectIdentifier for algorithm (string representation)\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc ObjectIdentifier for algorithm (string representation)\r\n     */\n    this.algorithmId = getParametersValue(parameters, \"algorithmId\", AlgorithmIdentifier.defaultValues(\"algorithmId\"));\n    if (\"algorithmParams\" in parameters)\n      /**\r\n       * @type {Object}\r\n       * @desc Any algorithm parameters\r\n       */\n      this.algorithmParams = getParametersValue(parameters, \"algorithmParams\", AlgorithmIdentifier.defaultValues(\"algorithmParams\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"algorithmId\":\n        return \"\";\n\n      case \"algorithmParams\":\n        return new asn1js.Any();\n\n      default:\n        throw new Error(`Invalid member name for AlgorithmIdentifier class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"algorithmId\":\n        return memberValue === \"\";\n\n      case \"algorithmParams\":\n        return memberValue instanceof asn1js.Any;\n\n      default:\n        throw new Error(`Invalid member name for AlgorithmIdentifier class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * AlgorithmIdentifier  ::=  Sequence  {\r\n   *    algorithm               OBJECT IDENTIFIER,\r\n   *    parameters              ANY DEFINED BY algorithm OPTIONAL  }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} algorithmIdentifier ObjectIdentifier for the algorithm\r\n     * @property {string} algorithmParams Any algorithm parameters\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      optional: names.optional || false,\n      value: [new asn1js.ObjectIdentifier({\n        name: names.algorithmIdentifier || \"\"\n      }), new asn1js.Any({\n        name: names.algorithmParams || \"\",\n        optional: true\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"algorithm\", \"params\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, AlgorithmIdentifier.schema({\n      names: {\n        algorithmIdentifier: \"algorithm\",\n        algorithmParams: \"params\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AlgorithmIdentifier\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.algorithmId = asn1.result.algorithm.valueBlock.toString();\n    if (\"params\" in asn1.result) this.algorithmParams = asn1.result.params; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n    outputArray.push(new asn1js.ObjectIdentifier({\n      value: this.algorithmId\n    }));\n    if (\"algorithmParams\" in this && this.algorithmParams instanceof asn1js.Any === false) outputArray.push(this.algorithmParams); //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const object = {\n      algorithmId: this.algorithmId\n    };\n    if (\"algorithmParams\" in this && this.algorithmParams instanceof asn1js.Any === false) object.algorithmParams = this.algorithmParams.toJSON();\n    return object;\n  } //**********************************************************************************\n\n  /**\r\n   * Check that two \"AlgorithmIdentifiers\" are equal\r\n   * @param {AlgorithmIdentifier} algorithmIdentifier\r\n   * @returns {boolean}\r\n   */\n\n\n  isEqual(algorithmIdentifier) {\n    //region Check input type\n    if (algorithmIdentifier instanceof AlgorithmIdentifier === false) return false; //endregion\n    //region Check \"algorithm_id\"\n\n    if (this.algorithmId !== algorithmIdentifier.algorithmId) return false; //endregion\n    //region Check \"algorithm_params\"\n\n    if (\"algorithmParams\" in this) {\n      if (\"algorithmParams\" in algorithmIdentifier) return JSON.stringify(this.algorithmParams) === JSON.stringify(algorithmIdentifier.algorithmParams);\n      return false;\n    }\n\n    if (\"algorithmParams\" in algorithmIdentifier) return false; //endregion\n\n    return true;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/AlgorithmIdentifier.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","constructor","parameters","algorithmId","defaultValues","algorithmParams","fromSchema","schema","memberName","Any","Error","compareWithDefault","memberValue","names","Sequence","name","blockName","optional","value","ObjectIdentifier","algorithmIdentifier","asn1","compareSchema","verified","result","algorithm","valueBlock","toString","params","toSchema","outputArray","push","toJSON","object","isEqual","JSON","stringify"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AlgorithmIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AlgorithmIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {string} [algorithmId] ObjectIdentifier for algorithm (string representation)\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc ObjectIdentifier for algorithm (string representation)\r\n\t\t */\r\n\t\tthis.algorithmId = getParametersValue(parameters, \"algorithmId\", AlgorithmIdentifier.defaultValues(\"algorithmId\"));\r\n\r\n\t\tif(\"algorithmParams\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Object}\r\n\t\t\t * @desc Any algorithm parameters\r\n\t\t\t */\r\n\t\t\tthis.algorithmParams = getParametersValue(parameters, \"algorithmParams\", AlgorithmIdentifier.defaultValues(\"algorithmParams\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithmId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"algorithmParams\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AlgorithmIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithmId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"algorithmParams\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AlgorithmIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AlgorithmIdentifier  ::=  Sequence  {\r\n\t *    algorithm               OBJECT IDENTIFIER,\r\n\t *    parameters              ANY DEFINED BY algorithm OPTIONAL  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} algorithmIdentifier ObjectIdentifier for the algorithm\r\n\t\t * @property {string} algorithmParams Any algorithm parameters\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: (names.optional || false),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.algorithmIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.algorithmParams || \"\"), optional: true })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"algorithm\",\r\n\t\t\t\"params\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAlgorithmIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\talgorithmIdentifier: \"algorithm\",\r\n\t\t\t\t\talgorithmParams: \"params\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AlgorithmIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.algorithmId = asn1.result.algorithm.valueBlock.toString();\r\n\t\tif(\"params\" in asn1.result)\r\n\t\t\tthis.algorithmParams = asn1.result.params;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.algorithmId }));\r\n\t\tif((\"algorithmParams\" in this) && ((this.algorithmParams instanceof asn1js.Any) === false))\r\n\t\t\toutputArray.push(this.algorithmParams);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\talgorithmId: this.algorithmId\r\n\t\t};\r\n\r\n\t\tif((\"algorithmParams\" in this) && ((this.algorithmParams instanceof asn1js.Any) === false))\r\n\t\t\tobject.algorithmParams = this.algorithmParams.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Check that two \"AlgorithmIdentifiers\" are equal\r\n\t * @param {AlgorithmIdentifier} algorithmIdentifier\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(algorithmIdentifier)\r\n\t{\r\n\t\t//region Check input type\r\n\t\tif((algorithmIdentifier instanceof AlgorithmIdentifier) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Check \"algorithm_id\"\r\n\t\tif(this.algorithmId !== algorithmIdentifier.algorithmId)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Check \"algorithm_params\"\r\n\t\tif(\"algorithmParams\" in this)\r\n\t\t{\r\n\t\t\tif(\"algorithmParams\" in algorithmIdentifier)\r\n\t\t\t\treturn JSON.stringify(this.algorithmParams) === JSON.stringify(algorithmIdentifier.algorithmParams);\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif(\"algorithmParams\" in algorithmIdentifier)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}