{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _constants = require('../constants');\n\nvar PersonalMeetingRoomUtil = {};\n\nPersonalMeetingRoomUtil.getClaimPmrLink = function (pmrLink) {\n  var validator = _constants.VALID_PMR_ADDRESS.test(pmrLink);\n\n  if (validator) {\n    return pmrLink;\n  }\n\n  validator = pmrLink.match(_constants.VALID_PMR_LINK);\n\n  if (validator) {\n    // userId + '@' + site + '.webex.com'\n    return validator[4] + '@' + validator[2] + '.' + _constants.WEBEX_DOT_COM;\n  }\n\n  return null;\n};\n\nPersonalMeetingRoomUtil.getClaimPmrPin = function (hostPin) {\n  if (_constants.VALID_PIN.test(hostPin)) {\n    return hostPin;\n  }\n\n  return null;\n};\n\nPersonalMeetingRoomUtil.getClaimedRequestParams = function (link, pin, options) {\n  return {\n    method: _constants.HTTP_VERBS.POST,\n    api: _constants.HECATE,\n    resource: '/' + _constants.CMR_MEETINGS + '/' + _constants.CLAIM,\n    body: {\n      userId: options.userId,\n      passcode: pin,\n      preferred: options.preferred,\n      meetingAddress: link\n    }\n  };\n};\n\nexports.default = PersonalMeetingRoomUtil;","map":{"version":3,"sources":["util.js"],"names":["PersonalMeetingRoomUtil","validator","VALID_PMR_ADDRESS","pmrLink","VALID_PMR_LINK","WEBEX_DOT_COM","VALID_PIN","method","HTTP_VERBS","api","HECATE","resource","CMR_MEETINGS","CLAIM","body","userId","options","passcode","preferred","meetingAddress","link"],"mappings":";;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAWA,IAAMA,uBAAAA,GAAN,EAAA;;AAEAA,uBAAAA,CAAAA,eAAAA,GAA0C,UAAA,OAAA,EAAa;AACrD,MAAIC,SAAAA,GAAYC,UAAAA,CAAAA,iBAAAA,CAAAA,IAAAA,CAAhB,OAAgBA,CAAhB;;AAEA,MAAA,SAAA,EAAe;AACb,WAAA,OAAA;AACD;;AACDD,EAAAA,SAAAA,GAAYE,OAAAA,CAAAA,KAAAA,CAAcC,UAAAA,CAA1BH,cAAYE,CAAZF;;AACA,MAAA,SAAA,EAAe;AACb;AACA,WAAUA,SAAAA,CAAV,CAAUA,CAAAA,GAAV,GAAUA,GAAgBA,SAAAA,CAA1B,CAA0BA,CAAhBA,GAAV,GAAUA,GAAgCI,UAAAA,CAA1C,aAAA;AACD;;AAED,SAAA,IAAA;AAZFL,CAAAA;;AAeAA,uBAAAA,CAAAA,cAAAA,GAAyC,UAAA,OAAA,EAAa;AACpD,MAAIM,UAAAA,CAAAA,SAAAA,CAAAA,IAAAA,CAAJ,OAAIA,CAAJ,EAA6B;AAC3B,WAAA,OAAA;AACD;;AAED,SAAA,IAAA;AALFN,CAAAA;;AAQAA,uBAAAA,CAAAA,uBAAAA,GAAkD,UAAA,IAAA,EAAA,GAAA,EAAA,OAAA,EAAA;AAAA,SAAyB;AACzEO,IAAAA,MAAAA,EAAQC,UAAAA,CAAAA,UAAAA,CADiE,IAAA;AAEzEC,IAAAA,GAAAA,EAAKC,UAAAA,CAFoE,MAAA;AAGzEC,IAAAA,QAAAA,EAAAA,MAAcC,UAAAA,CAAdD,YAAAA,GAAAA,GAAAA,GAA8BE,UAAAA,CAH2C,KAAA;AAIzEC,IAAAA,IAAAA,EAAM;AACJC,MAAAA,MAAAA,EAAQC,OAAAA,CADJ,MAAA;AAEJC,MAAAA,QAAAA,EAFI,GAAA;AAGJC,MAAAA,SAAAA,EAAWF,OAAAA,CAHP,SAAA;AAIJG,MAAAA,cAAAA,EAAgBC;AAJZ;AAJmE,GAAzB;AAAlDpB,CAAAA;;kBAYeA,uB","sourcesContent":["import {\n  HTTP_VERBS,\n  VALID_PIN,\n  VALID_PMR_ADDRESS,\n  VALID_PMR_LINK,\n  CMR_MEETINGS,\n  CLAIM,\n  HECATE,\n  WEBEX_DOT_COM\n} from '../constants';\n\nconst PersonalMeetingRoomUtil = {};\n\nPersonalMeetingRoomUtil.getClaimPmrLink = (pmrLink) => {\n  let validator = VALID_PMR_ADDRESS.test(pmrLink);\n\n  if (validator) {\n    return pmrLink;\n  }\n  validator = pmrLink.match(VALID_PMR_LINK);\n  if (validator) {\n    // userId + '@' + site + '.webex.com'\n    return `${validator[4]}@${validator[2]}.${WEBEX_DOT_COM}`;\n  }\n\n  return null;\n};\n\nPersonalMeetingRoomUtil.getClaimPmrPin = (hostPin) => {\n  if (VALID_PIN.test(hostPin)) {\n    return hostPin;\n  }\n\n  return null;\n};\n\nPersonalMeetingRoomUtil.getClaimedRequestParams = (link, pin, options) => ({\n  method: HTTP_VERBS.POST,\n  api: HECATE,\n  resource: `/${CMR_MEETINGS}/${CLAIM}`,\n  body: {\n    userId: options.userId,\n    passcode: pin,\n    preferred: options.preferred,\n    meetingAddress: link\n  }\n});\n\nexport default PersonalMeetingRoomUtil;\n"]},"metadata":{},"sourceType":"script"}