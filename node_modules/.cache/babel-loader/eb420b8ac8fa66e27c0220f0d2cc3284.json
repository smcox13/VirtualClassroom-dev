{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralName from \"./GeneralName.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nexport default class GeneralSubtree {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for GeneralSubtree class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {GeneralName}\r\n     * @desc base\r\n     */\n    this.base = getParametersValue(parameters, \"base\", GeneralSubtree.defaultValues(\"base\"));\n    /**\r\n     * @type {number|Integer}\r\n     * @desc base\r\n     */\n\n    this.minimum = getParametersValue(parameters, \"minimum\", GeneralSubtree.defaultValues(\"minimum\"));\n    if (\"maximum\" in parameters)\n      /**\r\n       * @type {number|Integer}\r\n       * @desc minimum\r\n       */\n      this.maximum = getParametersValue(parameters, \"maximum\", GeneralSubtree.defaultValues(\"maximum\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"base\":\n        return new GeneralName();\n\n      case \"minimum\":\n        return 0;\n\n      case \"maximum\":\n        return 0;\n\n      default:\n        throw new Error(`Invalid member name for GeneralSubtree class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * GeneralSubtree ::= SEQUENCE {\r\n   *    base                    GeneralName,\r\n   *    minimum         [0]     BaseDistance DEFAULT 0,\r\n   *    maximum         [1]     BaseDistance OPTIONAL }\r\n   *\r\n   * BaseDistance ::= INTEGER (0..MAX)\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [base]\r\n     * @property {string} [minimum]\r\n     * @property {string} [maximum]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [GeneralName.schema(names.base || {}), new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [new asn1js.Integer({\n          name: names.minimum || \"\"\n        })]\n      }), new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: [new asn1js.Integer({\n          name: names.maximum || \"\"\n        })]\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"base\", \"minimum\", \"maximum\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, GeneralSubtree.schema({\n      names: {\n        base: {\n          names: {\n            blockName: \"base\"\n          }\n        },\n        minimum: \"minimum\",\n        maximum: \"maximum\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for GeneralSubtree\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.base = new GeneralName({\n      schema: asn1.result.base\n    });\n\n    if (\"minimum\" in asn1.result) {\n      if (asn1.result.minimum.valueBlock.isHexOnly) this.minimum = asn1.result.minimum;else this.minimum = asn1.result.minimum.valueBlock.valueDec;\n    }\n\n    if (\"maximum\" in asn1.result) {\n      if (asn1.result.maximum.valueBlock.isHexOnly) this.maximum = asn1.result.maximum;else this.maximum = asn1.result.maximum.valueBlock.valueDec;\n    } //endregion\n\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n    outputArray.push(this.base.toSchema());\n\n    if (this.minimum !== 0) {\n      let valueMinimum = 0;\n      if (this.minimum instanceof asn1js.Integer) valueMinimum = this.minimum;else valueMinimum = new asn1js.Integer({\n        value: this.minimum\n      });\n      outputArray.push(new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [valueMinimum]\n      }));\n    }\n\n    if (\"maximum\" in this) {\n      let valueMaximum = 0;\n      if (this.maximum instanceof asn1js.Integer) valueMaximum = this.maximum;else valueMaximum = new asn1js.Integer({\n        value: this.maximum\n      });\n      outputArray.push(new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: [valueMaximum]\n      }));\n    } //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const object = {\n      base: this.base.toJSON()\n    };\n\n    if (this.minimum !== 0) {\n      if (typeof this.minimum === \"number\") object.minimum = this.minimum;else object.minimum = this.minimum.toJSON();\n    }\n\n    if (\"maximum\" in this) {\n      if (typeof this.maximum === \"number\") object.maximum = this.maximum;else object.maximum = this.maximum.toJSON();\n    }\n\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/GeneralSubtree.js"],"names":["asn1js","getParametersValue","clearProps","GeneralName","GeneralSubtree","constructor","parameters","base","defaultValues","minimum","maximum","fromSchema","schema","memberName","Error","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Integer","asn1","compareSchema","verified","result","valueBlock","isHexOnly","valueDec","toSchema","outputArray","push","valueMinimum","valueMaximum","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class GeneralSubtree\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for GeneralSubtree class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {GeneralName}\r\n\t\t * @desc base\r\n\t\t */\r\n\t\tthis.base = getParametersValue(parameters, \"base\", GeneralSubtree.defaultValues(\"base\"));\r\n\r\n\t\t/**\r\n\t\t * @type {number|Integer}\r\n\t\t * @desc base\r\n\t\t */\r\n\t\tthis.minimum = getParametersValue(parameters, \"minimum\", GeneralSubtree.defaultValues(\"minimum\"));\r\n\r\n\t\tif(\"maximum\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number|Integer}\r\n\t\t\t * @desc minimum\r\n\t\t\t */\r\n\t\t\tthis.maximum = getParametersValue(parameters, \"maximum\", GeneralSubtree.defaultValues(\"maximum\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"base\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tcase \"minimum\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"maximum\":\r\n\t\t\t\treturn 0;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for GeneralSubtree class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * GeneralSubtree ::= SEQUENCE {\r\n\t *    base                    GeneralName,\r\n\t *    minimum         [0]     BaseDistance DEFAULT 0,\r\n\t *    maximum         [1]     BaseDistance OPTIONAL }\r\n\t *\r\n\t * BaseDistance ::= INTEGER (0..MAX)\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [base]\r\n\t\t * @property {string} [minimum]\r\n\t\t * @property {string} [maximum]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tGeneralName.schema(names.base || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.minimum || \"\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.maximum || \"\") })]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"base\",\r\n\t\t\t\"minimum\",\r\n\t\t\t\"maximum\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tGeneralSubtree.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tbase: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"base\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tminimum: \"minimum\",\r\n\t\t\t\t\tmaximum: \"maximum\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for GeneralSubtree\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.base = new GeneralName({ schema: asn1.result.base });\r\n\r\n\t\tif(\"minimum\" in asn1.result)\r\n\t\t{\r\n\t\t\tif(asn1.result.minimum.valueBlock.isHexOnly)\r\n\t\t\t\tthis.minimum = asn1.result.minimum;\r\n\t\t\telse\r\n\t\t\t\tthis.minimum = asn1.result.minimum.valueBlock.valueDec;\r\n\t\t}\r\n\r\n\t\tif(\"maximum\" in asn1.result)\r\n\t\t{\r\n\t\t\tif(asn1.result.maximum.valueBlock.isHexOnly)\r\n\t\t\t\tthis.maximum = asn1.result.maximum;\r\n\t\t\telse\r\n\t\t\t\tthis.maximum = asn1.result.maximum.valueBlock.valueDec;\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.base.toSchema());\r\n\t\t\r\n\t\tif(this.minimum !== 0)\r\n\t\t{\r\n\t\t\tlet valueMinimum = 0;\r\n\t\t\t\r\n\t\t\tif(this.minimum instanceof asn1js.Integer)\r\n\t\t\t\tvalueMinimum = this.minimum;\r\n\t\t\telse\r\n\t\t\t\tvalueMinimum = new asn1js.Integer({ value: this.minimum });\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [valueMinimum]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"maximum\" in this)\r\n\t\t{\r\n\t\t\tlet valueMaximum = 0;\r\n\t\t\t\r\n\t\t\tif(this.maximum instanceof asn1js.Integer)\r\n\t\t\t\tvalueMaximum = this.maximum;\r\n\t\t\telse\r\n\t\t\t\tvalueMaximum = new asn1js.Integer({ value: this.maximum });\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [valueMaximum]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tbase: this.base.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(this.minimum !== 0)\r\n\t\t{\r\n\t\t\tif((typeof this.minimum) === \"number\")\r\n\t\t\t\tobject.minimum = this.minimum;\r\n\t\t\telse\r\n\t\t\t\tobject.minimum = this.minimum.toJSON();\r\n\t\t}\r\n\t\t\r\n\t\tif(\"maximum\" in this)\r\n\t\t{\r\n\t\t\tif((typeof this.maximum) === \"number\")\r\n\t\t\t\tobject.maximum = this.maximum;\r\n\t\t\telse\r\n\t\t\t\tobject.maximum = this.maximum.toJSON();\r\n\t\t}\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}