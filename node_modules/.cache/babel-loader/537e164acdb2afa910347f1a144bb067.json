{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _loggerProxy = require('../common/logs/logger-proxy');\n\nvar _loggerProxy2 = _interopRequireDefault(_loggerProxy);\n\nvar _constants = require('../constants');\n\nvar _util = require('../roap/util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _collection = require('../roap/collection');\n\nvar _collection2 = _interopRequireDefault(_collection);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar checkForAndHandleErrors = function checkForAndHandleErrors(action, meeting, correlationId) {\n  if (action && action.type) {\n    if (action.msg && action.msg.messageType && action.msg.errorType) {\n      if (_util2.default.findError(action.msg.messageType, action.msg.errorType, action.type)) {\n        _util2.default.handleError(meeting.mediaProperties.peerConnection).then(function (res) {\n          if (res) {\n            _collection2.default.deleteSessionSequence(correlationId, action.msg.seq);\n          }\n        }).catch(function (err) {\n          _loggerProxy2.default.logger.warn('RoapHandler->checkForAndHandleErrors#Cannot reset the peer connection with error: ' + err);\n        });\n\n        return true;\n      }\n    }\n\n    if (!_util2.default.ensureMeeting(meeting, action.type)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/* no-param-reassign */\n\n\nvar handleSessionStep = function handleSessionStep(roap, session) {\n  var _roap$msg = roap.msg,\n      sequenceId = _roap$msg.seq,\n      messageType = _roap$msg.messageType;\n\n  if (session.OFFER && messageType === _constants._OFFER_) {\n    session.GLARE_OFFER = roap.msg;\n    session.GLARE_OFFER.remote = !!roap.remote;\n\n    _loggerProxy2.default.logger.warn('RoapHandler->handleSessionStep#Glare condition occurred with new mercury event, sequenceId: ' + sequenceId);\n  } else {\n    _loggerProxy2.default.logger.info('RoapHandler->handleSessionStep#Save OFFER/ANSWER seq:' + sequenceId + ' new mercury event ' + messageType + 'local state: ' + (0, _stringify2.default)(session.state.state, null, 2));\n\n    session[messageType] = roap.msg;\n    session[messageType].remote = !!roap.remote;\n  }\n};\n/**\n * @class RoapHandler\n */\n\n\nvar RoapHandler = function (_StatelessWebexPlugin) {\n  (0, _inherits3.default)(RoapHandler, _StatelessWebexPlugin);\n\n  function RoapHandler(attrs, options, roapOk, roapAnswer) {\n    (0, _classCallCheck3.default)(this, RoapHandler);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (RoapHandler.__proto__ || (0, _getPrototypeOf2.default)(RoapHandler)).call(this, {}, options));\n\n    _this.attrs = attrs;\n    _this.options = options;\n    _this.roapOk = roapOk;\n    _this.roapAnswer = roapAnswer;\n    return _this;\n  }\n  /**\n   *\n   * @param {Object} session\n   * @param {Meeting} meeting\n   * @param {Object} action\n   * @returns {null}\n   */\n\n\n  (0, _createClass3.default)(RoapHandler, [{\n    key: 'perform',\n    value: function perform(session, meeting, action) {\n      var _this2 = this;\n\n      switch (session.state.state) {\n        // case ROAP.ROAP_STATE.INIT:\n        // case ROAP.ROAP_STATE.WAIT_RX_OFFER:\n        // case ROAP.ROAP_STATE.WAIT_RX_ANSWER:\n        // case ROAP.ROAP_STATE.WAIT_RX_OK:\n        case _constants.ROAP.ROAP_STATE.WAIT_TX_ANSWER:\n          // eslint-disable-next-line no-warning-comments\n          // TODO: sometime the you get an answer while you are creating an offer so SKIP\n          // Server will send the mercury event comes back\n          if (_util2.default.shouldHandleMedia(meeting)) {\n            _util2.default.updatePeerConnection(meeting, session).then(function (answerSdps) {\n              _this2.roapAnswer({\n                locusId: meeting.locusId,\n                locusSelfId: meeting.locusInfo.self.id,\n                mediaId: meeting.mediaId,\n                sdps: answerSdps,\n                seq: session.OFFER.seq,\n                correlationId: meeting.correlationId,\n                audioMuted: meeting.isAudioMuted(),\n                videoMuted: meeting.isVideoMuted()\n              });\n            }).catch(function (err) {\n              _loggerProxy2.default.logger.error('RoapHandler->perform#Error occured during wait receive answer, continuing, ' + err);\n            });\n          }\n\n          break;\n\n        case _constants.ROAP.ROAP_STATE.WAIT_TX_OK:\n          if (!_util2.default.shouldHandleMedia(meeting)) {\n            _util2.default.setRemoteDescription(meeting, session).then(function (res) {\n              _this2.roapOk(res);\n            });\n          }\n\n          break;\n        // case ROAP.ROAP_STATE.IDLE_LOCAL_OFFER:\n\n        case _constants.ROAP.ROAP_STATE.ERROR:\n          _loggerProxy2.default.logger.error('RoapHandler->perform#Roap State ERROR for session: ' + session);\n\n          break;\n\n        case _constants.ROAP.ROAP_STATE.GLARE:\n          session.GLARE_OFFER.tieBreaker = session.GLARE_OFFER.tieBreaker || 0;\n          session.OFFER.tieBreaker = session.OFFER.tieBreaker || 0;\n\n          _loggerProxy2.default.logger.warn('RoapHandler->perform#Roap State resolved the GLARE condition.');\n\n          if (session.GLARE_OFFER.tieBreaker < session.OFFER.tieBreaker) {\n            // 2\n            _loggerProxy2.default.logger.log('RoapHandler->perform#Roap State local offer won after GLARE.');\n          } else {\n            _loggerProxy2.default.logger.log('RoapHandler->perform#Roap State remote offer won after GLARE.');\n          }\n\n          session.state.step(_constants.ROAP.ROAP_SIGNAL.GLARE_RESOLVED, meeting, action);\n          this.perform(session, meeting);\n          break;\n\n        default:\n          break;\n      }\n    }\n    /**\n     *\n     * @param {String} signal\n     * @param {Object} session\n     * @param {Object} action\n     * @param {Meeting} meeting\n     * @param {String} prefix\n     * @returns {null}\n     */\n\n  }, {\n    key: 'execute',\n    value: function execute(signal, session, action, meeting, prefix) {\n      if (session && session.state) {\n        handleSessionStep(action, session);\n        signal = _constants.ROAP.ROAP_SIGNAL['' + prefix + action.msg.messageType];\n        session.state.step(signal, meeting, action);\n        this.perform(session, meeting, action);\n      }\n    }\n    /**\n     *\n     * @param {Object} session\n     * @param {Object} action\n     * @param {Meeting} meeting\n     * @param {String} correlationId\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'handleAction',\n    value: function handleAction(session, action, meeting, correlationId) {\n      var signal = void 0;\n\n      switch (action.type) {\n        case _constants.ROAP.RECEIVE_ROAP_MSG:\n          action.remote = true;\n          this.execute(signal, session, action, meeting, _constants.ROAP.RX_);\n          break;\n\n        case _constants.ROAP.SEND_ROAP_MSG:\n          action.local = true;\n          this.execute(signal, session, action, meeting, _constants.ROAP.TX_);\n          break;\n\n        case _constants.ROAP.SEND_ROAP_MSG_SUCCESS:\n          // This means we got and answer and waiting for 200 ok for /participants\n          if (_collection2.default.getSessionSequence(correlationId, action.seq).ANSWER) {\n            signal = _constants.ROAP.ROAP_SIGNAL.RX_ANSWER; // NOTE: When server send back an answer via mercury the\n            // remote SDP is already saved sent and ok message is sent back\n            // We dont have to indicate the roapHandler about the RX_ANSWER via SEND_ROAP_MSG_SUCCESS\n            // RoapHandler.transition(signal, session, meeting);\n          }\n\n          break;\n\n        case _constants.ROAP.RECEIVE_CALL_LEAVE:\n          _collection2.default.deleteSession(correlationId);\n\n          _loggerProxy2.default.logger.log('RoapHandler->handleAction#RECEIVE_CALL_LEAVE event captured, cleaning up the RoapHandler for correlationId: ' + correlationId);\n\n          break;\n\n        case _constants.ROAP.RESET_ROAP_STATE:\n          _collection2.default.deleteSessionSequence(correlationId, action.msg.seq);\n\n          _loggerProxy2.default.logger.log('RoapHandler->handleAction#RESET_ROAP_STATE event captured, resetting the RoapHandler state based on sequenceId: ' + action.msg.seq);\n\n          break;\n\n        default:\n          return true;\n      }\n\n      return true;\n    }\n    /**\n     *\n     * @param {Object} action\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'submit',\n    value: function submit(action) {\n      var correlationId = action.correlationId;\n      var seq = action.seq;\n\n      if (!seq && action.msg) {\n        seq = action.msg.seq;\n      }\n\n      var session = _collection2.default.getSessionSequence(correlationId, seq);\n\n      var meeting = this.webex.meetings.meetingCollection.get(correlationId);\n\n      if (checkForAndHandleErrors(action, meeting, correlationId)) {\n        return true;\n      }\n\n      return this.handleAction(session, action, meeting, correlationId);\n    }\n  }]);\n  return RoapHandler;\n}(_webexCore.StatelessWebexPlugin);\n\nexports.default = RoapHandler;","map":{"version":3,"sources":["handler.js"],"names":["checkForAndHandleErrors","action","RoapUtil","meeting","RoapCollection","LoggerProxy","handleSessionStep","sequenceId","messageType","roap","session","_OFFER_","RoapHandler","StatelessWebexPlugin","ROAP","locusId","locusSelfId","mediaId","sdps","seq","correlationId","audioMuted","videoMuted","signal","prefix"],"mappings":"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","sourcesContent":["/* no-param-reassign */\nimport {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {ROAP, _OFFER_} from '../constants';\nimport RoapUtil from '../roap/util';\nimport RoapCollection from '../roap/collection';\n\nconst checkForAndHandleErrors = (action, meeting, correlationId) => {\n  if (action && action.type) {\n    if (action.msg && action.msg.messageType && action.msg.errorType) {\n      if (RoapUtil.findError(action.msg.messageType, action.msg.errorType, action.type)) {\n        RoapUtil.handleError(meeting.mediaProperties.peerConnection)\n          .then((res) => {\n            if (res) {\n              RoapCollection.deleteSessionSequence(correlationId, action.msg.seq);\n            }\n          })\n          .catch((err) => {\n            LoggerProxy.logger.warn(`RoapHandler->checkForAndHandleErrors#Cannot reset the peer connection with error: ${err}`);\n          });\n\n        return true;\n      }\n    }\n    if (!RoapUtil.ensureMeeting(meeting, action.type)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst handleSessionStep = (roap, session) => {\n  const {seq: sequenceId, messageType} = roap.msg;\n\n  if (session.OFFER && messageType === _OFFER_) {\n    session.GLARE_OFFER = roap.msg;\n    session.GLARE_OFFER.remote = !!roap.remote;\n    LoggerProxy.logger.warn(`RoapHandler->handleSessionStep#Glare condition occurred with new mercury event, sequenceId: ${sequenceId}`);\n  }\n  else {\n    LoggerProxy.logger.info(`RoapHandler->handleSessionStep#Save OFFER/ANSWER seq:${sequenceId} new mercury event ${messageType}local state: ${JSON.stringify(session.state.state, null, 2)}`);\n    session[messageType] = roap.msg;\n    session[messageType].remote = !!roap.remote;\n  }\n};\n\n/**\n * @class RoapHandler\n */\nexport default class RoapHandler extends StatelessWebexPlugin {\n  constructor(attrs, options, roapOk, roapAnswer) {\n    super({}, options);\n    this.attrs = attrs;\n    this.options = options;\n    this.roapOk = roapOk;\n    this.roapAnswer = roapAnswer;\n  }\n\n  /**\n   *\n   * @param {Object} session\n   * @param {Meeting} meeting\n   * @param {Object} action\n   * @returns {null}\n   */\n  perform(session, meeting, action) {\n    switch (session.state.state) {\n      // case ROAP.ROAP_STATE.INIT:\n      // case ROAP.ROAP_STATE.WAIT_RX_OFFER:\n      // case ROAP.ROAP_STATE.WAIT_RX_ANSWER:\n      // case ROAP.ROAP_STATE.WAIT_RX_OK:\n      case ROAP.ROAP_STATE.WAIT_TX_ANSWER:\n        // eslint-disable-next-line no-warning-comments\n        // TODO: sometime the you get an answer while you are creating an offer so SKIP\n        // Server will send the mercury event comes back\n        if (RoapUtil.shouldHandleMedia(meeting)) {\n          RoapUtil.updatePeerConnection(meeting, session)\n            .then((answerSdps) => {\n              this.roapAnswer({\n                locusId: meeting.locusId,\n                locusSelfId: meeting.locusInfo.self.id,\n                mediaId: meeting.mediaId,\n                sdps: answerSdps,\n                seq: session.OFFER.seq,\n                correlationId: meeting.correlationId,\n                audioMuted: meeting.isAudioMuted(),\n                videoMuted: meeting.isVideoMuted()\n              });\n            })\n            .catch((err) => {\n              LoggerProxy.logger.error(`RoapHandler->perform#Error occured during wait receive answer, continuing, ${err}`);\n            });\n        }\n        break;\n      case ROAP.ROAP_STATE.WAIT_TX_OK:\n        if (!RoapUtil.shouldHandleMedia(meeting)) {\n          RoapUtil.setRemoteDescription(meeting, session).then((res) => {\n            this.roapOk(res);\n          });\n        }\n        break;\n      // case ROAP.ROAP_STATE.IDLE_LOCAL_OFFER:\n      case ROAP.ROAP_STATE.ERROR:\n        LoggerProxy.logger.error(`RoapHandler->perform#Roap State ERROR for session: ${session}`);\n        break;\n      case ROAP.ROAP_STATE.GLARE:\n        session.GLARE_OFFER.tieBreaker = session.GLARE_OFFER.tieBreaker || 0;\n        session.OFFER.tieBreaker = session.OFFER.tieBreaker || 0;\n        LoggerProxy.logger.warn('RoapHandler->perform#Roap State resolved the GLARE condition.');\n        if (session.GLARE_OFFER.tieBreaker < session.OFFER.tieBreaker) {\n          // 2\n          LoggerProxy.logger.log('RoapHandler->perform#Roap State local offer won after GLARE.');\n        }\n        else {\n          LoggerProxy.logger.log('RoapHandler->perform#Roap State remote offer won after GLARE.');\n        }\n        session.state.step(ROAP.ROAP_SIGNAL.GLARE_RESOLVED, meeting, action);\n        this.perform(session, meeting);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   *\n   * @param {String} signal\n   * @param {Object} session\n   * @param {Object} action\n   * @param {Meeting} meeting\n   * @param {String} prefix\n   * @returns {null}\n   */\n  execute(signal, session, action, meeting, prefix) {\n    if (session && session.state) {\n      handleSessionStep(action, session);\n      signal = ROAP.ROAP_SIGNAL[`${prefix}${action.msg.messageType}`];\n      session.state.step(signal, meeting, action);\n      this.perform(session, meeting, action);\n    }\n  }\n\n  /**\n   *\n   * @param {Object} session\n   * @param {Object} action\n   * @param {Meeting} meeting\n   * @param {String} correlationId\n   * @returns {Boolean}\n   */\n  handleAction(session, action, meeting, correlationId) {\n    let signal;\n\n    switch (action.type) {\n      case ROAP.RECEIVE_ROAP_MSG:\n        action.remote = true;\n        this.execute(signal, session, action, meeting, ROAP.RX_);\n        break;\n      case ROAP.SEND_ROAP_MSG:\n        action.local = true;\n        this.execute(signal, session, action, meeting, ROAP.TX_);\n        break;\n      case ROAP.SEND_ROAP_MSG_SUCCESS:\n        // This means we got and answer and waiting for 200 ok for /participants\n        if (RoapCollection.getSessionSequence(correlationId, action.seq).ANSWER) {\n          signal = ROAP.ROAP_SIGNAL.RX_ANSWER;\n          // NOTE: When server send back an answer via mercury the\n          // remote SDP is already saved sent and ok message is sent back\n          // We dont have to indicate the roapHandler about the RX_ANSWER via SEND_ROAP_MSG_SUCCESS\n          // RoapHandler.transition(signal, session, meeting);\n        }\n        break;\n      case ROAP.RECEIVE_CALL_LEAVE:\n        RoapCollection.deleteSession(correlationId);\n        LoggerProxy.logger.log(`RoapHandler->handleAction#RECEIVE_CALL_LEAVE event captured, cleaning up the RoapHandler for correlationId: ${correlationId}`); break;\n      case ROAP.RESET_ROAP_STATE:\n        RoapCollection.deleteSessionSequence(correlationId, action.msg.seq);\n        LoggerProxy.logger.log(`RoapHandler->handleAction#RESET_ROAP_STATE event captured, resetting the RoapHandler state based on sequenceId: ${action.msg.seq}`); break;\n      default:\n        return true;\n    }\n\n    return true;\n  }\n\n  /**\n   *\n   * @param {Object} action\n   * @returns {Boolean}\n   */\n  submit(action) {\n    const {correlationId} = action;\n    let {seq} = action;\n\n    if (!seq && action.msg) {\n      seq = action.msg.seq;\n    }\n    const session = RoapCollection.getSessionSequence(correlationId, seq);\n    const meeting = this.webex.meetings.meetingCollection.get(correlationId);\n\n    if (checkForAndHandleErrors(action, meeting, correlationId)) {\n      return true;\n    }\n\n    return this.handleAction(session, action, meeting, correlationId);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}