{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport Certificate from \"./Certificate.js\";\nimport AttributeCertificateV2 from \"./AttributeCertificateV2.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC7292\r\n */\n\nexport default class CertBag {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for CertBag class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc certId\r\n     */\n    this.certId = getParametersValue(parameters, \"certId\", CertBag.defaultValues(\"certId\"));\n    /**\r\n     * @type {*}\r\n     * @desc certValue\r\n     */\n\n    this.certValue = getParametersValue(parameters, \"certValue\", CertBag.defaultValues(\"certValue\"));\n    if (\"parsedValue\" in parameters)\n      /**\r\n       * @type {*}\r\n       * @desc parsedValue\r\n       */\n      this.parsedValue = getParametersValue(parameters, \"parsedValue\", CertBag.defaultValues(\"parsedValue\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"certId\":\n        return \"\";\n\n      case \"certValue\":\n        return new asn1js.Any();\n\n      case \"parsedValue\":\n        return {};\n\n      default:\n        throw new Error(`Invalid member name for CertBag class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"certId\":\n        return memberValue === \"\";\n\n      case \"certValue\":\n        return memberValue instanceof asn1js.Any;\n\n      case \"parsedValue\":\n        return memberValue instanceof Object && Object.keys(memberValue).length === 0;\n\n      default:\n        throw new Error(`Invalid member name for CertBag class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * CertBag ::= SEQUENCE {\r\n   *    certId    BAG-TYPE.&id   ({CertTypes}),\r\n   *    certValue [0] EXPLICIT BAG-TYPE.&Type ({CertTypes}{@certId})\r\n   * }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [id]\r\n     * @property {string} [value]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.ObjectIdentifier({\n        name: names.id || \"id\"\n      }), new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [new asn1js.Any({\n          name: names.value || \"value\"\n        })] // EXPLICIT ANY value\n\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"certId\", \"certValue\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, CertBag.schema({\n      names: {\n        id: \"certId\",\n        value: \"certValue\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for CertBag\"); //endregion \n    //region Get internal properties from parsed schema \n\n    this.certId = asn1.result.certId.valueBlock.toString();\n    this.certValue = asn1.result.certValue;\n\n    switch (this.certId) {\n      case \"1.2.840.113549.1.9.22.1\":\n        // x509Certificate\n        {\n          const asn1Inner = asn1js.fromBER(this.certValue.valueBlock.valueHex);\n\n          try {\n            this.parsedValue = new Certificate({\n              schema: asn1Inner.result\n            });\n          } catch (ex) // In some realizations the same OID used for attribute certificates\n          {\n            this.parsedValue = new AttributeCertificateV2({\n              schema: asn1Inner.result\n            });\n          }\n        }\n        break;\n\n      case \"1.2.840.113549.1.9.22.3\":\n        // attributeCertificate - (!!!) THIS OID IS SUBJECT FOR CHANGE IN FUTURE (!!!)\n        {\n          const asn1Inner = asn1js.fromBER(this.certValue.valueBlock.valueHex);\n          this.parsedValue = new AttributeCertificateV2({\n            schema: asn1Inner.result\n          });\n        }\n        break;\n\n      case \"1.2.840.113549.1.9.22.2\": // sdsiCertificate\n\n      default:\n        throw new Error(`Incorrect \"certId\" value in CertBag: ${this.certId}`);\n    } //endregion \n\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    if (\"parsedValue\" in this) {\n      if (\"acinfo\" in this.parsedValue) // attributeCertificate\n        this.certId = \"1.2.840.113549.1.9.22.3\";else // x509Certificate\n        this.certId = \"1.2.840.113549.1.9.22.1\";\n      this.certValue = new asn1js.OctetString({\n        valueHex: this.parsedValue.toSchema().toBER(false)\n      });\n    }\n\n    return new asn1js.Sequence({\n      value: [new asn1js.ObjectIdentifier({\n        value: this.certId\n      }), new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [\"toSchema\" in this.certValue ? this.certValue.toSchema() : this.certValue]\n      })]\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      certId: this.certId,\n      certValue: this.certValue.toJSON()\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/CertBag.js"],"names":["asn1js","getParametersValue","clearProps","Certificate","AttributeCertificateV2","CertBag","constructor","parameters","certId","defaultValues","certValue","parsedValue","fromSchema","schema","memberName","Any","Error","compareWithDefault","memberValue","Object","keys","length","names","Sequence","name","blockName","value","ObjectIdentifier","id","Constructed","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","valueBlock","toString","asn1Inner","fromBER","valueHex","ex","toSchema","OctetString","toBER","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport AttributeCertificateV2 from \"./AttributeCertificateV2.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class CertBag\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc certId\r\n\t\t */\r\n\t\tthis.certId = getParametersValue(parameters, \"certId\", CertBag.defaultValues(\"certId\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @desc certValue\r\n\t\t */\r\n\t\tthis.certValue = getParametersValue(parameters, \"certValue\", CertBag.defaultValues(\"certValue\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", CertBag.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"certValue\":\r\n\t\t\t\treturn (new asn1js.Any());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"certValue\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CertBag ::= SEQUENCE {\r\n\t *    certId    BAG-TYPE.&id   ({CertTypes}),\r\n\t *    certValue [0] EXPLICIT BAG-TYPE.&Type ({CertTypes}{@certId})\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [id]\r\n\t\t * @property {string} [value]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.value || \"value\") })] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"certId\",\r\n\t\t\t\"certValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tid: \"certId\",\r\n\t\t\t\t\tvalue: \"certValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertBag\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Get internal properties from parsed schema \r\n\t\tthis.certId = asn1.result.certId.valueBlock.toString();\r\n\t\tthis.certValue = asn1.result.certValue;\r\n\t\t\r\n\t\tswitch(this.certId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.9.22.1\": // x509Certificate\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1Inner = asn1js.fromBER(this.certValue.valueBlock.valueHex);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.parsedValue = new Certificate({ schema: asn1Inner.result });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex) // In some realizations the same OID used for attribute certificates\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.parsedValue = new AttributeCertificateV2({ schema: asn1Inner.result });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.9.22.3\": // attributeCertificate - (!!!) THIS OID IS SUBJECT FOR CHANGE IN FUTURE (!!!)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1Inner = asn1js.fromBER(this.certValue.valueBlock.valueHex);\r\n\t\t\t\t\tthis.parsedValue = new AttributeCertificateV2({ schema: asn1Inner.result });\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.9.22.2\": // sdsiCertificate\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Incorrect \"certId\" value in CertBag: ${this.certId}`);\r\n\t\t}\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tif(\"parsedValue\" in this)\r\n\t\t{\r\n\t\t\tif(\"acinfo\" in this.parsedValue) // attributeCertificate\r\n\t\t\t\tthis.certId = \"1.2.840.113549.1.9.22.3\";\r\n\t\t\telse // x509Certificate\r\n\t\t\t\tthis.certId = \"1.2.840.113549.1.9.22.1\";\r\n\r\n\t\t\tthis.certValue = new asn1js.OctetString({ valueHex: this.parsedValue.toSchema().toBER(false) });\r\n\t\t}\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.certId }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [((\"toSchema\" in this.certValue) ? this.certValue.toSchema() : this.certValue)]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcertId: this.certId,\r\n\t\t\tcertValue: this.certValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}