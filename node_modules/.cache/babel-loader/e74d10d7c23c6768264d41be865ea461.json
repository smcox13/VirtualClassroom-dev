{"ast":null,"code":"var assign = require('lodash/assign'); /// Following code is largely pasted from Backbone.js\n// Helper function to correctly set up the prototype chain, for subclasses.\n// Similar to `goog.inherits`, but uses a hash of prototype properties and\n// class properties to be extended.\n\n\nvar extend = function (protoProps) {\n  var parent = this;\n  var child;\n  var args = [].slice.call(arguments); // The constructor function for the new subclass is either defined by you\n  // (the \"constructor\" property in your `extend` definition), or defaulted\n  // by us to simply call the parent's constructor.\n\n  if (protoProps && protoProps.hasOwnProperty('constructor')) {\n    child = protoProps.constructor;\n  } else {\n    child = function () {\n      return parent.apply(this, arguments);\n    };\n  } // Add static properties to the constructor function from parent\n\n\n  assign(child, parent); // Set the prototype chain to inherit from `parent`, without calling\n  // `parent`'s constructor function.\n\n  var Surrogate = function () {\n    this.constructor = child;\n  };\n\n  Surrogate.prototype = parent.prototype;\n  child.prototype = new Surrogate(); // Mix in all prototype properties to the subclass if supplied.\n\n  if (protoProps) {\n    args.unshift(child.prototype);\n    assign.apply(null, args);\n  } // Set a convenience property in case the parent's prototype is needed\n  // later.\n\n\n  child.__super__ = parent.prototype;\n  return child;\n}; // Expose the extend function\n\n\nmodule.exports = extend;","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/ampersand-class-extend/ampersand-class-extend.js"],"names":["assign","require","extend","protoProps","parent","child","args","slice","call","arguments","hasOwnProperty","constructor","apply","Surrogate","prototype","unshift","__super__","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,eAAD,CAApB,C,CAEA;AAEA;AACA;AACA;;;AACA,IAAIC,MAAM,GAAG,UAASC,UAAT,EAAqB;AAC9B,MAAIC,MAAM,GAAG,IAAb;AACA,MAAIC,KAAJ;AACA,MAAIC,IAAI,GAAG,GAAGC,KAAH,CAASC,IAAT,CAAcC,SAAd,CAAX,CAH8B,CAK9B;AACA;AACA;;AACA,MAAIN,UAAU,IAAIA,UAAU,CAACO,cAAX,CAA0B,aAA1B,CAAlB,EAA4D;AACxDL,IAAAA,KAAK,GAAGF,UAAU,CAACQ,WAAnB;AACH,GAFD,MAEO;AACHN,IAAAA,KAAK,GAAG,YAAY;AAChB,aAAOD,MAAM,CAACQ,KAAP,CAAa,IAAb,EAAmBH,SAAnB,CAAP;AACH,KAFD;AAGH,GAd6B,CAgB9B;;;AACAT,EAAAA,MAAM,CAACK,KAAD,EAAQD,MAAR,CAAN,CAjB8B,CAmB9B;AACA;;AACA,MAAIS,SAAS,GAAG,YAAU;AAAE,SAAKF,WAAL,GAAmBN,KAAnB;AAA2B,GAAvD;;AACAQ,EAAAA,SAAS,CAACC,SAAV,GAAsBV,MAAM,CAACU,SAA7B;AACAT,EAAAA,KAAK,CAACS,SAAN,GAAkB,IAAID,SAAJ,EAAlB,CAvB8B,CAyB9B;;AACA,MAAIV,UAAJ,EAAgB;AACZG,IAAAA,IAAI,CAACS,OAAL,CAAaV,KAAK,CAACS,SAAnB;AACAd,IAAAA,MAAM,CAACY,KAAP,CAAa,IAAb,EAAmBN,IAAnB;AACH,GA7B6B,CA+B9B;AACA;;;AACAD,EAAAA,KAAK,CAACW,SAAN,GAAkBZ,MAAM,CAACU,SAAzB;AAEA,SAAOT,KAAP;AACH,CApCD,C,CAsCA;;;AACAY,MAAM,CAACC,OAAP,GAAiBhB,MAAjB","sourcesContent":["var assign = require('lodash/assign');\n\n/// Following code is largely pasted from Backbone.js\n\n// Helper function to correctly set up the prototype chain, for subclasses.\n// Similar to `goog.inherits`, but uses a hash of prototype properties and\n// class properties to be extended.\nvar extend = function(protoProps) {\n    var parent = this;\n    var child;\n    var args = [].slice.call(arguments);\n\n    // The constructor function for the new subclass is either defined by you\n    // (the \"constructor\" property in your `extend` definition), or defaulted\n    // by us to simply call the parent's constructor.\n    if (protoProps && protoProps.hasOwnProperty('constructor')) {\n        child = protoProps.constructor;\n    } else {\n        child = function () {\n            return parent.apply(this, arguments);\n        };\n    }\n\n    // Add static properties to the constructor function from parent\n    assign(child, parent);\n\n    // Set the prototype chain to inherit from `parent`, without calling\n    // `parent`'s constructor function.\n    var Surrogate = function(){ this.constructor = child; };\n    Surrogate.prototype = parent.prototype;\n    child.prototype = new Surrogate();\n\n    // Mix in all prototype properties to the subclass if supplied.\n    if (protoProps) {\n        args.unshift(child.prototype);\n        assign.apply(null, args);\n    }\n\n    // Set a convenience property in case the parent's prototype is needed\n    // later.\n    child.__super__ = parent.prototype;\n\n    return child;\n};\n\n// Expose the extend function\nmodule.exports = extend;\n"]},"metadata":{},"sourceType":"script"}