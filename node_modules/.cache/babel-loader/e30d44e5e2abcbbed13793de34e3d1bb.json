{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _isString2 = require('lodash/isString');\n\nvar _isString3 = _interopRequireDefault(_isString2);\n\nvar _constants = require('../constants');\n\nvar _parameter = require('../common/errors/parameter');\n\nvar _parameter2 = _interopRequireDefault(_parameter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @class Collection\n */\n\n\nvar Collection = function () {\n  /**\n   * @param {String} property\n   * @memberof Collection\n   */\n  function Collection(property) {\n    (0, _classCallCheck3.default)(this, Collection);\n    this.namespace = _constants.MEETINGS;\n\n    if (!property || !(0, _isString3.default)(property)) {\n      throw new _parameter2.default('Collection expects a string to use as a property name.');\n    }\n    /**\n     * The property name for what collection will be stored, i.e., this.meetingInfos, this.meetings, etc.\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof Meetings\n     */\n\n\n    this.propertyName = property;\n    /**\n     * The actual object for the collection\n     * @instance\n     * @type {Object}\n     * @public\n     * @memberof Meetings\n     */\n\n    this[this.propertyName] = {};\n  }\n  /**\n   * @param {String} id ID of the thing stuffed into the collection at id location\n   * @returns {Any} returns whatever is being stuffed into the collection\n   * @public\n   * @memberof Collection\n   */\n\n\n  (0, _createClass3.default)(Collection, [{\n    key: 'get',\n    value: function get(id) {\n      return this[this.propertyName] && this[this.propertyName][id] ? this[this.propertyName][id] : null;\n    }\n    /**\n     * @param {String} id the id of the meeting info instance to add to the collection\n     * @param {Any} value the thing to set in the collection\n     * @returns {Any} returns the thing just put in the collection\n     * @public\n     * @memberof Collection\n     */\n\n  }, {\n    key: 'set',\n    value: function set(id, value) {\n      this[this.propertyName][id] = value;\n      return this.get(id);\n    }\n    /**\n     * remove the thing at the id\n     * @param {String} id ID of the thing you wish to delete from the collection\n     * @returns {undefined}\n     * @public\n     * @memberof Collection\n     */\n\n  }, {\n    key: 'delete',\n    value: function _delete(id) {\n      delete this[this.propertyName][id];\n    }\n    /**\n     * @returns {Object} returns an object map of things stuffed into the collection\n     * @public\n     * @memberof Collection\n     */\n\n  }, {\n    key: 'getAll',\n    value: function getAll() {\n      return this[this.propertyName];\n    }\n    /**\n     * @param {Object} set the replacement object\n     * @returns {Object} returns an object map of things stuffed into the collection\n     * @public\n     * @memberof Collection\n     */\n\n  }, {\n    key: 'setAll',\n    value: function setAll(set) {\n      this[this.propertyName] = set;\n      return this.getAll();\n    }\n  }]);\n  return Collection;\n}();\n\nexports.default = Collection;","map":{"version":3,"sources":["collection.js"],"names":["Collection","namespace","MEETINGS","ParameterError","id","value","set"],"mappings":";;;;;;;;;;;;;;;;;;;AAEA,IAAA,UAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;;;;;;;;AAEA;;;;;IAGqBA,U;AAGnB;;;;AAIA,WAAA,UAAA,CAAA,QAAA,EAAsB;AAAA,KAAA,GAAA,gBAAA,CAAA,OAAA,EAAA,IAAA,EAAA,UAAA;AAAA,SANtBC,SAMsB,GANVC,UAAAA,CAAAA,QAMU;;AACpB,QAAI,CAAA,QAAA,IAAa,CAAC,CAAA,GAAA,UAAA,CAAA,OAAA,EAAlB,QAAkB,CAAlB,EAAsC;AACpC,YAAM,IAAIC,WAAAA,CAAJ,OAAA,CAAN,wDAAM,CAAN;AACD;AACD;;;;;;;;;AAOA,SAAA,YAAA,GAAA,QAAA;AACA;;;;;;;;AAOA,SAAK,KAAL,YAAA,IAAA,EAAA;AACD;AAED;;;;;;;;;;wBAMIC,E,EAAI;AACN,aAAO,KAAK,KAAL,YAAA,KAA2B,KAAK,KAAL,YAAA,EAA3B,EAA2B,CAA3B,GAAyD,KAAK,KAAL,YAAA,EAAzD,EAAyD,CAAzD,GAAP,IAAA;AACD;AAED;;;;;;;;;;wBAOIA,E,EAAIC,K,EAAO;AACb,WAAK,KAAL,YAAA,EAAA,EAAA,IAAA,KAAA;AAEA,aAAO,KAAA,GAAA,CAAP,EAAO,CAAP;AACD;AAED;;;;;;;;;;4BAOOD,E,EAAI;AACT,aAAO,KAAK,KAAL,YAAA,EAAP,EAAO,CAAP;AACD;AAED;;;;;;;;6BAKS;AACP,aAAO,KAAK,KAAZ,YAAO,CAAP;AACD;AAED;;;;;;;;;2BAMOE,G,EAAK;AACV,WAAK,KAAL,YAAA,IAAA,GAAA;AAEA,aAAO,KAAP,MAAO,EAAP;AACD;;;;;kBAlFkBN,U","sourcesContent":["import {isString} from 'lodash';\n\nimport {MEETINGS} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\n/**\n * @class Collection\n */\nexport default class Collection {\n  namespace = MEETINGS;\n\n  /**\n   * @param {String} property\n   * @memberof Collection\n   */\n  constructor(property) {\n    if (!property || !isString(property)) {\n      throw new ParameterError('Collection expects a string to use as a property name.');\n    }\n    /**\n     * The property name for what collection will be stored, i.e., this.meetingInfos, this.meetings, etc.\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof Meetings\n     */\n    this.propertyName = property;\n    /**\n     * The actual object for the collection\n     * @instance\n     * @type {Object}\n     * @public\n     * @memberof Meetings\n     */\n    this[this.propertyName] = {};\n  }\n\n  /**\n   * @param {String} id ID of the thing stuffed into the collection at id location\n   * @returns {Any} returns whatever is being stuffed into the collection\n   * @public\n   * @memberof Collection\n   */\n  get(id) {\n    return this[this.propertyName] && this[this.propertyName][id] ? this[this.propertyName][id] : null;\n  }\n\n  /**\n   * @param {String} id the id of the meeting info instance to add to the collection\n   * @param {Any} value the thing to set in the collection\n   * @returns {Any} returns the thing just put in the collection\n   * @public\n   * @memberof Collection\n   */\n  set(id, value) {\n    this[this.propertyName][id] = value;\n\n    return this.get(id);\n  }\n\n  /**\n   * remove the thing at the id\n   * @param {String} id ID of the thing you wish to delete from the collection\n   * @returns {undefined}\n   * @public\n   * @memberof Collection\n   */\n  delete(id) {\n    delete this[this.propertyName][id];\n  }\n\n  /**\n   * @returns {Object} returns an object map of things stuffed into the collection\n   * @public\n   * @memberof Collection\n   */\n  getAll() {\n    return this[this.propertyName];\n  }\n\n  /**\n   * @param {Object} set the replacement object\n   * @returns {Object} returns an object map of things stuffed into the collection\n   * @public\n   * @memberof Collection\n   */\n  setAll(set) {\n    this[this.propertyName] = set;\n\n    return this.getAll();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}