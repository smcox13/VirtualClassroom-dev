{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _loggerProxy = require('../logs/logger-proxy');\n\nvar _loggerProxy2 = _interopRequireDefault(_loggerProxy);\n\nvar _loggerConfig = require('../logs/logger-config');\n\nvar _loggerConfig2 = _interopRequireDefault(_loggerConfig);\n\nvar _parameter = require('../errors/parameter');\n\nvar _parameter2 = _interopRequireDefault(_parameter);\n\nvar _util = require('./util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar TriggerProxy = {};\n\nTriggerProxy.trigger = function (instance, scope, trigger, payload) {\n  if (!instance || !instance.trigger) {\n    throw new _parameter2.default('Instance to trigger from must be defined and have a trigger function.');\n  }\n\n  _loggerProxy2.default.logger.debug(_util2.default.getScopeLog(scope) + 'event#' + trigger + (_loggerConfig2.default.verboseEvents ? ' -- ' + _util2.default.getEventLog(payload) : ''));\n\n  return instance.trigger(trigger, payload);\n};\n\nexports.default = TriggerProxy;","map":{"version":3,"sources":["trigger-proxy.js"],"names":["TriggerProxy","instance","ParameterError","LoggerProxy","EventsUtil","LoggerConfig"],"mappings":";;;;;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;;;AAEA,IAAA,KAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;;;;;;;;;AAGA,IAAMA,YAAAA,GAAN,EAAA;;AAEAA,YAAAA,CAAAA,OAAAA,GAAuB,UAAA,QAAA,EAAA,KAAA,EAAA,OAAA,EAAA,OAAA,EAAuC;AAC5D,MAAI,CAAA,QAAA,IAAa,CAACC,QAAAA,CAAlB,OAAA,EAAoC;AAClC,UAAM,IAAIC,WAAAA,CAAJ,OAAA,CAAN,uEAAM,CAAN;AACD;;AAEDC,EAAAA,aAAAA,CAAAA,OAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAA4BC,MAAAA,CAAAA,OAAAA,CAAAA,WAAAA,CAA5BD,KAA4BC,IAA5BD,QAA4BC,GAA5BD,OAA4BC,IAAgDC,cAAAA,CAAAA,OAAAA,CAAAA,aAAAA,GAAAA,SAAoCD,MAAAA,CAAAA,OAAAA,CAAAA,WAAAA,CAApCC,OAAoCD,CAApCC,GAA5EF,EAA4BC,CAA5BD;;AAEA,SAAOF,QAAAA,CAAAA,OAAAA,CAAAA,OAAAA,EAAP,OAAOA,CAAP;AAPFD,CAAAA;;kBAUeA,Y","sourcesContent":["\nimport LoggerProxy from '../logs/logger-proxy';\nimport LoggerConfig from '../logs/logger-config';\nimport ParameterError from '../errors/parameter';\n\nimport EventsUtil from './util';\n\n\nconst TriggerProxy = {};\n\nTriggerProxy.trigger = (instance, scope, trigger, payload) => {\n  if (!instance || !instance.trigger) {\n    throw new ParameterError('Instance to trigger from must be defined and have a trigger function.');\n  }\n\n  LoggerProxy.logger.debug(`${EventsUtil.getScopeLog(scope)}event#${trigger}${LoggerConfig.verboseEvents ? ` -- ${EventsUtil.getEventLog(payload)}` : ''}`);\n\n  return instance.trigger(trigger, payload);\n};\n\nexport default TriggerProxy;\n"]},"metadata":{},"sourceType":"script"}