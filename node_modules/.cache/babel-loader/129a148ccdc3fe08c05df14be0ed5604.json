{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _constants = require('../constants');\n\nvar _parameter = require('../common/errors/parameter');\n\nvar _parameter2 = _interopRequireDefault(_parameter);\n\nvar _util = require('./util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @class MeetingInfoRequest\n */\n\n\nvar MeetingInfoRequest = function (_StatelessWebexPlugin) {\n  (0, _inherits3.default)(MeetingInfoRequest, _StatelessWebexPlugin);\n\n  function MeetingInfoRequest() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, MeetingInfoRequest);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MeetingInfoRequest.__proto__ || (0, _getPrototypeOf2.default)(MeetingInfoRequest)).call.apply(_ref, [this].concat(args))), _this), _this.namespace = _constants.MEETINGS, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  (0, _createClass3.default)(MeetingInfoRequest, [{\n    key: 'fetchMeetingInfo',\n\n    /**\n     *\n     * @param {Object} options with format of {type: String, desintation: String}\n     * where type is PERSONAL_ROOM, SIP_URI, CONVERSATION_URL, and destination is userId, sipUri, convoUrl respectively\n     * type can also be specified as an option and be of the list SIP_URI,MEETING_ID,LOCUS_ID,PERSONAL_ROOM,MEETING_LINK,ONE_ON_ONE,MEDIA_SIP_URI,CONVERSATION_URL,TEMP_SIP_URI\n     * with the desination matching\n     * @returns {Promise} returns a promise that resolves/rejects the result of the request\n     * @throws {Error} if the options are not valid and complete\n     * @memberof MeetingInfoRequest\n     */\n    value: function fetchMeetingInfo(options) {\n      if (!options || !options.type || !options.destination) {\n        throw new _parameter2.default('MeetingInfo should be fetched with a type and destination specified, see list of valid types and their corresponding values in constants');\n      }\n\n      var resourceUrl = _util2.default.getResourceUrl(options.type, options.destination);\n\n      var requestParams = _util2.default.getRequestParams(resourceUrl, options.type, options.destination, _constants.API.LOCUS);\n\n      return this.request(requestParams);\n    }\n  }]);\n  return MeetingInfoRequest;\n}(_webexCore.StatelessWebexPlugin);\n\nexports.default = MeetingInfoRequest;","map":{"version":3,"sources":["request.js"],"names":["MeetingInfoRequest","StatelessWebexPlugin","namespace","MEETINGS","options","ParameterError","resourceUrl","MeetingInfoUtil","requestParams","API"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,IAAA,UAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;;;AAEA,IAAA,KAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;;;;;;;;AACA;;;;;IAGqBA,kB;;;;;;;;;;;;;;oOACnBE,S,GAAYC,UAAAA,CAAAA,Q;;;;;;AAEZ;;;;;;;;;;qCAUiBC,O,EAAS;AACxB,UAAI,CAAA,OAAA,IAAY,CAACA,OAAAA,CAAb,IAAA,IAA6B,CAACA,OAAAA,CAAlC,WAAA,EAAuD;AACrD,cAAM,IAAIC,WAAAA,CAAJ,OAAA,CAAN,0IAAM,CAAN;AACD;;AACD,UAAMC,WAAAA,GAAcC,MAAAA,CAAAA,OAAAA,CAAAA,cAAAA,CAA+BH,OAAAA,CAA/BG,IAAAA,EAA6CH,OAAAA,CAAjE,WAAoBG,CAApB;;AACA,UAAMC,aAAAA,GAAgBD,MAAAA,CAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,WAAAA,EAA8CH,OAAAA,CAA9CG,IAAAA,EAA4DH,OAAAA,CAA5DG,WAAAA,EAAiFE,UAAAA,CAAAA,GAAAA,CAAvG,KAAsBF,CAAtB;;AAEA,aAAO,KAAA,OAAA,CAAP,aAAO,CAAP;AACD;;;EArB6CN,UAAAA,CAAAA,oB;;kBAA3BD,kB","sourcesContent":["import {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport {API, MEETINGS} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\nimport MeetingInfoUtil from './util';\n/**\n * @class MeetingInfoRequest\n */\nexport default class MeetingInfoRequest extends StatelessWebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n   *\n   * @param {Object} options with format of {type: String, desintation: String}\n   * where type is PERSONAL_ROOM, SIP_URI, CONVERSATION_URL, and destination is userId, sipUri, convoUrl respectively\n   * type can also be specified as an option and be of the list SIP_URI,MEETING_ID,LOCUS_ID,PERSONAL_ROOM,MEETING_LINK,ONE_ON_ONE,MEDIA_SIP_URI,CONVERSATION_URL,TEMP_SIP_URI\n   * with the desination matching\n   * @returns {Promise} returns a promise that resolves/rejects the result of the request\n   * @throws {Error} if the options are not valid and complete\n   * @memberof MeetingInfoRequest\n   */\n  fetchMeetingInfo(options) {\n    if (!options || !options.type || !options.destination) {\n      throw new ParameterError('MeetingInfo should be fetched with a type and destination specified, see list of valid types and their corresponding values in constants');\n    }\n    const resourceUrl = MeetingInfoUtil.getResourceUrl(options.type, options.destination);\n    const requestParams = MeetingInfoUtil.getRequestParams(resourceUrl, options.type, options.destination, API.LOCUS);\n\n    return this.request(requestParams);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}