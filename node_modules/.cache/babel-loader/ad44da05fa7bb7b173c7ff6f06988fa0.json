{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC3447\r\n */\n\nexport default class DigestInfo {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for DigestInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc digestAlgorithm\r\n     */\n    this.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", DigestInfo.defaultValues(\"digestAlgorithm\"));\n    /**\r\n     * @type {OctetString}\r\n     * @desc digest\r\n     */\n\n    this.digest = getParametersValue(parameters, \"digest\", DigestInfo.defaultValues(\"digest\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"digestAlgorithm\":\n        return new AlgorithmIdentifier();\n\n      case \"digest\":\n        return new asn1js.OctetString();\n\n      default:\n        throw new Error(`Invalid member name for DigestInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"digestAlgorithm\":\n        return AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId) && \"algorithmParams\" in memberValue === false;\n\n      case \"digest\":\n        return memberValue.isEqual(DigestInfo.defaultValues(memberName));\n\n      default:\n        throw new Error(`Invalid member name for DigestInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * DigestInfo ::= SEQUENCE {\r\n   *    digestAlgorithm DigestAlgorithmIdentifier,\r\n   *    digest Digest }\r\n   *\r\n   * Digest ::= OCTET STRING\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [type]\r\n     * @property {string} [setName]\r\n     * @property {string} [values]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [AlgorithmIdentifier.schema(names.digestAlgorithm || {\n        names: {\n          blockName: \"digestAlgorithm\"\n        }\n      }), new asn1js.OctetString({\n        name: names.digest || \"digest\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"digestAlgorithm\", \"digest\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, DigestInfo.schema({\n      names: {\n        digestAlgorithm: {\n          names: {\n            blockName: \"digestAlgorithm\"\n          }\n        },\n        digest: \"digest\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for DigestInfo\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.digestAlgorithm = new AlgorithmIdentifier({\n      schema: asn1.result.digestAlgorithm\n    });\n    this.digest = asn1.result.digest; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [this.digestAlgorithm.toSchema(), this.digest]\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      digestAlgorithm: this.digestAlgorithm.toJSON(),\n      digest: this.digest.toJSON()\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/DigestInfo.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","DigestInfo","constructor","parameters","digestAlgorithm","defaultValues","digest","fromSchema","schema","memberName","OctetString","Error","compareWithDefault","memberValue","algorithmId","isEqual","names","Sequence","name","blockName","value","asn1","compareSchema","verified","result","toSchema","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3447\r\n */\r\nexport default class DigestInfo \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for DigestInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc digestAlgorithm\r\n\t\t */\r\n\t\tthis.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", DigestInfo.defaultValues(\"digestAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc digest\r\n\t\t */\r\n\t\tthis.digest = getParametersValue(parameters, \"digest\", DigestInfo.defaultValues(\"digest\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"digest\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for DigestInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\treturn ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\r\n\t\t\t\t((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"digest\":\r\n\t\t\t\treturn (memberValue.isEqual(DigestInfo.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for DigestInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * DigestInfo ::= SEQUENCE {\r\n\t *    digestAlgorithm DigestAlgorithmIdentifier,\r\n\t *    digest Digest }\r\n\t *\r\n\t * Digest ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [type]\r\n\t\t * @property {string} [setName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.digestAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"digestAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.digest || \"digest\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"digestAlgorithm\",\r\n\t\t\t\"digest\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tDigestInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tdigestAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"digestAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdigest: \"digest\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for DigestInfo\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\r\n\t\tthis.digest = asn1.result.digest;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.digestAlgorithm.toSchema(),\r\n\t\t\t\tthis.digest\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tdigestAlgorithm: this.digestAlgorithm.toJSON(),\r\n\t\t\tdigest: this.digest.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}