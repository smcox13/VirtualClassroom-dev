{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _isEqual2 = require('lodash/isEqual');\n\nvar _isEqual3 = _interopRequireDefault(_isEqual2);\n\nvar _loggerProxy = require('../common/logs/logger-proxy');\n\nvar _loggerProxy2 = _interopRequireDefault(_loggerProxy);\n\nvar _eventsScope = require('../common/events/events-scope');\n\nvar _eventsScope2 = _interopRequireDefault(_eventsScope);\n\nvar _constants = require('../constants');\n\nvar _metrics = require('../metrics');\n\nvar _metrics2 = _interopRequireDefault(_metrics);\n\nvar _config = require('../metrics/config');\n\nvar _infoUtils = require('../locus-info/infoUtils');\n\nvar _infoUtils2 = _interopRequireDefault(_infoUtils);\n\nvar _fullState = require('../locus-info/fullState');\n\nvar _fullState2 = _interopRequireDefault(_fullState);\n\nvar _selfUtils = require('../locus-info/selfUtils');\n\nvar _selfUtils2 = _interopRequireDefault(_selfUtils);\n\nvar _hostUtils = require('../locus-info/hostUtils');\n\nvar _hostUtils2 = _interopRequireDefault(_hostUtils);\n\nvar _controlsUtils = require('../locus-info/controlsUtils');\n\nvar _controlsUtils2 = _interopRequireDefault(_controlsUtils);\n\nvar _mediaSharesUtils = require('../locus-info/mediaSharesUtils');\n\nvar _mediaSharesUtils2 = _interopRequireDefault(_mediaSharesUtils);\n\nvar _parser = require('../locus-info/parser');\n\nvar _parser2 = _interopRequireDefault(_parser);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @description LocusInfo extends ChildEmitter to convert locusInfo info a private emitter to parent object\n * @export\n * @private\n * @class LocusInfo\n */\n\n\nvar LocusInfo = function (_EventsScope) {\n  (0, _inherits3.default)(LocusInfo, _EventsScope);\n\n  function LocusInfo(updateMeeting) {\n    var locus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var webex = arguments[2];\n    var meetingId = arguments[3];\n    (0, _classCallCheck3.default)(this, LocusInfo);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (LocusInfo.__proto__ || (0, _getPrototypeOf2.default)(LocusInfo)).call(this));\n\n    _this.parsedLocus = {\n      states: []\n    };\n    _this.webex = webex;\n    _this.emitChange = false;\n    _this.compareAndUpdateFlags = {};\n    _this.meetingId = meetingId;\n    _this.updateMeeting = updateMeeting;\n    _this.created = locus.created || null;\n    _this.mediaShares = locus.mediaShares || null;\n    _this.scheduledMeeting = locus.meeting || null;\n    _this.participantsUrl = locus.participantsUrl || null;\n    _this.replaces = locus.replaces || null;\n    _this.aclUrl = locus.aclUrl || null;\n    _this.baseSequence = locus.baseSequence || null;\n    _this.sequence = locus.sequence || null;\n    _this.membership = locus.membership || null;\n    _this.identities = locus.identities || null;\n    _this.participants = locus.participants || null; // above section only updates the locusInfo object\n    // The below section makes sure it updates the locusInfo as well as updates the meeting object\n\n    _this.updateParticipants(locus.participants); // For 1:1 space meeting the conversation Url does not exist in locus.conversation\n\n\n    _this.updateConversationUrl(locus.conversationUrl, locus.info);\n\n    _this.updateControls(locus.controls);\n\n    _this.updateLocusUrl(locus.url);\n\n    _this.updateFullState(locus.fullState);\n\n    _this.updateMeetingInfo(locus.info); // self and participants generate sipUrl for 1:1 meeting\n\n\n    _this.updateSelf(locus.self, locus.participants);\n\n    _this.updateHostInfo(locus.host);\n\n    return _this;\n  }\n  /**\n   * @param {Object} locus\n   * @param {Meeting} meeting\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n\n\n  (0, _createClass3.default)(LocusInfo, [{\n    key: 'initialSetup',\n    value: function initialSetup(locus, meeting) {\n      // meeting already exisits just do an update\n      if (meeting) {\n        // Its a new delta event fetch the whole meeting object\n        _parser2.default.updateWithDeltaLocus(locus, meeting);\n      } else {\n        this.onFullLocus(locus);\n      } // Change it to true after it recives it first locus object\n\n\n      this.emitChange = true;\n    }\n    /**\n     * @param {Meeting} meeting\n     * @param {Object} data\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'parse',\n    value: function parse(meeting, data) {\n      var eventType = data.eventType;\n\n      _loggerProxy2.default.logger.info('locusInfo->parse#received locus data: ' + eventType);\n\n      switch (eventType) {\n        case _constants.LOCUSEVENT.PARTICIPANT_JOIN:\n        case _constants.LOCUSEVENT.PARTICIPANT_LEFT:\n        case _constants.LOCUSEVENT.CONTROLS_UPDATED:\n        case _constants.LOCUSEVENT.PARTICIPANT_AUDIO_MUTED:\n        case _constants.LOCUSEVENT.PARTICIPANT_AUDIO_UNMUTED:\n        case _constants.LOCUSEVENT.PARTICIPANT_VIDEO_MUTED:\n        case _constants.LOCUSEVENT.PARTICIPANT_VIDEO_UNMUTED:\n        case _constants.LOCUSEVENT.SELF_CHANGED:\n        case _constants.LOCUSEVENT.PARTICIPANT_UPDATED:\n        case _constants.LOCUSEVENT.PARTICIPANT_CONTROLS_UPDATED:\n        case _constants.LOCUSEVENT.PARTICIPANT_ROLES_UPDATED:\n        case _constants.LOCUSEVENT.PARTICIPANT_DECLINED:\n        case _constants.LOCUSEVENT.FLOOR_GRANTED:\n        case _constants.LOCUSEVENT.FLOOR_RELEASED:\n          this.onFullLocus(data.locus, eventType);\n          break;\n\n        case _constants.LOCUSEVENT.DIFFERENCE:\n          _parser2.default.updateWithDeltaLocus(data.locus, meeting);\n\n          break;\n\n        default:\n          // Why will there be a event with no eventType ????\n          // we may not need this, we can get full locus\n          _parser2.default.updateWithDeltaLocus(data.locus, meeting);\n\n      }\n    }\n    /**\n     * @param {String} scope\n     * @param {String} eventName\n     * @param {Array} args\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'emitScoped',\n    value: function emitScoped(scope, eventName, args) {\n      return this.emit(scope, eventName, args);\n    }\n    /**\n     * updates the locus with full locus object\n     * @param {object} locus locus object\n     * @param {sting} eventType particulat locus event\n     * @returns {object} null\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'onFullLocus',\n    value: function onFullLocus(locus, eventType) {\n      if (!locus) {\n        _loggerProxy2.default.logger.error('LocusInfo->onFullLocus#Locus object passed as argument was invalid, continuing.');\n      }\n\n      this.participants = locus.participants;\n      this.updateLocusInfo(locus);\n      this.updateParticipants(locus.participants);\n      this.isMeetingActive();\n      this.handleOneOnOneEvent(eventType);\n    } // used for ringing stops on one on one\n\n    /**\n     * @param {String} eventType\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'handleOneOnOneEvent',\n    value: function handleOneOnOneEvent(eventType) {\n      if (this.parsedLocus.info.type === _constants._CALL_) {\n        // for 1:1 bob calls alice and alice declines, notify the meeting state\n        if (eventType === _constants.LOCUSEVENT.PARTICIPANT_DECLINED) {\n          // trigger the event for stop ringing\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'handleOneonOneEvent'\n          }, _constants.EVENTS.REMOTE_ANSWERED_DECLINED, {\n            remoteDeclined: true,\n            remoteAnswered: false\n          });\n        } // for 1:1 bob calls alice and alice answers, notify the meeting state\n\n\n        if (eventType === _constants.LOCUSEVENT.PARTICIPANT_JOIN) {\n          // trigger the event for stop ringing\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'handleOneonOneEvent'\n          }, _constants.EVENTS.REMOTE_ANSWERED_DECLINED, {\n            remoteDeclined: false,\n            remoteAnswered: true\n          });\n        }\n      }\n    }\n    /**\n     * @param {Object} locus\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'onDeltaLocus',\n    value: function onDeltaLocus(locus) {\n      this.updateLocusInfo(locus);\n      this.updateParticipants(locus.participants);\n      this.isMeetingActive();\n    }\n    /**\n     * @param {Object} locus\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'updateLocusInfo',\n    value: function updateLocusInfo(locus) {\n      this.updateControls(locus.controls);\n      this.updateConversationUrl(locus.conversationUrl, locus.info);\n      this.updateCreated(locus.created);\n      this.updateFullState(locus.fullState);\n      this.updateHostInfo(locus.host);\n      this.updateMeetingInfo(locus.info, locus.self);\n      this.updateMediaShares(locus.mediaShares);\n      this.updateParticipantsUrl(locus.participantsUrl);\n      this.updateReplace(locus.replace);\n      this.updateSelf(locus.self, locus.participants);\n      this.updateLocusUrl(locus.url);\n      this.updateAclUrl(locus.aclUrl);\n      this.updateBasequence(locus.baseSequence);\n      this.updateSequence(locus.sequence);\n      this.updateMemberShip(locus.membership);\n      this.updateIdentifiers(locus.identities);\n      this.compareAndUpdate(); // update which required to compare different objects from locus\n    }\n    /**\n     * @param {Array} participants\n     * @param {Object} self\n     * @returns {Array}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'getLocusPartner',\n    value: function getLocusPartner(participants, self) {\n      if (!participants || participants.length === 0) {\n        return null;\n      }\n\n      return participants.find(function (participant) {\n        return self && participant.identity !== self.identity && (participants.length <= 2 || participant.type === _constants._USER_ && !participant.removed);\n      }) || this.partner;\n    } // TODO: all the leave states need to be checked\n\n    /**\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'isMeetingActive',\n    value: function isMeetingActive() {\n      if (this.parsedLocus.fullState.type === _constants._CALL_) {\n        var partner = this.getLocusPartner(this.participants, this.self);\n        this.updateMeeting({\n          partner: partner\n        }); // Check if guest user needs to be checked here\n        // 1) when bob declines call from bob, (bob='DECLINED')\n        // 2) When alice rejects call to bob , (bob='NOTIFIED')\n        // When we dont add MEDIA for condition 2. The state of bob='IDLE'\n\n        if (this.fullState && this.fullState.state === _constants.LOCUS.STATE.INACTIVE) {\n          // TODO: update the meeting state\n          _loggerProxy2.default.logger.warn('LocusInfo#isMeetingActive-> Call Ended, locus state is inactive.');\n\n          _metrics2.default.postEvent({\n            event: _config.eventType.REMOTE_ENDED,\n            meetingId: this.meetingId\n          });\n\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          }, _constants.EVENTS.DESTROY_MEETING, {\n            reason: _constants.CALL_REMOVED_REASON.CALL_INACTIVE,\n            shouldLeave: false\n          });\n        } else if (partner.state === _constants.MEETING_STATE.STATES.LEFT && this.parsedLocus.self && (this.parsedLocus.self.state === _constants.MEETING_STATE.STATES.DECLINED || this.parsedLocus.self.state === _constants.MEETING_STATE.STATES.NOTIFIED || this.parsedLocus.self.state === _constants.MEETING_STATE.STATES.JOINED)) {\n          _metrics2.default.postEvent({\n            event: _config.eventType.REMOTE_ENDED,\n            meetingId: this.meetingId\n          });\n\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          }, _constants.EVENTS.DESTROY_MEETING, {\n            reason: _constants.CALL_REMOVED_REASON.PARTNER_LEFT,\n            shouldLeave: this.parsedLocus.self.joinedWith && this.parsedLocus.self.joinedWith.state !== _constants._LEFT_\n          });\n        } else if (this.parsedLocus.self && this.parsedLocus.self.state === _constants.MEETING_STATE.STATES.LEFT && (partner.state === _constants.MEETING_STATE.STATES.LEFT || partner.state === _constants.MEETING_STATE.STATES.DECLINED || partner.state === _constants.MEETING_STATE.STATES.NOTIFIED || partner.state === _constants.MEETING_STATE.STATES.IDLE) // Happens when user just joins and adds no Media\n        ) {\n            _metrics2.default.postEvent({\n              event: _config.eventType.REMOTE_ENDED,\n              meetingId: this.meetingId\n            });\n\n            this.emitScoped({\n              file: 'locus-info',\n              function: 'isMeetingActive'\n            }, _constants.EVENTS.DESTROY_MEETING, {\n              reason: _constants.CALL_REMOVED_REASON.SELF_LEFT,\n              shouldLeave: false\n            });\n          }\n      } else if (this.parsedLocus.fullState.type === _constants._MEETING_) {\n        if (this.fullState && (this.fullState.state === _constants.LOCUS.STATE.INACTIVE || this.fullState.state === _constants.LOCUS.STATE.TERMINATING)) {\n          _metrics2.default.postEvent({\n            event: _config.eventType.REMOTE_ENDED,\n            meetingId: this.meetingId\n          });\n\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          }, _constants.EVENTS.DESTROY_MEETING, {\n            reason: _constants.MEETING_REMOVED_REASON.MEETING_INACTIVE_TERMINATING,\n            shouldLeave: false\n          });\n        } else if (this.fullState.removed) {\n          // user has been dropped from a meeting\n          _metrics2.default.postEvent({\n            event: _config.eventType.REMOTE_ENDED,\n            meetingId: this.meetingId\n          });\n\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          }, _constants.EVENTS.DESTROY_MEETING, {\n            reason: _constants.MEETING_REMOVED_REASON.FULLSTATE_REMOVED,\n            shouldLeave: false\n          });\n        } // If you are  guest and you are removed from the meeting\n        // You wont get any further events\n        else if (this.parsedLocus.self.removed) {\n            // Check if we need to send an event\n            this.emitScoped({\n              file: 'locus-info',\n              function: 'isMeetingActive'\n            }, _constants.EVENTS.DESTROY_MEETING, {\n              reason: _constants.MEETING_REMOVED_REASON.SELF_REMOVED,\n              shouldLeave: false\n            });\n          }\n      } else {\n        _loggerProxy2.default.logger.warn('LocusInfo#isMeetingActive-> Meeting Type is unknown.');\n      }\n    }\n    /**\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'compareAndUpdate',\n    value: function compareAndUpdate() {\n      if (this.compareAndUpdateFlags.compareSelfAndHost || this.compareAndUpdateFlags.compareHostAndSelf) {\n        this.compareSelfAndHost();\n      }\n    }\n    /**\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'compareSelfAndHost',\n    value: function compareSelfAndHost() {\n      if (this.parsedLocus.self.selfIdentity === this.parsedLocus.host.hostId && this.parsedLocus.self.moderator) {\n        this.emitScoped({\n          file: 'locus-info',\n          function: 'compareSelfAndHost'\n        }, _constants.EVENTS.LOCUS_INFO_CAN_ASSIGN_HOST, {\n          canAssignHost: true\n        });\n      } else {\n        this.emitScoped({\n          file: 'locus-info',\n          function: 'compareSelfAndHost'\n        }, _constants.EVENTS.LOCUS_INFO_CAN_ASSIGN_HOST, {\n          canAssignHost: false\n        });\n      }\n    }\n    /**\n     *\n     * @param {Object} participants new participants object\n     * @param {boolen} deltaParticpantFlag  delta event\n     * @returns {Array} updatedParticipants\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'updateParticipants',\n    value: function updateParticipants(participants) {\n      this.emitScoped({\n        file: 'locus-info',\n        function: 'updateParticipants'\n      }, _constants.EVENTS.LOCUS_INFO_UPDATE_PARTICIPANTS, {\n        participants: participants,\n        recordingId: this.parsedLocus.controls && this.parsedLocus.controls.recordingId,\n        selfIdentity: this.parsedLocus.self && this.parsedLocus.self.selfIdentity,\n        selfId: this.parsedLocus.self && this.parsedLocus.self.selfId,\n        hostId: this.parsedLocus.host && this.parsedLocus.host.hostId\n      });\n    }\n    /**\n     * @param {Object} controls\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'updateControls',\n    value: function updateControls(controls) {\n      if (controls && !(0, _isEqual3.default)(this.controls, controls)) {\n        this.controls = controls;\n        this.parsedLocus.controls = _controlsUtils2.default.parse(controls);\n      }\n    }\n    /**\n     * @param {String} conversationUrl\n     * @param {Object} info\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'updateConversationUrl',\n    value: function updateConversationUrl(conversationUrl, info) {\n      if (conversationUrl && !(0, _isEqual3.default)(this.conversationUrl, conversationUrl)) {\n        this.conversationUrl = conversationUrl;\n        this.updateMeeting({\n          convoUrl: conversationUrl\n        });\n      } else if (info && info.conversationUrl && !(0, _isEqual3.default)(this.conversationUrl, info.conversationUrl)) {\n        this.conversationUrl = info.conversationUrl;\n        this.updateMeeting({\n          convoUrl: info.conversationUrl\n        });\n      }\n    }\n    /**\n     * @param {Object} created\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'updateCreated',\n    value: function updateCreated(created) {\n      if (created && !(0, _isEqual3.default)(this.created, created)) {\n        this.created = created;\n      }\n    }\n    /**\n     * @param {Object} fullState\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'updateFullState',\n    value: function updateFullState(fullState) {\n      if (fullState && !(0, _isEqual3.default)(this.fullState, fullState)) {\n        var result = _fullState2.default.getFullState(this.fullState, fullState);\n\n        this.updateMeeting(result.current);\n\n        if (result.updates.meetingStateChangedTo) {\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateFullState'\n          }, _constants.LOCUSINFO.EVENTS.FULL_STATE_MEETING_STATE_CHANGE, {\n            previousState: result.previous && result.previous.meetingState,\n            currentState: result.current.meetingState\n          });\n        }\n\n        if (result.updates.meetingTypeChangedTo) {\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateFullState'\n          }, _constants.LOCUSINFO.EVENTS.FULL_STATE_TYPE_UPDATE, {\n            type: result.current.type\n          });\n        }\n\n        this.parsedLocus.fullState = result.current;\n        this.fullState = fullState;\n      }\n    }\n    /**\n     * handles when the locus.host is updated\n     * @param {Object} host the locus.host property\n     * @returns {undefined}\n     * @memberof LocusInfo\n     * emits internal event locus_info_update_host\n     */\n\n  }, {\n    key: 'updateHostInfo',\n    value: function updateHostInfo(host) {\n      if (host && !(0, _isEqual3.default)(this.host, host)) {\n        var parsedHosts = _hostUtils2.default.getHosts(this.host, host);\n\n        this.updateMeeting(parsedHosts.current);\n        this.parsedLocus.host = parsedHosts.current;\n\n        if (parsedHosts.updates.isNewHost) {\n          this.compareAndUpdateFlags.compareSelfAndHost = true;\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateHostInfo'\n          }, _constants.EVENTS.LOCUS_INFO_UPDATE_HOST, {\n            newHost: parsedHosts.current,\n            oldHost: parsedHosts.previous\n          });\n        }\n\n        this.host = host;\n      } else {\n        this.compareAndUpdateFlags.compareSelfAndHost = false;\n      }\n    }\n    /**\n     * @param {Object} info\n     * @param {Object} self\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'updateMeetingInfo',\n    value: function updateMeetingInfo(info, self) {\n      if (info && (!(0, _isEqual3.default)(this.info, info) || !(0, _isEqual3.default)(_infoUtils2.default.parsePolicy(info), _infoUtils2.default.parsePolicy(this.info)) || !(0, _isEqual3.default)(_infoUtils2.default.parseModerator(info) || _infoUtils2.default.parseModerator(info)))) {\n        var parsedInfo = _infoUtils2.default.getInfos(this.parsedLocus.info, info);\n\n        this.emitScoped({\n          file: 'locus-info',\n          function: 'updateMeetingInfo'\n        }, _constants.LOCUSINFO.EVENTS.MEETING_INFO_UPDATED, {\n          info: parsedInfo.current,\n          self: self\n        });\n\n        if (parsedInfo.updates.isLocked) {\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateMeetingInfo'\n          }, _constants.LOCUSINFO.EVENTS.MEETING_LOCKED, info);\n        }\n\n        if (parsedInfo.updates.isUnlocked) {\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateMeetingInfo'\n          }, _constants.LOCUSINFO.EVENTS.MEETING_UNLOCKED, info);\n        }\n\n        this.info = info;\n        this.parsedLocus.info = parsedInfo.current; // Parses the info and adds necessary values\n\n        this.updateMeeting(parsedInfo.current);\n      }\n    }\n    /**\n     * handles when the locus.mediaShares is updated\n     * @param {Object} mediaShares the locus.mediaShares property\n     * @returns {undefined}\n     * @memberof LocusInfo\n     * emits internal event locus_info_update_media_shares\n     */\n\n  }, {\n    key: 'updateMediaShares',\n    value: function updateMediaShares(mediaShares) {\n      if (mediaShares && !(0, _isEqual3.default)(this.mediaShares, mediaShares)) {\n        var parsedMediaShares = _mediaSharesUtils2.default.getMediaShares(this.mediaShares, mediaShares);\n\n        this.updateMeeting(parsedMediaShares.current);\n        this.emitScoped({\n          file: 'locus-info',\n          function: 'updateMediaShares'\n        }, _constants.EVENTS.LOCUS_INFO_UPDATE_MEDIA_SHARES, {\n          current: parsedMediaShares.current,\n          previous: parsedMediaShares.previous\n        });\n        this.parsedLocus.mediaShares = parsedMediaShares.current;\n        this.mediaShares = mediaShares;\n      }\n    }\n    /**\n     * @param {String} participantsUrl\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'updateParticipantsUrl',\n    value: function updateParticipantsUrl(participantsUrl) {\n      if (participantsUrl && !(0, _isEqual3.default)(this.participantsUrl, participantsUrl)) {\n        this.participantsUrl = participantsUrl;\n      }\n    }\n    /**\n     * @param {Object} replace\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'updateReplace',\n    value: function updateReplace(replace) {\n      if (replace && !(0, _isEqual3.default)(this.replace, replace)) {\n        this.replace = replace;\n      }\n    }\n    /**\n     * handles when the locus.self is updated\n     * @param {Object} self the locus.mediaShares property\n     * @param {Array} participants the locus.participants property\n     * @returns {undefined}\n     * @memberof LocusInfo\n     * emits internal events self_admitted_guest, self_unadmitted_guest, locus_info_update_self\n     */\n\n  }, {\n    key: 'updateSelf',\n    value: function updateSelf(self, participants) {\n      if (self && !(0, _isEqual3.default)(this.self, self)) {\n        var parsedSelves = _selfUtils2.default.getSelves(this.self, self, this.webex.internal.device.url);\n\n        this.updateMeeting(parsedSelves.current);\n        this.parsedLocus.self = parsedSelves.current;\n        var element = this.parsedLocus.states[this.parsedLocus.states.length - 1];\n\n        if (element !== parsedSelves.current.state) {\n          this.parsedLocus.states.push(parsedSelves.current.state);\n        } // TODO: check if we need to save the sipUri here as well\n        // this.emit(LOCUSINFO.EVENTS.MEETING_UPDATE, SelfUtils.getSipUrl(this.getLocusPartner(participants, self), this.parsedLocus.fullState.type, this.parsedLocus.info.sipUri));\n\n\n        var result = _selfUtils2.default.getSipUrl(this.getLocusPartner(participants, self), this.parsedLocus.fullState.type, this.parsedLocus.info.sipUri);\n\n        if (result.sipUri) {\n          this.updateMeeting(result);\n        }\n\n        if (parsedSelves.updates.moderatorChanged) {\n          this.compareAndUpdateFlags.compareHostAndSelf = true;\n        } else {\n          this.compareAndUpdateFlags.compareHostAndSelf = false;\n        }\n\n        if (parsedSelves.updates.moderatorChanged) {\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateSelf'\n          }, _constants.LOCUSINFO.EVENTS.SELF_MODERATOR_CHANGED, self);\n        }\n\n        if (parsedSelves.updates.mutedByOthers) {\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateSelf'\n          }, _constants.LOCUSINFO.EVENTS.SELF_MUTED_BY_OTHERS, self);\n        }\n\n        if (parsedSelves.updates.isUnadmittedGuest) {\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateSelf'\n          }, _constants.LOCUSINFO.EVENTS.SELF_UNADMITTED_GUEST, self);\n        }\n\n        if (parsedSelves.updates.isAdmittedGuest) {\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateSelf'\n          }, _constants.LOCUSINFO.EVENTS.SELF_ADMITTED_GUEST, self);\n        }\n\n        this.emitScoped({\n          file: 'locus-info',\n          function: 'updateSelf'\n        }, _constants.EVENTS.LOCUS_INFO_UPDATE_SELF, {\n          oldSelf: parsedSelves.previous,\n          newSelf: parsedSelves.current\n        });\n        this.parsedLocus.self = parsedSelves.current;\n        this.self = self;\n      } else {\n        this.compareAndUpdateFlags.compareHostAndSelf = false;\n      }\n    }\n    /**\n     * handles when the locus.url is updated\n     * @param {String} url\n     * @returns {undefined}\n     * emits internal event locus_info_update_url\n     */\n\n  }, {\n    key: 'updateLocusUrl',\n    value: function updateLocusUrl(url) {\n      if (url && this.url !== url) {\n        this.url = url;\n        this.updateMeeting({\n          locusUrl: url\n        });\n        this.emitScoped({\n          file: 'locus-info',\n          function: 'updateLocusUrl'\n        }, _constants.EVENTS.LOCUS_INFO_UPDATE_URL, url);\n      }\n    }\n    /**\n     * @param {String} aclUrl\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'updateAclUrl',\n    value: function updateAclUrl(aclUrl) {\n      if (aclUrl && !(0, _isEqual3.default)(this.aclUrl, aclUrl)) {\n        this.aclUrl = aclUrl;\n      }\n    }\n    /**\n     * @param {Number} baseSequence\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'updateBasequence',\n    value: function updateBasequence(baseSequence) {\n      if (baseSequence && !(0, _isEqual3.default)(this.baseSequence, baseSequence)) {\n        this.baseSequence = baseSequence;\n      }\n    }\n    /**\n     * @param {Number} sequence\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'updateSequence',\n    value: function updateSequence(sequence) {\n      if (sequence && !(0, _isEqual3.default)(this.sequence, sequence)) {\n        this.sequence = sequence;\n      }\n    }\n    /**\n     * @param {Object} membership\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'updateMemberShip',\n    value: function updateMemberShip(membership) {\n      if (membership && !(0, _isEqual3.default)(this.membership, membership)) {\n        this.membership = membership;\n      }\n    }\n    /**\n     * @param {Array} identities\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: 'updateIdentifiers',\n    value: function updateIdentifiers(identities) {\n      if (identities && !(0, _isEqual3.default)(this.identities, identities)) {\n        this.identities = identities;\n      }\n    }\n  }]);\n  return LocusInfo;\n}(_eventsScope2.default);\n\nexports.default = LocusInfo;","map":{"version":3,"sources":["index.js"],"names":["LocusInfo","EventsScope","locus","webex","meetingId","states","meeting","Parser","data","eventType","LoggerProxy","LOCUSEVENT","scope","eventName","args","_CALL_","file","function","EVENTS","remoteDeclined","remoteAnswered","participants","self","participant","_USER_","partner","LOCUS","Metrics","event","reason","CALL_REMOVED_REASON","shouldLeave","MEETING_STATE","_LEFT_","_MEETING_","MEETING_REMOVED_REASON","canAssignHost","recordingId","selfIdentity","selfId","hostId","controls","ControlsUtils","conversationUrl","info","convoUrl","created","fullState","result","FullState","LOCUSINFO","previousState","currentState","meetingState","type","host","parsedHosts","HostUtils","newHost","oldHost","previous","InfoUtils","parsedInfo","mediaShares","parsedMediaShares","MediaSharesUtils","current","participantsUrl","replace","parsedSelves","SelfUtils","element","oldSelf","newSelf","url","locusUrl","aclUrl","baseSequence","sequence","membership","identities"],"mappings":"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","sourcesContent":["import {isEqual} from 'lodash';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport EventsScope from '../common/events/events-scope';\nimport {\n  EVENTS,\n  LOCUSEVENT,\n  _USER_,\n  _CALL_,\n  MEETING_STATE,\n  _MEETING_,\n  LOCUSINFO,\n  LOCUS,\n  _LEFT_,\n  MEETING_REMOVED_REASON,\n  CALL_REMOVED_REASON\n} from '../constants';\nimport Metrics from '../metrics';\nimport {eventType} from '../metrics/config';\nimport InfoUtils from '../locus-info/infoUtils';\nimport FullState from '../locus-info/fullState';\nimport SelfUtils from '../locus-info/selfUtils';\nimport HostUtils from '../locus-info/hostUtils';\nimport ControlsUtils from '../locus-info/controlsUtils';\nimport MediaSharesUtils from '../locus-info/mediaSharesUtils';\nimport Parser from '../locus-info/parser';\n\n\n/**\n * @description LocusInfo extends ChildEmitter to convert locusInfo info a private emitter to parent object\n * @export\n * @private\n * @class LocusInfo\n */\nexport default class LocusInfo extends EventsScope {\n  constructor(updateMeeting, locus = {}, webex, meetingId) {\n    super();\n    this.parsedLocus = {\n      states: []\n    };\n    this.webex = webex;\n    this.emitChange = false;\n    this.compareAndUpdateFlags = {};\n    this.meetingId = meetingId;\n    this.updateMeeting = updateMeeting;\n    this.created = locus.created || null;\n    this.mediaShares = locus.mediaShares || null;\n    this.scheduledMeeting = locus.meeting || null;\n    this.participantsUrl = locus.participantsUrl || null;\n    this.replaces = locus.replaces || null;\n    this.aclUrl = locus.aclUrl || null;\n    this.baseSequence = locus.baseSequence || null;\n    this.sequence = locus.sequence || null;\n    this.membership = locus.membership || null;\n    this.identities = locus.identities || null;\n    this.participants = locus.participants || null;\n    // above section only updates the locusInfo object\n    // The below section makes sure it updates the locusInfo as well as updates the meeting object\n    this.updateParticipants(locus.participants);\n    // For 1:1 space meeting the conversation Url does not exist in locus.conversation\n    this.updateConversationUrl(locus.conversationUrl, locus.info);\n    this.updateControls(locus.controls);\n    this.updateLocusUrl(locus.url);\n    this.updateFullState(locus.fullState);\n    this.updateMeetingInfo(locus.info);\n    // self and participants generate sipUrl for 1:1 meeting\n    this.updateSelf(locus.self, locus.participants);\n    this.updateHostInfo(locus.host);\n  }\n\n  /**\n   * @param {Object} locus\n   * @param {Meeting} meeting\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  initialSetup(locus, meeting) {\n    // meeting already exisits just do an update\n    if (meeting) {\n      // Its a new delta event fetch the whole meeting object\n      Parser.updateWithDeltaLocus(locus, meeting);\n    }\n    else {\n      this.onFullLocus(locus);\n    }\n\n    // Change it to true after it recives it first locus object\n    this.emitChange = true;\n  }\n\n  /**\n   * @param {Meeting} meeting\n   * @param {Object} data\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  parse(meeting, data) {\n    const {eventType} = data;\n\n    LoggerProxy.logger.info(`locusInfo->parse#received locus data: ${eventType}`);\n\n    switch (eventType) {\n      case LOCUSEVENT.PARTICIPANT_JOIN:\n      case LOCUSEVENT.PARTICIPANT_LEFT:\n      case LOCUSEVENT.CONTROLS_UPDATED:\n      case LOCUSEVENT.PARTICIPANT_AUDIO_MUTED:\n      case LOCUSEVENT.PARTICIPANT_AUDIO_UNMUTED:\n      case LOCUSEVENT.PARTICIPANT_VIDEO_MUTED:\n      case LOCUSEVENT.PARTICIPANT_VIDEO_UNMUTED:\n      case LOCUSEVENT.SELF_CHANGED:\n      case LOCUSEVENT.PARTICIPANT_UPDATED:\n      case LOCUSEVENT.PARTICIPANT_CONTROLS_UPDATED:\n      case LOCUSEVENT.PARTICIPANT_ROLES_UPDATED:\n      case LOCUSEVENT.PARTICIPANT_DECLINED:\n      case LOCUSEVENT.FLOOR_GRANTED:\n      case LOCUSEVENT.FLOOR_RELEASED:\n        this.onFullLocus(data.locus, eventType);\n        break;\n      case LOCUSEVENT.DIFFERENCE:\n        Parser.updateWithDeltaLocus(data.locus, meeting);\n        break;\n\n      default:\n        // Why will there be a event with no eventType ????\n        // we may not need this, we can get full locus\n        Parser.updateWithDeltaLocus(data.locus, meeting);\n    }\n  }\n\n  /**\n   * @param {String} scope\n   * @param {String} eventName\n   * @param {Array} args\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  emitScoped(scope, eventName, args) {\n    return this.emit(scope, eventName, args);\n  }\n\n  /**\n   * updates the locus with full locus object\n   * @param {object} locus locus object\n   * @param {sting} eventType particulat locus event\n   * @returns {object} null\n   * @memberof LocusInfo\n   */\n  onFullLocus(locus, eventType) {\n    if (!locus) {\n      LoggerProxy.logger.error('LocusInfo->onFullLocus#Locus object passed as argument was invalid, continuing.');\n    }\n    this.participants = locus.participants;\n    this.updateLocusInfo(locus);\n    this.updateParticipants(locus.participants);\n    this.isMeetingActive();\n    this.handleOneOnOneEvent(eventType);\n  }\n\n  // used for ringing stops on one on one\n  /**\n   * @param {String} eventType\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  handleOneOnOneEvent(eventType) {\n    if (this.parsedLocus.info.type === _CALL_) {\n    // for 1:1 bob calls alice and alice declines, notify the meeting state\n      if (eventType === LOCUSEVENT.PARTICIPANT_DECLINED) {\n      // trigger the event for stop ringing\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'handleOneonOneEvent'\n          },\n          EVENTS.REMOTE_ANSWERED_DECLINED,\n          {\n            remoteDeclined: true,\n            remoteAnswered: false\n          }\n        );\n      }\n      // for 1:1 bob calls alice and alice answers, notify the meeting state\n      if (eventType === LOCUSEVENT.PARTICIPANT_JOIN) {\n      // trigger the event for stop ringing\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'handleOneonOneEvent'\n          },\n          EVENTS.REMOTE_ANSWERED_DECLINED,\n          {\n            remoteDeclined: false,\n            remoteAnswered: true\n          }\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {Object} locus\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  onDeltaLocus(locus) {\n    this.updateLocusInfo(locus);\n    this.updateParticipants(locus.participants);\n    this.isMeetingActive();\n  }\n\n  /**\n   * @param {Object} locus\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateLocusInfo(locus) {\n    this.updateControls(locus.controls);\n    this.updateConversationUrl(locus.conversationUrl, locus.info);\n    this.updateCreated(locus.created);\n    this.updateFullState(locus.fullState);\n    this.updateHostInfo(locus.host);\n    this.updateMeetingInfo(locus.info, locus.self);\n    this.updateMediaShares(locus.mediaShares);\n    this.updateParticipantsUrl(locus.participantsUrl);\n    this.updateReplace(locus.replace);\n    this.updateSelf(locus.self, locus.participants);\n    this.updateLocusUrl(locus.url);\n    this.updateAclUrl(locus.aclUrl);\n    this.updateBasequence(locus.baseSequence);\n    this.updateSequence(locus.sequence);\n    this.updateMemberShip(locus.membership);\n    this.updateIdentifiers(locus.identities);\n    this.compareAndUpdate();\n    // update which required to compare different objects from locus\n  }\n\n  /**\n   * @param {Array} participants\n   * @param {Object} self\n   * @returns {Array}\n   * @memberof LocusInfo\n   */\n  getLocusPartner(participants, self) {\n    if (!participants || participants.length === 0) {\n      return null;\n    }\n\n    return participants.find((participant) =>\n      (self && participant.identity !== self.identity) &&\n  (participants.length <= 2 || (participant.type === _USER_ && !participant.removed))) || this.partner;\n  }\n\n  // TODO: all the leave states need to be checked\n  /**\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  isMeetingActive() {\n    if (this.parsedLocus.fullState.type === _CALL_) {\n      const partner = this.getLocusPartner(this.participants, this.self);\n\n      this.updateMeeting({partner});\n\n      // Check if guest user needs to be checked here\n\n      // 1) when bob declines call from bob, (bob='DECLINED')\n      // 2) When alice rejects call to bob , (bob='NOTIFIED')\n\n      // When we dont add MEDIA for condition 2. The state of bob='IDLE'\n\n      if (this.fullState && this.fullState.state === LOCUS.STATE.INACTIVE) {\n        // TODO: update the meeting state\n        LoggerProxy.logger.warn('LocusInfo#isMeetingActive-> Call Ended, locus state is inactive.');\n        Metrics.postEvent({\n          event: eventType.REMOTE_ENDED,\n          meetingId: this.meetingId\n        });\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: CALL_REMOVED_REASON.CALL_INACTIVE,\n            shouldLeave: false\n          }\n        );\n      }\n      else\n      if (partner.state === MEETING_STATE.STATES.LEFT &&\n        this.parsedLocus.self &&\n        (this.parsedLocus.self.state === MEETING_STATE.STATES.DECLINED ||\n        this.parsedLocus.self.state === MEETING_STATE.STATES.NOTIFIED ||\n        this.parsedLocus.self.state === MEETING_STATE.STATES.JOINED)) {\n        Metrics.postEvent({\n          event: eventType.REMOTE_ENDED,\n          meetingId: this.meetingId\n        });\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: CALL_REMOVED_REASON.PARTNER_LEFT,\n            shouldLeave: this.parsedLocus.self.joinedWith && this.parsedLocus.self.joinedWith.state !== _LEFT_\n          }\n        );\n      }\n      else\n      if (this.parsedLocus.self &&\n        this.parsedLocus.self.state === MEETING_STATE.STATES.LEFT &&\n      (partner.state === MEETING_STATE.STATES.LEFT ||\n      partner.state === MEETING_STATE.STATES.DECLINED ||\n      partner.state === MEETING_STATE.STATES.NOTIFIED ||\n      partner.state === MEETING_STATE.STATES.IDLE) // Happens when user just joins and adds no Media\n      ) {\n        Metrics.postEvent({\n          event: eventType.REMOTE_ENDED,\n          meetingId: this.meetingId\n        });\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: CALL_REMOVED_REASON.SELF_LEFT,\n            shouldLeave: false\n          }\n        );\n      }\n    }\n    else if (this.parsedLocus.fullState.type === _MEETING_) {\n      if (this.fullState && (this.fullState.state === LOCUS.STATE.INACTIVE || this.fullState.state === LOCUS.STATE.TERMINATING)) {\n        Metrics.postEvent({\n          event: eventType.REMOTE_ENDED,\n          meetingId: this.meetingId\n        });\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: MEETING_REMOVED_REASON.MEETING_INACTIVE_TERMINATING,\n            shouldLeave: false\n          }\n        );\n      }\n      else if (this.fullState.removed) {\n        // user has been dropped from a meeting\n        Metrics.postEvent({\n          event: eventType.REMOTE_ENDED,\n          meetingId: this.meetingId\n        });\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: MEETING_REMOVED_REASON.FULLSTATE_REMOVED,\n            shouldLeave: false\n          }\n        );\n      }\n      // If you are  guest and you are removed from the meeting\n      // You wont get any further events\n      else if (this.parsedLocus.self.removed) {\n        // Check if we need to send an event\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: MEETING_REMOVED_REASON.SELF_REMOVED,\n            shouldLeave: false\n          }\n        );\n      }\n    }\n    else {\n      LoggerProxy.logger.warn('LocusInfo#isMeetingActive-> Meeting Type is unknown.');\n    }\n  }\n\n  /**\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  compareAndUpdate() {\n    if (this.compareAndUpdateFlags.compareSelfAndHost || this.compareAndUpdateFlags.compareHostAndSelf) {\n      this.compareSelfAndHost();\n    }\n  }\n\n  /**\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  compareSelfAndHost() {\n    if ((this.parsedLocus.self.selfIdentity === this.parsedLocus.host.hostId) && this.parsedLocus.self.moderator) {\n      this.emitScoped(\n        {\n          file: 'locus-info',\n          function: 'compareSelfAndHost'\n        },\n        EVENTS.LOCUS_INFO_CAN_ASSIGN_HOST,\n        {\n          canAssignHost: true\n        }\n      );\n    }\n    else {\n      this.emitScoped(\n        {\n          file: 'locus-info',\n          function: 'compareSelfAndHost'\n        },\n        EVENTS.LOCUS_INFO_CAN_ASSIGN_HOST,\n        {\n          canAssignHost: false\n        }\n      );\n    }\n  }\n\n  /**\n   *\n   * @param {Object} participants new participants object\n   * @param {boolen} deltaParticpantFlag  delta event\n   * @returns {Array} updatedParticipants\n   * @memberof LocusInfo\n   */\n  updateParticipants(participants) {\n    this.emitScoped(\n      {\n        file: 'locus-info',\n        function: 'updateParticipants'\n      },\n      EVENTS.LOCUS_INFO_UPDATE_PARTICIPANTS,\n      {\n        participants,\n        recordingId: this.parsedLocus.controls && this.parsedLocus.controls.recordingId,\n        selfIdentity: this.parsedLocus.self && this.parsedLocus.self.selfIdentity,\n        selfId: this.parsedLocus.self && this.parsedLocus.self.selfId,\n        hostId: this.parsedLocus.host && this.parsedLocus.host.hostId\n      }\n    );\n  }\n\n  /**\n   * @param {Object} controls\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateControls(controls) {\n    if (controls && !isEqual(this.controls, controls)) {\n      this.controls = controls;\n      this.parsedLocus.controls = ControlsUtils.parse(controls);\n    }\n  }\n\n  /**\n   * @param {String} conversationUrl\n   * @param {Object} info\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateConversationUrl(conversationUrl, info) {\n    if (conversationUrl && !isEqual(this.conversationUrl, conversationUrl)) {\n      this.conversationUrl = conversationUrl;\n      this.updateMeeting({convoUrl: conversationUrl});\n    }\n    else if (info && info.conversationUrl && !isEqual(this.conversationUrl, info.conversationUrl)) {\n      this.conversationUrl = info.conversationUrl;\n      this.updateMeeting({convoUrl: info.conversationUrl});\n    }\n  }\n\n  /**\n   * @param {Object} created\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateCreated(created) {\n    if (created && !isEqual(this.created, created)) {\n      this.created = created;\n    }\n  }\n\n\n  /**\n   * @param {Object} fullState\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateFullState(fullState) {\n    if (fullState && !isEqual(this.fullState, fullState)) {\n      const result = FullState.getFullState(this.fullState, fullState);\n\n      this.updateMeeting(result.current);\n\n      if (result.updates.meetingStateChangedTo) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateFullState'\n          },\n          LOCUSINFO.EVENTS.FULL_STATE_MEETING_STATE_CHANGE,\n          {\n            previousState: result.previous && result.previous.meetingState,\n            currentState: result.current.meetingState\n          }\n        );\n      }\n\n      if (result.updates.meetingTypeChangedTo) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateFullState'\n          },\n          LOCUSINFO.EVENTS.FULL_STATE_TYPE_UPDATE,\n          {\n            type: result.current.type\n          }\n        );\n      }\n      this.parsedLocus.fullState = result.current;\n      this.fullState = fullState;\n    }\n  }\n\n  /**\n   * handles when the locus.host is updated\n   * @param {Object} host the locus.host property\n   * @returns {undefined}\n   * @memberof LocusInfo\n   * emits internal event locus_info_update_host\n   */\n  updateHostInfo(host) {\n    if (host && !isEqual(this.host, host)) {\n      const parsedHosts = HostUtils.getHosts(this.host, host);\n\n      this.updateMeeting(parsedHosts.current);\n      this.parsedLocus.host = parsedHosts.current;\n      if (parsedHosts.updates.isNewHost) {\n        this.compareAndUpdateFlags.compareSelfAndHost = true;\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateHostInfo'\n          },\n          EVENTS.LOCUS_INFO_UPDATE_HOST,\n          {\n            newHost: parsedHosts.current,\n            oldHost: parsedHosts.previous\n          }\n        );\n      }\n      this.host = host;\n    }\n    else {\n      this.compareAndUpdateFlags.compareSelfAndHost = false;\n    }\n  }\n\n  /**\n   * @param {Object} info\n   * @param {Object} self\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateMeetingInfo(info, self) {\n    if (info && (!isEqual(this.info, info) ||\n    !isEqual(InfoUtils.parsePolicy(info), InfoUtils.parsePolicy(this.info)) ||\n    !isEqual(InfoUtils.parseModerator(info) || InfoUtils.parseModerator(info)))) {\n      const parsedInfo = InfoUtils.getInfos(this.parsedLocus.info, info);\n\n      this.emitScoped(\n        {\n          file: 'locus-info',\n          function: 'updateMeetingInfo'\n        },\n        LOCUSINFO.EVENTS.MEETING_INFO_UPDATED,\n        {info: parsedInfo.current, self}\n      );\n\n      if (parsedInfo.updates.isLocked) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateMeetingInfo'\n          },\n          LOCUSINFO.EVENTS.MEETING_LOCKED,\n          info\n        );\n      }\n      if (parsedInfo.updates.isUnlocked) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateMeetingInfo'\n          },\n          LOCUSINFO.EVENTS.MEETING_UNLOCKED,\n          info\n        );\n      }\n\n      this.info = info;\n      this.parsedLocus.info = parsedInfo.current;\n      // Parses the info and adds necessary values\n      this.updateMeeting(parsedInfo.current);\n    }\n  }\n\n  /**\n   * handles when the locus.mediaShares is updated\n   * @param {Object} mediaShares the locus.mediaShares property\n   * @returns {undefined}\n   * @memberof LocusInfo\n   * emits internal event locus_info_update_media_shares\n   */\n  updateMediaShares(mediaShares) {\n    if (mediaShares && !isEqual(this.mediaShares, mediaShares)) {\n      const parsedMediaShares = MediaSharesUtils.getMediaShares(this.mediaShares, mediaShares);\n\n      this.updateMeeting(parsedMediaShares.current);\n      this.emitScoped(\n        {\n          file: 'locus-info',\n          function: 'updateMediaShares'\n        },\n        EVENTS.LOCUS_INFO_UPDATE_MEDIA_SHARES,\n        {\n          current: parsedMediaShares.current,\n          previous: parsedMediaShares.previous\n        }\n      );\n      this.parsedLocus.mediaShares = parsedMediaShares.current;\n      this.mediaShares = mediaShares;\n    }\n  }\n\n  /**\n   * @param {String} participantsUrl\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateParticipantsUrl(participantsUrl) {\n    if (participantsUrl && !isEqual(this.participantsUrl, participantsUrl)) {\n      this.participantsUrl = participantsUrl;\n    }\n  }\n\n  /**\n   * @param {Object} replace\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateReplace(replace) {\n    if (replace && !isEqual(this.replace, replace)) {\n      this.replace = replace;\n    }\n  }\n\n  /**\n   * handles when the locus.self is updated\n   * @param {Object} self the locus.mediaShares property\n   * @param {Array} participants the locus.participants property\n   * @returns {undefined}\n   * @memberof LocusInfo\n   * emits internal events self_admitted_guest, self_unadmitted_guest, locus_info_update_self\n   */\n  updateSelf(self, participants) {\n    if (self && !isEqual(this.self, self)) {\n      const parsedSelves = SelfUtils.getSelves(this.self, self, this.webex.internal.device.url);\n\n      this.updateMeeting(parsedSelves.current);\n      this.parsedLocus.self = parsedSelves.current;\n\n      const element = this.parsedLocus.states[this.parsedLocus.states.length - 1];\n\n      if (element !== parsedSelves.current.state) {\n        this.parsedLocus.states.push(parsedSelves.current.state);\n      }\n\n      // TODO: check if we need to save the sipUri here as well\n      // this.emit(LOCUSINFO.EVENTS.MEETING_UPDATE, SelfUtils.getSipUrl(this.getLocusPartner(participants, self), this.parsedLocus.fullState.type, this.parsedLocus.info.sipUri));\n      const result = SelfUtils.getSipUrl(this.getLocusPartner(participants, self), this.parsedLocus.fullState.type, this.parsedLocus.info.sipUri);\n\n      if (result.sipUri) {\n        this.updateMeeting(result);\n      }\n      if (parsedSelves.updates.moderatorChanged) {\n        this.compareAndUpdateFlags.compareHostAndSelf = true;\n      }\n      else {\n        this.compareAndUpdateFlags.compareHostAndSelf = false;\n      }\n\n      if (parsedSelves.updates.moderatorChanged) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateSelf'\n          },\n          LOCUSINFO.EVENTS.SELF_MODERATOR_CHANGED,\n          self\n        );\n      }\n      if (parsedSelves.updates.mutedByOthers) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateSelf'\n          },\n          LOCUSINFO.EVENTS.SELF_MUTED_BY_OTHERS,\n          self\n        );\n      }\n      if (parsedSelves.updates.isUnadmittedGuest) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateSelf'\n          },\n          LOCUSINFO.EVENTS.SELF_UNADMITTED_GUEST,\n          self\n        );\n      }\n      if (parsedSelves.updates.isAdmittedGuest) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateSelf'\n          },\n          LOCUSINFO.EVENTS.SELF_ADMITTED_GUEST,\n          self\n        );\n      }\n      this.emitScoped(\n        {\n          file: 'locus-info',\n          function: 'updateSelf'\n        },\n        EVENTS.LOCUS_INFO_UPDATE_SELF,\n        {\n          oldSelf: parsedSelves.previous,\n          newSelf: parsedSelves.current\n        }\n      );\n      this.parsedLocus.self = parsedSelves.current;\n      this.self = self;\n    }\n    else {\n      this.compareAndUpdateFlags.compareHostAndSelf = false;\n    }\n  }\n\n  /**\n   * handles when the locus.url is updated\n   * @param {String} url\n   * @returns {undefined}\n   * emits internal event locus_info_update_url\n   */\n  updateLocusUrl(url) {\n    if (url && this.url !== url) {\n      this.url = url;\n      this.updateMeeting({locusUrl: url});\n      this.emitScoped(\n        {\n          file: 'locus-info',\n          function: 'updateLocusUrl'\n        },\n        EVENTS.LOCUS_INFO_UPDATE_URL,\n        url\n      );\n    }\n  }\n\n  /**\n   * @param {String} aclUrl\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateAclUrl(aclUrl) {\n    if (aclUrl && !isEqual(this.aclUrl, aclUrl)) {\n      this.aclUrl = aclUrl;\n    }\n  }\n\n  /**\n   * @param {Number} baseSequence\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateBasequence(baseSequence) {\n    if (baseSequence && !isEqual(this.baseSequence, baseSequence)) {\n      this.baseSequence = baseSequence;\n    }\n  }\n\n  /**\n   * @param {Number} sequence\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateSequence(sequence) {\n    if (sequence && !isEqual(this.sequence, sequence)) {\n      this.sequence = sequence;\n    }\n  }\n\n  /**\n   * @param {Object} membership\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateMemberShip(membership) {\n    if (membership && !isEqual(this.membership, membership)) {\n      this.membership = membership;\n    }\n  }\n\n  /**\n   * @param {Array} identities\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateIdentifiers(identities) {\n    if (identities && !isEqual(this.identities, identities)) {\n      this.identities = identities;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}