{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _querystring = require('querystring');\n\nvar _querystring2 = _interopRequireDefault(_querystring);\n\nvar _common = require('@webex/common');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @class\n * @extends {Lyra}\n * @memberof Lyra\n */\n\n\nvar Space = _webexCore.WebexPlugin.extend({\n  namespace: 'Lyra',\n\n  /**\n   * Lists lyra spaces associated with user\n   *\n   * @returns {Promise<Array>} spaces\n   */\n  list: function list() {\n    return this.webex.request({\n      method: 'GET',\n      api: 'lyra',\n      resource: '/spaces'\n    }).then(function (res) {\n      return res.body.items;\n    });\n  },\n\n  /**\n   * Retrieves a lyra space info\n   * @param {Types~LyraSpace} space\n   * @param {string} space.id\n   * @param {string} space.identity.id\n   * @returns {Promise<LyraSpace>} response body\n   */\n  get: function get() {\n    var space = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var spaceId = space.id || space.identity && space.identity.id;\n\n    if (!spaceId) {\n      return _promise2.default.reject(new Error('space.id is required'));\n    }\n\n    return this.webex.request({\n      method: 'GET',\n      api: 'lyra',\n      resource: '/spaces/' + spaceId\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Joins a lyra space, update every 10 minutes to keep alive for MANUAL\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {object} options\n   * @param {string} options.passType\n   * @param {string} options.data additional data such as proof for ultrasound\n   * @param {string} options.uri use a custom uri\n   * @returns {Promise}\n   */\n  join: function join(space, options) {\n    options = (0, _assign2.default)({\n      passType: 'MANUAL'\n    }, options);\n    var body = {\n      pass: {\n        type: options.passType\n      },\n      deviceUrl: this.webex.internal.device.url\n    };\n\n    if (options.data) {\n      body.pass.data = options.data;\n    }\n\n    if (options.verificationInitiation) {\n      body.verificationInitiation = options.verificationInitiation;\n    } // if options.uri is available use it, since that would have the\n    // complete lyra service URL\n\n\n    if (options.uri) {\n      return this.webex.request({\n        method: 'PUT',\n        uri: options.uri,\n        body: body\n      });\n    }\n\n    return this.webex.request({\n      method: 'PUT',\n      api: 'lyra',\n      resource: space.url + '/occupants/@me',\n      body: body\n    });\n  },\n\n  /**\n   * Leaves a lyra space\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {object} options\n   * @param {boolean} options.removeAllDevices remove all devices of current user also\n   * @returns {Promise}\n   */\n  leave: function leave(space) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // all devices are removed by default (when deviceUrl is not supplied)\n\n    var uri = space.url + '/occupants/@me';\n\n    if (!options.removeAllDevices) {\n      var params = {\n        deviceUrl: _common.base64.toBase64Url(this.webex.internal.device.url)\n      };\n      uri += '?' + _querystring2.default.stringify(params);\n    }\n\n    return this.webex.request({\n      method: 'DELETE',\n      api: 'lyra',\n      resource: uri\n    });\n  },\n\n  /**\n   * Verifies a space occupant (to be used by the lyra device)\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {string} occupantId id of user to verify\n   * @returns {Promise}\n   */\n  verifyOccupant: function verifyOccupant(space, occupantId) {\n    var body = {\n      pass: {\n        type: 'VERIFICATION'\n      }\n    };\n    return this.webex.request({\n      method: 'PUT',\n      uri: space.url + '/occupants/' + occupantId,\n      body: body\n    });\n  },\n\n  /**\n   * Gets the state of bindings in this Lyra space\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  getCurrentBindings: function getCurrentBindings(space) {\n    return this.webex.request({\n      method: 'GET',\n      uri: space.url + '/bindings'\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Binds a conversation to lyra space\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {string} space.id\n   * @param {string} space.identity.id\n   * @param {Types~Conversation} conversation\n   * @param {string} conversation.kmsResourceObjectUrl\n   * @param {string} conversation.url\n   * @param {object} options\n   * @param {boolean} options.uri complete lyra service URL\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  bindConversation: function bindConversation() {\n    var space = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _this = this;\n\n    var conversation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var spaceId = space.id || space.identity && space.identity.id;\n\n    if (!space.url) {\n      return _promise2.default.reject(new Error('space.url is required'));\n    }\n\n    if (!spaceId) {\n      return _promise2.default.reject(new Error('space.id is required'));\n    }\n\n    if (!conversation.kmsResourceObjectUrl) {\n      return _promise2.default.reject(new Error('conversation.kmsResourceObjectUrl is required'));\n    }\n\n    if (!conversation.url) {\n      return _promise2.default.reject(new Error('conversation.url is required'));\n    }\n\n    var body = {\n      kmsMessage: {\n        method: 'create',\n        uri: '/authorizations',\n        resourceUri: '' + conversation.kmsResourceObjectUrl,\n        userIds: [spaceId]\n      },\n      conversationUrl: conversation.url\n    };\n    var request = {\n      method: 'POST',\n      body: body\n    }; // if options.uri is available use it, since that would have the\n    // complete lyra service URL\n\n    if (options.uri) {\n      request.uri = options.uri;\n    } else {\n      request.api = 'lyra';\n      request.resource = space.url + '/bindings';\n    }\n\n    return this._bindConversation(spaceId).then(function () {\n      return _this.webex.request(request);\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Binds a conversation to lyra space by posting capabilities to Lyra.\n   *\n   * Lyra no longer automatically enables binding for a space containing a device with type \"SPARK_BOARD\".\n   * Webexboard now is running the CE code stack which supports posting of capabilities to Lyra.\n   * @param {String} spaceId space ID\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  _bindConversation: function _bindConversation(spaceId) {\n    // Skip until we can bind a conversation to lyra space by posting capabilities to Lyra.\n\n    /* eslint no-unreachable: 1 */\n    return _promise2.default.resolve(); // PUT /lyra/api/v1/spaces/{spaceId}/devices/{encodedDeviceUrl}/capabilities\n\n    var encodedDeviceUrl = _common.base64.encode(this.webex.internal.device.url);\n\n    var resource = 'spaces/' + spaceId + '/devices/' + encodedDeviceUrl + '/capabilities';\n    return this.webex.request({\n      method: 'PUT',\n      api: 'lyra',\n      resource: resource,\n      body: {\n        bindingCleanupAfterCall: true\n      }\n    });\n  },\n\n  /**\n   * Removes binding between a conversation and a lyra space using conversation\n   * url\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {string} space.id\n   * @param {string} space.identity.id\n   * @param {Types~Conversation} conversation\n   * @param {string} conversation.kmsResourceObjectUrl\n   * @param {string} conversation.url\n   * @param {object} options\n   * @param {boolean} options.uri complete lyra service URL\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  unbindConversation: function unbindConversation() {\n    var space = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _this2 = this;\n\n    var conversation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var spaceId = space.id || space.identity && space.identity.id;\n\n    if (!space.url) {\n      return _promise2.default.reject(new Error('space.url is required'));\n    }\n\n    if (!spaceId) {\n      return _promise2.default.reject(new Error('space.id is required'));\n    }\n\n    if (!conversation.url) {\n      return _promise2.default.reject(new Error('conversation.url is required'));\n    }\n\n    if (!conversation.kmsResourceObjectUrl) {\n      return _promise2.default.reject(new Error('conversation.kmsResourceObjectUrl is required'));\n    }\n\n    var parameters = {\n      kmsMessage: {\n        method: 'delete',\n        uri: conversation.kmsResourceObjectUrl + '/authorizations?' + _querystring2.default.stringify({\n          authId: spaceId\n        })\n      },\n      conversationUrl: _common.base64.toBase64Url(conversation.url)\n    };\n    return this.webex.internal.encryption.kms.prepareRequest(parameters.kmsMessage).then(function (req) {\n      parameters.kmsMessage = req.wrapped; // if options.uri is available use it, since that would have the\n      // complete lyra service URL\n\n      if (options.uri) {\n        return _this2.webex.request({\n          method: 'DELETE',\n          uri: options.uri + '?' + _querystring2.default.stringify(parameters)\n        });\n      }\n\n      return _this2.webex.request({\n        method: 'DELETE',\n        api: 'lyra',\n        resource: space.url + '/bindings?' + _querystring2.default.stringify(parameters)\n      });\n    });\n  },\n\n  /**\n   * Delete a binding using binding id\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {string} space.identity.id\n   * @param {object} options\n   * @param {string} options.kmsResourceObjectUrl\n   * @param {string} options.bindingId\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  deleteBinding: function deleteBinding() {\n    var _this3 = this;\n\n    var space = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var spaceId = space.id || space.identity && space.identity.id;\n\n    if (!space.url) {\n      return _promise2.default.reject(new Error('space.url is required'));\n    }\n\n    if (!spaceId) {\n      return _promise2.default.reject(new Error('space.id is required'));\n    }\n\n    if (!options.kmsResourceObjectUrl) {\n      return _promise2.default.reject(new Error('options.kmsResourceObjectUrl is required'));\n    }\n\n    if (!options.bindingId) {\n      return _promise2.default.reject(new Error('options.bindingId is required'));\n    }\n\n    var parameters = {\n      kmsMessage: {\n        method: 'delete',\n        uri: options.kmsResourceObjectUrl + '/authorizations?' + _querystring2.default.stringify({\n          authId: spaceId\n        })\n      }\n    };\n    return this.webex.internal.encryption.kms.prepareRequest(parameters.kmsMessage).then(function (req) {\n      parameters.kmsMessage = req.wrapped;\n      return _this3.webex.request({\n        method: 'DELETE',\n        uri: space.url + '/bindings/' + options.bindingId + '?' + _querystring2.default.stringify(parameters)\n      });\n    });\n  },\n  version: '1.80.172'\n});\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nexports.default = Space;","map":{"version":3,"sources":["space.js"],"names":["Space","namespace","list","method","api","resource","res","get","space","spaceId","join","options","passType","body","pass","type","deviceUrl","url","uri","leave","params","base64","querystring","verifyOccupant","getCurrentBindings","bindConversation","conversation","kmsMessage","resourceUri","userIds","conversationUrl","request","_bindConversation","encodedDeviceUrl","bindingCleanupAfterCall","unbindConversation","parameters","authId","req","deleteBinding"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin} from '@webex/webex-core';\nimport querystring from 'querystring';\nimport {base64} from '@webex/common';\n\n/**\n * @class\n * @extends {Lyra}\n * @memberof Lyra\n */\nconst Space = WebexPlugin.extend({\n  namespace: 'Lyra',\n\n  /**\n   * Lists lyra spaces associated with user\n   *\n   * @returns {Promise<Array>} spaces\n   */\n  list() {\n    return this.webex.request({\n      method: 'GET',\n      api: 'lyra',\n      resource: '/spaces'\n    })\n      .then((res) => res.body.items);\n  },\n\n  /**\n   * Retrieves a lyra space info\n   * @param {Types~LyraSpace} space\n   * @param {string} space.id\n   * @param {string} space.identity.id\n   * @returns {Promise<LyraSpace>} response body\n   */\n  get(space = {}) {\n    const spaceId = space.id || space.identity && space.identity.id;\n\n    if (!spaceId) {\n      return Promise.reject(new Error('space.id is required'));\n    }\n\n    return this.webex.request({\n      method: 'GET',\n      api: 'lyra',\n      resource: `/spaces/${spaceId}`\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Joins a lyra space, update every 10 minutes to keep alive for MANUAL\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {object} options\n   * @param {string} options.passType\n   * @param {string} options.data additional data such as proof for ultrasound\n   * @param {string} options.uri use a custom uri\n   * @returns {Promise}\n   */\n  join(space, options) {\n    options = Object.assign({\n      passType: 'MANUAL'\n    }, options);\n\n    const body = {\n      pass: {\n        type: options.passType\n      },\n      deviceUrl: this.webex.internal.device.url\n    };\n\n    if (options.data) {\n      body.pass.data = options.data;\n    }\n\n    if (options.verificationInitiation) {\n      body.verificationInitiation = options.verificationInitiation;\n    }\n\n    // if options.uri is available use it, since that would have the\n    // complete lyra service URL\n    if (options.uri) {\n      return this.webex.request({\n        method: 'PUT',\n        uri: options.uri,\n        body\n      });\n    }\n\n    return this.webex.request({\n      method: 'PUT',\n      api: 'lyra',\n      resource: `${space.url}/occupants/@me`,\n      body\n    });\n  },\n\n  /**\n   * Leaves a lyra space\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {object} options\n   * @param {boolean} options.removeAllDevices remove all devices of current user also\n   * @returns {Promise}\n   */\n  leave(space, options = {}) {\n    // all devices are removed by default (when deviceUrl is not supplied)\n    let uri = `${space.url}/occupants/@me`;\n\n    if (!options.removeAllDevices) {\n      const params = {\n        deviceUrl: base64.toBase64Url(this.webex.internal.device.url)\n      };\n\n      uri += `?${querystring.stringify(params)}`;\n    }\n\n    return this.webex.request({\n      method: 'DELETE',\n      api: 'lyra',\n      resource: uri\n    });\n  },\n\n  /**\n   * Verifies a space occupant (to be used by the lyra device)\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {string} occupantId id of user to verify\n   * @returns {Promise}\n   */\n  verifyOccupant(space, occupantId) {\n    const body = {\n      pass: {\n        type: 'VERIFICATION'\n      }\n    };\n\n    return this.webex.request({\n      method: 'PUT',\n      uri: `${space.url}/occupants/${occupantId}`,\n      body\n    });\n  },\n\n\n  /**\n   * Gets the state of bindings in this Lyra space\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  getCurrentBindings(space) {\n    return this.webex.request({\n      method: 'GET',\n      uri: `${space.url}/bindings`\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Binds a conversation to lyra space\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {string} space.id\n   * @param {string} space.identity.id\n   * @param {Types~Conversation} conversation\n   * @param {string} conversation.kmsResourceObjectUrl\n   * @param {string} conversation.url\n   * @param {object} options\n   * @param {boolean} options.uri complete lyra service URL\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  bindConversation(space = {}, conversation = {}, options = {}) {\n    const spaceId = space.id || space.identity && space.identity.id;\n\n    if (!space.url) {\n      return Promise.reject(new Error('space.url is required'));\n    }\n\n    if (!spaceId) {\n      return Promise.reject(new Error('space.id is required'));\n    }\n\n    if (!conversation.kmsResourceObjectUrl) {\n      return Promise.reject(new Error('conversation.kmsResourceObjectUrl is required'));\n    }\n\n    if (!conversation.url) {\n      return Promise.reject(new Error('conversation.url is required'));\n    }\n\n    const body = {\n      kmsMessage: {\n        method: 'create',\n        uri: '/authorizations',\n        resourceUri: `${conversation.kmsResourceObjectUrl}`,\n        userIds: [spaceId]\n      },\n      conversationUrl: conversation.url\n    };\n\n    const request = {\n      method: 'POST',\n      body\n    };\n\n    // if options.uri is available use it, since that would have the\n    // complete lyra service URL\n    if (options.uri) {\n      request.uri = options.uri;\n    }\n    else {\n      request.api = 'lyra';\n      request.resource = `${space.url}/bindings`;\n    }\n\n    return this._bindConversation(spaceId)\n      .then(() => this.webex.request(request))\n      .then((res) => res.body);\n  },\n\n  /**\n   * Binds a conversation to lyra space by posting capabilities to Lyra.\n   *\n   * Lyra no longer automatically enables binding for a space containing a device with type \"SPARK_BOARD\".\n   * Webexboard now is running the CE code stack which supports posting of capabilities to Lyra.\n   * @param {String} spaceId space ID\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  _bindConversation(spaceId) {\n    // Skip until we can bind a conversation to lyra space by posting capabilities to Lyra.\n    /* eslint no-unreachable: 1 */\n    return Promise.resolve();\n\n    // PUT /lyra/api/v1/spaces/{spaceId}/devices/{encodedDeviceUrl}/capabilities\n    const encodedDeviceUrl = base64.encode(this.webex.internal.device.url);\n    const resource = `spaces/${spaceId}/devices/${encodedDeviceUrl}/capabilities`;\n\n    return this.webex.request({\n      method: 'PUT',\n      api: 'lyra',\n      resource,\n      body: {\n        bindingCleanupAfterCall: true\n      }\n    });\n  },\n\n  /**\n   * Removes binding between a conversation and a lyra space using conversation\n   * url\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {string} space.id\n   * @param {string} space.identity.id\n   * @param {Types~Conversation} conversation\n   * @param {string} conversation.kmsResourceObjectUrl\n   * @param {string} conversation.url\n   * @param {object} options\n   * @param {boolean} options.uri complete lyra service URL\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  unbindConversation(space = {}, conversation = {}, options = {}) {\n    const spaceId = space.id || space.identity && space.identity.id;\n\n    if (!space.url) {\n      return Promise.reject(new Error('space.url is required'));\n    }\n\n    if (!spaceId) {\n      return Promise.reject(new Error('space.id is required'));\n    }\n\n    if (!conversation.url) {\n      return Promise.reject(new Error('conversation.url is required'));\n    }\n\n    if (!conversation.kmsResourceObjectUrl) {\n      return Promise.reject(new Error('conversation.kmsResourceObjectUrl is required'));\n    }\n\n    const parameters = {\n      kmsMessage: {\n        method: 'delete',\n        uri: `${conversation.kmsResourceObjectUrl}/authorizations?${querystring.stringify({authId: spaceId})}`\n      },\n      conversationUrl: base64.toBase64Url(conversation.url)\n    };\n\n    return this.webex.internal.encryption.kms.prepareRequest(parameters.kmsMessage)\n      .then((req) => {\n        parameters.kmsMessage = req.wrapped;\n        // if options.uri is available use it, since that would have the\n        // complete lyra service URL\n        if (options.uri) {\n          return this.webex.request({\n            method: 'DELETE',\n            uri: `${options.uri}?${querystring.stringify(parameters)}`\n          });\n        }\n\n        return this.webex.request({\n          method: 'DELETE',\n          api: 'lyra',\n          resource: `${space.url}/bindings?${querystring.stringify(parameters)}`\n        });\n      });\n  },\n\n  /**\n   * Delete a binding using binding id\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {string} space.identity.id\n   * @param {object} options\n   * @param {string} options.kmsResourceObjectUrl\n   * @param {string} options.bindingId\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  deleteBinding(space = {}, options = {}) {\n    const spaceId = space.id || space.identity && space.identity.id;\n\n    if (!space.url) {\n      return Promise.reject(new Error('space.url is required'));\n    }\n\n    if (!spaceId) {\n      return Promise.reject(new Error('space.id is required'));\n    }\n\n    if (!options.kmsResourceObjectUrl) {\n      return Promise.reject(new Error('options.kmsResourceObjectUrl is required'));\n    }\n\n    if (!options.bindingId) {\n      return Promise.reject(new Error('options.bindingId is required'));\n    }\n\n    const parameters = {\n      kmsMessage: {\n        method: 'delete',\n        uri: `${options.kmsResourceObjectUrl}/authorizations?${querystring.stringify({authId: spaceId})}`\n      }\n    };\n\n    return this.webex.internal.encryption.kms.prepareRequest(parameters.kmsMessage)\n      .then((req) => {\n        parameters.kmsMessage = req.wrapped;\n\n        return this.webex.request({\n          method: 'DELETE',\n          uri: `${space.url}/bindings/${options.bindingId}?${querystring.stringify(parameters)}`\n        });\n      });\n  }\n});\n\nexport default Space;\n"]},"metadata":{},"sourceType":"script"}