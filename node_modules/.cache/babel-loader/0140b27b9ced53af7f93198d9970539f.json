{"ast":null,"code":"/*!\n * algorithms/ec-util.js - Elliptic Curve Utility Functions\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\";\n\nvar clone = require(\"lodash.clone\"),\n    ecc = require(\"../deps/ecc\"),\n    forge = require(\"../deps/forge.js\"),\n    util = require(\"../util\");\n\nvar EC_KEYSIZES = {\n  \"P-256\": 256,\n  \"P-384\": 384,\n  \"P-521\": 521\n};\n\nfunction convertToForge(key, isPublic) {\n  var parts = isPublic ? [\"x\", \"y\"] : [\"d\"];\n  parts = parts.map(function (f) {\n    return new forge.jsbn.BigInteger(key[f].toString(\"hex\"), 16);\n  }); // prefix with curve\n\n  parts = [key.crv].concat(parts);\n  var fn = isPublic ? ecc.asPublicKey : ecc.asPrivateKey;\n  return fn.apply(ecc, parts);\n}\n\nfunction convertToJWK(key, isPublic) {\n  var result = clone(key);\n  var parts = isPublic ? [\"x\", \"y\"] : [\"x\", \"y\", \"d\"];\n  parts.forEach(function (f) {\n    result[f] = util.base64url.encode(result[f]);\n  }); // remove potentially troublesome properties\n\n  delete result.key_ops;\n  delete result.use;\n  delete result.alg;\n\n  if (isPublic) {\n    delete result.d;\n  }\n\n  return result;\n}\n\nfunction convertToObj(key, isPublic) {\n  var result = clone(key);\n  var parts = isPublic ? [\"x\", \"y\"] : [\"d\"];\n  parts.forEach(function (f) {\n    // assume string if base64url-encoded\n    result[f] = util.asBuffer(result[f], \"base64url\");\n  });\n  return result;\n}\n\nvar UNCOMPRESSED = new Buffer([0x04]);\n\nfunction convertToBuffer(key, isPublic) {\n  key = convertToObj(key, isPublic);\n  var result = isPublic ? Buffer.concat([UNCOMPRESSED, key.x, key.y]) : key.d;\n  return result;\n}\n\nfunction curveSize(crv) {\n  return EC_KEYSIZES[crv || \"\"] || NaN;\n}\n\nmodule.exports = {\n  convertToForge: convertToForge,\n  convertToJWK: convertToJWK,\n  convertToObj: convertToObj,\n  convertToBuffer: convertToBuffer,\n  curveSize: curveSize\n};","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/node-jose/lib/algorithms/ec-util.js"],"names":["clone","require","ecc","forge","util","EC_KEYSIZES","convertToForge","key","isPublic","parts","map","f","jsbn","BigInteger","toString","crv","concat","fn","asPublicKey","asPrivateKey","apply","convertToJWK","result","forEach","base64url","encode","key_ops","use","alg","d","convertToObj","asBuffer","UNCOMPRESSED","Buffer","convertToBuffer","x","y","curveSize","NaN","module","exports"],"mappings":"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","sourcesContent":["/*!\n * algorithms/ec-util.js - Elliptic Curve Utility Functions\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\";\n\nvar clone = require(\"lodash.clone\"),\n    ecc = require(\"../deps/ecc\"),\n    forge = require(\"../deps/forge.js\"),\n    util = require(\"../util\");\n\nvar EC_KEYSIZES = {\n  \"P-256\": 256,\n  \"P-384\": 384,\n  \"P-521\": 521\n};\n\nfunction convertToForge(key, isPublic) {\n  var parts = isPublic ?\n              [\"x\", \"y\"] :\n              [\"d\"];\n  parts = parts.map(function(f) {\n    return new forge.jsbn.BigInteger(key[f].toString(\"hex\"), 16);\n  });\n  // prefix with curve\n  parts = [key.crv].concat(parts);\n  var fn = isPublic ?\n           ecc.asPublicKey :\n           ecc.asPrivateKey;\n  return fn.apply(ecc, parts);\n}\n\nfunction convertToJWK(key, isPublic) {\n  var result = clone(key);\n  var parts = isPublic ?\n              [\"x\", \"y\"] :\n              [\"x\", \"y\", \"d\"];\n  parts.forEach(function(f) {\n    result[f] = util.base64url.encode(result[f]);\n  });\n\n  // remove potentially troublesome properties\n  delete result.key_ops;\n  delete result.use;\n  delete result.alg;\n\n  if (isPublic) {\n    delete result.d;\n  }\n\n  return result;\n}\n\nfunction convertToObj(key, isPublic) {\n  var result = clone(key);\n  var parts = isPublic ?\n              [\"x\", \"y\"] :\n              [\"d\"];\n  parts.forEach(function(f) {\n    // assume string if base64url-encoded\n    result[f] = util.asBuffer(result[f], \"base64url\");\n  });\n\n  return result;\n}\n\nvar UNCOMPRESSED = new Buffer([0x04]);\nfunction convertToBuffer(key, isPublic) {\n  key = convertToObj(key, isPublic);\n  var result = isPublic ?\n               Buffer.concat([UNCOMPRESSED, key.x, key.y]) :\n               key.d;\n  return result;\n}\n\nfunction curveSize(crv) {\n  return EC_KEYSIZES[crv || \"\"] || NaN;\n}\n\nmodule.exports = {\n  convertToForge: convertToForge,\n  convertToJWK: convertToJWK,\n  convertToObj: convertToObj,\n  convertToBuffer: convertToBuffer,\n  curveSize: curveSize\n};\n"]},"metadata":{},"sourceType":"script"}