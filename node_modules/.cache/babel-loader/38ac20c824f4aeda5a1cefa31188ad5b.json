{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nexport default class OtherRevocationInfoFormat {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for OtherRevocationInfoFormat class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc otherRevInfoFormat\r\n     */\n    this.otherRevInfoFormat = getParametersValue(parameters, \"otherRevInfoFormat\", OtherRevocationInfoFormat.defaultValues(\"otherRevInfoFormat\"));\n    /**\r\n     * @type {Any}\r\n     * @desc otherRevInfo\r\n     */\n\n    this.otherRevInfo = getParametersValue(parameters, \"otherRevInfo\", OtherRevocationInfoFormat.defaultValues(\"otherRevInfo\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"otherRevInfoFormat\":\n        return \"\";\n\n      case \"otherRevInfo\":\n        return new asn1js.Any();\n\n      default:\n        throw new Error(`Invalid member name for OtherRevocationInfoFormat class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * OtherCertificateFormat ::= SEQUENCE {\r\n   *    otherRevInfoFormat OBJECT IDENTIFIER,\r\n   *    otherRevInfo ANY DEFINED BY otherCertFormat }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [otherRevInfoFormat]\r\n     * @property {string} [otherRevInfo]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.ObjectIdentifier({\n        name: names.otherRevInfoFormat || \"otherRevInfoFormat\"\n      }), new asn1js.Any({\n        name: names.otherRevInfo || \"otherRevInfo\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"otherRevInfoFormat\", \"otherRevInfo\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, OtherRevocationInfoFormat.schema());\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for OtherRevocationInfoFormat\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.otherRevInfoFormat = asn1.result.otherRevInfoFormat.valueBlock.toString();\n    this.otherRevInfo = asn1.result.otherRevInfo; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [new asn1js.ObjectIdentifier({\n        value: this.otherRevInfoFormat\n      }), this.otherRevInfo]\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const object = {\n      otherRevInfoFormat: this.otherRevInfoFormat\n    };\n    if (!(this.otherRevInfo instanceof asn1js.Any)) object.otherRevInfo = this.otherRevInfo.toJSON();\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/OtherRevocationInfoFormat.js"],"names":["asn1js","getParametersValue","clearProps","OtherRevocationInfoFormat","constructor","parameters","otherRevInfoFormat","defaultValues","otherRevInfo","fromSchema","schema","memberName","Any","Error","names","Sequence","name","blockName","value","ObjectIdentifier","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class OtherRevocationInfoFormat\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherRevocationInfoFormat class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc otherRevInfoFormat\r\n\t\t */\r\n\t\tthis.otherRevInfoFormat = getParametersValue(parameters, \"otherRevInfoFormat\", OtherRevocationInfoFormat.defaultValues(\"otherRevInfoFormat\"));\r\n\t\t/**\r\n\t\t * @type {Any}\r\n\t\t * @desc otherRevInfo\r\n\t\t */\r\n\t\tthis.otherRevInfo = getParametersValue(parameters, \"otherRevInfo\", OtherRevocationInfoFormat.defaultValues(\"otherRevInfo\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"otherRevInfoFormat\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"otherRevInfo\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherRevocationInfoFormat class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OtherCertificateFormat ::= SEQUENCE {\r\n\t *    otherRevInfoFormat OBJECT IDENTIFIER,\r\n\t *    otherRevInfo ANY DEFINED BY otherCertFormat }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [otherRevInfoFormat]\r\n\t\t * @property {string} [otherRevInfo]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.otherRevInfoFormat || \"otherRevInfoFormat\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.otherRevInfo || \"otherRevInfo\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"otherRevInfoFormat\",\r\n\t\t\t\"otherRevInfo\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherRevocationInfoFormat.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherRevocationInfoFormat\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.otherRevInfoFormat = asn1.result.otherRevInfoFormat.valueBlock.toString();\r\n\t\tthis.otherRevInfo = asn1.result.otherRevInfo;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.otherRevInfoFormat }),\r\n\t\t\t\tthis.otherRevInfo\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\totherRevInfoFormat: this.otherRevInfoFormat\r\n\t\t};\r\n\r\n\t\tif(!(this.otherRevInfo instanceof asn1js.Any))\r\n\t\t\tobject.otherRevInfo = this.otherRevInfo.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}