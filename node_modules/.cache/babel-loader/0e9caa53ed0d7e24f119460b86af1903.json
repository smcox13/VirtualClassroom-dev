{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nexport default class Time {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for Time class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   * @property {number} [type] 0 - UTCTime; 1 - GeneralizedTime; 2 - empty value\r\n   * @property {Date} [value] Value of the TIME class\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc 0 - UTCTime; 1 - GeneralizedTime; 2 - empty value\r\n     */\n    this.type = getParametersValue(parameters, \"type\", Time.defaultValues(\"type\"));\n    /**\r\n     * @type {Date}\r\n     * @desc Value of the TIME class\r\n     */\n\n    this.value = getParametersValue(parameters, \"value\", Time.defaultValues(\"value\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"type\":\n        return 0;\n\n      case \"value\":\n        return new Date(0, 0, 0);\n\n      default:\n        throw new Error(`Invalid member name for Time class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * Time ::= CHOICE {\r\n      *   utcTime        UTCTime,\r\n      *   generalTime    GeneralizedTime }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @param {boolean} optional Flag that current schema should be optional\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}, optional = false) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [utcTimeName] Name for \"utcTimeName\" choice\r\n     * @property {string} [generalTimeName] Name for \"generalTimeName\" choice\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Choice({\n      optional,\n      value: [new asn1js.UTCTime({\n        name: names.utcTimeName || \"\"\n      }), new asn1js.GeneralizedTime({\n        name: names.generalTimeName || \"\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"utcTimeName\", \"generalTimeName\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, Time.schema({\n      names: {\n        utcTimeName: \"utcTimeName\",\n        generalTimeName: \"generalTimeName\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for Time\"); //endregion\n    //region Get internal properties from parsed schema\n\n    if (\"utcTimeName\" in asn1.result) {\n      this.type = 0;\n      this.value = asn1.result.utcTimeName.toDate();\n    }\n\n    if (\"generalTimeName\" in asn1.result) {\n      this.type = 1;\n      this.value = asn1.result.generalTimeName.toDate();\n    } //endregion\n\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    let result = {};\n    if (this.type === 0) result = new asn1js.UTCTime({\n      valueDate: this.value\n    });\n    if (this.type === 1) result = new asn1js.GeneralizedTime({\n      valueDate: this.value\n    });\n    return result; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      type: this.type,\n      value: this.value\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/Time.js"],"names":["asn1js","getParametersValue","clearProps","Time","constructor","parameters","type","defaultValues","value","fromSchema","schema","memberName","Date","Error","optional","names","Choice","UTCTime","name","utcTimeName","GeneralizedTime","generalTimeName","asn1","compareSchema","verified","result","toDate","toSchema","valueDate","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class Time\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Time class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {number} [type] 0 - UTCTime; 1 - GeneralizedTime; 2 - empty value\r\n\t * @property {Date} [value] Value of the TIME class\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc 0 - UTCTime; 1 - GeneralizedTime; 2 - empty value\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", Time.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @desc Value of the TIME class\r\n\t\t */\r\n\t\tthis.value = getParametersValue(parameters, \"value\", Time.defaultValues(\"value\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"value\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Time class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Time ::= CHOICE {\r\n     *   utcTime        UTCTime,\r\n     *   generalTime    GeneralizedTime }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @param {boolean} optional Flag that current schema should be optional\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {}, optional = false)\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [utcTimeName] Name for \"utcTimeName\" choice\r\n\t\t * @property {string} [generalTimeName] Name for \"generalTimeName\" choice\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Choice({\r\n\t\t\toptional,\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.UTCTime({ name: (names.utcTimeName || \"\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.generalTimeName || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"utcTimeName\",\r\n\t\t\t\"generalTimeName\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, Time.schema({\r\n\t\t\tnames: {\r\n\t\t\t\tutcTimeName: \"utcTimeName\",\r\n\t\t\t\tgeneralTimeName: \"generalTimeName\"\r\n\t\t\t}\r\n\t\t}));\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Time\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"utcTimeName\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.type = 0;\r\n\t\t\tthis.value = asn1.result.utcTimeName.toDate();\r\n\t\t}\r\n\t\tif(\"generalTimeName\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.type = 1;\r\n\t\t\tthis.value = asn1.result.generalTimeName.toDate();\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tlet result = {};\r\n\r\n\t\tif(this.type === 0)\r\n\t\t\tresult = new asn1js.UTCTime({ valueDate: this.value });\r\n\t\tif(this.type === 1)\r\n\t\t\tresult = new asn1js.GeneralizedTime({ valueDate: this.value });\r\n\r\n\t\treturn result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\ttype: this.type,\r\n\t\t\tvalue: this.value\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}