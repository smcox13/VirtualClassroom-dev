{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _omit2 = require('lodash/omit');\n\nvar _omit3 = _interopRequireDefault(_omit2);\n\nvar _isEmpty2 = require('lodash/isEmpty');\n\nvar _isEmpty3 = _interopRequireDefault(_isEmpty2);\n\nvar _uuid = require('uuid');\n\nvar _uuid2 = _interopRequireDefault(_uuid);\n\nvar _constants = require('../constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // TODO: Break this up a bit more, so that consumers aren't calling data.data.getData()\n\n/**\n * @class WebRTCData\n */\n\n\nvar WebRTCData = function () {\n  /**\n   * @param {Object} data\n   */\n  function WebRTCData(data) {\n    (0, _classCallCheck3.default)(this, WebRTCData);\n    this.data = data;\n    this.id = _uuid2.default.v4();\n  }\n  /**\n   * get omitted rtc/rtcp/rtp/track/transport/candidate data with omitted data (default)\n   * @returns {Object}\n   */\n\n\n  (0, _createClass3.default)(WebRTCData, [{\n    key: 'omit',\n    value: function omit() {\n      var _this = this;\n\n      var flat = {};\n      (0, _keys2.default)(this.data).forEach(function (key) {\n        flat[key] = (0, _omit3.default)(_this.data[key], _constants.DEFAULT_OMISSION_DATA_KEYS);\n      });\n      return flat;\n    }\n    /**\n     * returns if the data is empty\n     * @returns {Boolean};\n     */\n\n  }, {\n    key: 'isEmpty',\n    value: function isEmpty() {\n      return (0, _isEmpty3.default)(this.data);\n    }\n    /**\n     * get the unique id for this specific stat pull\n     * @returns {String};\n     */\n\n  }, {\n    key: 'getId',\n    value: function getId() {\n      return this.id;\n    }\n    /**\n     * get the transformed data\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'getData',\n    value: function getData() {\n      return this.data;\n    }\n  }]);\n  return WebRTCData;\n}();\n\nexports.default = WebRTCData;","map":{"version":3,"sources":["data.js"],"names":["WebRTCData","uuid","flat","DEFAULT_OMISSION_DATA_KEYS"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;;;AAGA,IAAA,UAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;;;;;EAEA;;AACA;;;;;IAGqBA,U;AACnB;;;AAGA,WAAA,UAAA,CAAA,IAAA,EAAkB;AAAA,KAAA,GAAA,gBAAA,CAAA,OAAA,EAAA,IAAA,EAAA,UAAA;AAChB,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,EAAA,GAAUC,MAAAA,CAAAA,OAAAA,CAAV,EAAUA,EAAV;AACD;AAED;;;;;;;;2BAIO;AAAA,UAAA,KAAA,GAAA,IAAA;;AACL,UAAMC,IAAAA,GAAN,EAAA;AAEA,OAAA,GAAA,MAAA,CAAA,OAAA,EAAY,KAAZ,IAAA,EAAA,OAAA,CAA+B,UAAA,GAAA,EAAS;AACtCA,QAAAA,IAAAA,CAAAA,GAAAA,CAAAA,GAAY,CAAA,GAAA,MAAA,CAAA,OAAA,EAAK,KAAA,CAAA,IAAA,CAAL,GAAK,CAAL,EAAqBC,UAAAA,CAAjCD,0BAAY,CAAZA;AADF,OAAA;AAIA,aAAA,IAAA;AACD;AAED;;;;;;;8BAIU;AACR,aAAO,CAAA,GAAA,SAAA,CAAA,OAAA,EAAQ,KAAf,IAAO,CAAP;AACD;AAED;;;;;;;4BAIQ;AACN,aAAO,KAAP,EAAA;AACD;AAED;;;;;;;8BAIU;AACR,aAAO,KAAP,IAAA;AACD;;;;;kBA7CkBF,U","sourcesContent":["import uuid from 'uuid';\nimport {isEmpty, omit} from 'lodash';\n\nimport {DEFAULT_OMISSION_DATA_KEYS} from '../constants';\n\n// TODO: Break this up a bit more, so that consumers aren't calling data.data.getData()\n/**\n * @class WebRTCData\n */\nexport default class WebRTCData {\n  /**\n   * @param {Object} data\n   */\n  constructor(data) {\n    this.data = data;\n    this.id = uuid.v4();\n  }\n\n  /**\n   * get omitted rtc/rtcp/rtp/track/transport/candidate data with omitted data (default)\n   * @returns {Object}\n   */\n  omit() {\n    const flat = {};\n\n    Object.keys(this.data).forEach((key) => {\n      flat[key] = omit(this.data[key], DEFAULT_OMISSION_DATA_KEYS);\n    });\n\n    return flat;\n  }\n\n  /**\n   * returns if the data is empty\n   * @returns {Boolean};\n   */\n  isEmpty() {\n    return isEmpty(this.data);\n  }\n\n  /**\n   * get the unique id for this specific stat pull\n   * @returns {String};\n   */\n  getId() {\n    return this.id;\n  }\n\n  /**\n   * get the transformed data\n   * @returns {Object}\n   */\n  getData() {\n    return this.data;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}