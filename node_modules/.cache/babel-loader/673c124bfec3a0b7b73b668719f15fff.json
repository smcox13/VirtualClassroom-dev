{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _desc, _value, _obj;\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _common = require('@webex/common');\n\nvar _peopleBatcher = require('./people-batcher');\n\nvar _peopleBatcher2 = _interopRequireDefault(_peopleBatcher);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n/**\n * @typedef {Object} PersonObject\n * @property {string} id - (server generated) Unique identifier for the person\n * @property {Array<email>} emails - Email addresses of the person\n * @property {string} displayName - Display name of the person\n * @property {isoDate} created - (server generated) The date and time that the person was created\n */\n\n/**\n * @class\n */\n\n\nvar People = _webexCore.WebexPlugin.extend((_obj = {\n  namespace: 'People',\n  children: {\n    batcher: _peopleBatcher2.default\n  },\n\n  /**\n   * Returns a single person by ID\n   * @instance\n   * @memberof People\n   * @param {PersonObject|uuid|string} person\n   * @returns {Promise<PersonObject>}\n   * @example\n   * webex.rooms.create({title: 'Get Person Example'})\n   *   .then(function(room) {\n   *     return webex.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(membership) {\n   *     return webex.people.get(membership.personId);\n   *   })\n   *   .then(function(alice) {\n   *     var assert = require('assert');\n   *     assert(alice.id);\n   *     assert(Array.isArray(alice.emails));\n   *     assert.equal(alice.emails.filter(function(email) {\n   *       return email === 'alice@example.com';\n   *     }).length, 1);\n   *     assert(alice.displayName);\n   *     assert(alice.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get: function get(person) {\n    if (!person) {\n      return _promise2.default.reject(new Error('A person with an id is required'));\n    }\n\n    if (person === 'me') {\n      return this._getMe();\n    }\n\n    var id = person.personId || person.id || person;\n    return this.batcher.request(id);\n  },\n\n  /**\n   * Returns a list of people\n   * @instance\n   * @memberof People\n   * @param {Object | uuid[]} options or array of uuids\n   * @param {email} options.email - Returns people with an email that contains this string\n   * @param {string} options.displayName - Returns people with a name that contains this string\n   * @param {bool} showAllTypes optional flag that requires Hydra to send every type field,\n   * even if the type is not \"person\" (e.g.: SX10, webhook_intergation, etc.)\n   * @returns {Promise<Page<PersonObject>>}\n   * @example\n   * var room;\n   * webex.rooms.create({title: 'List People Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.create({\n   *       personEmail: 'bob@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.people.list({email: 'alice@example.com'});\n   *   })\n   *   .then(function(people) {\n   *     var assert = require('assert');\n   *     assert.equal(people.length, 1);\n   *     var person = people.items[0];\n   *     assert(person.id);\n   *     assert(Array.isArray(person.emails));\n   *     assert(person.displayName);\n   *     assert(person.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   *  @example <caption>Example usage of array method</caption>\n   * var room;\n   * var aliceId;\n   * var bobId;\n   * webex.rooms.create({title: 'List People Array Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(membership) {\n   *     aliceId = membership.personId;\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.create({\n   *       personEmail: 'bob@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(membership) {\n   *     bobId = membership.personId;\n   *   })\n   *   .then(function() {\n   *     return webex.people.list([aliceId, bobId]);\n   *   })\n   *   .then(function(people) {\n   *     var assert = require('assert');\n   *     assert.equal(people.length, 2);\n   *     var person = people.items[0];\n   *     assert(person.id);\n   *     assert(Array.isArray(person.emails));\n   *     assert(person.displayName);\n   *     assert(person.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list: function list(options) {\n    var _this = this;\n\n    if (Array.isArray(options)) {\n      var peopleIds = options;\n      return _promise2.default.all(peopleIds.map(function (personId) {\n        return _this.batcher.request(personId);\n      }));\n    }\n\n    return this.request({\n      service: 'hydra',\n      resource: 'people',\n      qs: options\n    }).then(function (res) {\n      return new _webexCore.Page(res, _this.webex);\n    });\n  },\n\n  /**\n   * Converts a uuid to a hydra id without a network dip.\n   * @param {string} id\n   * @private\n   * @returns {string}\n   */\n  inferPersonIdFromUuid: function inferPersonIdFromUuid(id) {\n    // base64.validate seems to return true for uuids, so we need a different\n    // check\n    try {\n      if (_common.base64.decode(id).includes('ciscospark://')) {\n        return id;\n      }\n    } catch (err) {// ignore\n    }\n\n    return _common.base64.encode('ciscospark://us/PEOPLE/' + id);\n  },\n  _getMe: function _getMe() {\n    return this.webex.request({\n      service: 'hydra',\n      resource: 'people/me'\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n  version: '1.80.172'\n}, _applyDecoratedDescriptor(_obj, '_getMe', [_common.oneFlight], (0, _getOwnPropertyDescriptor2.default)(_obj, '_getMe'), _obj), _obj));\n\nexports.default = People;","map":{"version":3,"sources":["people.js"],"names":["People","namespace","children","batcher","PeopleBatcher","get","person","id","list","Array","peopleIds","service","resource","qs","options","Page","inferPersonIdFromUuid","base64","oneFlight","_getMe","res"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin, Page} from '@webex/webex-core';\nimport {base64, oneFlight} from '@webex/common';\n\nimport PeopleBatcher from './people-batcher';\n\n/**\n * @typedef {Object} PersonObject\n * @property {string} id - (server generated) Unique identifier for the person\n * @property {Array<email>} emails - Email addresses of the person\n * @property {string} displayName - Display name of the person\n * @property {isoDate} created - (server generated) The date and time that the person was created\n */\n\n/**\n * @class\n */\nconst People = WebexPlugin.extend({\n  namespace: 'People',\n\n  children: {\n    batcher: PeopleBatcher\n  },\n  /**\n   * Returns a single person by ID\n   * @instance\n   * @memberof People\n   * @param {PersonObject|uuid|string} person\n   * @returns {Promise<PersonObject>}\n   * @example\n   * webex.rooms.create({title: 'Get Person Example'})\n   *   .then(function(room) {\n   *     return webex.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(membership) {\n   *     return webex.people.get(membership.personId);\n   *   })\n   *   .then(function(alice) {\n   *     var assert = require('assert');\n   *     assert(alice.id);\n   *     assert(Array.isArray(alice.emails));\n   *     assert.equal(alice.emails.filter(function(email) {\n   *       return email === 'alice@example.com';\n   *     }).length, 1);\n   *     assert(alice.displayName);\n   *     assert(alice.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(person) {\n    if (!person) {\n      return Promise.reject(new Error('A person with an id is required'));\n    }\n    if (person === 'me') {\n      return this._getMe();\n    }\n    const id = person.personId || person.id || person;\n\n    return this.batcher.request(id);\n  },\n\n  /**\n   * Returns a list of people\n   * @instance\n   * @memberof People\n   * @param {Object | uuid[]} options or array of uuids\n   * @param {email} options.email - Returns people with an email that contains this string\n   * @param {string} options.displayName - Returns people with a name that contains this string\n   * @param {bool} showAllTypes optional flag that requires Hydra to send every type field,\n   * even if the type is not \"person\" (e.g.: SX10, webhook_intergation, etc.)\n   * @returns {Promise<Page<PersonObject>>}\n   * @example\n   * var room;\n   * webex.rooms.create({title: 'List People Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.create({\n   *       personEmail: 'bob@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.people.list({email: 'alice@example.com'});\n   *   })\n   *   .then(function(people) {\n   *     var assert = require('assert');\n   *     assert.equal(people.length, 1);\n   *     var person = people.items[0];\n   *     assert(person.id);\n   *     assert(Array.isArray(person.emails));\n   *     assert(person.displayName);\n   *     assert(person.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   *  @example <caption>Example usage of array method</caption>\n   * var room;\n   * var aliceId;\n   * var bobId;\n   * webex.rooms.create({title: 'List People Array Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(membership) {\n   *     aliceId = membership.personId;\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.create({\n   *       personEmail: 'bob@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(membership) {\n   *     bobId = membership.personId;\n   *   })\n   *   .then(function() {\n   *     return webex.people.list([aliceId, bobId]);\n   *   })\n   *   .then(function(people) {\n   *     var assert = require('assert');\n   *     assert.equal(people.length, 2);\n   *     var person = people.items[0];\n   *     assert(person.id);\n   *     assert(Array.isArray(person.emails));\n   *     assert(person.displayName);\n   *     assert(person.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    if (Array.isArray(options)) {\n      const peopleIds = options;\n\n      return Promise.all(peopleIds.map((personId) => this.batcher.request(personId)));\n    }\n\n    return this.request({\n      service: 'hydra',\n      resource: 'people',\n      qs: options\n    })\n      .then((res) => new Page(res, this.webex));\n  },\n\n  /**\n   * Converts a uuid to a hydra id without a network dip.\n   * @param {string} id\n   * @private\n   * @returns {string}\n   */\n  inferPersonIdFromUuid(id) {\n    // base64.validate seems to return true for uuids, so we need a different\n    // check\n    try {\n      if (base64.decode(id).includes('ciscospark://')) {\n        return id;\n      }\n    }\n    catch (err) {\n      // ignore\n    }\n\n    return base64.encode(`ciscospark://us/PEOPLE/${id}`);\n  },\n\n  /**\n   * Fetches the current user from the /people/me endpoint\n   * @instance\n   * @memberof People\n   * @private\n   * @returns {Promise<PersonObject>}\n   */\n  @oneFlight\n  _getMe() {\n    return this.webex.request({\n      service: 'hydra',\n      resource: 'people/me'\n    })\n      .then((res) => res.body);\n  }\n});\n\nexport default People;\n"]},"metadata":{},"sourceType":"script"}