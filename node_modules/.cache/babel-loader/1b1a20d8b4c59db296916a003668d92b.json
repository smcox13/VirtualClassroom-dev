{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transforms = undefined;\n\nvar _isInteger = require('babel-runtime/core-js/number/is-integer');\n\nvar _isInteger2 = _interopRequireDefault(_isInteger);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _curry2 = require('lodash/curry');\n\nvar _curry3 = _interopRequireDefault(_curry2);\n\nvar _capitalize2 = require('lodash/capitalize');\n\nvar _capitalize3 = _interopRequireDefault(_capitalize2);\n\nvar _camelCase2 = require('lodash/camelCase');\n\nvar _camelCase3 = _interopRequireDefault(_camelCase2);\n\nvar _toArray = require('./to-array');\n\nvar _toArray2 = _interopRequireDefault(_toArray);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar decryptTextProp = (0, _curry3.default)(function (name, ctx, key, object) {\n  return ctx.transform('decryptTextProp', name, key, object);\n}); // eslint-disable-next-line import/prefer-default-export\n\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nvar transforms = exports.transforms = (0, _toArray2.default)('inbound', {\n  /**\n   * This function is used recursively to decrypt various properties on convesations, activities, etc\n   * @param   {Object} ctx    An object containg a webex instance and a transform\n   * @param   {String} key    KMS encryption key url\n   * @param   {Object} object Generic object that you want to decrypt some property on based on the type\n   * @returns {Promise}       Returns a transform promise\n   */\n  decryptObject: function decryptObject(ctx, key, object) {\n    if (!object) {\n      object = key; // eslint-disable-line no-param-reassign\n\n      key = undefined; // eslint-disable-line no-param-reassign\n    }\n\n    if (!object) {\n      return _promise2.default.resolve();\n    }\n\n    if (!object.objectType) {\n      return _promise2.default.resolve();\n    }\n\n    if (!key && object.encryptionKeyUrl) {\n      key = object.encryptionKeyUrl; // eslint-disable-line no-param-reassign\n    } // Transcoded content was not showing up on the activities since the\n    // decryptFile was not being called. Calling decryptFile for\n    // transcodedContent fixes the issue.\n\n\n    if (object.objectType === 'transcodedContent') {\n      return _promise2.default.all(object.files.items.map(function (item) {\n        return ctx.transform('decryptFile', key, item);\n      }));\n    }\n\n    return ctx.transform('decrypt' + (0, _capitalize3.default)(object.objectType), key, object);\n  },\n\n  /**\n   * Decrypt an individual submit object from a cardAction activity\n   *   (object.objectType === 'sumbit')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex Teams submit object\n   * these objects are returned when a user clicks on a Action.Submit button in a card\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptSubmit: function decryptSubmit(ctx, key, object) {\n    if (!object.inputs) {\n      return _promise2.default.resolve();\n    }\n\n    var decryptionFailureMessage = ctx.webex.internal.conversation.config.decryptionFailureMessage;\n    return ctx.transform('decryptPropCardItem', 0, key, [object.inputs]).then(function (inputs) {\n      object.inputs = JSON.parse(inputs[0]); // eslint-disable-line no-param-reassign\n    }).catch(function (reason) {\n      ctx.webex.logger.warn('plugin-conversation: failed to decrypt attachmentAction.inputs: ' + reason);\n      object.inputs = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n      return _promise2.default.resolve(decryptionFailureMessage);\n    });\n  },\n\n  /**\n   * Decrypt an individual reaction2Summary activity (object.objectType === 'reaction2Summary')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex Teams reaction2Summary object\n   * these objects are returned by various conversation APIs and over mercury\n   * represents an aggregated summary of all reactions to a specific activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2summary: function decryptReaction2summary(ctx, key, object) {\n    if (!object.reactions) {\n      return _promise2.default.resolve();\n    }\n\n    return _promise2.default.all(object.reactions.map(function (reaction) {\n      return ctx.transform('decryptPropDisplayName', key, reaction);\n    }));\n  },\n\n  /**\n   * Decrypt an individual reaction2SelfSummary activity (object.objectType === 'reaction2SelfSummary')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex Teams reaction2SelfSummary object\n   * these objects are returned by various conversation APIs and NOT over mercury\n   * they are ONLY received by the self user\n   * they represent ONLY the self user's reactions and are used for enforcing\n   * limit of times they can react to a specific activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2selfsummary: function decryptReaction2selfsummary(ctx, key, object) {\n    if (!object.reactions) {\n      return _promise2.default.resolve();\n    }\n\n    return _promise2.default.all(object.reactions.map(function (reaction) {\n      return ctx.transform('decryptPropDisplayName', key, reaction);\n    }));\n  },\n\n  /**\n   * Decrypt an individual reaction2 activity (object.objectType === 'reaction2')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex Teams reaction2 object\n   * these objects are returned by various conversation APIs and over mercury\n   * ONLY self users receive these objects\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2: function decryptReaction2(ctx, key, object) {\n    return ctx.transform('decryptPropDisplayName', key, object);\n  },\n\n  /**\n   * Decrypts a given conversation and it's activites by building an array of promises that call\n   * decryptObject, which may then call other decrypt functions\n   *\n   * @param   {Object} ctx          An object containg a webex instance and a transform\n   * @param   {String} key          KMS encryption key url (or actual key?)\n   * @param   {Object} conversation A Webex Teams conversation object\n   * @returns {Promise}             Returns the result of Promise.all\n   */\n  decryptConversation: function decryptConversation(ctx, key, conversation) {\n    var promises = [];\n\n    if (conversation.activities.items) {\n      promises.push(_promise2.default.all(conversation.activities.items.map(function (item) {\n        return ctx.transform('decryptObject', null, item);\n      })));\n    }\n\n    var usableKey = conversation.encryptionKeyUrl || key;\n    var decryptionFailureMessage = ctx.webex.internal.conversation.config.decryptionFailureMessage;\n\n    if (usableKey) {\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, conversation).catch(function (error) {\n        ctx.webex.logger.warn('plugin-conversation: failed to decrypt display name of ', conversation.url, error);\n\n        _promise2.default.resolve(decryptionFailureMessage);\n      }));\n      promises.push(ctx.transform('decryptPropContent', usableKey, conversation));\n    }\n\n    if (conversation.avatarEncryptionKeyUrl) {\n      promises.push(ctx.transform('decryptObject', conversation.avatarEncryptionKeyUrl, conversation.avatar));\n    }\n\n    if (conversation.previous) {\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, conversation.previous));\n    }\n\n    return _promise2.default.all(promises);\n  },\n\n  /**\n   * Decrypt an individual activity\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS encryption key url (or actual key?)\n   * @param   {Object} activity An instance of a Webex Teams activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptActivity: function decryptActivity(ctx, key, activity) {\n    if (!activity.encryptionKeyUrl && !(activity.object && activity.object.encryptionKeyUrl)) {\n      return _promise2.default.resolve(activity);\n    }\n\n    var keyUrl = activity.encryptionKeyUrl || activity.object.encryptionKeyUrl || key;\n    var promises = []; // iterate and recursively decrypt over children objects\n\n    if (activity.children && Array.isArray(activity.children)) {\n      promises = activity.children.map(function (child) {\n        return ctx.transform('decryptObject', keyUrl, child.activity);\n      });\n    }\n\n    promises.push(ctx.transform('decryptObject', keyUrl, activity.object));\n    return _promise2.default.all(promises);\n  },\n\n  /**\n   * Decrypts a microappInstance (recording) model\n   * @param   {Object} ctx                     An object containing a webex instance and transform prop\n   * @param   {String} key                     KMS key\n   * @param   {Object} microappInstance        A microappInstance which includes several properties of a recording\n   * @param   {String} microappInstance.model  An encrypted string which decrypts to an object\n   * @returns {Promise}                        Returns a contex transform\n   */\n  decryptMicroappinstance: function decryptMicroappinstance(ctx, key, microappInstance) {\n    return ctx.transform('decryptPropModel', key, microappInstance);\n  },\n\n  /**\n  * Decrypts a comment...\n  * @param {Object} ctx An object containing a webex instance and transform prop\n  * @param {String} key KMS key\n  * @param {Object} comment A comment object with a displayName and content (encrypted)\n  * @returns {Promise} Returns the results of Promise.all on two transforms\n  */\n  decryptComment: function decryptComment(ctx, key, comment) {\n    var promises = [ctx.transform('decryptPropDisplayName', key, comment), ctx.transform('decryptPropContent', key, comment)];\n\n    if (comment.cards && Array.isArray(comment.cards)) {\n      comment.cards.map(function (item, index) {\n        return promises.push(ctx.transform('decryptPropCardItem', index, key, comment.cards));\n      });\n    }\n\n    return _promise2.default.all(promises);\n  },\n\n  /**\n   * Decrypts a content field\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContent: function decryptContent(ctx, key, content) {\n    if (content.contentCategory === 'links') {\n      return ctx.transform('decryptContentLinks', key, content);\n    }\n\n    return ctx.transform('decryptContentFiles', key, content);\n  },\n\n  /**\n   * Decrypts a content field which contains files and possibly links\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @param   {Array}  content.files  An array of files to decrypt by calling decryptObject\n   * @param   {Array}  content.links  An array of links to decrypt by calling decryptObject\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContentFiles: function decryptContentFiles(ctx, key, content) {\n    if (!content.files || !content.files.items || !Array.isArray(content.files.items)) {\n      return _promise2.default.resolve();\n    }\n\n    var promises = content.files.items.map(function (item) {\n      return ctx.transform('decryptObject', key, item);\n    });\n    promises.push(ctx.transform('decryptComment', key, content));\n\n    if (content.links && content.links.items && Array.isArray(content.links.items)) {\n      content.links.items.forEach(function (item) {\n        return promises.push(ctx.transform('decryptObject', key, item));\n      });\n    }\n\n    return _promise2.default.all(promises);\n  },\n\n  /**\n   * Decrypts a content field which contains links\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @param   {Array}  content.links  An array of links to decrypt by calling decryptObject\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContentLinks: function decryptContentLinks(ctx, key, content) {\n    if (!content.links || !content.links.items || !Array.isArray(content.links.items)) {\n      return _promise2.default.resolve();\n    }\n\n    var promises = content.links.items.map(function (item) {\n      return ctx.transform('decryptObject', key, item);\n    });\n    promises.push(ctx.transform('decryptComment', key, content));\n    return _promise2.default.all(promises);\n  },\n\n  /**\n   * Decrypts what may be a meeting event?\n   * @param   {Object} ctx   An object containing a webex instance and transform prop\n   * @param   {String} key   KMS key\n   * @param   {Object} event An object with a display name and location to be decrypted\n   * @returns {Promise}      Returns the result of Promise.all\n   */\n  decryptEvent: function decryptEvent(ctx, key, event) {\n    var promises = [ctx.transform('decryptPropDisplayName', key, event)];\n\n    if (event.location && event.location.split('.').length === 5) {\n      promises.push(ctx.transform('decryptPropLocation', key, event));\n    }\n\n    return _promise2.default.all(promises);\n  },\n\n  /**\n   * Decrypts a file and it's transcodedContents if they exist\n   * @param   {Object} ctx  An object containing a webex instance and transform prop\n   * @param   {String} key  KMS key\n   * @param   {Object} file A file object with file props an optional transcodedCollection to decrypt\n   * @returns {Promise}     Returns the result of Promise.all\n   */\n  decryptFile: function decryptFile(ctx, key, file) {\n    return _promise2.default.all([file.transcodedCollection && _promise2.default.all(file.transcodedCollection.items.map(function (item) {\n      return ctx.transform('decryptObject', key, item);\n    })), ctx.transform('decryptPropScr', key, file), ctx.transform('decryptPropDisplayName', key, file), ctx.transform('decryptPropContent', key, file), file.image && ctx.transform('decryptPropScr', key, file.image)]);\n  },\n\n  /**\n   * Decrypts a file and it's transcodedContents if they exist\n   * @param   {Object} ctx  An object containing a webex instance and transform prop\n   * @param   {String} key  KMS key\n   * @param   {Object} link A link object with a URL to decrypt\n   * @returns {Promise}     Returns the result of Promise.all\n   */\n  decryptLink: function decryptLink(ctx, key, link) {\n    return _promise2.default.all([ctx.transform('decryptPropSslr', key, link), ctx.transform('decryptPropDisplayName', key, link)]);\n  },\n\n  /**\n   * Decrypts transcoded file content. Calls decryptFile\n   * @param   {Object} ctx               An object containing a webex instance and transform prop\n   * @param   {String} key               KMS key\n   * @param   {Object} transcodedContent Transcoded content with a files prop\n   * @returns {Promise}                  Returns the result of Promise.all\n   */\n  decryptTranscodedContent: function decryptTranscodedContent(ctx, key, transcodedContent) {\n    return _promise2.default.all(transcodedContent.files.items.map(function (item) {\n      return ctx.transform('decryptFile', key, item);\n    }));\n  },\n\n  /**\n   * Decrypts an image uri\n   * @param   {Object} ctx       An object containing a webex instance and transform prop\n   * @param   {String} key       KMS key\n   * @param   {String} imageURI  URI of the image to decrypt\n   * @returns {Promise}          Returns a promise.\n   */\n  decryptImageURI: function decryptImageURI(ctx, key, imageURI) {\n    return ctx.transform('decryptPropLocation', key, imageURI);\n  },\n\n  /**\n   * The heart of most decryption logic ends here. Decrypting text.\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} name   Property of an object to be decrypted\n   * @param   {String} key    KMS key\n   * @param   {Object} object A generic object with text props to be decrypted\n   * @returns {Promise}       Returns a lonely Promise\n   */\n  decryptTextProp: function decryptTextProp(ctx, name, key, object) {\n    if (!object[name]) {\n      return _promise2.default.resolve();\n    }\n\n    var decryptionFailureMessage = ctx.webex.internal.conversation.config.decryptionFailureMessage;\n    return ctx.webex.internal.encryption.decryptText(key, object[name]).then(function (plaintext) {\n      if (ctx.webex.config.conversation.keepEncryptedProperties) {\n        var encryptedPropName = (0, _camelCase3.default)('encrypted_' + name);\n        object[encryptedPropName] = object[name]; // eslint-disable-line no-param-reassign\n      }\n\n      object[name] = plaintext; // eslint-disable-line no-param-reassign\n    }).catch(function (reason) {\n      ctx.webex.logger.warn('plugin-conversation: failed to decrypt ' + name + ' ', reason);\n      object[name] = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n      return _promise2.default.resolve(decryptionFailureMessage);\n    });\n  },\n\n  /**\n  * Decrypting an element in an Array.\n  * @param {Object} ctx An object containing a webex instance and transform prop\n  * @param {Integer} index Property of an object to be decrypted\n  * @param {String} key KMS key\n  * @param {Array} array An array of Strings to be decrypted\n  * @returns {Promise} Returns a lonely Promise\n  */\n  decryptPropCardItem: function decryptPropCardItem(ctx, index, key, array) {\n    if (!(0, _isInteger2.default)(index) || !array || !Array.isArray(array) || index < 0 || index >= array.length || !(array[index] instanceof String || typeof array[index] === 'string')) {\n      return _promise2.default.resolve();\n    }\n\n    var decryptionFailureMessage = ctx.webex.internal.conversation.config.decryptionFailureMessage;\n    return ctx.webex.internal.encryption.decryptText(key, array[index]).then(function (plaintext) {\n      array[index] = plaintext; // eslint-disable-line no-param-reassign\n    }).catch(function (reason) {\n      ctx.webex.logger.warn('plugin-conversation: failed to decrypt card at ' + index + ' ', reason);\n      array[index] = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n      return _promise2.default.resolve(decryptionFailureMessage);\n    });\n  },\n\n  /**\n   * Decrypts the src of an object (for images?)\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} key    KMS key\n   * @param   {Object} object An object with a scr property to be decrypted\n   * @returns {Promise}       Returns a promise\n   */\n  decryptPropScr: function decryptPropScr(ctx, key, object) {\n    return ctx.webex.internal.encryption.decryptScr(key, object.scr).then(function (scr) {\n      object.scr = scr; // eslint-disable-line no-param-reassign\n    });\n  },\n\n  /**\n   * Decrypts the sslr object\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} key    KMS key\n   * @param   {Object} object An object with a sslr property to be decrypted\n   * @returns {Promise}       Returns a promise\n   */\n  decryptPropSslr: function decryptPropSslr(ctx, key, object) {\n    return ctx.webex.internal.encryption.decryptScr(key, object.sslr).then(function (sslr) {\n      object.sslr = sslr; // eslint-disable-line no-param-reassign\n    });\n  },\n  decryptPropDisplayName: decryptTextProp('displayName'),\n  decryptPropContent: decryptTextProp('content'),\n  decryptPropModel: decryptTextProp('model'),\n  decryptPropLocation: decryptTextProp('location')\n});","map":{"version":3,"sources":["decryption-transforms.js"],"names":["decryptTextProp","ctx","transforms","decryptObject","object","key","decryptSubmit","decryptionFailureMessage","JSON","inputs","decryptReaction2summary","decryptReaction2selfsummary","decryptReaction2","decryptConversation","promises","conversation","usableKey","decryptActivity","activity","keyUrl","Array","child","decryptMicroappinstance","decryptComment","comment","decryptContent","content","decryptContentFiles","decryptContentLinks","decryptEvent","event","decryptFile","file","decryptLink","decryptTranscodedContent","decryptImageURI","encryptedPropName","decryptPropCardItem","index","array","decryptPropScr","decryptPropSslr","decryptPropDisplayName","decryptPropContent","decryptPropModel","decryptPropLocation"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {camelCase, capitalize, curry} from 'lodash';\n\nimport toArray from './to-array';\n\nconst decryptTextProp = curry((name, ctx, key, object) => ctx.transform('decryptTextProp', name, key, object));\n\n// eslint-disable-next-line import/prefer-default-export\nexport const transforms = toArray('inbound', {\n\n  /**\n   * This function is used recursively to decrypt various properties on convesations, activities, etc\n   * @param   {Object} ctx    An object containg a webex instance and a transform\n   * @param   {String} key    KMS encryption key url\n   * @param   {Object} object Generic object that you want to decrypt some property on based on the type\n   * @returns {Promise}       Returns a transform promise\n   */\n  decryptObject(ctx, key, object) {\n    if (!object) {\n      object = key; // eslint-disable-line no-param-reassign\n      key = undefined; // eslint-disable-line no-param-reassign\n    }\n\n    if (!object) {\n      return Promise.resolve();\n    }\n\n    if (!object.objectType) {\n      return Promise.resolve();\n    }\n\n    if (!key && object.encryptionKeyUrl) {\n      key = object.encryptionKeyUrl; // eslint-disable-line no-param-reassign\n    }\n\n    // Transcoded content was not showing up on the activities since the\n    // decryptFile was not being called. Calling decryptFile for\n    // transcodedContent fixes the issue.\n    if (object.objectType === 'transcodedContent') {\n      return Promise.all(object.files.items.map((item) => ctx.transform('decryptFile', key, item)));\n    }\n\n    return ctx.transform(`decrypt${capitalize(object.objectType)}`, key, object);\n  },\n\n  /**\n   * Decrypt an individual submit object from a cardAction activity\n   *   (object.objectType === 'sumbit')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex Teams submit object\n   * these objects are returned when a user clicks on a Action.Submit button in a card\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptSubmit(ctx, key, object) {\n    if (!object.inputs) {\n      return Promise.resolve();\n    }\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    return ctx.transform('decryptPropCardItem', 0, key, [object.inputs])\n      .then((inputs) => {\n        object.inputs = JSON.parse(inputs[0]); // eslint-disable-line no-param-reassign\n      })\n      .catch((reason) => {\n        ctx.webex.logger.warn(`plugin-conversation: failed to decrypt attachmentAction.inputs: ${reason}`);\n        object.inputs = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n        return Promise.resolve(decryptionFailureMessage);\n      });\n  },\n\n  /**\n   * Decrypt an individual reaction2Summary activity (object.objectType === 'reaction2Summary')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex Teams reaction2Summary object\n   * these objects are returned by various conversation APIs and over mercury\n   * represents an aggregated summary of all reactions to a specific activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2summary(ctx, key, object) {\n    if (!object.reactions) {\n      return Promise.resolve();\n    }\n\n    return Promise.all(object.reactions.map((reaction) => ctx.transform('decryptPropDisplayName', key, reaction)));\n  },\n\n  /**\n   * Decrypt an individual reaction2SelfSummary activity (object.objectType === 'reaction2SelfSummary')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex Teams reaction2SelfSummary object\n   * these objects are returned by various conversation APIs and NOT over mercury\n   * they are ONLY received by the self user\n   * they represent ONLY the self user's reactions and are used for enforcing\n   * limit of times they can react to a specific activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2selfsummary(ctx, key, object) {\n    if (!object.reactions) {\n      return Promise.resolve();\n    }\n\n    return Promise.all(object.reactions.map((reaction) => ctx.transform('decryptPropDisplayName', key, reaction)));\n  },\n\n  /**\n   * Decrypt an individual reaction2 activity (object.objectType === 'reaction2')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex Teams reaction2 object\n   * these objects are returned by various conversation APIs and over mercury\n   * ONLY self users receive these objects\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2(ctx, key, object) {\n    return ctx.transform('decryptPropDisplayName', key, object);\n  },\n\n  /**\n   * Decrypts a given conversation and it's activites by building an array of promises that call\n   * decryptObject, which may then call other decrypt functions\n   *\n   * @param   {Object} ctx          An object containg a webex instance and a transform\n   * @param   {String} key          KMS encryption key url (or actual key?)\n   * @param   {Object} conversation A Webex Teams conversation object\n   * @returns {Promise}             Returns the result of Promise.all\n   */\n  decryptConversation(ctx, key, conversation) {\n    const promises = [];\n\n    if (conversation.activities.items) {\n      promises.push(Promise.all(conversation.activities.items.map((item) => ctx.transform('decryptObject', null, item))));\n    }\n\n    const usableKey = conversation.encryptionKeyUrl || key;\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    if (usableKey) {\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, conversation)\n        .catch((error) => {\n          ctx.webex.logger.warn('plugin-conversation: failed to decrypt display name of ', conversation.url, error);\n          Promise.resolve(decryptionFailureMessage);\n        }));\n      promises.push(ctx.transform('decryptPropContent', usableKey, conversation));\n    }\n    if (conversation.avatarEncryptionKeyUrl) {\n      promises.push(ctx.transform('decryptObject', conversation.avatarEncryptionKeyUrl, conversation.avatar));\n    }\n    if (conversation.previous) {\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, conversation.previous));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypt an individual activity\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS encryption key url (or actual key?)\n   * @param   {Object} activity An instance of a Webex Teams activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptActivity(ctx, key, activity) {\n    if (!activity.encryptionKeyUrl && !(activity.object && activity.object.encryptionKeyUrl)) {\n      return Promise.resolve(activity);\n    }\n\n    const keyUrl = activity.encryptionKeyUrl || activity.object.encryptionKeyUrl || key;\n\n    let promises = [];\n\n    // iterate and recursively decrypt over children objects\n    if (activity.children && Array.isArray(activity.children)) {\n      promises = activity.children.map((child) => ctx.transform('decryptObject', keyUrl, child.activity));\n    }\n\n    promises.push(ctx.transform('decryptObject', keyUrl, activity.object));\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a microappInstance (recording) model\n   * @param   {Object} ctx                     An object containing a webex instance and transform prop\n   * @param   {String} key                     KMS key\n   * @param   {Object} microappInstance        A microappInstance which includes several properties of a recording\n   * @param   {String} microappInstance.model  An encrypted string which decrypts to an object\n   * @returns {Promise}                        Returns a contex transform\n   */\n  decryptMicroappinstance(ctx, key, microappInstance) {\n    return ctx.transform('decryptPropModel', key, microappInstance);\n  },\n\n  /**\n* Decrypts a comment...\n* @param {Object} ctx An object containing a webex instance and transform prop\n* @param {String} key KMS key\n* @param {Object} comment A comment object with a displayName and content (encrypted)\n* @returns {Promise} Returns the results of Promise.all on two transforms\n*/\n  decryptComment(ctx, key, comment) {\n    const promises = [\n      ctx.transform('decryptPropDisplayName', key, comment),\n      ctx.transform('decryptPropContent', key, comment)\n    ];\n\n    if (comment.cards && Array.isArray(comment.cards)) {\n      comment.cards.map((item, index) => promises.push(ctx.transform('decryptPropCardItem', index, key, comment.cards)));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a content field\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContent(ctx, key, content) {\n    if (content.contentCategory === 'links') {\n      return ctx.transform('decryptContentLinks', key, content);\n    }\n\n    return ctx.transform('decryptContentFiles', key, content);\n  },\n\n  /**\n   * Decrypts a content field which contains files and possibly links\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @param   {Array}  content.files  An array of files to decrypt by calling decryptObject\n   * @param   {Array}  content.links  An array of links to decrypt by calling decryptObject\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContentFiles(ctx, key, content) {\n    if (!content.files || !content.files.items || !Array.isArray(content.files.items)) {\n      return Promise.resolve();\n    }\n\n    const promises = content.files.items.map((item) => ctx.transform('decryptObject', key, item));\n\n    promises.push(ctx.transform('decryptComment', key, content));\n\n    if (content.links && content.links.items && Array.isArray(content.links.items)) {\n      content.links.items.forEach((item) => promises.push(ctx.transform('decryptObject', key, item)));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a content field which contains links\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @param   {Array}  content.links  An array of links to decrypt by calling decryptObject\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContentLinks(ctx, key, content) {\n    if (!content.links || !content.links.items || !Array.isArray(content.links.items)) {\n      return Promise.resolve();\n    }\n\n    const promises = content.links.items.map((item) => ctx.transform('decryptObject', key, item));\n\n    promises.push(ctx.transform('decryptComment', key, content));\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts what may be a meeting event?\n   * @param   {Object} ctx   An object containing a webex instance and transform prop\n   * @param   {String} key   KMS key\n   * @param   {Object} event An object with a display name and location to be decrypted\n   * @returns {Promise}      Returns the result of Promise.all\n   */\n  decryptEvent(ctx, key, event) {\n    const promises = [\n      ctx.transform('decryptPropDisplayName', key, event)\n    ];\n\n    if (event.location && event.location.split('.').length === 5) {\n      promises.push(ctx.transform('decryptPropLocation', key, event));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a file and it's transcodedContents if they exist\n   * @param   {Object} ctx  An object containing a webex instance and transform prop\n   * @param   {String} key  KMS key\n   * @param   {Object} file A file object with file props an optional transcodedCollection to decrypt\n   * @returns {Promise}     Returns the result of Promise.all\n   */\n  decryptFile(ctx, key, file) {\n    return Promise.all([\n      file.transcodedCollection && Promise.all(file.transcodedCollection.items.map((item) => ctx.transform('decryptObject', key, item))),\n      ctx.transform('decryptPropScr', key, file),\n      ctx.transform('decryptPropDisplayName', key, file),\n      ctx.transform('decryptPropContent', key, file),\n      file.image && ctx.transform('decryptPropScr', key, file.image)\n    ]);\n  },\n\n  /**\n   * Decrypts a file and it's transcodedContents if they exist\n   * @param   {Object} ctx  An object containing a webex instance and transform prop\n   * @param   {String} key  KMS key\n   * @param   {Object} link A link object with a URL to decrypt\n   * @returns {Promise}     Returns the result of Promise.all\n   */\n  decryptLink(ctx, key, link) {\n    return Promise.all([\n      ctx.transform('decryptPropSslr', key, link),\n      ctx.transform('decryptPropDisplayName', key, link)\n    ]);\n  },\n\n  /**\n   * Decrypts transcoded file content. Calls decryptFile\n   * @param   {Object} ctx               An object containing a webex instance and transform prop\n   * @param   {String} key               KMS key\n   * @param   {Object} transcodedContent Transcoded content with a files prop\n   * @returns {Promise}                  Returns the result of Promise.all\n   */\n  decryptTranscodedContent(ctx, key, transcodedContent) {\n    return Promise.all(transcodedContent.files.items.map((item) => ctx.transform('decryptFile', key, item)));\n  },\n\n  /**\n   * Decrypts an image uri\n   * @param   {Object} ctx       An object containing a webex instance and transform prop\n   * @param   {String} key       KMS key\n   * @param   {String} imageURI  URI of the image to decrypt\n   * @returns {Promise}          Returns a promise.\n   */\n  decryptImageURI(ctx, key, imageURI) {\n    return ctx.transform('decryptPropLocation', key, imageURI);\n  },\n\n  /**\n   * The heart of most decryption logic ends here. Decrypting text.\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} name   Property of an object to be decrypted\n   * @param   {String} key    KMS key\n   * @param   {Object} object A generic object with text props to be decrypted\n   * @returns {Promise}       Returns a lonely Promise\n   */\n  decryptTextProp(ctx, name, key, object) {\n    if (!object[name]) {\n      return Promise.resolve();\n    }\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    return ctx.webex.internal.encryption.decryptText(key, object[name])\n      .then((plaintext) => {\n        if (ctx.webex.config.conversation.keepEncryptedProperties) {\n          const encryptedPropName = camelCase(`encrypted_${name}`);\n\n          object[encryptedPropName] = object[name]; // eslint-disable-line no-param-reassign\n        }\n\n        object[name] = plaintext; // eslint-disable-line no-param-reassign\n      })\n      .catch((reason) => {\n        ctx.webex.logger.warn(`plugin-conversation: failed to decrypt ${name} `, reason);\n        object[name] = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n        return Promise.resolve(decryptionFailureMessage);\n      });\n  },\n\n  /**\n* Decrypting an element in an Array.\n* @param {Object} ctx An object containing a webex instance and transform prop\n* @param {Integer} index Property of an object to be decrypted\n* @param {String} key KMS key\n* @param {Array} array An array of Strings to be decrypted\n* @returns {Promise} Returns a lonely Promise\n*/\n  decryptPropCardItem(ctx, index, key, array) {\n    if (!Number.isInteger(index) || !array || !Array.isArray(array) || index < 0 || index >= array.length || !(array[index] instanceof String || typeof array[index] === 'string')) {\n      return Promise.resolve();\n    }\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    return ctx.webex.internal.encryption.decryptText(key, array[index])\n      .then((plaintext) => {\n        array[index] = plaintext; // eslint-disable-line no-param-reassign\n      })\n      .catch((reason) => {\n        ctx.webex.logger.warn(`plugin-conversation: failed to decrypt card at ${index} `, reason);\n        array[index] = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n        return Promise.resolve(decryptionFailureMessage);\n      });\n  },\n  /**\n   * Decrypts the src of an object (for images?)\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} key    KMS key\n   * @param   {Object} object An object with a scr property to be decrypted\n   * @returns {Promise}       Returns a promise\n   */\n  decryptPropScr(ctx, key, object) {\n    return ctx.webex.internal.encryption.decryptScr(key, object.scr)\n      .then((scr) => {\n        object.scr = scr; // eslint-disable-line no-param-reassign\n      });\n  },\n\n  /**\n   * Decrypts the sslr object\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} key    KMS key\n   * @param   {Object} object An object with a sslr property to be decrypted\n   * @returns {Promise}       Returns a promise\n   */\n  decryptPropSslr(ctx, key, object) {\n    return ctx.webex.internal.encryption.decryptScr(key, object.sslr)\n      .then((sslr) => {\n        object.sslr = sslr; // eslint-disable-line no-param-reassign\n      });\n  },\n\n  decryptPropDisplayName: decryptTextProp('displayName'),\n\n  decryptPropContent: decryptTextProp('content'),\n\n  decryptPropModel: decryptTextProp('model'),\n\n  decryptPropLocation: decryptTextProp('location')\n});\n"]},"metadata":{},"sourceType":"script"}