{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _webexCore = require('@webex/webex-core');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @class\n * @extends {Lyra}\n * @memberof Lyra\n */\n\n\nvar Device = _webexCore.WebexPlugin.extend({\n  namespace: 'Lyra',\n\n  /**\n   * Gets the audio state of the device\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise<LyraAudioState>} {volume, microphones, url}\n   */\n  getAudioState: function getAudioState(space) {\n    return this.webex.request({\n      method: 'GET',\n      uri: space.url + '/audio'\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Updates audio state for lyra device, should be called every 10 minutes or\n   * when mic or volume state is changed\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {Types~LyraAudioState} audioState\n   * @param {object} audioState.volume optional\n   * @param {boolean} audioState.volume.level\n   * @param {object} audioState.microphones optional\n   * @param {boolean} audioState.microphones.muted\n   * @param {string} audioState.deviceUrl\n   * @returns {Promise}\n   */\n  putAudioState: function putAudioState(space) {\n    var audioState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!audioState.deviceUrl) {\n      return _promise2.default.reject(new Error('audioState.deviceUrl is required'));\n    }\n\n    return this.webex.request({\n      method: 'PUT',\n      uri: space.url + '/audio',\n      body: audioState\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Mutes lyra device\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise}\n   */\n  mute: function mute(space) {\n    return this.webex.request({\n      method: 'POST',\n      uri: space.url + '/audio/microphones/actions/mute/invoke'\n    });\n  },\n\n  /**\n   * Unmutes lyra device\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise}\n   */\n  unmute: function unmute(space) {\n    return this.webex.request({\n      method: 'POST',\n      uri: space.url + '/audio/microphones/actions/un-mute/invoke'\n    });\n  },\n\n  /**\n   * Increases lyra device's volume\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise}\n   */\n  increaseVolume: function increaseVolume(space) {\n    return this.webex.request({\n      method: 'POST',\n      uri: space.url + '/audio/volume/actions/increase/invoke'\n    });\n  },\n\n  /**\n   * Decreases lyra device's volume\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise}\n   */\n  decreaseVolume: function decreaseVolume(space) {\n    return this.webex.request({\n      method: 'POST',\n      uri: space.url + '/audio/volume/actions/decrease/invoke'\n    });\n  },\n\n  /**\n   * Sets lyra device's volume but should use increase and decrease api instead\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {integer} level to be set\n   * @returns {Promise}\n   */\n  setVolume: function setVolume(space) {\n    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return this.webex.request({\n      method: 'POST',\n      uri: space.url + '/audio/volume/actions/set/invoke',\n      body: {\n        level: level\n      }\n    });\n  },\n  version: '1.80.172'\n});\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nexports.default = Device;","map":{"version":3,"sources":["device.js"],"names":["Device","namespace","getAudioState","method","uri","space","res","putAudioState","audioState","body","mute","unmute","increaseVolume","decreaseVolume","setVolume","level"],"mappings":";;;;;;;;;;AAIA,IAAA,UAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;;;;;;AAEA;;;;;;;AAKA,IAAMA,MAAAA,GAAS,UAAA,CAAA,WAAA,CAAA,MAAA,CAAmB;AAChCC,EAAAA,SAAAA,EADgC,MAAA;;AAGhC;;;;;;AAMAC,EAAAA,aATgC,EAAA,SAAA,aAAA,CAAA,KAAA,EASX;AACnB,WAAO,KAAA,KAAA,CAAA,OAAA,CAAmB;AACxBC,MAAAA,MAAAA,EADwB,KAAA;AAExBC,MAAAA,GAAAA,EAAQC,KAAAA,CAARD,GAAQC,GAARD;AAFwB,KAAnB,EAAA,IAAA,CAIC,UAAA,GAAA,EAAA;AAAA,aAASE,GAAAA,CAAT,IAAA;AAJR,KAAO,CAAP;AAV8B,GAAA;;AAiBhC;;;;;;;;;;;;;AAaAC,EAAAA,aA9BgC,EAAA,SAAA,aAAA,CAAA,KAAA,EA8BM;AAAA,QAAjBC,UAAiB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;;AACpC,QAAI,CAACA,UAAAA,CAAL,SAAA,EAA2B;AACzB,aAAO,SAAA,CAAA,OAAA,CAAA,MAAA,CAAe,IAAA,KAAA,CAAtB,kCAAsB,CAAf,CAAP;AACD;;AAED,WAAO,KAAA,KAAA,CAAA,OAAA,CAAmB;AACxBL,MAAAA,MAAAA,EADwB,KAAA;AAExBC,MAAAA,GAAAA,EAAQC,KAAAA,CAARD,GAAQC,GAFgB,QAAA;AAGxBI,MAAAA,IAAAA,EAAMD;AAHkB,KAAnB,EAAA,IAAA,CAKC,UAAA,GAAA,EAAA;AAAA,aAASF,GAAAA,CAAT,IAAA;AALR,KAAO,CAAP;AAnC8B,GAAA;;AA2ChC;;;;;;AAMAI,EAAAA,IAjDgC,EAAA,SAAA,IAAA,CAAA,KAAA,EAiDpB;AACV,WAAO,KAAA,KAAA,CAAA,OAAA,CAAmB;AACxBP,MAAAA,MAAAA,EADwB,MAAA;AAExBC,MAAAA,GAAAA,EAAQC,KAAAA,CAARD,GAAQC,GAARD;AAFwB,KAAnB,CAAP;AAlD8B,GAAA;;AAwDhC;;;;;;AAMAO,EAAAA,MA9DgC,EAAA,SAAA,MAAA,CAAA,KAAA,EA8DlB;AACZ,WAAO,KAAA,KAAA,CAAA,OAAA,CAAmB;AACxBR,MAAAA,MAAAA,EADwB,MAAA;AAExBC,MAAAA,GAAAA,EAAQC,KAAAA,CAARD,GAAQC,GAARD;AAFwB,KAAnB,CAAP;AA/D8B,GAAA;;AAqEhC;;;;;;AAMAQ,EAAAA,cA3EgC,EAAA,SAAA,cAAA,CAAA,KAAA,EA2EV;AACpB,WAAO,KAAA,KAAA,CAAA,OAAA,CAAmB;AACxBT,MAAAA,MAAAA,EADwB,MAAA;AAExBC,MAAAA,GAAAA,EAAQC,KAAAA,CAARD,GAAQC,GAARD;AAFwB,KAAnB,CAAP;AA5E8B,GAAA;;AAkFhC;;;;;;AAMAS,EAAAA,cAxFgC,EAAA,SAAA,cAAA,CAAA,KAAA,EAwFV;AACpB,WAAO,KAAA,KAAA,CAAA,OAAA,CAAmB;AACxBV,MAAAA,MAAAA,EADwB,MAAA;AAExBC,MAAAA,GAAAA,EAAQC,KAAAA,CAARD,GAAQC,GAARD;AAFwB,KAAnB,CAAP;AAzF8B,GAAA;;AA+FhC;;;;;;;AAOAU,EAAAA,SAtGgC,EAAA,SAAA,SAAA,CAAA,KAAA,EAsGJ;AAAA,QAAXC,KAAW,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAH,CAAG;AAC1B,WAAO,KAAA,KAAA,CAAA,OAAA,CAAmB;AACxBZ,MAAAA,MAAAA,EADwB,MAAA;AAExBC,MAAAA,GAAAA,EAAQC,KAAAA,CAARD,GAAQC,GAFgB,kCAAA;AAGxBI,MAAAA,IAAAA,EAAM;AACJM,QAAAA,KAAAA,EAAAA;AADI;AAHkB,KAAnB,CAAP;AAvG8B,GAAA;AAAA,EAAA,OAAA,EAAA;AAAA,CAAnB,CAAf;AAXA;;;;;kBA6Hef,M","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin} from '@webex/webex-core';\n\n/**\n * @class\n * @extends {Lyra}\n * @memberof Lyra\n */\nconst Device = WebexPlugin.extend({\n  namespace: 'Lyra',\n\n  /**\n   * Gets the audio state of the device\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise<LyraAudioState>} {volume, microphones, url}\n   */\n  getAudioState(space) {\n    return this.webex.request({\n      method: 'GET',\n      uri: `${space.url}/audio`\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Updates audio state for lyra device, should be called every 10 minutes or\n   * when mic or volume state is changed\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {Types~LyraAudioState} audioState\n   * @param {object} audioState.volume optional\n   * @param {boolean} audioState.volume.level\n   * @param {object} audioState.microphones optional\n   * @param {boolean} audioState.microphones.muted\n   * @param {string} audioState.deviceUrl\n   * @returns {Promise}\n   */\n  putAudioState(space, audioState = {}) {\n    if (!audioState.deviceUrl) {\n      return Promise.reject(new Error('audioState.deviceUrl is required'));\n    }\n\n    return this.webex.request({\n      method: 'PUT',\n      uri: `${space.url}/audio`,\n      body: audioState\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Mutes lyra device\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise}\n   */\n  mute(space) {\n    return this.webex.request({\n      method: 'POST',\n      uri: `${space.url}/audio/microphones/actions/mute/invoke`\n    });\n  },\n\n  /**\n   * Unmutes lyra device\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise}\n   */\n  unmute(space) {\n    return this.webex.request({\n      method: 'POST',\n      uri: `${space.url}/audio/microphones/actions/un-mute/invoke`\n    });\n  },\n\n  /**\n   * Increases lyra device's volume\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise}\n   */\n  increaseVolume(space) {\n    return this.webex.request({\n      method: 'POST',\n      uri: `${space.url}/audio/volume/actions/increase/invoke`\n    });\n  },\n\n  /**\n   * Decreases lyra device's volume\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise}\n   */\n  decreaseVolume(space) {\n    return this.webex.request({\n      method: 'POST',\n      uri: `${space.url}/audio/volume/actions/decrease/invoke`\n    });\n  },\n\n  /**\n   * Sets lyra device's volume but should use increase and decrease api instead\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {integer} level to be set\n   * @returns {Promise}\n   */\n  setVolume(space, level = 0) {\n    return this.webex.request({\n      method: 'POST',\n      uri: `${space.url}/audio/volume/actions/set/invoke`,\n      body: {\n        level\n      }\n    });\n  }\n\n});\n\nexport default Device;\n"]},"metadata":{},"sourceType":"script"}