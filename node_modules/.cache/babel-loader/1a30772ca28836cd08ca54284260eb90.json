{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport CertificateRevocationList from \"./CertificateRevocationList.js\";\nimport OtherRevocationInfoFormat from \"./OtherRevocationInfoFormat.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nexport default class RevocationInfoChoices {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for RevocationInfoChoices class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Array.<CertificateRevocationList>}\r\n     * @desc crls\r\n     */\n    this.crls = getParametersValue(parameters, \"crls\", RevocationInfoChoices.defaultValues(\"crls\"));\n    /**\r\n     * @type {Array.<OtherRevocationInfoFormat>}\r\n     * @desc otherRevocationInfos\r\n     */\n\n    this.otherRevocationInfos = getParametersValue(parameters, \"otherRevocationInfos\", RevocationInfoChoices.defaultValues(\"otherRevocationInfos\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"crls\":\n        return [];\n\n      case \"otherRevocationInfos\":\n        return [];\n\n      default:\n        throw new Error(`Invalid member name for RevocationInfoChoices class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * RevocationInfoChoices ::= SET OF RevocationInfoChoice\r\n   *\r\n   * RevocationInfoChoice ::= CHOICE {\r\n   *    crl CertificateList,\r\n   *    other [1] IMPLICIT OtherRevocationInfoFormat }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [crls]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Set({\n      name: names.blockName || \"\",\n      value: [new asn1js.Repeated({\n        name: names.crls || \"\",\n        value: new asn1js.Choice({\n          value: [CertificateRevocationList.schema(), new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 1 // [1]\n\n            },\n            value: [new asn1js.ObjectIdentifier(), new asn1js.Any()]\n          })]\n        })\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"crls\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, RevocationInfoChoices.schema({\n      names: {\n        crls: \"crls\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for RevocationInfoChoices\"); //endregion\n    //region Get internal properties from parsed schema\n\n    for (const element of asn1.result.crls) {\n      if (element.idBlock.tagClass === 1) this.crls.push(new CertificateRevocationList({\n        schema: element\n      }));else this.otherRevocationInfos.push(new OtherRevocationInfoFormat({\n        schema: element\n      }));\n    } //endregion\n\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output set\n    const outputArray = [];\n    outputArray.push(...Array.from(this.crls, element => element.toSchema()));\n    outputArray.push(...Array.from(this.otherRevocationInfos, element => {\n      const schema = element.toSchema();\n      schema.idBlock.tagClass = 3;\n      schema.idBlock.tagNumber = 1;\n      return schema;\n    })); //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n    return new asn1js.Set({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      crls: Array.from(this.crls, element => element.toJSON()),\n      otherRevocationInfos: Array.from(this.otherRevocationInfos, element => element.toJSON())\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/RevocationInfoChoices.js"],"names":["asn1js","getParametersValue","clearProps","CertificateRevocationList","OtherRevocationInfoFormat","RevocationInfoChoices","constructor","parameters","crls","defaultValues","otherRevocationInfos","fromSchema","schema","memberName","Error","names","Set","name","blockName","value","Repeated","Choice","Constructed","idBlock","tagClass","tagNumber","ObjectIdentifier","Any","asn1","compareSchema","verified","element","result","push","toSchema","outputArray","Array","from","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport CertificateRevocationList from \"./CertificateRevocationList.js\";\r\nimport OtherRevocationInfoFormat from \"./OtherRevocationInfoFormat.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class RevocationInfoChoices \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RevocationInfoChoices class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<CertificateRevocationList>}\r\n\t\t * @desc crls\r\n\t\t */\r\n\t\tthis.crls = getParametersValue(parameters, \"crls\", RevocationInfoChoices.defaultValues(\"crls\"));\r\n\t\t/**\r\n\t\t * @type {Array.<OtherRevocationInfoFormat>}\r\n\t\t * @desc otherRevocationInfos\r\n\t\t */\r\n\t\tthis.otherRevocationInfos = getParametersValue(parameters, \"otherRevocationInfos\", RevocationInfoChoices.defaultValues(\"otherRevocationInfos\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"otherRevocationInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RevocationInfoChoices class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RevocationInfoChoices ::= SET OF RevocationInfoChoice\r\n\t *\r\n\t * RevocationInfoChoice ::= CHOICE {\r\n\t *    crl CertificateList,\r\n\t *    other [1] IMPLICIT OtherRevocationInfoFormat }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [crls]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.crls || \"\"),\r\n\t\t\t\t\tvalue: new asn1js.Choice({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tCertificateRevocationList.schema(),\r\n\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.ObjectIdentifier(),\r\n\t\t\t\t\t\t\t\t\tnew asn1js.Any()\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"crls\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRevocationInfoChoices.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcrls: \"crls\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RevocationInfoChoices\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tfor(const element of asn1.result.crls)\r\n\t\t{\r\n\t\t\tif(element.idBlock.tagClass === 1)\r\n\t\t\t\tthis.crls.push(new CertificateRevocationList({ schema: element }));\r\n\t\t\telse\r\n\t\t\t\tthis.otherRevocationInfos.push(new OtherRevocationInfoFormat({ schema: element }));\r\n\t\t}\r\n\t\t\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output set\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(...Array.from(this.crls, element => element.toSchema()));\r\n\t\t\r\n\t\toutputArray.push(...Array.from(this.otherRevocationInfos, element =>\r\n\t\t{\r\n\t\t\tconst schema = element.toSchema();\r\n\t\t\t\r\n\t\t\tschema.idBlock.tagClass = 3;\r\n\t\t\tschema.idBlock.tagNumber = 1;\r\n\t\t\t\r\n\t\t\treturn schema;\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcrls: Array.from(this.crls, element => element.toJSON()),\r\n\t\t\totherRevocationInfos: Array.from(this.otherRevocationInfos, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}