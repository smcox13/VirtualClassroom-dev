{"ast":null,"code":"/*!\n * algorithms/rsassa.js - RSA Signatures\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\";\n\nvar forge = require(\"../deps/forge.js\"),\n    CONSTANTS = require(\"./constants\"),\n    helpers = require(\"./helpers.js\"),\n    rsaUtil = require(\"./rsa-util.js\"); // ### RSASSA-PKCS1-v1_5\n\n\nfunction rsassaV15SignFn(name) {\n  var md = name.replace(\"RS\", \"SHA\").toLowerCase(),\n      hash = name.replace(\"RS\", \"SHA-\");\n  var alg = {\n    name: \"RSASSA-PKCS1-V1_5\",\n    hash: {\n      name: hash\n    }\n  }; // ### Fallback Implementation -- uses forge\n\n  var fallback = function (key, pdata) {\n    // create the digest\n    var digest = forge.md[md].create();\n    digest.start();\n    digest.update(pdata); // sign it\n\n    var pki = rsaUtil.convertToForge(key, false);\n    var sig = pki.sign(digest, \"RSASSA-PKCS1-V1_5\");\n    sig = new Buffer(sig, \"binary\");\n    return Promise.resolve({\n      data: pdata,\n      mac: sig\n    });\n  }; // ### WebCryptoAPI Implementation\n\n\n  var webcrypto = function (key, pdata) {\n    key = rsaUtil.convertToJWK(key, false);\n    var promise;\n    promise = helpers.subtleCrypto.importKey(\"jwk\", key, alg, true, [\"sign\"]);\n    promise = promise.then(function (key) {\n      return helpers.subtleCrypto.sign(alg, key, pdata);\n    });\n    promise = promise.then(function (result) {\n      var sig = new Buffer(result);\n      return {\n        data: pdata,\n        mac: sig\n      };\n    });\n    return promise;\n  };\n\n  var nodejs;\n\n  if (helpers.nodeCrypto && helpers.nodeCrypto.getHashes().indexOf(hash) > -1) {\n    nodejs = function (key, pdata) {\n      key = rsaUtil.convertToPem(key, false);\n      var sign = helpers.nodeCrypto.createSign(hash);\n      sign.update(pdata);\n      return {\n        data: pdata,\n        mac: sign.sign(rsaUtil.convertToPem(key, false))\n      };\n    };\n  }\n\n  return helpers.setupFallback(nodejs, webcrypto, fallback);\n}\n\nfunction rsassaV15VerifyFn(name) {\n  var md = name.replace(\"RS\", \"SHA\").toLowerCase(),\n      hash = name.replace(\"RS\", \"SHA-\");\n  var alg = {\n    name: \"RSASSA-PKCS1-V1_5\",\n    hash: {\n      name: hash\n    }\n  }; // ### Fallback implementation -- uses forge\n\n  var fallback = function (key, pdata, mac) {\n    // create the digest\n    var digest = forge.md[md].create();\n    digest.start();\n    digest.update(pdata);\n    digest = digest.digest().bytes(); // verify it\n\n    var pki = rsaUtil.convertToForge(key, true);\n    var sig = mac.toString(\"binary\");\n    var result = pki.verify(digest, sig, \"RSASSA-PKCS1-V1_5\");\n\n    if (!result) {\n      return Promise.reject(new Error(\"verification failed\"));\n    }\n\n    return Promise.resolve({\n      data: pdata,\n      mac: mac,\n      valid: true\n    });\n  }; // ### WebCryptoAPI Implementation\n\n\n  var webcrypto = function (key, pdata, mac) {\n    key = rsaUtil.convertToJWK(key, true);\n    var promise;\n    promise = helpers.subtleCrypto.importKey(\"jwk\", key, alg, true, [\"verify\"]);\n    promise = promise.then(function (key) {\n      return helpers.subtleCrypto.verify(alg, key, mac, pdata);\n    });\n    promise = promise.then(function (result) {\n      if (!result) {\n        return Promise.reject(new Error(\"verification failed\"));\n      }\n\n      return {\n        data: pdata,\n        mac: mac,\n        valid: true\n      };\n    });\n    return promise;\n  };\n\n  var nodejs;\n\n  if (helpers.nodeCrypto && helpers.nodeCrypto.getHashes().indexOf(md) > -1) {\n    nodejs = function (key, pdata, mac) {\n      var verify = helpers.nodeCrypto.createVerify(md);\n      verify.update(pdata);\n      verify.end();\n      var result = verify.verify(rsaUtil.convertToPem(key, true), mac);\n\n      if (!result) {\n        return Promise.reject(new Error(\"verification failed\"));\n      }\n\n      return {\n        data: pdata,\n        mac: mac,\n        valid: true\n      };\n    };\n  }\n\n  return helpers.setupFallback(nodejs, webcrypto, fallback);\n} // ### RSA-PSS\n// NOTE: no WebCryptoAPI variant -- too many browsers don't\n// implement it yet (e.g., Firefox, Safari)\n\n\nfunction rsassaPssSignFn(name) {\n  var md = name.replace(\"PS\", \"SHA\").toLowerCase(),\n      hash = name.replace(\"PS\", \"SHA-\");\n  return function (key, pdata) {\n    // create the digest\n    var digest = forge.md[md].create();\n    digest.start();\n    digest.update(pdata); // setup padding\n\n    var pss = forge.pss.create({\n      md: forge.md[md].create(),\n      mgf: forge.mgf.mgf1.create(forge.md[md].create()),\n      saltLength: CONSTANTS.HASHLENGTH[hash] / 8\n    }); // sign it\n\n    var pki = rsaUtil.convertToForge(key, false);\n    var sig = pki.sign(digest, pss);\n    sig = new Buffer(sig, \"binary\");\n    return Promise.resolve({\n      data: pdata,\n      mac: sig\n    });\n  };\n}\n\nfunction rsassaPssVerifyFn(name) {\n  var md = name.replace(\"PS\", \"SHA\").toLowerCase(),\n      hash = name.replace(\"PS\", \"SHA-\"); // ### Fallback implementation -- uses forge\n\n  return function (key, pdata, mac) {\n    // create the digest\n    var digest = forge.md[md].create();\n    digest.start();\n    digest.update(pdata);\n    digest = digest.digest().bytes(); // setup padding\n\n    var pss = forge.pss.create({\n      md: forge.md[md].create(),\n      mgf: forge.mgf.mgf1.create(forge.md[md].create()),\n      saltLength: CONSTANTS.HASHLENGTH[hash] / 8\n    }); // verify it\n\n    var pki = rsaUtil.convertToForge(key, true);\n    var sig = mac.toString(\"binary\");\n    var result = pki.verify(digest, sig, pss);\n\n    if (!result) {\n      return Promise.reject(new Error(\"verification failed\"));\n    }\n\n    return Promise.resolve({\n      data: pdata,\n      mac: mac,\n      valid: true\n    });\n  };\n} // ### Public API\n// * [name].sign\n// * [name].verify\n\n\nvar rsassa = {};\n[\"PS256\", \"PS384\", \"PS512\"].forEach(function (name) {\n  rsassa[name] = {\n    sign: rsassaPssSignFn(name),\n    verify: rsassaPssVerifyFn(name)\n  };\n});\n[\"RS256\", \"RS384\", \"RS512\"].forEach(function (name) {\n  rsassa[name] = {\n    sign: rsassaV15SignFn(name),\n    verify: rsassaV15VerifyFn(name)\n  };\n});\nmodule.exports = rsassa;","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/node-jose/lib/algorithms/rsassa.js"],"names":["forge","require","CONSTANTS","helpers","rsaUtil","rsassaV15SignFn","name","md","replace","toLowerCase","hash","alg","fallback","key","pdata","digest","create","start","update","pki","convertToForge","sig","sign","Buffer","Promise","resolve","data","mac","webcrypto","convertToJWK","promise","subtleCrypto","importKey","then","result","nodejs","nodeCrypto","getHashes","indexOf","convertToPem","createSign","setupFallback","rsassaV15VerifyFn","bytes","toString","verify","reject","Error","valid","createVerify","end","rsassaPssSignFn","pss","mgf","mgf1","saltLength","HASHLENGTH","rsassaPssVerifyFn","rsassa","forEach","module","exports"],"mappings":"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","sourcesContent":["/*!\n * algorithms/rsassa.js - RSA Signatures\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\";\n\nvar forge = require(\"../deps/forge.js\"),\n    CONSTANTS = require(\"./constants\"),\n    helpers = require(\"./helpers.js\"),\n    rsaUtil = require(\"./rsa-util.js\");\n\n// ### RSASSA-PKCS1-v1_5\n\nfunction rsassaV15SignFn(name) {\n  var md = name.replace(\"RS\", \"SHA\").toLowerCase(),\n      hash = name.replace(\"RS\", \"SHA-\");\n\n  var alg = {\n    name: \"RSASSA-PKCS1-V1_5\",\n    hash: {\n      name: hash\n    }\n  };\n\n  // ### Fallback Implementation -- uses forge\n  var fallback = function(key, pdata) {\n    // create the digest\n    var digest = forge.md[md].create();\n    digest.start();\n    digest.update(pdata);\n\n    // sign it\n    var pki = rsaUtil.convertToForge(key, false);\n    var sig = pki.sign(digest, \"RSASSA-PKCS1-V1_5\");\n    sig = new Buffer(sig, \"binary\");\n\n    return Promise.resolve({\n      data: pdata,\n      mac: sig\n    });\n  };\n\n  // ### WebCryptoAPI Implementation\n  var webcrypto = function(key, pdata) {\n    key = rsaUtil.convertToJWK(key, false);\n    var promise;\n    promise = helpers.subtleCrypto.importKey(\"jwk\", key, alg, true, [\"sign\"]);\n    promise = promise.then(function(key) {\n      return helpers.subtleCrypto.sign(alg, key, pdata);\n    });\n    promise = promise.then(function(result) {\n      var sig = new Buffer(result);\n      return {\n        data: pdata,\n        mac: sig\n      };\n    });\n\n    return promise;\n  };\n\n  var nodejs;\n  if (helpers.nodeCrypto && helpers.nodeCrypto.getHashes().indexOf(hash) > -1) {\n    nodejs = function(key, pdata) {\n      key = rsaUtil.convertToPem(key, false);\n      var sign = helpers.nodeCrypto.createSign(hash);\n      sign.update(pdata);\n\n      return {\n        data: pdata,\n        mac: sign.sign(rsaUtil.convertToPem(key, false))\n      };\n    };\n  }\n\n  return helpers.setupFallback(nodejs, webcrypto, fallback);\n}\n\nfunction rsassaV15VerifyFn(name) {\n  var md = name.replace(\"RS\", \"SHA\").toLowerCase(),\n      hash = name.replace(\"RS\", \"SHA-\");\n  var alg = {\n    name: \"RSASSA-PKCS1-V1_5\",\n    hash: {\n      name: hash\n    }\n  };\n\n  // ### Fallback implementation -- uses forge\n  var fallback = function(key, pdata, mac) {\n    // create the digest\n    var digest = forge.md[md].create();\n    digest.start();\n    digest.update(pdata);\n    digest = digest.digest().bytes();\n\n    // verify it\n    var pki = rsaUtil.convertToForge(key, true);\n    var sig = mac.toString(\"binary\");\n    var result = pki.verify(digest, sig, \"RSASSA-PKCS1-V1_5\");\n    if (!result) {\n      return Promise.reject(new Error(\"verification failed\"));\n    }\n    return Promise.resolve({\n      data: pdata,\n      mac: mac,\n      valid: true\n    });\n  };\n\n  // ### WebCryptoAPI Implementation\n  var webcrypto = function(key, pdata, mac) {\n    key = rsaUtil.convertToJWK(key, true);\n    var promise;\n    promise = helpers.subtleCrypto.importKey(\"jwk\", key, alg, true, [\"verify\"]);\n    promise = promise.then(function(key) {\n      return helpers.subtleCrypto.verify(alg, key, mac, pdata);\n    });\n    promise = promise.then(function(result) {\n      if (!result) {\n        return Promise.reject(new Error(\"verification failed\"));\n      }\n\n      return {\n        data: pdata,\n        mac: mac,\n        valid: true\n      };\n    });\n\n    return promise;\n  };\n\n  var nodejs;\n  if (helpers.nodeCrypto && helpers.nodeCrypto.getHashes().indexOf(md) > -1) {\n    nodejs = function(key, pdata, mac) {\n      var verify = helpers.nodeCrypto.createVerify(md);\n      verify.update(pdata);\n      verify.end();\n      var result = verify.verify(rsaUtil.convertToPem(key, true), mac);\n      if (!result) {\n        return Promise.reject(new Error(\"verification failed\"));\n      }\n\n      return {\n        data: pdata,\n        mac: mac,\n        valid: true,\n      };\n    };\n  }\n\n  return helpers.setupFallback(nodejs, webcrypto, fallback);\n}\n\n// ### RSA-PSS\n// NOTE: no WebCryptoAPI variant -- too many browsers don't\n// implement it yet (e.g., Firefox, Safari)\n\nfunction rsassaPssSignFn(name) {\n  var md = name.replace(\"PS\", \"SHA\").toLowerCase(),\n      hash = name.replace(\"PS\", \"SHA-\");\n\n  return function(key, pdata) {\n    // create the digest\n    var digest = forge.md[md].create();\n    digest.start();\n    digest.update(pdata);\n\n    // setup padding\n    var pss = forge.pss.create({\n      md: forge.md[md].create(),\n      mgf: forge.mgf.mgf1.create(forge.md[md].create()),\n      saltLength: CONSTANTS.HASHLENGTH[hash] / 8\n    });\n\n    // sign it\n    var pki = rsaUtil.convertToForge(key, false);\n    var sig = pki.sign(digest, pss);\n    sig = new Buffer(sig, \"binary\");\n\n    return Promise.resolve({\n      data: pdata,\n      mac: sig\n    });\n  };\n}\n\nfunction rsassaPssVerifyFn(name) {\n  var md = name.replace(\"PS\", \"SHA\").toLowerCase(),\n      hash = name.replace(\"PS\", \"SHA-\");\n\n  // ### Fallback implementation -- uses forge\n  return function(key, pdata, mac) {\n    // create the digest\n    var digest = forge.md[md].create();\n    digest.start();\n    digest.update(pdata);\n    digest = digest.digest().bytes();\n\n    // setup padding\n    var pss = forge.pss.create({\n      md: forge.md[md].create(),\n      mgf: forge.mgf.mgf1.create(forge.md[md].create()),\n      saltLength: CONSTANTS.HASHLENGTH[hash] / 8\n    });\n\n    // verify it\n    var pki = rsaUtil.convertToForge(key, true);\n    var sig = mac.toString(\"binary\");\n    var result = pki.verify(digest, sig, pss);\n    if (!result) {\n      return Promise.reject(new Error(\"verification failed\"));\n    }\n    return Promise.resolve({\n      data: pdata,\n      mac: mac,\n      valid: true\n    });\n  };\n}\n\n// ### Public API\n// * [name].sign\n// * [name].verify\nvar rsassa = {};\n[\n  \"PS256\",\n  \"PS384\",\n  \"PS512\"\n].forEach(function(name) {\n  rsassa[name] = {\n    sign: rsassaPssSignFn(name),\n    verify: rsassaPssVerifyFn(name)\n  };\n});\n\n[\n  \"RS256\",\n  \"RS384\",\n  \"RS512\"\n].forEach(function(name) {\n  rsassa[name] = {\n    sign: rsassaV15SignFn(name),\n    verify: rsassaV15VerifyFn(name)\n  };\n});\n\nmodule.exports = rsassa;\n"]},"metadata":{},"sourceType":"script"}