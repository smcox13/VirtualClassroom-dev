{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, bufferToHexCodes, clearProps } from \"pvutils\";\nimport { getEngine } from \"./common.js\";\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Attribute from \"./Attribute.js\"; //**************************************************************************************\n\nfunction CertificationRequestInfo(parameters = {}) {\n  //CertificationRequestInfo ::= SEQUENCE {\n  //    version       INTEGER { v1(0) } (v1,...),\n  //    subject       Name,\n  //    subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},\n  //    attributes    [0] Attributes{{ CRIAttributes }}\n  //}\n\n  /**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [CertificationRequestInfo]\r\n   * @property {string} [CertificationRequestInfoVersion]\r\n   * @property {string} [subject]\r\n   * @property {string} [CertificationRequestInfoAttributes]\r\n   * @property {string} [attributes]\r\n   */\n  const names = getParametersValue(parameters, \"names\", {});\n  return new asn1js.Sequence({\n    name: names.CertificationRequestInfo || \"CertificationRequestInfo\",\n    value: [new asn1js.Integer({\n      name: names.CertificationRequestInfoVersion || \"CertificationRequestInfo.version\"\n    }), RelativeDistinguishedNames.schema(names.subject || {\n      names: {\n        blockName: \"CertificationRequestInfo.subject\"\n      }\n    }), PublicKeyInfo.schema({\n      names: {\n        blockName: \"CertificationRequestInfo.subjectPublicKeyInfo\"\n      }\n    }), new asn1js.Constructed({\n      optional: true,\n      idBlock: {\n        tagClass: 3,\n        // CONTEXT-SPECIFIC\n        tagNumber: 0 // [0]\n\n      },\n      value: [new asn1js.Repeated({\n        optional: true,\n        // Because OpenSSL makes wrong \"attributes\" field\n        name: names.CertificationRequestInfoAttributes || \"CertificationRequestInfo.attributes\",\n        value: Attribute.schema(names.attributes || {})\n      })]\n    })]\n  });\n} //**************************************************************************************\n\n/**\r\n * Class from RFC2986\r\n */\n\n\nexport default class CertificationRequest {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for Attribute class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {ArrayBuffer}\r\n     * @desc tbs\r\n     */\n    this.tbs = getParametersValue(parameters, \"tbs\", CertificationRequest.defaultValues(\"tbs\"));\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n\n    this.version = getParametersValue(parameters, \"version\", CertificationRequest.defaultValues(\"version\"));\n    /**\r\n     * @type {RelativeDistinguishedNames}\r\n     * @desc subject\r\n     */\n\n    this.subject = getParametersValue(parameters, \"subject\", CertificationRequest.defaultValues(\"subject\"));\n    /**\r\n     * @type {PublicKeyInfo}\r\n     * @desc subjectPublicKeyInfo\r\n     */\n\n    this.subjectPublicKeyInfo = getParametersValue(parameters, \"subjectPublicKeyInfo\", CertificationRequest.defaultValues(\"subjectPublicKeyInfo\"));\n    if (\"attributes\" in parameters)\n      /**\r\n       * @type {Array.<Attribute>}\r\n       * @desc attributes\r\n       */\n      this.attributes = getParametersValue(parameters, \"attributes\", CertificationRequest.defaultValues(\"attributes\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc signatureAlgorithm\r\n     */\n\n    this.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", CertificationRequest.defaultValues(\"signatureAlgorithm\"));\n    /**\r\n     * @type {BitString}\r\n     * @desc signatureAlgorithm\r\n     */\n\n    this.signatureValue = getParametersValue(parameters, \"signatureValue\", CertificationRequest.defaultValues(\"signatureValue\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"tbs\":\n        return new ArrayBuffer(0);\n\n      case \"version\":\n        return 0;\n\n      case \"subject\":\n        return new RelativeDistinguishedNames();\n\n      case \"subjectPublicKeyInfo\":\n        return new PublicKeyInfo();\n\n      case \"attributes\":\n        return [];\n\n      case \"signatureAlgorithm\":\n        return new AlgorithmIdentifier();\n\n      case \"signatureValue\":\n        return new asn1js.BitString();\n\n      default:\n        throw new Error(`Invalid member name for CertificationRequest class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * CertificationRequest ::= SEQUENCE {\r\n   *    certificationRequestInfo CertificationRequestInfo,\r\n   *    signatureAlgorithm       AlgorithmIdentifier{{ SignatureAlgorithms }},\r\n   *    signature                BIT STRING\r\n   * }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [certificationRequestInfo]\r\n     * @property {string} [signatureAlgorithm]\r\n     * @property {string} [signatureValue]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      value: [CertificationRequestInfo(names.certificationRequestInfo || {}), new asn1js.Sequence({\n        name: names.signatureAlgorithm || \"signatureAlgorithm\",\n        value: [new asn1js.ObjectIdentifier(), new asn1js.Any({\n          optional: true\n        })]\n      }), new asn1js.BitString({\n        name: names.signatureValue || \"signatureValue\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"CertificationRequestInfo\", \"CertificationRequestInfo.version\", \"CertificationRequestInfo.subject\", \"CertificationRequestInfo.subjectPublicKeyInfo\", \"CertificationRequestInfo.attributes\", \"signatureAlgorithm\", \"signatureValue\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, CertificationRequest.schema());\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for CertificationRequest\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.tbs = asn1.result.CertificationRequestInfo.valueBeforeDecode;\n    this.version = asn1.result[\"CertificationRequestInfo.version\"].valueBlock.valueDec;\n    this.subject = new RelativeDistinguishedNames({\n      schema: asn1.result[\"CertificationRequestInfo.subject\"]\n    });\n    this.subjectPublicKeyInfo = new PublicKeyInfo({\n      schema: asn1.result[\"CertificationRequestInfo.subjectPublicKeyInfo\"]\n    });\n    if (\"CertificationRequestInfo.attributes\" in asn1.result) this.attributes = Array.from(asn1.result[\"CertificationRequestInfo.attributes\"], element => new Attribute({\n      schema: element\n    }));\n    this.signatureAlgorithm = new AlgorithmIdentifier({\n      schema: asn1.result.signatureAlgorithm\n    });\n    this.signatureValue = asn1.result.signatureValue; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Aux function making ASN1js Sequence from current TBS\r\n   * @returns {Sequence}\r\n   */\n\n\n  encodeTBS() {\n    //region Create array for output sequence\n    const outputArray = [new asn1js.Integer({\n      value: this.version\n    }), this.subject.toSchema(), this.subjectPublicKeyInfo.toSchema()];\n\n    if (\"attributes\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: Array.from(this.attributes, element => element.toSchema())\n      }));\n    } //endregion\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema(encodeFlag = false) {\n    //region Decode stored TBS value\n    let tbsSchema;\n\n    if (encodeFlag === false) {\n      if (this.tbs.byteLength === 0) // No stored TBS part\n        return CertificationRequest.schema();\n      tbsSchema = asn1js.fromBER(this.tbs).result;\n    } //endregion\n    //region Create TBS schema via assembling from TBS parts\n    else tbsSchema = this.encodeTBS(); //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: [tbsSchema, this.signatureAlgorithm.toSchema(), this.signatureValue]\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const object = {\n      tbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\n      version: this.version,\n      subject: this.subject.toJSON(),\n      subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\n      signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n      signatureValue: this.signatureValue.toJSON()\n    };\n    if (\"attributes\" in this) object.attributes = Array.from(this.attributes, element => element.toJSON());\n    return object;\n  } //**********************************************************************************\n\n  /**\r\n   * Makes signature for currect certification request\r\n   * @param {Object} privateKey WebCrypto private key\r\n   * @param {string} [hashAlgorithm=SHA-1] String representing current hashing algorithm\r\n   */\n\n\n  sign(privateKey, hashAlgorithm = \"SHA-1\") {\n    //region Initial checking\n    //region Get a private key from function parameter\n    if (typeof privateKey === \"undefined\") return Promise.reject(\"Need to provide a private key for signing\"); //endregion\n    //endregion\n    //region Initial variables\n\n    let sequence = Promise.resolve();\n    let parameters;\n    const engine = getEngine(); //endregion\n    //region Get a \"default parameters\" for current algorithm and set correct signature algorithm\n\n    sequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\n    sequence = sequence.then(result => {\n      parameters = result.parameters;\n      this.signatureAlgorithm = result.signatureAlgorithm;\n    }); //endregion\n    //region Create TBS data for signing\n\n    sequence = sequence.then(() => {\n      this.tbs = this.encodeTBS().toBER(false);\n    }); //endregion\n    //region Signing TBS data on provided private key\n\n    sequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbs, privateKey, parameters));\n    sequence = sequence.then(result => {\n      this.signatureValue = new asn1js.BitString({\n        valueHex: result\n      });\n    }); //endregion\n\n    return sequence;\n  } //**********************************************************************************\n\n  /**\r\n   * Verify existing certification request signature\r\n   * @returns {*}\r\n   */\n\n\n  verify() {\n    return getEngine().subtle.verifyWithPublicKey(this.tbs, this.signatureValue, this.subjectPublicKeyInfo, this.signatureAlgorithm);\n  } //**********************************************************************************\n\n  /**\r\n   * Importing public key for current certificate request\r\n   */\n\n\n  getPublicKey(parameters = null) {\n    return getEngine().getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/CertificationRequest.js"],"names":["asn1js","getParametersValue","bufferToHexCodes","clearProps","getEngine","PublicKeyInfo","RelativeDistinguishedNames","AlgorithmIdentifier","Attribute","CertificationRequestInfo","parameters","names","Sequence","name","value","Integer","CertificationRequestInfoVersion","schema","subject","blockName","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","CertificationRequestInfoAttributes","attributes","CertificationRequest","constructor","tbs","defaultValues","version","subjectPublicKeyInfo","signatureAlgorithm","signatureValue","fromSchema","memberName","ArrayBuffer","BitString","Error","certificationRequestInfo","ObjectIdentifier","Any","asn1","compareSchema","verified","result","valueBeforeDecode","valueBlock","valueDec","Array","from","element","encodeTBS","outputArray","toSchema","push","encodeFlag","tbsSchema","byteLength","fromBER","toJSON","object","sign","privateKey","hashAlgorithm","Promise","reject","sequence","resolve","engine","then","subtle","getSignatureParameters","toBER","signWithPrivateKey","valueHex","verify","verifyWithPublicKey","getPublicKey"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, bufferToHexCodes, clearProps } from \"pvutils\";\r\nimport { getEngine } from \"./common.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Attribute from \"./Attribute.js\";\r\n//**************************************************************************************\r\nfunction CertificationRequestInfo(parameters = {})\r\n{\r\n\t//CertificationRequestInfo ::= SEQUENCE {\r\n\t//    version       INTEGER { v1(0) } (v1,...),\r\n\t//    subject       Name,\r\n\t//    subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},\r\n\t//    attributes    [0] Attributes{{ CRIAttributes }}\r\n\t//}\r\n\t\r\n\t/**\r\n\t * @type {Object}\r\n\t * @property {string} [blockName]\r\n\t * @property {string} [CertificationRequestInfo]\r\n\t * @property {string} [CertificationRequestInfoVersion]\r\n\t * @property {string} [subject]\r\n\t * @property {string} [CertificationRequestInfoAttributes]\r\n\t * @property {string} [attributes]\r\n\t */\r\n\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tname: (names.CertificationRequestInfo || \"CertificationRequestInfo\"),\r\n\t\tvalue: [\r\n\t\t\tnew asn1js.Integer({ name: (names.CertificationRequestInfoVersion || \"CertificationRequestInfo.version\") }),\r\n\t\t\tRelativeDistinguishedNames.schema(names.subject || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"CertificationRequestInfo.subject\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tPublicKeyInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"CertificationRequestInfo.subjectPublicKeyInfo\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\toptional: true, // Because OpenSSL makes wrong \"attributes\" field\r\n\t\t\t\t\t\tname: (names.CertificationRequestInfoAttributes || \"CertificationRequestInfo.attributes\"),\r\n\t\t\t\t\t\tvalue: Attribute.schema(names.attributes || {})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t]\r\n\t}));\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2986\r\n */\r\nexport default class CertificationRequest\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Attribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", CertificationRequest.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", CertificationRequest.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc subject\r\n\t\t */\r\n\t\tthis.subject = getParametersValue(parameters, \"subject\", CertificationRequest.defaultValues(\"subject\"));\r\n\t\t/**\r\n\t\t * @type {PublicKeyInfo}\r\n\t\t * @desc subjectPublicKeyInfo\r\n\t\t */\r\n\t\tthis.subjectPublicKeyInfo = getParametersValue(parameters, \"subjectPublicKeyInfo\", CertificationRequest.defaultValues(\"subjectPublicKeyInfo\"));\r\n\t\t\r\n\t\tif(\"attributes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc attributes\r\n\t\t\t */\r\n\t\t\tthis.attributes = getParametersValue(parameters, \"attributes\", CertificationRequest.defaultValues(\"attributes\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", CertificationRequest.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", CertificationRequest.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"subject\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"subjectPublicKeyInfo\":\r\n\t\t\t\treturn new PublicKeyInfo();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificationRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CertificationRequest ::= SEQUENCE {\r\n\t *    certificationRequestInfo CertificationRequestInfo,\r\n\t *    signatureAlgorithm       AlgorithmIdentifier{{ SignatureAlgorithms }},\r\n\t *    signature                BIT STRING\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certificationRequestInfo]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tCertificationRequestInfo(names.certificationRequestInfo || {}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tname: (names.signatureAlgorithm || \"signatureAlgorithm\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.ObjectIdentifier(),\r\n\t\t\t\t\t\tnew asn1js.Any({ optional: true })\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"signatureValue\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"CertificationRequestInfo\",\r\n\t\t\t\"CertificationRequestInfo.version\",\r\n\t\t\t\"CertificationRequestInfo.subject\",\r\n\t\t\t\"CertificationRequestInfo.subjectPublicKeyInfo\",\r\n\t\t\t\"CertificationRequestInfo.attributes\",\r\n\t\t\t\"signatureAlgorithm\",\r\n\t\t\t\"signatureValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificationRequest.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificationRequest\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.CertificationRequestInfo.valueBeforeDecode;\r\n\t\t\r\n\t\tthis.version = asn1.result[\"CertificationRequestInfo.version\"].valueBlock.valueDec;\r\n\t\tthis.subject = new RelativeDistinguishedNames({ schema: asn1.result[\"CertificationRequestInfo.subject\"] });\r\n\t\tthis.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[\"CertificationRequestInfo.subjectPublicKeyInfo\"] });\r\n\t\tif(\"CertificationRequestInfo.attributes\" in asn1.result)\r\n\t\t\tthis.attributes = Array.from(asn1.result[\"CertificationRequestInfo.attributes\"], element => new Attribute({ schema: element }));\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function making ASN1js Sequence from current TBS\r\n\t * @returns {Sequence}\r\n\t */\r\n\tencodeTBS()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.subject.toSchema(),\r\n\t\t\tthis.subjectPublicKeyInfo.toSchema()\r\n\t\t];\r\n\t\t\r\n\t\tif(\"attributes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tlet tbsSchema;\r\n\t\t\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.byteLength === 0) // No stored TBS part\r\n\t\t\t\treturn CertificationRequest.schema();\r\n\t\t\t\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t\ttbsSchema = this.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsSchema,\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\ttbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n\t\t\tversion: this.version,\r\n\t\t\tsubject: this.subject.toJSON(),\r\n\t\t\tsubjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"attributes\" in this)\r\n\t\t\tobject.attributes = Array.from(this.attributes, element => element.toJSON());\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Makes signature for currect certification request\r\n\t * @param {Object} privateKey WebCrypto private key\r\n\t * @param {string} [hashAlgorithm=SHA-1] String representing current hashing algorithm\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbs = this.encodeTBS().toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify existing certification request signature\r\n\t * @returns {*}\r\n\t */\r\n\tverify()\r\n\t{\r\n\t\treturn getEngine().subtle.verifyWithPublicKey(this.tbs, this.signatureValue, this.subjectPublicKeyInfo, this.signatureAlgorithm);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Importing public key for current certificate request\r\n\t */\r\n\tgetPublicKey(parameters = null)\r\n\t{\r\n\t\treturn getEngine().getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}