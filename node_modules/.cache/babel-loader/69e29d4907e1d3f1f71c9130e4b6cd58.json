{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, bufferToHexCodes, clearProps } from \"pvutils\";\nimport { getEngine } from \"./common.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\nimport Time from \"./Time.js\";\nimport RevokedCertificate from \"./RevokedCertificate.js\";\nimport Extensions from \"./Extensions.js\"; //**************************************************************************************\n\nfunction tbsCertList(parameters = {}) {\n  //TBSCertList  ::=  SEQUENCE  {\n  //    version                 Version OPTIONAL,\n  //                                 -- if present, MUST be v2\n  //    signature               AlgorithmIdentifier,\n  //    issuer                  Name,\n  //    thisUpdate              Time,\n  //    nextUpdate              Time OPTIONAL,\n  //    revokedCertificates     SEQUENCE OF SEQUENCE  {\n  //        userCertificate         CertificateSerialNumber,\n  //        revocationDate          Time,\n  //        crlEntryExtensions      Extensions OPTIONAL\n  //        -- if present, version MUST be v2\n  //    }  OPTIONAL,\n  //    crlExtensions           [0]  EXPLICIT Extensions OPTIONAL\n  //    -- if present, version MUST be v2\n  //}\n\n  /**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [tbsCertListVersion]\r\n   * @property {string} [signature]\r\n   * @property {string} [issuer]\r\n   * @property {string} [tbsCertListThisUpdate]\r\n   * @property {string} [tbsCertListNextUpdate]\r\n   * @property {string} [tbsCertListRevokedCertificates]\r\n   * @property {string} [crlExtensions]\r\n   */\n  const names = getParametersValue(parameters, \"names\", {});\n  return new asn1js.Sequence({\n    name: names.blockName || \"tbsCertList\",\n    value: [new asn1js.Integer({\n      optional: true,\n      name: names.tbsCertListVersion || \"tbsCertList.version\",\n      value: 2\n    }), // EXPLICIT integer value (v2)\n    AlgorithmIdentifier.schema(names.signature || {\n      names: {\n        blockName: \"tbsCertList.signature\"\n      }\n    }), RelativeDistinguishedNames.schema(names.issuer || {\n      names: {\n        blockName: \"tbsCertList.issuer\"\n      }\n    }), Time.schema(names.tbsCertListThisUpdate || {\n      names: {\n        utcTimeName: \"tbsCertList.thisUpdate\",\n        generalTimeName: \"tbsCertList.thisUpdate\"\n      }\n    }), Time.schema(names.tbsCertListNextUpdate || {\n      names: {\n        utcTimeName: \"tbsCertList.nextUpdate\",\n        generalTimeName: \"tbsCertList.nextUpdate\"\n      }\n    }, true), new asn1js.Sequence({\n      optional: true,\n      value: [new asn1js.Repeated({\n        name: names.tbsCertListRevokedCertificates || \"tbsCertList.revokedCertificates\",\n        value: new asn1js.Sequence({\n          value: [new asn1js.Integer(), Time.schema(), Extensions.schema({}, true)]\n        })\n      })]\n    }), new asn1js.Constructed({\n      optional: true,\n      idBlock: {\n        tagClass: 3,\n        // CONTEXT-SPECIFIC\n        tagNumber: 0 // [0]\n\n      },\n      value: [Extensions.schema(names.crlExtensions || {\n        names: {\n          blockName: \"tbsCertList.extensions\"\n        }\n      })]\n    }) // EXPLICIT SEQUENCE value\n    ]\n  });\n} //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\n\nexport default class CertificateRevocationList {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for Attribute class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {ArrayBuffer}\r\n     * @desc tbs\r\n     */\n    this.tbs = getParametersValue(parameters, \"tbs\", CertificateRevocationList.defaultValues(\"tbs\"));\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n\n    this.version = getParametersValue(parameters, \"version\", CertificateRevocationList.defaultValues(\"version\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc signature\r\n     */\n\n    this.signature = getParametersValue(parameters, \"signature\", CertificateRevocationList.defaultValues(\"signature\"));\n    /**\r\n     * @type {RelativeDistinguishedNames}\r\n     * @desc issuer\r\n     */\n\n    this.issuer = getParametersValue(parameters, \"issuer\", CertificateRevocationList.defaultValues(\"issuer\"));\n    /**\r\n     * @type {Time}\r\n     * @desc thisUpdate\r\n     */\n\n    this.thisUpdate = getParametersValue(parameters, \"thisUpdate\", CertificateRevocationList.defaultValues(\"thisUpdate\"));\n    if (\"nextUpdate\" in parameters)\n      /**\r\n       * @type {Time}\r\n       * @desc nextUpdate\r\n       */\n      this.nextUpdate = getParametersValue(parameters, \"nextUpdate\", CertificateRevocationList.defaultValues(\"nextUpdate\"));\n    if (\"revokedCertificates\" in parameters)\n      /**\r\n       * @type {Array.<RevokedCertificate>}\r\n       * @desc revokedCertificates\r\n       */\n      this.revokedCertificates = getParametersValue(parameters, \"revokedCertificates\", CertificateRevocationList.defaultValues(\"revokedCertificates\"));\n    if (\"crlExtensions\" in parameters)\n      /**\r\n       * @type {Extensions}\r\n       * @desc crlExtensions\r\n       */\n      this.crlExtensions = getParametersValue(parameters, \"crlExtensions\", CertificateRevocationList.defaultValues(\"crlExtensions\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc signatureAlgorithm\r\n     */\n\n    this.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", CertificateRevocationList.defaultValues(\"signatureAlgorithm\"));\n    /**\r\n     * @type {BitString}\r\n     * @desc signatureValue\r\n     */\n\n    this.signatureValue = getParametersValue(parameters, \"signatureValue\", CertificateRevocationList.defaultValues(\"signatureValue\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"tbs\":\n        return new ArrayBuffer(0);\n\n      case \"version\":\n        return 1;\n\n      case \"signature\":\n        return new AlgorithmIdentifier();\n\n      case \"issuer\":\n        return new RelativeDistinguishedNames();\n\n      case \"thisUpdate\":\n        return new Time();\n\n      case \"nextUpdate\":\n        return new Time();\n\n      case \"revokedCertificates\":\n        return [];\n\n      case \"crlExtensions\":\n        return new Extensions();\n\n      case \"signatureAlgorithm\":\n        return new AlgorithmIdentifier();\n\n      case \"signatureValue\":\n        return new asn1js.BitString();\n\n      default:\n        throw new Error(`Invalid member name for CertificateRevocationList class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * CertificateList  ::=  SEQUENCE  {\r\n   *    tbsCertList          TBSCertList,\r\n   *    signatureAlgorithm   AlgorithmIdentifier,\r\n   *    signatureValue       BIT STRING  }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [signatureAlgorithm]\r\n     * @property {string} [signatureValue]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"CertificateList\",\n      value: [tbsCertList(parameters), AlgorithmIdentifier.schema(names.signatureAlgorithm || {\n        names: {\n          blockName: \"signatureAlgorithm\"\n        }\n      }), new asn1js.BitString({\n        name: names.signatureValue || \"signatureValue\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"tbsCertList\", \"tbsCertList.version\", \"tbsCertList.signature\", \"tbsCertList.issuer\", \"tbsCertList.thisUpdate\", \"tbsCertList.nextUpdate\", \"tbsCertList.revokedCertificates\", \"tbsCertList.extensions\", \"signatureAlgorithm\", \"signatureValue\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, CertificateRevocationList.schema());\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for CertificateRevocationList\"); //endregion\n    //region Get internal properties from parsed schema\n    // noinspection JSUnresolvedVariable\n\n    this.tbs = asn1.result.tbsCertList.valueBeforeDecode;\n    if (\"tbsCertList.version\" in asn1.result) this.version = asn1.result[\"tbsCertList.version\"].valueBlock.valueDec;\n    this.signature = new AlgorithmIdentifier({\n      schema: asn1.result[\"tbsCertList.signature\"]\n    });\n    this.issuer = new RelativeDistinguishedNames({\n      schema: asn1.result[\"tbsCertList.issuer\"]\n    });\n    this.thisUpdate = new Time({\n      schema: asn1.result[\"tbsCertList.thisUpdate\"]\n    });\n    if (\"tbsCertList.nextUpdate\" in asn1.result) this.nextUpdate = new Time({\n      schema: asn1.result[\"tbsCertList.nextUpdate\"]\n    });\n    if (\"tbsCertList.revokedCertificates\" in asn1.result) this.revokedCertificates = Array.from(asn1.result[\"tbsCertList.revokedCertificates\"], element => new RevokedCertificate({\n      schema: element\n    }));\n    if (\"tbsCertList.extensions\" in asn1.result) this.crlExtensions = new Extensions({\n      schema: asn1.result[\"tbsCertList.extensions\"]\n    });\n    this.signatureAlgorithm = new AlgorithmIdentifier({\n      schema: asn1.result.signatureAlgorithm\n    });\n    this.signatureValue = asn1.result.signatureValue; //endregion\n  } //**********************************************************************************\n\n\n  encodeTBS() {\n    //region Create array for output sequence\n    const outputArray = [];\n    if (this.version !== CertificateRevocationList.defaultValues(\"version\")) outputArray.push(new asn1js.Integer({\n      value: this.version\n    }));\n    outputArray.push(this.signature.toSchema());\n    outputArray.push(this.issuer.toSchema());\n    outputArray.push(this.thisUpdate.toSchema());\n    if (\"nextUpdate\" in this) outputArray.push(this.nextUpdate.toSchema());\n\n    if (\"revokedCertificates\" in this) {\n      outputArray.push(new asn1js.Sequence({\n        value: Array.from(this.revokedCertificates, element => element.toSchema())\n      }));\n    }\n\n    if (\"crlExtensions\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [this.crlExtensions.toSchema()]\n      }));\n    } //endregion\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema(encodeFlag = false) {\n    //region Decode stored TBS value\n    let tbsSchema;\n\n    if (encodeFlag === false) {\n      if (this.tbs.length === 0) // No stored TBS part\n        return CertificateRevocationList.schema();\n      tbsSchema = asn1js.fromBER(this.tbs).result;\n    } //endregion\n    //region Create TBS schema via assembling from TBS parts\n    else tbsSchema = this.encodeTBS(); //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: [tbsSchema, this.signatureAlgorithm.toSchema(), this.signatureValue]\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const object = {\n      tbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\n      signature: this.signature.toJSON(),\n      issuer: this.issuer.toJSON(),\n      thisUpdate: this.thisUpdate.toJSON(),\n      signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n      signatureValue: this.signatureValue.toJSON()\n    };\n    if (this.version !== CertificateRevocationList.defaultValues(\"version\")) object.version = this.version;\n    if (\"nextUpdate\" in this) object.nextUpdate = this.nextUpdate.toJSON();\n    if (\"revokedCertificates\" in this) object.revokedCertificates = Array.from(this.revokedCertificates, element => element.toJSON());\n    if (\"crlExtensions\" in this) object.crlExtensions = this.crlExtensions.toJSON();\n    return object;\n  } //**********************************************************************************\n\n\n  isCertificateRevoked(certificate) {\n    //region Check that issuer of the input certificate is the same with issuer of this CRL\n    if (this.issuer.isEqual(certificate.issuer) === false) return false; //endregion\n    //region Check that there are revoked certificates in this CRL\n\n    if (\"revokedCertificates\" in this === false) return false; //endregion\n    //region Search for input certificate in revoked certificates array\n\n    for (const revokedCertificate of this.revokedCertificates) {\n      if (revokedCertificate.userCertificate.isEqual(certificate.serialNumber)) return true;\n    } //endregion\n\n\n    return false;\n  } //**********************************************************************************\n\n  /**\r\n   * Make a signature for existing CRL data\r\n   * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n   * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n   */\n\n\n  sign(privateKey, hashAlgorithm = \"SHA-1\") {\n    //region Initial checking\n    //region Get a private key from function parameter\n    if (typeof privateKey === \"undefined\") return Promise.reject(\"Need to provide a private key for signing\"); //endregion\n    //endregion\n    //region Initial variables\n\n    let sequence = Promise.resolve();\n    let parameters;\n    const engine = getEngine(); //endregion\n    //region Get a \"default parameters\" for current algorithm and set correct signature algorithm\n\n    sequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\n    sequence = sequence.then(result => {\n      parameters = result.parameters;\n      this.signature = result.signatureAlgorithm;\n      this.signatureAlgorithm = result.signatureAlgorithm;\n    }); //endregion\n    //region Create TBS data for signing\n\n    sequence = sequence.then(() => {\n      this.tbs = this.encodeTBS().toBER(false);\n    }); //endregion\n    //region Signing TBS data on provided private key\n\n    sequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbs, privateKey, parameters));\n    sequence = sequence.then(result => {\n      this.signatureValue = new asn1js.BitString({\n        valueHex: result\n      });\n    }); //endregion\n\n    return sequence;\n  } //**********************************************************************************\n\n  /**\r\n   * Verify existing signature\r\n   * @param {{[issuerCertificate]: Object, [publicKeyInfo]: Object}} parameters\r\n   * @returns {*}\r\n   */\n\n\n  verify(parameters = {}) {\n    //region Global variables\n    let sequence = Promise.resolve();\n    let subjectPublicKeyInfo = -1;\n    const engine = getEngine(); //endregion\n    //region Get information about CRL issuer certificate\n\n    if (\"issuerCertificate\" in parameters) // \"issuerCertificate\" must be of type \"Certificate\"\n      {\n        subjectPublicKeyInfo = parameters.issuerCertificate.subjectPublicKeyInfo; // The CRL issuer name and \"issuerCertificate\" subject name are not equal\n\n        if (this.issuer.isEqual(parameters.issuerCertificate.subject) === false) return Promise.resolve(false);\n      } //region In case if there is only public key during verification\n\n\n    if (\"publicKeyInfo\" in parameters) subjectPublicKeyInfo = parameters.publicKeyInfo; // Must be of type \"PublicKeyInfo\"\n    //endregion\n\n    if (\"subjectPublicKey\" in subjectPublicKeyInfo === false) return Promise.reject(\"Issuer's certificate must be provided as an input parameter\"); //endregion\n    //region Check the CRL for unknown critical extensions\n\n    if (\"crlExtensions\" in this) {\n      for (const extension of this.crlExtensions.extensions) {\n        if (extension.critical) {\n          // We can not be sure that unknown extension has no value for CRL signature\n          if (\"parsedValue\" in extension === false) return Promise.resolve(false);\n        }\n      }\n    } //endregion\n\n\n    sequence = sequence.then(() => engine.subtle.verifyWithPublicKey(this.tbs, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm));\n    return sequence;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/CertificateRevocationList.js"],"names":["asn1js","getParametersValue","bufferToHexCodes","clearProps","getEngine","AlgorithmIdentifier","RelativeDistinguishedNames","Time","RevokedCertificate","Extensions","tbsCertList","parameters","names","Sequence","name","blockName","value","Integer","optional","tbsCertListVersion","schema","signature","issuer","tbsCertListThisUpdate","utcTimeName","generalTimeName","tbsCertListNextUpdate","Repeated","tbsCertListRevokedCertificates","Constructed","idBlock","tagClass","tagNumber","crlExtensions","CertificateRevocationList","constructor","tbs","defaultValues","version","thisUpdate","nextUpdate","revokedCertificates","signatureAlgorithm","signatureValue","fromSchema","memberName","ArrayBuffer","BitString","Error","asn1","compareSchema","verified","result","valueBeforeDecode","valueBlock","valueDec","Array","from","element","encodeTBS","outputArray","push","toSchema","encodeFlag","tbsSchema","length","fromBER","toJSON","object","byteLength","isCertificateRevoked","certificate","isEqual","revokedCertificate","userCertificate","serialNumber","sign","privateKey","hashAlgorithm","Promise","reject","sequence","resolve","engine","then","subtle","getSignatureParameters","toBER","signWithPrivateKey","valueHex","verify","subjectPublicKeyInfo","issuerCertificate","subject","publicKeyInfo","extension","extensions","critical","verifyWithPublicKey"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, bufferToHexCodes, clearProps } from \"pvutils\";\r\nimport { getEngine } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport Time from \"./Time.js\";\r\nimport RevokedCertificate from \"./RevokedCertificate.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\nfunction tbsCertList(parameters = {})\r\n{\r\n\t//TBSCertList  ::=  SEQUENCE  {\r\n\t//    version                 Version OPTIONAL,\r\n\t//                                 -- if present, MUST be v2\r\n\t//    signature               AlgorithmIdentifier,\r\n\t//    issuer                  Name,\r\n\t//    thisUpdate              Time,\r\n\t//    nextUpdate              Time OPTIONAL,\r\n\t//    revokedCertificates     SEQUENCE OF SEQUENCE  {\r\n\t//        userCertificate         CertificateSerialNumber,\r\n\t//        revocationDate          Time,\r\n\t//        crlEntryExtensions      Extensions OPTIONAL\r\n\t//        -- if present, version MUST be v2\r\n\t//    }  OPTIONAL,\r\n\t//    crlExtensions           [0]  EXPLICIT Extensions OPTIONAL\r\n\t//    -- if present, version MUST be v2\r\n\t//}\r\n\t\r\n\t/**\r\n\t * @type {Object}\r\n\t * @property {string} [blockName]\r\n\t * @property {string} [tbsCertListVersion]\r\n\t * @property {string} [signature]\r\n\t * @property {string} [issuer]\r\n\t * @property {string} [tbsCertListThisUpdate]\r\n\t * @property {string} [tbsCertListNextUpdate]\r\n\t * @property {string} [tbsCertListRevokedCertificates]\r\n\t * @property {string} [crlExtensions]\r\n\t */\r\n\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tname: (names.blockName || \"tbsCertList\"),\r\n\t\tvalue: [\r\n\t\t\tnew asn1js.Integer({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tname: (names.tbsCertListVersion || \"tbsCertList.version\"),\r\n\t\t\t\tvalue: 2\r\n\t\t\t}), // EXPLICIT integer value (v2)\r\n\t\t\tAlgorithmIdentifier.schema(names.signature || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertList.signature\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tRelativeDistinguishedNames.schema(names.issuer || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertList.issuer\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tTime.schema(names.tbsCertListThisUpdate || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tutcTimeName: \"tbsCertList.thisUpdate\",\r\n\t\t\t\t\tgeneralTimeName: \"tbsCertList.thisUpdate\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tTime.schema(names.tbsCertListNextUpdate || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tutcTimeName: \"tbsCertList.nextUpdate\",\r\n\t\t\t\t\tgeneralTimeName: \"tbsCertList.nextUpdate\"\r\n\t\t\t\t}\r\n\t\t\t}, true),\r\n\t\t\tnew asn1js.Sequence({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\tname: (names.tbsCertListRevokedCertificates || \"tbsCertList.revokedCertificates\"),\r\n\t\t\t\t\t\tvalue: new asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.Integer(),\r\n\t\t\t\t\t\t\t\tTime.schema(),\r\n\t\t\t\t\t\t\t\tExtensions.schema({}, true)\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [Extensions.schema(names.crlExtensions || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"tbsCertList.extensions\"\r\n\t\t\t\t\t}\r\n\t\t\t\t})]\r\n\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t]\r\n\t}));\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class CertificateRevocationList {\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Attribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", CertificateRevocationList.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", CertificateRevocationList.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", CertificateRevocationList.defaultValues(\"signature\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", CertificateRevocationList.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @desc thisUpdate\r\n\t\t */\r\n\t\tthis.thisUpdate = getParametersValue(parameters, \"thisUpdate\", CertificateRevocationList.defaultValues(\"thisUpdate\"));\r\n\t\t\r\n\t\tif(\"nextUpdate\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Time}\r\n\t\t\t * @desc nextUpdate\r\n\t\t\t */\r\n\t\t\tthis.nextUpdate = getParametersValue(parameters, \"nextUpdate\", CertificateRevocationList.defaultValues(\"nextUpdate\"));\r\n\t\t\r\n\t\tif(\"revokedCertificates\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<RevokedCertificate>}\r\n\t\t\t * @desc revokedCertificates\r\n\t\t\t */\r\n\t\t\tthis.revokedCertificates = getParametersValue(parameters, \"revokedCertificates\", CertificateRevocationList.defaultValues(\"revokedCertificates\"));\r\n\t\t\r\n\t\tif(\"crlExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Extensions}\r\n\t\t\t * @desc crlExtensions\r\n\t\t\t */\r\n\t\t\tthis.crlExtensions = getParametersValue(parameters, \"crlExtensions\", CertificateRevocationList.defaultValues(\"crlExtensions\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", CertificateRevocationList.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc signatureValue\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", CertificateRevocationList.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 1;\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"thisUpdate\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"nextUpdate\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"revokedCertificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crlExtensions\":\r\n\t\t\t\treturn new Extensions();\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificateRevocationList class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CertificateList  ::=  SEQUENCE  {\r\n\t *    tbsCertList          TBSCertList,\r\n\t *    signatureAlgorithm   AlgorithmIdentifier,\r\n\t *    signatureValue       BIT STRING  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"CertificateList\"),\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsCertList(parameters),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"signatureValue\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"tbsCertList\",\r\n\t\t\t\"tbsCertList.version\",\r\n\t\t\t\"tbsCertList.signature\",\r\n\t\t\t\"tbsCertList.issuer\",\r\n\t\t\t\"tbsCertList.thisUpdate\",\r\n\t\t\t\"tbsCertList.nextUpdate\",\r\n\t\t\t\"tbsCertList.revokedCertificates\",\r\n\t\t\t\"tbsCertList.extensions\",\r\n\t\t\t\"signatureAlgorithm\",\r\n\t\t\t\"signatureValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificateRevocationList.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificateRevocationList\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tthis.tbs = asn1.result.tbsCertList.valueBeforeDecode;\r\n\t\t\r\n\t\tif(\"tbsCertList.version\" in asn1.result)\r\n\t\t\tthis.version = asn1.result[\"tbsCertList.version\"].valueBlock.valueDec;\r\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result[\"tbsCertList.signature\"] });\r\n\t\tthis.issuer = new RelativeDistinguishedNames({ schema: asn1.result[\"tbsCertList.issuer\"] });\r\n\t\tthis.thisUpdate = new Time({ schema: asn1.result[\"tbsCertList.thisUpdate\"] });\r\n\t\tif(\"tbsCertList.nextUpdate\" in asn1.result)\r\n\t\t\tthis.nextUpdate = new Time({ schema: asn1.result[\"tbsCertList.nextUpdate\"] });\r\n\t\tif(\"tbsCertList.revokedCertificates\" in asn1.result)\r\n\t\t\tthis.revokedCertificates = Array.from(asn1.result[\"tbsCertList.revokedCertificates\"], element => new RevokedCertificate({ schema: element }));\r\n\t\tif(\"tbsCertList.extensions\" in asn1.result)\r\n\t\t\tthis.crlExtensions = new Extensions({ schema: asn1.result[\"tbsCertList.extensions\"] });\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\tencodeTBS()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(this.version !== CertificateRevocationList.defaultValues(\"version\"))\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\toutputArray.push(this.signature.toSchema());\r\n\t\toutputArray.push(this.issuer.toSchema());\r\n\t\toutputArray.push(this.thisUpdate.toSchema());\r\n\t\t\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\toutputArray.push(this.nextUpdate.toSchema());\r\n\t\t\r\n\t\tif(\"revokedCertificates\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.revokedCertificates, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"crlExtensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tthis.crlExtensions.toSchema()\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tlet tbsSchema;\r\n\t\t\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.length === 0) // No stored TBS part\r\n\t\t\t\treturn CertificateRevocationList.schema();\r\n\t\t\t\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t\ttbsSchema = this.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsSchema,\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\ttbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n\t\t\tsignature: this.signature.toJSON(),\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tthisUpdate: this.thisUpdate.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(this.version !== CertificateRevocationList.defaultValues(\"version\"))\r\n\t\t\tobject.version = this.version;\r\n\t\t\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\tobject.nextUpdate = this.nextUpdate.toJSON();\r\n\t\t\r\n\t\tif(\"revokedCertificates\" in this)\r\n\t\t\tobject.revokedCertificates = Array.from(this.revokedCertificates, element => element.toJSON());\r\n\t\t\r\n\t\tif(\"crlExtensions\" in this)\r\n\t\t\tobject.crlExtensions = this.crlExtensions.toJSON();\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\tisCertificateRevoked(certificate)\r\n\t{\r\n\t\t//region Check that issuer of the input certificate is the same with issuer of this CRL\r\n\t\tif(this.issuer.isEqual(certificate.issuer) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check that there are revoked certificates in this CRL\r\n\t\tif((\"revokedCertificates\" in this) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search for input certificate in revoked certificates array\r\n\t\tfor(const revokedCertificate of this.revokedCertificates)\r\n\t\t{\r\n\t\t\tif(revokedCertificate.userCertificate.isEqual(certificate.serialNumber))\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make a signature for existing CRL data\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signature = result.signatureAlgorithm;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbs = this.encodeTBS().toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify existing signature\r\n\t * @param {{[issuerCertificate]: Object, [publicKeyInfo]: Object}} parameters\r\n\t * @returns {*}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Global variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet subjectPublicKeyInfo = -1;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get information about CRL issuer certificate\r\n\t\tif(\"issuerCertificate\" in parameters) // \"issuerCertificate\" must be of type \"Certificate\"\r\n\t\t{\r\n\t\t\tsubjectPublicKeyInfo = parameters.issuerCertificate.subjectPublicKeyInfo;\r\n\t\t\t\r\n\t\t\t// The CRL issuer name and \"issuerCertificate\" subject name are not equal\r\n\t\t\tif(this.issuer.isEqual(parameters.issuerCertificate.subject) === false)\r\n\t\t\t\treturn Promise.resolve(false);\r\n\t\t}\r\n\t\t\r\n\t\t//region In case if there is only public key during verification\r\n\t\tif(\"publicKeyInfo\" in parameters)\r\n\t\t\tsubjectPublicKeyInfo = parameters.publicKeyInfo; // Must be of type \"PublicKeyInfo\"\r\n\t\t//endregion\r\n\t\t\r\n\t\tif((\"subjectPublicKey\" in subjectPublicKeyInfo) === false)\r\n\t\t\treturn Promise.reject(\"Issuer's certificate must be provided as an input parameter\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the CRL for unknown critical extensions\r\n\t\tif(\"crlExtensions\" in this)\r\n\t\t{\r\n\t\t\tfor(const extension of this.crlExtensions.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.critical)\r\n\t\t\t\t{\r\n\t\t\t\t\t// We can not be sure that unknown extension has no value for CRL signature\r\n\t\t\t\t\tif((\"parsedValue\" in extension) === false)\r\n\t\t\t\t\t\treturn Promise.resolve(false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\tsequence = sequence.then(() => engine.subtle.verifyWithPublicKey(this.tbs, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm));\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}