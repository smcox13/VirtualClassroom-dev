{"ast":null,"code":"/*!\n * algorithms/ecdh.js - Elliptic Curve Diffie-Hellman algorithms\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\";\n\nvar clone = require(\"lodash.clone\"),\n    merge = require(\"../util/merge\"),\n    omit = require(\"lodash.omit\"),\n    pick = require(\"lodash.pick\"),\n    util = require(\"../util\"),\n    ecUtil = require(\"./ec-util.js\"),\n    hkdf = require(\"./hkdf.js\"),\n    concat = require(\"./concat.js\"),\n    aesKw = require(\"./aes-kw.js\"),\n    helpers = require(\"./helpers.js\"),\n    CONSTANTS = require(\"./constants.js\");\n\nfunction idealHash(curve) {\n  switch (curve) {\n    case \"P-256\":\n      return \"SHA-256\";\n\n    case \"P-384\":\n      return \"SHA-384\";\n\n    case \"P-521\":\n      return \"SHA-512\";\n\n    default:\n      throw new Error(\"unsupported curve: \" + curve);\n  }\n} // ### Exported\n\n\nvar ecdh = module.exports = {}; // ### Derivation algorithms\n// ### \"raw\" ECDH\n\nfunction ecdhDeriveFn() {\n  var alg = {\n    name: \"ECDH\"\n  };\n\n  var validatePublic = function (pk, form) {\n    var pubKey = pk && ecUtil.convertToForge(pk, true);\n\n    if (!pubKey || !pubKey.isValid()) {\n      return Promise.reject(new Error(\"invalid EC public key\"));\n    }\n\n    switch (form) {\n      case \"jwk\":\n        pubKey = ecUtil.convertToJWK(pk, true);\n        break;\n\n      case \"buffer\":\n        pubKey = ecUtil.convertToBuffer(pk, true);\n        break;\n    }\n\n    return Promise.resolve(pubKey);\n  }; // ### fallback implementation -- uses ecc + forge\n\n\n  var fallback = function (key, props) {\n    props = props || {};\n    var keyLen = props.length || 0; // assume {key} is privateKey\n    // assume {props.public} is publicKey\n\n    var privKey = ecUtil.convertToForge(key, false);\n    var p = validatePublic(props.public, \"forge\");\n    p = p.then(function (pubKey) {\n      // {pubKey} is \"forge\"\n      var secret = privKey.computeSecret(pubKey);\n\n      if (keyLen) {\n        // truncate to requested key length\n        if (secret.length < keyLen) {\n          return Promise.reject(new Error(\"key length too large: \" + keyLen));\n        }\n\n        secret = secret.slice(0, keyLen);\n      }\n\n      return secret;\n    });\n    return p;\n  }; // ### WebCryptoAPI implementation\n  // TODO: cache CryptoKey sooner\n\n\n  var webcrypto = function (key, props) {\n    key = key || {};\n    props = props || {};\n    var keyLen = props.length || 0,\n        algParams = merge(clone(alg), {\n      namedCurve: key.crv\n    }); // assume {key} is privateKey\n\n    if (!keyLen) {\n      // calculate key length from private key size\n      keyLen = key.d.length;\n    }\n\n    var privKey = ecUtil.convertToJWK(key, false);\n    privKey = helpers.subtleCrypto.importKey(\"jwk\", privKey, algParams, false, [\"deriveBits\"]); // assume {props.public} is publicKey\n\n    var pubKey = validatePublic(props.public, \"jwk\");\n    pubKey = pubKey.then(function (pubKey) {\n      // {pubKey} is \"jwk\"\n      return helpers.subtleCrypto.importKey(\"jwk\", pubKey, algParams, false, []);\n    });\n    var p = Promise.all([privKey, pubKey]);\n    p = p.then(function (keypair) {\n      var privKey = keypair[0],\n          pubKey = keypair[1];\n      var algParams = merge(clone(alg), {\n        public: pubKey\n      });\n      return helpers.subtleCrypto.deriveBits(algParams, privKey, keyLen * 8);\n    });\n    p = p.then(function (result) {\n      result = new Buffer(result);\n      return result;\n    });\n    return p;\n  };\n\n  var nodejs = function (key, props) {\n    if (\"function\" !== typeof helpers.nodeCrypto.createECDH) {\n      throw new Error(\"unsupported algorithm: ECDH\");\n    }\n\n    props = props || {};\n    var keyLen = props.length || 0;\n    var curve;\n\n    switch (key.crv) {\n      case \"P-256\":\n        curve = \"prime256v1\";\n        break;\n\n      case \"P-384\":\n        curve = \"secp384r1\";\n        break;\n\n      case \"P-521\":\n        curve = \"secp521r1\";\n        break;\n\n      default:\n        return Promise.reject(new Error(\"invalid curve: \" + curve));\n    } // assume {key} is privateKey\n    // assume {props.public} is publicKey\n\n\n    var privKey = ecUtil.convertToBuffer(key, false);\n    var p = validatePublic(props.public, \"buffer\");\n    p = p.then(function (pubKey) {\n      // {pubKey} is \"buffer\"\n      var ecdh = helpers.nodeCrypto.createECDH(curve); // dummy call so computeSecret doesn't fail\n      // ecdh.generateKeys();\n\n      ecdh.setPrivateKey(privKey);\n      var secret = ecdh.computeSecret(pubKey);\n\n      if (keyLen) {\n        if (secret.length < keyLen) {\n          return Promise.reject(new Error(\"key length too large: \" + keyLen));\n        }\n\n        secret = secret.slice(0, keyLen);\n      }\n\n      return secret;\n    });\n    return p;\n  };\n\n  return helpers.setupFallback(nodejs, webcrypto, fallback);\n}\n\nfunction ecdhConcatDeriveFn() {\n  // NOTE: no nodejs/webcrypto/fallback model, since this algorithm is\n  //       implemented using other primitives\n  var fn = function (key, props) {\n    props = props || {};\n    var hash;\n\n    try {\n      hash = props.hash || idealHash(key.crv);\n\n      if (!hash) {\n        throw new Error(\"invalid hash: \" + hash);\n      }\n\n      hash.toUpperCase();\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n\n    var params = [\"public\"]; // derive shared secret\n    // NOTE: whitelist items from {props} for ECDH\n\n    var promise = ecdh.ECDH.derive(key, pick(props, params)); // expand\n\n    promise = promise.then(function (shared) {\n      // NOTE: blacklist items from {props} for ECDH\n      return concat[\"CONCAT-\" + hash].derive(shared, omit(props, params));\n    });\n    return promise;\n  };\n\n  return fn;\n}\n\nfunction ecdhHkdfDeriveFn() {\n  // NOTE: no nodejs/webcrypto/fallback model, since this algorithm is\n  //       implemented using other primitives\n  var fn = function (key, props) {\n    props = props || {};\n    var hash;\n\n    try {\n      hash = props.hash || idealHash(key.crv);\n\n      if (!hash) {\n        throw new Error(\"invalid hash: \" + hash);\n      }\n\n      hash.toUpperCase();\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n\n    var params = [\"public\"]; // derive shared secret\n    // NOTE: whitelist items from {props} for ECDH\n\n    var promise = ecdh.ECDH.derive(key, pick(props, params)); // extract-and-expand\n\n    promise = promise.then(function (shared) {\n      // NOTE: blacklist items from {props} for ECDH\n      return hkdf[\"HKDF-\" + hash].derive(shared, omit(props, params));\n    });\n    return promise;\n  };\n\n  return fn;\n} // ### Wrap/Unwrap algorithms\n\n\nfunction doEcdhesCommonDerive(privKey, pubKey, props) {\n  function prependLen(input) {\n    return Buffer.concat([helpers.int32ToBuffer(input.length), input]);\n  }\n\n  var algId = props.algorithm || \"\",\n      keyLen = CONSTANTS.KEYLENGTH[algId],\n      apu = util.asBuffer(props.apu || \"\", \"base64url\"),\n      apv = util.asBuffer(props.apv || \"\", \"base64url\");\n  var otherInfo = Buffer.concat([prependLen(new Buffer(algId, \"utf8\")), prependLen(apu), prependLen(apv), helpers.int32ToBuffer(keyLen)]);\n  var params = {\n    public: pubKey,\n    length: keyLen / 8,\n    hash: \"SHA-256\",\n    otherInfo: otherInfo\n  };\n  return ecdh[\"ECDH-CONCAT\"].derive(privKey, params);\n}\n\nfunction ecdhesDirEncryptFn() {\n  // NOTE: no nodejs/webcrypto/fallback model, since this algorithm is\n  //       implemented using other primitives\n  var fn = function (key, pdata, props) {\n    props = props || {}; // {props.epk} is private\n\n    if (!props.epk || !props.epk.d) {\n      return Promise.reject(new Error(\"missing ephemeral private key\"));\n    }\n\n    var epk = ecUtil.convertToObj(props.epk, false); // {key} is public\n\n    if (!key || !key.x || !key.y) {\n      return Promise.reject(new Error(\"missing static public key\"));\n    }\n\n    var spk = ecUtil.convertToObj(key, true); // derive ECDH shared\n\n    var promise = doEcdhesCommonDerive(epk, spk, {\n      algorithm: props.enc,\n      apu: props.apu,\n      apv: props.apv\n    });\n    promise = promise.then(function (shared) {\n      return {\n        data: shared,\n        once: true,\n        direct: true\n      };\n    });\n    return promise;\n  };\n\n  return fn;\n}\n\nfunction ecdhesDirDecryptFn() {\n  // NOTE: no nodejs/webcrypto/fallback model, since this algorithm is\n  //       implemented using other primitives\n  var fn = function (key, cdata, props) {\n    props = props || {}; // {props.epk} is public\n\n    if (!props.epk || !props.epk.x || !props.epk.y) {\n      return Promise.reject(new Error(\"missing ephemeral public key\"));\n    }\n\n    var epk = ecUtil.convertToObj(props.epk, true); // {key} is private\n\n    if (!key || !key.d) {\n      return Promise.reject(new Error(\"missing static private key\"));\n    }\n\n    var spk = ecUtil.convertToObj(key, false); // derive ECDH shared\n\n    var promise = doEcdhesCommonDerive(spk, epk, {\n      algorithm: props.enc,\n      apu: props.apu,\n      apv: props.apv\n    });\n    promise = promise.then(function (shared) {\n      return shared;\n    });\n    return promise;\n  };\n\n  return fn;\n}\n\nfunction ecdhesKwEncryptFn(wrap) {\n  // NOTE: no nodejs/webcrypto/fallback model, since this algorithm is\n  //       implemented using other primitives\n  var fn = function (key, pdata, props) {\n    props = props || {}; // {props.epk} is private\n\n    if (!props.epk || !props.epk.d) {\n      return Promise.reject(new Error(\"missing ephemeral private key\"));\n    }\n\n    var epk = ecUtil.convertToObj(props.epk, false); // {key} is public\n\n    if (!key || !key.x || !key.y) {\n      return Promise.reject(new Error(\"missing static public key\"));\n    }\n\n    var spk = ecUtil.convertToObj(key, true); // derive ECDH shared\n\n    var promise = doEcdhesCommonDerive(epk, spk, {\n      algorithm: props.alg,\n      apu: props.apu,\n      apv: props.apv\n    });\n    promise = promise.then(function (shared) {\n      // wrap provided key with ECDH shared\n      return wrap(shared, pdata);\n    });\n    return promise;\n  };\n\n  return fn;\n}\n\nfunction ecdhesKwDecryptFn(unwrap) {\n  // NOTE: no nodejs/webcrypto/fallback model, since this algorithm is\n  //       implemented using other primitives\n  var fn = function (key, cdata, props) {\n    props = props || {}; // {props.epk} is public\n\n    if (!props.epk || !props.epk.x || !props.epk.y) {\n      return Promise.reject(new Error(\"missing ephemeral public key\"));\n    }\n\n    var epk = ecUtil.convertToObj(props.epk, true); // {key} is private\n\n    if (!key || !key.d) {\n      return Promise.reject(new Error(\"missing static private key\"));\n    }\n\n    var spk = ecUtil.convertToObj(key, false); // derive ECDH shared\n\n    var promise = doEcdhesCommonDerive(spk, epk, {\n      algorithm: props.alg,\n      apu: props.apu,\n      apv: props.apv\n    });\n    promise = promise.then(function (shared) {\n      // unwrap provided key with ECDH shared\n      return unwrap(shared, cdata);\n    });\n    return promise;\n  };\n\n  return fn;\n} // ### Public API\n// * [name].derive\n\n\n[\"ECDH\", \"ECDH-HKDF\", \"ECDH-CONCAT\"].forEach(function (name) {\n  var kdf = /^ECDH(?:-(\\w+))?$/g.exec(name || \"\")[1];\n  var op = ecdh[name] = ecdh[name] || {};\n\n  switch (kdf || \"\") {\n    case \"CONCAT\":\n      op.derive = ecdhConcatDeriveFn();\n      break;\n\n    case \"HKDF\":\n      op.derive = ecdhHkdfDeriveFn();\n      break;\n\n    case \"\":\n      op.derive = ecdhDeriveFn();\n      break;\n\n    default:\n      op.derive = null;\n  }\n}); // * [name].encrypt\n// * [name].decrypt\n\n[\"ECDH-ES\", \"ECDH-ES+A128KW\", \"ECDH-ES+A192KW\", \"ECDH-ES+A256KW\"].forEach(function (name) {\n  var kw = /^ECDH-ES(?:\\+(.+))?/g.exec(name || \"\")[1];\n  var op = ecdh[name] = ecdh[name] || {};\n\n  if (!kw) {\n    op.encrypt = ecdhesDirEncryptFn();\n    op.decrypt = ecdhesDirDecryptFn();\n  } else {\n    kw = aesKw[kw];\n\n    if (kw) {\n      op.encrypt = ecdhesKwEncryptFn(kw.encrypt);\n      op.decrypt = ecdhesKwDecryptFn(kw.decrypt);\n    } else {\n      op.ecrypt = op.decrypt = null;\n    }\n  }\n}); //*/","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/node-jose/lib/algorithms/ecdh.js"],"names":["clone","require","merge","omit","pick","util","ecUtil","hkdf","concat","aesKw","helpers","CONSTANTS","idealHash","curve","Error","ecdh","module","exports","ecdhDeriveFn","alg","name","validatePublic","pk","form","pubKey","convertToForge","isValid","Promise","reject","convertToJWK","convertToBuffer","resolve","fallback","key","props","keyLen","length","privKey","p","public","then","secret","computeSecret","slice","webcrypto","algParams","namedCurve","crv","d","subtleCrypto","importKey","all","keypair","deriveBits","result","Buffer","nodejs","nodeCrypto","createECDH","setPrivateKey","setupFallback","ecdhConcatDeriveFn","fn","hash","toUpperCase","ex","params","promise","ECDH","derive","shared","ecdhHkdfDeriveFn","doEcdhesCommonDerive","prependLen","input","int32ToBuffer","algId","algorithm","KEYLENGTH","apu","asBuffer","apv","otherInfo","ecdhesDirEncryptFn","pdata","epk","convertToObj","x","y","spk","enc","data","once","direct","ecdhesDirDecryptFn","cdata","ecdhesKwEncryptFn","wrap","ecdhesKwDecryptFn","unwrap","forEach","kdf","exec","op","kw","encrypt","decrypt","ecrypt"],"mappings":"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","sourcesContent":["/*!\n * algorithms/ecdh.js - Elliptic Curve Diffie-Hellman algorithms\n *\n * Copyright (c) 2015 Cisco Systems, Inc.  See LICENSE file.\n */\n\"use strict\";\n\nvar clone = require(\"lodash.clone\"),\n    merge = require(\"../util/merge\"),\n    omit = require(\"lodash.omit\"),\n    pick = require(\"lodash.pick\"),\n    util = require(\"../util\"),\n    ecUtil = require(\"./ec-util.js\"),\n    hkdf = require(\"./hkdf.js\"),\n    concat = require(\"./concat.js\"),\n    aesKw = require(\"./aes-kw.js\"),\n    helpers = require(\"./helpers.js\"),\n    CONSTANTS = require(\"./constants.js\");\n\nfunction idealHash(curve) {\n  switch (curve) {\n    case \"P-256\":\n      return \"SHA-256\";\n    case \"P-384\":\n      return \"SHA-384\";\n    case \"P-521\":\n      return \"SHA-512\";\n    default:\n      throw new Error(\"unsupported curve: \" + curve);\n  }\n}\n\n// ### Exported\nvar ecdh = module.exports = {};\n\n// ### Derivation algorithms\n// ### \"raw\" ECDH\nfunction ecdhDeriveFn() {\n  var alg = {\n    name: \"ECDH\"\n  };\n\n  var validatePublic = function(pk, form) {\n    var pubKey = pk && ecUtil.convertToForge(pk, true);\n    if (!pubKey || !pubKey.isValid()) {\n      return Promise.reject(new Error(\"invalid EC public key\"));\n    }\n\n    switch (form) {\n      case \"jwk\":\n        pubKey = ecUtil.convertToJWK(pk, true);\n        break;\n      case \"buffer\":\n        pubKey = ecUtil.convertToBuffer(pk, true);\n        break;\n    }\n    return Promise.resolve(pubKey);\n  }\n\n  // ### fallback implementation -- uses ecc + forge\n  var fallback = function(key, props) {\n    props = props || {};\n    var keyLen = props.length || 0;\n    // assume {key} is privateKey\n    // assume {props.public} is publicKey\n    var privKey = ecUtil.convertToForge(key, false);\n\n    var p = validatePublic(props.public, \"forge\");\n    p = p.then(function(pubKey) {\n      // {pubKey} is \"forge\"\n\n      var secret = privKey.computeSecret(pubKey);\n      if (keyLen) {\n        // truncate to requested key length\n        if (secret.length < keyLen) {\n          return Promise.reject(new Error(\"key length too large: \" + keyLen));\n        }\n        secret = secret.slice(0, keyLen);\n      }\n\n      return secret;\n    });\n    return p;\n  };\n\n  // ### WebCryptoAPI implementation\n  // TODO: cache CryptoKey sooner\n  var webcrypto = function(key, props) {\n    key = key || {};\n    props = props || {};\n\n    var keyLen = props.length || 0,\n        algParams = merge(clone(alg), {\n          namedCurve: key.crv\n        });\n\n    // assume {key} is privateKey\n    if (!keyLen) {\n      // calculate key length from private key size\n      keyLen = key.d.length;\n    }\n    var privKey = ecUtil.convertToJWK(key, false);\n    privKey = helpers.subtleCrypto.importKey(\"jwk\",\n                                             privKey,\n                                             algParams,\n                                             false,\n                                             [ \"deriveBits\" ]);\n\n    // assume {props.public} is publicKey\n    var pubKey = validatePublic(props.public, \"jwk\");\n    pubKey = pubKey.then(function(pubKey) {\n      // {pubKey} is \"jwk\"\n      return helpers.subtleCrypto.importKey(\"jwk\",\n                                            pubKey,\n                                            algParams,\n                                            false,\n                                            []);\n    });\n\n    var p = Promise.all([privKey, pubKey]);\n    p = p.then(function(keypair) {\n      var privKey = keypair[0],\n          pubKey = keypair[1];\n\n      var algParams = merge(clone(alg), {\n        public: pubKey\n      });\n      return helpers.subtleCrypto.deriveBits(algParams, privKey, keyLen * 8);\n    });\n    p = p.then(function(result) {\n      result = new Buffer(result);\n      return result;\n    });\n    return p;\n  };\n\n  var nodejs = function(key, props) {\n    if (\"function\" !== typeof helpers.nodeCrypto.createECDH) {\n      throw new Error(\"unsupported algorithm: ECDH\");\n    }\n\n    props = props || {};\n    var keyLen = props.length || 0;\n    var curve;\n    switch (key.crv) {\n      case \"P-256\":\n        curve = \"prime256v1\";\n        break;\n      case \"P-384\":\n        curve = \"secp384r1\";\n        break;\n      case \"P-521\":\n        curve = \"secp521r1\";\n        break;\n      default:\n        return Promise.reject(new Error(\"invalid curve: \" + curve));\n    }\n\n    // assume {key} is privateKey\n    // assume {props.public} is publicKey\n    var privKey = ecUtil.convertToBuffer(key, false);\n\n    var p = validatePublic(props.public, \"buffer\");\n    p = p.then(function(pubKey) {\n      // {pubKey} is \"buffer\"\n      var ecdh = helpers.nodeCrypto.createECDH(curve);\n      // dummy call so computeSecret doesn't fail\n      // ecdh.generateKeys();\n      ecdh.setPrivateKey(privKey);\n      var secret = ecdh.computeSecret(pubKey);\n      if (keyLen) {\n        if (secret.length < keyLen) {\n          return Promise.reject(new Error(\"key length too large: \" + keyLen));\n        }\n        secret = secret.slice(0, keyLen);\n      }\n      return secret;\n    });\n    return p;\n  };\n\n  return helpers.setupFallback(nodejs, webcrypto, fallback);\n}\n\nfunction ecdhConcatDeriveFn() {\n  // NOTE: no nodejs/webcrypto/fallback model, since this algorithm is\n  //       implemented using other primitives\n\n  var fn = function(key, props) {\n    props = props || {};\n\n    var hash;\n    try {\n      hash = props.hash || idealHash(key.crv);\n      if (!hash) {\n        throw new Error(\"invalid hash: \" + hash);\n      }\n      hash.toUpperCase();\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n\n    var params = [\"public\"];\n    // derive shared secret\n    // NOTE: whitelist items from {props} for ECDH\n    var promise = ecdh.ECDH.derive(key, pick(props, params));\n    // expand\n    promise = promise.then(function(shared) {\n      // NOTE: blacklist items from {props} for ECDH\n      return concat[\"CONCAT-\" + hash].derive(shared, omit(props, params));\n    });\n    return promise;\n  };\n\n  return fn;\n}\n\nfunction ecdhHkdfDeriveFn() {\n  // NOTE: no nodejs/webcrypto/fallback model, since this algorithm is\n  //       implemented using other primitives\n\n  var fn = function(key, props) {\n    props = props || {};\n\n    var hash;\n    try {\n      hash = props.hash || idealHash(key.crv);\n      if (!hash) {\n        throw new Error(\"invalid hash: \" + hash);\n      }\n      hash.toUpperCase();\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n\n    var params = [\"public\"];\n    // derive shared secret\n    // NOTE: whitelist items from {props} for ECDH\n    var promise = ecdh.ECDH.derive(key, pick(props, params));\n    // extract-and-expand\n    promise = promise.then(function(shared) {\n      // NOTE: blacklist items from {props} for ECDH\n      return hkdf[\"HKDF-\" + hash].derive(shared, omit(props, params));\n    });\n    return promise;\n  };\n\n  return fn;\n}\n\n// ### Wrap/Unwrap algorithms\nfunction doEcdhesCommonDerive(privKey, pubKey, props) {\n  function prependLen(input) {\n    return Buffer.concat([\n      helpers.int32ToBuffer(input.length),\n      input\n    ]);\n  }\n\n  var algId = props.algorithm || \"\",\n      keyLen = CONSTANTS.KEYLENGTH[algId],\n      apu = util.asBuffer(props.apu || \"\", \"base64url\"),\n      apv = util.asBuffer(props.apv || \"\", \"base64url\");\n  var otherInfo = Buffer.concat([\n    prependLen(new Buffer(algId, \"utf8\")),\n    prependLen(apu),\n    prependLen(apv),\n    helpers.int32ToBuffer(keyLen)\n  ]);\n\n  var params = {\n    public: pubKey,\n    length: keyLen / 8,\n    hash: \"SHA-256\",\n    otherInfo: otherInfo\n  };\n  return ecdh[\"ECDH-CONCAT\"].derive(privKey, params);\n}\n\nfunction ecdhesDirEncryptFn() {\n  // NOTE: no nodejs/webcrypto/fallback model, since this algorithm is\n  //       implemented using other primitives\n  var fn = function(key, pdata, props) {\n    props = props || {};\n\n    // {props.epk} is private\n    if (!props.epk || !props.epk.d) {\n      return Promise.reject(new Error(\"missing ephemeral private key\"));\n    }\n    var epk = ecUtil.convertToObj(props.epk, false);\n\n    // {key} is public\n    if (!key || !key.x || !key.y) {\n      return Promise.reject(new Error(\"missing static public key\"));\n    }\n    var spk = ecUtil.convertToObj(key, true);\n\n    // derive ECDH shared\n    var promise = doEcdhesCommonDerive(epk, spk, {\n      algorithm: props.enc,\n      apu: props.apu,\n      apv: props.apv\n    });\n    promise = promise.then(function(shared) {\n      return {\n        data: shared,\n        once: true,\n        direct: true\n      };\n    });\n    return promise;\n  };\n\n  return fn;\n}\nfunction ecdhesDirDecryptFn() {\n  // NOTE: no nodejs/webcrypto/fallback model, since this algorithm is\n  //       implemented using other primitives\n  var fn = function(key, cdata, props) {\n    props = props || {};\n\n    // {props.epk} is public\n    if (!props.epk || !props.epk.x || !props.epk.y) {\n      return Promise.reject(new Error(\"missing ephemeral public key\"));\n    }\n    var epk = ecUtil.convertToObj(props.epk, true);\n\n    // {key} is private\n    if (!key || !key.d) {\n      return Promise.reject(new Error(\"missing static private key\"));\n    }\n    var spk = ecUtil.convertToObj(key, false);\n\n    // derive ECDH shared\n    var promise = doEcdhesCommonDerive(spk, epk, {\n      algorithm: props.enc,\n      apu: props.apu,\n      apv: props.apv\n    });\n    promise = promise.then(function(shared) {\n      return shared;\n    });\n    return promise;\n  };\n\n  return fn;\n}\n\nfunction ecdhesKwEncryptFn(wrap) {\n  // NOTE: no nodejs/webcrypto/fallback model, since this algorithm is\n  //       implemented using other primitives\n  var fn = function(key, pdata, props) {\n    props = props || {};\n\n    // {props.epk} is private\n    if (!props.epk || !props.epk.d) {\n      return Promise.reject(new Error(\"missing ephemeral private key\"));\n    }\n    var epk = ecUtil.convertToObj(props.epk, false);\n\n    // {key} is public\n    if (!key || !key.x || !key.y) {\n      return Promise.reject(new Error(\"missing static public key\"));\n    }\n    var spk = ecUtil.convertToObj(key, true);\n\n    // derive ECDH shared\n    var promise = doEcdhesCommonDerive(epk, spk, {\n      algorithm: props.alg,\n      apu: props.apu,\n      apv: props.apv\n    });\n    promise = promise.then(function(shared) {\n      // wrap provided key with ECDH shared\n      return wrap(shared, pdata);\n    });\n    return promise;\n  };\n\n  return fn;\n}\n\nfunction ecdhesKwDecryptFn(unwrap) {\n  // NOTE: no nodejs/webcrypto/fallback model, since this algorithm is\n  //       implemented using other primitives\n  var fn = function(key, cdata, props) {\n    props = props || {};\n\n    // {props.epk} is public\n    if (!props.epk || !props.epk.x || !props.epk.y) {\n      return Promise.reject(new Error(\"missing ephemeral public key\"));\n    }\n    var epk = ecUtil.convertToObj(props.epk, true);\n\n    // {key} is private\n    if (!key || !key.d) {\n      return Promise.reject(new Error(\"missing static private key\"));\n    }\n    var spk = ecUtil.convertToObj(key, false);\n\n    // derive ECDH shared\n    var promise = doEcdhesCommonDerive(spk, epk, {\n      algorithm: props.alg,\n      apu: props.apu,\n      apv: props.apv\n    });\n    promise = promise.then(function(shared) {\n      // unwrap provided key with ECDH shared\n      return unwrap(shared, cdata);\n    });\n    return promise;\n  };\n\n  return fn;\n}\n\n// ### Public API\n// * [name].derive\n[\n  \"ECDH\",\n  \"ECDH-HKDF\",\n  \"ECDH-CONCAT\"\n].forEach(function(name) {\n  var kdf = /^ECDH(?:-(\\w+))?$/g.exec(name || \"\")[1];\n  var op = ecdh[name] = ecdh[name] || {};\n  switch (kdf || \"\") {\n    case \"CONCAT\":\n      op.derive = ecdhConcatDeriveFn();\n      break;\n    case \"HKDF\":\n      op.derive = ecdhHkdfDeriveFn();\n      break;\n    case \"\":\n      op.derive = ecdhDeriveFn();\n      break;\n    default:\n      op.derive = null;\n  }\n});\n\n// * [name].encrypt\n// * [name].decrypt\n[\n  \"ECDH-ES\",\n  \"ECDH-ES+A128KW\",\n  \"ECDH-ES+A192KW\",\n  \"ECDH-ES+A256KW\"\n].forEach(function(name) {\n  var kw = /^ECDH-ES(?:\\+(.+))?/g.exec(name || \"\")[1];\n  var op = ecdh[name] = ecdh[name] || {};\n  if (!kw) {\n    op.encrypt = ecdhesDirEncryptFn();\n    op.decrypt = ecdhesDirDecryptFn();\n  } else {\n    kw = aesKw[kw];\n    if (kw) {\n      op.encrypt = ecdhesKwEncryptFn(kw.encrypt);\n      op.decrypt = ecdhesKwDecryptFn(kw.decrypt);\n    } else {\n      op.ecrypt = op.decrypt = null;\n    }\n  }\n});\n//*/\n"]},"metadata":{},"sourceType":"script"}