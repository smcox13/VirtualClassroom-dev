{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, utilFromBase, utilToBase, bufferToHexCodes, toBase64, fromBase64, arrayBufferToString, stringToArrayBuffer } from \"pvutils\";\nimport { ByteStream, SeqStream } from \"bytestreamjs\";\nimport { getCrypto, getEngine } from \"./common.js\";\nimport PublicKeyInfo from \"./PublicKeyInfo.js\"; //**************************************************************************************\n\nexport class SignedCertificateTimestamp {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for SignedCertificateTimestamp class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", SignedCertificateTimestamp.defaultValues(\"version\"));\n    /**\r\n     * @type {ArrayBuffer}\r\n     * @desc logID\r\n     */\n\n    this.logID = getParametersValue(parameters, \"logID\", SignedCertificateTimestamp.defaultValues(\"logID\"));\n    /**\r\n     * @type {Date}\r\n     * @desc timestamp\r\n     */\n\n    this.timestamp = getParametersValue(parameters, \"timestamp\", SignedCertificateTimestamp.defaultValues(\"timestamp\"));\n    /**\r\n     * @type {ArrayBuffer}\r\n     * @desc extensions\r\n     */\n\n    this.extensions = getParametersValue(parameters, \"extensions\", SignedCertificateTimestamp.defaultValues(\"extensions\"));\n    /**\r\n     * @type {string}\r\n     * @desc hashAlgorithm\r\n     */\n\n    this.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", SignedCertificateTimestamp.defaultValues(\"hashAlgorithm\"));\n    /**\r\n     * @type {string}\r\n     * @desc signatureAlgorithm\r\n     */\n\n    this.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", SignedCertificateTimestamp.defaultValues(\"signatureAlgorithm\"));\n    /**\r\n     * @type {Object}\r\n     * @desc signature\r\n     */\n\n    this.signature = getParametersValue(parameters, \"signature\", SignedCertificateTimestamp.defaultValues(\"signature\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n    //region If input argument array contains \"stream\"\n\n    if (\"stream\" in parameters) this.fromStream(parameters.stream); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"version\":\n        return 0;\n\n      case \"logID\":\n      case \"extensions\":\n        return new ArrayBuffer(0);\n\n      case \"timestamp\":\n        return new Date(0);\n\n      case \"hashAlgorithm\":\n      case \"signatureAlgorithm\":\n        return \"\";\n\n      case \"signature\":\n        return new asn1js.Any();\n\n      default:\n        throw new Error(`Invalid member name for SignedCertificateTimestamp class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    if (schema instanceof asn1js.RawData === false) throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestamp\");\n    const seqStream = new SeqStream({\n      stream: new ByteStream({\n        buffer: schema.data\n      })\n    });\n    this.fromStream(seqStream);\n  } //**********************************************************************************\n\n  /**\r\n   * Convert SeqStream data into current class\r\n   * @param {!SeqStream} stream\r\n   */\n\n\n  fromStream(stream) {\n    const blockLength = stream.getUint16();\n    this.version = stream.getBlock(1)[0];\n\n    if (this.version === 0) {\n      this.logID = new Uint8Array(stream.getBlock(32)).buffer.slice(0);\n      this.timestamp = new Date(utilFromBase(new Uint8Array(stream.getBlock(8)), 8)); //region Extensions\n\n      const extensionsLength = stream.getUint16();\n      this.extensions = new Uint8Array(stream.getBlock(extensionsLength)).buffer.slice(0); //endregion\n      //region Hash algorithm\n\n      switch (stream.getBlock(1)[0]) {\n        case 0:\n          this.hashAlgorithm = \"none\";\n          break;\n\n        case 1:\n          this.hashAlgorithm = \"md5\";\n          break;\n\n        case 2:\n          this.hashAlgorithm = \"sha1\";\n          break;\n\n        case 3:\n          this.hashAlgorithm = \"sha224\";\n          break;\n\n        case 4:\n          this.hashAlgorithm = \"sha256\";\n          break;\n\n        case 5:\n          this.hashAlgorithm = \"sha384\";\n          break;\n\n        case 6:\n          this.hashAlgorithm = \"sha512\";\n          break;\n\n        default:\n          throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n      } //endregion\n      //region Signature algorithm\n\n\n      switch (stream.getBlock(1)[0]) {\n        case 0:\n          this.signatureAlgorithm = \"anonymous\";\n          break;\n\n        case 1:\n          this.signatureAlgorithm = \"rsa\";\n          break;\n\n        case 2:\n          this.signatureAlgorithm = \"dsa\";\n          break;\n\n        case 3:\n          this.signatureAlgorithm = \"ecdsa\";\n          break;\n\n        default:\n          throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n      } //endregion\n      //region Signature\n\n\n      const signatureLength = stream.getUint16();\n      const signatureData = new Uint8Array(stream.getBlock(signatureLength)).buffer.slice(0);\n      const asn1 = asn1js.fromBER(signatureData);\n      if (asn1.offset === -1) throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n      this.signature = asn1.result; //endregion\n\n      if (blockLength !== 47 + extensionsLength + signatureLength) throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    const stream = this.toStream();\n    return new asn1js.RawData({\n      data: stream.stream.buffer\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to SeqStream data\r\n   * @returns {SeqStream} SeqStream object\r\n   */\n\n\n  toStream() {\n    const stream = new SeqStream();\n    stream.appendUint16(47 + this.extensions.byteLength + this.signature.valueBeforeDecode.byteLength);\n    stream.appendChar(this.version);\n    stream.appendView(new Uint8Array(this.logID));\n    const timeBuffer = new ArrayBuffer(8);\n    const timeView = new Uint8Array(timeBuffer);\n    const baseArray = utilToBase(this.timestamp.valueOf(), 8);\n    timeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n    stream.appendView(timeView);\n    stream.appendUint16(this.extensions.byteLength);\n    if (this.extensions.byteLength) stream.appendView(new Uint8Array(this.extensions));\n\n    let _hashAlgorithm;\n\n    switch (this.hashAlgorithm.toLowerCase()) {\n      case \"none\":\n        _hashAlgorithm = 0;\n        break;\n\n      case \"md5\":\n        _hashAlgorithm = 1;\n        break;\n\n      case \"sha1\":\n        _hashAlgorithm = 2;\n        break;\n\n      case \"sha224\":\n        _hashAlgorithm = 3;\n        break;\n\n      case \"sha256\":\n        _hashAlgorithm = 4;\n        break;\n\n      case \"sha384\":\n        _hashAlgorithm = 5;\n        break;\n\n      case \"sha512\":\n        _hashAlgorithm = 6;\n        break;\n\n      default:\n        throw new Error(`Incorrect data for hashAlgorithm: ${this.hashAlgorithm}`);\n    }\n\n    stream.appendChar(_hashAlgorithm);\n\n    let _signatureAlgorithm;\n\n    switch (this.signatureAlgorithm.toLowerCase()) {\n      case \"anonymous\":\n        _signatureAlgorithm = 0;\n        break;\n\n      case \"rsa\":\n        _signatureAlgorithm = 1;\n        break;\n\n      case \"dsa\":\n        _signatureAlgorithm = 2;\n        break;\n\n      case \"ecdsa\":\n        _signatureAlgorithm = 3;\n        break;\n\n      default:\n        throw new Error(`Incorrect data for signatureAlgorithm: ${this.signatureAlgorithm}`);\n    }\n\n    stream.appendChar(_signatureAlgorithm);\n\n    const _signature = this.signature.toBER(false);\n\n    stream.appendUint16(_signature.byteLength);\n    stream.appendView(new Uint8Array(_signature));\n    return stream;\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      version: this.version,\n      logID: bufferToHexCodes(this.logID),\n      timestamp: this.timestamp,\n      extensions: bufferToHexCodes(this.extensions),\n      hashAlgorithm: this.hashAlgorithm,\n      signatureAlgorithm: this.signatureAlgorithm,\n      signature: this.signature.toJSON()\n    };\n  } //**********************************************************************************\n\n  /**\r\n   * Verify SignedCertificateTimestamp for specific input data\r\n   * @param {Object[]} logs Array of objects with information about each CT Log (like here: https://ct.grahamedgecombe.com/logs.json)\r\n   * @param {String} logs.log_id Identifier of the CT Log encoded in BASE-64 format\r\n   * @param {String} logs.key Public key of the CT Log encoded in BASE-64 format\r\n   * @param {ArrayBuffer} data Data to verify signature against. Could be encoded Certificate or encoded PreCert\r\n   * @param {Number} [dataType=0] Type = 0 (data is encoded Certificate), type = 1 (data is encoded PreCert)\r\n   * @return {Promise<void>}\r\n   */\n\n\n  async verify(logs, data, dataType = 0) {\n    //region Initial variables\n    let logId = toBase64(arrayBufferToString(this.logID));\n    let publicKeyBase64 = null;\n    let publicKeyInfo;\n    let stream = new SeqStream(); //endregion\n    //region Found and init public key\n\n    for (const log of logs) {\n      if (log.log_id === logId) {\n        publicKeyBase64 = log.key;\n        break;\n      }\n    }\n\n    if (publicKeyBase64 === null) throw new Error(`Public key not found for CT with logId: ${logId}`);\n    const asn1 = asn1js.fromBER(stringToArrayBuffer(fromBase64(publicKeyBase64)));\n    if (asn1.offset === -1) throw new Error(`Incorrect key value for CT Log with logId: ${logId}`);\n    publicKeyInfo = new PublicKeyInfo({\n      schema: asn1.result\n    }); //endregion\n    //region Initialize signed data block\n\n    stream.appendChar(0x00); // sct_version\n\n    stream.appendChar(0x00); // signature_type = certificate_timestamp\n\n    const timeBuffer = new ArrayBuffer(8);\n    const timeView = new Uint8Array(timeBuffer);\n    const baseArray = utilToBase(this.timestamp.valueOf(), 8);\n    timeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n    stream.appendView(timeView);\n    stream.appendUint16(dataType);\n    if (dataType === 0) stream.appendUint24(data.byteLength);\n    stream.appendView(new Uint8Array(data));\n    stream.appendUint16(this.extensions.byteLength);\n    if (this.extensions.byteLength !== 0) stream.appendView(new Uint8Array(this.extensions)); //endregion\n    //region Perform verification\n\n    return getEngine().subtle.verifyWithPublicKey(stream._stream._buffer.slice(0, stream._length), {\n      valueBlock: {\n        valueHex: this.signature.toBER(false)\n      }\n    }, publicKeyInfo, {\n      algorithmId: \"\"\n    }, \"SHA-256\"); //endregion\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * Class from RFC6962\r\n */\n\nexport default class SignedCertificateTimestampList {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for SignedCertificateTimestampList class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Array.<SignedCertificateTimestamp>}\r\n     * @desc timestamps\r\n     */\n    this.timestamps = getParametersValue(parameters, \"timestamps\", SignedCertificateTimestampList.defaultValues(\"timestamps\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"timestamps\":\n        return [];\n\n      default:\n        throw new Error(`Invalid member name for SignedCertificateTimestampList class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"timestamps\":\n        return memberValue.length === 0;\n\n      default:\n        throw new Error(`Invalid member name for SignedCertificateTimestampList class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * SignedCertificateTimestampList ::= OCTET STRING\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [optional]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    if (\"optional\" in names === false) names.optional = false;\n    return new asn1js.OctetString({\n      name: names.blockName || \"SignedCertificateTimestampList\",\n      optional: names.optional\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Check the schema is valid\n    if (schema instanceof asn1js.OctetString === false) throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\"); //endregion\n    //region Get internal properties from parsed schema\n\n    const seqStream = new SeqStream({\n      stream: new ByteStream({\n        buffer: schema.valueBlock.valueHex\n      })\n    });\n    let dataLength = seqStream.getUint16();\n    if (dataLength !== seqStream.length) throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\n\n    while (seqStream.length) this.timestamps.push(new SignedCertificateTimestamp({\n      stream: seqStream\n    })); //endregion\n\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Initial variables\n    const stream = new SeqStream();\n    let overallLength = 0;\n    const timestampsData = []; //endregion\n    //region Get overall length\n\n    for (const timestamp of this.timestamps) {\n      const timestampStream = timestamp.toStream();\n      timestampsData.push(timestampStream);\n      overallLength += timestampStream.stream.buffer.byteLength;\n    } //endregion\n\n\n    stream.appendUint16(overallLength); //region Set data from all timestamps\n\n    for (const timestamp of timestampsData) stream.appendView(timestamp.stream.view); //endregion\n\n\n    return new asn1js.OctetString({\n      valueHex: stream.stream.buffer.slice(0)\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      timestamps: Array.from(this.timestamps, element => element.toJSON())\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\r\n * Verify SignedCertificateTimestamp for specific certificate content\r\n * @param {Certificate} certificate Certificate for which verification would be performed\r\n * @param {Certificate} issuerCertificate Certificate of the issuer of target certificate\r\n * @param {Object[]} logs Array of objects with information about each CT Log (like here: https://ct.grahamedgecombe.com/logs.json)\r\n * @param {String} logs.log_id Identifier of the CT Log encoded in BASE-64 format\r\n * @param {String} logs.key Public key of the CT Log encoded in BASE-64 format\r\n * @param {Number} [index=-1] Index of SignedCertificateTimestamp inside SignedCertificateTimestampList (for -1 would verify all)\r\n * @return {Array} Array of verification results\r\n */\n\nexport async function verifySCTsForCertificate(certificate, issuerCertificate, logs, index = -1) {\n  //region Initial variables\n  let parsedValue = null;\n  let tbs;\n  let issuerId;\n  const stream = new SeqStream();\n  let preCert; //endregion\n  //region Get a \"crypto\" extension\n\n  const crypto = getCrypto();\n  if (typeof crypto === \"undefined\") return Promise.reject(\"Unable to create WebCrypto object\"); //endregion\n  //region Remove certificate extension\n\n  for (let i = 0; i < certificate.extensions.length; i++) {\n    switch (certificate.extensions[i].extnID) {\n      case \"1.3.6.1.4.1.11129.2.4.2\":\n        {\n          parsedValue = certificate.extensions[i].parsedValue;\n          if (parsedValue.timestamps.length === 0) throw new Error(\"Nothing to verify in the certificate\");\n          certificate.extensions.splice(i, 1);\n        }\n        break;\n\n      default:\n    }\n  } //endregion\n  //region Check we do have what to verify\n\n\n  if (parsedValue === null) throw new Error(\"No SignedCertificateTimestampList extension in the specified certificate\"); //endregion\n  //region Prepare modifier TBS value\n\n  tbs = certificate.encodeTBS().toBER(false); //endregion\n  //region Initialize \"issuer_key_hash\" value\n\n  issuerId = await crypto.digest({\n    name: \"SHA-256\"\n  }, new Uint8Array(issuerCertificate.subjectPublicKeyInfo.toSchema().toBER(false))); //endregion\n  //region Make final \"PreCert\" value\n\n  stream.appendView(new Uint8Array(issuerId));\n  stream.appendUint24(tbs.byteLength);\n  stream.appendView(new Uint8Array(tbs));\n  preCert = stream._stream._buffer.slice(0, stream._length); //endregion\n  //region Call verification function for specified index\n\n  if (index === -1) {\n    const verifyArray = [];\n\n    for (const timestamp of parsedValue.timestamps) {\n      const verifyResult = await timestamp.verify(logs, preCert, 1);\n      verifyArray.push(verifyResult);\n    }\n\n    return verifyArray;\n  }\n\n  if (index >= parsedValue.timestamps.length) index = parsedValue.timestamps.length - 1;\n  return [await parsedValue.timestamps[index].verify(logs, preCert, 1)]; //endregion\n} //**********************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/SignedCertificateTimestampList.js"],"names":["asn1js","getParametersValue","utilFromBase","utilToBase","bufferToHexCodes","toBase64","fromBase64","arrayBufferToString","stringToArrayBuffer","ByteStream","SeqStream","getCrypto","getEngine","PublicKeyInfo","SignedCertificateTimestamp","constructor","parameters","version","defaultValues","logID","timestamp","extensions","hashAlgorithm","signatureAlgorithm","signature","fromSchema","schema","fromStream","stream","memberName","ArrayBuffer","Date","Any","Error","RawData","seqStream","buffer","data","blockLength","getUint16","getBlock","Uint8Array","slice","extensionsLength","signatureLength","signatureData","asn1","fromBER","offset","result","toSchema","toStream","appendUint16","byteLength","valueBeforeDecode","appendChar","appendView","timeBuffer","timeView","baseArray","valueOf","set","_hashAlgorithm","toLowerCase","_signatureAlgorithm","_signature","toBER","toJSON","verify","logs","dataType","logId","publicKeyBase64","publicKeyInfo","log","log_id","key","appendUint24","subtle","verifyWithPublicKey","_stream","_buffer","_length","valueBlock","valueHex","algorithmId","SignedCertificateTimestampList","timestamps","compareWithDefault","memberValue","length","names","optional","OctetString","name","blockName","dataLength","push","overallLength","timestampsData","timestampStream","view","Array","from","element","verifySCTsForCertificate","certificate","issuerCertificate","index","parsedValue","tbs","issuerId","preCert","crypto","Promise","reject","i","extnID","splice","encodeTBS","digest","subjectPublicKeyInfo","verifyArray","verifyResult"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilFromBase, utilToBase, bufferToHexCodes, toBase64, fromBase64, arrayBufferToString, stringToArrayBuffer } from \"pvutils\";\r\nimport { ByteStream, SeqStream } from \"bytestreamjs\";\r\nimport { getCrypto, getEngine } from \"./common.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\n//**************************************************************************************\r\nexport class SignedCertificateTimestamp\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignedCertificateTimestamp class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", SignedCertificateTimestamp.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc logID\r\n\t\t */\r\n\t\tthis.logID = getParametersValue(parameters, \"logID\", SignedCertificateTimestamp.defaultValues(\"logID\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @desc timestamp\r\n\t\t */\r\n\t\tthis.timestamp = getParametersValue(parameters, \"timestamp\", SignedCertificateTimestamp.defaultValues(\"timestamp\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc extensions\r\n\t\t */\r\n\t\tthis.extensions = getParametersValue(parameters, \"extensions\", SignedCertificateTimestamp.defaultValues(\"extensions\"));\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc hashAlgorithm\r\n\t\t */\r\n\t\tthis.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", SignedCertificateTimestamp.defaultValues(\"hashAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", SignedCertificateTimestamp.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", SignedCertificateTimestamp.defaultValues(\"signature\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"stream\"\r\n\t\tif(\"stream\" in parameters)\r\n\t\t\tthis.fromStream(parameters.stream);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"logID\":\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"timestamp\":\r\n\t\t\t\treturn new Date(0);\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedCertificateTimestamp class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\tif((schema instanceof asn1js.RawData) === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedCertificateTimestamp\");\r\n\t\t\r\n\t\tconst seqStream = new SeqStream({\r\n\t\t\tstream: new ByteStream({\r\n\t\t\t\tbuffer: schema.data\r\n\t\t\t})\r\n\t\t});\r\n\t\t\r\n\t\tthis.fromStream(seqStream);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert SeqStream data into current class\r\n\t * @param {!SeqStream} stream\r\n\t */\r\n\tfromStream(stream)\r\n\t{\r\n\t\tconst blockLength = stream.getUint16();\r\n\t\t\r\n\t\tthis.version = (stream.getBlock(1))[0];\r\n\t\t\r\n\t\tif(this.version === 0)\r\n\t\t{\r\n\t\t\tthis.logID = (new Uint8Array(stream.getBlock(32))).buffer.slice(0);\r\n\t\t\tthis.timestamp = new Date(utilFromBase(new Uint8Array(stream.getBlock(8)), 8));\r\n\t\t\t\r\n\t\t\t//region Extensions\r\n\t\t\tconst extensionsLength = stream.getUint16();\r\n\t\t\tthis.extensions = (new Uint8Array(stream.getBlock(extensionsLength))).buffer.slice(0);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Hash algorithm\r\n\t\t\tswitch((stream.getBlock(1))[0])\r\n\t\t\t{\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tthis.hashAlgorithm = \"none\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tthis.hashAlgorithm = \"md5\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tthis.hashAlgorithm = \"sha1\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tthis.hashAlgorithm = \"sha224\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tthis.hashAlgorithm = \"sha256\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tthis.hashAlgorithm = \"sha384\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\tthis.hashAlgorithm = \"sha512\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Signature algorithm\r\n\t\t\tswitch((stream.getBlock(1))[0])\r\n\t\t\t{\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tthis.signatureAlgorithm = \"anonymous\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tthis.signatureAlgorithm = \"rsa\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tthis.signatureAlgorithm = \"dsa\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tthis.signatureAlgorithm = \"ecdsa\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Signature\r\n\t\t\tconst signatureLength = stream.getUint16();\r\n\t\t\tconst signatureData = (new Uint8Array(stream.getBlock(signatureLength))).buffer.slice(0);\r\n\t\t\t\r\n\t\t\tconst asn1 = asn1js.fromBER(signatureData);\r\n\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\r\n\t\t\t\r\n\t\t\tthis.signature = asn1.result;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(blockLength !== (47 + extensionsLength + signatureLength))\r\n\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst stream = this.toStream();\r\n\t\t\r\n\t\treturn new asn1js.RawData({ data: stream.stream.buffer });\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to SeqStream data\r\n\t * @returns {SeqStream} SeqStream object\r\n\t */\r\n\ttoStream()\r\n\t{\r\n\t\tconst stream = new SeqStream();\r\n\t\t\r\n\t\tstream.appendUint16(47 + this.extensions.byteLength + this.signature.valueBeforeDecode.byteLength);\r\n\t\tstream.appendChar(this.version);\r\n\t\tstream.appendView(new Uint8Array(this.logID));\r\n\t\t\r\n\t\tconst timeBuffer = new ArrayBuffer(8);\r\n\t\tconst timeView = new Uint8Array(timeBuffer);\r\n\t\t\r\n\t\tconst baseArray = utilToBase(this.timestamp.valueOf(), 8);\r\n\t\ttimeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\r\n\t\t\r\n\t\tstream.appendView(timeView);\r\n\t\tstream.appendUint16(this.extensions.byteLength);\r\n\t\t\r\n\t\tif(this.extensions.byteLength)\r\n\t\t\tstream.appendView(new Uint8Array(this.extensions));\r\n\t\t\r\n\t\tlet _hashAlgorithm;\r\n\t\t\r\n\t\tswitch(this.hashAlgorithm.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"none\":\r\n\t\t\t\t_hashAlgorithm = 0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"md5\":\r\n\t\t\t\t_hashAlgorithm = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha1\":\r\n\t\t\t\t_hashAlgorithm = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha224\":\r\n\t\t\t\t_hashAlgorithm = 3;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha256\":\r\n\t\t\t\t_hashAlgorithm = 4;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha384\":\r\n\t\t\t\t_hashAlgorithm = 5;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha512\":\r\n\t\t\t\t_hashAlgorithm = 6;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Incorrect data for hashAlgorithm: ${this.hashAlgorithm}`);\r\n\t\t}\r\n\t\t\r\n\t\tstream.appendChar(_hashAlgorithm);\r\n\t\t\r\n\t\tlet _signatureAlgorithm;\r\n\t\t\r\n\t\tswitch(this.signatureAlgorithm.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"anonymous\":\r\n\t\t\t\t_signatureAlgorithm = 0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"rsa\":\r\n\t\t\t\t_signatureAlgorithm = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"dsa\":\r\n\t\t\t\t_signatureAlgorithm = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ecdsa\":\r\n\t\t\t\t_signatureAlgorithm = 3;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Incorrect data for signatureAlgorithm: ${this.signatureAlgorithm}`);\r\n\t\t}\r\n\t\t\r\n\t\tstream.appendChar(_signatureAlgorithm);\r\n\t\t\r\n\t\tconst _signature = this.signature.toBER(false);\r\n\t\t\r\n\t\tstream.appendUint16(_signature.byteLength);\r\n\t\tstream.appendView(new Uint8Array(_signature));\r\n\t\t\r\n\t\treturn stream;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tversion: this.version,\r\n\t\t\tlogID: bufferToHexCodes(this.logID),\r\n\t\t\ttimestamp: this.timestamp,\r\n\t\t\textensions: bufferToHexCodes(this.extensions),\r\n\t\t\thashAlgorithm: this.hashAlgorithm,\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm,\r\n\t\t\tsignature: this.signature.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify SignedCertificateTimestamp for specific input data\r\n\t * @param {Object[]} logs Array of objects with information about each CT Log (like here: https://ct.grahamedgecombe.com/logs.json)\r\n\t * @param {String} logs.log_id Identifier of the CT Log encoded in BASE-64 format\r\n\t * @param {String} logs.key Public key of the CT Log encoded in BASE-64 format\r\n\t * @param {ArrayBuffer} data Data to verify signature against. Could be encoded Certificate or encoded PreCert\r\n\t * @param {Number} [dataType=0] Type = 0 (data is encoded Certificate), type = 1 (data is encoded PreCert)\r\n\t * @return {Promise<void>}\r\n\t */\r\n\tasync verify(logs, data, dataType = 0)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet logId = toBase64(arrayBufferToString(this.logID));\r\n\t\t\r\n\t\tlet publicKeyBase64 = null;\r\n\t\tlet publicKeyInfo;\r\n\t\t\r\n\t\tlet stream = new SeqStream();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Found and init public key\r\n\t\tfor(const log of logs)\r\n\t\t{\r\n\t\t\tif(log.log_id === logId)\r\n\t\t\t{\r\n\t\t\t\tpublicKeyBase64 = log.key;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(publicKeyBase64 === null)\r\n\t\t\tthrow new Error(`Public key not found for CT with logId: ${logId}`);\r\n\t\t\r\n\t\tconst asn1 = asn1js.fromBER(stringToArrayBuffer(fromBase64(publicKeyBase64)));\r\n\t\tif(asn1.offset === (-1))\r\n\t\t\tthrow new Error(`Incorrect key value for CT Log with logId: ${logId}`);\r\n\t\t\r\n\t\tpublicKeyInfo = new PublicKeyInfo({ schema: asn1.result });\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initialize signed data block\r\n\t\tstream.appendChar(0x00); // sct_version\r\n\t\tstream.appendChar(0x00); // signature_type = certificate_timestamp\r\n\t\t\r\n\t\tconst timeBuffer = new ArrayBuffer(8);\r\n\t\tconst timeView = new Uint8Array(timeBuffer);\r\n\t\t\r\n\t\tconst baseArray = utilToBase(this.timestamp.valueOf(), 8);\r\n\t\ttimeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\r\n\t\t\r\n\t\tstream.appendView(timeView);\r\n\t\t\r\n\t\tstream.appendUint16(dataType);\r\n\t\t\r\n\t\tif(dataType === 0)\r\n\t\t\tstream.appendUint24(data.byteLength);\r\n\t\t\r\n\t\tstream.appendView(new Uint8Array(data));\r\n\t\t\r\n\t\tstream.appendUint16(this.extensions.byteLength);\r\n\t\t\r\n\t\tif(this.extensions.byteLength !== 0)\r\n\t\t\tstream.appendView(new Uint8Array(this.extensions));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Perform verification\r\n\t\treturn getEngine().subtle.verifyWithPublicKey(\r\n\t\t\tstream._stream._buffer.slice(0, stream._length),\r\n\t\t\t{ valueBlock: { valueHex: this.signature.toBER(false) } },\r\n\t\t\tpublicKeyInfo,\r\n\t\t\t{ algorithmId: \"\" },\r\n\t\t\t\"SHA-256\"\r\n\t\t);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6962\r\n */\r\nexport default class SignedCertificateTimestampList\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignedCertificateTimestampList class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<SignedCertificateTimestamp>}\r\n\t\t * @desc timestamps\r\n\t\t */\r\n\t\tthis.timestamps = getParametersValue(parameters, \"timestamps\", SignedCertificateTimestampList.defaultValues(\"timestamps\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"timestamps\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedCertificateTimestampList class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"timestamps\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedCertificateTimestampList class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SignedCertificateTimestampList ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\tif((\"optional\" in names) === false)\r\n\t\t\tnames.optional = false;\r\n\t\t\r\n\t\treturn (new asn1js.OctetString({\r\n\t\t\tname: (names.blockName || \"SignedCertificateTimestampList\"),\r\n\t\t\toptional: names.optional\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tif((schema instanceof asn1js.OctetString) === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tconst seqStream = new SeqStream({\r\n\t\t\tstream: new ByteStream({\r\n\t\t\t\tbuffer: schema.valueBlock.valueHex\r\n\t\t\t})\r\n\t\t});\r\n\t\t\r\n\t\tlet dataLength = seqStream.getUint16();\r\n\t\tif(dataLength !== seqStream.length)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\r\n\t\t\r\n\t\twhile(seqStream.length)\r\n\t\t\tthis.timestamps.push(new SignedCertificateTimestamp({ stream: seqStream }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst stream = new SeqStream();\r\n\t\t\r\n\t\tlet overallLength = 0;\r\n\t\t\r\n\t\tconst timestampsData = [];\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get overall length\r\n\t\tfor(const timestamp of this.timestamps)\r\n\t\t{\r\n\t\t\tconst timestampStream = timestamp.toStream();\r\n\t\t\ttimestampsData.push(timestampStream);\r\n\t\t\toverallLength += timestampStream.stream.buffer.byteLength;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\tstream.appendUint16(overallLength);\r\n\t\t\r\n\t\t//region Set data from all timestamps\r\n\t\tfor(const timestamp of timestampsData)\r\n\t\t\tstream.appendView(timestamp.stream.view);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn new asn1js.OctetString({ valueHex: stream.stream.buffer.slice(0) });\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\ttimestamps: Array.from(this.timestamps, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Verify SignedCertificateTimestamp for specific certificate content\r\n * @param {Certificate} certificate Certificate for which verification would be performed\r\n * @param {Certificate} issuerCertificate Certificate of the issuer of target certificate\r\n * @param {Object[]} logs Array of objects with information about each CT Log (like here: https://ct.grahamedgecombe.com/logs.json)\r\n * @param {String} logs.log_id Identifier of the CT Log encoded in BASE-64 format\r\n * @param {String} logs.key Public key of the CT Log encoded in BASE-64 format\r\n * @param {Number} [index=-1] Index of SignedCertificateTimestamp inside SignedCertificateTimestampList (for -1 would verify all)\r\n * @return {Array} Array of verification results\r\n */\r\nexport async function verifySCTsForCertificate(certificate, issuerCertificate, logs, index = (-1))\r\n{\r\n\t//region Initial variables\r\n\tlet parsedValue = null;\r\n\tlet tbs;\r\n\tlet issuerId;\r\n\t\r\n\tconst stream = new SeqStream();\r\n\t\r\n\tlet preCert;\r\n\t//endregion\r\n\t\r\n\t//region Get a \"crypto\" extension\r\n\tconst crypto = getCrypto();\r\n\tif(typeof crypto === \"undefined\")\r\n\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t//endregion\r\n\t\r\n\t//region Remove certificate extension\r\n\tfor(let i = 0; i < certificate.extensions.length; i++)\r\n\t{\r\n\t\tswitch(certificate.extensions[i].extnID)\r\n\t\t{\r\n\t\t\tcase \"1.3.6.1.4.1.11129.2.4.2\":\r\n\t\t\t\t{\r\n\t\t\t\t\tparsedValue = certificate.extensions[i].parsedValue;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(parsedValue.timestamps.length === 0)\r\n\t\t\t\t\t\tthrow new Error(\"Nothing to verify in the certificate\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tcertificate.extensions.splice(i, 1);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Check we do have what to verify\r\n\tif(parsedValue === null)\r\n\t\tthrow new Error(\"No SignedCertificateTimestampList extension in the specified certificate\");\r\n\t//endregion\r\n\t\r\n\t//region Prepare modifier TBS value\r\n\ttbs = certificate.encodeTBS().toBER(false);\r\n\t//endregion\r\n\t\r\n\t//region Initialize \"issuer_key_hash\" value\r\n\tissuerId = await crypto.digest({ name: \"SHA-256\" }, new Uint8Array(issuerCertificate.subjectPublicKeyInfo.toSchema().toBER(false)));\r\n\t//endregion\r\n\t\r\n\t//region Make final \"PreCert\" value\r\n\tstream.appendView(new Uint8Array(issuerId));\r\n\tstream.appendUint24(tbs.byteLength);\r\n\tstream.appendView(new Uint8Array(tbs));\r\n\t\r\n\tpreCert = stream._stream._buffer.slice(0, stream._length);\r\n\t//endregion\r\n\t\r\n\t//region Call verification function for specified index\r\n\tif(index === (-1))\r\n\t{\r\n\t\tconst verifyArray = [];\r\n\t\t\r\n\t\tfor(const timestamp of parsedValue.timestamps)\r\n\t\t{\r\n\t\t\tconst verifyResult = await timestamp.verify(logs, preCert, 1);\r\n\t\t\tverifyArray.push(verifyResult);\r\n\t\t}\r\n\t\t\r\n\t\treturn verifyArray;\r\n\t}\r\n\t\r\n\tif(index >= parsedValue.timestamps.length)\r\n\t\tindex = (parsedValue.timestamps.length - 1);\r\n\t\r\n\treturn [await parsedValue.timestamps[index].verify(logs, preCert, 1)];\r\n\t//endregion\r\n}\r\n//**********************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}