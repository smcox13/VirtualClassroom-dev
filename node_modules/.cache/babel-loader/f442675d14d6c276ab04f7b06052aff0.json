{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport SignedAndUnsignedAttributes from \"./SignedAndUnsignedAttributes.js\";\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nexport default class SignerInfo {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for SignerInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", SignerInfo.defaultValues(\"version\"));\n    /**\r\n     * @type {Object}\r\n     * @desc sid\r\n     */\n\n    this.sid = getParametersValue(parameters, \"sid\", SignerInfo.defaultValues(\"sid\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc digestAlgorithm\r\n     */\n\n    this.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", SignerInfo.defaultValues(\"digestAlgorithm\"));\n    if (\"signedAttrs\" in parameters)\n      /**\r\n       * @type {SignedAndUnsignedAttributes}\r\n       * @desc signedAttrs\r\n       */\n      this.signedAttrs = getParametersValue(parameters, \"signedAttrs\", SignerInfo.defaultValues(\"signedAttrs\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc digestAlgorithm\r\n     */\n\n    this.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", SignerInfo.defaultValues(\"signatureAlgorithm\"));\n    /**\r\n     * @type {OctetString}\r\n     * @desc signature\r\n     */\n\n    this.signature = getParametersValue(parameters, \"signature\", SignerInfo.defaultValues(\"signature\"));\n    if (\"unsignedAttrs\" in parameters)\n      /**\r\n       * @type {SignedAndUnsignedAttributes}\r\n       * @desc unsignedAttrs\r\n       */\n      this.unsignedAttrs = getParametersValue(parameters, \"unsignedAttrs\", SignerInfo.defaultValues(\"unsignedAttrs\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"version\":\n        return 0;\n\n      case \"sid\":\n        return new asn1js.Any();\n\n      case \"digestAlgorithm\":\n        return new AlgorithmIdentifier();\n\n      case \"signedAttrs\":\n        return new SignedAndUnsignedAttributes({\n          type: 0\n        });\n\n      case \"signatureAlgorithm\":\n        return new AlgorithmIdentifier();\n\n      case \"signature\":\n        return new asn1js.OctetString();\n\n      case \"unsignedAttrs\":\n        return new SignedAndUnsignedAttributes({\n          type: 1\n        });\n\n      default:\n        throw new Error(`Invalid member name for SignerInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"version\":\n        return SignerInfo.defaultValues(\"version\") === memberValue;\n\n      case \"sid\":\n        return memberValue instanceof asn1js.Any;\n\n      case \"digestAlgorithm\":\n        if (memberValue instanceof AlgorithmIdentifier === false) return false;\n        return memberValue.isEqual(SignerInfo.defaultValues(\"digestAlgorithm\"));\n\n      case \"signedAttrs\":\n        return SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type) && SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes) && SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue);\n\n      case \"signatureAlgorithm\":\n        if (memberValue instanceof AlgorithmIdentifier === false) return false;\n        return memberValue.isEqual(SignerInfo.defaultValues(\"signatureAlgorithm\"));\n\n      case \"signature\":\n      case \"unsignedAttrs\":\n        return SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type) && SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes) && SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue);\n\n      default:\n        throw new Error(`Invalid member name for SignerInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * SignerInfo ::= SEQUENCE {\r\n   *    version CMSVersion,\r\n   *    sid SignerIdentifier,\r\n   *    digestAlgorithm DigestAlgorithmIdentifier,\r\n   *    signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,\r\n   *    signatureAlgorithm SignatureAlgorithmIdentifier,\r\n   *    signature SignatureValue,\r\n   *    unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }\r\n   *\r\n   * SignerIdentifier ::= CHOICE {\r\n   *    issuerAndSerialNumber IssuerAndSerialNumber,\r\n   *    subjectKeyIdentifier [0] SubjectKeyIdentifier }\r\n   *\r\n   * SubjectKeyIdentifier ::= OCTET STRING\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [version]\r\n     * @property {string} [sid]\r\n     * @property {string} [digestAlgorithm]\r\n     * @property {string} [signedAttrs]\r\n     * @property {string} [signatureAlgorithm]\r\n     * @property {string} [signature]\r\n     * @property {string} [unsignedAttrs]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: \"SignerInfo\",\n      value: [new asn1js.Integer({\n        name: names.version || \"SignerInfo.version\"\n      }), new asn1js.Choice({\n        value: [IssuerAndSerialNumber.schema(names.sid || {\n          names: {\n            blockName: \"SignerInfo.sid\"\n          }\n        }), new asn1js.Constructed({\n          optional: true,\n          name: names.sid || \"SignerInfo.sid\",\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.OctetString()]\n        })]\n      }), AlgorithmIdentifier.schema(names.digestAlgorithm || {\n        names: {\n          blockName: \"SignerInfo.digestAlgorithm\"\n        }\n      }), SignedAndUnsignedAttributes.schema(names.signedAttrs || {\n        names: {\n          blockName: \"SignerInfo.signedAttrs\",\n          tagNumber: 0\n        }\n      }), AlgorithmIdentifier.schema(names.signatureAlgorithm || {\n        names: {\n          blockName: \"SignerInfo.signatureAlgorithm\"\n        }\n      }), new asn1js.OctetString({\n        name: names.signature || \"SignerInfo.signature\"\n      }), SignedAndUnsignedAttributes.schema(names.unsignedAttrs || {\n        names: {\n          blockName: \"SignerInfo.unsignedAttrs\",\n          tagNumber: 1\n        }\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"SignerInfo.version\", \"SignerInfo.sid\", \"SignerInfo.digestAlgorithm\", \"SignerInfo.signedAttrs\", \"SignerInfo.signatureAlgorithm\", \"SignerInfo.signature\", \"SignerInfo.unsignedAttrs\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, SignerInfo.schema());\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for SignerInfo\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.version = asn1.result[\"SignerInfo.version\"].valueBlock.valueDec;\n    const currentSid = asn1.result[\"SignerInfo.sid\"];\n    if (currentSid.idBlock.tagClass === 1) this.sid = new IssuerAndSerialNumber({\n      schema: currentSid\n    });else this.sid = currentSid;\n    this.digestAlgorithm = new AlgorithmIdentifier({\n      schema: asn1.result[\"SignerInfo.digestAlgorithm\"]\n    });\n    if (\"SignerInfo.signedAttrs\" in asn1.result) this.signedAttrs = new SignedAndUnsignedAttributes({\n      type: 0,\n      schema: asn1.result[\"SignerInfo.signedAttrs\"]\n    });\n    this.signatureAlgorithm = new AlgorithmIdentifier({\n      schema: asn1.result[\"SignerInfo.signatureAlgorithm\"]\n    });\n    this.signature = asn1.result[\"SignerInfo.signature\"];\n    if (\"SignerInfo.unsignedAttrs\" in asn1.result) this.unsignedAttrs = new SignedAndUnsignedAttributes({\n      type: 1,\n      schema: asn1.result[\"SignerInfo.unsignedAttrs\"]\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    if (SignerInfo.compareWithDefault(\"sid\", this.sid)) throw new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\"); //region Create array for output sequence \n\n    const outputArray = [];\n    outputArray.push(new asn1js.Integer({\n      value: this.version\n    }));\n    if (this.sid instanceof IssuerAndSerialNumber) outputArray.push(this.sid.toSchema());else outputArray.push(this.sid);\n    outputArray.push(this.digestAlgorithm.toSchema());\n\n    if (\"signedAttrs\" in this) {\n      if (SignerInfo.compareWithDefault(\"signedAttrs\", this.signedAttrs) === false) outputArray.push(this.signedAttrs.toSchema());\n    }\n\n    outputArray.push(this.signatureAlgorithm.toSchema());\n    outputArray.push(this.signature);\n\n    if (\"unsignedAttrs\" in this) {\n      if (SignerInfo.compareWithDefault(\"unsignedAttrs\", this.unsignedAttrs) === false) outputArray.push(this.unsignedAttrs.toSchema());\n    } //endregion \n    //region Construct and return new ASN.1 schema for this object \n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion \n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    if (SignerInfo.compareWithDefault(\"sid\", this.sid)) throw new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\n    const _object = {\n      version: this.version\n    };\n    if (!(this.sid instanceof asn1js.Any)) _object.sid = this.sid.toJSON();\n    _object.digestAlgorithm = this.digestAlgorithm.toJSON();\n    if (SignerInfo.compareWithDefault(\"signedAttrs\", this.signedAttrs) === false) _object.signedAttrs = this.signedAttrs.toJSON();\n    _object.signatureAlgorithm = this.signatureAlgorithm.toJSON();\n    _object.signature = this.signature.toJSON();\n    if (SignerInfo.compareWithDefault(\"unsignedAttrs\", this.unsignedAttrs) === false) _object.unsignedAttrs = this.unsignedAttrs.toJSON();\n    return _object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/SignerInfo.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","SignedAndUnsignedAttributes","IssuerAndSerialNumber","SignerInfo","constructor","parameters","version","defaultValues","sid","digestAlgorithm","signedAttrs","signatureAlgorithm","signature","unsignedAttrs","fromSchema","schema","memberName","Any","type","OctetString","Error","compareWithDefault","memberValue","isEqual","attributes","encodedValue","names","Sequence","name","value","Integer","Choice","blockName","Constructed","optional","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","valueBlock","valueDec","currentSid","toSchema","outputArray","push","toJSON","_object"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,SAASC,kBAAT,EAA6BC,UAA7B,QAA+C,SAA/C;AACA,OAAOC,mBAAP,MAAgC,0BAAhC;AACA,OAAOC,2BAAP,MAAwC,kCAAxC;AACA,OAAOC,qBAAP,MAAkC,4BAAlC,C,CACA;;AACA;;;;AAGA,eAAe,MAAMC,UAAN,CACf;AACC;;AACA;;;;;AAKAC,EAAAA,WAAW,CAACC,UAAU,GAAG,EAAd,EACX;AACC;;AACA;;;;AAIA,SAAKC,OAAL,GAAeR,kBAAkB,CAACO,UAAD,EAAa,SAAb,EAAwBF,UAAU,CAACI,aAAX,CAAyB,SAAzB,CAAxB,CAAjC;AACA;;;;;AAIA,SAAKC,GAAL,GAAWV,kBAAkB,CAACO,UAAD,EAAa,KAAb,EAAoBF,UAAU,CAACI,aAAX,CAAyB,KAAzB,CAApB,CAA7B;AACA;;;;;AAIA,SAAKE,eAAL,GAAuBX,kBAAkB,CAACO,UAAD,EAAa,iBAAb,EAAgCF,UAAU,CAACI,aAAX,CAAyB,iBAAzB,CAAhC,CAAzC;AAEA,QAAG,iBAAiBF,UAApB;AACC;;;;AAIA,WAAKK,WAAL,GAAmBZ,kBAAkB,CAACO,UAAD,EAAa,aAAb,EAA4BF,UAAU,CAACI,aAAX,CAAyB,aAAzB,CAA5B,CAArC;AAED;;;;;AAIA,SAAKI,kBAAL,GAA0Bb,kBAAkB,CAACO,UAAD,EAAa,oBAAb,EAAmCF,UAAU,CAACI,aAAX,CAAyB,oBAAzB,CAAnC,CAA5C;AACA;;;;;AAIA,SAAKK,SAAL,GAAiBd,kBAAkB,CAACO,UAAD,EAAa,WAAb,EAA0BF,UAAU,CAACI,aAAX,CAAyB,WAAzB,CAA1B,CAAnC;AAEA,QAAG,mBAAmBF,UAAtB;AACC;;;;AAIA,WAAKQ,aAAL,GAAqBf,kBAAkB,CAACO,UAAD,EAAa,eAAb,EAA8BF,UAAU,CAACI,aAAX,CAAyB,eAAzB,CAA9B,CAAvC,CAzCF,CA0CC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKS,UAAL,CAAgBT,UAAU,CAACU,MAA3B,EA9CF,CA+CC;AACA,GAxDF,CAyDC;;AACA;;;;;;AAIA,SAAOR,aAAP,CAAqBS,UAArB,EACA;AACC,YAAOA,UAAP;AAEC,WAAK,SAAL;AACC,eAAO,CAAP;;AACD,WAAK,KAAL;AACC,eAAO,IAAInB,MAAM,CAACoB,GAAX,EAAP;;AACD,WAAK,iBAAL;AACC,eAAO,IAAIjB,mBAAJ,EAAP;;AACD,WAAK,aAAL;AACC,eAAO,IAAIC,2BAAJ,CAAgC;AAAEiB,UAAAA,IAAI,EAAE;AAAR,SAAhC,CAAP;;AACD,WAAK,oBAAL;AACC,eAAO,IAAIlB,mBAAJ,EAAP;;AACD,WAAK,WAAL;AACC,eAAO,IAAIH,MAAM,CAACsB,WAAX,EAAP;;AACD,WAAK,eAAL;AACC,eAAO,IAAIlB,2BAAJ,CAAgC;AAAEiB,UAAAA,IAAI,EAAE;AAAR,SAAhC,CAAP;;AACD;AACC,cAAM,IAAIE,KAAJ,CAAW,6CAA4CJ,UAAW,EAAlE,CAAN;AAjBF;AAmBA,GAnFF,CAoFC;;AACA;;;;;;;AAKA,SAAOK,kBAAP,CAA0BL,UAA1B,EAAsCM,WAAtC,EACA;AACC,YAAON,UAAP;AAEC,WAAK,SAAL;AACC,eAAQb,UAAU,CAACI,aAAX,CAAyB,SAAzB,MAAwCe,WAAhD;;AACD,WAAK,KAAL;AACC,eAAQA,WAAW,YAAYzB,MAAM,CAACoB,GAAtC;;AACD,WAAK,iBAAL;AACC,YAAIK,WAAW,YAAYtB,mBAAxB,KAAiD,KAApD,EACC,OAAO,KAAP;AAED,eAAOsB,WAAW,CAACC,OAAZ,CAAoBpB,UAAU,CAACI,aAAX,CAAyB,iBAAzB,CAApB,CAAP;;AACD,WAAK,aAAL;AACC,eAASN,2BAA2B,CAACoB,kBAA5B,CAA+C,MAA/C,EAAuDC,WAAW,CAACJ,IAAnE,CAAD,IACJjB,2BAA2B,CAACoB,kBAA5B,CAA+C,YAA/C,EAA6DC,WAAW,CAACE,UAAzE,CADI,IAEJvB,2BAA2B,CAACoB,kBAA5B,CAA+C,cAA/C,EAA+DC,WAAW,CAACG,YAA3E,CAFJ;;AAGD,WAAK,oBAAL;AACC,YAAIH,WAAW,YAAYtB,mBAAxB,KAAiD,KAApD,EACC,OAAO,KAAP;AAED,eAAOsB,WAAW,CAACC,OAAZ,CAAoBpB,UAAU,CAACI,aAAX,CAAyB,oBAAzB,CAApB,CAAP;;AACD,WAAK,WAAL;AACA,WAAK,eAAL;AACC,eAASN,2BAA2B,CAACoB,kBAA5B,CAA+C,MAA/C,EAAuDC,WAAW,CAACJ,IAAnE,CAAD,IACJjB,2BAA2B,CAACoB,kBAA5B,CAA+C,YAA/C,EAA6DC,WAAW,CAACE,UAAzE,CADI,IAEJvB,2BAA2B,CAACoB,kBAA5B,CAA+C,cAA/C,EAA+DC,WAAW,CAACG,YAA3E,CAFJ;;AAGD;AACC,cAAM,IAAIL,KAAJ,CAAW,6CAA4CJ,UAAW,EAAlE,CAAN;AA1BF;AA4BA,GAxHF,CAyHC;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAAOD,MAAP,CAAcV,UAAU,GAAG,EAA3B,EACA;AAEC;;;;;;;;;;;AAWA,UAAMqB,KAAK,GAAG5B,kBAAkB,CAACO,UAAD,EAAa,OAAb,EAAsB,EAAtB,CAAhC;AAEA,WACC,IAAIR,MAAM,CAAC8B,QAAX,CAAoB;AACnBC,MAAAA,IAAI,EAAE,YADa;AAEnBC,MAAAA,KAAK,EAAE,CACN,IAAIhC,MAAM,CAACiC,OAAX,CAAmB;AAAEF,QAAAA,IAAI,EAAGF,KAAK,CAACpB,OAAN,IAAiB;AAA1B,OAAnB,CADM,EAEN,IAAIT,MAAM,CAACkC,MAAX,CAAkB;AACjBF,QAAAA,KAAK,EAAE,CACN3B,qBAAqB,CAACa,MAAtB,CAA6BW,KAAK,CAAClB,GAAN,IAAa;AACzCkB,UAAAA,KAAK,EAAE;AACNM,YAAAA,SAAS,EAAE;AADL;AADkC,SAA1C,CADM,EAMN,IAAInC,MAAM,CAACoC,WAAX,CAAuB;AACtBC,UAAAA,QAAQ,EAAE,IADY;AAEtBN,UAAAA,IAAI,EAAGF,KAAK,CAAClB,GAAN,IAAa,gBAFE;AAGtB2B,UAAAA,OAAO,EAAE;AACRC,YAAAA,QAAQ,EAAE,CADF;AACK;AACbC,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,WAHa;AAOtBR,UAAAA,KAAK,EAAE,CAAC,IAAIhC,MAAM,CAACsB,WAAX,EAAD;AAPe,SAAvB,CANM;AADU,OAAlB,CAFM,EAoBNnB,mBAAmB,CAACe,MAApB,CAA2BW,KAAK,CAACjB,eAAN,IAAyB;AACnDiB,QAAAA,KAAK,EAAE;AACNM,UAAAA,SAAS,EAAE;AADL;AAD4C,OAApD,CApBM,EAyBN/B,2BAA2B,CAACc,MAA5B,CAAmCW,KAAK,CAAChB,WAAN,IAAqB;AACvDgB,QAAAA,KAAK,EAAE;AACNM,UAAAA,SAAS,EAAE,wBADL;AAENK,UAAAA,SAAS,EAAE;AAFL;AADgD,OAAxD,CAzBM,EA+BNrC,mBAAmB,CAACe,MAApB,CAA2BW,KAAK,CAACf,kBAAN,IAA4B;AACtDe,QAAAA,KAAK,EAAE;AACNM,UAAAA,SAAS,EAAE;AADL;AAD+C,OAAvD,CA/BM,EAoCN,IAAInC,MAAM,CAACsB,WAAX,CAAuB;AAAES,QAAAA,IAAI,EAAGF,KAAK,CAACd,SAAN,IAAmB;AAA5B,OAAvB,CApCM,EAqCNX,2BAA2B,CAACc,MAA5B,CAAmCW,KAAK,CAACb,aAAN,IAAuB;AACzDa,QAAAA,KAAK,EAAE;AACNM,UAAAA,SAAS,EAAE,0BADL;AAENK,UAAAA,SAAS,EAAE;AAFL;AADkD,OAA1D,CArCM;AAFY,KAApB,CADD;AAiDA,GAnNF,CAoNC;;AACA;;;;;;AAIAvB,EAAAA,UAAU,CAACC,MAAD,EACV;AACC;AACAhB,IAAAA,UAAU,CAACgB,MAAD,EAAS,CAClB,oBADkB,EAElB,gBAFkB,EAGlB,4BAHkB,EAIlB,wBAJkB,EAKlB,+BALkB,EAMlB,sBANkB,EAOlB,0BAPkB,CAAT,CAAV,CAFD,CAWC;AAEA;;AACA,UAAMuB,IAAI,GAAGzC,MAAM,CAAC0C,aAAP,CAAqBxB,MAArB,EACZA,MADY,EAEZZ,UAAU,CAACY,MAAX,EAFY,CAAb;AAKA,QAAGuB,IAAI,CAACE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIpB,KAAJ,CAAU,oEAAV,CAAN,CApBF,CAqBC;AAEA;;AACA,SAAKd,OAAL,GAAegC,IAAI,CAACG,MAAL,CAAY,oBAAZ,EAAkCC,UAAlC,CAA6CC,QAA5D;AAEA,UAAMC,UAAU,GAAGN,IAAI,CAACG,MAAL,CAAY,gBAAZ,CAAnB;AACA,QAAGG,UAAU,CAACT,OAAX,CAAmBC,QAAnB,KAAgC,CAAnC,EACC,KAAK5B,GAAL,GAAW,IAAIN,qBAAJ,CAA0B;AAAEa,MAAAA,MAAM,EAAE6B;AAAV,KAA1B,CAAX,CADD,KAGC,KAAKpC,GAAL,GAAWoC,UAAX;AAED,SAAKnC,eAAL,GAAuB,IAAIT,mBAAJ,CAAwB;AAAEe,MAAAA,MAAM,EAAEuB,IAAI,CAACG,MAAL,CAAY,4BAAZ;AAAV,KAAxB,CAAvB;AACA,QAAG,4BAA4BH,IAAI,CAACG,MAApC,EACC,KAAK/B,WAAL,GAAmB,IAAIT,2BAAJ,CAAgC;AAAEiB,MAAAA,IAAI,EAAE,CAAR;AAAWH,MAAAA,MAAM,EAAEuB,IAAI,CAACG,MAAL,CAAY,wBAAZ;AAAnB,KAAhC,CAAnB;AAED,SAAK9B,kBAAL,GAA0B,IAAIX,mBAAJ,CAAwB;AAAEe,MAAAA,MAAM,EAAEuB,IAAI,CAACG,MAAL,CAAY,+BAAZ;AAAV,KAAxB,CAA1B;AACA,SAAK7B,SAAL,GAAiB0B,IAAI,CAACG,MAAL,CAAY,sBAAZ,CAAjB;AACA,QAAG,8BAA8BH,IAAI,CAACG,MAAtC,EACC,KAAK5B,aAAL,GAAqB,IAAIZ,2BAAJ,CAAgC;AAAEiB,MAAAA,IAAI,EAAE,CAAR;AAAWH,MAAAA,MAAM,EAAEuB,IAAI,CAACG,MAAL,CAAY,0BAAZ;AAAnB,KAAhC,CAArB,CAvCF,CAwCC;AACA,GAnQF,CAoQC;;AACA;;;;;;AAIAI,EAAAA,QAAQ,GACR;AACC,QAAG1C,UAAU,CAACkB,kBAAX,CAA8B,KAA9B,EAAqC,KAAKb,GAA1C,CAAH,EACC,MAAM,IAAIY,KAAJ,CAAU,8CAAV,CAAN,CAFF,CAIC;;AACA,UAAM0B,WAAW,GAAG,EAApB;AAEAA,IAAAA,WAAW,CAACC,IAAZ,CAAiB,IAAIlD,MAAM,CAACiC,OAAX,CAAmB;AAAED,MAAAA,KAAK,EAAE,KAAKvB;AAAd,KAAnB,CAAjB;AAEA,QAAG,KAAKE,GAAL,YAAoBN,qBAAvB,EACC4C,WAAW,CAACC,IAAZ,CAAiB,KAAKvC,GAAL,CAASqC,QAAT,EAAjB,EADD,KAGCC,WAAW,CAACC,IAAZ,CAAiB,KAAKvC,GAAtB;AAEDsC,IAAAA,WAAW,CAACC,IAAZ,CAAiB,KAAKtC,eAAL,CAAqBoC,QAArB,EAAjB;;AAEA,QAAG,iBAAiB,IAApB,EACA;AACC,UAAG1C,UAAU,CAACkB,kBAAX,CAA8B,aAA9B,EAA6C,KAAKX,WAAlD,MAAmE,KAAtE,EACCoC,WAAW,CAACC,IAAZ,CAAiB,KAAKrC,WAAL,CAAiBmC,QAAjB,EAAjB;AACD;;AAEDC,IAAAA,WAAW,CAACC,IAAZ,CAAiB,KAAKpC,kBAAL,CAAwBkC,QAAxB,EAAjB;AACAC,IAAAA,WAAW,CAACC,IAAZ,CAAiB,KAAKnC,SAAtB;;AAEA,QAAG,mBAAmB,IAAtB,EACA;AACC,UAAGT,UAAU,CAACkB,kBAAX,CAA8B,eAA9B,EAA+C,KAAKR,aAApD,MAAuE,KAA1E,EACCiC,WAAW,CAACC,IAAZ,CAAiB,KAAKlC,aAAL,CAAmBgC,QAAnB,EAAjB;AACD,KA7BF,CA8BC;AAEA;;;AACA,WAAQ,IAAIhD,MAAM,CAAC8B,QAAX,CAAoB;AAC3BE,MAAAA,KAAK,EAAEiB;AADoB,KAApB,CAAR,CAjCD,CAoCC;AACA,GA/SF,CAgTC;;AACA;;;;;;AAIAE,EAAAA,MAAM,GACN;AACC,QAAG7C,UAAU,CAACkB,kBAAX,CAA8B,KAA9B,EAAqC,KAAKb,GAA1C,CAAH,EACC,MAAM,IAAIY,KAAJ,CAAU,8CAAV,CAAN;AAED,UAAM6B,OAAO,GAAG;AACf3C,MAAAA,OAAO,EAAE,KAAKA;AADC,KAAhB;AAIA,QAAG,EAAE,KAAKE,GAAL,YAAoBX,MAAM,CAACoB,GAA7B,CAAH,EACCgC,OAAO,CAACzC,GAAR,GAAc,KAAKA,GAAL,CAASwC,MAAT,EAAd;AAEDC,IAAAA,OAAO,CAACxC,eAAR,GAA0B,KAAKA,eAAL,CAAqBuC,MAArB,EAA1B;AAEA,QAAG7C,UAAU,CAACkB,kBAAX,CAA8B,aAA9B,EAA6C,KAAKX,WAAlD,MAAmE,KAAtE,EACCuC,OAAO,CAACvC,WAAR,GAAsB,KAAKA,WAAL,CAAiBsC,MAAjB,EAAtB;AAEDC,IAAAA,OAAO,CAACtC,kBAAR,GAA6B,KAAKA,kBAAL,CAAwBqC,MAAxB,EAA7B;AACAC,IAAAA,OAAO,CAACrC,SAAR,GAAoB,KAAKA,SAAL,CAAeoC,MAAf,EAApB;AAEA,QAAG7C,UAAU,CAACkB,kBAAX,CAA8B,eAA9B,EAA+C,KAAKR,aAApD,MAAuE,KAA1E,EACCoC,OAAO,CAACpC,aAAR,GAAwB,KAAKA,aAAL,CAAmBmC,MAAnB,EAAxB;AAED,WAAOC,OAAP;AACA,GA7UF,CA8UC;;;AA9UD,C,CAgVA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport SignedAndUnsignedAttributes from \"./SignedAndUnsignedAttributes.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class SignerInfo \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignerInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", SignerInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc sid\r\n\t\t */\r\n\t\tthis.sid = getParametersValue(parameters, \"sid\", SignerInfo.defaultValues(\"sid\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc digestAlgorithm\r\n\t\t */\r\n\t\tthis.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", SignerInfo.defaultValues(\"digestAlgorithm\"));\r\n\t\t\r\n\t\tif(\"signedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {SignedAndUnsignedAttributes}\r\n\t\t\t * @desc signedAttrs\r\n\t\t\t */\r\n\t\t\tthis.signedAttrs = getParametersValue(parameters, \"signedAttrs\", SignerInfo.defaultValues(\"signedAttrs\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc digestAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", SignerInfo.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", SignerInfo.defaultValues(\"signature\"));\r\n\t\t\r\n\t\tif(\"unsignedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {SignedAndUnsignedAttributes}\r\n\t\t\t * @desc unsignedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unsignedAttrs = getParametersValue(parameters, \"unsignedAttrs\", SignerInfo.defaultValues(\"unsignedAttrs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"sid\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signedAttrs\":\r\n\t\t\t\treturn new SignedAndUnsignedAttributes({ type: 0 });\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"unsignedAttrs\":\r\n\t\t\t\treturn new SignedAndUnsignedAttributes({ type: 1 });\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignerInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (SignerInfo.defaultValues(\"version\") === memberValue);\r\n\t\t\tcase \"sid\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\tif((memberValue instanceof AlgorithmIdentifier) === false)\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\treturn memberValue.isEqual(SignerInfo.defaultValues(\"digestAlgorithm\"));\r\n\t\t\tcase \"signedAttrs\":\r\n\t\t\t\treturn ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\tif((memberValue instanceof AlgorithmIdentifier) === false)\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\treturn memberValue.isEqual(SignerInfo.defaultValues(\"signatureAlgorithm\"));\r\n\t\t\tcase \"signature\":\r\n\t\t\tcase \"unsignedAttrs\":\r\n\t\t\t\treturn ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignerInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SignerInfo ::= SEQUENCE {\r\n\t *    version CMSVersion,\r\n\t *    sid SignerIdentifier,\r\n\t *    digestAlgorithm DigestAlgorithmIdentifier,\r\n\t *    signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,\r\n\t *    signatureAlgorithm SignatureAlgorithmIdentifier,\r\n\t *    signature SignatureValue,\r\n\t *    unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }\r\n\t *\r\n\t * SignerIdentifier ::= CHOICE {\r\n\t *    issuerAndSerialNumber IssuerAndSerialNumber,\r\n\t *    subjectKeyIdentifier [0] SubjectKeyIdentifier }\r\n\t *\r\n\t * SubjectKeyIdentifier ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [sid]\r\n\t\t * @property {string} [digestAlgorithm]\r\n\t\t * @property {string} [signedAttrs]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signature]\r\n\t\t * @property {string} [unsignedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (\r\n\t\t\tnew asn1js.Sequence({\r\n\t\t\t\tname: \"SignerInfo\",\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Integer({ name: (names.version || \"SignerInfo.version\") }),\r\n\t\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tIssuerAndSerialNumber.schema(names.sid || {\r\n\t\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\t\tblockName: \"SignerInfo.sid\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\toptional: true,\r\n\t\t\t\t\t\t\t\tname: (names.sid || \"SignerInfo.sid\"),\r\n\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tvalue: [new asn1js.OctetString()]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tAlgorithmIdentifier.schema(names.digestAlgorithm || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.digestAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tSignedAndUnsignedAttributes.schema(names.signedAttrs || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.signedAttrs\",\r\n\t\t\t\t\t\t\ttagNumber: 0\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.signatureAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tnew asn1js.OctetString({ name: (names.signature || \"SignerInfo.signature\") }),\r\n\t\t\t\t\tSignedAndUnsignedAttributes.schema(names.unsignedAttrs || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.unsignedAttrs\",\r\n\t\t\t\t\t\t\ttagNumber: 1\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"SignerInfo.version\",\r\n\t\t\t\"SignerInfo.sid\",\r\n\t\t\t\"SignerInfo.digestAlgorithm\",\r\n\t\t\t\"SignerInfo.signedAttrs\",\r\n\t\t\t\"SignerInfo.signatureAlgorithm\",\r\n\t\t\t\"SignerInfo.signature\",\r\n\t\t\t\"SignerInfo.unsignedAttrs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignerInfo.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignerInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"SignerInfo.version\"].valueBlock.valueDec;\r\n\r\n\t\tconst currentSid = asn1.result[\"SignerInfo.sid\"];\r\n\t\tif(currentSid.idBlock.tagClass === 1)\r\n\t\t\tthis.sid = new IssuerAndSerialNumber({ schema: currentSid });\r\n\t\telse\r\n\t\t\tthis.sid = currentSid;\r\n\r\n\t\tthis.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"SignerInfo.digestAlgorithm\"] });\r\n\t\tif(\"SignerInfo.signedAttrs\" in asn1.result)\r\n\t\t\tthis.signedAttrs = new SignedAndUnsignedAttributes({ type: 0, schema: asn1.result[\"SignerInfo.signedAttrs\"] });\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"SignerInfo.signatureAlgorithm\"] });\r\n\t\tthis.signature = asn1.result[\"SignerInfo.signature\"];\r\n\t\tif(\"SignerInfo.unsignedAttrs\" in asn1.result)\r\n\t\t\tthis.unsignedAttrs = new SignedAndUnsignedAttributes({ type: 1, schema: asn1.result[\"SignerInfo.unsignedAttrs\"] });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tif(SignerInfo.compareWithDefault(\"sid\", this.sid))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\r\n\t\t\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\tif(this.sid instanceof IssuerAndSerialNumber)\r\n\t\t\toutputArray.push(this.sid.toSchema());\r\n\t\telse\r\n\t\t\toutputArray.push(this.sid);\r\n\t\t\r\n\t\toutputArray.push(this.digestAlgorithm.toSchema());\r\n\t\t\r\n\t\tif(\"signedAttrs\" in this)\r\n\t\t{\r\n\t\t\tif(SignerInfo.compareWithDefault(\"signedAttrs\", this.signedAttrs) === false)\r\n\t\t\t\toutputArray.push(this.signedAttrs.toSchema());\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(this.signatureAlgorithm.toSchema());\r\n\t\toutputArray.push(this.signature);\r\n\t\t\r\n\t\tif(\"unsignedAttrs\" in this)\r\n\t\t{\r\n\t\t\tif(SignerInfo.compareWithDefault(\"unsignedAttrs\", this.unsignedAttrs) === false)\r\n\t\t\t\toutputArray.push(this.unsignedAttrs.toSchema());\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tif(SignerInfo.compareWithDefault(\"sid\", this.sid))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\r\n\t\t\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version\r\n\t\t};\r\n\r\n\t\tif(!(this.sid instanceof asn1js.Any))\r\n\t\t\t_object.sid = this.sid.toJSON();\r\n\r\n\t\t_object.digestAlgorithm = this.digestAlgorithm.toJSON();\r\n\r\n\t\tif(SignerInfo.compareWithDefault(\"signedAttrs\", this.signedAttrs) === false)\r\n\t\t\t_object.signedAttrs = this.signedAttrs.toJSON();\r\n\r\n\t\t_object.signatureAlgorithm = this.signatureAlgorithm.toJSON();\r\n\t\t_object.signature = this.signature.toJSON();\r\n\r\n\t\tif(SignerInfo.compareWithDefault(\"unsignedAttrs\", this.unsignedAttrs) === false)\r\n\t\t\t_object.unsignedAttrs = this.unsignedAttrs.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}