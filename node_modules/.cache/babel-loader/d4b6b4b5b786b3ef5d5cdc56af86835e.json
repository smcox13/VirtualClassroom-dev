{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport PolicyQualifierInfo from \"./PolicyQualifierInfo.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nexport default class PolicyInformation {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for PolicyInformation class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc policyIdentifier\r\n     */\n    this.policyIdentifier = getParametersValue(parameters, \"policyIdentifier\", PolicyInformation.defaultValues(\"policyIdentifier\"));\n    if (\"policyQualifiers\" in parameters)\n      /**\r\n       * @type {Array.<PolicyQualifierInfo>}\r\n       * @desc Value of the TIME class\r\n       */\n      this.policyQualifiers = getParametersValue(parameters, \"policyQualifiers\", PolicyInformation.defaultValues(\"policyQualifiers\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"policyIdentifier\":\n        return \"\";\n\n      case \"policyQualifiers\":\n        return [];\n\n      default:\n        throw new Error(`Invalid member name for PolicyInformation class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * PolicyInformation ::= SEQUENCE {\r\n   *    policyIdentifier   CertPolicyId,\r\n   *    policyQualifiers   SEQUENCE SIZE (1..MAX) OF\r\n   *    PolicyQualifierInfo OPTIONAL }\r\n   *\r\n   * CertPolicyId ::= OBJECT IDENTIFIER\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [policyIdentifier]\r\n     * @property {string} [policyQualifiers]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.ObjectIdentifier({\n        name: names.policyIdentifier || \"\"\n      }), new asn1js.Sequence({\n        optional: true,\n        value: [new asn1js.Repeated({\n          name: names.policyQualifiers || \"\",\n          value: PolicyQualifierInfo.schema()\n        })]\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"policyIdentifier\", \"policyQualifiers\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, PolicyInformation.schema({\n      names: {\n        policyIdentifier: \"policyIdentifier\",\n        policyQualifiers: \"policyQualifiers\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PolicyInformation\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.policyIdentifier = asn1.result.policyIdentifier.valueBlock.toString();\n    if (\"policyQualifiers\" in asn1.result) this.policyQualifiers = Array.from(asn1.result.policyQualifiers, element => new PolicyQualifierInfo({\n      schema: element\n    })); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n    outputArray.push(new asn1js.ObjectIdentifier({\n      value: this.policyIdentifier\n    }));\n\n    if (\"policyQualifiers\" in this) {\n      outputArray.push(new asn1js.Sequence({\n        value: Array.from(this.policyQualifiers, element => element.toSchema())\n      }));\n    } //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const object = {\n      policyIdentifier: this.policyIdentifier\n    };\n    if (\"policyQualifiers\" in this) object.policyQualifiers = Array.from(this.policyQualifiers, element => element.toJSON());\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/PolicyInformation.js"],"names":["asn1js","getParametersValue","clearProps","PolicyQualifierInfo","PolicyInformation","constructor","parameters","policyIdentifier","defaultValues","policyQualifiers","fromSchema","schema","memberName","Error","names","Sequence","name","blockName","value","ObjectIdentifier","optional","Repeated","asn1","compareSchema","verified","result","valueBlock","toString","Array","from","element","toSchema","outputArray","push","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport PolicyQualifierInfo from \"./PolicyQualifierInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PolicyInformation\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PolicyInformation class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc policyIdentifier\r\n\t\t */\r\n\t\tthis.policyIdentifier = getParametersValue(parameters, \"policyIdentifier\", PolicyInformation.defaultValues(\"policyIdentifier\"));\r\n\r\n\t\tif(\"policyQualifiers\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<PolicyQualifierInfo>}\r\n\t\t\t * @desc Value of the TIME class\r\n\t\t\t */\r\n\t\t\tthis.policyQualifiers = getParametersValue(parameters, \"policyQualifiers\", PolicyInformation.defaultValues(\"policyQualifiers\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"policyIdentifier\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"policyQualifiers\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PolicyInformation class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PolicyInformation ::= SEQUENCE {\r\n\t *    policyIdentifier   CertPolicyId,\r\n\t *    policyQualifiers   SEQUENCE SIZE (1..MAX) OF\r\n\t *    PolicyQualifierInfo OPTIONAL }\r\n\t *\r\n\t * CertPolicyId ::= OBJECT IDENTIFIER\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [policyIdentifier]\r\n\t\t * @property {string} [policyQualifiers]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.policyIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.policyQualifiers || \"\"),\r\n\t\t\t\t\t\t\tvalue: PolicyQualifierInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"policyIdentifier\",\r\n\t\t\t\"policyQualifiers\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPolicyInformation.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tpolicyIdentifier: \"policyIdentifier\",\r\n\t\t\t\t\tpolicyQualifiers: \"policyQualifiers\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PolicyInformation\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.policyIdentifier = asn1.result.policyIdentifier.valueBlock.toString();\r\n\r\n\t\tif(\"policyQualifiers\" in asn1.result)\r\n\t\t\tthis.policyQualifiers = Array.from(asn1.result.policyQualifiers, element => new PolicyQualifierInfo({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.policyIdentifier }));\r\n\t\t\r\n\t\tif(\"policyQualifiers\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.policyQualifiers, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tpolicyIdentifier: this.policyIdentifier\r\n\t\t};\r\n\r\n\t\tif(\"policyQualifiers\" in this)\r\n\t\t\tobject.policyQualifiers = Array.from(this.policyQualifiers, element => element.toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}