{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _deleteProperty = require('babel-runtime/core-js/reflect/delete-property');\n\nvar _deleteProperty2 = _interopRequireDefault(_deleteProperty);\n\nvar _apply = require('babel-runtime/core-js/reflect/apply');\n\nvar _apply2 = _interopRequireDefault(_apply);\n\nvar _cloneDeep2 = require('lodash/cloneDeep');\n\nvar _cloneDeep3 = _interopRequireDefault(_cloneDeep2);\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nvar _common = require('@webex/common');\n\nvar _webexCore = require('@webex/webex-core');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar debug = require('debug')('messages');\n/**\n * @typedef {Object} MessageObject\n * @property {string} id - (server generated) Unique identifier for the message\n * @property {string} personId - The ID for the author of the messasge\n * @property {email} personEmail - The email for the author of the messasge\n * @property {string} roomId - The ID for the room of the message\n * @property {string} text - The message posted to the room in plain text\n * @property {string} markdown - The message posted to the room in markdown\n * @property {Array<string>} files - The source URL(s) for the message attachment(s).\n * See the {@link https://developer.webex.com/attachments.html|Message Attachments}\n * Guide for a list of supported media types.\n * @property {isoDate} created - (server generated) The date and time that the message was created\n */\n\n/**\n * Messages are how people communicate in rooms. Each message timestamped and\n * represented in Webex as a distinct block of content. Messages can contain\n * plain text and a single file attachment. See the\n * {@link https://developer.webex.com/attachments.html|Message Attachments} Guide\n * for a list of supported media types.\n * @class\n */\n\n\nvar Messages = _webexCore.WebexPlugin.extend({\n  /**\n   * Initializer used to generate Messages\n   * as a plugin wrapped around the provided arguments.\n   * @private\n   * @see WebexPlugin.initialize\n   * @param  {...any} args\n   * @returns {undefined}\n   */\n  initialize: function initialize() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    (0, _apply2.default)(_webexCore.WebexPlugin.prototype.initialize, this, args);\n  },\n\n  /**\n   * Register to listen for incoming messages events\n   * This is an alternate approach to registering for messages webhooks.\n   * The events passed to any registered handlers will be similar to the webhook JSON,\n   * but will omit webhook specific fields such as name, secret, url, etc.\n   * The messages.listen() event objects can also include additional fields not\n   * available in the webhook's JSON payload: `text`, `markdown`, and `files`.\n   * These fields are available when their details are included in the web socket's\n   * `activity` object. Retrieving other fields, such as the `html` field,\n   * will require a manual request to get the corresponding message object.\n   * To utilize the `listen()` method, the authorization token used\n   * will need to have `spark:all` and `spark:kms` scopes enabled.\n   * Note that by configuring your application to enable or disable `spark:all`\n   * via its configuration page will also enable or disable `spark:kms`.\n   * See the <a href=\"https://js.samples.s4d.io/browser-socket/\">Sample App</a>\n   * for more details.\n   * @instance\n   * @memberof Messages\n   * @returns {Promise}\n   * @example\n   * webex.messages.listen()\n   *   .then(() => {\n   *     console.log('listening to message events');\n   *     webex.messages.on('created', (event) => console.log(`Got a message:created event:\\n${event}`);\n   *     webex.messages.on('deleted', (event) => console.log(`Got a message:deleted event:\\n${event}`);\n   *   })\n   *   .catch((e) => console.error(`Unable to register for message events: ${e}`));\n   * // Some app logic...\n   * // WHen it is time to cleanup\n   * webex.messages.stopListening();\n   * webex.messages.off('created');\n   * webex.messages.off('deleted');\n   */\n  listen: function listen() {\n    var _this = this; // Create a common envelope that we will wrap all events in\n\n\n    return (0, _common.createEventEnvelope)(this.webex, _common.SDK_EVENT.EXTERNAL.RESOURCE.MESSAGES).then(function (envelope) {\n      _this.eventEnvelope = envelope; // Register to listen to events\n\n      return _this.webex.internal.mercury.connect().then(function () {\n        _this.listenTo(_this.webex.internal.mercury, _common.SDK_EVENT.INTERNAL.TEAMS_ACTIVITY, function (event) {\n          return _this.onWebexApiEvent(event);\n        });\n      });\n    });\n  },\n\n  /**\n   * Post a new message and/or media content into a room.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * webex.rooms.create({title: 'Create Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(message) {\n   *     var assert = require('assert');\n   *     assert(message.id);\n   *     assert(message.personId);\n   *     assert(message.personEmail);\n   *     assert(message.roomId);\n   *     assert(message.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create: function create(message) {\n    var key = 'body';\n\n    if (message.file) {\n      this.logger.warn('Supplying a single `file` property is deprecated; please supply a `files` array');\n      message.files = [message.file];\n      (0, _deleteProperty2.default)(message, 'file');\n    }\n\n    if ((0, _isArray3.default)(message.files) && message.files.reduce(function (type, file) {\n      return type || typeof file !== 'string';\n    }, false)) {\n      key = 'formData';\n    }\n\n    var options = (0, _defineProperty3.default)({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'messages'\n    }, key, message);\n    return this.request(options).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Returns a single message.\n   * @instance\n   * @memberof Messages\n   * @param {RoomObject|string} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * var message;\n   * webex.rooms.create({title: 'Get Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message = m;\n   *     return webex.messages.get(message.id);\n   *   })\n   *   .then(function(message2) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(message2, message);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get: function get(message) {\n    var id = message.id || message;\n    return this.request({\n      service: 'hydra',\n      resource: 'messages/' + id\n    }).then(function (res) {\n      return res.body.items || res.body;\n    });\n  },\n\n  /**\n   * Returns a list of messages. In most cases the results will only contain\n   * messages posted in rooms that the authentiated user is a member of.\n   * @instance\n   * @memberof Messages\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<MessageObject>>}\n   * @example\n   * var message1, message2, room;\n   * webex.rooms.create({title: 'List Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return webex.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message2 = m;\n   *     return webex.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.length, 2);\n   *     assert.equal(messages.items[0].id, message2.id);\n   *     assert.equal(messages.items[1].id, message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list: function list(options) {\n    var _this2 = this;\n\n    return this.request({\n      service: 'hydra',\n      resource: 'messages',\n      qs: options\n    }).then(function (res) {\n      return new _webexCore.Page(res, _this2.webex);\n    });\n  },\n\n  /**\n   * Deletes a single message. Deleting a message will notify all members of the\n   * room that the authenticated user deleted the message. Generally, users can\n   * only delete their own messages except for the case of Moderated Rooms and\n   * Org Administrators.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject|uuid} message\n   * @returns {Promise}}\n   * @example\n   * var message1, room;\n   * webex.rooms.create({title: 'Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return webex.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.messages.remove(message1);\n   *   })\n   *   .then(function() {\n   *     return webex.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.items.length, 1);\n   *     assert(messages.items[0].id !== message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove: function remove(message) {\n    var id = message.id || message;\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: 'messages/' + id\n    }).then(function (res) {\n      // Firefox has some issues with 204s and/or DELETE. This should move to\n      // http-core\n      if (res.statusCode === 204) {\n        return undefined;\n      }\n\n      return res.body;\n    });\n  },\n\n  /**\n   * This function is called when an internal membership events fires,\n   * if the user registered for these events with the listen() function.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Messages\n   * @param {Object} event\n   * @returns {void}\n   */\n  onWebexApiEvent: function onWebexApiEvent(event) {\n    var activity = event.data.activity;\n    /* eslint-disable no-case-declarations */\n\n    switch (activity.verb) {\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.SHARE:\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.POST:\n        var createdEvent = this.getMessageEvent(activity, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n\n        if (createdEvent) {\n          debug('messages \"created\" payload:             ' + (0, _stringify2.default)(createdEvent));\n          this.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, createdEvent);\n        }\n\n        break;\n\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.DELETE:\n        var deletedEvent = this.getMessageEvent(activity, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED);\n\n        if (deletedEvent) {\n          debug('messages \"deleted\" payload:             ' + (0, _stringify2.default)(deletedEvent));\n          this.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED, deletedEvent);\n        }\n\n        break;\n\n      default:\n        {\n          break;\n        }\n    }\n  },\n\n  /**\n   * Constructs the data object for an event on the messages resource,\n   * adhering to Hydra's Webehook data structure messages.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Messages\n   * @param {Object} activity from mercury\n   * @param {Object} event type of \"webhook\" event\n   * @returns {Object} constructed event\n   */\n  getMessageEvent: function getMessageEvent(activity, event) {\n    try {\n      var sdkEvent = (0, _cloneDeep3.default)(this.eventEnvelope);\n      sdkEvent.event = event;\n      sdkEvent.data.created = activity.published;\n      sdkEvent.actorId = (0, _common.constructHydraId)(_common.hydraTypes.PEOPLE, activity.actor.entryUUID);\n      sdkEvent.data.roomType = activity.target.tags.includes(_common.SDK_EVENT.INTERNAL.ACTIVITY_TAG.ONE_ON_ONE) ? _common.SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT : _common.SDK_EVENT.EXTERNAL.SPACE_TYPE.GROUP;\n      sdkEvent.data.roomId = (0, _common.constructHydraId)(_common.hydraTypes.ROOM, activity.target.id);\n      sdkEvent.data.personId = (0, _common.constructHydraId)(_common.hydraTypes.PEOPLE, activity.actor.entryUUID);\n      sdkEvent.data.personEmail = activity.actor.emailAddress || activity.actor.entryEmail;\n\n      if (event !== _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED) {\n        var _activity$object = activity.object,\n            content = _activity$object.content,\n            displayName = _activity$object.displayName,\n            cards = _activity$object.cards;\n        var text = content || displayName;\n        var files = (0, _common.getHydraFiles)(activity);\n        sdkEvent.data.id = (0, _common.constructHydraId)(_common.hydraTypes.MESSAGE, activity.id);\n\n        if (text) {\n          sdkEvent.data.text = text;\n        }\n\n        if (displayName && displayName !== sdkEvent.data.text) {\n          sdkEvent.data.markdown = displayName;\n        }\n\n        if (files && files.length) {\n          sdkEvent.data.files = files;\n        }\n\n        if (cards && cards.length) {\n          sdkEvent.data.attachments = [];\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = (0, _getIterator3.default)(cards), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var card = _step.value;\n              sdkEvent.data.attachments.push({\n                contentType: _common.SDK_EVENT.EXTERNAL.ATTACHMENTS.CARD_CONTENT_TYPE,\n                content: JSON.parse(card)\n              });\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n\n        if (activity.parent && activity.parent.id) {\n          sdkEvent.data.parentId = (0, _common.constructHydraId)(_common.hydraTypes.MESSAGE, activity.parent.id);\n        }\n      } else {\n        sdkEvent.data.id = (0, _common.constructHydraId)(_common.hydraTypes.MESSAGE, activity.object.id);\n      }\n\n      return sdkEvent;\n    } catch (e) {\n      this.webex.logger.error('Unable to generate SDK event from mercury \\'socket activity for message:' + event + ' event: ' + e.message);\n      return null;\n    }\n  },\n  version: '1.80.172'\n});\n\nexports.default = Messages;","map":{"version":3,"sources":["messages.js"],"names":["debug","require","Messages","initialize","args","WebexPlugin","listen","SDK_EVENT","create","key","message","type","method","service","resource","res","get","id","list","qs","options","Page","remove","onWebexApiEvent","activity","event","createdEvent","deletedEvent","getMessageEvent","sdkEvent","hydraTypes","content","displayName","cards","text","files","card","contentType","JSON","e"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {\n  SDK_EVENT,\n  createEventEnvelope,\n  constructHydraId,\n  getHydraFiles,\n  hydraTypes\n} from '@webex/common';\nimport {\n  Page,\n  WebexPlugin\n} from '@webex/webex-core';\nimport {isArray, cloneDeep} from 'lodash';\n\nconst debug = require('debug')('messages');\n\n/**\n * @typedef {Object} MessageObject\n * @property {string} id - (server generated) Unique identifier for the message\n * @property {string} personId - The ID for the author of the messasge\n * @property {email} personEmail - The email for the author of the messasge\n * @property {string} roomId - The ID for the room of the message\n * @property {string} text - The message posted to the room in plain text\n * @property {string} markdown - The message posted to the room in markdown\n * @property {Array<string>} files - The source URL(s) for the message attachment(s).\n * See the {@link https://developer.webex.com/attachments.html|Message Attachments}\n * Guide for a list of supported media types.\n * @property {isoDate} created - (server generated) The date and time that the message was created\n */\n\n/**\n * Messages are how people communicate in rooms. Each message timestamped and\n * represented in Webex as a distinct block of content. Messages can contain\n * plain text and a single file attachment. See the\n * {@link https://developer.webex.com/attachments.html|Message Attachments} Guide\n * for a list of supported media types.\n * @class\n */\nconst Messages = WebexPlugin.extend({\n  /**\n   * Initializer used to generate Messages\n   * as a plugin wrapped around the provided arguments.\n   * @private\n   * @see WebexPlugin.initialize\n   * @param  {...any} args\n   * @returns {undefined}\n   */\n  initialize(...args) {\n    Reflect.apply(WebexPlugin.prototype.initialize, this, args);\n  },\n\n  /**\n   * Register to listen for incoming messages events\n   * This is an alternate approach to registering for messages webhooks.\n   * The events passed to any registered handlers will be similar to the webhook JSON,\n   * but will omit webhook specific fields such as name, secret, url, etc.\n   * The messages.listen() event objects can also include additional fields not\n   * available in the webhook's JSON payload: `text`, `markdown`, and `files`.\n   * These fields are available when their details are included in the web socket's\n   * `activity` object. Retrieving other fields, such as the `html` field,\n   * will require a manual request to get the corresponding message object.\n   * To utilize the `listen()` method, the authorization token used\n   * will need to have `spark:all` and `spark:kms` scopes enabled.\n   * Note that by configuring your application to enable or disable `spark:all`\n   * via its configuration page will also enable or disable `spark:kms`.\n   * See the <a href=\"https://js.samples.s4d.io/browser-socket/\">Sample App</a>\n   * for more details.\n   * @instance\n   * @memberof Messages\n   * @returns {Promise}\n   * @example\n   * webex.messages.listen()\n   *   .then(() => {\n   *     console.log('listening to message events');\n   *     webex.messages.on('created', (event) => console.log(`Got a message:created event:\\n${event}`);\n   *     webex.messages.on('deleted', (event) => console.log(`Got a message:deleted event:\\n${event}`);\n   *   })\n   *   .catch((e) => console.error(`Unable to register for message events: ${e}`));\n   * // Some app logic...\n   * // WHen it is time to cleanup\n   * webex.messages.stopListening();\n   * webex.messages.off('created');\n   * webex.messages.off('deleted');\n   */\n  listen() {\n    // Create a common envelope that we will wrap all events in\n    return createEventEnvelope(this.webex,\n      SDK_EVENT.EXTERNAL.RESOURCE.MESSAGES)\n      .then((envelope) => {\n        this.eventEnvelope = envelope;\n\n        // Register to listen to events\n        return this.webex.internal.mercury.connect().then(() => {\n          this.listenTo(this.webex.internal.mercury,\n            SDK_EVENT.INTERNAL.TEAMS_ACTIVITY,\n            (event) => this.onWebexApiEvent(event));\n        });\n      });\n  },\n\n  /**\n   * Post a new message and/or media content into a room.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * webex.rooms.create({title: 'Create Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(message) {\n   *     var assert = require('assert');\n   *     assert(message.id);\n   *     assert(message.personId);\n   *     assert(message.personEmail);\n   *     assert(message.roomId);\n   *     assert(message.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(message) {\n    let key = 'body';\n\n    if (message.file) {\n      this.logger.warn('Supplying a single `file` property is deprecated; please supply a `files` array');\n      message.files = [message.file];\n      Reflect.deleteProperty(message, 'file');\n    }\n\n    if (isArray(message.files) && message.files.reduce((type, file) => type || typeof file !== 'string', false)) {\n      key = 'formData';\n    }\n\n    const options = {\n      method: 'POST',\n      service: 'hydra',\n      resource: 'messages',\n      [key]: message\n    };\n\n    return this.request(options)\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single message.\n   * @instance\n   * @memberof Messages\n   * @param {RoomObject|string} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * var message;\n   * webex.rooms.create({title: 'Get Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message = m;\n   *     return webex.messages.get(message.id);\n   *   })\n   *   .then(function(message2) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(message2, message);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(message) {\n    const id = message.id || message;\n\n    return this.request({\n      service: 'hydra',\n      resource: `messages/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of messages. In most cases the results will only contain\n   * messages posted in rooms that the authentiated user is a member of.\n   * @instance\n   * @memberof Messages\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<MessageObject>>}\n   * @example\n   * var message1, message2, room;\n   * webex.rooms.create({title: 'List Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return webex.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message2 = m;\n   *     return webex.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.length, 2);\n   *     assert.equal(messages.items[0].id, message2.id);\n   *     assert.equal(messages.items[1].id, message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'messages',\n      qs: options\n    })\n      .then((res) => new Page(res, this.webex));\n  },\n\n  /**\n   * Deletes a single message. Deleting a message will notify all members of the\n   * room that the authenticated user deleted the message. Generally, users can\n   * only delete their own messages except for the case of Moderated Rooms and\n   * Org Administrators.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject|uuid} message\n   * @returns {Promise}}\n   * @example\n   * var message1, room;\n   * webex.rooms.create({title: 'Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return webex.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.messages.remove(message1);\n   *   })\n   *   .then(function() {\n   *     return webex.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.items.length, 1);\n   *     assert(messages.items[0].id !== message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(message) {\n    const id = message.id || message;\n\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: `messages/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n\n        return res.body;\n      });\n  },\n\n  /**\n   * This function is called when an internal membership events fires,\n   * if the user registered for these events with the listen() function.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Messages\n   * @param {Object} event\n   * @returns {void}\n   */\n  onWebexApiEvent(event) {\n    const {activity} = event.data;\n\n    /* eslint-disable no-case-declarations */\n    switch (activity.verb) {\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.SHARE:\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.POST:\n        const createdEvent = this.getMessageEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n\n        if (createdEvent) {\n          debug(`messages \"created\" payload: \\\n            ${JSON.stringify(createdEvent)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, createdEvent);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.DELETE:\n        const deletedEvent = this.getMessageEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED);\n\n        if (deletedEvent) {\n          debug(`messages \"deleted\" payload: \\\n            ${JSON.stringify(deletedEvent)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED, deletedEvent);\n        }\n        break;\n\n      default: {\n        break;\n      }\n    }\n  },\n\n  /**\n   * Constructs the data object for an event on the messages resource,\n   * adhering to Hydra's Webehook data structure messages.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Messages\n   * @param {Object} activity from mercury\n   * @param {Object} event type of \"webhook\" event\n   * @returns {Object} constructed event\n   */\n  getMessageEvent(activity, event) {\n    try {\n      const sdkEvent = cloneDeep(this.eventEnvelope);\n\n      sdkEvent.event = event;\n      sdkEvent.data.created = activity.published;\n      sdkEvent.actorId = constructHydraId(hydraTypes.PEOPLE, activity.actor.entryUUID);\n      sdkEvent.data.roomType =\n        activity.target.tags.includes(SDK_EVENT.INTERNAL.ACTIVITY_TAG.ONE_ON_ONE) ?\n          SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT :\n          SDK_EVENT.EXTERNAL.SPACE_TYPE.GROUP;\n      sdkEvent.data.roomId =\n        constructHydraId(hydraTypes.ROOM, activity.target.id);\n      sdkEvent.data.personId =\n        constructHydraId(hydraTypes.PEOPLE, activity.actor.entryUUID);\n      sdkEvent.data.personEmail =\n        activity.actor.emailAddress || activity.actor.entryEmail;\n\n      if (event !== SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED) {\n        const {content, displayName, cards} = activity.object;\n        const text = content || displayName;\n        const files = getHydraFiles(activity);\n\n        sdkEvent.data.id = constructHydraId(hydraTypes.MESSAGE, activity.id);\n        if (text) {\n          sdkEvent.data.text = text;\n        }\n        if (displayName && displayName !== sdkEvent.data.text) {\n          sdkEvent.data.markdown = displayName;\n        }\n        if (files && files.length) {\n          sdkEvent.data.files = files;\n        }\n        if (cards && cards.length) {\n          sdkEvent.data.attachments = [];\n          for (const card of cards) {\n            sdkEvent.data.attachments.push({\n              contentType: SDK_EVENT.EXTERNAL.ATTACHMENTS.CARD_CONTENT_TYPE,\n              content: JSON.parse(card)\n            });\n          }\n        }\n        if (activity.parent && activity.parent.id) {\n          sdkEvent.data.parentId = constructHydraId(hydraTypes.MESSAGE, activity.parent.id);\n        }\n      }\n      else {\n        sdkEvent.data.id =\n          constructHydraId(hydraTypes.MESSAGE, activity.object.id);\n      }\n\n      return sdkEvent;\n    }\n    catch (e) {\n      this.webex.logger.error(`Unable to generate SDK event from mercury \\\n'socket activity for message:${event} event: ${e.message}`);\n\n      return null;\n    }\n  }\n\n});\n\nexport default Messages;\n"]},"metadata":{},"sourceType":"script"}