{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _deleteProperty = require('babel-runtime/core-js/reflect/delete-property');\n\nvar _deleteProperty2 = _interopRequireDefault(_deleteProperty);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _clone2 = require('lodash/clone');\n\nvar _clone3 = _interopRequireDefault(_clone2);\n\nvar _httpCore = require('@webex/http-core');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar requestHeaderName = 'cisco-no-http-redirect';\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nvar responseHeaderName = 'cisco-location';\nvar LOCUS_REDIRECT_ERROR = 2000002;\n/**\n * @class\n */\n\nvar RedirectInterceptor = function (_Interceptor) {\n  (0, _inherits3.default)(RedirectInterceptor, _Interceptor);\n\n  function RedirectInterceptor() {\n    (0, _classCallCheck3.default)(this, RedirectInterceptor);\n    return (0, _possibleConstructorReturn3.default)(this, (RedirectInterceptor.__proto__ || (0, _getPrototypeOf2.default)(RedirectInterceptor)).apply(this, arguments));\n  }\n\n  (0, _createClass3.default)(RedirectInterceptor, [{\n    key: 'onRequest',\n\n    /**\n     * @see Interceptor#onRequest\n     * @param {Object} options\n     * @returns {Object}\n     */\n    value: function onRequest(options) {\n      if (options && options.uri && typeof options.uri === 'string') {\n        if (options.uri.includes('https://idbroker') || options.uri.includes(this.webex.config.credentials.samlUrl) || options.uri.includes(this.webex.config.credentials.tokenUrl) || options.uri.includes(this.webex.config.credentials.authorizeUrl)) {\n          return options;\n        }\n      } // If cisco-no-http-redirect is already set, don't overwrite it\n\n\n      if (requestHeaderName in options.headers) {\n        // If cisco-no-http-redirect is set to null, false, or undefined, delete\n        // it to prevent a CORS preflight.\n        if (!options.headers[requestHeaderName]) {\n          (0, _deleteProperty2.default)(options.headers, requestHeaderName);\n        }\n\n        return options;\n      }\n\n      options.headers[requestHeaderName] = true;\n      options.$redirectCount = options.$redirectCount || 0;\n      return options;\n    }\n    /**\n     * @see Interceptor#onResponse\n     * @param {Object} options\n     * @param {HttpResponse} response\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'onResponse',\n    value: function onResponse(options, response) {\n      /* eslint-disable no-else-return */\n      if (response.headers && response.headers[responseHeaderName]) {\n        options = (0, _clone3.default)(options);\n        options.uri = response.headers[responseHeaderName];\n        options.$redirectCount += 1;\n\n        if (options.$redirectCount > this.webex.config.maxAppLevelRedirects) {\n          return _promise2.default.reject(new Error('Maximum redirects exceeded'));\n        }\n\n        return this.webex.request(options);\n      } else if (response.headers && response.body && response.body.errorCode === LOCUS_REDIRECT_ERROR && response.body.location) {\n        options = (0, _clone3.default)(options);\n\n        if (response.options && response.options.qs) {\n          // for POST requests\n          var newUrl = response.body.location.split('?');\n          options.uri = newUrl[0]; // params are already present in the qs\n        } else {\n          // for GET requests\n          options.uri = response.body.location;\n        }\n\n        options.$redirectCount += 1;\n\n        if (options.$redirectCount > this.webex.config.maxLocusRedirects) {\n          return _promise2.default.reject(new Error('Maximum redirects exceeded'));\n        }\n\n        return this.webex.request(options);\n      }\n      /* eslint-enable no-else-return */\n\n\n      return response;\n    }\n  }], [{\n    key: 'create',\n\n    /**\n     * @returns {RedirectInterceptor}\n     */\n    value: function create() {\n      return new RedirectInterceptor({\n        webex: this\n      });\n    }\n  }]);\n  return RedirectInterceptor;\n}(_httpCore.Interceptor);\n\nexports.default = RedirectInterceptor;","map":{"version":3,"sources":["redirect.js"],"names":["requestHeaderName","responseHeaderName","LOCUS_REDIRECT_ERROR","RedirectInterceptor","Interceptor","webex","options","response","newUrl"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {clone} from 'lodash';\nimport {Interceptor} from '@webex/http-core';\n\nconst requestHeaderName = 'cisco-no-http-redirect';\nconst responseHeaderName = 'cisco-location';\nconst LOCUS_REDIRECT_ERROR = 2000002;\n\n/**\n * @class\n */\nexport default class RedirectInterceptor extends Interceptor {\n  /**\n   * @returns {RedirectInterceptor}\n   */\n  static create() {\n    return new RedirectInterceptor({webex: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    if (options && options.uri && typeof options.uri === 'string') {\n      if (options.uri.includes('https://idbroker') ||\n        options.uri.includes(this.webex.config.credentials.samlUrl) ||\n        options.uri.includes(this.webex.config.credentials.tokenUrl) ||\n        options.uri.includes(this.webex.config.credentials.authorizeUrl)) {\n        return options;\n      }\n    }\n\n    // If cisco-no-http-redirect is already set, don't overwrite it\n    if (requestHeaderName in options.headers) {\n      // If cisco-no-http-redirect is set to null, false, or undefined, delete\n      // it to prevent a CORS preflight.\n      if (!options.headers[requestHeaderName]) {\n        Reflect.deleteProperty(options.headers, requestHeaderName);\n      }\n\n      return options;\n    }\n    options.headers[requestHeaderName] = true;\n    options.$redirectCount = options.$redirectCount || 0;\n\n    return options;\n  }\n\n  /**\n   * @see Interceptor#onResponse\n   * @param {Object} options\n   * @param {HttpResponse} response\n   * @returns {Object}\n   */\n  onResponse(options, response) {\n    /* eslint-disable no-else-return */\n    if (response.headers && response.headers[responseHeaderName]) {\n      options = clone(options);\n      options.uri = response.headers[responseHeaderName];\n      options.$redirectCount += 1;\n      if (options.$redirectCount > this.webex.config.maxAppLevelRedirects) {\n        return Promise.reject(new Error('Maximum redirects exceeded'));\n      }\n\n      return this.webex.request(options);\n    }\n    else if (response.headers &&\n      response.body &&\n      response.body.errorCode === LOCUS_REDIRECT_ERROR &&\n      response.body.location) {\n      options = clone(options);\n      if (response.options && response.options.qs) { // for POST requests\n        const newUrl = response.body.location.split('?');\n\n        options.uri = newUrl[0]; // params are already present in the qs\n      }\n      else { // for GET requests\n        options.uri = response.body.location;\n      }\n      options.$redirectCount += 1;\n      if (options.$redirectCount > this.webex.config.maxLocusRedirects) {\n        return Promise.reject(new Error('Maximum redirects exceeded'));\n      }\n\n      return this.webex.request(options);\n    }\n    /* eslint-enable no-else-return */\n\n    return response;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}