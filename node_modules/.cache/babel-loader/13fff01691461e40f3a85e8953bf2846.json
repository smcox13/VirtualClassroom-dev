{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _deleteProperty = require('babel-runtime/core-js/reflect/delete-property');\n\nvar _deleteProperty2 = _interopRequireDefault(_deleteProperty);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _weakMap = require('babel-runtime/core-js/weak-map');\n\nvar _weakMap2 = _interopRequireDefault(_weakMap);\n\nvar _webexCore = require('@webex/webex-core');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar namespaces = new _weakMap2.default();\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint-env browser */\n\nvar loggers = new _weakMap2.default();\n/**\n * localStorage adapter for webex-core storage layer\n */\n\nvar StorageAdapterLocalStorage = function () {\n  /**\n   * @constructs {StorageAdapterLocalStorage}\n   * @param {string} basekey localStorage key underwhich all namespaces will be\n   * stored\n   */\n  function StorageAdapterLocalStorage(basekey) {\n    (0, _classCallCheck3.default)(this, StorageAdapterLocalStorage);\n    /**\n     * localStorage binding\n     */\n\n    this.Bound = function () {\n      /**\n       * @constructs {Bound}\n       * @param {string} namespace\n       * @param {Object} options\n       */\n      function _class(namespace, options) {\n        (0, _classCallCheck3.default)(this, _class);\n        namespaces.set(this, namespace);\n        loggers.set(this, options.logger);\n      }\n      /**\n       * @private\n       * @returns {rawData}\n       */\n\n\n      (0, _createClass3.default)(_class, [{\n        key: '_getRawData',\n        value: function _getRawData() {\n          var rawData = localStorage.getItem(basekey);\n          return rawData ? JSON.parse(rawData) : {};\n        }\n        /**\n         * @private\n         * @returns {mixed}\n         */\n\n      }, {\n        key: '_load',\n        value: function _load() {\n          var allData = this._getRawData();\n\n          return allData[namespaces.get(this)] || {};\n        }\n        /**\n         * @param {Object} data\n         * @private\n         * @returns {undefined}\n         */\n\n      }, {\n        key: '_save',\n        value: function _save(data) {\n          var allData = this._getRawData();\n\n          allData[namespaces.get(this)] = data;\n          localStorage.setItem(basekey, (0, _stringify2.default)(allData));\n        }\n        /**\n         * Clears the localStorage\n         * @param {string} key\n         * @returns {Promise}\n         */\n\n      }, {\n        key: 'clear',\n        value: function clear() {\n          loggers.get(this).info('local-storage-store-adapter: clearing localStorage');\n          return _promise2.default.resolve(localStorage.removeItem(basekey));\n        }\n        /**\n         * Removes the specified key\n         * @param {string} key\n         * @returns {Promise}\n         */\n\n      }, {\n        key: 'del',\n        value: function del(key) {\n          var _this = this;\n\n          return new _promise2.default(function (resolve) {\n            loggers.get(_this).info('local-storage-store-adapter: deleting `' + key + '`');\n\n            var data = _this._load();\n\n            (0, _deleteProperty2.default)(data, key);\n\n            _this._save(data);\n\n            resolve();\n          });\n        }\n        /**\n         * Retrieves the data at the specified key\n         * @param {string} key\n         * @returns {Promise<mixed>}\n         */\n\n      }, {\n        key: 'get',\n        value: function get(key) {\n          var _this2 = this;\n\n          return new _promise2.default(function (resolve, reject) {\n            loggers.get(_this2).info('local-storage-store-adapter: reading `' + key + '`');\n\n            var data = _this2._load();\n\n            var value = data[key];\n\n            if (typeof value !== 'undefined') {\n              return resolve(value);\n            }\n\n            return reject(new _webexCore.NotFoundError('No value found for ' + key));\n          });\n        }\n        /**\n         * Stores the specified value at the specified key\n         * @param {string} key\n         * @param {mixed} value\n         * @returns {Promise}\n         */\n\n      }, {\n        key: 'put',\n        value: function put(key, value) {\n          var _this3 = this;\n\n          return new _promise2.default(function (resolve) {\n            loggers.get(_this3).info('local-storage-store-adapter: writing `' + key + '`');\n\n            var data = _this3._load();\n\n            data[key] = value;\n\n            _this3._save(data);\n\n            resolve();\n          });\n        }\n      }]);\n      return _class;\n    }();\n  }\n  /**\n   * Returns an adapter bound to the specified namespace\n   * @param {string} namespace\n   * @param {Object} options\n   * @returns {Promise<Bound>}\n   */\n\n\n  (0, _createClass3.default)(StorageAdapterLocalStorage, [{\n    key: 'bind',\n    value: function bind(namespace, options) {\n      options = options || {};\n\n      if (!namespace) {\n        return _promise2.default.reject(new Error('`namespace` is required'));\n      }\n\n      if (!options.logger) {\n        return _promise2.default.reject(new Error('`options.logger` is required'));\n      }\n\n      options.logger.info('local-storage-store-adapter: returning binding');\n      return _promise2.default.resolve(new this.Bound(namespace, options));\n    }\n  }]);\n  return StorageAdapterLocalStorage;\n}();\n\nexports.default = StorageAdapterLocalStorage;","map":{"version":3,"sources":["index.js"],"names":["namespaces","loggers","StorageAdapterLocalStorage","options","rawData","localStorage","JSON","allData","data","resolve","value","reject","NotFoundError","namespace"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint-env browser */\n\nimport {NotFoundError} from '@webex/webex-core';\n\nconst namespaces = new WeakMap();\nconst loggers = new WeakMap();\n\n/**\n * localStorage adapter for webex-core storage layer\n */\nexport default class StorageAdapterLocalStorage {\n  /**\n   * @constructs {StorageAdapterLocalStorage}\n   * @param {string} basekey localStorage key underwhich all namespaces will be\n   * stored\n   */\n  constructor(basekey) {\n    /**\n     * localStorage binding\n     */\n    this.Bound = class {\n      /**\n       * @constructs {Bound}\n       * @param {string} namespace\n       * @param {Object} options\n       */\n      constructor(namespace, options) {\n        namespaces.set(this, namespace);\n        loggers.set(this, options.logger);\n      }\n\n      /**\n       * @private\n       * @returns {rawData}\n       */\n      _getRawData() {\n        const rawData = localStorage.getItem(basekey);\n\n        return rawData ? JSON.parse(rawData) : {};\n      }\n\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      _load() {\n        const allData = this._getRawData();\n\n        return allData[namespaces.get(this)] || {};\n      }\n\n      /**\n       * @param {Object} data\n       * @private\n       * @returns {undefined}\n       */\n      _save(data) {\n        const allData = this._getRawData();\n\n        allData[namespaces.get(this)] = data;\n\n        localStorage.setItem(basekey, JSON.stringify(allData));\n      }\n\n      /**\n       * Clears the localStorage\n       * @param {string} key\n       * @returns {Promise}\n       */\n      clear() {\n        loggers.get(this).info('local-storage-store-adapter: clearing localStorage');\n\n        return Promise.resolve(localStorage.removeItem(basekey));\n      }\n\n      /**\n       * Removes the specified key\n       * @param {string} key\n       * @returns {Promise}\n       */\n      del(key) {\n        return new Promise((resolve) => {\n          loggers.get(this).info(`local-storage-store-adapter: deleting \\`${key}\\``);\n          const data = this._load();\n\n          Reflect.deleteProperty(data, key);\n          this._save(data);\n          resolve();\n        });\n      }\n\n      /**\n       * Retrieves the data at the specified key\n       * @param {string} key\n       * @returns {Promise<mixed>}\n       */\n      get(key) {\n        return new Promise((resolve, reject) => {\n          loggers.get(this).info(`local-storage-store-adapter: reading \\`${key}\\``);\n          const data = this._load();\n          const value = data[key];\n\n          if (typeof value !== 'undefined') {\n            return resolve(value);\n          }\n\n          return reject(new NotFoundError(`No value found for ${key}`));\n        });\n      }\n\n      /**\n       * Stores the specified value at the specified key\n       * @param {string} key\n       * @param {mixed} value\n       * @returns {Promise}\n       */\n      put(key, value) {\n        return new Promise((resolve) => {\n          loggers.get(this).info(`local-storage-store-adapter: writing \\`${key}\\``);\n          const data = this._load();\n\n          data[key] = value;\n          this._save(data);\n          resolve();\n        });\n      }\n    };\n  }\n\n  /**\n   * Returns an adapter bound to the specified namespace\n   * @param {string} namespace\n   * @param {Object} options\n   * @returns {Promise<Bound>}\n   */\n  bind(namespace, options) {\n    options = options || {};\n    if (!namespace) {\n      return Promise.reject(new Error('`namespace` is required'));\n    }\n\n    if (!options.logger) {\n      return Promise.reject(new Error('`options.logger` is required'));\n    }\n\n    options.logger.info('local-storage-store-adapter: returning binding');\n\n    return Promise.resolve(new this.Bound(namespace, options));\n  }\n}\n"]},"metadata":{},"sourceType":"script"}