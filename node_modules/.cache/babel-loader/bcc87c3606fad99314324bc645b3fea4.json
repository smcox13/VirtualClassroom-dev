{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _weakMap = require('babel-runtime/core-js/weak-map');\n\nvar _weakMap2 = _interopRequireDefault(_weakMap);\n\nvar _util = require('util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Factory which produces a multi-keyed container based on the provided set of\n * constructors\n * @param {mixed} containers\n * @returns {Container}\n */\n\n\nfunction make() {\n  for (var _len = arguments.length, containers = Array(_len), _key = 0; _key < _len; _key++) {\n    containers[_key] = arguments[_key];\n  }\n\n  var TopContainer = containers.shift();\n  var data = new _weakMap2.default();\n  var sizes = new _weakMap2.default();\n  var ChildContainer = containers.length > 1 ? make.apply(undefined, containers) : containers[0];\n  var name = '(' + [TopContainer.name].concat(containers.map(function (container) {\n    return container.name;\n  })).join(', ') + ')';\n  /**\n   * Container that wraps an arbitrary set of tupples to their values\n   */\n\n  var Container = function () {\n    /**\n     * @constructs Container\n     */\n    function Container() {\n      (0, _classCallCheck3.default)(this, Container);\n\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      data.set(this, new (Function.prototype.bind.apply(TopContainer, [null].concat(args)))());\n      sizes.set(this, 0);\n    }\n    /**\n     * getter for .size\n     * @returns {number}\n     */\n\n\n    (0, _createClass3.default)(Container, [{\n      key: 'add',\n\n      /**\n       * Identical to Container#set() but leads slightly more intuitive code when\n       * the container is based on a Set rather than a Map.\n       * @returns {Container}\n       */\n      value: function add() {\n        return this.set.apply(this, arguments);\n      }\n      /**\n       * Removes all items from the container\n       * @returns {undefined}\n       */\n\n    }, {\n      key: 'clear',\n      value: function clear() {\n        var ret = data.get(this).clear();\n        sizes.set(this, 0);\n        return ret;\n      }\n      /**\n       * Removes the specified item to the container\n       * @param {mixed} key\n       * @param {Array<mixed>} keys\n       * @returns {boolean}\n       */\n\n    }, {\n      key: 'delete',\n      value: function _delete(key) {\n        var mine = data.get(this);\n\n        for (var _len3 = arguments.length, keys = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n          keys[_key3 - 1] = arguments[_key3];\n        }\n\n        if (!keys.length) {\n          return mine.delete(key);\n        }\n\n        var next = mine.get(key);\n\n        if (!next) {\n          return false;\n        }\n\n        var ret = next.delete.apply(next, keys);\n\n        if (ret) {\n          sizes.set(this, sizes.get(this) - 1);\n        }\n\n        if (next.size === 0) {\n          mine.delete(key);\n        }\n\n        return ret;\n      }\n      /**\n       * Retrieves the specified item from the container\n       * @param {mixed} key\n       * @param {Array<mixed>} keys\n       * @returns {mixed}\n       */\n\n    }, {\n      key: 'get',\n      value: function get(key) {\n        var mine = data.get(this);\n\n        if (!mine.get) {\n          return mine;\n        }\n\n        for (var _len4 = arguments.length, keys = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n          keys[_key4 - 1] = arguments[_key4];\n        }\n\n        if (!keys.length) {\n          return mine.get(key);\n        }\n\n        var next = mine.get(key);\n\n        if (!next) {\n          return undefined;\n        }\n\n        if (!next.get) {\n          return next;\n        }\n\n        return next.get.apply(next, keys);\n      }\n      /**\n       * Indicates whether the container holds the specified item\n       * @param {mixed} key\n       * @param {Array<mixed>} keys\n       * @returns {Boolean}\n       */\n\n    }, {\n      key: 'has',\n      value: function has() {\n        return typeof this.get.apply(this, arguments) !== 'undefined';\n      }\n      /**\n       * Stores the specified item in the container\n       * @param {mixed} key\n       * @param {Array<mixed>} args\n       * @param {mixed} value\n       * @returns {Container}\n       */\n\n    }, {\n      key: 'set',\n      value: function set() {\n        var overwrite = false;\n\n        for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          args[_key5] = arguments[_key5];\n        }\n\n        if (this.has.apply(this, args)) {\n          overwrite = true;\n        }\n\n        var mine = data.get(this);\n        var key = args.shift();\n\n        if (!mine.get) {\n          insert.apply(undefined, [mine, key].concat(args));\n          return this;\n        }\n\n        var next = mine.get(key);\n\n        if (!next) {\n          if (!ChildContainer) {\n            insert.apply(undefined, [mine, key].concat(args));\n            return this;\n          }\n\n          next = new ChildContainer();\n          insert(mine, key, next);\n        }\n\n        insert.apply(undefined, [next].concat(args));\n\n        if (!overwrite) {\n          sizes.set(this, sizes.get(this) + 1);\n        }\n\n        return this;\n      }\n      /**\n       * @private\n       * @returns {string}\n       */\n\n    }, {\n      key: 'inspect',\n      value: function inspect() {\n        return 'Container' + name + ' {\\n  ' + _util2.default.inspect(data.get(this), {\n          depth: null\n        }) + '\\n}';\n      }\n    }, {\n      key: 'size',\n      get: function get() {\n        return sizes.get(this);\n      }\n    }]);\n    return Container;\n  }();\n\n  return Container;\n}\n/**\n * Inserts into an arbitrary container\n * @param {Map|WeakMap|Set|WeakSet} container\n * @param {Array<mixed>} args\n * @private\n * @returns {undefined}\n */\n\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nfunction insert(container) {\n  for (var _len6 = arguments.length, args = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    args[_key6 - 1] = arguments[_key6];\n  }\n\n  if (container.add) {\n    container.add.apply(container, args);\n    return;\n  }\n\n  if (container.set) {\n    container.set.apply(container, args);\n    return;\n  }\n\n  if (container.push) {\n    container.push.apply(container, args);\n    return;\n  }\n\n  throw new TypeError('Could not determine how to insert into the specified container');\n}\n\nexports.default = make;","map":{"version":3,"sources":["template-container.js"],"names":["containers","TopContainer","data","sizes","ChildContainer","make","name","container","Container","args","ret","keys","mine","next","overwrite","key","insert","util","depth","default"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport util from 'util';\n\n/**\n * Factory which produces a multi-keyed container based on the provided set of\n * constructors\n * @param {mixed} containers\n * @returns {Container}\n */\nfunction make(...containers) {\n  const TopContainer = containers.shift();\n\n  const data = new WeakMap();\n  const sizes = new WeakMap();\n\n  const ChildContainer = containers.length > 1 ? make(...containers) : containers[0];\n\n  const name = `(${[TopContainer.name].concat(containers.map((container) => container.name)).join(', ')})`;\n\n  /**\n   * Container that wraps an arbitrary set of tupples to their values\n   */\n  class Container {\n    /**\n     * @constructs Container\n     */\n    constructor(...args) {\n      data.set(this, new TopContainer(...args));\n      sizes.set(this, 0);\n    }\n\n    /**\n     * getter for .size\n     * @returns {number}\n     */\n    get size() {\n      return sizes.get(this);\n    }\n\n    /**\n     * Identical to Container#set() but leads slightly more intuitive code when\n     * the container is based on a Set rather than a Map.\n     * @returns {Container}\n     */\n    add(...args) {\n      return this.set(...args);\n    }\n\n    /**\n     * Removes all items from the container\n     * @returns {undefined}\n     */\n    clear() {\n      const ret = data.get(this).clear();\n\n      sizes.set(this, 0);\n\n      return ret;\n    }\n\n    /**\n     * Removes the specified item to the container\n     * @param {mixed} key\n     * @param {Array<mixed>} keys\n     * @returns {boolean}\n     */\n    delete(key, ...keys) {\n      const mine = data.get(this);\n\n      if (!keys.length) {\n        return mine.delete(key);\n      }\n\n      const next = mine.get(key);\n\n      if (!next) {\n        return false;\n      }\n\n      const ret = next.delete(...keys);\n\n      if (ret) {\n        sizes.set(this, sizes.get(this) - 1);\n      }\n\n      if (next.size === 0) {\n        mine.delete(key);\n      }\n\n      return ret;\n    }\n\n    /**\n     * Retrieves the specified item from the container\n     * @param {mixed} key\n     * @param {Array<mixed>} keys\n     * @returns {mixed}\n     */\n    get(key, ...keys) {\n      const mine = data.get(this);\n\n      if (!mine.get) {\n        return mine;\n      }\n\n      if (!keys.length) {\n        return mine.get(key);\n      }\n\n      const next = mine.get(key);\n\n      if (!next) {\n        return undefined;\n      }\n\n      if (!next.get) {\n        return next;\n      }\n\n      return next.get(...keys);\n    }\n\n    /**\n     * Indicates whether the container holds the specified item\n     * @param {mixed} key\n     * @param {Array<mixed>} keys\n     * @returns {Boolean}\n     */\n    has(...args) {\n      return typeof this.get(...args) !== 'undefined';\n    }\n\n    /**\n     * Stores the specified item in the container\n     * @param {mixed} key\n     * @param {Array<mixed>} args\n     * @param {mixed} value\n     * @returns {Container}\n     */\n    set(...args) {\n      let overwrite = false;\n\n      if (this.has(...args)) {\n        overwrite = true;\n      }\n      const mine = data.get(this);\n\n      const key = args.shift();\n\n      if (!mine.get) {\n        insert(mine, key, ...args);\n\n        return this;\n      }\n\n      let next = mine.get(key);\n\n      if (!next) {\n        if (!ChildContainer) {\n          insert(mine, key, ...args);\n\n          return this;\n        }\n        next = new ChildContainer();\n        insert(mine, key, next);\n      }\n      insert(next, ...args);\n\n      if (!overwrite) {\n        sizes.set(this, sizes.get(this) + 1);\n      }\n\n      return this;\n    }\n\n    /**\n     * @private\n     * @returns {string}\n     */\n    inspect() {\n      return `Container${name} {\n  ${util.inspect(data.get(this), {depth: null})}\n}`;\n    }\n  }\n\n  return Container;\n}\n\n/**\n * Inserts into an arbitrary container\n * @param {Map|WeakMap|Set|WeakSet} container\n * @param {Array<mixed>} args\n * @private\n * @returns {undefined}\n */\nfunction insert(container, ...args) {\n  if (container.add) {\n    container.add(...args);\n\n    return;\n  }\n\n  if (container.set) {\n    container.set(...args);\n\n    return;\n  }\n\n  if (container.push) {\n    container.push(...args);\n\n    return;\n  }\n  throw new TypeError('Could not determine how to insert into the specified container');\n}\nexport {make as default};\n"]},"metadata":{},"sourceType":"script"}