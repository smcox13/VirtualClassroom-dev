{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _apply = require('babel-runtime/core-js/reflect/apply');\n\nvar _apply2 = _interopRequireDefault(_apply);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _symbol = require('babel-runtime/core-js/symbol');\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _commonTimers = require('@webex/common-timers');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar sym = (0, _symbol2.default)('metric id');\n\nvar MetricsBatcher = _webexCore.Batcher.extend({\n  namespace: 'Metrics',\n  prepareItem: function prepareItem(item) {\n    // Keep non-prod data out of metrics\n    var env = process.env.NODE_ENV === 'production' ? null : 'TEST';\n    item.appType = item.appType || this.config.appType;\n    item.env = item.env || env;\n    item.time = item.time || Date.now();\n    item.version = item.version || this.webex.version;\n    return _promise2.default.resolve(item);\n  },\n  prepareRequest: function prepareRequest(queue) {\n    return _promise2.default.resolve(queue.map(function (item) {\n      item.postTime = item.postTime || Date.now();\n      return item;\n    }));\n  },\n  submitHttpRequest: function submitHttpRequest(payload) {\n    return this.webex.request({\n      method: 'POST',\n      service: 'metrics',\n      resource: 'metrics',\n      body: {\n        metrics: payload\n      }\n    });\n  },\n  handleHttpSuccess: function handleHttpSuccess(res) {\n    var _this = this;\n\n    return _promise2.default.all(res.options.body.metrics.map(function (item) {\n      return _this.acceptItem(item);\n    }));\n  },\n  handleHttpError: function handleHttpError(reason) {\n    var _this2 = this;\n\n    if (reason instanceof _webexCore.WebexHttpError.NetworkOrCORSError) {\n      this.logger.warn('metrics-batcher: received network error submitting metrics, reenqueuing payload');\n      return _promise2.default.all(reason.options.body.metrics.map(function (item) {\n        return new _promise2.default(function (resolve) {\n          var delay = item[sym].nextDelay;\n\n          if (delay < _this2.config.batcherRetryPlateau) {\n            item[sym].nextDelay *= 2;\n          }\n\n          (0, _commonTimers.safeSetTimeout)(function () {\n            resolve(_this2.rerequest(item));\n          }, delay);\n        });\n      }));\n    }\n\n    return (0, _apply2.default)(_webexCore.Batcher.prototype.handleHttpError, this, [reason]);\n  },\n  rerequest: function rerequest(item) {\n    var _this3 = this;\n\n    return _promise2.default.all([this.getDeferredForRequest(item), this.prepareItem(item)]).then(function (_ref) {\n      var _ref2 = (0, _slicedToArray3.default)(_ref, 2),\n          defer = _ref2[0],\n          req = _ref2[1];\n\n      _this3.enqueue(req).then(function () {\n        return _this3.bounce();\n      }).catch(function (reason) {\n        return defer.reject(reason);\n      });\n    });\n  },\n  fingerprintRequest: function fingerprintRequest(item) {\n    item[sym] = item[sym] || {\n      nextDelay: 1000\n    };\n    return _promise2.default.resolve(item[sym]);\n  },\n  fingerprintResponse: function fingerprintResponse(item) {\n    return _promise2.default.resolve(item[sym]);\n  }\n});\n\nexports.default = MetricsBatcher;","map":{"version":3,"sources":["batcher.js"],"names":["sym","MetricsBatcher","namespace","prepareItem","env","process","item","Date","prepareRequest","submitHttpRequest","method","service","resource","body","metrics","payload","handleHttpSuccess","handleHttpError","reason","WebexHttpError","delay","resolve","Batcher","rerequest","defer","req","fingerprintRequest","nextDelay","fingerprintResponse"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {Batcher, WebexHttpError} from '@webex/webex-core';\nimport {safeSetTimeout} from '@webex/common-timers';\n\nconst sym = Symbol('metric id');\n\nconst MetricsBatcher = Batcher.extend({\n  namespace: 'Metrics',\n\n  prepareItem(item) {\n    // Keep non-prod data out of metrics\n    const env = process.env.NODE_ENV === 'production' ? null : 'TEST';\n\n    item.appType = item.appType || this.config.appType;\n    item.env = item.env || env;\n    item.time = item.time || Date.now();\n    item.version = item.version || this.webex.version;\n\n    return Promise.resolve(item);\n  },\n\n  prepareRequest(queue) {\n    return Promise.resolve(queue.map((item) => {\n      item.postTime = item.postTime || Date.now();\n\n      return item;\n    }));\n  },\n\n  submitHttpRequest(payload) {\n    return this.webex.request({\n      method: 'POST',\n      service: 'metrics',\n      resource: 'metrics',\n      body: {\n        metrics: payload\n      }\n    });\n  },\n\n  handleHttpSuccess(res) {\n    return Promise.all(res.options.body.metrics.map((item) => this.acceptItem(item)));\n  },\n\n  handleHttpError(reason) {\n    if (reason instanceof WebexHttpError.NetworkOrCORSError) {\n      this.logger.warn('metrics-batcher: received network error submitting metrics, reenqueuing payload');\n\n      return Promise.all(reason.options.body.metrics.map((item) => new Promise((resolve) => {\n        const delay = item[sym].nextDelay;\n\n        if (delay < this.config.batcherRetryPlateau) {\n          item[sym].nextDelay *= 2;\n        }\n        safeSetTimeout(() => {\n          resolve(this.rerequest(item));\n        }, delay);\n      })));\n    }\n\n    return Reflect.apply(Batcher.prototype.handleHttpError, this, [reason]);\n  },\n\n  rerequest(item) {\n    return Promise.all([\n      this.getDeferredForRequest(item),\n      this.prepareItem(item)\n    ])\n      .then(([defer, req]) => {\n        this.enqueue(req)\n          .then(() => this.bounce())\n          .catch((reason) => defer.reject(reason));\n      });\n  },\n\n  fingerprintRequest(item) {\n    item[sym] = item[sym] || {\n      nextDelay: 1000\n    };\n\n    return Promise.resolve(item[sym]);\n  },\n\n  fingerprintResponse(item) {\n    return Promise.resolve(item[sym]);\n  }\n});\n\nexport default MetricsBatcher;\n"]},"metadata":{},"sourceType":"script"}