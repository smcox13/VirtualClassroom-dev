{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport KEKIdentifier from \"./KEKIdentifier.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nexport default class KEKRecipientInfo {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for KEKRecipientInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", KEKRecipientInfo.defaultValues(\"version\"));\n    /**\r\n     * @type {KEKIdentifier}\r\n     * @desc kekid\r\n     */\n\n    this.kekid = getParametersValue(parameters, \"kekid\", KEKRecipientInfo.defaultValues(\"kekid\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc keyEncryptionAlgorithm\r\n     */\n\n    this.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KEKRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\n    /**\r\n     * @type {OctetString}\r\n     * @desc encryptedKey\r\n     */\n\n    this.encryptedKey = getParametersValue(parameters, \"encryptedKey\", KEKRecipientInfo.defaultValues(\"encryptedKey\"));\n    /**\r\n     * @type {ArrayBuffer}\r\n     * @desc preDefinedKEK KEK using to encrypt CEK\r\n     */\n\n    this.preDefinedKEK = getParametersValue(parameters, \"preDefinedKEK\", KEKRecipientInfo.defaultValues(\"preDefinedKEK\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"version\":\n        return 0;\n\n      case \"kekid\":\n        return new KEKIdentifier();\n\n      case \"keyEncryptionAlgorithm\":\n        return new AlgorithmIdentifier();\n\n      case \"encryptedKey\":\n        return new asn1js.OctetString();\n\n      case \"preDefinedKEK\":\n        return new ArrayBuffer(0);\n\n      default:\n        throw new Error(`Invalid member name for KEKRecipientInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"KEKRecipientInfo\":\n        return memberValue === KEKRecipientInfo.defaultValues(\"version\");\n\n      case \"kekid\":\n        return memberValue.compareWithDefault(\"keyIdentifier\", memberValue.keyIdentifier) && \"date\" in memberValue === false && \"other\" in memberValue === false;\n\n      case \"keyEncryptionAlgorithm\":\n        return memberValue.algorithmId === \"\" && \"algorithmParams\" in memberValue === false;\n\n      case \"encryptedKey\":\n        return memberValue.isEqual(KEKRecipientInfo.defaultValues(\"encryptedKey\"));\n\n      case \"preDefinedKEK\":\n        return memberValue.byteLength === 0;\n\n      default:\n        throw new Error(`Invalid member name for KEKRecipientInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * KEKRecipientInfo ::= SEQUENCE {\r\n   *    version CMSVersion,  -- always set to 4\r\n   *    kekid KEKIdentifier,\r\n   *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n   *    encryptedKey EncryptedKey }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [version]\r\n     * @property {string} [kekid]\r\n     * @property {string} [keyEncryptionAlgorithm]\r\n     * @property {string} [encryptedKey]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Integer({\n        name: names.version || \"\"\n      }), KEKIdentifier.schema(names.kekid || {}), AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}), new asn1js.OctetString({\n        name: names.encryptedKey || \"\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"version\", \"kekid\", \"keyEncryptionAlgorithm\", \"encryptedKey\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, KEKRecipientInfo.schema({\n      names: {\n        version: \"version\",\n        kekid: {\n          names: {\n            blockName: \"kekid\"\n          }\n        },\n        keyEncryptionAlgorithm: {\n          names: {\n            blockName: \"keyEncryptionAlgorithm\"\n          }\n        },\n        encryptedKey: \"encryptedKey\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for KEKRecipientInfo\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.version = asn1.result.version.valueBlock.valueDec;\n    this.kekid = new KEKIdentifier({\n      schema: asn1.result.kekid\n    });\n    this.keyEncryptionAlgorithm = new AlgorithmIdentifier({\n      schema: asn1.result.keyEncryptionAlgorithm\n    });\n    this.encryptedKey = asn1.result.encryptedKey; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [new asn1js.Integer({\n        value: this.version\n      }), this.kekid.toSchema(), this.keyEncryptionAlgorithm.toSchema(), this.encryptedKey]\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      version: this.version,\n      kekid: this.kekid.toJSON(),\n      keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n      encryptedKey: this.encryptedKey.toJSON()\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/KEKRecipientInfo.js"],"names":["asn1js","getParametersValue","clearProps","KEKIdentifier","AlgorithmIdentifier","KEKRecipientInfo","constructor","parameters","version","defaultValues","kekid","keyEncryptionAlgorithm","encryptedKey","preDefinedKEK","fromSchema","schema","memberName","OctetString","ArrayBuffer","Error","compareWithDefault","memberValue","keyIdentifier","algorithmId","isEqual","byteLength","names","Sequence","name","blockName","value","Integer","asn1","compareSchema","verified","result","valueBlock","valueDec","toSchema","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport KEKIdentifier from \"./KEKIdentifier.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class KEKRecipientInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for KEKRecipientInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", KEKRecipientInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {KEKIdentifier}\r\n\t\t * @desc kekid\r\n\t\t */\r\n\t\tthis.kekid = getParametersValue(parameters, \"kekid\", KEKRecipientInfo.defaultValues(\"kekid\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc keyEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KEKRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc encryptedKey\r\n\t\t */\r\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", KEKRecipientInfo.defaultValues(\"encryptedKey\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc preDefinedKEK KEK using to encrypt CEK\r\n\t\t */\r\n\t\tthis.preDefinedKEK = getParametersValue(parameters, \"preDefinedKEK\", KEKRecipientInfo.defaultValues(\"preDefinedKEK\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"kekid\":\r\n\t\t\t\treturn new KEKIdentifier();\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"preDefinedKEK\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KEKRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"KEKRecipientInfo\":\r\n\t\t\t\treturn (memberValue === KEKRecipientInfo.defaultValues(\"version\"));\r\n\t\t\tcase \"kekid\":\r\n\t\t\t\treturn ((memberValue.compareWithDefault(\"keyIdentifier\", memberValue.keyIdentifier)) &&\r\n\t\t\t\t\t\t((\"date\" in memberValue) === false) &&\r\n\t\t\t\t\t\t((\"other\" in memberValue) === false));\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn (memberValue.isEqual(KEKRecipientInfo.defaultValues(\"encryptedKey\")));\r\n\t\t\tcase \"preDefinedKEK\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KEKRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * KEKRecipientInfo ::= SEQUENCE {\r\n\t *    version CMSVersion,  -- always set to 4\r\n\t *    kekid KEKIdentifier,\r\n\t *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n\t *    encryptedKey EncryptedKey }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [kekid]\r\n\t\t * @property {string} [keyEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tKEKIdentifier.schema(names.kekid || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"kekid\",\r\n\t\t\t\"keyEncryptionAlgorithm\",\r\n\t\t\t\"encryptedKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tKEKRecipientInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tkekid: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"kekid\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tkeyEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KEKRecipientInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.kekid = new KEKIdentifier({ schema: asn1.result.kekid });\r\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\t\tthis.kekid.toSchema(),\r\n\t\t\t\tthis.keyEncryptionAlgorithm.toSchema(),\r\n\t\t\t\tthis.encryptedKey\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tversion: this.version,\r\n\t\t\tkekid: this.kekid.toJSON(),\r\n\t\t\tkeyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}