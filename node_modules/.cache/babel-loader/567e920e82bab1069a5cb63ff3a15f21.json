{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport KeyAgreeRecipientIdentifier from \"./KeyAgreeRecipientIdentifier.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nexport default class RecipientEncryptedKey {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for RecipientEncryptedKey class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {KeyAgreeRecipientIdentifier}\r\n     * @desc rid\r\n     */\n    this.rid = getParametersValue(parameters, \"rid\", RecipientEncryptedKey.defaultValues(\"rid\"));\n    /**\r\n     * @type {OctetString}\r\n     * @desc encryptedKey\r\n     */\n\n    this.encryptedKey = getParametersValue(parameters, \"encryptedKey\", RecipientEncryptedKey.defaultValues(\"encryptedKey\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"rid\":\n        return new KeyAgreeRecipientIdentifier();\n\n      case \"encryptedKey\":\n        return new asn1js.OctetString();\n\n      default:\n        throw new Error(`Invalid member name for RecipientEncryptedKey class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"rid\":\n        return memberValue.variant === -1 && \"value\" in memberValue === false;\n\n      case \"encryptedKey\":\n        return memberValue.isEqual(RecipientEncryptedKey.defaultValues(\"encryptedKey\"));\n\n      default:\n        throw new Error(`Invalid member name for RecipientEncryptedKey class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * RecipientEncryptedKey ::= SEQUENCE {\r\n   *    rid KeyAgreeRecipientIdentifier,\r\n   *    encryptedKey EncryptedKey }\r\n   *\r\n   * EncryptedKey ::= OCTET STRING\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [rid]\r\n     * @property {string} [encryptedKey]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [KeyAgreeRecipientIdentifier.schema(names.rid || {}), new asn1js.OctetString({\n        name: names.encryptedKey || \"\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"rid\", \"encryptedKey\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, RecipientEncryptedKey.schema({\n      names: {\n        rid: {\n          names: {\n            blockName: \"rid\"\n          }\n        },\n        encryptedKey: \"encryptedKey\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for RecipientEncryptedKey\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.rid = new KeyAgreeRecipientIdentifier({\n      schema: asn1.result.rid\n    });\n    this.encryptedKey = asn1.result.encryptedKey; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [this.rid.toSchema(), this.encryptedKey]\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      rid: this.rid.toJSON(),\n      encryptedKey: this.encryptedKey.toJSON()\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/RecipientEncryptedKey.js"],"names":["asn1js","getParametersValue","clearProps","KeyAgreeRecipientIdentifier","RecipientEncryptedKey","constructor","parameters","rid","defaultValues","encryptedKey","fromSchema","schema","memberName","OctetString","Error","compareWithDefault","memberValue","variant","isEqual","names","Sequence","name","blockName","value","asn1","compareSchema","verified","result","toSchema","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport KeyAgreeRecipientIdentifier from \"./KeyAgreeRecipientIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class RecipientEncryptedKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RecipientEncryptedKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {KeyAgreeRecipientIdentifier}\r\n\t\t * @desc rid\r\n\t\t */\r\n\t\tthis.rid = getParametersValue(parameters, \"rid\", RecipientEncryptedKey.defaultValues(\"rid\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc encryptedKey\r\n\t\t */\r\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", RecipientEncryptedKey.defaultValues(\"encryptedKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"rid\":\r\n\t\t\t\treturn new KeyAgreeRecipientIdentifier();\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RecipientEncryptedKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"rid\":\r\n\t\t\t\treturn ((memberValue.variant === (-1)) && ((\"value\" in memberValue) === false));\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn (memberValue.isEqual(RecipientEncryptedKey.defaultValues(\"encryptedKey\")));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RecipientEncryptedKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RecipientEncryptedKey ::= SEQUENCE {\r\n\t *    rid KeyAgreeRecipientIdentifier,\r\n\t *    encryptedKey EncryptedKey }\r\n\t *\r\n\t * EncryptedKey ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [rid]\r\n\t\t * @property {string} [encryptedKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tKeyAgreeRecipientIdentifier.schema(names.rid || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"rid\",\r\n\t\t\t\"encryptedKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRecipientEncryptedKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\trid: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"rid\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RecipientEncryptedKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.rid = new KeyAgreeRecipientIdentifier({ schema: asn1.result.rid });\r\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.rid.toSchema(),\r\n\t\t\t\tthis.encryptedKey\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\trid: this.rid.toJSON(),\r\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}