{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ensureMyIdIsAvailable = undefined;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n/**\n * Stores SDK users info in the sdk object if it doesn't already exist\n * @param {object} webex - sdk object\n * @returns {Promise} - Returns a promise that user info will be available\n */\n\n\nvar ensureMyIdIsAvailable = exports.ensureMyIdIsAvailable = function () {\n  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(webex) {\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!('me' in webex.internal)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt('return', _promise2.default.resolve());\n\n          case 2:\n            return _context.abrupt('return', webex.people.get('me').then(function (person) {\n              webex.internal.me = person;\n              return _promise2.default.resolve();\n            }));\n\n          case 3:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function ensureMyIdIsAvailable(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.createEventEnvelope = createEventEnvelope;\n\nvar _common = require('@webex/common');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Creates a 'webhook' envelope to wrap Webex Teams events in\n * @param {object} webex - sdk object\n * @param {string} resource - resource to create an envelope for\n * @returns {object} - Returns a promise of an event envelope object\n */\n\n\nfunction createEventEnvelope(webex, resource) {\n  return ensureMyIdIsAvailable(webex).then(function () {\n    return _promise2.default.resolve({\n      createdBy: webex.internal.me.id,\n      orgId: webex.internal.me.orgId,\n      resource: resource,\n      // id -- webhook id concept does not correlate to SDK socket event\n      // name -- webhook name concept does not correlate to SDK socket event\n      // targetUrl -- targetUrl concept does not correlate to SDK socket event\n      // secret -- secret concept does not correlate to SDK socket event\n      ownedBy: _common.SDK_EVENT.EXTERNAL.OWNER.CREATOR,\n      status: _common.SDK_EVENT.EXTERNAL.STATUS.ACTIVE,\n      created: new Date().toISOString(),\n      data: {}\n    });\n  }).catch(function (e) {\n    _promise2.default.reject(new Error('Unable to get person info for ' + resource + ' event envelope: ' + e.message));\n  });\n}\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */","map":{"version":3,"sources":["event-envelope.js"],"names":["createEventEnvelope","createdBy","webex","orgId","resource","ownedBy","SDK_EVENT","status","created","data","e","ensureMyIdIsAvailable"],"mappings":";;;;;;;;;;;;;;;;;;AAgCA;;;;;;;;sFAKO,SAAA,OAAA,CAAA,KAAA,EAAA;AAAA,WAAA,aAAA,CAAA,OAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAA,gBAAA,EAEA,QAAQE,KAAAA,CAFR,QAAA,CAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAGI,SAAA,CAAA,OAAA,CAHJ,OAGI,EAHJ,CAAA;;AAAA,eAAA,CAAA;AAAA,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAME,KAAA,CAAA,MAAA,CAAA,GAAA,CAAA,IAAA,EAAA,IAAA,CACC,UAAA,MAAA,EAAY;AAChBA,cAAAA,KAAAA,CAAAA,QAAAA,CAAAA,EAAAA,GAAAA,MAAAA;AAEA,qBAAO,SAAA,CAAA,OAAA,CAAP,OAAO,EAAP;AAVC,aAME,CANF,CAAA;;AAAA,eAAA,CAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,EAAA,IAAA,CAAA;;;kBAAeS,qB;;;;;QAzBNX,mB,GAAAA,mB;;AARhB,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;;;;;;AAEA;;;;;;;;AAMO,SAAA,mBAAA,CAAA,KAAA,EAAA,QAAA,EAA8C;AACnD,SAAO,qBAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CACC,YAAA;AAAA,WAAM,SAAA,CAAA,OAAA,CAAA,OAAA,CAAgB;AAC1BC,MAAAA,SAAAA,EAAWC,KAAAA,CAAAA,QAAAA,CAAAA,EAAAA,CADe,EAAA;AAE1BC,MAAAA,KAAAA,EAAOD,KAAAA,CAAAA,QAAAA,CAAAA,EAAAA,CAFmB,KAAA;AAG1BE,MAAAA,QAAAA,EAH0B,QAAA;AAI1B;AACA;AACA;AACA;AACAC,MAAAA,OAAAA,EAASC,OAAAA,CAAAA,SAAAA,CAAAA,QAAAA,CAAAA,KAAAA,CARiB,OAAA;AAS1BC,MAAAA,MAAAA,EAAQD,OAAAA,CAAAA,SAAAA,CAAAA,QAAAA,CAAAA,MAAAA,CATkB,MAAA;AAU1BE,MAAAA,OAAAA,EAAS,IAAA,IAAA,GAViB,WAUjB,EAViB;AAW1BC,MAAAA,IAAAA,EAAM;AAXoB,KAAhB,CAAN;AADD,GAAA,EAAA,KAAA,CAaK,UAAA,CAAA,EAAO;AACf,IAAA,SAAA,CAAA,OAAA,CAAA,MAAA,CAAe,IAAA,KAAA,CAAA,mCAAA,QAAA,GAAA,mBAAA,GACHC,CAAAA,CADZ,OAAe,CAAf;AAdJ,GAAO,CAAP;;AAbF","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {SDK_EVENT} from '@webex/common';\n\n/**\n * Creates a 'webhook' envelope to wrap Webex Teams events in\n * @param {object} webex - sdk object\n * @param {string} resource - resource to create an envelope for\n * @returns {object} - Returns a promise of an event envelope object\n */\nexport function createEventEnvelope(webex, resource) {\n  return ensureMyIdIsAvailable(webex)\n    .then(() => Promise.resolve({\n      createdBy: webex.internal.me.id,\n      orgId: webex.internal.me.orgId,\n      resource,\n      // id -- webhook id concept does not correlate to SDK socket event\n      // name -- webhook name concept does not correlate to SDK socket event\n      // targetUrl -- targetUrl concept does not correlate to SDK socket event\n      // secret -- secret concept does not correlate to SDK socket event\n      ownedBy: SDK_EVENT.EXTERNAL.OWNER.CREATOR,\n      status: SDK_EVENT.EXTERNAL.STATUS.ACTIVE,\n      created: new Date().toISOString(),\n      data: {}\n    })).catch((e) => {\n      Promise.reject(new Error(`Unable to get person info for ${resource} \\\nevent envelope: ${e.message}`));\n    });\n}\n\n/**\n * Stores SDK users info in the sdk object if it doesn't already exist\n * @param {object} webex - sdk object\n * @returns {Promise} - Returns a promise that user info will be available\n */\nexport async function ensureMyIdIsAvailable(webex) {\n  // If we don't have it, save info about our user\n  if (('me' in webex.internal)) {\n    return Promise.resolve();\n  }\n\n  return webex.people.get('me')\n    .then((person) => {\n      webex.internal.me = person;\n\n      return Promise.resolve();\n    });\n}\n"]},"metadata":{},"sourceType":"script"}