{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FILE_SYMBOL = exports.EMITTER_SYMBOL = undefined;\n\nvar _deleteProperty = require('babel-runtime/core-js/reflect/delete-property');\n\nvar _deleteProperty2 = _interopRequireDefault(_deleteProperty);\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _apply = require('babel-runtime/core-js/reflect/apply');\n\nvar _apply2 = _interopRequireDefault(_apply);\n\nvar _map2 = require('babel-runtime/core-js/map');\n\nvar _map3 = _interopRequireDefault(_map2);\n\nvar _symbol = require('babel-runtime/core-js/symbol');\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nvar _some2 = require('lodash/some');\n\nvar _some3 = _interopRequireDefault(_some2);\n\nvar _pick2 = require('lodash/pick');\n\nvar _pick3 = _interopRequireDefault(_pick2);\n\nvar _map4 = require('lodash/map');\n\nvar _map5 = _interopRequireDefault(_map4);\n\nvar _filter2 = require('lodash/filter');\n\nvar _filter3 = _interopRequireDefault(_filter2);\n\nvar _events = require('events');\n\nvar _nodeScr = require('node-scr');\n\nvar _nodeScr2 = _interopRequireDefault(_nodeScr);\n\nvar _common = require('@webex/common');\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _helperImage = require('@webex/helper-image');\n\nvar _sha = require('crypto-js/sha256');\n\nvar _sha2 = _interopRequireDefault(_sha);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar EMITTER_SYMBOL = exports.EMITTER_SYMBOL = (0, _symbol2.default)('EMITTER_SYMBOL');\nvar FILE_SYMBOL = exports.FILE_SYMBOL = (0, _symbol2.default)('FILE_SYMBOL');\nvar PROMISE_SYMBOL = (0, _symbol2.default)('PROMISE_SYMBOL');\n/**\n * @class\n */\n\nvar ShareActivity = _webexCore.WebexPlugin.extend({\n  getSymbols: function getSymbols() {\n    return {\n      file: FILE_SYMBOL,\n      emitter: EMITTER_SYMBOL\n    };\n  },\n  namespace: 'Conversation',\n  derived: {\n    target: {\n      deps: ['conversation'],\n      fn: function fn() {\n        return this.conversation;\n      }\n    }\n  },\n  session: {\n    conversation: {\n      required: true,\n      type: 'object'\n    },\n    content: 'string',\n    clientTempId: 'string',\n    displayName: 'string',\n    enableThumbnails: {\n      default: true,\n      type: 'boolean'\n    },\n    hiddenSpaceUrl: 'object',\n    mentions: 'object',\n    spaceUrl: 'object',\n    uploads: {\n      type: 'object',\n      default: function _default() {\n        return new _map3.default();\n      }\n    }\n  },\n  initialize: function initialize(attrs, options) {\n    (0, _apply2.default)(_webexCore.WebexPlugin.prototype.initialize, this, [attrs, options]);\n\n    if (attrs && attrs.conversation) {\n      this.spaceUrl = _promise2.default.resolve(attrs.conversation._spaceUrl || this._retrieveSpaceUrl(attrs.conversation.url + '/space').then(function (url) {\n        attrs.conversation._spaceUrl = url;\n        return url;\n      }));\n      this.hiddenSpaceUrl = _promise2.default.resolve(attrs.conversation._hiddenSpaceUrl || this._retrieveSpaceUrl(attrs.conversation.url + '/space/hidden').then(function (url) {\n        attrs.conversation._hiddenSpaceUrl = url;\n        return url;\n      }));\n    }\n  },\n\n  /**\n   * Adds an additional GIF to the share activity\n   * Different from regular add to skip uploading to webex files service\n   * @param {File} gif\n   * @param {File} gif.image // thumbnail\n   * @param {Object} options\n   * @param {Object} options.actions\n   * @returns {Promise}\n   */\n  addGif: function addGif(gif, options) {\n    var gifToAdd = this.uploads.get(gif); // If the gif already exists, then don't do anything\n\n    if (gifToAdd) {\n      return _promise2.default.resolve();\n    }\n\n    gifToAdd = (0, _assign2.default)((0, _defineProperty3.default)({\n      displayName: gif.name,\n      fileSize: gif.size || gif.byteLength || gif.length,\n      mimeType: gif.type,\n      url: 'https://giphy.com',\n      objectType: 'file',\n      height: gif.height,\n      width: gif.width,\n      image: {\n        height: gif.image.height,\n        width: gif.image.width,\n        url: 'https://giphy.com'\n      }\n    }, FILE_SYMBOL, gif), (0, _pick3.default)(options, 'actions'));\n    this.uploads.set(gif, gifToAdd);\n    /* Instead of encryptBinary, which produces a encrypted version of\n     * the file for upload and a SCR (contains info needed to encrypt the\n     * SCR itself and the displayName), we directly create an SCR.\n     * Because we are skipping uploading, the encrypted file is not needed.\n     */\n\n    return _nodeScr2.default.create().then(function (scr) {\n      scr.loc = gif.url;\n      gifToAdd.scr = scr;\n      return _nodeScr2.default.create();\n    }).then(function (thumbnailScr) {\n      thumbnailScr.loc = gif.image.url;\n      gifToAdd.image.scr = thumbnailScr;\n    });\n  },\n\n  /**\n   * Adds an additional file to the share and begins submitting it to webex\n   * files\n   * @param {File} file\n   * @param {Object} options\n   * @param {Object} options.actions\n   * @returns {EventEmittingPromise}\n   */\n  add: function add(file, options) {\n    var _Object$assign3,\n        _this = this;\n\n    options = options || {};\n    var upload = this.uploads.get(file);\n\n    if (upload) {\n      return upload[PROMISE_SYMBOL];\n    }\n\n    var emitter = new _events.EventEmitter();\n    upload = (0, _assign2.default)((_Object$assign3 = {\n      displayName: file.name,\n      fileSize: file.size || file.byteLength || file.length,\n      mimeType: file.type,\n      objectType: 'file'\n    }, (0, _defineProperty3.default)(_Object$assign3, EMITTER_SYMBOL, emitter), (0, _defineProperty3.default)(_Object$assign3, FILE_SYMBOL, file), _Object$assign3), (0, _pick3.default)(options, 'actions'));\n    this.uploads.set(file, upload);\n    var promise = (0, _helperImage.detectFileType)(file, this.logger).then(function (type) {\n      upload.mimeType = type;\n      return (0, _helperImage.processImage)({\n        file: file,\n        type: type,\n        thumbnailMaxWidth: _this.config.thumbnailMaxWidth,\n        thumbnailMaxHeight: _this.config.thumbnailMaxHeight,\n        enableThumbnails: _this.enableThumbnails,\n        logger: _this.logger\n      });\n    }).then(function (imageData) {\n      var main = _this.webex.internal.encryption.encryptBinary(file).then(function (_ref) {\n        var scr = _ref.scr,\n            cdata = _ref.cdata;\n        upload.scr = scr;\n        return _promise2.default.all([cdata, _this.spaceUrl]);\n      }).then(function (_ref2) {\n        var _ref3 = (0, _slicedToArray3.default)(_ref2, 2),\n            cdata = _ref3[0],\n            spaceUrl = _ref3[1];\n\n        var uploadPromise = _this._upload(cdata, spaceUrl + '/upload_sessions');\n\n        (0, _common.transferEvents)('progress', uploadPromise, emitter);\n        return uploadPromise;\n      }).then(function (metadata) {\n        upload.url = upload.scr.loc = metadata.downloadUrl;\n      });\n\n      var thumb = void 0;\n\n      if (imageData) {\n        var _imageData = (0, _slicedToArray3.default)(imageData, 3),\n            thumbnail = _imageData[0],\n            fileDimensions = _imageData[1],\n            thumbnailDimensions = _imageData[2];\n\n        (0, _assign2.default)(upload, fileDimensions);\n\n        if (thumbnail && thumbnailDimensions) {\n          upload.image = thumbnailDimensions;\n          thumb = _this.webex.internal.encryption.encryptBinary(thumbnail).then(function (_ref4) {\n            var scr = _ref4.scr,\n                cdata = _ref4.cdata;\n            upload.image.scr = scr;\n            return _promise2.default.all([cdata, _this.hiddenSpaceUrl]);\n          }).then(function (_ref5) {\n            var _ref6 = (0, _slicedToArray3.default)(_ref5, 2),\n                cdata = _ref6[0],\n                spaceUrl = _ref6[1];\n\n            return _this._upload(cdata, spaceUrl + '/upload_sessions');\n          }).then(function (metadata) {\n            upload.image.url = upload.image.scr.loc = metadata.downloadUrl;\n          });\n        }\n      }\n\n      return _promise2.default.all([main, thumb]);\n    });\n    upload[PROMISE_SYMBOL] = promise;\n    (0, _common.proxyEvents)(emitter, promise);\n    return promise;\n  },\n\n  /**\n   * Fetches the files from the share\n   * @returns {Array}\n   */\n  getFiles: function getFiles() {\n    var files = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = (0, _getIterator3.default)(this.uploads), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var _ref7 = _step.value;\n\n        var _ref8 = (0, _slicedToArray3.default)(_ref7, 1);\n\n        var key = _ref8[0];\n        files.push(this.uploads.get(key)[FILE_SYMBOL]);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return files;\n  },\n\n  /**\n   * @param {File} file\n   * @param {string} uri\n   * @private\n   * @returns {Promise}\n   */\n  _upload: function _upload(file, uri) {\n    var fileSize = file.length || file.size || file.byteLength;\n    var fileHash = (0, _sha2.default)(file).toString();\n    return this.webex.upload({\n      uri: uri,\n      file: file,\n      qs: {\n        transcode: true\n      },\n      phases: {\n        initialize: {\n          fileSize: fileSize\n        },\n        upload: {\n          $url: function $url(session) {\n            return session.uploadUrl;\n          }\n        },\n        finalize: {\n          $uri: function $uri(session) {\n            return session.finishUploadUrl;\n          },\n          body: {\n            fileSize: fileSize,\n            fileHash: fileHash\n          }\n        }\n      }\n    });\n  },\n\n  /**\n   * Removes the specified file from the share (Does not currently delete the\n   * uploaded file)\n   * @param {File} file\n   * @returns {Promise}\n   */\n  remove: function remove(file) {\n    this.uploads.delete(file); // Returns a promise for future-proofiness.\n\n    return _promise2.default.resolve();\n  },\n\n  /**\n   * @private\n   * @returns {Promise<Object>}\n   */\n  prepare: function prepare() {\n    if (!this.uploads.size) {\n      throw new Error('Cannot submit a share activity without atleast one file');\n    }\n\n    var activity = {\n      verb: 'share',\n      object: {\n        objectType: 'content',\n        displayName: this.object && this.object.displayName ? this.object.displayName : undefined,\n        content: this.object && this.object.content ? this.object.content : undefined,\n        mentions: this.object && this.object.mentions ? this.object.mentions : undefined,\n        files: {\n          items: []\n        }\n      },\n      clientTempId: this.clientTempId\n    };\n    var promises = [];\n    this.uploads.forEach(function (item) {\n      activity.object.files.items.push(item);\n      promises.push(item[PROMISE_SYMBOL]);\n    });\n    activity.object.contentCategory = this._determineContentCategory(activity.object.files.items);\n    return _promise2.default.all(promises).then(function () {\n      return activity;\n    });\n  },\n\n  /**\n   * @param {Array} items\n   * @param {string} mimeType\n   * @private\n   * @returns {boolean}\n   */\n  _itemContainsActionWithMimeType: function _itemContainsActionWithMimeType(items, mimeType) {\n    return (0, _some3.default)(items.map(function (item) {\n      return (0, _some3.default)(item.actions, {\n        mimeType: mimeType\n      });\n    }));\n  },\n\n  /**\n   * @param {Array} items\n   * @private\n   * @returns {string}\n   */\n  _determineContentCategory: function _determineContentCategory(items) {\n    // determine if the items contain an image\n    if (this._itemContainsActionWithMimeType(items, 'application/x-cisco-webex-whiteboard')) {\n      return 'documents';\n    }\n\n    var mimeTypes = (0, _filter3.default)((0, _map5.default)(items, 'mimeType'));\n\n    if (mimeTypes.length !== items.length) {\n      return 'documents';\n    }\n\n    var contentCategory = mimeTypes[0].split('/').shift();\n\n    if (contentCategory !== 'video' && contentCategory !== 'image') {\n      return 'documents';\n    }\n\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = (0, _getIterator3.default)(mimeTypes), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var mimeType = _step2.value;\n\n        if (mimeType.split('/').shift() !== contentCategory) {\n          return 'documents';\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    return contentCategory + 's';\n  },\n\n  /**\n   * @param {string} uri\n   * @returns {Promise}\n   */\n  _retrieveSpaceUrl: function _retrieveSpaceUrl(uri) {\n    return this.webex.request({\n      method: 'PUT',\n      uri: uri\n    }).then(function (res) {\n      return res.body.spaceUrl;\n    });\n  },\n  version: '1.80.172'\n});\n/**\n * Instantiates a ShareActivity\n * @param {Object} conversation\n * @param {ShareActivity|Object|array} object\n * @param {ProxyWebex} webex\n * @returns {ShareActivity}\n */\n\n\nShareActivity.create = function create(conversation, object, webex) {\n  if (object instanceof ShareActivity) {\n    return object;\n  }\n\n  var files = void 0;\n\n  if (object && object.object && object.object.files) {\n    files = object.object.files;\n    (0, _deleteProperty2.default)(object.object, 'files');\n  }\n\n  var share = new ShareActivity((0, _assign2.default)({\n    conversation: conversation\n  }, object), {\n    parent: webex\n  });\n  files = files && files.items || files;\n\n  if (files) {\n    files.forEach(function (file) {\n      return share.add(file);\n    });\n  }\n\n  return share;\n};\n\nexports.default = ShareActivity;","map":{"version":3,"sources":["share-activity.js"],"names":["EMITTER_SYMBOL","FILE_SYMBOL","PROMISE_SYMBOL","ShareActivity","getSymbols","file","emitter","namespace","derived","target","deps","fn","session","conversation","required","type","content","clientTempId","displayName","enableThumbnails","default","hiddenSpaceUrl","mentions","spaceUrl","uploads","initialize","WebexPlugin","attrs","addGif","gifToAdd","gif","fileSize","mimeType","url","objectType","height","width","image","scr","SCR","thumbnailScr","add","options","upload","EventEmitter","promise","thumbnailMaxWidth","thumbnailMaxHeight","logger","main","cdata","uploadPromise","metadata","thumb","thumbnail","fileDimensions","thumbnailDimensions","getFiles","files","key","_upload","fileHash","uri","qs","transcode","phases","$url","finalize","$uri","body","remove","prepare","activity","verb","object","items","promises","item","_itemContainsActionWithMimeType","_determineContentCategory","mimeTypes","contentCategory","_retrieveSpaceUrl","method","res","share","parent","webex"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {EventEmitter} from 'events';\n\nimport SCR from 'node-scr';\nimport {proxyEvents, transferEvents} from '@webex/common';\nimport {WebexPlugin} from '@webex/webex-core';\nimport {filter, map, pick, some} from 'lodash';\nimport {detectFileType, processImage} from '@webex/helper-image';\nimport sha256 from 'crypto-js/sha256';\n\nexport const EMITTER_SYMBOL = Symbol('EMITTER_SYMBOL');\nexport const FILE_SYMBOL = Symbol('FILE_SYMBOL');\nconst PROMISE_SYMBOL = Symbol('PROMISE_SYMBOL');\n\n/**\n * @class\n */\nconst ShareActivity = WebexPlugin.extend({\n  getSymbols() {\n    return {\n      file: FILE_SYMBOL,\n      emitter: EMITTER_SYMBOL\n    };\n  },\n\n  namespace: 'Conversation',\n\n  derived: {\n    target: {\n      deps: ['conversation'],\n      fn() {\n        return this.conversation;\n      }\n    }\n  },\n\n  session: {\n    conversation: {\n      required: true,\n      type: 'object'\n    },\n\n    content: 'string',\n\n    clientTempId: 'string',\n\n    displayName: 'string',\n\n    enableThumbnails: {\n      default: true,\n      type: 'boolean'\n    },\n\n    hiddenSpaceUrl: 'object',\n\n    mentions: 'object',\n\n    spaceUrl: 'object',\n\n    uploads: {\n      type: 'object',\n      default() {\n        return new Map();\n      }\n    }\n  },\n\n  initialize(attrs, options) {\n    Reflect.apply(WebexPlugin.prototype.initialize, this, [attrs, options]);\n\n    if (attrs && attrs.conversation) {\n      this.spaceUrl = Promise.resolve(attrs.conversation._spaceUrl || this._retrieveSpaceUrl(`${attrs.conversation.url}/space`)\n        .then((url) => {\n          attrs.conversation._spaceUrl = url;\n\n          return url;\n        }));\n\n      this.hiddenSpaceUrl = Promise.resolve(attrs.conversation._hiddenSpaceUrl || this._retrieveSpaceUrl(`${attrs.conversation.url}/space/hidden`)\n        .then((url) => {\n          attrs.conversation._hiddenSpaceUrl = url;\n\n          return url;\n        }));\n    }\n  },\n\n  /**\n   * Adds an additional GIF to the share activity\n   * Different from regular add to skip uploading to webex files service\n   * @param {File} gif\n   * @param {File} gif.image // thumbnail\n   * @param {Object} options\n   * @param {Object} options.actions\n   * @returns {Promise}\n   */\n  addGif(gif, options) {\n    let gifToAdd = this.uploads.get(gif);\n\n    // If the gif already exists, then don't do anything\n    if (gifToAdd) {\n      return Promise.resolve();\n    }\n\n    gifToAdd = Object.assign({\n      displayName: gif.name,\n      fileSize: gif.size || gif.byteLength || gif.length,\n      mimeType: gif.type,\n      url: 'https://giphy.com',\n      objectType: 'file',\n      height: gif.height,\n      width: gif.width,\n      image: {\n        height: gif.image.height,\n        width: gif.image.width,\n        url: 'https://giphy.com'\n      },\n      [FILE_SYMBOL]: gif\n    }, pick(options, 'actions'));\n\n    this.uploads.set(gif, gifToAdd);\n\n    /* Instead of encryptBinary, which produces a encrypted version of\n     * the file for upload and a SCR (contains info needed to encrypt the\n     * SCR itself and the displayName), we directly create an SCR.\n     * Because we are skipping uploading, the encrypted file is not needed.\n     */\n    return SCR.create()\n      .then((scr) => {\n        scr.loc = gif.url;\n        gifToAdd.scr = scr;\n\n        return SCR.create();\n      })\n      .then((thumbnailScr) => {\n        thumbnailScr.loc = gif.image.url;\n        gifToAdd.image.scr = thumbnailScr;\n      });\n  },\n\n  /**\n   * Adds an additional file to the share and begins submitting it to webex\n   * files\n   * @param {File} file\n   * @param {Object} options\n   * @param {Object} options.actions\n   * @returns {EventEmittingPromise}\n   */\n  add(file, options) {\n    options = options || {};\n    let upload = this.uploads.get(file);\n\n    if (upload) {\n      return upload[PROMISE_SYMBOL];\n    }\n    const emitter = new EventEmitter();\n\n    upload = Object.assign({\n      displayName: file.name,\n      fileSize: file.size || file.byteLength || file.length,\n      mimeType: file.type,\n      objectType: 'file',\n      [EMITTER_SYMBOL]: emitter,\n      [FILE_SYMBOL]: file\n    }, pick(options, 'actions'));\n\n    this.uploads.set(file, upload);\n    const promise = detectFileType(file, this.logger)\n      .then((type) => {\n        upload.mimeType = type;\n\n        return processImage({\n          file,\n          type,\n          thumbnailMaxWidth: this.config.thumbnailMaxWidth,\n          thumbnailMaxHeight: this.config.thumbnailMaxHeight,\n          enableThumbnails: this.enableThumbnails,\n          logger: this.logger\n        });\n      })\n      .then((imageData) => {\n        const main = this.webex.internal.encryption.encryptBinary(file)\n          .then(({scr, cdata}) => {\n            upload.scr = scr;\n\n            return Promise.all([cdata, this.spaceUrl]);\n          })\n          .then(([cdata, spaceUrl]) => {\n            const uploadPromise = this._upload(cdata, `${spaceUrl}/upload_sessions`);\n\n            transferEvents('progress', uploadPromise, emitter);\n\n            return uploadPromise;\n          })\n          .then((metadata) => {\n            upload.url = upload.scr.loc = metadata.downloadUrl;\n          });\n\n\n        let thumb;\n\n        if (imageData) {\n          const [thumbnail, fileDimensions, thumbnailDimensions] = imageData;\n\n          Object.assign(upload, fileDimensions);\n\n          if (thumbnail && thumbnailDimensions) {\n            upload.image = thumbnailDimensions;\n            thumb = this.webex.internal.encryption.encryptBinary(thumbnail)\n              .then(({scr, cdata}) => {\n                upload.image.scr = scr;\n\n                return Promise.all([cdata, this.hiddenSpaceUrl]);\n              })\n              .then(([cdata, spaceUrl]) => this._upload(cdata, `${spaceUrl}/upload_sessions`))\n              .then((metadata) => {\n                upload.image.url = upload.image.scr.loc = metadata.downloadUrl;\n              });\n          }\n        }\n\n        return Promise.all([main, thumb]);\n      });\n\n\n    upload[PROMISE_SYMBOL] = promise;\n\n    proxyEvents(emitter, promise);\n\n    return promise;\n  },\n\n  /**\n   * Fetches the files from the share\n   * @returns {Array}\n   */\n  getFiles() {\n    const files = [];\n\n    for (const [key] of this.uploads) {\n      files.push(this.uploads.get(key)[FILE_SYMBOL]);\n    }\n\n    return files;\n  },\n\n\n  /**\n   * @param {File} file\n   * @param {string} uri\n   * @private\n   * @returns {Promise}\n   */\n  _upload(file, uri) {\n    const fileSize = file.length || file.size || file.byteLength;\n    const fileHash = sha256(file).toString();\n\n    return this.webex.upload({\n      uri,\n      file,\n      qs: {\n        transcode: true\n      },\n      phases: {\n        initialize: {fileSize},\n        upload: {\n          $url(session) {\n            return session.uploadUrl;\n          }\n        },\n        finalize: {\n          $uri(session) {\n            return session.finishUploadUrl;\n          },\n          body: {fileSize, fileHash}\n        }\n      }\n    });\n  },\n\n  /**\n   * Removes the specified file from the share (Does not currently delete the\n   * uploaded file)\n   * @param {File} file\n   * @returns {Promise}\n   */\n  remove(file) {\n    this.uploads.delete(file);\n\n    // Returns a promise for future-proofiness.\n    return Promise.resolve();\n  },\n\n  /**\n   * @private\n   * @returns {Promise<Object>}\n   */\n  prepare() {\n    if (!this.uploads.size) {\n      throw new Error('Cannot submit a share activity without atleast one file');\n    }\n\n    const activity = {\n      verb: 'share',\n      object: {\n        objectType: 'content',\n        displayName: this.object && this.object.displayName ? this.object.displayName : undefined,\n        content: this.object && this.object.content ? this.object.content : undefined,\n        mentions: this.object && this.object.mentions ? this.object.mentions : undefined,\n        files: {\n          items: []\n        }\n      },\n      clientTempId: this.clientTempId\n    };\n\n    const promises = [];\n\n    this.uploads.forEach((item) => {\n      activity.object.files.items.push(item);\n      promises.push(item[PROMISE_SYMBOL]);\n    });\n\n    activity.object.contentCategory = this._determineContentCategory(activity.object.files.items);\n\n    return Promise.all(promises)\n      .then(() => activity);\n  },\n\n  /**\n   * @param {Array} items\n   * @param {string} mimeType\n   * @private\n   * @returns {boolean}\n   */\n  _itemContainsActionWithMimeType(items, mimeType) {\n    return some(items.map((item) => some(item.actions, {mimeType})));\n  },\n\n  /**\n   * @param {Array} items\n   * @private\n   * @returns {string}\n   */\n  _determineContentCategory(items) {\n    // determine if the items contain an image\n    if (this._itemContainsActionWithMimeType(items, 'application/x-cisco-webex-whiteboard')) {\n      return 'documents';\n    }\n\n    const mimeTypes = filter(map(items, 'mimeType'));\n\n    if (mimeTypes.length !== items.length) {\n      return 'documents';\n    }\n\n    const contentCategory = mimeTypes[0].split('/').shift();\n\n    if (contentCategory !== 'video' && contentCategory !== 'image') {\n      return 'documents';\n    }\n\n    for (const mimeType of mimeTypes) {\n      if (mimeType.split('/').shift() !== contentCategory) {\n        return 'documents';\n      }\n    }\n\n    return `${contentCategory}s`;\n  },\n\n  /**\n   * @param {string} uri\n   * @returns {Promise}\n   */\n  _retrieveSpaceUrl(uri) {\n    return this.webex.request({\n      method: 'PUT',\n      uri\n    })\n      .then((res) => res.body.spaceUrl);\n  }\n});\n\n/**\n * Instantiates a ShareActivity\n * @param {Object} conversation\n * @param {ShareActivity|Object|array} object\n * @param {ProxyWebex} webex\n * @returns {ShareActivity}\n */\nShareActivity.create = function create(conversation, object, webex) {\n  if (object instanceof ShareActivity) {\n    return object;\n  }\n\n  let files;\n\n  if (object && object.object && object.object.files) {\n    files = object.object.files;\n    Reflect.deleteProperty(object.object, 'files');\n  }\n\n  const share = new ShareActivity(Object.assign({\n    conversation\n  }, object), {\n    parent: webex\n  });\n\n  files = files && files.items || files;\n  if (files) {\n    files.forEach((file) => share.add(file));\n  }\n\n  return share;\n};\n\nexport default ShareActivity;\n"]},"metadata":{},"sourceType":"script"}