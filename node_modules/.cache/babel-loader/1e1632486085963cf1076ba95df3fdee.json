{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Attribute from \"./Attribute.js\";\nimport ECPrivateKey from \"./ECPrivateKey.js\";\nimport RSAPrivateKey from \"./RSAPrivateKey.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5208\r\n */\n\nexport default class PrivateKeyInfo {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for PrivateKeyInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", PrivateKeyInfo.defaultValues(\"version\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc privateKeyAlgorithm\r\n     */\n\n    this.privateKeyAlgorithm = getParametersValue(parameters, \"privateKeyAlgorithm\", PrivateKeyInfo.defaultValues(\"privateKeyAlgorithm\"));\n    /**\r\n     * @type {OctetString}\r\n     * @desc privateKey\r\n     */\n\n    this.privateKey = getParametersValue(parameters, \"privateKey\", PrivateKeyInfo.defaultValues(\"privateKey\"));\n    if (\"attributes\" in parameters)\n      /**\r\n       * @type {Array.<Attribute>}\r\n       * @desc attributes\r\n       */\n      this.attributes = getParametersValue(parameters, \"attributes\", PrivateKeyInfo.defaultValues(\"attributes\"));\n    if (\"parsedKey\" in parameters)\n      /**\r\n       * @type {ECPrivateKey|RSAPrivateKey}\r\n       * @desc Parsed public key value\r\n       */\n      this.parsedKey = getParametersValue(parameters, \"parsedKey\", PrivateKeyInfo.defaultValues(\"parsedKey\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n    //region If input argument array contains \"json\" for this object\n\n    if (\"json\" in parameters) this.fromJSON(parameters.json); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"version\":\n        return 0;\n\n      case \"privateKeyAlgorithm\":\n        return new AlgorithmIdentifier();\n\n      case \"privateKey\":\n        return new asn1js.OctetString();\n\n      case \"attributes\":\n        return [];\n\n      case \"parsedKey\":\n        return {};\n\n      default:\n        throw new Error(`Invalid member name for PrivateKeyInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * PrivateKeyInfo ::= SEQUENCE {\r\n   *    version Version,\r\n   *    privateKeyAlgorithm AlgorithmIdentifier {{PrivateKeyAlgorithms}},\r\n   *    privateKey PrivateKey,\r\n   *    attributes [0] Attributes OPTIONAL }\r\n   *\r\n   * Version ::= INTEGER {v1(0)} (v1,...)\r\n   *\r\n   * PrivateKey ::= OCTET STRING\r\n   *\r\n   * Attributes ::= SET OF Attribute\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [version]\r\n     * @property {string} [privateKeyAlgorithm]\r\n     * @property {string} [privateKey]\r\n     * @property {string} [attributes]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Integer({\n        name: names.version || \"\"\n      }), AlgorithmIdentifier.schema(names.privateKeyAlgorithm || {}), new asn1js.OctetString({\n        name: names.privateKey || \"\"\n      }), new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [new asn1js.Repeated({\n          name: names.attributes || \"\",\n          value: Attribute.schema()\n        })]\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"version\", \"privateKeyAlgorithm\", \"privateKey\", \"attributes\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, PrivateKeyInfo.schema({\n      names: {\n        version: \"version\",\n        privateKeyAlgorithm: {\n          names: {\n            blockName: \"privateKeyAlgorithm\"\n          }\n        },\n        privateKey: \"privateKey\",\n        attributes: \"attributes\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PrivateKeyInfo\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.version = asn1.result.version.valueBlock.valueDec;\n    this.privateKeyAlgorithm = new AlgorithmIdentifier({\n      schema: asn1.result.privateKeyAlgorithm\n    });\n    this.privateKey = asn1.result.privateKey;\n    if (\"attributes\" in asn1.result) this.attributes = Array.from(asn1.result.attributes, element => new Attribute({\n      schema: element\n    }));\n\n    switch (this.privateKeyAlgorithm.algorithmId) {\n      case \"1.2.840.113549.1.1.1\":\n        // RSA\n        {\n          const privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\n          if (privateKeyASN1.offset !== -1) this.parsedKey = new RSAPrivateKey({\n            schema: privateKeyASN1.result\n          });\n        }\n        break;\n\n      case \"1.2.840.10045.2.1\":\n        // ECDSA\n        if (\"algorithmParams\" in this.privateKeyAlgorithm) {\n          if (this.privateKeyAlgorithm.algorithmParams instanceof asn1js.ObjectIdentifier) {\n            const privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\n\n            if (privateKeyASN1.offset !== -1) {\n              this.parsedKey = new ECPrivateKey({\n                namedCurve: this.privateKeyAlgorithm.algorithmParams.valueBlock.toString(),\n                schema: privateKeyASN1.result\n              });\n            }\n          }\n        }\n\n        break;\n\n      default:\n    } //endregion\n\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [new asn1js.Integer({\n      value: this.version\n    }), this.privateKeyAlgorithm.toSchema(), this.privateKey];\n\n    if (\"attributes\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: Array.from(this.attributes, element => element.toSchema())\n      }));\n    } //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    //region Return common value in case we do not have enough info fo making JWK\n    if (\"parsedKey\" in this === false) {\n      const object = {\n        version: this.version,\n        privateKeyAlgorithm: this.privateKeyAlgorithm.toJSON(),\n        privateKey: this.privateKey.toJSON()\n      };\n      if (\"attributes\" in this) object.attributes = Array.from(this.attributes, element => element.toJSON());\n      return object;\n    } //endregion\n    //region Making JWK\n\n\n    const jwk = {};\n\n    switch (this.privateKeyAlgorithm.algorithmId) {\n      case \"1.2.840.10045.2.1\":\n        // ECDSA\n        jwk.kty = \"EC\";\n        break;\n\n      case \"1.2.840.113549.1.1.1\":\n        // RSA\n        jwk.kty = \"RSA\";\n        break;\n\n      default:\n    }\n\n    const publicKeyJWK = this.parsedKey.toJSON();\n\n    for (const key of Object.keys(publicKeyJWK)) jwk[key] = publicKeyJWK[key];\n\n    return jwk; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert JSON value into current object\r\n   * @param {Object} json\r\n   */\n\n\n  fromJSON(json) {\n    if (\"kty\" in json) {\n      switch (json.kty.toUpperCase()) {\n        case \"EC\":\n          this.parsedKey = new ECPrivateKey({\n            json\n          });\n          this.privateKeyAlgorithm = new AlgorithmIdentifier({\n            algorithmId: \"1.2.840.10045.2.1\",\n            algorithmParams: new asn1js.ObjectIdentifier({\n              value: this.parsedKey.namedCurve\n            })\n          });\n          break;\n\n        case \"RSA\":\n          this.parsedKey = new RSAPrivateKey({\n            json\n          });\n          this.privateKeyAlgorithm = new AlgorithmIdentifier({\n            algorithmId: \"1.2.840.113549.1.1.1\",\n            algorithmParams: new asn1js.Null()\n          });\n          break;\n\n        default:\n          throw new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\n      }\n\n      this.privateKey = new asn1js.OctetString({\n        valueHex: this.parsedKey.toSchema().toBER(false)\n      });\n    }\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/PrivateKeyInfo.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","Attribute","ECPrivateKey","RSAPrivateKey","PrivateKeyInfo","constructor","parameters","version","defaultValues","privateKeyAlgorithm","privateKey","attributes","parsedKey","fromSchema","schema","fromJSON","json","memberName","OctetString","Error","names","Sequence","name","blockName","value","Integer","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","asn1","compareSchema","verified","result","valueBlock","valueDec","Array","from","element","algorithmId","privateKeyASN1","fromBER","valueHex","offset","algorithmParams","ObjectIdentifier","namedCurve","toString","toSchema","outputArray","push","toJSON","object","jwk","kty","publicKeyJWK","key","Object","keys","toUpperCase","Null","toBER"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport ECPrivateKey from \"./ECPrivateKey.js\";\r\nimport RSAPrivateKey from \"./RSAPrivateKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5208\r\n */\r\nexport default class PrivateKeyInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PrivateKeyInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", PrivateKeyInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc privateKeyAlgorithm\r\n\t\t */\r\n\t\tthis.privateKeyAlgorithm = getParametersValue(parameters, \"privateKeyAlgorithm\", PrivateKeyInfo.defaultValues(\"privateKeyAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc privateKey\r\n\t\t */\r\n\t\tthis.privateKey = getParametersValue(parameters, \"privateKey\", PrivateKeyInfo.defaultValues(\"privateKey\"));\r\n\r\n\t\tif(\"attributes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc attributes\r\n\t\t\t */\r\n\t\t\tthis.attributes = getParametersValue(parameters, \"attributes\", PrivateKeyInfo.defaultValues(\"attributes\"));\r\n\r\n\t\tif(\"parsedKey\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ECPrivateKey|RSAPrivateKey}\r\n\t\t\t * @desc Parsed public key value\r\n\t\t\t */\r\n\t\t\tthis.parsedKey = getParametersValue(parameters, \"parsedKey\", PrivateKeyInfo.defaultValues(\"parsedKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"privateKeyAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"privateKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"parsedKey\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PrivateKeyInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PrivateKeyInfo ::= SEQUENCE {\r\n\t *    version Version,\r\n\t *    privateKeyAlgorithm AlgorithmIdentifier {{PrivateKeyAlgorithms}},\r\n\t *    privateKey PrivateKey,\r\n\t *    attributes [0] Attributes OPTIONAL }\r\n\t *\r\n\t * Version ::= INTEGER {v1(0)} (v1,...)\r\n\t *\r\n\t * PrivateKey ::= OCTET STRING\r\n\t *\r\n\t * Attributes ::= SET OF Attribute\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [privateKeyAlgorithm]\r\n\t\t * @property {string} [privateKey]\r\n\t\t * @property {string} [attributes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.privateKeyAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.privateKey || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.attributes || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"privateKeyAlgorithm\",\r\n\t\t\t\"privateKey\",\r\n\t\t\t\"attributes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPrivateKeyInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tprivateKeyAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"privateKeyAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tprivateKey: \"privateKey\",\r\n\t\t\t\t\tattributes: \"attributes\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PrivateKeyInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.privateKeyAlgorithm });\r\n\t\tthis.privateKey = asn1.result.privateKey;\r\n\r\n\t\tif(\"attributes\" in asn1.result)\r\n\t\t\tthis.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\r\n\r\n\t\tswitch(this.privateKeyAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\r\n\t\t\t\t\tif(privateKeyASN1.offset !== (-1))\r\n\t\t\t\t\t\tthis.parsedKey = new RSAPrivateKey({ schema: privateKeyASN1.result });\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tif(\"algorithmParams\" in this.privateKeyAlgorithm)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.privateKeyAlgorithm.algorithmParams instanceof asn1js.ObjectIdentifier)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\r\n\t\t\t\t\t\tif(privateKeyASN1.offset !== (-1))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.parsedKey = new ECPrivateKey({\r\n\t\t\t\t\t\t\t\tnamedCurve: this.privateKeyAlgorithm.algorithmParams.valueBlock.toString(),\r\n\t\t\t\t\t\t\t\tschema: privateKeyASN1.result\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.privateKeyAlgorithm.toSchema(),\r\n\t\t\tthis.privateKey\r\n\t\t];\r\n\r\n\t\tif(\"attributes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\t//region Return common value in case we do not have enough info fo making JWK\r\n\t\tif((\"parsedKey\" in this) === false)\r\n\t\t{\r\n\t\t\tconst object = {\r\n\t\t\t\tversion: this.version,\r\n\t\t\t\tprivateKeyAlgorithm: this.privateKeyAlgorithm.toJSON(),\r\n\t\t\t\tprivateKey: this.privateKey.toJSON()\r\n\t\t\t};\r\n\r\n\t\t\tif(\"attributes\" in this)\r\n\t\t\t\tobject.attributes = Array.from(this.attributes, element => element.toJSON());\r\n\r\n\t\t\treturn object;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Making JWK\r\n\t\tconst jwk = {};\r\n\r\n\t\tswitch(this.privateKeyAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tjwk.kty = \"EC\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\tconst publicKeyJWK = this.parsedKey.toJSON();\r\n\r\n\t\tfor(const key of Object.keys(publicKeyJWK))\r\n\t\t\tjwk[key] = publicKeyJWK[key];\r\n\r\n\t\treturn jwk;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"kty\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.kty.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"EC\":\r\n\t\t\t\t\tthis.parsedKey = new ECPrivateKey({ json });\r\n\r\n\t\t\t\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.10045.2.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"RSA\":\r\n\t\t\t\t\tthis.parsedKey = new RSAPrivateKey({ json });\r\n\r\n\t\t\t\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\r\n\t\t\t}\r\n\r\n\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: this.parsedKey.toSchema().toBER(false) });\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}