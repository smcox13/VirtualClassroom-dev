{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromBase64url = fromBase64url;\nexports.toBase64Url = toBase64Url;\nexports.encode = encode;\nexports.decode = decode;\nexports.validate = validate;\n\nvar _urlsafeBase = require('urlsafe-base64');\n\nvar _urlsafeBase2 = _interopRequireDefault(_urlsafeBase);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Converts a string from a base64url-encoded string\n * @param {string} str\n * @returns {string}\n */\n\n\nfunction fromBase64url(str) {\n  return _urlsafeBase2.default.decode(str).toString();\n}\n/**\n * Converts a string to a base64url-encoded string. It also accepts a buffer\n * @param {string|buffer} str\n * @returns {string}\n */\n\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nfunction toBase64Url(str) {\n  var buffer = str;\n\n  if (!Buffer.isBuffer(buffer)) {\n    buffer = Buffer.from(buffer);\n  }\n\n  return _urlsafeBase2.default.encode(buffer);\n}\n/**\n * Converts a string to a base64url-encoded string. It also accepts a buffer\n * @param {string|buffer} str\n * @returns {string}\n */\n\n\nfunction encode(str) {\n  return toBase64Url(str);\n}\n/**\n * Converts a string from a base64url-encoded string\n * @param {string} str\n * @returns {string}\n */\n\n\nfunction decode(str) {\n  return fromBase64url(str);\n}\n/**\n * Indicates if the provided string is, in fact, a base64 string\n * @param {String} str\n * @returns {Boolean}\n */\n\n\nfunction validate(str) {\n  return _urlsafeBase2.default.validate(str);\n}\n\nexports.default = {\n  fromBase64url: fromBase64url,\n  toBase64Url: toBase64Url,\n  encode: encode,\n  decode: decode,\n  validate: validate\n};","map":{"version":3,"sources":["base64.js"],"names":["fromBase64url","UrlSafeBase64","toBase64Url","buffer","Buffer","encode","decode","validate"],"mappings":";;;;;QAWgBA,a,GAAAA,a;QASAE,W,GAAAA,W;QAeAG,M,GAAAA,M;QASAC,M,GAAAA,M;QASAC,Q,GAAAA,Q;;AAjDhB,IAAA,YAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;;;;;;;;AAEA;;;;;;;AAKO,SAAA,aAAA,CAAA,GAAA,EAA4B;AACjC,SAAON,aAAAA,CAAAA,OAAAA,CAAAA,MAAAA,CAAAA,GAAAA,EAAP,QAAOA,EAAP;AACD;AAED;;;;;;AAfA;;;;;AAoBO,SAAA,WAAA,CAAA,GAAA,EAA0B;AAC/B,MAAIE,MAAAA,GAAJ,GAAA;;AAEA,MAAI,CAACC,MAAAA,CAAAA,QAAAA,CAAL,MAAKA,CAAL,EAA8B;AAC5BD,IAAAA,MAAAA,GAASC,MAAAA,CAAAA,IAAAA,CAATD,MAASC,CAATD;AACD;;AAED,SAAOF,aAAAA,CAAAA,OAAAA,CAAAA,MAAAA,CAAP,MAAOA,CAAP;AACD;AAED;;;;;;;AAKO,SAAA,MAAA,CAAA,GAAA,EAAqB;AAC1B,SAAOC,WAAAA,CAAP,GAAOA,CAAP;AACD;AAED;;;;;;;AAKO,SAAA,MAAA,CAAA,GAAA,EAAqB;AAC1B,SAAOF,aAAAA,CAAP,GAAOA,CAAP;AACD;AAED;;;;;;;AAKO,SAAA,QAAA,CAAA,GAAA,EAAuB;AAC5B,SAAOC,aAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CAAP,GAAOA,CAAP;AACD;;kBAEc;AACbD,EAAAA,aAAAA,EADa,aAAA;AAEbE,EAAAA,WAAAA,EAFa,WAAA;AAGbG,EAAAA,MAAAA,EAHa,MAAA;AAIbC,EAAAA,MAAAA,EAJa,MAAA;AAKbC,EAAAA,QAAAA,EAAAA;AALa,C","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport UrlSafeBase64 from 'urlsafe-base64';\n\n/**\n * Converts a string from a base64url-encoded string\n * @param {string} str\n * @returns {string}\n */\nexport function fromBase64url(str) {\n  return UrlSafeBase64.decode(str).toString();\n}\n\n/**\n * Converts a string to a base64url-encoded string. It also accepts a buffer\n * @param {string|buffer} str\n * @returns {string}\n */\nexport function toBase64Url(str) {\n  let buffer = str;\n\n  if (!Buffer.isBuffer(buffer)) {\n    buffer = Buffer.from(buffer);\n  }\n\n  return UrlSafeBase64.encode(buffer);\n}\n\n/**\n * Converts a string to a base64url-encoded string. It also accepts a buffer\n * @param {string|buffer} str\n * @returns {string}\n */\nexport function encode(str) {\n  return toBase64Url(str);\n}\n\n/**\n * Converts a string from a base64url-encoded string\n * @param {string} str\n * @returns {string}\n */\nexport function decode(str) {\n  return fromBase64url(str);\n}\n\n/**\n * Indicates if the provided string is, in fact, a base64 string\n * @param {String} str\n * @returns {Boolean}\n */\nexport function validate(str) {\n  return UrlSafeBase64.validate(str);\n}\n\nexport default {\n  fromBase64url,\n  toBase64Url,\n  encode,\n  decode,\n  validate\n};\n"]},"metadata":{},"sourceType":"script"}