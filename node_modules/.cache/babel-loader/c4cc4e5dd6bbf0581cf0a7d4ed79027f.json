{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _constants = require('../constants');\n\nvar _request = require('../meeting-info/request');\n\nvar _request2 = _interopRequireDefault(_request);\n\nvar _parameter = require('../common/errors/parameter');\n\nvar _parameter2 = _interopRequireDefault(_parameter);\n\nvar _request3 = require('./request');\n\nvar _request4 = _interopRequireDefault(_request3);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @class PersonalMeetingRoom\n */\n\n\nvar PersonalMeetingRoom = function (_StatelessWebexPlugin) {\n  (0, _inherits3.default)(PersonalMeetingRoom, _StatelessWebexPlugin);\n  /**\n   *\n   * @param {Object} attrs\n   * @param {Object} options\n   */\n\n  function PersonalMeetingRoom(attrs, options) {\n    (0, _classCallCheck3.default)(this, PersonalMeetingRoom);\n    /**\n     * The pmr server object\n     * @instance\n     * @type {Object}\n     * @public\n     * @memberof PersonalMeetingRoom\n    */\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (PersonalMeetingRoom.__proto__ || (0, _getPrototypeOf2.default)(PersonalMeetingRoom)).call(this, {}, options));\n\n    _this.namespace = _constants.MEETINGS;\n    _this.pmr = null;\n    /**\n     * The pmr sip Uri\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof PersonalMeetingRoom\n    */\n\n    _this.sipUri = null;\n    /**\n     * The pmr link\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof PersonalMeetingRoom\n    */\n\n    _this.link = null;\n    /**\n     * The pmr server object\n     * @instance\n     * @type {Object}\n     * @public\n     * @memberof PersonalMeetingRoom\n    */\n\n    _this.userId = null;\n    /**\n     * The pmr name\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof PersonalMeetingRoom\n    */\n\n    _this.name = null;\n    /**\n     * The meeting info request server interface\n     * @instance\n     * @type {MeetingInfoRequest}\n     * @private\n     * @memberof PersonalMeetingRoom\n    */\n\n    _this.meetingInfoRequest = new _request2.default({}, options);\n    /**\n     * The pmr server request interface\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof PersonalMeetingRoom\n    */\n\n    _this.personalMeetingRoomRequest = new _request4.default({}, options);\n    return _this;\n  }\n  /**\n   * claims a pmr and updates the cached PMR values\n   * @param {String} link\n   * @param {String} pin\n   * @param {Boolean} [preferred] defaults to true to set this claimed PMR as the preferred\n   * @returns {Promise}\n   * @public\n   * @memberof PersonalMeetingRoom\n   */\n\n\n  (0, _createClass3.default)(PersonalMeetingRoom, [{\n    key: 'claim',\n    value: function claim(link, pin) {\n      var _this2 = this;\n\n      var preferred = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var options = {\n        userId: this.webex.internal.device.userId,\n        passcode: pin,\n        meetingAddress: link,\n        preferred: preferred\n      };\n      return this.personalMeetingRoomRequest.claimPmr(options).then(function (pmr) {\n        if (pmr && pmr.body) {\n          _this2.set(pmr.body);\n        } else {\n          return _promise2.default.reject(new _parameter2.default('No PMR body provided. PMR values not updated.'));\n        }\n\n        return pmr.body;\n      });\n    }\n    /**\n     * @param {Object} body the response body from meeting info request\n     * @returns {undefined}\n     * @private\n     * @memberof PersonalMeetingRoom\n     */\n\n  }, {\n    key: 'set',\n    value: function set(body) {\n      this.pmr = body;\n      this.sipUri = body.sipMeetingUri;\n      this.meetingLink = body.webExMeetingLink || body.meetingLink;\n      this.userId = body.owner;\n      this.name = body.meetingName;\n      this.number = body.meetingNumber;\n    }\n    /**\n     * TODO: implement TTL for syncing and caching so to not request again and again\n     * @param {Object} options\n     * @returns {Promise}\n     * @public\n     * @memberof PersonalMeetingRoom\n     */\n\n  }, {\n    key: 'get',\n    value: function get() {\n      var _this3 = this;\n\n      var options = {\n        type: _constants._PERSONAL_ROOM_,\n        destination: this.webex.internal.device.userId\n      };\n      return this.meetingInfoRequest.fetchMeetingInfo(options).then(function (pmr) {\n        if (pmr && pmr.body && pmr.body.isPmr) {\n          _this3.set(pmr.body);\n        } else {\n          return _promise2.default.reject(new TypeError('The PMR requested is NOT a PMR. PMR values not set.'));\n        }\n\n        return pmr.body;\n      });\n    }\n  }]);\n  return PersonalMeetingRoom;\n}(_webexCore.StatelessWebexPlugin);\n\nexports.default = PersonalMeetingRoom;","map":{"version":3,"sources":["index.js"],"names":["PersonalMeetingRoom","StatelessWebexPlugin","namespace","MEETINGS","MeetingInfoRequest","PersonalMeetingRoomRequest","link","pin","preferred","options","userId","passcode","meetingAddress","pmr","ParameterError","body","type","_PERSONAL_ROOM_","destination"],"mappings":"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","sourcesContent":["import {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport {MEETINGS, _PERSONAL_ROOM_} from '../constants';\nimport MeetingInfoRequest from '../meeting-info/request';\nimport ParameterError from '../common/errors/parameter';\n\nimport PersonalMeetingRoomRequest from './request';\n\n\n/**\n * @class PersonalMeetingRoom\n */\nexport default class PersonalMeetingRoom extends StatelessWebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n   *\n   * @param {Object} attrs\n   * @param {Object} options\n   */\n  constructor(attrs, options) {\n    super({}, options);\n    /**\n     * The pmr server object\n     * @instance\n     * @type {Object}\n     * @public\n     * @memberof PersonalMeetingRoom\n    */\n    this.pmr = null;\n    /**\n     * The pmr sip Uri\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof PersonalMeetingRoom\n    */\n    this.sipUri = null;\n    /**\n     * The pmr link\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof PersonalMeetingRoom\n    */\n    this.link = null;\n    /**\n     * The pmr server object\n     * @instance\n     * @type {Object}\n     * @public\n     * @memberof PersonalMeetingRoom\n    */\n    this.userId = null;\n    /**\n     * The pmr name\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof PersonalMeetingRoom\n    */\n    this.name = null;\n    /**\n     * The meeting info request server interface\n     * @instance\n     * @type {MeetingInfoRequest}\n     * @private\n     * @memberof PersonalMeetingRoom\n    */\n    this.meetingInfoRequest = new MeetingInfoRequest({}, options);\n    /**\n     * The pmr server request interface\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof PersonalMeetingRoom\n    */\n    this.personalMeetingRoomRequest = new PersonalMeetingRoomRequest({}, options);\n  }\n\n  /**\n   * claims a pmr and updates the cached PMR values\n   * @param {String} link\n   * @param {String} pin\n   * @param {Boolean} [preferred] defaults to true to set this claimed PMR as the preferred\n   * @returns {Promise}\n   * @public\n   * @memberof PersonalMeetingRoom\n   */\n  claim(link, pin, preferred = true) {\n    const options = {\n      userId: this.webex.internal.device.userId,\n      passcode: pin,\n      meetingAddress: link,\n      preferred\n    };\n\n    return this.personalMeetingRoomRequest.claimPmr(options).then((pmr) => {\n      if (pmr && pmr.body) {\n        this.set(pmr.body);\n      }\n      else {\n        return Promise.reject(new ParameterError('No PMR body provided. PMR values not updated.'));\n      }\n\n      return pmr.body;\n    });\n  }\n\n  /**\n   * @param {Object} body the response body from meeting info request\n   * @returns {undefined}\n   * @private\n   * @memberof PersonalMeetingRoom\n   */\n  set(body) {\n    this.pmr = body;\n    this.sipUri = body.sipMeetingUri;\n    this.meetingLink = body.webExMeetingLink || body.meetingLink;\n    this.userId = body.owner;\n    this.name = body.meetingName;\n    this.number = body.meetingNumber;\n  }\n\n  /**\n   * TODO: implement TTL for syncing and caching so to not request again and again\n   * @param {Object} options\n   * @returns {Promise}\n   * @public\n   * @memberof PersonalMeetingRoom\n   */\n  get() {\n    const options = {\n      type: _PERSONAL_ROOM_,\n      destination: this.webex.internal.device.userId\n    };\n\n    return this.meetingInfoRequest.fetchMeetingInfo(options).then((pmr) => {\n      if (pmr && pmr.body && pmr.body.isPmr) {\n        this.set(pmr.body);\n      }\n      else {\n        return Promise.reject(new TypeError('The PMR requested is NOT a PMR. PMR values not set.'));\n      }\n\n      return pmr.body;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}