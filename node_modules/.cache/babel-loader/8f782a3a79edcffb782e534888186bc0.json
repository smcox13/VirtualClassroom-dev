{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _bowser = require('bowser');\n\nvar _bowser2 = _interopRequireDefault(_bowser);\n\nvar _sdpTransform = require('sdp-transform');\n\nvar _sdpTransform2 = _interopRequireDefault(_sdpTransform);\n\nvar _metrics = require('../metrics');\n\nvar _metrics2 = _interopRequireDefault(_metrics);\n\nvar _loggerProxy = require('../common/logs/logger-proxy');\n\nvar _loggerProxy2 = _interopRequireDefault(_loggerProxy);\n\nvar _config = require('../common/config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _constants = require('../constants');\n\nvar _config3 = require('../metrics/config');\n\nvar _media = require('../common/errors/media');\n\nvar _media2 = _interopRequireDefault(_media);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @export\n * @public\n */\n// https://github.com/clux/sdp-transform\n\n/* eslint-disable */\n// We need to figure out how to pass a webex logger instance to these util files\n\n/* globals window, RTCSessionDescription */\n\n\nvar pc = {};\n/**\n * munges the bandwidth limit into the sdp \n * @param {String} sdpLines \n * @param {Number} index\n * @returns {String}\n */\n\nvar insertBandwidthLimit = function insertBandwidthLimit(sdpLines, index) {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert to sdp parser\n  var limit = void 0;\n\n  if (sdpLines[index].search(_constants.AUDIO) !== -1) {\n    limit = _config2.default.meetings.bandwidth.audio;\n  } else {\n    limit = _config2.default.meetings.bandwidth.video;\n  }\n\n  sdpLines.splice(index + 1, 0, _constants.SDP.B_LINE + ':' + limit);\n  return sdpLines;\n};\n/**\n * needed for calliope max-fs\n * @param {String} sdp \n * @returns {String}\n */\n\n\nvar setMaxFs = function setMaxFs(sdp) {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert with sdp parser, no munging\n  var replaceSdp = sdp;\n  replaceSdp = replaceSdp.replace(/(\\na=fmtp:(\\d+).*level-asymmetry-allowed=1.*)/gi, '$1;' + _constants.SDP.MAX_FS_8160);\n  return replaceSdp;\n};\n/**\n * checks that sdp has h264 codec in it\n * @param {String} sdp \n * @returns {boolean}\n */\n\n\nvar checkH264Support = function checkH264Support(sdp) {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert to sdp parser to read rtp.codec\n  var videoPresent = sdp.match(/\\nm=video.*/g);\n  var h264Present = sdp.match(/\\na=rtpmap:\\d+\\sH264.*/g);\n\n  if (videoPresent) {\n    return !!h264Present;\n  }\n\n  return true;\n};\n/**\n * validates the sdp, checks port, candidates, and ice info\n * @param {String} sdp\n * @returns {Boolean}\n */\n\n\nvar validateSdp = function validateSdp(sdp) {\n  var parsedSdp = _sdpTransform2.default.parse(sdp);\n\n  parsedSdp.media.forEach(function (mediaLine) {\n    if (mediaLine.candidates && mediaLine.candidates.length === 0) {\n      _loggerProxy2.default.logger.error('PeerConnectionManager->validateSdp#iceCandidate: Ice candadate never completed');\n\n      return false;\n    }\n\n    if (_constants.SDP.BAD_MEDIA_PORTS.includes(mediaLine.port)) {\n      _loggerProxy2.default.logger.error('PeerConnectionManager->validateSdp#iceCandidate: Found invalid port number for the ice candidate');\n\n      return false;\n    }\n\n    if (!mediaLine.icePwd || !mediaLine.iceUfrag) {\n      _loggerProxy2.default.logger.error('PeerConnectionManager->validateSdp#iceCandidate: ice ufrag and password not found');\n\n      return false;\n    }\n\n    return true;\n  });\n};\n/**\n * munges the bandwidth into the sdp\n * @param {String} sdp \n * @returns {String}\n */\n\n\nvar limitBandwidth = function limitBandwidth(sdp) {\n  // TODO convert to sdp parser\n  var offerSdp = sdp;\n  var sdpLines = offerSdp.split(_constants.SDP.CARRIAGE_RETURN);\n\n  for (var i = 0; i < sdpLines.length; i += 1) {\n    if (sdpLines[i].search(_constants.SDP.M_LINE) !== -1) {\n      sdpLines = insertBandwidthLimit(sdpLines, i);\n    }\n  }\n\n  offerSdp = sdpLines.join(_constants.SDP.CARRIAGE_RETURN);\n  return offerSdp;\n};\n/**\n * sets up a listener for ice fails mid meeting\n * @param {RTCPeerConnection} peerConnection\n * @param {Function} fn\n * @param {Function} name - the name for logging, on the transceiver\n * @returns {undefined}\n */\n\n\npc.iceFailListener = function (peerConnection, fn, name) {\n  if (!peerConnection) {\n    return;\n  }\n\n  peerConnection.oniceconnectionstatechange = function () {\n    switch (peerConnection.iceConnectionState) {\n      case _constants.ICE_STATE.FAILED:\n      case _constants.ICE_STATE.DISCONNECTED:\n        _loggerProxy2.default.logger.warn('PeerConnectionManager->oniceconnectionstatechange#' + name + ' Interactive Connectivity Establishment(ICE)' + peerConnection.iceConnectionState + ' at ' + new Date());\n\n        setTimeout(function () {\n          switch (peerConnection.iceConnectionState) {\n            case _constants.ICE_STATE.FAILED:\n            case _constants.ICE_STATE.DISCONNECTED:\n              // if ice is still failed after some time, do the reconnect\n              // else the browser resolves the ice failure on its own\n              fn();\n              break;\n\n            default:\n              break;\n          }\n        }, _constants.ICE_FAIL_TIMEOUT);\n        break;\n\n      default:\n        break;\n    }\n  };\n};\n/**\n * waits for failures and calls the reconnect function on failures\n * @param {RTCPeerConnection} peerConnection\n * @param {Function} [reconnectFn] - if not included, just prints a log\n * @returns {undefined}\n */\n\n\npc.detectFailures = function (peerConnection) {\n  var reconnectFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n    _loggerProxy2.default.logger.error('PeerConnectionManager->reconnectFn#Ice failed, no function to reconnect with.');\n  };\n  peerConnection.iceFailListener(peerConnection, reconnectFn, _constants.MEDIA_PEER_CONNECTION_NAME);\n};\n/**\n * makes sure the screen pc sdp has content:slides for server\n * @param {RTCPeerConnection} screenPC\n * @returns {RTCPeerConnection}\n */\n\n\npc.setContentSlides = function (screenPc) {\n  if (screenPc && screenPc.sdp) {\n    screenPc.sdp += '' + _constants.SDP.A_CONTENT_SLIDES + _constants.SDP.CARRIAGE_RETURN;\n  }\n\n  return screenPc;\n};\n/**\n * handles ice trickling and establishes ICE connection onto peer connection object\n * @param {Object} peerConnection\n * @returns {RTCPeerConnection}\n */\n\n\npc.iceCandidate = function (peerConnection) {\n  return new _promise2.default(function (resolve) {\n    // TODO: we dont need timeout as we can check the api state and validate.\n    var timeout = setTimeout(function () {\n      peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n      peerConnection.sdp = setMaxFs(peerConnection.sdp);\n      peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n\n      if (!validateSdp(peerConnection.sdp)) {\n        setTimeout(function () {\n          resolve(peerConnection);\n        }, _constants.RETRY_TIMEOUT);\n      } else {\n        resolve(peerConnection);\n      }\n    }, _constants.ICE_TIMEOUT);\n\n    peerConnection.onicecandidate = function (evt) {\n      if (!evt.candidate && !peerConnection.sdp) {\n        peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n        peerConnection.sdp = setMaxFs(peerConnection.sdp);\n        peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n\n        if (evt.candidate === null) {\n          validateSdp(peerConnection.sdp);\n          clearTimeout(timeout);\n          resolve(peerConnection);\n        }\n      }\n    };\n  });\n};\n/**\n * swapping tracks\n * @param {Object} peerConnection\n * @param {Object} track\n * @returns {undefined}\n */\n\n\npc.replaceTrack = function (peerConnection, track) {\n  try {\n    var senders = peerConnection.getSenders();\n\n    if (senders.length > 0) {\n      senders.forEach(function (sender) {\n        if (sender.track && sender.track.kind === track.kind) {\n          sender.replaceTrack(track);\n        }\n      });\n    }\n  } catch (err) {\n    _loggerProxy2.default.logger.error('PeerConnectionManager->replaceTrack#Error replacing track, ' + err);\n  }\n};\n/**\n * adding streams to peerConnection\n * @param {Object} peerConnection\n * @param {Object} stream\n * @returns {undefined}\n */\n\n\npc.addStream = function (peerConnection, stream) {\n  try {\n    if (stream && !_bowser2.default.msedge) {\n      var tracksPresent = peerConnection.getSenders && peerConnection.getSenders().find(function (sender) {\n        return sender.track != null;\n      });\n\n      if (tracksPresent) {\n        stream.getTracks().forEach(function (track) {\n          pc.replaceTrack(peerConnection, track);\n        });\n        return;\n      }\n\n      stream.getTracks().forEach(function (track) {\n        peerConnection.addTrack(track, stream);\n      }); // // TODO : may come back disable addTracks for chrome they are moving back to addStream\n      // // https://bugs.chromium.org/p/chromium/issues/detail?id=764414\n      // // https://bugs.chromium.org/p/chromium/issues/detail?id=738918#c7\n      //   peerConnection.addStream(stream);\n    } else if (_bowser2.default.msedge) {\n      peerConnection.addStream(stream);\n    } else {}\n  } catch (err) {\n    _loggerProxy2.default.logger.error('peer-connection-manager->addStream#Error adding stream, error: ' + _config3.error);\n  }\n};\n/**\n * setting the remote description\n * @param {Object} peerConnection\n * @param {String} typeStr\n * @param {String} remoteSdp\n * @param {String} meetingId\n * @returns {undefined}\n */\n\n\npc.setRemoteSessionDetails = function (peerConnection, typeStr, remoteSdp, meetingId) {\n  _loggerProxy2.default.logger.log('PeerConnectionManager->setRemoteSessionDetails#Setting the remote description type: ' + typeStr + 'State: ' + peerConnection.signalingState);\n\n  var sdp = remoteSdp;\n  sdp = sdp.replace(/\\na=extmap.*/g, ''); // making sure that the remoteDescription is only set when there is a answer for offer\n  // or there is a offer from the server\n\n  if (!sdp) {\n    _metrics2.default.postEvent({\n      event: _config3.eventType.REMOTE_SDP_RECEIVED,\n      meetingId: meetingId,\n      data: {\n        canProceed: false,\n        errors: [_metrics2.default.generateErrorPayload(2001, true, _config3.error.name.MEDIA_ENGINE, 'missing remoteSdp')]\n      }\n    });\n  }\n\n  if (peerConnection.signalingState === _constants.SDP.HAVE_LOCAL_OFFER || peerConnection.signalingState === _constants.SDP.STABLE && typeStr === _constants.SDP.OFFER) {\n    return peerConnection.setRemoteDescription(new window.RTCSessionDescription({\n      type: typeStr,\n      sdp: sdp\n    })).then(function () {\n      return _metrics2.default.postEvent({\n        event: _config3.eventType.REMOTE_SDP_RECEIVED,\n        meetingId: meetingId\n      });\n    }).catch(function (error) {\n      return _metrics2.default.postEvent({\n        event: _config3.eventType.REMOTE_SDP_RECEIVED,\n        meetingId: meetingId,\n        data: {\n          canProceed: false,\n          errors: [_metrics2.default.generateErrorPayload(2001, true, error.name.MEDIA_ENGINE, 'missing remoteSdp')]\n        }\n      });\n    });\n  }\n\n  return _promise2.default.reject(new _media2.default('PeerConnection in wrong state'));\n};\n/**\n * create offer with a valid paramater\n * @param {Object} params\n * @param {Object} meetingId\n * @returns {RTCPeerConnection}\n */\n\n\npc.createOffer = function (peerConnection, meetingId) {\n  _loggerProxy2.default.logger.log('PeerConnectionManager->createOffer#createOffer: creating a new offer');\n\n  try {\n    return peerConnection.createOffer().then(function (description) {\n      // bug https://bugs.chromium.org/p/chromium/issues/detail?id=1020642\n      // chrome currently generates RTX line irrespective of weither the server side supports it \n      // we are removing apt as well because its associated with rtx line\n      description.sdp = description.sdp.replace(/\\r\\na=rtpmap:\\d+ rtx\\/\\d+/g, '');\n      description.sdp = description.sdp.replace(/\\r\\na=fmtp:\\d+ apt=\\d+/g, '');\n      peerConnection.setLocalDescription(description);\n    }).then(function () {\n      return pc.iceCandidate(peerConnection);\n    }).then(function () {\n      peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n      peerConnection.sdp = setMaxFs(peerConnection.sdp);\n\n      if (!checkH264Support(peerConnection.sdp)) {\n        throw new _media2.default('openH264 is downloading please Wait. Upload logs if not working on second try');\n      }\n\n      peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n      pc.setContentSlides(peerConnection);\n\n      _metrics2.default.postEvent({\n        event: _config3.eventType.LOCAL_SDP_GENERATED,\n        meetingId: meetingId\n      });\n\n      return peerConnection;\n    }).catch(function (err) {\n      _metrics2.default.postEvent({\n        event: _config3.eventType.LOCAL_SDP_GENERATED,\n        meetingId: meetingId,\n        data: {\n          canProceed: false,\n          errors: [_metrics2.default.generateErrorPayload(2001, true, _config3.error.name.MEDIA_ENGINE)]\n        }\n      });\n\n      pc.close(peerConnection);\n      throw err;\n    });\n  } catch (err) {\n    throw err;\n  }\n};\n/**\n * rollBack local description in peerconnection\n * @param {Object} peerConnection\n * @returns {RTCPeerConnection}\n */\n\n\npc.rollBackLocalDescription = function (peerConnection) {\n  return peerConnection.setLocalDescription(new RTCSessionDescription({\n    type: _constants.SDP.ROLLBACK\n  })).then(function () {\n    return peerConnection;\n  }).catch(function (err) {\n    return _promise2.default.error(err);\n  });\n};\n/**\n * @param {Object} params {\n *  offerToReceiveAudio: {Boolean} sdp constraints\n *  offerToReceiveVideo: {Boolean} sdp constraints\n *  offerSdp: {sdp}\n *  stream: {pcStream}\n * }\n * @param {Object} meetingId meetingId for sending metrics \n * @returns {Array} [MediaSDP, ScreenSDP]\n */\n\n\npc.updatePeerConnection = function (params, meetingId) {\n  _loggerProxy2.default.logger.log('PeerConnectionManager->updatePeerConnection#updating the peerConnection with params: ' + params);\n\n  var peerConnection = params.peerConnection,\n      offerSdp = params.offerSdp;\n  return pc.createAnswer({\n    peerConnection: peerConnection,\n    offerSdp: offerSdp[0]\n  }, meetingId).then(function (peerconnection) {\n    // The content slides should also be set when we are sending inactive \n    pc.setContentSlides(peerconnection);\n    return _promise2.default.resolve([peerconnection.sdp]);\n  });\n};\n/**\n *  @param {Object} params {\n *  peerConnection: {Object} peerConnection\n *  sdpConstraints: {Object} sdp constraints\n * }\n * @param {Object} meetingId meetingId for metrics\n * @returns {RTCPeerConnection} peerConnection\n */\n\n\npc.createAnswer = function (params, meetingId) {\n  var peerConnection = params.peerConnection; // TODO: Some times to many mercury event comes at the same time\n  // Need to maintain state of peerconnection\n\n  if (peerConnection.signalingState === _constants.SDP.HAVE_REMOTE_OFFER) {\n    return _promise2.default.resolve(peerConnection);\n  }\n\n  return pc.setRemoteSessionDetails(peerConnection, _constants.OFFER, params.offerSdp, meetingId).then(function () {\n    return peerConnection.createAnswer(params.sdpConstraints);\n  }).then(function (answer) {\n    return (//   if (edonusHack()) {\n      //     answer.sdp = answer.sdp.replace(/recvonly.*/g, 'sendrecv');\n      //   }\n      peerConnection.setLocalDescription(answer)\n    );\n  }).then(function () {\n    return pc.iceCandidate(peerConnection);\n  }).then(function () {\n    peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n    peerConnection.sdp = setMaxFs(peerConnection.sdp);\n\n    if (!checkH264Support(peerConnection.sdp)) {\n      throw new _media2.default('openH264 is downloading please Wait. Upload logs if not working on second try');\n    }\n\n    peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n    return peerConnection;\n  }).catch(function (err) {\n    _loggerProxy2.default.logger.error('peer-connection-manager->setRemoteSessionDetails#Error creating remote session, error: ' + _config3.error);\n  });\n};\n/**\n * shut down the peer connection\n * @param {Object} peerConnection\n * @returns {undefined}\n */\n\n\npc.close = function (peerConnection) {\n  // peerConnection.close() fails on firefox on network changes and gives a Dom exception\n  // To avoid this we have added a try catch block.\n  // Please refer to https://bugzilla.mozilla.org/show_bug.cgi?id=1274407 for more information\n  if (peerConnection && peerConnection.connectionState === _constants.PEER_CONNECTION_STATE.CLOSED) {\n    return _promise2.default.resolve();\n  }\n\n  _loggerProxy2.default.logger.log('PeerConnectionManager->close#pc: close() -> closing the mediaPeerConnection');\n\n  return _promise2.default.resolve().then(function () {\n    if (peerConnection && peerConnection.close) {\n      peerConnection.close();\n    }\n  });\n};\n\nexports.default = pc;","map":{"version":3,"sources":["index.js"],"names":["pc","insertBandwidthLimit","limit","sdpLines","AUDIO","StaticConfig","index","SDP","setMaxFs","replaceSdp","checkH264Support","videoPresent","sdp","h264Present","validateSdp","parsedSdp","sdpTransform","mediaLine","LoggerProxy","limitBandwidth","offerSdp","i","peerConnection","ICE_STATE","setTimeout","fn","ICE_FAIL_TIMEOUT","reconnectFn","MEDIA_PEER_CONNECTION_NAME","screenPc","timeout","resolve","RETRY_TIMEOUT","ICE_TIMEOUT","evt","clearTimeout","senders","sender","track","stream","bowser","tracksPresent","error","Metrics","event","eventType","meetingId","data","canProceed","errors","typeStr","window","type","MediaError","description","params","peerconnection","OFFER","PEER_CONNECTION_STATE"],"mappings":"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","sourcesContent":["/* eslint-disable */\n// We need to figure out how to pass a webex logger instance to these util files\n\n/* globals window, RTCSessionDescription */\n\nimport bowser from 'bowser';\nimport sdpTransform from 'sdp-transform'; // https://github.com/clux/sdp-transform\n\nimport Metrics from '../metrics';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport StaticConfig from '../common/config';\nimport {\n  RETRY_TIMEOUT,\n  ICE_TIMEOUT,\n  AUDIO,\n  SDP,\n  MEDIA_PEER_CONNECTION_NAME,\n  ICE_STATE,\n  ICE_FAIL_TIMEOUT,\n  PEER_CONNECTION_STATE,\n  OFFER\n} from '../constants';\n\nimport {error, eventType} from '../metrics/config'\n\nimport MediaError from '../common/errors/media';\n\n/**\n * @export\n * @public\n */\nconst pc = {};\n\n/**\n * munges the bandwidth limit into the sdp \n * @param {String} sdpLines \n * @param {Number} index\n * @returns {String}\n */\nconst insertBandwidthLimit = (sdpLines, index) => {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert to sdp parser\n  let limit;\n  if (sdpLines[index].search(AUDIO) !== -1) {\n    limit = StaticConfig.meetings.bandwidth.audio;\n  } else {\n    limit = StaticConfig.meetings.bandwidth.video;\n  }\n  sdpLines.splice(index + 1, 0, `${SDP.B_LINE}:${limit}`);\n  return sdpLines;\n};\n\n/**\n * needed for calliope max-fs\n * @param {String} sdp \n * @returns {String}\n */\nconst setMaxFs = (sdp) => {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert with sdp parser, no munging\n  let replaceSdp = sdp;\n  replaceSdp = replaceSdp.replace(/(\\na=fmtp:(\\d+).*level-asymmetry-allowed=1.*)/gi, `$1;${SDP.MAX_FS_8160}`)\n  return replaceSdp;\n};\n\n/**\n * checks that sdp has h264 codec in it\n * @param {String} sdp \n * @returns {boolean}\n */\nconst checkH264Support = (sdp) => {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert to sdp parser to read rtp.codec\n  const videoPresent = sdp.match(/\\nm=video.*/g);\n  const h264Present = sdp.match(/\\na=rtpmap:\\d+\\sH264.*/g);\n  if (videoPresent) {\n    return !!h264Present;\n  }\n  return true;\n};\n\n/**\n * validates the sdp, checks port, candidates, and ice info\n * @param {String} sdp\n * @returns {Boolean}\n */\nconst validateSdp = (sdp) => {\n  const parsedSdp = sdpTransform.parse(sdp);\n  parsedSdp.media.forEach((mediaLine) => {\n    if (mediaLine.candidates && mediaLine.candidates.length === 0) {\n      LoggerProxy.logger.error('PeerConnectionManager->validateSdp#iceCandidate: Ice candadate never completed');\n      return false;\n    }\n    if (SDP.BAD_MEDIA_PORTS.includes(mediaLine.port)) {\n      LoggerProxy.logger.error('PeerConnectionManager->validateSdp#iceCandidate: Found invalid port number for the ice candidate');\n      return false;\n    }\n    if (!mediaLine.icePwd || !mediaLine.iceUfrag) {\n      LoggerProxy.logger.error('PeerConnectionManager->validateSdp#iceCandidate: ice ufrag and password not found');\n      return false;\n    }\n    return true;\n  });\n};\n\n/**\n * munges the bandwidth into the sdp\n * @param {String} sdp \n * @returns {String}\n */\nconst limitBandwidth = (sdp) => {\n  // TODO convert to sdp parser\n  let offerSdp = sdp;\n  let sdpLines = offerSdp.split(SDP.CARRIAGE_RETURN);\n\n  for (let i = 0; i < sdpLines.length; i += 1) {\n    if (sdpLines[i].search(SDP.M_LINE) !== -1) {\n      sdpLines = insertBandwidthLimit(sdpLines, i);\n    }\n  }\n  offerSdp = sdpLines.join(SDP.CARRIAGE_RETURN);\n  return offerSdp;\n};\n\n/**\n * sets up a listener for ice fails mid meeting\n * @param {RTCPeerConnection} peerConnection\n * @param {Function} fn\n * @param {Function} name - the name for logging, on the transceiver\n * @returns {undefined}\n */\npc.iceFailListener = (peerConnection, fn, name) => {\n  if (!peerConnection) {\n    return;\n  }\n  peerConnection.oniceconnectionstatechange = () => {\n    switch (peerConnection.iceConnectionState) {\n      case ICE_STATE.FAILED:\n      case ICE_STATE.DISCONNECTED:\n        LoggerProxy.logger.warn(`PeerConnectionManager->oniceconnectionstatechange#${name} Interactive Connectivity Establishment(ICE)${peerConnection.iceConnectionState} at ${new Date()}`);\n        setTimeout(() => {\n          switch (peerConnection.iceConnectionState) {\n            case ICE_STATE.FAILED:\n            case ICE_STATE.DISCONNECTED:\n              // if ice is still failed after some time, do the reconnect\n              // else the browser resolves the ice failure on its own\n              fn();\n              break;\n            default:\n            break;\n          }\n        }, ICE_FAIL_TIMEOUT);\n        break;\n      default:\n        break;\n    }\n  };\n};\n\n/**\n * waits for failures and calls the reconnect function on failures\n * @param {RTCPeerConnection} peerConnection\n * @param {Function} [reconnectFn] - if not included, just prints a log\n * @returns {undefined}\n */\npc.detectFailures = (peerConnection, reconnectFn = () => {LoggerProxy.logger.error('PeerConnectionManager->reconnectFn#Ice failed, no function to reconnect with.')}) => {\n  peerConnection.iceFailListener(peerConnection, reconnectFn, MEDIA_PEER_CONNECTION_NAME);\n};\n\n/**\n * makes sure the screen pc sdp has content:slides for server\n * @param {RTCPeerConnection} screenPC\n * @returns {RTCPeerConnection}\n */\npc.setContentSlides = (screenPc) => {\n  if (screenPc && screenPc.sdp) {\n    screenPc.sdp += `${SDP.A_CONTENT_SLIDES}${SDP.CARRIAGE_RETURN}`;\n  }\n  return screenPc;\n};\n\n/**\n * handles ice trickling and establishes ICE connection onto peer connection object\n * @param {Object} peerConnection\n * @returns {RTCPeerConnection}\n */\npc.iceCandidate = (peerConnection) =>\n  new Promise((resolve) => {\n    // TODO: we dont need timeout as we can check the api state and validate.\n    const timeout = setTimeout(() => {\n      peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n      peerConnection.sdp = setMaxFs(peerConnection.sdp);\n      peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n\n      if (!validateSdp(peerConnection.sdp)) {\n        setTimeout(() => {\n          resolve(peerConnection);\n        }, RETRY_TIMEOUT);\n      } else {\n        resolve(peerConnection);\n      }\n    }, ICE_TIMEOUT);\n\n    peerConnection.onicecandidate = (evt) => {\n      if (!evt.candidate && !peerConnection.sdp) {\n        peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n        peerConnection.sdp = setMaxFs(peerConnection.sdp);\n        peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n\n        if (evt.candidate === null) {\n          validateSdp(peerConnection.sdp);\n          clearTimeout(timeout);\n          resolve(peerConnection);\n        }\n      }\n    };\n  });\n\n/**\n * swapping tracks\n * @param {Object} peerConnection\n * @param {Object} track\n * @returns {undefined}\n */\npc.replaceTrack = (peerConnection, track) => {\n  try {\n    const senders = peerConnection.getSenders();\n    if (senders.length > 0) {\n      senders.forEach((sender) => {\n        if (sender.track && sender.track.kind === track.kind) {\n          sender.replaceTrack(track);\n        }\n      });\n    }\n  } catch (err) {\n    LoggerProxy.logger.error(`PeerConnectionManager->replaceTrack#Error replacing track, ${err}`);\n  }\n};\n\n/**\n * adding streams to peerConnection\n * @param {Object} peerConnection\n * @param {Object} stream\n * @returns {undefined}\n */\npc.addStream = (peerConnection, stream) => {\n  try {\n    if (stream && !bowser.msedge) {\n      const tracksPresent = peerConnection.getSenders && peerConnection.getSenders().find((sender) => sender.track != null);\n      if (tracksPresent) {\n        stream.getTracks().forEach((track) => {\n          pc.replaceTrack(peerConnection, track);\n        });\n        return;\n      }\n      stream.getTracks().forEach((track) => {\n        peerConnection.addTrack(track, stream);\n      });\n      // // TODO : may come back disable addTracks for chrome they are moving back to addStream\n      // // https://bugs.chromium.org/p/chromium/issues/detail?id=764414\n      // // https://bugs.chromium.org/p/chromium/issues/detail?id=738918#c7\n      //   peerConnection.addStream(stream);\n    } else if (bowser.msedge) {\n      peerConnection.addStream(stream);\n    } else {\n    }\n  } catch (err) {\n    LoggerProxy.logger.error(`peer-connection-manager->addStream#Error adding stream, error: ${error}`);\n  }\n};\n\n/**\n * setting the remote description\n * @param {Object} peerConnection\n * @param {String} typeStr\n * @param {String} remoteSdp\n * @param {String} meetingId\n * @returns {undefined}\n */\npc.setRemoteSessionDetails = (peerConnection, typeStr, remoteSdp, meetingId) => {\n  LoggerProxy.logger.log(`PeerConnectionManager->setRemoteSessionDetails#Setting the remote description type: ${typeStr}State: ${peerConnection.signalingState}`);\n  let sdp = remoteSdp;\n\n  sdp = sdp.replace(/\\na=extmap.*/g, '');\n\n  // making sure that the remoteDescription is only set when there is a answer for offer\n  // or there is a offer from the server\n\n  if(!sdp) {\n    Metrics.postEvent({\n      event: eventType.REMOTE_SDP_RECEIVED,\n      meetingId: meetingId, data: {\n      canProceed: false,\n      errors: [Metrics.generateErrorPayload(2001, true,\n        error.name.MEDIA_ENGINE, 'missing remoteSdp')]\n    }})\n  }\n  if (peerConnection.signalingState === SDP.HAVE_LOCAL_OFFER || (peerConnection.signalingState === SDP.STABLE && typeStr === SDP.OFFER)) {\n    return peerConnection.setRemoteDescription(\n        new window.RTCSessionDescription({\n          type: typeStr,\n          sdp\n        })\n      )\n      .then(() => Metrics.postEvent({\n        event: eventType.REMOTE_SDP_RECEIVED,\n        meetingId: meetingId}))\n      .catch((error) => Metrics.postEvent({\n        event: eventType.REMOTE_SDP_RECEIVED,\n        meetingId: meetingId,\n        data: {\n          canProceed: false,\n          errors: [Metrics.generateErrorPayload(2001, true,\n          error.name.MEDIA_ENGINE, 'missing remoteSdp')]\n      }}))\n  }\n\n    return Promise.reject(new MediaError('PeerConnection in wrong state'));\n};\n\n/**\n * create offer with a valid paramater\n * @param {Object} params\n * @param {Object} meetingId\n * @returns {RTCPeerConnection}\n */\npc.createOffer = (peerConnection, meetingId) => {\n  LoggerProxy.logger.log('PeerConnectionManager->createOffer#createOffer: creating a new offer');\n\n  try {\n    return peerConnection\n      .createOffer()\n      .then((description) => {\n        // bug https://bugs.chromium.org/p/chromium/issues/detail?id=1020642\n        // chrome currently generates RTX line irrespective of weither the server side supports it \n        // we are removing apt as well because its associated with rtx line\n        \n        description.sdp = description.sdp.replace(/\\r\\na=rtpmap:\\d+ rtx\\/\\d+/g, '');\n        description.sdp = description.sdp.replace(/\\r\\na=fmtp:\\d+ apt=\\d+/g, '');\n        peerConnection.setLocalDescription(description)\n      })\n      .then(() => pc.iceCandidate(peerConnection))\n      .then(() => {\n        peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n        peerConnection.sdp = setMaxFs(peerConnection.sdp);\n        if (!checkH264Support(peerConnection.sdp)) {\n          throw new MediaError('openH264 is downloading please Wait. Upload logs if not working on second try');\n        }\n        peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n        pc.setContentSlides(peerConnection);\n\n        Metrics.postEvent({\n          event: eventType.LOCAL_SDP_GENERATED,\n          meetingId: meetingId})\n        return peerConnection;\n      })\n      .catch((err) => {\n        Metrics.postEvent({\n          event: eventType.LOCAL_SDP_GENERATED,\n          meetingId: meetingId,\n          data: {\n            canProceed: false,\n             errors: [\n               Metrics.generateErrorPayload(2001, true,\n              error.name.MEDIA_ENGINE)]\n        }})\n        pc.close(peerConnection);\n        throw err;\n      });\n  } catch (err) {\n    throw err;\n  }\n};\n\n/**\n * rollBack local description in peerconnection\n * @param {Object} peerConnection\n * @returns {RTCPeerConnection}\n */\npc.rollBackLocalDescription = (peerConnection) => {\n  return peerConnection\n    .setLocalDescription(new RTCSessionDescription({type: SDP.ROLLBACK}))\n    .then(() => peerConnection)\n    .catch((err) => {\n      return Promise.error(err);\n    });\n};\n\n/**\n * @param {Object} params {\n *  offerToReceiveAudio: {Boolean} sdp constraints\n *  offerToReceiveVideo: {Boolean} sdp constraints\n *  offerSdp: {sdp}\n *  stream: {pcStream}\n * }\n * @param {Object} meetingId meetingId for sending metrics \n * @returns {Array} [MediaSDP, ScreenSDP]\n */\npc.updatePeerConnection = (params, meetingId) => {\n  LoggerProxy.logger.log(`PeerConnectionManager->updatePeerConnection#updating the peerConnection with params: ${params}`);\n\n  const {peerConnection, offerSdp} = params;\n\n  return pc.createAnswer({\n    peerConnection,\n      offerSdp: offerSdp[0]\n    }, meetingId).then((peerconnection) => {\n      // The content slides should also be set when we are sending inactive \n      pc.setContentSlides(peerconnection);\n    return Promise.resolve([peerconnection.sdp]);\n  });\n};\n\n/**\n *  @param {Object} params {\n *  peerConnection: {Object} peerConnection\n *  sdpConstraints: {Object} sdp constraints\n * }\n * @param {Object} meetingId meetingId for metrics\n * @returns {RTCPeerConnection} peerConnection\n */\npc.createAnswer = (params, meetingId) => {\n  const {peerConnection} = params;\n\n  // TODO: Some times to many mercury event comes at the same time\n  // Need to maintain state of peerconnection\n  if (peerConnection.signalingState === SDP.HAVE_REMOTE_OFFER) {\n    return Promise.resolve(peerConnection);\n  }\n\n  return pc.setRemoteSessionDetails(peerConnection, OFFER, params.offerSdp, meetingId)\n    .then(() => peerConnection.createAnswer(params.sdpConstraints))\n    .then((answer) =>\n      //   if (edonusHack()) {\n      //     answer.sdp = answer.sdp.replace(/recvonly.*/g, 'sendrecv');\n      //   }\n      peerConnection.setLocalDescription(answer)\n    )\n    .then(() => pc.iceCandidate(peerConnection))\n    .then(() => {\n      peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n      peerConnection.sdp = setMaxFs(peerConnection.sdp);\n      if (!checkH264Support(peerConnection.sdp)) {\n        throw new MediaError('openH264 is downloading please Wait. Upload logs if not working on second try');\n      }\n\n      peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n\n      return peerConnection;\n    })\n    .catch((err) => {\n      LoggerProxy.logger.error(`peer-connection-manager->setRemoteSessionDetails#Error creating remote session, error: ${error}`);\n    });\n};\n\n/**\n * shut down the peer connection\n * @param {Object} peerConnection\n * @returns {undefined}\n */\npc.close = (peerConnection) => {\n  // peerConnection.close() fails on firefox on network changes and gives a Dom exception\n  // To avoid this we have added a try catch block.\n  // Please refer to https://bugzilla.mozilla.org/show_bug.cgi?id=1274407 for more information\n\n  if(peerConnection && peerConnection.connectionState === PEER_CONNECTION_STATE.CLOSED) {\n    return Promise.resolve();\n  }\n  LoggerProxy.logger.log('PeerConnectionManager->close#pc: close() -> closing the mediaPeerConnection');\n  return Promise.resolve()\n    .then(() => {\n      if (peerConnection && peerConnection.close) {\n        peerConnection.close();\n      }\n    });\n};\n\nexport default pc;\n"]},"metadata":{},"sourceType":"script"}