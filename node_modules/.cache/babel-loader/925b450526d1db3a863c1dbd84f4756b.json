{"ast":null,"code":"/*!\n * jwk/rsa.js - RSA Key Representation\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar ecutil = require(\"../algorithms/ec-util.js\"),\n    forge = require(\"../deps/forge\"),\n    depsecc = require(\"../deps/ecc\");\n\nvar JWK = {\n  BaseKey: require(\"./basekey.js\"),\n  helpers: require(\"./helpers.js\")\n};\nvar SIG_ALGS = [\"ES256\", \"ES384\", \"ES512\"];\nvar WRAP_ALGS = [\"ECDH-ES\", \"ECDH-ES+A128KW\", \"ECDH-ES+A192KW\", \"ECDH-ES+A256KW\"];\nvar EC_OID = \"1.2.840.10045.2.1\";\n\nfunction oidToCurveName(oid) {\n  switch (oid) {\n    case \"1.2.840.10045.3.1.7\":\n      return \"P-256\";\n\n    case \"1.3.132.0.34\":\n      return \"P-384\";\n\n    case \"1.3.132.0.35\":\n      return \"P-521\";\n\n    default:\n      return null;\n  }\n}\n\nfunction curveNameToOid(crv) {\n  switch (crv) {\n    case \"P-256\":\n      return \"1.2.840.10045.3.1.7\";\n\n    case \"P-384\":\n      return \"1.3.132.0.34\";\n\n    case \"P-521\":\n      return \"1.3.132.0.35\";\n\n    default:\n      return null;\n  }\n}\n\nvar JWKEcCfg = {\n  publicKey: function (props) {\n    var fields = JWK.helpers.COMMON_PROPS.concat([{\n      name: \"crv\",\n      type: \"string\"\n    }, {\n      name: \"x\",\n      type: \"binary\"\n    }, {\n      name: \"y\",\n      type: \"binary\"\n    }]);\n    var pk = JWK.helpers.unpackProps(props, fields);\n\n    if (pk && pk.crv && pk.x && pk.y) {\n      pk.length = ecutil.curveSize(pk.crv);\n    } else {\n      delete pk.crv;\n      delete pk.x;\n      delete pk.y;\n    }\n\n    return pk;\n  },\n  privateKey: function (props) {\n    var fields = JWK.helpers.COMMON_PROPS.concat([{\n      name: \"crv\",\n      type: \"string\"\n    }, {\n      name: \"x\",\n      type: \"binary\"\n    }, {\n      name: \"y\",\n      type: \"binary\"\n    }, {\n      name: \"d\",\n      type: \"binary\"\n    }]);\n    var pk = JWK.helpers.unpackProps(props, fields);\n\n    if (pk && pk.crv && pk.x && pk.y && pk.d) {\n      pk.length = ecutil.curveSize(pk.crv);\n    } else {\n      pk = undefined;\n    }\n\n    return pk;\n  },\n  thumbprint: function (json) {\n    if (json.public) {\n      json = json.public;\n    }\n\n    var fields = {\n      crv: json.crv,\n      kty: \"EC\",\n      x: json.x,\n      y: json.y\n    };\n    return fields;\n  },\n  algorithms: function (keys, mode) {\n    var len = keys.public && keys.public.length || keys.private && keys.private.length || 0; // NOTE: 521 is the actual, but 512 is the expected\n\n    if (len === 521) {\n      len = 512;\n    }\n\n    switch (mode) {\n      case \"encrypt\":\n      case \"decrypt\":\n        return [];\n\n      case \"wrap\":\n        return keys.public && WRAP_ALGS || [];\n\n      case \"unwrap\":\n        return keys.private && WRAP_ALGS || [];\n\n      case \"sign\":\n        if (!keys.private) {\n          return [];\n        }\n\n        return SIG_ALGS.filter(function (a) {\n          return a === \"ES\" + len;\n        });\n\n      case \"verify\":\n        if (!keys.public) {\n          return [];\n        }\n\n        return SIG_ALGS.filter(function (a) {\n          return a === \"ES\" + len;\n        });\n    }\n  },\n  encryptKey: function (alg, keys) {\n    return keys.public;\n  },\n  decryptKey: function (alg, keys) {\n    return keys.private;\n  },\n  wrapKey: function (alg, keys) {\n    return keys.public;\n  },\n  unwrapKey: function (alg, keys) {\n    return keys.private;\n  },\n  signKey: function (alg, keys) {\n    return keys.private;\n  },\n  verifyKey: function (alg, keys) {\n    return keys.public;\n  },\n  convertToPEM: function (key, isPrivate) {\n    // curveName to OID\n    var oid = key.crv;\n    oid = curveNameToOid(oid);\n    oid = forge.asn1.oidToDer(oid); // key as bytes\n\n    var type, pub, asn1;\n\n    if (isPrivate) {\n      type = \"EC PRIVATE KEY\";\n      pub = Buffer.concat([new Buffer([0x00, 0x04]), key.x, key.y]).toString(\"binary\");\n      key = key.d.toString(\"binary\");\n      asn1 = forge.asn1.create(forge.asn1.Class.UNIVERSAL, forge.asn1.Type.SEQUENCE, true, [forge.asn1.create(forge.asn1.Class.UNIVERSAL, forge.asn1.Type.INTEGER, false, \"\\u0001\"), forge.asn1.create(forge.asn1.Class.UNIVERSAL, forge.asn1.Type.OCTETSTRING, false, key), forge.asn1.create(forge.asn1.Class.CONTEXT_SPECIFIC, 0, true, [forge.asn1.create(forge.asn1.Class.UNIVERSAL, forge.asn1.Type.OID, false, oid.bytes())]), forge.asn1.create(forge.asn1.Class.CONTEXT_SPECIFIC, 1, true, [forge.asn1.create(forge.asn1.Class.UNIVERSAL, forge.asn1.Type.BITSTRING, false, pub)])]);\n    } else {\n      type = \"PUBLIC KEY\";\n      key = Buffer.concat([new Buffer([0x00, 0x04]), key.x, key.y]).toString(\"binary\");\n      asn1 = forge.asn1.create(forge.asn1.Class.UNIVERSAL, forge.asn1.Type.SEQUENCE, true, [forge.asn1.create(forge.asn1.Class.UNIVERSAL, forge.asn1.Type.SEQUENCE, true, [forge.asn1.create(forge.asn1.Class.UNIVERSAL, forge.asn1.Type.OID, false, forge.asn1.oidToDer(EC_OID).bytes()), forge.asn1.create(forge.asn1.Class.UNIVERSAL, forge.asn1.Type.OID, false, oid.bytes())]), forge.asn1.create(forge.asn1.Class.UNIVERSAL, forge.asn1.Type.BITSTRING, false, key)]);\n    }\n\n    asn1 = forge.asn1.toDer(asn1).bytes();\n    var pem = forge.pem.encode({\n      type: type,\n      body: asn1\n    });\n    return pem;\n  }\n}; // Inspired by digitalbaazar/node-forge/js/rsa.js\n\nvar validators = {\n  oid: EC_OID,\n  privateKey: {\n    // ECPrivateKey\n    name: \"ECPrivateKey\",\n    tagClass: forge.asn1.Class.UNIVERSAL,\n    type: forge.asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      // EC version\n      name: \"ECPrivateKey.version\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.INTEGER,\n      constructed: false\n    }, {\n      // private value (d)\n      name: \"ECPrivateKey.private\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.OCTETSTRING,\n      constructed: false,\n      capture: \"d\"\n    }, {\n      // EC parameters\n      tagClass: forge.asn1.Class.CONTEXT_SPECIFIC,\n      name: \"ECPrivateKey.parameters\",\n      constructed: true,\n      value: [{\n        // namedCurve (crv)\n        name: \"ECPrivateKey.namedCurve\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.OID,\n        constructed: false,\n        capture: \"crv\"\n      }]\n    }, {\n      // publicKey\n      name: \"ECPrivateKey.publicKey\",\n      tagClass: forge.asn1.Class.CONTEXT_SPECIFIC,\n      constructed: true,\n      value: [{\n        name: \"ECPrivateKey.point\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.BITSTRING,\n        constructed: false,\n        capture: \"point\"\n      }]\n    }]\n  },\n  embeddedPrivateKey: {\n    // ECPrivateKey\n    name: \"ECPrivateKey\",\n    tagClass: forge.asn1.Class.UNIVERSAL,\n    type: forge.asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      // EC version\n      name: \"ECPrivateKey.version\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.INTEGER,\n      constructed: false\n    }, {\n      // private value (d)\n      name: \"ECPrivateKey.private\",\n      tagClass: forge.asn1.Class.UNIVERSAL,\n      type: forge.asn1.Type.OCTETSTRING,\n      constructed: false,\n      capture: \"d\"\n    }, {\n      // publicKey\n      name: \"ECPrivateKey.publicKey\",\n      tagClass: forge.asn1.Class.CONTEXT_SPECIFIC,\n      constructed: true,\n      value: [{\n        name: \"ECPrivateKey.point\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.BITSTRING,\n        constructed: false,\n        capture: \"point\"\n      }]\n    }]\n  }\n};\nvar JWKEcFactory = {\n  kty: \"EC\",\n  validators: validators,\n  prepare: function (props) {\n    // TODO: validate key properties\n    var cfg = JWKEcCfg;\n    var p = Promise.resolve(props);\n    p = p.then(function (json) {\n      return JWK.helpers.thumbprint(cfg, json);\n    });\n    p = p.then(function (hash) {\n      var prints = {};\n      prints[JWK.helpers.INTERNALS.THUMBPRINT_HASH] = hash;\n      props[JWK.helpers.INTERNALS.THUMBPRINT_KEY] = prints;\n      return cfg;\n    });\n    return p;\n  },\n  generate: function (size) {\n    var keypair = depsecc.generateKeyPair(size);\n    var result = {\n      \"crv\": size,\n      \"x\": keypair.public.x,\n      \"y\": keypair.public.y,\n      \"d\": keypair.private.d\n    };\n    return Promise.resolve(result);\n  },\n  import: function (input) {\n    if (validators.oid !== input.keyOid) {\n      return null;\n    } // coerce key params to OID\n\n\n    var crv;\n\n    if (input.keyParams && forge.asn1.Type.OID === input.keyParams.type) {\n      crv = forge.asn1.derToOid(input.keyParams.value);\n      crv = oidToCurveName(crv);\n    } else if (input.crv) {\n      crv = forge.asn1.derToOid(input.crv);\n      crv = oidToCurveName(crv);\n    }\n\n    if (!crv) {\n      return null;\n    }\n\n    if (!input.parsed) {\n      var capture = {},\n          errors = [];\n\n      if (\"private\" === input.type) {\n        // coerce capture.value to DER *iff* private\n        if (\"string\" === typeof input.keyValue) {\n          input.keyValue = forge.asn1.fromDer(input.keyValue);\n        } else if (Array.isArray(input.keyValue)) {\n          input.keyValue = input.keyValue[0];\n        }\n\n        if (!forge.asn1.validate(input.keyValue, validators.embeddedPrivateKey, capture, errors)) {\n          return null;\n        }\n      } else {\n        capture.point = input.keyValue;\n      }\n\n      input = capture;\n    } // convert factors to Buffers\n\n\n    var output = {\n      kty: \"EC\",\n      crv: crv\n    };\n\n    if (input.d) {\n      output.d = new Buffer(input.d, \"binary\");\n    }\n\n    if (input.point) {\n      var pt = new Buffer(input.point, \"binary\"); // only support uncompressed\n\n      if (4 !== pt.readUInt16BE(0)) {\n        return null;\n      }\n\n      pt = pt.slice(2);\n      var len = pt.length / 2;\n      output.x = pt.slice(0, len);\n      output.y = pt.slice(len);\n    }\n\n    return output;\n  }\n}; // public API\n\nmodule.exports = Object.freeze({\n  config: JWKEcCfg,\n  factory: JWKEcFactory\n}); // registration\n\n(function (REGISTRY) {\n  REGISTRY.register(JWKEcFactory);\n})(require(\"./keystore\").registry);","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/node-jose/lib/jwk/eckey.js"],"names":["ecutil","require","forge","depsecc","JWK","BaseKey","helpers","SIG_ALGS","WRAP_ALGS","EC_OID","oidToCurveName","oid","curveNameToOid","crv","JWKEcCfg","publicKey","props","fields","COMMON_PROPS","concat","name","type","pk","unpackProps","x","y","length","curveSize","privateKey","d","undefined","thumbprint","json","public","kty","algorithms","keys","mode","len","private","filter","a","encryptKey","alg","decryptKey","wrapKey","unwrapKey","signKey","verifyKey","convertToPEM","key","isPrivate","asn1","oidToDer","pub","Buffer","toString","create","Class","UNIVERSAL","Type","SEQUENCE","INTEGER","OCTETSTRING","CONTEXT_SPECIFIC","OID","bytes","BITSTRING","toDer","pem","encode","body","validators","tagClass","constructed","value","capture","embeddedPrivateKey","JWKEcFactory","prepare","cfg","p","Promise","resolve","then","hash","prints","INTERNALS","THUMBPRINT_HASH","THUMBPRINT_KEY","generate","size","keypair","generateKeyPair","result","import","input","keyOid","keyParams","derToOid","parsed","errors","keyValue","fromDer","Array","isArray","validate","point","output","pt","readUInt16BE","slice","module","exports","Object","freeze","config","factory","REGISTRY","register","registry"],"mappings":"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","sourcesContent":["/*!\n * jwk/rsa.js - RSA Key Representation\n *\n * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n */\n\"use strict\";\n\nvar ecutil = require(\"../algorithms/ec-util.js\"),\n    forge = require(\"../deps/forge\"),\n    depsecc = require(\"../deps/ecc\");\n\nvar JWK = {\n  BaseKey: require(\"./basekey.js\"),\n  helpers: require(\"./helpers.js\")\n};\n\nvar SIG_ALGS = [\n  \"ES256\",\n  \"ES384\",\n  \"ES512\"\n];\nvar WRAP_ALGS = [\n  \"ECDH-ES\",\n  \"ECDH-ES+A128KW\",\n  \"ECDH-ES+A192KW\",\n  \"ECDH-ES+A256KW\"\n];\n\nvar EC_OID = \"1.2.840.10045.2.1\";\nfunction oidToCurveName(oid) {\n  switch (oid) {\n    case \"1.2.840.10045.3.1.7\":\n      return \"P-256\";\n    case \"1.3.132.0.34\":\n      return \"P-384\";\n    case \"1.3.132.0.35\":\n      return \"P-521\";\n    default:\n      return null;\n  }\n}\nfunction curveNameToOid(crv) {\n  switch (crv) {\n    case \"P-256\":\n      return \"1.2.840.10045.3.1.7\";\n    case \"P-384\":\n      return \"1.3.132.0.34\";\n    case \"P-521\":\n      return \"1.3.132.0.35\";\n    default:\n      return null;\n  }\n}\n\nvar JWKEcCfg = {\n  publicKey: function(props) {\n    var fields = JWK.helpers.COMMON_PROPS.concat([\n      {name: \"crv\", type: \"string\"},\n      {name: \"x\", type: \"binary\"},\n      {name: \"y\", type: \"binary\"}\n    ]);\n    var pk = JWK.helpers.unpackProps(props, fields);\n    if (pk && pk.crv && pk.x && pk.y) {\n      pk.length = ecutil.curveSize(pk.crv);\n    } else {\n      delete pk.crv;\n      delete pk.x;\n      delete pk.y;\n    }\n\n    return pk;\n  },\n  privateKey: function(props) {\n    var fields = JWK.helpers.COMMON_PROPS.concat([\n      {name: \"crv\", type: \"string\"},\n      {name: \"x\", type: \"binary\"},\n      {name: \"y\", type: \"binary\"},\n      {name: \"d\", type: \"binary\"}\n    ]);\n    var pk = JWK.helpers.unpackProps(props, fields);\n    if (pk && pk.crv && pk.x && pk.y && pk.d) {\n      pk.length = ecutil.curveSize(pk.crv);\n    } else {\n      pk = undefined;\n    }\n\n    return pk;\n  },\n  thumbprint: function(json) {\n    if (json.public) {\n      json = json.public;\n    }\n    var fields = {\n      crv: json.crv,\n      kty: \"EC\",\n      x: json.x,\n      y: json.y\n    };\n    return fields;\n  },\n  algorithms: function(keys, mode) {\n    var len = (keys.public && keys.public.length) ||\n              (keys.private && keys.private.length) ||\n              0;\n    // NOTE: 521 is the actual, but 512 is the expected\n    if (len === 521) {\n        len = 512;\n    }\n\n    switch (mode) {\n      case \"encrypt\":\n      case \"decrypt\":\n        return [];\n      case \"wrap\":\n        return (keys.public && WRAP_ALGS) || [];\n      case \"unwrap\":\n        return (keys.private && WRAP_ALGS) || [];\n      case \"sign\":\n        if (!keys.private) {\n          return [];\n        }\n        return SIG_ALGS.filter(function(a) {\n          return (a === (\"ES\" + len));\n        });\n      case \"verify\":\n        if (!keys.public) {\n          return [];\n        }\n        return SIG_ALGS.filter(function(a) {\n          return (a === (\"ES\" + len));\n        });\n    }\n  },\n\n  encryptKey: function(alg, keys) {\n    return keys.public;\n  },\n  decryptKey: function(alg, keys) {\n    return keys.private;\n  },\n\n  wrapKey: function(alg, keys) {\n    return keys.public;\n  },\n  unwrapKey: function(alg, keys) {\n    return keys.private;\n  },\n\n  signKey: function(alg, keys) {\n    return keys.private;\n  },\n  verifyKey: function(alg, keys) {\n    return keys.public;\n  },\n\n  convertToPEM: function(key, isPrivate) {\n    // curveName to OID\n    var oid = key.crv;\n    oid = curveNameToOid(oid);\n    oid = forge.asn1.oidToDer(oid);\n    // key as bytes\n    var type,\n        pub,\n        asn1;\n    if (isPrivate) {\n      type = \"EC PRIVATE KEY\";\n      pub = Buffer.concat([\n        new Buffer([0x00, 0x04]),\n        key.x,\n        key.y\n      ]).toString(\"binary\");\n      key = key.d.toString(\"binary\");\n      asn1 = forge.asn1.create(forge.asn1.Class.UNIVERSAL, forge.asn1.Type.SEQUENCE, true, [\n        forge.asn1.create(forge.asn1.Class.UNIVERSAL, forge.asn1.Type.INTEGER, false, \"\\u0001\"),\n        forge.asn1.create(forge.asn1.Class.UNIVERSAL, forge.asn1.Type.OCTETSTRING, false, key),\n        forge.asn1.create(forge.asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n          forge.asn1.create(forge.asn1.Class.UNIVERSAL, forge.asn1.Type.OID, false, oid.bytes())\n        ]),\n        forge.asn1.create(forge.asn1.Class.CONTEXT_SPECIFIC, 1, true, [\n          forge.asn1.create(forge.asn1.Class.UNIVERSAL, forge.asn1.Type.BITSTRING, false, pub)\n        ])\n      ]);\n    } else {\n      type = \"PUBLIC KEY\";\n      key = Buffer.concat([\n        new Buffer([0x00, 0x04]),\n        key.x,\n        key.y\n      ]).toString(\"binary\");\n      asn1 = forge.asn1.create(forge.asn1.Class.UNIVERSAL, forge.asn1.Type.SEQUENCE, true, [\n        forge.asn1.create(forge.asn1.Class.UNIVERSAL, forge.asn1.Type.SEQUENCE, true, [\n          forge.asn1.create(forge.asn1.Class.UNIVERSAL, forge.asn1.Type.OID, false, forge.asn1.oidToDer(EC_OID).bytes()),\n          forge.asn1.create(forge.asn1.Class.UNIVERSAL, forge.asn1.Type.OID, false, oid.bytes())\n        ]),\n        forge.asn1.create(forge.asn1.Class.UNIVERSAL, forge.asn1.Type.BITSTRING, false, key)\n      ]);\n    }\n    asn1 = forge.asn1.toDer(asn1).bytes();\n    var pem = forge.pem.encode({\n      type: type,\n      body: asn1\n    });\n    return pem;\n  }\n};\n\n// Inspired by digitalbaazar/node-forge/js/rsa.js\nvar validators = {\n  oid: EC_OID,\n  privateKey: {\n    // ECPrivateKey\n    name: \"ECPrivateKey\",\n    tagClass: forge.asn1.Class.UNIVERSAL,\n    type: forge.asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [\n      {\n        // EC version\n        name: \"ECPrivateKey.version\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.INTEGER,\n        constructed: false\n      },\n      {\n        // private value (d)\n        name: \"ECPrivateKey.private\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.OCTETSTRING,\n        constructed: false,\n        capture: \"d\"\n      },\n      {\n        // EC parameters\n        tagClass: forge.asn1.Class.CONTEXT_SPECIFIC,\n        name: \"ECPrivateKey.parameters\",\n        constructed: true,\n        value: [\n          {\n            // namedCurve (crv)\n            name: \"ECPrivateKey.namedCurve\",\n            tagClass: forge.asn1.Class.UNIVERSAL,\n            type: forge.asn1.Type.OID,\n            constructed: false,\n            capture: \"crv\"\n          }\n        ]\n      },\n      {\n        // publicKey\n        name: \"ECPrivateKey.publicKey\",\n        tagClass: forge.asn1.Class.CONTEXT_SPECIFIC,\n        constructed: true,\n        value: [\n          {\n            name: \"ECPrivateKey.point\",\n            tagClass: forge.asn1.Class.UNIVERSAL,\n            type: forge.asn1.Type.BITSTRING,\n            constructed: false,\n            capture: \"point\"\n          }\n        ]\n      }\n    ]\n  },\n  embeddedPrivateKey: {\n    // ECPrivateKey\n    name: \"ECPrivateKey\",\n    tagClass: forge.asn1.Class.UNIVERSAL,\n    type: forge.asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [\n      {\n        // EC version\n        name: \"ECPrivateKey.version\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.INTEGER,\n        constructed: false\n      },\n      {\n        // private value (d)\n        name: \"ECPrivateKey.private\",\n        tagClass: forge.asn1.Class.UNIVERSAL,\n        type: forge.asn1.Type.OCTETSTRING,\n        constructed: false,\n        capture: \"d\"\n      },\n      {\n        // publicKey\n        name: \"ECPrivateKey.publicKey\",\n        tagClass: forge.asn1.Class.CONTEXT_SPECIFIC,\n        constructed: true,\n        value: [\n          {\n            name: \"ECPrivateKey.point\",\n            tagClass: forge.asn1.Class.UNIVERSAL,\n            type: forge.asn1.Type.BITSTRING,\n            constructed: false,\n            capture: \"point\"\n          }\n        ]\n      }\n    ]\n  }\n};\n\nvar JWKEcFactory = {\n  kty: \"EC\",\n  validators: validators,\n  prepare: function(props) {\n    // TODO: validate key properties\n    var cfg = JWKEcCfg;\n    var p = Promise.resolve(props);\n    p = p.then(function(json) {\n      return JWK.helpers.thumbprint(cfg, json);\n    });\n    p = p.then(function(hash) {\n      var prints = {};\n      prints[JWK.helpers.INTERNALS.THUMBPRINT_HASH] = hash;\n      props[JWK.helpers.INTERNALS.THUMBPRINT_KEY] = prints;\n      return cfg;\n    });\n    return p;\n  },\n  generate: function(size) {\n    var keypair = depsecc.generateKeyPair(size);\n    var result = {\n      \"crv\": size,\n      \"x\": keypair.public.x,\n      \"y\": keypair.public.y,\n      \"d\": keypair.private.d\n    };\n    return Promise.resolve(result);\n  },\n  import: function(input) {\n    if (validators.oid !== input.keyOid) {\n      return null;\n    }\n\n    // coerce key params to OID\n    var crv;\n    if (input.keyParams && forge.asn1.Type.OID === input.keyParams.type) {\n      crv = forge.asn1.derToOid(input.keyParams.value);\n      crv = oidToCurveName(crv);\n    } else if (input.crv) {\n      crv = forge.asn1.derToOid(input.crv);\n      crv = oidToCurveName(crv);\n    }\n    if (!crv) {\n      return null;\n    }\n\n    if (!input.parsed) {\n      var capture = {},\n          errors = [];\n      if (\"private\" === input.type) {\n        // coerce capture.value to DER *iff* private\n        if (\"string\" === typeof input.keyValue) {\n          input.keyValue = forge.asn1.fromDer(input.keyValue);\n        } else if (Array.isArray(input.keyValue)) {\n          input.keyValue = input.keyValue[0];\n        }\n\n        if (!forge.asn1.validate(input.keyValue,\n                                 validators.embeddedPrivateKey,\n                                 capture,\n                                 errors)) {\n          return null;\n        }\n      } else {\n        capture.point = input.keyValue;\n      }\n      input = capture;\n    }\n\n    // convert factors to Buffers\n    var output = {\n      kty: \"EC\",\n      crv: crv\n    };\n    if (input.d) {\n      output.d = new Buffer(input.d, \"binary\");\n    }\n    if (input.point) {\n      var pt = new Buffer(input.point, \"binary\");\n      // only support uncompressed\n      if (4 !== pt.readUInt16BE(0)) {\n        return null;\n      }\n      pt = pt.slice(2);\n      var len = pt.length / 2;\n      output.x = pt.slice(0, len);\n      output.y = pt.slice(len);\n    }\n    return output;\n  }\n};\n// public API\nmodule.exports = Object.freeze({\n  config: JWKEcCfg,\n  factory: JWKEcFactory\n});\n\n// registration\n(function(REGISTRY) {\n  REGISTRY.register(JWKEcFactory);\n})(require(\"./keystore\").registry);\n"]},"metadata":{},"sourceType":"script"}