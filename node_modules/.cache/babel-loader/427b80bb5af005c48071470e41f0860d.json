{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, utilConcatBuf, clearProps } from \"pvutils\";\nimport { getCrypto, getEngine, getRandomValues, getOIDByAlgorithm, getAlgorithmByOID } from \"./common.js\";\nimport ContentInfo from \"./ContentInfo.js\";\nimport MacData from \"./MacData.js\";\nimport DigestInfo from \"./DigestInfo.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport SignedData from \"./SignedData.js\";\nimport EncapsulatedContentInfo from \"./EncapsulatedContentInfo.js\";\nimport Attribute from \"./Attribute.js\";\nimport SignerInfo from \"./SignerInfo.js\";\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\nimport SignedAndUnsignedAttributes from \"./SignedAndUnsignedAttributes.js\";\nimport AuthenticatedSafe from \"./AuthenticatedSafe.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC7292\r\n */\n\nexport default class PFX {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for PFX class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", PFX.defaultValues(\"version\"));\n    /**\r\n     * @type {ContentInfo}\r\n     * @desc authSafe\r\n     */\n\n    this.authSafe = getParametersValue(parameters, \"authSafe\", PFX.defaultValues(\"authSafe\"));\n    if (\"macData\" in parameters)\n      /**\r\n       * @type {MacData}\r\n       * @desc macData\r\n       */\n      this.macData = getParametersValue(parameters, \"macData\", PFX.defaultValues(\"macData\"));\n    if (\"parsedValue\" in parameters)\n      /**\r\n       * @type {*}\r\n       * @desc parsedValue\r\n       */\n      this.parsedValue = getParametersValue(parameters, \"parsedValue\", PFX.defaultValues(\"parsedValue\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"version\":\n        return 3;\n\n      case \"authSafe\":\n        return new ContentInfo();\n\n      case \"macData\":\n        return new MacData();\n\n      case \"parsedValue\":\n        return {};\n\n      default:\n        throw new Error(`Invalid member name for PFX class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"version\":\n        return memberValue === PFX.defaultValues(memberName);\n\n      case \"authSafe\":\n        return ContentInfo.compareWithDefault(\"contentType\", memberValue.contentType) && ContentInfo.compareWithDefault(\"content\", memberValue.content);\n\n      case \"macData\":\n        return MacData.compareWithDefault(\"mac\", memberValue.mac) && MacData.compareWithDefault(\"macSalt\", memberValue.macSalt) && MacData.compareWithDefault(\"iterations\", memberValue.iterations);\n\n      case \"parsedValue\":\n        return memberValue instanceof Object && Object.keys(memberValue).length === 0;\n\n      default:\n        throw new Error(`Invalid member name for PFX class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * PFX ::= SEQUENCE {\r\n   *    version\t\tINTEGER {v3(3)}(v3,...),\r\n   *    authSafe\tContentInfo,\r\n   *    macData    \tMacData OPTIONAL\r\n   * }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [version]\r\n     * @property {string} [authSafe]\r\n     * @property {string} [macData]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Integer({\n        name: names.version || \"version\"\n      }), ContentInfo.schema(names.authSafe || {\n        names: {\n          blockName: \"authSafe\"\n        }\n      }), MacData.schema(names.macData || {\n        names: {\n          blockName: \"macData\",\n          optional: true\n        }\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"version\", \"authSafe\", \"macData\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, PFX.schema({\n      names: {\n        version: \"version\",\n        authSafe: {\n          names: {\n            blockName: \"authSafe\"\n          }\n        },\n        macData: {\n          names: {\n            blockName: \"macData\"\n          }\n        }\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PFX\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.version = asn1.result.version.valueBlock.valueDec;\n    this.authSafe = new ContentInfo({\n      schema: asn1.result.authSafe\n    });\n    if (\"macData\" in asn1.result) this.macData = new MacData({\n      schema: asn1.result.macData\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    const outputArray = [new asn1js.Integer({\n      value: this.version\n    }), this.authSafe.toSchema()];\n    if (\"macData\" in this) outputArray.push(this.macData.toSchema());\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const output = {\n      version: this.version,\n      authSafe: this.authSafe.toJSON()\n    };\n    if (\"macData\" in this) output.macData = this.macData.toJSON();\n    return output;\n  } //**********************************************************************************\n\n  /**\r\n   * Making ContentInfo from \"parsedValue\" object\r\n   * @param {Object} parameters Parameters, specific to each \"integrity mode\"\r\n   */\n\n\n  makeInternalValues(parameters = {}) {\n    //region Check mandatory parameter\n    if (parameters instanceof Object === false) return Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\n    if (\"parsedValue\" in this === false) return Promise.reject(\"Please call \\\"parseValues\\\" function first in order to make \\\"parsedValue\\\" data\");\n    if (\"integrityMode\" in this.parsedValue === false) return Promise.reject(\"Absent mandatory parameter \\\"integrityMode\\\" inside \\\"parsedValue\\\"\"); //endregion\n    //region Initial variables\n\n    let sequence = Promise.resolve(); //endregion\n    //region Get a \"crypto\" extension\n\n    const crypto = getCrypto();\n    if (typeof crypto === \"undefined\") return Promise.reject(\"Unable to create WebCrypto object\"); //endregion\n    //region Makes values for each particular integrity mode\n    //region Check that we do have neccessary fields in \"parsedValue\" object\n\n    if (\"authenticatedSafe\" in this.parsedValue === false) return Promise.reject(\"Absent mandatory parameter \\\"authenticatedSafe\\\" in \\\"parsedValue\\\"\"); //endregion\n\n    switch (this.parsedValue.integrityMode) {\n      //region HMAC-based integrity\n      case 0:\n        {\n          //region Check additional mandatory parameters\n          if (\"iterations\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"iterations\\\"\");\n          if (\"pbkdf2HashAlgorithm\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"pbkdf2HashAlgorithm\\\"\");\n          if (\"hmacHashAlgorithm\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"hmacHashAlgorithm\\\"\");\n          if (\"password\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"password\\\"\"); //endregion\n          //region Initial variables\n\n          const saltBuffer = new ArrayBuffer(64);\n          const saltView = new Uint8Array(saltBuffer);\n          getRandomValues(saltView);\n          const data = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\n          this.authSafe = new ContentInfo({\n            contentType: \"1.2.840.113549.1.7.1\",\n            content: new asn1js.OctetString({\n              valueHex: data\n            })\n          }); //endregion\n          //region Call current crypto engine for making HMAC-based data stamp\n\n          const engine = getEngine();\n          if (\"stampDataWithPassword\" in engine.subtle === false) return Promise.reject(`No support for \"stampDataWithPassword\" in current engine \"${engine.name}\"`);\n          sequence = sequence.then(() => engine.subtle.stampDataWithPassword({\n            password: parameters.password,\n            hashAlgorithm: parameters.hmacHashAlgorithm,\n            salt: saltBuffer,\n            iterationCount: parameters.iterations,\n            contentToStamp: data\n          })); //endregion\n          //region Make \"MacData\" values\n\n          sequence = sequence.then(result => {\n            this.macData = new MacData({\n              mac: new DigestInfo({\n                digestAlgorithm: new AlgorithmIdentifier({\n                  algorithmId: getOIDByAlgorithm({\n                    name: parameters.hmacHashAlgorithm\n                  })\n                }),\n                digest: new asn1js.OctetString({\n                  valueHex: result\n                })\n              }),\n              macSalt: new asn1js.OctetString({\n                valueHex: saltBuffer\n              }),\n              iterations: parameters.iterations\n            });\n          }, error => Promise.reject(error)); //endregion\n          //endregion\n        }\n        break;\n      //endregion\n      //region publicKey-based integrity\n\n      case 1:\n        {\n          //region Check additional mandatory parameters\n          if (\"signingCertificate\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"signingCertificate\\\"\");\n          if (\"privateKey\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"privateKey\\\"\");\n          if (\"hashAlgorithm\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\"); //endregion\n          //region Making data to be signed\n          // NOTE: all internal data for \"authenticatedSafe\" must be already prepared.\n          // Thus user must call \"makeValues\" for all internal \"SafeContent\" value with appropriate parameters.\n          // Or user can choose to use values from initial parsing of existing PKCS#12 data.\n\n          const toBeSigned = this.parsedValue.authenticatedSafe.toSchema().toBER(false); //endregion\n          //region Initial variables\n\n          const cmsSigned = new SignedData({\n            version: 1,\n            encapContentInfo: new EncapsulatedContentInfo({\n              eContentType: \"1.2.840.113549.1.7.1\",\n              // \"data\" content type\n              eContent: new asn1js.OctetString({\n                valueHex: toBeSigned\n              })\n            }),\n            certificates: [parameters.signingCertificate]\n          }); //endregion\n          //region Making additional attributes for CMS Signed Data\n          //region Create a message digest\n\n          sequence = sequence.then(() => crypto.digest({\n            name: parameters.hashAlgorithm\n          }, new Uint8Array(toBeSigned))); //endregion\n          //region Combine all signed extensions\n\n          sequence = sequence.then(result => {\n            //region Initial variables\n            const signedAttr = []; //endregion\n            //region contentType\n\n            signedAttr.push(new Attribute({\n              type: \"1.2.840.113549.1.9.3\",\n              values: [new asn1js.ObjectIdentifier({\n                value: \"1.2.840.113549.1.7.1\"\n              })]\n            })); //endregion\n            //region signingTime\n\n            signedAttr.push(new Attribute({\n              type: \"1.2.840.113549.1.9.5\",\n              values: [new asn1js.UTCTime({\n                valueDate: new Date()\n              })]\n            })); //endregion\n            //region messageDigest\n\n            signedAttr.push(new Attribute({\n              type: \"1.2.840.113549.1.9.4\",\n              values: [new asn1js.OctetString({\n                valueHex: result\n              })]\n            })); //endregion\n            //region Making final value for \"SignerInfo\" type\n\n            cmsSigned.signerInfos.push(new SignerInfo({\n              version: 1,\n              sid: new IssuerAndSerialNumber({\n                issuer: parameters.signingCertificate.issuer,\n                serialNumber: parameters.signingCertificate.serialNumber\n              }),\n              signedAttrs: new SignedAndUnsignedAttributes({\n                type: 0,\n                attributes: signedAttr\n              })\n            })); //endregion\n          }, error => Promise.reject(`Error during making digest for message: ${error}`)); //endregion\n          //endregion\n          //region Signing CMS Signed Data\n\n          sequence = sequence.then(() => cmsSigned.sign(parameters.privateKey, 0, parameters.hashAlgorithm)); //endregion\n          //region Making final CMS_CONTENT_INFO type\n\n          sequence = sequence.then(() => {\n            this.authSafe = new ContentInfo({\n              contentType: \"1.2.840.113549.1.7.2\",\n              content: cmsSigned.toSchema(true)\n            });\n          }, error => Promise.reject(`Error during making signature: ${error}`)); //endregion\n        }\n        break;\n      //endregion\n      //region default\n\n      default:\n        return Promise.reject(`Parameter \"integrityMode\" has unknown value: ${parameters.integrityMode}`);\n      //endregion\n    } //endregion\n\n\n    return sequence;\n  } //**********************************************************************************\n\n\n  parseInternalValues(parameters) {\n    //region Check input data from \"parameters\" \n    if (parameters instanceof Object === false) return Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\n    if (\"checkIntegrity\" in parameters === false) parameters.checkIntegrity = true; //endregion \n    //region Initial variables \n\n    let sequence = Promise.resolve(); //endregion \n    //region Get a \"crypto\" extension \n\n    const crypto = getCrypto();\n    if (typeof crypto === \"undefined\") return Promise.reject(\"Unable to create WebCrypto object\"); //endregion \n    //region Create value for \"this.parsedValue.authenticatedSafe\" and check integrity \n\n    this.parsedValue = {};\n\n    switch (this.authSafe.contentType) {\n      //region data \n      case \"1.2.840.113549.1.7.1\":\n        {\n          //region Check additional mandatory parameters\n          if (\"password\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"password\\\"\"); //endregion\n          //region Integrity based on HMAC\n\n          this.parsedValue.integrityMode = 0; //endregion\n          //region Check that we do have OCTETSTRING as \"content\"\n\n          if (this.authSafe.content instanceof asn1js.OctetString === false) return Promise.reject(\"Wrong type of \\\"this.authSafe.content\\\"\"); //endregion\n          //region Check we have \"constructive encoding\" for AuthSafe content\n\n          let authSafeContent = new ArrayBuffer(0);\n\n          if (this.authSafe.content.valueBlock.isConstructed) {\n            for (const contentValue of this.authSafe.content.valueBlock.value) authSafeContent = utilConcatBuf(authSafeContent, contentValue.valueBlock.valueHex);\n          } else authSafeContent = this.authSafe.content.valueBlock.valueHex; //endregion\n          //region Parse internal ASN.1 data\n\n\n          const asn1 = asn1js.fromBER(authSafeContent);\n          if (asn1.offset === -1) return Promise.reject(\"Error during parsing of ASN.1 data inside \\\"this.authSafe.content\\\"\"); //endregion\n          //region Set \"authenticatedSafe\" value\n\n          this.parsedValue.authenticatedSafe = new AuthenticatedSafe({\n            schema: asn1.result\n          }); //endregion\n          //region Check integrity\n\n          if (parameters.checkIntegrity) {\n            //region Check that \"MacData\" exists\n            if (\"macData\" in this === false) return Promise.reject(\"Absent \\\"macData\\\" value, can not check PKCS#12 data integrity\"); //endregion\n            //region Initial variables\n\n            const hashAlgorithm = getAlgorithmByOID(this.macData.mac.digestAlgorithm.algorithmId);\n            if (\"name\" in hashAlgorithm === false) return Promise.reject(`Unsupported digest algorithm: ${this.macData.mac.digestAlgorithm.algorithmId}`); //endregion\n            //region Call current crypto engine for verifying HMAC-based data stamp\n\n            const engine = getEngine();\n            sequence = sequence.then(() => engine.subtle.verifyDataStampedWithPassword({\n              password: parameters.password,\n              hashAlgorithm: hashAlgorithm.name,\n              salt: this.macData.macSalt.valueBlock.valueHex,\n              iterationCount: this.macData.iterations,\n              contentToVerify: authSafeContent,\n              signatureToVerify: this.macData.mac.digest.valueBlock.valueHex\n            })); //endregion\n            //region Verify HMAC signature\n\n            sequence = sequence.then(result => {\n              if (result === false) return Promise.reject(\"Integrity for the PKCS#12 data is broken!\");\n              return Promise.resolve();\n            }, error => Promise.reject(error)); //endregion\n          } //endregion\n\n        }\n        break;\n      //endregion \n      //region signedData \n\n      case \"1.2.840.113549.1.7.2\":\n        {\n          //region Integrity based on signature using public key\n          this.parsedValue.integrityMode = 1; //endregion\n          //region Parse CMS Signed Data\n\n          const cmsSigned = new SignedData({\n            schema: this.authSafe.content\n          }); //endregion\n          //region Check that we do have OCTETSTRING as \"content\"\n\n          if (\"eContent\" in cmsSigned.encapContentInfo === false) return Promise.reject(\"Absent of attached data in \\\"cmsSigned.encapContentInfo\\\"\");\n          if (cmsSigned.encapContentInfo.eContent instanceof asn1js.OctetString === false) return Promise.reject(\"Wrong type of \\\"cmsSigned.encapContentInfo.eContent\\\"\"); //endregion\n          //region Create correct data block for verification\n\n          let data = new ArrayBuffer(0);\n          if (cmsSigned.encapContentInfo.eContent.idBlock.isConstructed === false) data = cmsSigned.encapContentInfo.eContent.valueBlock.valueHex;else {\n            for (let i = 0; i < cmsSigned.encapContentInfo.eContent.valueBlock.value.length; i++) data = utilConcatBuf(data, cmsSigned.encapContentInfo.eContent.valueBlock.value[i].valueBlock.valueHex);\n          } //endregion\n          //region Parse internal ASN.1 data\n\n          const asn1 = asn1js.fromBER(data);\n          if (asn1.offset === -1) return Promise.reject(\"Error during parsing of ASN.1 data inside \\\"this.authSafe.content\\\"\"); //endregion\n          //region Set \"authenticatedSafe\" value\n\n          this.parsedValue.authenticatedSafe = new AuthenticatedSafe({\n            schema: asn1.result\n          }); //endregion\n          //region Check integrity\n\n          sequence = sequence.then(() => cmsSigned.verify({\n            signer: 0,\n            checkChain: false\n          })).then(result => {\n            if (result === false) return Promise.reject(\"Integrity for the PKCS#12 data is broken!\");\n            return Promise.resolve();\n          }, error => Promise.reject(`Error during integrity verification: ${error}`)); //endregion\n        }\n        break;\n      //endregion   \n      //region default \n\n      default:\n        return Promise.reject(`Incorrect value for \"this.authSafe.contentType\": ${this.authSafe.contentType}`);\n      //endregion \n    } //endregion \n    //region Return result of the function \n\n\n    return sequence.then(() => this, error => Promise.reject(`Error during parsing: ${error}`)); //endregion   \n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/PFX.js"],"names":["asn1js","getParametersValue","utilConcatBuf","clearProps","getCrypto","getEngine","getRandomValues","getOIDByAlgorithm","getAlgorithmByOID","ContentInfo","MacData","DigestInfo","AlgorithmIdentifier","SignedData","EncapsulatedContentInfo","Attribute","SignerInfo","IssuerAndSerialNumber","SignedAndUnsignedAttributes","AuthenticatedSafe","PFX","constructor","parameters","version","defaultValues","authSafe","macData","parsedValue","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","contentType","content","mac","macSalt","iterations","Object","keys","length","names","Sequence","name","blockName","value","Integer","optional","asn1","compareSchema","verified","result","valueBlock","valueDec","toSchema","outputArray","push","toJSON","output","makeInternalValues","Promise","reject","sequence","resolve","crypto","integrityMode","saltBuffer","ArrayBuffer","saltView","Uint8Array","data","authenticatedSafe","toBER","OctetString","valueHex","engine","subtle","then","stampDataWithPassword","password","hashAlgorithm","hmacHashAlgorithm","salt","iterationCount","contentToStamp","digestAlgorithm","algorithmId","digest","error","toBeSigned","cmsSigned","encapContentInfo","eContentType","eContent","certificates","signingCertificate","signedAttr","type","values","ObjectIdentifier","UTCTime","valueDate","Date","signerInfos","sid","issuer","serialNumber","signedAttrs","attributes","sign","privateKey","parseInternalValues","checkIntegrity","authSafeContent","isConstructed","contentValue","fromBER","offset","verifyDataStampedWithPassword","contentToVerify","signatureToVerify","idBlock","i","verify","signer","checkChain"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, clearProps } from \"pvutils\";\r\nimport { getCrypto, getEngine, getRandomValues, getOIDByAlgorithm, getAlgorithmByOID } from \"./common.js\";\r\nimport ContentInfo from \"./ContentInfo.js\";\r\nimport MacData from \"./MacData.js\";\r\nimport DigestInfo from \"./DigestInfo.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport SignedData from \"./SignedData.js\";\r\nimport EncapsulatedContentInfo from \"./EncapsulatedContentInfo.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport SignerInfo from \"./SignerInfo.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\nimport SignedAndUnsignedAttributes from \"./SignedAndUnsignedAttributes.js\";\r\nimport AuthenticatedSafe from \"./AuthenticatedSafe.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class PFX \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PFX class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", PFX.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {ContentInfo}\r\n\t\t * @desc authSafe\r\n\t\t */\r\n\t\tthis.authSafe = getParametersValue(parameters, \"authSafe\", PFX.defaultValues(\"authSafe\"));\r\n\t\t\r\n\t\tif(\"macData\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {MacData}\r\n\t\t\t * @desc macData\r\n\t\t\t */\r\n\t\t\tthis.macData = getParametersValue(parameters, \"macData\", PFX.defaultValues(\"macData\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", PFX.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 3;\r\n\t\t\tcase \"authSafe\":\r\n\t\t\t\treturn (new ContentInfo());\r\n\t\t\tcase \"macData\":\r\n\t\t\t\treturn (new MacData());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PFX class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === PFX.defaultValues(memberName));\r\n\t\t\tcase \"authSafe\":\r\n\t\t\t\treturn ((ContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t(ContentInfo.compareWithDefault(\"content\", memberValue.content)));\r\n\t\t\tcase \"macData\":\r\n\t\t\t\treturn ((MacData.compareWithDefault(\"mac\", memberValue.mac)) &&\r\n\t\t\t\t(MacData.compareWithDefault(\"macSalt\", memberValue.macSalt)) &&\r\n\t\t\t\t(MacData.compareWithDefault(\"iterations\", memberValue.iterations)));\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PFX class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PFX ::= SEQUENCE {\r\n\t *    version\t\tINTEGER {v3(3)}(v3,...),\r\n\t *    authSafe\tContentInfo,\r\n\t *    macData    \tMacData OPTIONAL\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [authSafe]\r\n\t\t * @property {string} [macData]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"version\") }),\r\n\t\t\t\tContentInfo.schema(names.authSafe || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"authSafe\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tMacData.schema(names.macData || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"macData\",\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"authSafe\",\r\n\t\t\t\"macData\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPFX.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tauthSafe: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"authSafe\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmacData: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"macData\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PFX\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.authSafe = new ContentInfo({ schema: asn1.result.authSafe });\r\n\t\t\r\n\t\tif(\"macData\" in asn1.result)\r\n\t\t\tthis.macData = new MacData({ schema: asn1.result.macData });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.authSafe.toSchema()\r\n\t\t];\r\n\t\t\r\n\t\tif(\"macData\" in this)\r\n\t\t\toutputArray.push(this.macData.toSchema());\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst output = {\r\n\t\t\tversion: this.version,\r\n\t\t\tauthSafe: this.authSafe.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"macData\" in this)\r\n\t\t\toutput.macData = this.macData.toJSON();\r\n\t\t\r\n\t\treturn output;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Making ContentInfo from \"parsedValue\" object\r\n\t * @param {Object} parameters Parameters, specific to each \"integrity mode\"\r\n\t */\r\n\tmakeInternalValues(parameters = {})\r\n\t{\r\n\t\t//region Check mandatory parameter\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"parsedValue\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Please call \\\"parseValues\\\" function first in order to make \\\"parsedValue\\\" data\");\r\n\t\t\r\n\t\tif((\"integrityMode\" in this.parsedValue) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"integrityMode\\\" inside \\\"parsedValue\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Makes values for each particular integrity mode\r\n\t\t//region Check that we do have neccessary fields in \"parsedValue\" object\r\n\t\tif((\"authenticatedSafe\" in this.parsedValue) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"authenticatedSafe\\\" in \\\"parsedValue\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(this.parsedValue.integrityMode)\r\n\t\t{\r\n\t\t\t//region HMAC-based integrity\r\n\t\t\tcase 0:\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check additional mandatory parameters\r\n\t\t\t\t\tif((\"iterations\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterations\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"pbkdf2HashAlgorithm\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"pbkdf2HashAlgorithm\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"hmacHashAlgorithm\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hmacHashAlgorithm\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"password\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\t\t\r\n\t\t\t\t\tgetRandomValues(saltView);\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst data = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\r\n\r\n\t\t\t\t\tthis.authSafe = new ContentInfo({\r\n\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.1\",\r\n\t\t\t\t\t\tcontent: new asn1js.OctetString({ valueHex: data })\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Call current crypto engine for making HMAC-based data stamp\r\n\t\t\t\t\tconst engine = getEngine();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((\"stampDataWithPassword\" in engine.subtle) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`No support for \"stampDataWithPassword\" in current engine \"${engine.name}\"`);\r\n\t\t\t\t\t\r\n\t\t\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\t\t\tengine.subtle.stampDataWithPassword({\r\n\t\t\t\t\t\t\tpassword: parameters.password,\r\n\t\t\t\t\t\t\thashAlgorithm: parameters.hmacHashAlgorithm,\r\n\t\t\t\t\t\t\tsalt: saltBuffer,\r\n\t\t\t\t\t\t\titerationCount: parameters.iterations,\r\n\t\t\t\t\t\t\tcontentToStamp: data\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Make \"MacData\" values\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.macData = new MacData({\r\n\t\t\t\t\t\t\t\tmac: new DigestInfo({\r\n\t\t\t\t\t\t\t\t\tdigestAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\t\t\t\talgorithmId: getOIDByAlgorithm({ name: parameters.hmacHashAlgorithm })\r\n\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t\tdigest: new asn1js.OctetString({ valueHex: result })\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tmacSalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\t\t\t\t\t\titerations: parameters.iterations\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\t//region publicKey-based integrity\r\n\t\t\tcase 1:\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check additional mandatory parameters\r\n\t\t\t\t\tif((\"signingCertificate\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"signingCertificate\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"privateKey\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"privateKey\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Making data to be signed\r\n\t\t\t\t\t// NOTE: all internal data for \"authenticatedSafe\" must be already prepared.\r\n\t\t\t\t\t// Thus user must call \"makeValues\" for all internal \"SafeContent\" value with appropriate parameters.\r\n\t\t\t\t\t// Or user can choose to use values from initial parsing of existing PKCS#12 data.\r\n\t\t\t\t\r\n\t\t\t\t\tconst toBeSigned = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tconst cmsSigned = new SignedData({\r\n\t\t\t\t\t\tversion: 1,\r\n\t\t\t\t\t\tencapContentInfo: new EncapsulatedContentInfo({\r\n\t\t\t\t\t\t\teContentType: \"1.2.840.113549.1.7.1\", // \"data\" content type\r\n\t\t\t\t\t\t\teContent: new asn1js.OctetString({ valueHex: toBeSigned })\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tcertificates: [parameters.signingCertificate]\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Making additional attributes for CMS Signed Data\r\n\t\t\t\t\t//region Create a message digest\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => crypto.digest({ name: parameters.hashAlgorithm }, new Uint8Array(toBeSigned))\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Combine all signed extensions\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\tconst signedAttr = [];\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region contentType\r\n\t\t\t\t\t\t\tsignedAttr.push(new Attribute({\r\n\t\t\t\t\t\t\t\ttype: \"1.2.840.113549.1.9.3\",\r\n\t\t\t\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.ObjectIdentifier({ value: \"1.2.840.113549.1.7.1\" })\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region signingTime\r\n\t\t\t\t\t\t\tsignedAttr.push(new Attribute({\r\n\t\t\t\t\t\t\t\ttype: \"1.2.840.113549.1.9.5\",\r\n\t\t\t\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.UTCTime({ valueDate: new Date() })\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region messageDigest\r\n\t\t\t\t\t\t\tsignedAttr.push(new Attribute({\r\n\t\t\t\t\t\t\t\ttype: \"1.2.840.113549.1.9.4\",\r\n\t\t\t\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.OctetString({ valueHex: result })\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region Making final value for \"SignerInfo\" type\r\n\t\t\t\t\t\t\tcmsSigned.signerInfos.push(new SignerInfo({\r\n\t\t\t\t\t\t\t\tversion: 1,\r\n\t\t\t\t\t\t\t\tsid: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\t\t\tissuer: parameters.signingCertificate.issuer,\r\n\t\t\t\t\t\t\t\t\tserialNumber: parameters.signingCertificate.serialNumber\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tsignedAttrs: new SignedAndUnsignedAttributes({\r\n\t\t\t\t\t\t\t\t\ttype: 0,\r\n\t\t\t\t\t\t\t\t\tattributes: signedAttr\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(`Error during making digest for message: ${error}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Signing CMS Signed Data\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => cmsSigned.sign(parameters.privateKey, 0, parameters.hashAlgorithm)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Making final CMS_CONTENT_INFO type\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.authSafe = new ContentInfo({\r\n\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.2\",\r\n\t\t\t\t\t\t\t\tcontent: cmsSigned.toSchema(true)\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(`Error during making signature: ${error}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\t//region default\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Parameter \"integrityMode\" has unknown value: ${parameters.integrityMode}`);\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tparseInternalValues(parameters)\r\n\t{\r\n\t\t//region Check input data from \"parameters\" \r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"checkIntegrity\" in parameters) === false)\r\n\t\t\tparameters.checkIntegrity = true;\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Get a \"crypto\" extension \r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Create value for \"this.parsedValue.authenticatedSafe\" and check integrity \r\n\t\tthis.parsedValue = {};\r\n\t\t\r\n\t\tswitch(this.authSafe.contentType)\r\n\t\t{\r\n\t\t\t//region data \r\n\t\t\tcase \"1.2.840.113549.1.7.1\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check additional mandatory parameters\r\n\t\t\t\t\tif((\"password\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Integrity based on HMAC\r\n\t\t\t\t\tthis.parsedValue.integrityMode = 0;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check that we do have OCTETSTRING as \"content\"\r\n\t\t\t\t\tif((this.authSafe.content instanceof asn1js.OctetString) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Wrong type of \\\"this.authSafe.content\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check we have \"constructive encoding\" for AuthSafe content\r\n\t\t\t\t\tlet authSafeContent = new ArrayBuffer(0);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(this.authSafe.content.valueBlock.isConstructed)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(const contentValue of this.authSafe.content.valueBlock.value)\r\n\t\t\t\t\t\t\tauthSafeContent = utilConcatBuf(authSafeContent, contentValue.valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tauthSafeContent = this.authSafe.content.valueBlock.valueHex;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Parse internal ASN.1 data\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(authSafeContent);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of ASN.1 data inside \\\"this.authSafe.content\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Set \"authenticatedSafe\" value\r\n\t\t\t\t\tthis.parsedValue.authenticatedSafe = new AuthenticatedSafe({ schema: asn1.result });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check integrity\r\n\t\t\t\t\tif(parameters.checkIntegrity)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Check that \"MacData\" exists\r\n\t\t\t\t\t\tif((\"macData\" in this) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent \\\"macData\\\" value, can not check PKCS#12 data integrity\");\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(this.macData.mac.digestAlgorithm.algorithmId);\r\n\t\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(`Unsupported digest algorithm: ${this.macData.mac.digestAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Call current crypto engine for verifying HMAC-based data stamp\r\n\t\t\t\t\t\tconst engine = getEngine();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\t\t\t\tengine.subtle.verifyDataStampedWithPassword({\r\n\t\t\t\t\t\t\t\tpassword: parameters.password,\r\n\t\t\t\t\t\t\t\thashAlgorithm: hashAlgorithm.name,\r\n\t\t\t\t\t\t\t\tsalt: this.macData.macSalt.valueBlock.valueHex,\r\n\t\t\t\t\t\t\t\titerationCount: this.macData.iterations,\r\n\t\t\t\t\t\t\t\tcontentToVerify: authSafeContent,\r\n\t\t\t\t\t\t\t\tsignatureToVerify: this.macData.mac.digest.valueBlock.valueHex\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t//region Verify HMAC signature\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(result === false)\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(\"Integrity for the PKCS#12 data is broken!\");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion \r\n\t\t\t//region signedData \r\n\t\t\tcase \"1.2.840.113549.1.7.2\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Integrity based on signature using public key\r\n\t\t\t\t\tthis.parsedValue.integrityMode = 1;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Parse CMS Signed Data\r\n\t\t\t\t\tconst cmsSigned = new SignedData({ schema: this.authSafe.content });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check that we do have OCTETSTRING as \"content\"\r\n\t\t\t\t\tif((\"eContent\" in cmsSigned.encapContentInfo) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent of attached data in \\\"cmsSigned.encapContentInfo\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((cmsSigned.encapContentInfo.eContent instanceof asn1js.OctetString) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Wrong type of \\\"cmsSigned.encapContentInfo.eContent\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Create correct data block for verification\r\n\t\t\t\t\tlet data = new ArrayBuffer(0);\r\n\t\t\t\t\r\n\t\t\t\t\tif(cmsSigned.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\tdata = cmsSigned.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(let i = 0; i < cmsSigned.encapContentInfo.eContent.valueBlock.value.length; i++)\r\n\t\t\t\t\t\t\tdata = utilConcatBuf(data, cmsSigned.encapContentInfo.eContent.valueBlock.value[i].valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Parse internal ASN.1 data\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(data);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of ASN.1 data inside \\\"this.authSafe.content\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Set \"authenticatedSafe\" value\r\n\t\t\t\t\tthis.parsedValue.authenticatedSafe = new AuthenticatedSafe({ schema: asn1.result });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check integrity\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => cmsSigned.verify({ signer: 0, checkChain: false })\r\n\t\t\t\t\t).then(\r\n\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(result === false)\r\n\t\t\t\t\t\t\t\treturn Promise.reject(\"Integrity for the PKCS#12 data is broken!\");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(`Error during integrity verification: ${error}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion   \r\n\t\t\t//region default \r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect value for \"this.authSafe.contentType\": ${this.authSafe.contentType}`);\r\n\t\t\t//endregion \r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Return result of the function \r\n\t\treturn sequence.then(\r\n\t\t\t() => this,\r\n\t\t\terror => Promise.reject(`Error during parsing: ${error}`)\r\n\t\t);\r\n\t\t//endregion   \r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}