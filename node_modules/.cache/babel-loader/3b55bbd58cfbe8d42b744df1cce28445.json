{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _httpCore = require('@webex/http-core');\n\nvar _kmsErrors = require('./kms-errors');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Interceptor (only to be used in test mode) intended to replay requests that\n * fail as a result of the test-user incompatibiliy in KMS.\n * @class\n */\n\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar KmsDryErrorInterceptor = function (_Interceptor) {\n  (0, _inherits3.default)(KmsDryErrorInterceptor, _Interceptor);\n\n  function KmsDryErrorInterceptor() {\n    (0, _classCallCheck3.default)(this, KmsDryErrorInterceptor);\n    return (0, _possibleConstructorReturn3.default)(this, (KmsDryErrorInterceptor.__proto__ || (0, _getPrototypeOf2.default)(KmsDryErrorInterceptor)).apply(this, arguments));\n  }\n\n  (0, _createClass3.default)(KmsDryErrorInterceptor, [{\n    key: 'onResponseError',\n\n    /**\n     * @param {Object} options\n     * @param {Exception} reason\n     * @returns {Promise}\n     */\n    value: function onResponseError(options, reason) {\n      if (reason instanceof _kmsErrors.DryError && reason.message.match(/Failed to resolve authorization token in KmsMessage request for user/)) {\n        this.webex.logger.error('DRY Request Failed due to kms/test-user flakiness');\n        this.webex.logger.error(reason);\n        return this.replay(options, reason);\n      }\n\n      return _promise2.default.reject(reason);\n    }\n    /**\n     * Replays the request\n     * @param {Object} options\n     * @param {DryError} reason\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'replay',\n    value: function replay(options, reason) {\n      if (options.replayCount) {\n        options.replayCount += 1;\n      } else {\n        options.replayCount = 1;\n      }\n\n      if (options.replayCount > this.webex.config.maxAuthenticationReplays) {\n        this.webex.logger.error('kms: failed after ' + this.webex.config.maxAuthenticationReplays + ' replay attempts');\n        return _promise2.default.reject(reason);\n      }\n\n      this.webex.logger.info('kms: replaying request ' + options.replayCount + ' time');\n      return this.webex.request(options);\n    }\n  }], [{\n    key: 'create',\n\n    /**\n     * @returns {KmsDryErrorInterceptor}\n     */\n    value: function create() {\n      return new KmsDryErrorInterceptor({\n        webex: this\n      });\n    }\n  }]);\n  return KmsDryErrorInterceptor;\n}(_httpCore.Interceptor);\n\nexports.default = KmsDryErrorInterceptor;","map":{"version":3,"sources":["kms-dry-error-interceptor.js"],"names":["KmsDryErrorInterceptor","Interceptor","webex","options","reason","DryError"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAA,SAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;;;;;;AACA;;;;;;AANA;;;;;IAWqBA,sB;;;;;;;;;;;AAQnB;;;;;oCAKgBG,O,EAASC,M,EAAQ;AAC/B,UAAIA,MAAAA,YAAkBC,UAAAA,CAAlBD,QAAAA,IAA8BA,MAAAA,CAAAA,OAAAA,CAAAA,KAAAA,CAAlC,sEAAkCA,CAAlC,EAAgI;AAC9H,aAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,mDAAA;AACA,aAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,MAAA;AAEA,eAAO,KAAA,MAAA,CAAA,OAAA,EAAP,MAAO,CAAP;AACD;;AAED,aAAO,SAAA,CAAA,OAAA,CAAA,MAAA,CAAP,MAAO,CAAP;AACD;AAED;;;;;;;;;2BAMOD,O,EAASC,M,EAAQ;AACtB,UAAID,OAAAA,CAAJ,WAAA,EAAyB;AACvBA,QAAAA,OAAAA,CAAAA,WAAAA,IAAAA,CAAAA;AADF,OAAA,MAGK;AACHA,QAAAA,OAAAA,CAAAA,WAAAA,GAAAA,CAAAA;AACD;;AAED,UAAIA,OAAAA,CAAAA,WAAAA,GAAsB,KAAA,KAAA,CAAA,MAAA,CAA1B,wBAAA,EAAsE;AACpE,aAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,uBAA6C,KAAA,KAAA,CAAA,MAAA,CAA7C,wBAAA,GAAA,kBAAA;AAEA,eAAO,SAAA,CAAA,OAAA,CAAA,MAAA,CAAP,MAAO,CAAP;AACD;;AAED,WAAA,KAAA,CAAA,MAAA,CAAA,IAAA,CAAA,4BAAiDA,OAAAA,CAAjD,WAAA,GAAA,OAAA;AAEA,aAAO,KAAA,KAAA,CAAA,OAAA,CAAP,OAAO,CAAP;AACD;;;;AA9CD;;;6BAGgB;AACd,aAAO,IAAA,sBAAA,CAA2B;AAACD,QAAAA,KAAAA,EAAnC;AAAkC,OAA3B,CAAP;AACD;;;EANiDD,SAAAA,CAAAA,W;;kBAA/BD,sB","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {Interceptor} from '@webex/http-core';\nimport {DryError} from './kms-errors';\n/**\n * Interceptor (only to be used in test mode) intended to replay requests that\n * fail as a result of the test-user incompatibiliy in KMS.\n * @class\n */\nexport default class KmsDryErrorInterceptor extends Interceptor {\n  /**\n   * @returns {KmsDryErrorInterceptor}\n   */\n  static create() {\n    return new KmsDryErrorInterceptor({webex: this});\n  }\n\n  /**\n   * @param {Object} options\n   * @param {Exception} reason\n   * @returns {Promise}\n   */\n  onResponseError(options, reason) {\n    if (reason instanceof DryError && reason.message.match(/Failed to resolve authorization token in KmsMessage request for user/)) {\n      this.webex.logger.error('DRY Request Failed due to kms/test-user flakiness');\n      this.webex.logger.error(reason);\n\n      return this.replay(options, reason);\n    }\n\n    return Promise.reject(reason);\n  }\n\n  /**\n   * Replays the request\n   * @param {Object} options\n   * @param {DryError} reason\n   * @returns {Object}\n   */\n  replay(options, reason) {\n    if (options.replayCount) {\n      options.replayCount += 1;\n    }\n    else {\n      options.replayCount = 1;\n    }\n\n    if (options.replayCount > this.webex.config.maxAuthenticationReplays) {\n      this.webex.logger.error(`kms: failed after ${this.webex.config.maxAuthenticationReplays} replay attempts`);\n\n      return Promise.reject(reason);\n    }\n\n    this.webex.logger.info(`kms: replaying request ${options.replayCount} time`);\n\n    return this.webex.request(options);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}