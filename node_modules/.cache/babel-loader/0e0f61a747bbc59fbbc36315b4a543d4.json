{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _space = require('./space');\n\nvar _space2 = _interopRequireDefault(_space);\n\nvar _device = require('./device');\n\nvar _device2 = _interopRequireDefault(_device);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Lyra = _webexCore.WebexPlugin.extend({\n  /**\n   * @typedef {Object} Endpoint\n   * @property {Object} advertiser\n   * @property {string} advertiser.id\n   * @property {string} advertiser.displayName\n   * @property {string} advertiser.orgId\n   * @property {Object} links\n   * @property {Object} links.addMeToSpace\n   * @property {string} links.addMeToSpace.href\n   * @property {string} links.addMeToSpace.method\n   * @property {Object} links.lyra_space\n   * @property {string} links.lyra_space.href\n   * @property {string} links.lyra_space.method\n   * @property {string} proof\n   * @property {Object} token\n   * @property {string} token.value\n   */\n  namespace: 'Lyra',\n  children: {\n    space: _space2.default,\n    device: _device2.default\n  },\n\n  /**\n   * Get the endpoint information\n   * @param {string} token - ultrasound token decoded\n   * @returns {Promise<Endpoint>}\n   */\n  getAdvertisedEndpoint: function getAdvertisedEndpoint(token) {\n    return this.webex.request({\n      method: 'GET',\n      api: 'proximity',\n      resource: '/ultrasound/advertisements',\n      qs: {\n        token: token\n      }\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n  version: '1.80.172'\n});\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nexports.default = Lyra;","map":{"version":3,"sources":["lyra.js"],"names":["Lyra","namespace","children","space","Space","device","Device","getAdvertisedEndpoint","method","api","resource","qs","token","res"],"mappings":";;;;;;AAIA,IAAA,UAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;;;;;;;;;AAEA,IAAMA,IAAAA,GAAO,UAAA,CAAA,WAAA,CAAA,MAAA,CAAmB;AAC9B;;;;;;;;;;;;;;;;;AAiBAC,EAAAA,SAAAA,EAlB8B,MAAA;AAmB9BC,EAAAA,QAAAA,EAAU;AACRC,IAAAA,KAAAA,EAAOC,OAAAA,CADC,OAAA;AAERC,IAAAA,MAAAA,EAAQC,QAAAA,CAAAA;AAFA,GAnBoB;;AAwB9B;;;;;AAKAC,EAAAA,qBA7B8B,EAAA,SAAA,qBAAA,CAAA,KAAA,EA6BD;AAC3B,WAAO,KAAA,KAAA,CAAA,OAAA,CAAmB;AACxBC,MAAAA,MAAAA,EADwB,KAAA;AAExBC,MAAAA,GAAAA,EAFwB,WAAA;AAGxBC,MAAAA,QAAAA,EAHwB,4BAAA;AAIxBC,MAAAA,EAAAA,EAAI;AACFC,QAAAA,KAAAA,EAAAA;AADE;AAJoB,KAAnB,EAAA,IAAA,CAQC,UAAA,GAAA,EAAA;AAAA,aAASC,GAAAA,CAAT,IAAA;AARR,KAAO,CAAP;AA9B4B,GAAA;AAAA,EAAA,OAAA,EAAA;AAAA,CAAnB,CAAb;AARA;;;;;kBAmDeb,I","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin} from '@webex/webex-core';\nimport Space from './space';\nimport Device from './device';\n\nconst Lyra = WebexPlugin.extend({\n  /**\n   * @typedef {Object} Endpoint\n   * @property {Object} advertiser\n   * @property {string} advertiser.id\n   * @property {string} advertiser.displayName\n   * @property {string} advertiser.orgId\n   * @property {Object} links\n   * @property {Object} links.addMeToSpace\n   * @property {string} links.addMeToSpace.href\n   * @property {string} links.addMeToSpace.method\n   * @property {Object} links.lyra_space\n   * @property {string} links.lyra_space.href\n   * @property {string} links.lyra_space.method\n   * @property {string} proof\n   * @property {Object} token\n   * @property {string} token.value\n   */\n  namespace: 'Lyra',\n  children: {\n    space: Space,\n    device: Device\n  },\n\n  /**\n   * Get the endpoint information\n   * @param {string} token - ultrasound token decoded\n   * @returns {Promise<Endpoint>}\n   */\n  getAdvertisedEndpoint(token) {\n    return this.webex.request({\n      method: 'GET',\n      api: 'proximity',\n      resource: '/ultrasound/advertisements',\n      qs: {\n        token\n      }\n    })\n      .then((res) => res.body);\n  }\n});\n\n\nexport default Lyra;\n"]},"metadata":{},"sourceType":"script"}