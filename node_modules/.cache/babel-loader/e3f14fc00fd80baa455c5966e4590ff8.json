{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nexport default class RecipientIdentifier {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for RecipientIdentifier class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc variant\r\n     */\n    this.variant = getParametersValue(parameters, \"variant\", RecipientIdentifier.defaultValues(\"variant\"));\n    if (\"value\" in parameters)\n      /**\r\n       * @type {*}\r\n       * @desc value\r\n       */\n      this.value = getParametersValue(parameters, \"value\", RecipientIdentifier.defaultValues(\"value\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"variant\":\n        return -1;\n\n      case \"value\":\n        return {};\n\n      default:\n        throw new Error(`Invalid member name for RecipientIdentifier class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"variant\":\n        return memberValue === -1;\n\n      case \"values\":\n        return Object.keys(memberValue).length === 0;\n\n      default:\n        throw new Error(`Invalid member name for RecipientIdentifier class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * RecipientIdentifier ::= CHOICE {\r\n   *    issuerAndSerialNumber IssuerAndSerialNumber,\r\n   *    subjectKeyIdentifier [0] SubjectKeyIdentifier }\r\n   *\r\n   * SubjectKeyIdentifier ::= OCTET STRING\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Choice({\n      value: [IssuerAndSerialNumber.schema({\n        names: {\n          blockName: names.blockName || \"\"\n        }\n      }), new asn1js.Primitive({\n        name: names.blockName || \"\",\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        }\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"blockName\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, RecipientIdentifier.schema({\n      names: {\n        blockName: \"blockName\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for RecipientIdentifier\"); //endregion\n    //region Get internal properties from parsed schema\n\n    if (asn1.result.blockName.idBlock.tagClass === 1) {\n      this.variant = 1;\n      this.value = new IssuerAndSerialNumber({\n        schema: asn1.result.blockName\n      });\n    } else {\n      this.variant = 2;\n      this.value = new asn1js.OctetString({\n        valueHex: asn1.result.blockName.valueBlock.valueHex\n      });\n    } //endregion\n\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    switch (this.variant) {\n      case 1:\n        return this.value.toSchema();\n\n      case 2:\n        return new asn1js.Primitive({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          valueHex: this.value.valueBlock.valueHex\n        });\n\n      default:\n        return new asn1js.Any();\n    } //endregion\n\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const _object = {\n      variant: this.variant\n    };\n    if (this.variant === 1 || this.variant === 2) _object.value = this.value.toJSON();\n    return _object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/RecipientIdentifier.js"],"names":["asn1js","getParametersValue","clearProps","IssuerAndSerialNumber","RecipientIdentifier","constructor","parameters","variant","defaultValues","value","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","Object","keys","length","names","Choice","blockName","Primitive","name","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","OctetString","valueHex","valueBlock","toSchema","Any","toJSON","_object"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,SAASC,kBAAT,EAA6BC,UAA7B,QAA+C,SAA/C;AACA,OAAOC,qBAAP,MAAkC,4BAAlC,C,CACA;;AACA;;;;AAGA,eAAe,MAAMC,mBAAN,CACf;AACC;;AACA;;;;;AAKAC,EAAAA,WAAW,CAACC,UAAU,GAAG,EAAd,EACX;AACC;;AACA;;;;AAIA,SAAKC,OAAL,GAAeN,kBAAkB,CAACK,UAAD,EAAa,SAAb,EAAwBF,mBAAmB,CAACI,aAApB,CAAkC,SAAlC,CAAxB,CAAjC;AAEA,QAAG,WAAWF,UAAd;AACC;;;;AAIA,WAAKG,KAAL,GAAaR,kBAAkB,CAACK,UAAD,EAAa,OAAb,EAAsBF,mBAAmB,CAACI,aAApB,CAAkC,OAAlC,CAAtB,CAA/B,CAbF,CAcC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKI,UAAL,CAAgBJ,UAAU,CAACK,MAA3B,EAlBF,CAmBC;AACA,GA5BF,CA6BC;;AACA;;;;;;AAIA,SAAOH,aAAP,CAAqBI,UAArB,EACA;AACC,YAAOA,UAAP;AAEC,WAAK,SAAL;AACC,eAAQ,CAAC,CAAT;;AACD,WAAK,OAAL;AACC,eAAO,EAAP;;AACD;AACC,cAAM,IAAIC,KAAJ,CAAW,sDAAqDD,UAAW,EAA3E,CAAN;AAPF;AASA,GA7CF,CA8CC;;AACA;;;;;;;AAKA,SAAOE,kBAAP,CAA0BF,UAA1B,EAAsCG,WAAtC,EACA;AACC,YAAOH,UAAP;AAEC,WAAK,SAAL;AACC,eAAQG,WAAW,KAAM,CAAC,CAA1B;;AACD,WAAK,QAAL;AACC,eAAQC,MAAM,CAACC,IAAP,CAAYF,WAAZ,EAAyBG,MAAzB,KAAoC,CAA5C;;AACD;AACC,cAAM,IAAIL,KAAJ,CAAW,sDAAqDD,UAAW,EAA3E,CAAN;AAPF;AASA,GA/DF,CAgEC;;AACA;;;;;;;;;;;;;;;;;AAeA,SAAOD,MAAP,CAAcL,UAAU,GAAG,EAA3B,EACA;AACC;;;;AAIA,UAAMa,KAAK,GAAGlB,kBAAkB,CAACK,UAAD,EAAa,OAAb,EAAsB,EAAtB,CAAhC;AAEA,WAAQ,IAAIN,MAAM,CAACoB,MAAX,CAAkB;AACzBX,MAAAA,KAAK,EAAE,CACNN,qBAAqB,CAACQ,MAAtB,CAA6B;AAC5BQ,QAAAA,KAAK,EAAE;AACNE,UAAAA,SAAS,EAAGF,KAAK,CAACE,SAAN,IAAmB;AADzB;AADqB,OAA7B,CADM,EAMN,IAAIrB,MAAM,CAACsB,SAAX,CAAqB;AACpBC,QAAAA,IAAI,EAAGJ,KAAK,CAACE,SAAN,IAAmB,EADN;AAEpBG,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AACK;AACbC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL;AAFW,OAArB,CANM;AADkB,KAAlB,CAAR;AAgBA,GAxGF,CAyGC;;AACA;;;;;;AAIAhB,EAAAA,UAAU,CAACC,MAAD,EACV;AACC;AACAT,IAAAA,UAAU,CAACS,MAAD,EAAS,CAClB,WADkB,CAAT,CAAV,CAFD,CAKC;AAEA;;AACA,UAAMgB,IAAI,GAAG3B,MAAM,CAAC4B,aAAP,CAAqBjB,MAArB,EACZA,MADY,EAEZP,mBAAmB,CAACO,MAApB,CAA2B;AAC1BQ,MAAAA,KAAK,EAAE;AACNE,QAAAA,SAAS,EAAE;AADL;AADmB,KAA3B,CAFY,CAAb;AASA,QAAGM,IAAI,CAACE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIhB,KAAJ,CAAU,6EAAV,CAAN,CAlBF,CAmBC;AAEA;;AACA,QAAGc,IAAI,CAACG,MAAL,CAAYT,SAAZ,CAAsBG,OAAtB,CAA8BC,QAA9B,KAA2C,CAA9C,EACA;AACC,WAAKlB,OAAL,GAAe,CAAf;AACA,WAAKE,KAAL,GAAa,IAAIN,qBAAJ,CAA0B;AAAEQ,QAAAA,MAAM,EAAEgB,IAAI,CAACG,MAAL,CAAYT;AAAtB,OAA1B,CAAb;AACA,KAJD,MAMA;AACC,WAAKd,OAAL,GAAe,CAAf;AACA,WAAKE,KAAL,GAAa,IAAIT,MAAM,CAAC+B,WAAX,CAAuB;AAAEC,QAAAA,QAAQ,EAAEL,IAAI,CAACG,MAAL,CAAYT,SAAZ,CAAsBY,UAAtB,CAAiCD;AAA7C,OAAvB,CAAb;AACA,KA/BF,CAgCC;;AACA,GAhJF,CAiJC;;AACA;;;;;;AAIAE,EAAAA,QAAQ,GACR;AACC;AACA,YAAO,KAAK3B,OAAZ;AAEC,WAAK,CAAL;AACC,eAAO,KAAKE,KAAL,CAAWyB,QAAX,EAAP;;AACD,WAAK,CAAL;AACC,eAAO,IAAIlC,MAAM,CAACsB,SAAX,CAAqB;AAC3BE,UAAAA,OAAO,EAAE;AACRC,YAAAA,QAAQ,EAAE,CADF;AACK;AACbC,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,WADkB;AAK3BM,UAAAA,QAAQ,EAAE,KAAKvB,KAAL,CAAWwB,UAAX,CAAsBD;AALL,SAArB,CAAP;;AAOD;AACC,eAAO,IAAIhC,MAAM,CAACmC,GAAX,EAAP;AAbF,KAFD,CAiBC;;AACA,GAzKF,CA0KC;;AACA;;;;;;AAIAC,EAAAA,MAAM,GACN;AACC,UAAMC,OAAO,GAAG;AACf9B,MAAAA,OAAO,EAAE,KAAKA;AADC,KAAhB;AAIA,QAAI,KAAKA,OAAL,KAAiB,CAAlB,IAAyB,KAAKA,OAAL,KAAiB,CAA7C,EACC8B,OAAO,CAAC5B,KAAR,GAAgB,KAAKA,KAAL,CAAW2B,MAAX,EAAhB;AAED,WAAOC,OAAP;AACA,GAzLF,CA0LC;;;AA1LD,C,CA4LA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class RecipientIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RecipientIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc variant\r\n\t\t */\r\n\t\tthis.variant = getParametersValue(parameters, \"variant\", RecipientIdentifier.defaultValues(\"variant\"));\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc value\r\n\t\t\t */\r\n\t\t\tthis.value = getParametersValue(parameters, \"value\", RecipientIdentifier.defaultValues(\"value\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"variant\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"value\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RecipientIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"variant\":\r\n\t\t\t\treturn (memberValue === (-1));\r\n\t\t\tcase \"values\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RecipientIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RecipientIdentifier ::= CHOICE {\r\n\t *    issuerAndSerialNumber IssuerAndSerialNumber,\r\n\t *    subjectKeyIdentifier [0] SubjectKeyIdentifier }\r\n\t *\r\n\t * SubjectKeyIdentifier ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Choice({\r\n\t\t\tvalue: [\r\n\t\t\t\tIssuerAndSerialNumber.schema({\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: (names.blockName || \"\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.blockName || \"\"),\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"blockName\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRecipientIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"blockName\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RecipientIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(asn1.result.blockName.idBlock.tagClass === 1)\r\n\t\t{\r\n\t\t\tthis.variant = 1;\r\n\t\t\tthis.value = new IssuerAndSerialNumber({ schema: asn1.result.blockName });\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.variant = 2;\r\n\t\t\tthis.value = new asn1js.OctetString({ valueHex: asn1.result.blockName.valueBlock.valueHex }) ;\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tswitch(this.variant)\r\n\t\t{\r\n\t\t\tcase 1:\r\n\t\t\t\treturn this.value.toSchema();\r\n\t\t\tcase 2:\r\n\t\t\t\treturn new asn1js.Primitive({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalueHex: this.value.valueBlock.valueHex\r\n\t\t\t\t});\r\n\t\t\tdefault:\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tvariant: this.variant\r\n\t\t};\r\n\r\n\t\tif((this.variant === 1) || (this.variant === 2))\r\n\t\t\t_object.value = this.value.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}