{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _cloneDeep2 = require('lodash/cloneDeep');\n\nvar _cloneDeep3 = _interopRequireDefault(_cloneDeep2);\n\nvar _common = require('@webex/common');\n\nvar _webexCore = require('@webex/webex-core');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar debug = require('debug')('memberships');\n/**\n * @typedef {Object} MembershipObject\n * @property {string} id - Unique identifier for the membership\n * @property {string} roomId - The room ID\n * @property {string} personId - The person ID\n * @property {email} personEmail - The email address of the person / room member\n * @property {boolean} isModerator - Indicates whether the specified person should be a room moderator\n * @property {boolean} isMonitor - Indicates whether the specified member is a room monitor\n * @property {isoDate} created - The date and time that this membership was created\n */\n\n/**\n * Memberships represent a person's relationship to a room. Use this API to list\n * members of any room that you're in or create memberships to invite someone\n * to a room. Memberships can also be updated to make someone a moderator\n * or deleted to remove them from the room.\n * @class\n * @name Memberships\n */\n\n\nvar Memberships = _webexCore.WebexPlugin.extend({\n  /**\n   * Register to listen for incoming membership events\n   * This is an alternate approach to registering for membership webhooks.\n   * The events passed to any registered handlers will be similar to the webhook JSON,\n   * but will omit webhook specific fields such as name, secret, url, etc.\n   * To utilize the `listen()` method, the authorization token used\n   * will need to have `spark:all` and `spark:kms` scopes enabled.\n   * Note that by configuring your application to enable or disable `spark:all`\n   * via its configuration page will also enable or disable `spark:kms`.\n   * See the <a href=\"https://js.samples.s4d.io/browser-socket/\">Sample App</a>\n   * for more details.\n   * @instance\n   * @memberof Memberships\n   * @returns {Promise}\n   * @example\n   * webex.memberships.listen()\n   *   .then(() => {\n   *     console.log('listening to membership events');\n   *     webex.memberships.on('created', (event) => {\n   *       console.log(`Got a membership:created event:\\n${event}`);\n   *     }\n   *     webex.memberships.on('updated', (event) => {\n   *        console.log(`Got a membership:updated event:\\n${event}`);\n   *     }\n   *     webex.memberships.on('seen', (event) => {\n   *       // This represents a \"read receipt\" and will include a\n   *       // lastSeenId for the message this member has just \"read\",\n   *       // There is currently no equivelent webhook for this event.\n   *       console.log(`Got a membership:seen event:\\n${event}`);\n   *     }\n   *     webex.memberships.on('deleted', (event) =>  => {\n   *       console.log(`Got a membership:created event:\\n${event}`);\n   *     }\n   *   })\n   *   .catch((e) => console.error(`Unable to register for membership events: ${e}`));\n   * // App logic goes here...\n   * // Later when it is time to clean up\n   * webex.memberships.stopListening();\n   * webex.memberships.off('created');\n   * webex.memberships.off('updated');\n   * webex.memberships.off('seen');\n   * webex.memberships.off('deleted');\n    */\n  listen: function listen() {\n    var _this = this; // Create a common envelope that we will wrap all events in\n\n\n    return (0, _common.createEventEnvelope)(this.webex, _common.SDK_EVENT.EXTERNAL.RESOURCE.MEMBERSHIPS).then(function (envelope) {\n      _this.eventEnvelope = envelope; // Register to listen to events\n\n      return _this.webex.internal.mercury.connect().then(function () {\n        _this.listenTo(_this.webex.internal.mercury, _common.SDK_EVENT.INTERNAL.TEAMS_ACTIVITY, function (event) {\n          return _this.onWebexApiEvent(event);\n        });\n      });\n    });\n  },\n\n  /**\n   * Adds a person to a room. The person can be added by ID (`personId`) or by\n   * Email Address (`personEmail`). The person can be optionally added to the room\n   * as a moderator.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * webex.rooms.create({title: 'Create Membership Example'})\n   *   .then(function(room) {\n   *     return webex.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *    });\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert(membership.id);\n   *     assert(membership.roomId);\n   *     assert(membership.personId);\n   *     assert(membership.personEmail);\n   *     assert('isModerator' in membership);\n   *     assert('isMonitor' in membership);\n   *     assert(membership.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create: function create(membership) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'memberships',\n      body: membership\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Returns a single membership.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * var membership;\n   * webex.rooms.create({title: 'Get Membership Example'})\n   *   .then(function(room) {\n   *     return webex.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return webex.memberships.get(m.id);\n   *   })\n   *   .then(function(m) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(m, membership);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get: function get(membership) {\n    var id = membership.id || membership;\n    return this.request({\n      service: 'hydra',\n      resource: 'memberships/' + id\n    }).then(function (res) {\n      return res.body.items || res.body;\n    });\n  },\n\n  /**\n   * Returns a list of memberships. In most cases the results will only contain\n   * rooms that the authentiated user is a member of. You can filter the results\n   * by room to list people in a room or by person to find rooms that a\n   * specific person is a member of.\n   * @instance\n   * @memberof Memberships\n   * @param {Object} options\n   * @param {string} options.personId\n   * @param {string} options.personEmail\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<MembershipObject>>}\n   * @example\n   * var room;\n   * webex.rooms.create({title: 'List Membership Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 2);\n   *     for (var i = 0; i < memberships.length; i+= 1) {\n   *       assert.equal(memberships.items[i].roomId, room.id);\n   *     }\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list: function list(options) {\n    var _this2 = this;\n\n    return this.request({\n      service: 'hydra',\n      resource: 'memberships',\n      qs: options\n    }).then(function (res) {\n      return new _webexCore.Page(res, _this2.webex);\n    });\n  },\n\n  /**\n   * Returns a list of memberships with details about the lastSeenId for each\n   * user, allowing a client to indicate \"read status\" in a space GUI\n   *\n   * This differs from the memberships.list() function in the following ways:\n   *  -- it accepts only a room or object with a valid roomId\n   *  -- no other options, eg: max, are considered\n   *  -- results are not paginated\n   *  -- memberships in the return do not include the\n   *     \"created\", \"isRoomHidden\", fields\n   *  -- memberships in the return do include the new\n   *    \"lastSeenId\", and \"lastSeenDate\" fields\n   *     these will not exist if the member has never \"seen\" the space\n   *\n   * In general this function should be used only when the\n   * client needs to access read status info.\n   *\n   * This function may be deprecated when this info is provided in the membership\n   * objects returned in the list function.\n   *\n   *\n   * @instance\n   * @memberof Memberships\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @returns {Promise<MembershipObjectList>}\n   */\n  listWithReadStatus: function listWithReadStatus(options) {\n    var _this3 = this;\n\n    var deconstructedId = (0, _common.deconstructHydraId)(options.roomId);\n    var conversation = {\n      id: deconstructedId.id,\n      cluster: deconstructedId.cluster\n    };\n    return (0, _common.ensureMyIdIsAvailable)(this.webex).then(function () {\n      return (0, _common.ensureConvoAvailability)(_this3.webex).then(function () {\n        return _this3.webex.internal.conversation.get(conversation, {\n          participantAckFilter: 'all',\n          // show lastAck info for each participant\n          activitiesLimit: 0 // don't send the whole history of activity\n\n        }).then(function (resp) {\n          try {\n            // We keep track of the last read message by each user\n            var roomUUID = resp.id;\n            var roomId = (0, _common.buildHydraRoomId)(roomUUID);\n            var particpants = resp.participants.items;\n            var lastReadInfo = {\n              items: []\n            };\n            var roomType = (0, _common.getHydraRoomType)(resp.tags);\n            var myId = _this3.webex.internal.me.id;\n            var isRoomHidden = resp.tags.includes(_common.SDK_EVENT.INTERNAL.ACTIVITY_TAG.HIDDEN);\n\n            for (var i = 0; i < particpants.length; i += 1) {\n              var participant = particpants[i];\n              var participantInfo = {\n                id: (0, _common.buildHydraMembershipId)(participant.entryUUID, roomUUID),\n                roomId: roomId,\n                personId: (0, _common.buildHydraPersonId)(participant.entryUUID),\n                personEmail: participant.entryEmailAddress || participant.entryEmail,\n                personDisplayName: participant.displayName,\n                personOrgId: (0, _common.buildHydraOrgId)(participant.orgId),\n                isMonitor: false,\n                // deprecated, but included for completeness\n                roomType: roomType // created is not available in the conversations payload\n\n              };\n\n              if (isRoomHidden && participantInfo.personId === myId) {\n                participantInfo.isRoomHidden = isRoomHidden;\n              }\n\n              if ('roomProperties' in participant) {\n                if ('lastSeenActivityDate' in participant.roomProperties) {\n                  participantInfo.lastSeenId = (0, _common.buildHydraMessageId)(participant.roomProperties.lastSeenActivityUUID);\n                  participantInfo.lastSeenDate = participant.roomProperties.lastSeenActivityDate;\n                }\n\n                if ('isModerator' in participant.roomProperties) {\n                  participantInfo.isModerator = participant.roomProperties.isModerator;\n                }\n              }\n\n              lastReadInfo.items.push(participantInfo);\n            }\n\n            return _promise2.default.resolve(lastReadInfo);\n          } catch (e) {\n            return _promise2.default.reject(e);\n          }\n        });\n      });\n    });\n  },\n\n  /**\n   * Deletes a single membership.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise}\n   * @example\n   * var membership, room;\n   * webex.rooms.create({title: 'Remove Membership Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 2);\n   *     return webex.memberships.remove(membership);\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 1);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove: function remove(membership) {\n    var id = membership.id || membership;\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: 'memberships/' + id\n    }).then(function (res) {\n      // Firefox has some issues with 204s and/or DELETE. This should move to\n      // http-core\n      if (res.statusCode === 204) {\n        return undefined;\n      }\n\n      return res.body;\n    });\n  },\n\n  /**\n   * Used to update a single membership's properties\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * var membership, room;\n   * webex.rooms.create({title: 'Memberships Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     membership = memberships.items[0];\n   *     var assert = require('assert');\n   *     assert.equal(membership.isModerator, false);\n   *     membership.isModerator = true;\n   *     return webex.memberships.update(membership);\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.get(membership.id);\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert.equal(membership.isModerator, true);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  update: function update(membership) {\n    var id = membership.id || membership;\n    return this.request({\n      method: 'PUT',\n      service: 'hydra',\n      resource: 'memberships/' + id,\n      body: membership\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Updates the lastSeenId attribute of a membership.\n   * Call this method to send a \"read receipt\" for a given message.\n   * This will update the lastSeenId for the user's membership in\n   * space where the message is.\n   * @instance\n   * @memberof Memberships\n   * @param {string} message\n   * @returns {Promise<MembershipObject>}\n   */\n  updateLastSeen: function updateLastSeen(message) {\n    var _this4 = this;\n\n    var activity = {\n      id: (0, _common.deconstructHydraId)(message.id).id\n    };\n    var deconstructedId = (0, _common.deconstructHydraId)(message.roomId);\n    var conversation = {\n      id: deconstructedId.id,\n      cluster: deconstructedId.cluster\n    };\n    return (0, _common.ensureConvoAvailability)(this.webex).then(function () {\n      return _this4.webex.internal.conversation.acknowledge(conversation, activity).then(function (ack) {\n        return {\n          lastSeenId: (0, _common.buildHydraMessageId)(ack.object.id),\n          id: (0, _common.buildHydraMembershipId)(ack.actor.entryUUID, ack.target.id),\n          personId: (0, _common.buildHydraPersonId)(ack.actor.entryUUID),\n          personEmail: ack.actor.emailAddress || ack.actor.entryEmail,\n          personDisplayName: ack.actor.displayName,\n          personOrgId: (0, _common.buildHydraOrgId)(ack.actor.orgId),\n          roomId: (0, _common.buildHydraRoomId)(ack.target.id),\n          roomType: (0, _common.getHydraRoomType)(ack.target.tags),\n          isRoomHidden: false,\n          // any activity unhides a space.\n          isMonitor: false,\n          // deprecated, returned for back compat\n          created: ack.published\n        };\n      });\n    });\n  },\n\n  /**\n   * This function is called when an internal membership events fires,\n   * if the user registered for these events with the public listen() method.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Memberships\n   * @param {Object} event\n   * @returns {void}\n   */\n  onWebexApiEvent: function onWebexApiEvent(event) {\n    var _this5 = this;\n\n    var activity = event.data.activity;\n    /* eslint-disable no-case-declarations */\n\n    switch (activity.verb) {\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.CREATE:\n        var membershipCreatedEventDataArray = activity.object.participants.items.map(function (participant) {\n          var output = (0, _cloneDeep3.default)(activity);\n          output.target = (0, _cloneDeep3.default)(activity.object);\n          output.object = (0, _cloneDeep3.default)(participant);\n          return _this5.getMembershipEvent(output, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n        });\n        membershipCreatedEventDataArray.forEach(function (data) {\n          if (data) {\n            debug('membership \"created\" payload: ' + (0, _stringify2.default)(data));\n\n            _this5.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, data);\n          }\n        });\n        break;\n\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.ADD:\n        var membershipCreatedEventData = this.getMembershipEvent(activity, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n\n        if (membershipCreatedEventData) {\n          debug('membership \"created\" payload:             ' + (0, _stringify2.default)(membershipCreatedEventData));\n          this.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, membershipCreatedEventData);\n        }\n\n        break;\n\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.LEAVE:\n        var membershipDeletedEventData = this.getMembershipEvent(activity, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED);\n\n        if (membershipDeletedEventData) {\n          debug('membership \"deleted\" payload:             ' + (0, _stringify2.default)(membershipDeletedEventData));\n          this.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED, membershipDeletedEventData);\n        }\n\n        break;\n\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.ADD_MODERATOR:\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.REMOVE_MODERATOR:\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE:\n        var membershipUpdatedEventData = this.getMembershipEvent(activity, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED);\n\n        if (membershipUpdatedEventData) {\n          debug('membership \"updated\" payload:             ' + (0, _stringify2.default)(membershipUpdatedEventData));\n          this.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED, membershipUpdatedEventData);\n        }\n\n        break;\n\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE:\n        var membershipSeenEventData = this.getMembershipEvent(activity, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.SEEN);\n\n        if (membershipSeenEventData) {\n          debug('membership \"updated\" payload:             ' + (0, _stringify2.default)(membershipSeenEventData));\n          this.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.SEEN, membershipSeenEventData);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  },\n\n  /**\n   * Constructs the data object for an event on the memberships resource,\n   * adhering to Hydra's Webehook data structure memberships.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Memberships\n   * @param {Object} activity from mercury\n   * @param {Object} event type of \"webhook\" event\n   * @returns {Object} constructed event\n   */\n  getMembershipEvent: function getMembershipEvent(activity, event) {\n    try {\n      var sdkEvent = (0, _cloneDeep3.default)(this.eventEnvelope);\n      var member = void 0;\n      var space = void 0;\n      sdkEvent.event = event;\n      sdkEvent.data.created = activity.published;\n      sdkEvent.actorId = (0, _common.buildHydraPersonId)(activity.actor.entryUUID);\n\n      if (activity.verb !== _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE) {\n        sdkEvent.data.roomId = (0, _common.buildHydraRoomId)(activity.target.id);\n        sdkEvent.data.roomType = (0, _common.getHydraRoomType)(activity.target.tags);\n        sdkEvent.data.isRoomHidden = false; // any activity unhides a space.\n      } else {\n        sdkEvent.data.roomId = (0, _common.buildHydraRoomId)(activity.object.id);\n        sdkEvent.data.roomType = _common.SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT; // currently hidden attribute is only set on 1-1\n\n        sdkEvent.data.isRoomHidden = true;\n      }\n\n      if (activity.verb !== _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE) {\n        if (activity.object.roomProperties && activity.object.roomProperties.isModerator) {\n          sdkEvent.data.isModerator = true;\n        } else {\n          sdkEvent.data.isModerator = false;\n        }\n      } // This is deprecated but still sent in the webhooks\n      // We won't send it for our new SDK events\n      // sdkEvent.data.isMonitor = false;\n\n\n      if (activity.verb === _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE) {\n        // For a read receipt the person is the \"actor\" or the one who did the reading\n        member = _common.SDK_EVENT.INTERNAL.ACTIVITY_FIELD.ACTOR; // The space with the read message is the \"target\"\n\n        space = _common.SDK_EVENT.INTERNAL.ACTIVITY_FIELD.TARGET; // And the \"object\" is the message that was last seen\n\n        sdkEvent.data.lastSeenId = (0, _common.buildHydraMessageId)(activity.object.id);\n      } else if (activity.verb === _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE) {\n        // For a hide activity the person is also the \"actor\"\n        member = _common.SDK_EVENT.INTERNAL.ACTIVITY_FIELD.ACTOR; // But the space is now the \"object\"\n\n        space = _common.SDK_EVENT.INTERNAL.ACTIVITY_FIELD.OBJECT;\n      } else {\n        // For most memberships events the person is the 'object\"\n        member = _common.SDK_EVENT.INTERNAL.ACTIVITY_FIELD.OBJECT; // and the space is the \"target\"\n\n        space = _common.SDK_EVENT.INTERNAL.ACTIVITY_FIELD.TARGET;\n      }\n\n      sdkEvent.data.id = (0, _common.buildHydraMembershipId)(activity[member].entryUUID, activity[space].id);\n      sdkEvent.data.personId = (0, _common.buildHydraPersonId)(activity[member].entryUUID);\n      sdkEvent.data.personEmail = activity[member].emailAddress || activity[member].entryEmail;\n      sdkEvent.data.personDisplayName = activity[member].displayName;\n      sdkEvent.data.personOrgId = (0, _common.buildHydraOrgId)(activity[member].orgId);\n      return sdkEvent;\n    } catch (e) {\n      this.webex.logger.error('Unable to generate SDK event from mercury \\'socket activity for memberships:' + event + ' event: ' + e.message);\n      return null;\n    }\n  },\n  version: '1.80.172'\n});\n\nexports.default = Memberships;","map":{"version":3,"sources":["memberships.js"],"names":["debug","require","Memberships","listen","SDK_EVENT","create","method","service","resource","body","membership","res","get","id","list","qs","options","Page","listWithReadStatus","deconstructedId","conversation","cluster","participantAckFilter","activitiesLimit","roomUUID","resp","roomId","particpants","lastReadInfo","items","roomType","myId","isRoomHidden","i","participant","participantInfo","personId","personEmail","personDisplayName","personOrgId","isMonitor","remove","update","updateLastSeen","activity","message","lastSeenId","ack","created","published","onWebexApiEvent","event","membershipCreatedEventDataArray","output","membershipCreatedEventData","membershipDeletedEventData","membershipUpdatedEventData","membershipSeenEventData","getMembershipEvent","sdkEvent","member","space","e"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {\n  ensureConvoAvailability,\n  SDK_EVENT,\n  createEventEnvelope,\n  ensureMyIdIsAvailable,\n  buildHydraMembershipId,\n  buildHydraMessageId,\n  buildHydraOrgId,\n  buildHydraPersonId,\n  buildHydraRoomId,\n  getHydraRoomType,\n  deconstructHydraId\n} from '@webex/common';\nimport {WebexPlugin, Page} from '@webex/webex-core';\nimport {cloneDeep} from 'lodash';\n\nconst debug = require('debug')('memberships');\n\n/**\n * @typedef {Object} MembershipObject\n * @property {string} id - Unique identifier for the membership\n * @property {string} roomId - The room ID\n * @property {string} personId - The person ID\n * @property {email} personEmail - The email address of the person / room member\n * @property {boolean} isModerator - Indicates whether the specified person should be a room moderator\n * @property {boolean} isMonitor - Indicates whether the specified member is a room monitor\n * @property {isoDate} created - The date and time that this membership was created\n */\n\n/**\n * Memberships represent a person's relationship to a room. Use this API to list\n * members of any room that you're in or create memberships to invite someone\n * to a room. Memberships can also be updated to make someone a moderator\n * or deleted to remove them from the room.\n * @class\n * @name Memberships\n */\nconst Memberships = WebexPlugin.extend({\n  /**\n   * Register to listen for incoming membership events\n   * This is an alternate approach to registering for membership webhooks.\n   * The events passed to any registered handlers will be similar to the webhook JSON,\n   * but will omit webhook specific fields such as name, secret, url, etc.\n   * To utilize the `listen()` method, the authorization token used\n   * will need to have `spark:all` and `spark:kms` scopes enabled.\n   * Note that by configuring your application to enable or disable `spark:all`\n   * via its configuration page will also enable or disable `spark:kms`.\n   * See the <a href=\"https://js.samples.s4d.io/browser-socket/\">Sample App</a>\n   * for more details.\n   * @instance\n   * @memberof Memberships\n   * @returns {Promise}\n   * @example\n   * webex.memberships.listen()\n   *   .then(() => {\n   *     console.log('listening to membership events');\n   *     webex.memberships.on('created', (event) => {\n   *       console.log(`Got a membership:created event:\\n${event}`);\n   *     }\n   *     webex.memberships.on('updated', (event) => {\n   *        console.log(`Got a membership:updated event:\\n${event}`);\n   *     }\n   *     webex.memberships.on('seen', (event) => {\n   *       // This represents a \"read receipt\" and will include a\n   *       // lastSeenId for the message this member has just \"read\",\n   *       // There is currently no equivelent webhook for this event.\n   *       console.log(`Got a membership:seen event:\\n${event}`);\n   *     }\n   *     webex.memberships.on('deleted', (event) =>  => {\n   *       console.log(`Got a membership:created event:\\n${event}`);\n   *     }\n   *   })\n   *   .catch((e) => console.error(`Unable to register for membership events: ${e}`));\n   * // App logic goes here...\n   * // Later when it is time to clean up\n   * webex.memberships.stopListening();\n   * webex.memberships.off('created');\n   * webex.memberships.off('updated');\n   * webex.memberships.off('seen');\n   * webex.memberships.off('deleted');\n\n   */\n  listen() {\n    // Create a common envelope that we will wrap all events in\n    return createEventEnvelope(this.webex,\n      SDK_EVENT.EXTERNAL.RESOURCE.MEMBERSHIPS)\n      .then((envelope) => {\n        this.eventEnvelope = envelope;\n\n        // Register to listen to events\n        return this.webex.internal.mercury.connect().then(() => {\n          this.listenTo(this.webex.internal.mercury,\n            SDK_EVENT.INTERNAL.TEAMS_ACTIVITY,\n            (event) => this.onWebexApiEvent(event));\n        });\n      });\n  },\n\n  /**\n   * Adds a person to a room. The person can be added by ID (`personId`) or by\n   * Email Address (`personEmail`). The person can be optionally added to the room\n   * as a moderator.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * webex.rooms.create({title: 'Create Membership Example'})\n   *   .then(function(room) {\n   *     return webex.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *    });\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert(membership.id);\n   *     assert(membership.roomId);\n   *     assert(membership.personId);\n   *     assert(membership.personEmail);\n   *     assert('isModerator' in membership);\n   *     assert('isMonitor' in membership);\n   *     assert(membership.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(membership) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'memberships',\n      body: membership\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single membership.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * var membership;\n   * webex.rooms.create({title: 'Get Membership Example'})\n   *   .then(function(room) {\n   *     return webex.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return webex.memberships.get(m.id);\n   *   })\n   *   .then(function(m) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(m, membership);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      service: 'hydra',\n      resource: `memberships/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of memberships. In most cases the results will only contain\n   * rooms that the authentiated user is a member of. You can filter the results\n   * by room to list people in a room or by person to find rooms that a\n   * specific person is a member of.\n   * @instance\n   * @memberof Memberships\n   * @param {Object} options\n   * @param {string} options.personId\n   * @param {string} options.personEmail\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<MembershipObject>>}\n   * @example\n   * var room;\n   * webex.rooms.create({title: 'List Membership Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 2);\n   *     for (var i = 0; i < memberships.length; i+= 1) {\n   *       assert.equal(memberships.items[i].roomId, room.id);\n   *     }\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'memberships',\n      qs: options\n    })\n      .then((res) => new Page(res, this.webex));\n  },\n\n  /**\n   * Returns a list of memberships with details about the lastSeenId for each\n   * user, allowing a client to indicate \"read status\" in a space GUI\n   *\n   * This differs from the memberships.list() function in the following ways:\n   *  -- it accepts only a room or object with a valid roomId\n   *  -- no other options, eg: max, are considered\n   *  -- results are not paginated\n   *  -- memberships in the return do not include the\n   *     \"created\", \"isRoomHidden\", fields\n   *  -- memberships in the return do include the new\n   *    \"lastSeenId\", and \"lastSeenDate\" fields\n   *     these will not exist if the member has never \"seen\" the space\n   *\n   * In general this function should be used only when the\n   * client needs to access read status info.\n   *\n   * This function may be deprecated when this info is provided in the membership\n   * objects returned in the list function.\n   *\n   *\n   * @instance\n   * @memberof Memberships\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @returns {Promise<MembershipObjectList>}\n   */\n  listWithReadStatus(options) {\n    const deconstructedId = deconstructHydraId(options.roomId);\n    const conversation = {\n      id: deconstructedId.id,\n      cluster: deconstructedId.cluster\n    };\n\n    return ensureMyIdIsAvailable(this.webex)\n      .then(() => ensureConvoAvailability(this.webex)\n        .then(() => this.webex.internal.conversation.get(conversation,\n          {\n            participantAckFilter: 'all', // show lastAck info for each participant\n            activitiesLimit: 0 // don't send the whole history of activity\n          })\n          .then((resp) => {\n            try {\n              // We keep track of the last read message by each user\n              const roomUUID = resp.id;\n              const roomId = buildHydraRoomId(roomUUID);\n              const particpants = resp.participants.items;\n              const lastReadInfo = {items: []};\n              const roomType = getHydraRoomType(resp.tags);\n              const myId = this.webex.internal.me.id;\n              const isRoomHidden = resp.tags.includes(SDK_EVENT.INTERNAL.ACTIVITY_TAG.HIDDEN);\n\n              for (let i = 0; i < particpants.length; i += 1) {\n                const participant = particpants[i];\n                const participantInfo = {\n                  id: buildHydraMembershipId(participant.entryUUID, roomUUID),\n                  roomId,\n                  personId: buildHydraPersonId(participant.entryUUID),\n                  personEmail: participant.entryEmailAddress ||\n                    participant.entryEmail,\n                  personDisplayName: participant.displayName,\n                  personOrgId: buildHydraOrgId(participant.orgId),\n                  isMonitor: false, // deprecated, but included for completeness\n                  roomType\n                  // created is not available in the conversations payload\n                };\n\n                if ((isRoomHidden) && (participantInfo.personId === myId)) {\n                  participantInfo.isRoomHidden = isRoomHidden;\n                }\n\n                if ('roomProperties' in participant) {\n                  if ('lastSeenActivityDate' in participant.roomProperties) {\n                    participantInfo.lastSeenId =\n                      buildHydraMessageId(participant.roomProperties.lastSeenActivityUUID);\n                    participantInfo.lastSeenDate =\n                      participant.roomProperties.lastSeenActivityDate;\n                  }\n                  if ('isModerator' in participant.roomProperties) {\n                    participantInfo.isModerator = participant.roomProperties.isModerator;\n                  }\n                }\n\n                lastReadInfo.items.push(participantInfo);\n              }\n\n              return Promise.resolve(lastReadInfo);\n            }\n            catch (e) {\n              return Promise.reject(e);\n            }\n          })));\n  },\n\n  /**\n   * Deletes a single membership.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise}\n   * @example\n   * var membership, room;\n   * webex.rooms.create({title: 'Remove Membership Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 2);\n   *     return webex.memberships.remove(membership);\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 1);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: `memberships/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n\n        return res.body;\n      });\n  },\n\n  /**\n   * Used to update a single membership's properties\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * var membership, room;\n   * webex.rooms.create({title: 'Memberships Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     membership = memberships.items[0];\n   *     var assert = require('assert');\n   *     assert.equal(membership.isModerator, false);\n   *     membership.isModerator = true;\n   *     return webex.memberships.update(membership);\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.get(membership.id);\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert.equal(membership.isModerator, true);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  update(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      method: 'PUT',\n      service: 'hydra',\n      resource: `memberships/${id}`,\n      body: membership\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Updates the lastSeenId attribute of a membership.\n   * Call this method to send a \"read receipt\" for a given message.\n   * This will update the lastSeenId for the user's membership in\n   * space where the message is.\n   * @instance\n   * @memberof Memberships\n   * @param {string} message\n   * @returns {Promise<MembershipObject>}\n   */\n  updateLastSeen(message) {\n    const activity = {\n      id: deconstructHydraId(message.id).id\n    };\n    const deconstructedId = deconstructHydraId(message.roomId);\n    const conversation = {\n      id: deconstructedId.id,\n      cluster: deconstructedId.cluster\n    };\n\n    return ensureConvoAvailability(this.webex)\n      .then(() => this.webex.internal.conversation.acknowledge(conversation, activity)\n        .then((ack) => ({\n          lastSeenId: buildHydraMessageId(ack.object.id),\n          id: buildHydraMembershipId(ack.actor.entryUUID,\n            ack.target.id),\n          personId: buildHydraPersonId(ack.actor.entryUUID),\n          personEmail: ack.actor.emailAddress || ack.actor.entryEmail,\n          personDisplayName: ack.actor.displayName,\n          personOrgId: buildHydraOrgId(ack.actor.orgId),\n          roomId: buildHydraRoomId(ack.target.id),\n          roomType: getHydraRoomType(ack.target.tags),\n          isRoomHidden: false, // any activity unhides a space.\n          isMonitor: false, // deprecated, returned for back compat\n          created: ack.published\n        })));\n  },\n\n  /**\n   * This function is called when an internal membership events fires,\n   * if the user registered for these events with the public listen() method.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Memberships\n   * @param {Object} event\n   * @returns {void}\n   */\n  onWebexApiEvent(event) {\n    const {activity} = event.data;\n\n    /* eslint-disable no-case-declarations */\n    switch (activity.verb) {\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.CREATE:\n        const membershipCreatedEventDataArray =\n          activity.object.participants.items.map((participant) => {\n            const output = cloneDeep(activity);\n\n            output.target = cloneDeep(activity.object);\n            output.object = cloneDeep(participant);\n\n            return this.getMembershipEvent(output,\n              SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n          });\n\n        membershipCreatedEventDataArray.forEach((data) => {\n          if (data) {\n            debug(`membership \"created\" payload: ${JSON.stringify(data)}`);\n            this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, data);\n          }\n        });\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.ADD:\n        const membershipCreatedEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n\n        if (membershipCreatedEventData) {\n          debug(`membership \"created\" payload: \\\n            ${JSON.stringify(membershipCreatedEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, membershipCreatedEventData);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.LEAVE:\n        const membershipDeletedEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED);\n\n        if (membershipDeletedEventData) {\n          debug(`membership \"deleted\" payload: \\\n            ${JSON.stringify(membershipDeletedEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED, membershipDeletedEventData);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.ADD_MODERATOR:\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.REMOVE_MODERATOR:\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE:\n        const membershipUpdatedEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED);\n\n        if (membershipUpdatedEventData) {\n          debug(`membership \"updated\" payload: \\\n            ${JSON.stringify(membershipUpdatedEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED, membershipUpdatedEventData);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE:\n        const membershipSeenEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.SEEN);\n\n        if (membershipSeenEventData) {\n          debug(`membership \"updated\" payload: \\\n            ${JSON.stringify(membershipSeenEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.SEEN, membershipSeenEventData);\n        }\n        break;\n\n      default:\n        break;\n    }\n  },\n\n  /**\n   * Constructs the data object for an event on the memberships resource,\n   * adhering to Hydra's Webehook data structure memberships.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Memberships\n   * @param {Object} activity from mercury\n   * @param {Object} event type of \"webhook\" event\n   * @returns {Object} constructed event\n   */\n  getMembershipEvent(activity, event) {\n    try {\n      const sdkEvent = cloneDeep(this.eventEnvelope);\n      let member;\n      let space;\n\n      sdkEvent.event = event;\n      sdkEvent.data.created = activity.published;\n      sdkEvent.actorId = buildHydraPersonId(activity.actor.entryUUID);\n      if (activity.verb !== SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE) {\n        sdkEvent.data.roomId = buildHydraRoomId(activity.target.id);\n        sdkEvent.data.roomType = getHydraRoomType(activity.target.tags);\n        sdkEvent.data.isRoomHidden = false; // any activity unhides a space.\n      }\n      else {\n        sdkEvent.data.roomId = buildHydraRoomId(activity.object.id);\n        sdkEvent.data.roomType = SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT;\n        // currently hidden attribute is only set on 1-1\n        sdkEvent.data.isRoomHidden = true;\n      }\n      if (activity.verb !== SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE) {\n        if ((activity.object.roomProperties) && (activity.object.roomProperties.isModerator)) {\n          sdkEvent.data.isModerator = true;\n        }\n        else {\n          sdkEvent.data.isModerator = false;\n        }\n      }\n      // This is deprecated but still sent in the webhooks\n      // We won't send it for our new SDK events\n      // sdkEvent.data.isMonitor = false;\n\n      if (activity.verb === SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE) {\n        // For a read receipt the person is the \"actor\" or the one who did the reading\n        member = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.ACTOR;\n        // The space with the read message is the \"target\"\n        space = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.TARGET;\n        // And the \"object\" is the message that was last seen\n        sdkEvent.data.lastSeenId = buildHydraMessageId(activity.object.id);\n      }\n      else if (activity.verb === SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE) {\n        // For a hide activity the person is also the \"actor\"\n        member = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.ACTOR;\n        // But the space is now the \"object\"\n        space = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.OBJECT;\n      }\n      else {\n        // For most memberships events the person is the 'object\"\n        member = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.OBJECT;\n        // and the space is the \"target\"\n        space = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.TARGET;\n      }\n\n      sdkEvent.data.id = buildHydraMembershipId(activity[member].entryUUID,\n        activity[space].id);\n      sdkEvent.data.personId = buildHydraPersonId(activity[member].entryUUID);\n      sdkEvent.data.personEmail =\n        activity[member].emailAddress || activity[member].entryEmail;\n      sdkEvent.data.personDisplayName = activity[member].displayName;\n      sdkEvent.data.personOrgId = buildHydraOrgId(activity[member].orgId);\n\n      return sdkEvent;\n    }\n    catch (e) {\n      this.webex.logger.error(`Unable to generate SDK event from mercury \\\n'socket activity for memberships:${event} event: ${e.message}`);\n\n      return null;\n    }\n  }\n\n});\n\nexport default Memberships;\n"]},"metadata":{},"sourceType":"script"}