{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _pick2 = require('lodash/pick');\n\nvar _pick3 = _interopRequireDefault(_pick2);\n\nexports.default = processImage;\n\nvar _index = require('./index');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* eslint-env browser */\n\n/**\n * Determins the dimensions of an image\n * @param {Object} constraints\n * @param {Number} constraints.width\n * @param {Number} constraints.height\n * @param {Number} maxWidth\n * @param {Number} maxHeight\n * @returns {Object}\n */\n\n\nfunction computeDimensions(_ref, maxWidth, maxHeight) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  if (height > width) {\n    if (height > maxHeight) {\n      width = width * maxHeight / height;\n      height = maxHeight;\n    }\n\n    if (width > maxWidth) {\n      height = height * maxWidth / width;\n      width = maxWidth;\n    }\n  } else {\n    if (width > maxWidth) {\n      height = height * maxWidth / width;\n      width = maxWidth;\n    }\n\n    if (height > maxHeight) {\n      width = width * maxHeight / height;\n      height = maxHeight;\n    }\n  }\n\n  return {\n    height: height,\n    width: width\n  };\n}\n/**\n * Measures an image file and produces a thumbnail for it\n * @param {Object} options\n * @param {Blob|ArrayBuffer} options.file\n * @param {Number} options.thumbnailMaxWidth\n * @param {Number} options.thumbnailMaxHeight\n * @param {Boolean} options.enableThumbnails\n * @param {Object} options.logger\n * @param {Boolean} options.isAvatar\n * @returns {Promise<Array>} Buffer, Dimensions, thumbnailDimensions\n */\n\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nfunction processImage(_ref2) {\n  var file = _ref2.file,\n      type = _ref2.type,\n      thumbnailMaxWidth = _ref2.thumbnailMaxWidth,\n      thumbnailMaxHeight = _ref2.thumbnailMaxHeight,\n      enableThumbnails = _ref2.enableThumbnails,\n      logger = _ref2.logger,\n      isAvatar = _ref2.isAvatar;\n\n  if (!type || !type.startsWith('image')) {\n    return _promise2.default.resolve();\n  }\n\n  file = file instanceof Blob ? file : new Blob([file]);\n  return new _promise2.default(function (resolve, reject) {\n    var img = new Image();\n\n    img.onload = function onload() {\n      resolve(img);\n    };\n\n    img.onerror = reject;\n    img.src = URL.createObjectURL(file);\n  }).then(function (img) {\n    var fileDimensions = (0, _pick3.default)(img, 'height', 'width');\n\n    if (isAvatar) {\n      // only if image is a profile avatar\n      logger.info('dimensions will be set for avatar image');\n      var size = fileDimensions.height > fileDimensions.width ? fileDimensions.height : fileDimensions.width;\n      fileDimensions.height = size;\n      fileDimensions.width = size;\n    }\n\n    if (!enableThumbnails) {\n      logger.info('thumbnails not enabled');\n      return [null, fileDimensions, null];\n    }\n\n    var thumbnailDimensions = computeDimensions(fileDimensions, thumbnailMaxWidth, thumbnailMaxHeight);\n    var canvas = document.createElement('canvas');\n    canvas.width = thumbnailDimensions.width;\n    canvas.height = thumbnailDimensions.height;\n    var ctx = canvas.getContext('2d');\n    (0, _index.orient)({\n      orientation: file && file.image ? file.image.orientation : '',\n      img: img,\n      x: 0,\n      y: 0,\n      width: thumbnailDimensions.width,\n      height: thumbnailDimensions.height,\n      ctx: ctx\n    }, file);\n    var parts = canvas.toDataURL('image/png').split(','); // Thumbnail uploads were failing with common/base64 decoding\n\n    var byteString = atob(parts[1]);\n    var buffer = new ArrayBuffer(byteString.length);\n    var view = new DataView(buffer);\n\n    for (var i = 0; i < byteString.length; i += 1) {\n      view.setUint8(i, byteString.charCodeAt(i));\n    }\n\n    return [buffer, fileDimensions, thumbnailDimensions];\n  });\n}","map":{"version":3,"sources":["process-image.browser.js"],"names":["width","height","processImage","file","type","thumbnailMaxWidth","thumbnailMaxHeight","enableThumbnails","logger","isAvatar","img","resolve","URL","fileDimensions","size","thumbnailDimensions","computeDimensions","canvas","document","ctx","orientation","x","y","parts","byteString","atob","buffer","view","i"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {pick} from 'lodash';\nimport {orient} from './index';\n/* eslint-env browser */\n\n/**\n * Determins the dimensions of an image\n * @param {Object} constraints\n * @param {Number} constraints.width\n * @param {Number} constraints.height\n * @param {Number} maxWidth\n * @param {Number} maxHeight\n * @returns {Object}\n */\nfunction computeDimensions({width, height}, maxWidth, maxHeight) {\n  if (height > width) {\n    if (height > maxHeight) {\n      width = width * maxHeight / height;\n      height = maxHeight;\n    }\n\n    if (width > maxWidth) {\n      height = height * maxWidth / width;\n      width = maxWidth;\n    }\n  }\n  else {\n    if (width > maxWidth) {\n      height = height * maxWidth / width;\n      width = maxWidth;\n    }\n\n    if (height > maxHeight) {\n      width = width * maxHeight / height;\n      height = maxHeight;\n    }\n  }\n\n  return {height, width};\n}\n\n/**\n * Measures an image file and produces a thumbnail for it\n * @param {Object} options\n * @param {Blob|ArrayBuffer} options.file\n * @param {Number} options.thumbnailMaxWidth\n * @param {Number} options.thumbnailMaxHeight\n * @param {Boolean} options.enableThumbnails\n * @param {Object} options.logger\n * @param {Boolean} options.isAvatar\n * @returns {Promise<Array>} Buffer, Dimensions, thumbnailDimensions\n */\nexport default function processImage({\n  file, type, thumbnailMaxWidth, thumbnailMaxHeight, enableThumbnails, logger, isAvatar\n}) {\n  if (!type || !type.startsWith('image')) {\n    return Promise.resolve();\n  }\n\n  file = file instanceof Blob ? file : new Blob([file]);\n\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n\n    img.onload = function onload() {\n      resolve(img);\n    };\n    img.onerror = reject;\n    img.src = URL.createObjectURL(file);\n  })\n    .then((img) => {\n      const fileDimensions = pick(img, 'height', 'width');\n\n      if (isAvatar) { // only if image is a profile avatar\n        logger.info('dimensions will be set for avatar image');\n        const size = fileDimensions.height > fileDimensions.width ? fileDimensions.height : fileDimensions.width;\n\n        fileDimensions.height = size;\n        fileDimensions.width = size;\n      }\n      if (!enableThumbnails) {\n        logger.info('thumbnails not enabled');\n\n        return [null, fileDimensions, null];\n      }\n      const thumbnailDimensions = computeDimensions(fileDimensions, thumbnailMaxWidth, thumbnailMaxHeight);\n\n      const canvas = document.createElement('canvas');\n\n      canvas.width = thumbnailDimensions.width;\n      canvas.height = thumbnailDimensions.height;\n\n      const ctx = canvas.getContext('2d');\n\n      orient(\n        {\n          orientation: file && file.image ? file.image.orientation : '',\n          img,\n          x: 0,\n          y: 0,\n          width: thumbnailDimensions.width,\n          height: thumbnailDimensions.height,\n          ctx\n        },\n        file\n      );\n      const parts = canvas.toDataURL('image/png').split(',');\n      // Thumbnail uploads were failing with common/base64 decoding\n      const byteString = atob(parts[1]);\n\n      const buffer = new ArrayBuffer(byteString.length);\n      const view = new DataView(buffer);\n\n      for (let i = 0; i < byteString.length; i += 1) {\n        view.setUint8(i, byteString.charCodeAt(i));\n      }\n\n      return [buffer, fileDimensions, thumbnailDimensions];\n    });\n}\n"]},"metadata":{},"sourceType":"script"}