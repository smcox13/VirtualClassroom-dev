{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _constants = require('../constants');\n\nvar _parameter = require('../common/errors/parameter');\n\nvar _parameter2 = _interopRequireDefault(_parameter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar SelfUtils = {};\n/**\n * parses the relevant values for self: muted, guest, moderator, mediaStatus, state, joinedWith, creator, id\n * @param {Object} self\n * @param {String} deviceId\n * @returns {undefined}\n */\n\nSelfUtils.parse = function (self, deviceId) {\n  if (self) {\n    return {\n      muted: SelfUtils.getMuted(self),\n      lastModified: SelfUtils.getLastModified(self),\n      modifiedBy: SelfUtils.getModifiedBy(self),\n      guest: self.guest,\n      moderator: self.moderator,\n      mediaStatus: SelfUtils.getStatus(self.status),\n      state: self.state,\n      // TODO: give a proper name . With same device as login or different login`\n      // Some times we might have joined with both mobile and web\n      joinedWith: self.devices.find(function (device) {\n        return deviceId === device.url;\n      }),\n      creator: self.isCreator,\n      // check if its used,\n      selfId: self.id,\n      selfIdentity: SelfUtils.getSelfIdentity(self),\n      selfUrl: self.url,\n      removed: self.removed\n    };\n  }\n\n  return null;\n};\n\nSelfUtils.getSelves = function (oldSelf, newSelf, deviceId) {\n  var previous = oldSelf && SelfUtils.parse(oldSelf, deviceId);\n  var current = newSelf && SelfUtils.parse(newSelf, deviceId);\n  var updates = {};\n  updates.isUnadmittedGuest = SelfUtils.isUnadmittedGuest(current);\n  updates.isAdmittedGuest = SelfUtils.isAdmittedGuest(previous, current);\n  updates.isMutedByOthers = SelfUtils.mutedByOthers(previous, current);\n  updates.moderatorChanged = SelfUtils.moderatorChanged(previous, current);\n  return {\n    previous: previous,\n    current: current,\n    updates: {\n      isUnadmittedGuest: SelfUtils.isUnadmittedGuest(current),\n      isAdmittedGuest: SelfUtils.isAdmittedGuest(previous, current),\n      mutedByOthers: SelfUtils.mutedByOthers(previous, current)\n    }\n  };\n};\n\nSelfUtils.getLastModified = function (self) {\n  if (!self || !self.controls || !self.controls.audio || !self.controls.audio.meta || !self.controls.audio.meta.lastModified) {\n    return null;\n  }\n\n  return self.controls.audio.meta.lastModified;\n};\n\nSelfUtils.getModifiedBy = function (self) {\n  if (!self || !self.controls || !self.controls.audio || !self.controls.audio.meta || !self.controls.audio.meta.modifiedBy) {\n    return null;\n  }\n\n  return self.controls.audio.meta.modifiedBy;\n};\n/**\n * get the id from the self object\n * @param {Object} self\n * @returns {String}\n */\n\n\nSelfUtils.getSelfIdentity = function (self) {\n  if (!self && !self.person) {\n    return null;\n  }\n\n  return self.person.id;\n};\n/**\n * get the muted property from the self object\n * @param {Object} self\n * @returns {Boolean}\n */\n\n\nSelfUtils.getMuted = function (self) {\n  if (!self || !self.controls || !self.controls.audio) {\n    return null;\n  }\n\n  return self.controls.audio.muted;\n};\n\nSelfUtils.getStatus = function (status) {\n  return {\n    audio: status.audioStatus,\n    video: status.videoStatus,\n    slides: status.videoSlidesStatus\n  };\n};\n/**\n * @param {Object} check\n * @returns {Boolean}\n */\n\n\nSelfUtils.isLocusGuestUnadmitted = function (check) {\n  return check && check.guest && check.state === _constants._IDLE_;\n};\n/**\n * @param {Object} check\n * @returns {Boolean}\n */\n\n\nSelfUtils.isLocusGuestAdmitted = function (check) {\n  return check && check.guest && check.state === _constants._JOINED_;\n};\n/**\n * @param {Object} self\n * @returns {Boolean}\n * @throws {Error} when self is undefined\n */\n\n\nSelfUtils.isUnadmittedGuest = function (self) {\n  if (!self) {\n    throw new _parameter2.default('self must be defined to determine if self is unadmitted as guest.');\n  }\n\n  return SelfUtils.isLocusGuestUnadmitted(self);\n};\n\nSelfUtils.moderatorChanged = function (oldSelf, changedSelf) {\n  if (!oldSelf) {\n    return true;\n  }\n\n  if (!changedSelf) {\n    throw new _parameter2.default('New self must be defined to determine if self transitioned moderator status.');\n  }\n\n  return oldSelf.moderator !== changedSelf.moderator;\n};\n/**\n * @param {Object} oldSelf\n * @param {Object} changedSelf\n * @returns {Boolean}\n * @throws {Error} if changed self was undefined\n */\n\n\nSelfUtils.isAdmittedGuest = function (oldSelf, changedSelf) {\n  if (!oldSelf) {\n    // if there was no previous locus, it couldn't have been admitted yet\n    return false;\n  }\n\n  if (!changedSelf) {\n    throw new _parameter2.default('New self must be defined to determine if self transitioned to admitted as guest.');\n  }\n\n  return SelfUtils.isLocusGuestUnadmitted(oldSelf) && SelfUtils.isLocusGuestAdmitted(changedSelf);\n};\n\nSelfUtils.mutedByOthers = function () {\n  var oldSelf = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var changedSelf = arguments[1];\n\n  if (!changedSelf) {\n    throw new _parameter2.default('New self must be defined to determine if self was muted by others.');\n  }\n\n  return changedSelf.muted && (oldSelf.lastModified !== changedSelf.lastModified || oldSelf.modifiedBy !== changedSelf.modifiedBy);\n};\n/**\n * extract the sipUrl from the partner\n * @param {Object} partner\n * @param {Object} info\n * @returns {Object}\n */\n\n\nSelfUtils.getSipUrl = function (partner, type, sipUri) {\n  // For webex meeting the sipUrl gets updated in info parser\n  if (partner && type === _constants._CALL_) {\n    return {\n      sipUri: partner.person.sipUrl || partner.person.emailAddress || partner.person.email\n    };\n  }\n\n  return {\n    sipUri: sipUri\n  };\n};\n\nexports.default = SelfUtils;","map":{"version":3,"sources":["selfUtils.js"],"names":["SelfUtils","muted","lastModified","modifiedBy","guest","self","moderator","mediaStatus","state","joinedWith","deviceId","device","creator","selfId","selfIdentity","selfUrl","removed","previous","oldSelf","current","newSelf","updates","isUnadmittedGuest","isAdmittedGuest","mutedByOthers","audio","status","video","slides","videoSlidesStatus","check","_IDLE_","_JOINED_","ParameterError","changedSelf","partner","type","_CALL_","sipUri"],"mappings":"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","sourcesContent":["\nimport {\n  _IDLE_,\n  _JOINED_,\n  _CALL_\n} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\nconst SelfUtils = {};\n\n/**\n * parses the relevant values for self: muted, guest, moderator, mediaStatus, state, joinedWith, creator, id\n * @param {Object} self\n * @param {String} deviceId\n * @returns {undefined}\n */\nSelfUtils.parse = (self, deviceId) => {\n  if (self) {\n    return {\n      muted: SelfUtils.getMuted(self),\n      lastModified: SelfUtils.getLastModified(self),\n      modifiedBy: SelfUtils.getModifiedBy(self),\n      guest: self.guest,\n      moderator: self.moderator,\n      mediaStatus: SelfUtils.getStatus(self.status),\n      state: self.state,\n      // TODO: give a proper name . With same device as login or different login`\n      // Some times we might have joined with both mobile and web\n      joinedWith: self.devices.find((device) => deviceId === device.url),\n      creator: self.isCreator, // check if its used,\n      selfId: self.id,\n      selfIdentity: SelfUtils.getSelfIdentity(self),\n      selfUrl: self.url,\n      removed: self.removed\n    };\n  }\n\n  return null;\n};\n\nSelfUtils.getSelves = (oldSelf, newSelf, deviceId) => {\n  const previous = oldSelf && SelfUtils.parse(oldSelf, deviceId);\n  const current = newSelf && SelfUtils.parse(newSelf, deviceId);\n  const updates = {};\n\n  updates.isUnadmittedGuest = SelfUtils.isUnadmittedGuest(current);\n  updates.isAdmittedGuest = SelfUtils.isAdmittedGuest(previous, current);\n  updates.isMutedByOthers = SelfUtils.mutedByOthers(previous, current);\n  updates.moderatorChanged = SelfUtils.moderatorChanged(previous, current);\n\n  return {\n    previous,\n    current,\n    updates: {\n      isUnadmittedGuest: SelfUtils.isUnadmittedGuest(current),\n      isAdmittedGuest: SelfUtils.isAdmittedGuest(previous, current),\n      mutedByOthers: SelfUtils.mutedByOthers(previous, current)\n    }\n  };\n};\n\nSelfUtils.getLastModified = (self) => {\n  if (!self || !self.controls || !self.controls.audio || !self.controls.audio.meta || !self.controls.audio.meta.lastModified) {\n    return null;\n  }\n\n  return self.controls.audio.meta.lastModified;\n};\n\nSelfUtils.getModifiedBy = (self) => {\n  if (!self || !self.controls || !self.controls.audio || !self.controls.audio.meta || !self.controls.audio.meta.modifiedBy) {\n    return null;\n  }\n\n  return self.controls.audio.meta.modifiedBy;\n};\n\n/**\n * get the id from the self object\n * @param {Object} self\n * @returns {String}\n */\nSelfUtils.getSelfIdentity = (self) => {\n  if (!self && !self.person) {\n    return null;\n  }\n\n  return self.person.id;\n};\n\n/**\n * get the muted property from the self object\n * @param {Object} self\n * @returns {Boolean}\n */\nSelfUtils.getMuted = (self) => {\n  if (!self || !self.controls || !self.controls.audio) {\n    return null;\n  }\n\n  return self.controls.audio.muted;\n};\n\nSelfUtils.getStatus = (status) => ({\n  audio: status.audioStatus,\n  video: status.videoStatus,\n  slides: status.videoSlidesStatus\n});\n\n/**\n * @param {Object} check\n * @returns {Boolean}\n */\nSelfUtils.isLocusGuestUnadmitted = (check) => check && check.guest && check.state === _IDLE_;\n\n/**\n * @param {Object} check\n * @returns {Boolean}\n */\nSelfUtils.isLocusGuestAdmitted = (check) => check && check.guest && check.state === _JOINED_;\n\n/**\n * @param {Object} self\n * @returns {Boolean}\n * @throws {Error} when self is undefined\n */\nSelfUtils.isUnadmittedGuest = (self) => {\n  if (!self) {\n    throw new ParameterError('self must be defined to determine if self is unadmitted as guest.');\n  }\n\n  return SelfUtils.isLocusGuestUnadmitted(self);\n};\n\nSelfUtils.moderatorChanged = (oldSelf, changedSelf) => {\n  if (!oldSelf) {\n    return true;\n  }\n  if (!changedSelf) {\n    throw new ParameterError('New self must be defined to determine if self transitioned moderator status.');\n  }\n\n  return oldSelf.moderator !== changedSelf.moderator;\n};\n\n/**\n * @param {Object} oldSelf\n * @param {Object} changedSelf\n * @returns {Boolean}\n * @throws {Error} if changed self was undefined\n */\nSelfUtils.isAdmittedGuest = (oldSelf, changedSelf) => {\n  if (!oldSelf) {\n    // if there was no previous locus, it couldn't have been admitted yet\n    return false;\n  }\n  if (!changedSelf) {\n    throw new ParameterError('New self must be defined to determine if self transitioned to admitted as guest.');\n  }\n\n  return SelfUtils.isLocusGuestUnadmitted(oldSelf) && SelfUtils.isLocusGuestAdmitted(changedSelf);\n};\n\nSelfUtils.mutedByOthers = (oldSelf = {}, changedSelf) => {\n  if (!changedSelf) {\n    throw new ParameterError('New self must be defined to determine if self was muted by others.');\n  }\n\n  return changedSelf.muted && (oldSelf.lastModified !== changedSelf.lastModified || oldSelf.modifiedBy !== changedSelf.modifiedBy);\n};\n\n/**\n * extract the sipUrl from the partner\n * @param {Object} partner\n * @param {Object} info\n * @returns {Object}\n */\n\nSelfUtils.getSipUrl = (partner, type, sipUri) => {\n  // For webex meeting the sipUrl gets updated in info parser\n  if (partner && type === _CALL_) {\n    return {sipUri: partner.person.sipUrl || partner.person.emailAddress || partner.person.email};\n  }\n\n  return {sipUri};\n};\n\n\nexport default SelfUtils;\n\n"]},"metadata":{},"sourceType":"script"}