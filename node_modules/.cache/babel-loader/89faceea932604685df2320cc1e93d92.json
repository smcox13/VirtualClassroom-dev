{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _omit2 = require('lodash/omit');\n\nvar _omit3 = _interopRequireDefault(_omit2);\n\nvar _isString2 = require('lodash/isString');\n\nvar _isString3 = _interopRequireDefault(_isString2);\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nvar _has2 = require('lodash/has');\n\nvar _has3 = _interopRequireDefault(_has2);\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _util = require('util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _httpCore = require('@webex/http-core');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @class\n */\n\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar RequestLoggerInterceptor = function (_Interceptor) {\n  (0, _inherits3.default)(RequestLoggerInterceptor, _Interceptor);\n\n  function RequestLoggerInterceptor() {\n    (0, _classCallCheck3.default)(this, RequestLoggerInterceptor);\n    return (0, _possibleConstructorReturn3.default)(this, (RequestLoggerInterceptor.__proto__ || (0, _getPrototypeOf2.default)(RequestLoggerInterceptor)).apply(this, arguments));\n  }\n\n  (0, _createClass3.default)(RequestLoggerInterceptor, [{\n    key: 'onRequest',\n\n    /**\n     * @see Interceptor#onRequest\n     * @param {Object} options\n     * @returns {Object}\n     */\n    value: function onRequest(options) {\n      var logger = (0, _get3.default)(this, 'webex.logger', console);\n      logger.info('/**********************************************************************\\\\ ');\n      logger.info('Request:', options.method || 'GET', options.uri);\n      logger.info('WEBEX_TRACKINGID: ', (0, _get3.default)(options, 'headers.trackingid'));\n      /* istanbul ignore next */\n\n      if ((0, _has3.default)(options, 'headers.x-trans-id')) {\n        logger.info('X-Trans-ID: ', (0, _get3.default)(options, 'headers.x-trans-id'));\n      }\n\n      var now = new Date();\n\n      if (process.env.ENABLE_VERBOSE_NETWORK_LOGGING) {\n        logger.info('timestamp (start): ', now.getTime(), now.toISOString());\n\n        try {\n          // Determine if body is a buffer without relying on Buffer to avoid\n          // node/browser conflicts.\n          if (options.body && options.body.length && !(0, _isArray3.default)(options.body) && !(0, _isString3.default)(options.body)) {\n            logger.info('Request Options:', _util2.default.inspect((0, _omit3.default)(options, 'body'), {\n              depth: null\n            }));\n          } else {\n            logger.info('Request Options:', _util2.default.inspect(options, {\n              depth: null\n            }));\n          }\n        } catch (e) {\n          logger.warn('Could not stringify request options:', e);\n        }\n      }\n\n      return _promise2.default.resolve(options);\n    }\n    /**\n     * @see Interceptor#onRequest\n     * @param {Object} options\n     * @param {Error} reason\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'onRequestError',\n    value: function onRequestError(options, reason) {\n      // We need to do the normal onRequest logging, but then log how the request\n      // failed since the response logger won't be called.\n      this.onRequest(options);\n      var logger = (0, _get3.default)(this, 'webex.logger', console);\n      logger.error('Request Failed: ', reason.stack);\n      logger.info('\\\\**********************************************************************/');\n      return _promise2.default.reject(reason);\n    }\n  }], [{\n    key: 'create',\n\n    /**\n     * @returns {RequestLoggerInterceptor}\n     */\n    value: function create() {\n      return new RequestLoggerInterceptor({\n        webex: this\n      });\n    }\n  }]);\n  return RequestLoggerInterceptor;\n}(_httpCore.Interceptor);\n\nexports.default = RequestLoggerInterceptor;","map":{"version":3,"sources":["request-logger.js"],"names":["RequestLoggerInterceptor","Interceptor","webex","options","logger","now","process","util","depth","reason"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {get, has, isArray, isString, omit} from 'lodash';\nimport util from 'util';\nimport {Interceptor} from '@webex/http-core';\n\n/**\n * @class\n */\nexport default class RequestLoggerInterceptor extends Interceptor {\n  /**\n   * @returns {RequestLoggerInterceptor}\n   */\n  static create() {\n    return new RequestLoggerInterceptor({webex: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    const logger = get(this, 'webex.logger', console);\n\n    logger.info('/**********************************************************************\\\\ ');\n    logger.info('Request:', options.method || 'GET', options.uri);\n    logger.info('WEBEX_TRACKINGID: ', get(options, 'headers.trackingid'));\n    /* istanbul ignore next */\n    if (has(options, 'headers.x-trans-id')) {\n      logger.info('X-Trans-ID: ', get(options, 'headers.x-trans-id'));\n    }\n    const now = new Date();\n\n    if (process.env.ENABLE_VERBOSE_NETWORK_LOGGING) {\n      logger.info('timestamp (start): ', now.getTime(), now.toISOString());\n      try {\n        // Determine if body is a buffer without relying on Buffer to avoid\n        // node/browser conflicts.\n        if (options.body && options.body.length && !isArray(options.body) && !isString(options.body)) {\n          logger.info('Request Options:', util.inspect(omit(options, 'body'), {depth: null}));\n        }\n        else {\n          logger.info('Request Options:', util.inspect(options, {depth: null}));\n        }\n      }\n      catch (e) {\n        logger.warn('Could not stringify request options:', e);\n      }\n    }\n\n    return Promise.resolve(options);\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @param {Error} reason\n   * @returns {Object}\n   */\n  onRequestError(options, reason) {\n    // We need to do the normal onRequest logging, but then log how the request\n    // failed since the response logger won't be called.\n    this.onRequest(options);\n    const logger = get(this, 'webex.logger', console);\n\n    logger.error('Request Failed: ', reason.stack);\n    logger.info('\\\\**********************************************************************/');\n\n    return Promise.reject(reason);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}