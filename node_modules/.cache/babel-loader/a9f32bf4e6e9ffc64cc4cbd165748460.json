{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _webexCore = require('@webex/webex-core');\n\nvar precedence = {\n  error: ['log'],\n  warn: ['error', 'log'],\n  info: ['log'],\n  debug: ['info', 'log'],\n  trace: ['debug', 'info', 'log']\n};\n/**\n * Assigns the specified console method to Logger; uses `precedence` to fallback\n * to other console methods if the current environment doesn't provide the\n * specified level.\n * @param {string} level\n * @returns {Function}\n */\n\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nfunction wrapConsoleMethod(level) {\n  /* eslint no-console: [0] */\n  var impls = precedence[level];\n\n  if (impls) {\n    impls = impls.slice();\n\n    while (!console[level]) {\n      level = impls.pop();\n    }\n  }\n\n  return function wrappedConsoleMethod() {\n    var _console;\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    /* eslint no-invalid-this: [0] */\n\n    /* istanbul ignore if */\n\n\n    if (process.env.NODE_ENV === 'test' && this.webex && this.webex.internal.device && this.webex.internal.device.url) {\n      args.unshift(this.webex.internal.device.url.slice(-3));\n    }\n\n    (_console = console)[level].apply(_console, args);\n  };\n}\n\nvar Logger = _webexCore.WebexPlugin.extend({\n  namespace: 'Logger',\n  error: wrapConsoleMethod('error'),\n  warn: wrapConsoleMethod('warn'),\n  log: wrapConsoleMethod('log'),\n  info: wrapConsoleMethod('info'),\n  debug: wrapConsoleMethod('debug'),\n  trace: wrapConsoleMethod('trace'),\n  version: '1.80.172'\n});\n\n(0, _webexCore.registerPlugin)('logger', Logger);\nexports.default = Logger;","map":{"version":3,"sources":["logger.js"],"names":["precedence","error","warn","info","debug","trace","impls","console","level","args","process","Logger","namespace","wrapConsoleMethod","log"],"mappings":";;;;;;AAIA,IAAA,UAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,IAAMA,UAAAA,GAAa;AACjBC,EAAAA,KAAAA,EAAO,CADU,KACV,CADU;AAEjBC,EAAAA,IAAAA,EAAM,CAAA,OAAA,EAFW,KAEX,CAFW;AAGjBC,EAAAA,IAAAA,EAAM,CAHW,KAGX,CAHW;AAIjBC,EAAAA,KAAAA,EAAO,CAAA,MAAA,EAJU,KAIV,CAJU;AAKjBC,EAAAA,KAAAA,EAAO,CAAA,OAAA,EAAA,MAAA,EAAA,KAAA;AALU,CAAnB;AAQA;;;;;;;;AAdA;;;;AAqBA,SAAA,iBAAA,CAAA,KAAA,EAAkC;AAChC;AACA,MAAIC,KAAAA,GAAQN,UAAAA,CAAZ,KAAYA,CAAZ;;AAEA,MAAA,KAAA,EAAW;AACTM,IAAAA,KAAAA,GAAQA,KAAAA,CAARA,KAAQA,EAARA;;AACA,WAAO,CAACC,OAAAA,CAAR,KAAQA,CAAR,EAAwB;AACtBC,MAAAA,KAAAA,GAAQF,KAAAA,CAARE,GAAQF,EAARE;AACD;AACF;;AAED,SAAO,SAAA,oBAAA,GAAuC;AAAA,QAAA,QAAA;;AAAA,SAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAANC,IAAM,GAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAANA,MAAAA,IAAM,CAAA,IAAA,CAANA,GAAM,SAAA,CAAA,IAAA,CAANA;AAAM;AAC5C;;AACA;;;AACA,QAAIC,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAAA,MAAAA,IAAmC,KAAnCA,KAAAA,IAAiD,KAAA,KAAA,CAAA,QAAA,CAAjDA,MAAAA,IAA+E,KAAA,KAAA,CAAA,QAAA,CAAA,MAAA,CAAnF,GAAA,EAAmH;AACjHD,MAAAA,IAAAA,CAAAA,OAAAA,CAAa,KAAA,KAAA,CAAA,QAAA,CAAA,MAAA,CAAA,GAAA,CAAA,KAAA,CAAqC,CAAlDA,CAAa,CAAbA;AACD;;AACD,KAAA,QAAA,GAAA,OAAA,EAAA,KAAA,EAAA,KAAA,CAAA,QAAA,EAAA,IAAA;AANF,GAAA;AAQD;;AAED,IAAME,MAAAA,GAAS,UAAA,CAAA,WAAA,CAAA,MAAA,CAAmB;AAChCC,EAAAA,SAAAA,EADgC,QAAA;AAEhCX,EAAAA,KAAAA,EAAOY,iBAAAA,CAFyB,OAEzBA,CAFyB;AAGhCX,EAAAA,IAAAA,EAAMW,iBAAAA,CAH0B,MAG1BA,CAH0B;AAIhCC,EAAAA,GAAAA,EAAKD,iBAAAA,CAJ2B,KAI3BA,CAJ2B;AAKhCV,EAAAA,IAAAA,EAAMU,iBAAAA,CAL0B,MAK1BA,CAL0B;AAMhCT,EAAAA,KAAAA,EAAOS,iBAAAA,CANyB,OAMzBA,CANyB;AAOhCR,EAAAA,KAAAA,EAAOQ,iBAAAA,CAPyB,OAOzBA,CAPyB;AAAA,EAAA,OAAA,EAAA;AAAA,CAAnB,CAAf;;AAUA,CAAA,GAAA,UAAA,CAAA,cAAA,EAAA,QAAA,EAAA,MAAA;kBAEeF,M","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin, registerPlugin} from '@webex/webex-core';\n\nconst precedence = {\n  error: ['log'],\n  warn: ['error', 'log'],\n  info: ['log'],\n  debug: ['info', 'log'],\n  trace: ['debug', 'info', 'log']\n};\n\n/**\n * Assigns the specified console method to Logger; uses `precedence` to fallback\n * to other console methods if the current environment doesn't provide the\n * specified level.\n * @param {string} level\n * @returns {Function}\n */\nfunction wrapConsoleMethod(level) {\n  /* eslint no-console: [0] */\n  let impls = precedence[level];\n\n  if (impls) {\n    impls = impls.slice();\n    while (!console[level]) {\n      level = impls.pop();\n    }\n  }\n\n  return function wrappedConsoleMethod(...args) {\n    /* eslint no-invalid-this: [0] */\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV === 'test' && this.webex && this.webex.internal.device && this.webex.internal.device.url) {\n      args.unshift(this.webex.internal.device.url.slice(-3));\n    }\n    console[level](...args);\n  };\n}\n\nconst Logger = WebexPlugin.extend({\n  namespace: 'Logger',\n  error: wrapConsoleMethod('error'),\n  warn: wrapConsoleMethod('warn'),\n  log: wrapConsoleMethod('log'),\n  info: wrapConsoleMethod('info'),\n  debug: wrapConsoleMethod('debug'),\n  trace: wrapConsoleMethod('trace')\n});\n\nregisterPlugin('logger', Logger);\n\nexport default Logger;\n"]},"metadata":{},"sourceType":"script"}