{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _values = require('babel-runtime/core-js/object/values');\n\nvar _values2 = _interopRequireDefault(_values);\n\nvar _merge2 = require('lodash/merge');\n\nvar _merge3 = _interopRequireDefault(_merge2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar DeviceCollection = {\n  devices: {},\n  get: function get(deviceId) {\n    return this.devices[deviceId];\n  },\n  set: function set(device) {\n    var deviceId = device.id || device.identity && device.identity.id; // check if the device is already existing, if so then merge else add\n\n    var existingDevice = this.devices[deviceId];\n\n    if (existingDevice) {\n      // already existing, merge for any new binding information\n      (0, _merge3.default)(existingDevice, device);\n    } else {\n      this.devices[deviceId] = device;\n    }\n  },\n  reset: function reset() {\n    this.devices = {};\n  },\n  getAll: function getAll() {\n    return (0, _values2.default)(this.devices);\n  }\n};\nexports.default = DeviceCollection;","map":{"version":3,"sources":["collection.js"],"names":["DeviceCollection","devices","get","set","deviceId","device","existingDevice","reset","getAll"],"mappings":";;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,gBAAAA,GAAmB;AACvBC,EAAAA,OAAAA,EADuB,EAAA;AAGvBC,EAAAA,GAHuB,EAAA,SAAA,GAAA,CAAA,QAAA,EAGT;AACZ,WAAO,KAAA,OAAA,CAAP,QAAO,CAAP;AAJqB,GAAA;AAOvBC,EAAAA,GAPuB,EAAA,SAAA,GAAA,CAAA,MAAA,EAOX;AACV,QAAMC,QAAAA,GAAWC,MAAAA,CAAAA,EAAAA,IAAaA,MAAAA,CAAAA,QAAAA,IAAmBA,MAAAA,CAAAA,QAAAA,CAAjD,EAAA,CADU,CAEV;;AACA,QAAMC,cAAAA,GAAiB,KAAA,OAAA,CAAvB,QAAuB,CAAvB;;AAEA,QAAA,cAAA,EAAoB;AAClB;AACA,OAAA,GAAA,OAAA,CAAA,OAAA,EAAA,cAAA,EAAA,MAAA;AAFF,KAAA,MAIK;AACH,WAAA,OAAA,CAAA,QAAA,IAAA,MAAA;AACD;AAlBoB,GAAA;AAqBvBC,EAAAA,KArBuB,EAAA,SAAA,KAAA,GAqBf;AACN,SAAA,OAAA,GAAA,EAAA;AAtBqB,GAAA;AAyBvBC,EAAAA,MAzBuB,EAAA,SAAA,MAAA,GAyBd;AACP,WAAO,CAAA,GAAA,QAAA,CAAA,OAAA,EAAc,KAArB,OAAO,CAAP;AACD;AA3BsB,CAAzB;kBA+BeR,gB","sourcesContent":["import {merge} from 'lodash';\n\nconst DeviceCollection = {\n  devices: {},\n\n  get(deviceId) {\n    return this.devices[deviceId];\n  },\n\n  set(device) {\n    const deviceId = device.id || device.identity && device.identity.id;\n    // check if the device is already existing, if so then merge else add\n    const existingDevice = this.devices[deviceId];\n\n    if (existingDevice) {\n      // already existing, merge for any new binding information\n      merge(existingDevice, device);\n    }\n    else {\n      this.devices[deviceId] = device;\n    }\n  },\n\n  reset() {\n    this.devices = {};\n  },\n\n  getAll() {\n    return Object.values(this.devices);\n  }\n\n};\n\nexport default DeviceCollection;\n"]},"metadata":{},"sourceType":"script"}