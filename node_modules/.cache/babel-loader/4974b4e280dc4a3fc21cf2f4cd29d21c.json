{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _stream = require('stream');\n\nvar _transformer = require('../stats/transformer');\n\nvar _transformer2 = _interopRequireDefault(_transformer);\n\nvar _data = require('../stats/data');\n\nvar _data2 = _interopRequireDefault(_data);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Reforms the interesting data from an RTCStatsReport to a new format\n */\n\n\nvar StatsFilter = function (_Transform) {\n  (0, _inherits3.default)(StatsFilter, _Transform);\n  /**\n   * Tells the Stream we're operating in objectMode\n   * @private\n   */\n\n  function StatsFilter() {\n    (0, _classCallCheck3.default)(this, StatsFilter);\n    return (0, _possibleConstructorReturn3.default)(this, (StatsFilter.__proto__ || (0, _getPrototypeOf2.default)(StatsFilter)).call(this, {\n      objectMode: true\n    }));\n  }\n  /**\n   * Filters out data on the RTCStatsReport to the data around call quality and pushes it as a WebRTCData object\n   * @param {RTCStatsReport} report\n   * @param {*} encoding\n   * @param {Function} callback\n   * @private\n   * @returns {undefined}\n   */\n\n\n  (0, _createClass3.default)(StatsFilter, [{\n    key: '_transform',\n    value: function _transform(report, encoding, callback) {\n      if (!report) {\n        callback();\n        return;\n      }\n\n      var data = _transformer2.default.transform(report);\n\n      var push = new _data2.default(data);\n      this.push({\n        data: push\n      });\n      callback();\n    }\n  }]);\n  return StatsFilter;\n}(_stream.Transform);\n\nexports.default = StatsFilter;","map":{"version":3,"sources":["filter.js"],"names":["StatsFilter","Transform","objectMode","report","encoding","callback","data","StatsTransformer","push","WebRTCData"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,IAAA,YAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;;;;;;;;AAEA;;;;;IAGqBA,W;;AACnB;;;;;AAIA,WAAA,WAAA,GAAc;AAAA,KAAA,GAAA,gBAAA,CAAA,OAAA,EAAA,IAAA,EAAA,WAAA;AAAA,WAAA,CAAA,GAAA,2BAAA,CAAA,OAAA,EAAA,IAAA,EAAA,CAAA,WAAA,CAAA,SAAA,IAAA,CAAA,GAAA,gBAAA,CAAA,OAAA,EAAA,WAAA,CAAA,EAAA,IAAA,CAAA,IAAA,EACN;AAACE,MAAAA,UAAAA,EADK;AACN,KADM,CAAA,CAAA;AAEb;AAED;;;;;;;;;;;;+BAQWC,M,EAAQC,Q,EAAUC,Q,EAAU;AACrC,UAAI,CAAJ,MAAA,EAAa;AACXA,QAAAA,QAAAA;AAEA;AACD;;AACD,UAAMC,IAAAA,GAAOC,aAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAb,MAAaA,CAAb;;AACA,UAAMC,IAAAA,GAAO,IAAIC,MAAAA,CAAJ,OAAA,CAAb,IAAa,CAAb;AAEA,WAAA,IAAA,CAAU;AACRH,QAAAA,IAAAA,EAAME;AADE,OAAV;AAGAH,MAAAA,QAAAA;AACD;;;EA9BsCJ,OAAAA,CAAAA,S;;kBAApBD,W","sourcesContent":["import {Transform} from 'stream';\n\nimport StatsTransformer from '../stats/transformer';\nimport WebRTCData from '../stats/data';\n\n/**\n * Reforms the interesting data from an RTCStatsReport to a new format\n */\nexport default class StatsFilter extends Transform {\n  /**\n   * Tells the Stream we're operating in objectMode\n   * @private\n   */\n  constructor() {\n    super({objectMode: true});\n  }\n\n  /**\n   * Filters out data on the RTCStatsReport to the data around call quality and pushes it as a WebRTCData object\n   * @param {RTCStatsReport} report\n   * @param {*} encoding\n   * @param {Function} callback\n   * @private\n   * @returns {undefined}\n   */\n  _transform(report, encoding, callback) {\n    if (!report) {\n      callback();\n\n      return;\n    }\n    const data = StatsTransformer.transform(report);\n    const push = new WebRTCData(data);\n\n    this.push({\n      data: push\n    });\n    callback();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}