{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport DigestInfo from \"./DigestInfo.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC7292\r\n */\n\nexport default class MacData {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for MacData class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {DigestInfo}\r\n     * @desc mac\r\n     */\n    this.mac = getParametersValue(parameters, \"mac\", MacData.defaultValues(\"mac\"));\n    /**\r\n     * @type {OctetString}\r\n     * @desc macSalt\r\n     */\n\n    this.macSalt = getParametersValue(parameters, \"macSalt\", MacData.defaultValues(\"macSalt\"));\n    if (\"iterations\" in parameters)\n      /**\r\n       * @type {number}\r\n       * @desc iterations\r\n       */\n      this.iterations = getParametersValue(parameters, \"iterations\", MacData.defaultValues(\"iterations\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"mac\":\n        return new DigestInfo();\n\n      case \"macSalt\":\n        return new asn1js.OctetString();\n\n      case \"iterations\":\n        return 1;\n\n      default:\n        throw new Error(`Invalid member name for MacData class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"mac\":\n        return DigestInfo.compareWithDefault(\"digestAlgorithm\", memberValue.digestAlgorithm) && DigestInfo.compareWithDefault(\"digest\", memberValue.digest);\n\n      case \"macSalt\":\n        return memberValue.isEqual(MacData.defaultValues(memberName));\n\n      case \"iterations\":\n        return memberValue === MacData.defaultValues(memberName);\n\n      default:\n        throw new Error(`Invalid member name for MacData class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * MacData ::= SEQUENCE {\r\n   *    mac \t\tDigestInfo,\r\n   *    macSalt       OCTET STRING,\r\n   *    iterations\tINTEGER DEFAULT 1\r\n   *    -- Note: The default is for historical reasons and its use is\r\n   *    -- deprecated. A higher value, like 1024 is recommended.\r\n   *    }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [optional]\r\n     * @property {string} [mac]\r\n     * @property {string} [macSalt]\r\n     * @property {string} [iterations]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      optional: names.optional || true,\n      value: [DigestInfo.schema(names.mac || {\n        names: {\n          blockName: \"mac\"\n        }\n      }), new asn1js.OctetString({\n        name: names.macSalt || \"macSalt\"\n      }), new asn1js.Integer({\n        optional: true,\n        name: names.iterations || \"iterations\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"mac\", \"macSalt\", \"iterations\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, MacData.schema({\n      names: {\n        mac: {\n          names: {\n            blockName: \"mac\"\n          }\n        },\n        macSalt: \"macSalt\",\n        iterations: \"iterations\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for MacData\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.mac = new DigestInfo({\n      schema: asn1.result.mac\n    });\n    this.macSalt = asn1.result.macSalt;\n    if (\"iterations\" in asn1.result) this.iterations = asn1.result.iterations.valueBlock.valueDec; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    const outputArray = [this.mac.toSchema(), this.macSalt];\n    if (\"iterations\" in this) outputArray.push(new asn1js.Integer({\n      value: this.iterations\n    }));\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const output = {\n      mac: this.mac.toJSON(),\n      macSalt: this.macSalt.toJSON()\n    };\n    if (\"iterations\" in this) output.iterations = this.iterations.toJSON();\n    return output;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/MacData.js"],"names":["asn1js","getParametersValue","clearProps","DigestInfo","MacData","constructor","parameters","mac","defaultValues","macSalt","iterations","fromSchema","schema","memberName","OctetString","Error","compareWithDefault","memberValue","digestAlgorithm","digest","isEqual","names","Sequence","name","blockName","optional","value","Integer","asn1","compareSchema","verified","result","valueBlock","valueDec","toSchema","outputArray","push","toJSON","output"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport DigestInfo from \"./DigestInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class MacData \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for MacData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {DigestInfo}\r\n\t\t * @desc mac\r\n\t\t */\r\n\t\tthis.mac = getParametersValue(parameters, \"mac\", MacData.defaultValues(\"mac\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc macSalt\r\n\t\t */\r\n\t\tthis.macSalt = getParametersValue(parameters, \"macSalt\", MacData.defaultValues(\"macSalt\"));\r\n\t\t\r\n\t\tif(\"iterations\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @desc iterations\r\n\t\t\t */\r\n\t\t\tthis.iterations = getParametersValue(parameters, \"iterations\", MacData.defaultValues(\"iterations\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"mac\":\r\n\t\t\t\treturn new DigestInfo();\r\n\t\t\tcase \"macSalt\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"iterations\":\r\n\t\t\t\treturn 1;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for MacData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"mac\":\r\n\t\t\t\treturn ((DigestInfo.compareWithDefault(\"digestAlgorithm\", memberValue.digestAlgorithm)) &&\r\n\t\t\t\t(DigestInfo.compareWithDefault(\"digest\", memberValue.digest)));\r\n\t\t\tcase \"macSalt\":\r\n\t\t\t\treturn (memberValue.isEqual(MacData.defaultValues(memberName)));\r\n\t\t\tcase \"iterations\":\r\n\t\t\t\treturn (memberValue === MacData.defaultValues(memberName));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for MacData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * MacData ::= SEQUENCE {\r\n\t *    mac \t\tDigestInfo,\r\n\t *    macSalt       OCTET STRING,\r\n\t *    iterations\tINTEGER DEFAULT 1\r\n\t *    -- Note: The default is for historical reasons and its use is\r\n\t *    -- deprecated. A higher value, like 1024 is recommended.\r\n\t *    }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t * @property {string} [mac]\r\n\t\t * @property {string} [macSalt]\r\n\t\t * @property {string} [iterations]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: (names.optional || true),\r\n\t\t\tvalue: [\r\n\t\t\t\tDigestInfo.schema(names.mac || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"mac\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.macSalt || \"macSalt\") }),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.iterations || \"iterations\")\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"mac\",\r\n\t\t\t\"macSalt\",\r\n\t\t\t\"iterations\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tMacData.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tmac: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"mac\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmacSalt: \"macSalt\",\r\n\t\t\t\t\titerations: \"iterations\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for MacData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.mac = new DigestInfo({ schema: asn1.result.mac });\r\n\t\tthis.macSalt = asn1.result.macSalt;\r\n\t\t\r\n\t\tif(\"iterations\" in asn1.result)\r\n\t\t\tthis.iterations = asn1.result.iterations.valueBlock.valueDec;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tconst outputArray = [\r\n\t\t\tthis.mac.toSchema(),\r\n\t\t\tthis.macSalt\r\n\t\t];\r\n\t\t\r\n\t\tif(\"iterations\" in this)\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.iterations }));\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst output = {\r\n\t\t\tmac: this.mac.toJSON(),\r\n\t\t\tmacSalt: this.macSalt.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"iterations\" in this)\r\n\t\t\toutput.iterations = this.iterations.toJSON();\r\n\t\t\r\n\t\treturn output;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}