{"ast":null,"code":"/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n// Need to fork xhr to support environments with full object freezing; namely,\n// SalesForce's Aura and Locker environment.\n// See https://github.com/naugtur/xhr for license information\n// Maintain the original code style of https://github.com/naugtur/xhr since\n// we're trying to diverge as little as possible.\n\n/* eslint-disable */\n\"use strict\";\n\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar window = require(\"global/window\");\n\nvar isFunction = require(\"is-function\");\n\nvar parseHeaders = require(\"parse-headers\");\n\nvar xtend = require(\"xtend\");\n\nmodule.exports = createXHR;\ncreateXHR.XMLHttpRequest = window.XMLHttpRequest || noop;\ncreateXHR.XDomainRequest = \"withCredentials\" in new createXHR.XMLHttpRequest() ? createXHR.XMLHttpRequest : window.XDomainRequest;\nforEachArray([\"get\", \"put\", \"post\", \"patch\", \"head\", \"delete\"], function (method) {\n  createXHR[method === \"delete\" ? \"del\" : method] = function (uri, options, callback) {\n    options = initParams(uri, options, callback);\n    options.method = method.toUpperCase();\n    return _createXHR(options);\n  };\n});\n\nfunction forEachArray(array, iterator) {\n  for (var i = 0; i < array.length; i += 1) {\n    iterator(array[i]);\n  }\n}\n\nfunction isEmpty(obj) {\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) return false;\n  }\n\n  return true;\n}\n\nfunction initParams(uri, options, callback) {\n  var params = uri;\n\n  if (isFunction(options)) {\n    callback = options;\n\n    if (typeof uri === \"string\") {\n      params = {\n        uri: uri\n      };\n    }\n  } else {\n    params = xtend(options, {\n      uri: uri\n    });\n  }\n\n  params.callback = callback;\n  return params;\n}\n\nfunction createXHR(uri, options, callback) {\n  options = initParams(uri, options, callback);\n  return _createXHR(options);\n}\n\nfunction _createXHR(options) {\n  if (typeof options.callback === \"undefined\") {\n    throw new Error(\"callback argument missing\");\n  }\n\n  var called = false;\n\n  var callback = function cbOnce(err, response, body) {\n    if (!called) {\n      called = true;\n      options.callback(err, response, body);\n    }\n  };\n\n  function readystatechange() {\n    if (xhr.readyState === 4) {\n      setTimeout(loadFunc, 0);\n    }\n  }\n\n  function getBody() {\n    // Chrome with requestType=blob throws errors arround when even testing access to responseText\n    var body = undefined;\n\n    if (xhr.response) {\n      body = xhr.response;\n    } else {\n      body = xhr.responseText || getXml(xhr);\n    }\n\n    if (isJson) {\n      try {\n        body = JSON.parse(body);\n      } catch (e) {}\n    }\n\n    return body;\n  }\n\n  function errorFunc(evt) {\n    clearTimeout(timeoutTimer);\n\n    if (!(evt instanceof Error)) {\n      evt = new Error(\"\" + (evt || \"Unknown XMLHttpRequest Error\"));\n    }\n\n    evt.statusCode = 0;\n    return callback(evt, failureResponse);\n  } // will load the data & process the response in a special response object\n\n\n  function loadFunc() {\n    if (aborted) return;\n    var status;\n    clearTimeout(timeoutTimer);\n\n    if (options.useXDR && xhr.status === undefined) {\n      //IE8 CORS GET successful response doesn't have a status field, but body is fine\n      status = 200;\n    } else {\n      status = xhr.status === 1223 ? 204 : xhr.status;\n    }\n\n    var response = failureResponse;\n    var err = null;\n\n    if (status !== 0) {\n      response = {\n        body: getBody(),\n        statusCode: status,\n        method: method,\n        headers: {},\n        url: uri,\n        rawRequest: xhr\n      };\n\n      if (xhr.getAllResponseHeaders) {\n        //remember xhr can in fact be XDR for CORS in IE\n        response.headers = parseHeaders(xhr.getAllResponseHeaders());\n      }\n    } else {\n      err = new Error(\"Internal XMLHttpRequest Error\");\n    }\n\n    return callback(err, response, response.body);\n  }\n\n  var xhr = options.xhr || null;\n\n  if (!xhr) {\n    if (options.cors || options.useXDR) {\n      xhr = new createXHR.XDomainRequest();\n    } else {\n      xhr = new createXHR.XMLHttpRequest();\n    }\n  }\n\n  var key;\n  var aborted;\n  var uri = options.uri || options.url;\n  var method = options.method || \"GET\";\n  var body = options.body || options.data;\n  var headers = options.headers || {};\n  var sync = !!options.sync;\n  var isJson = false;\n  var timeoutTimer;\n  var failureResponse = {\n    body: undefined,\n    headers: {},\n    statusCode: 0,\n    method: method,\n    url: uri,\n    rawRequest: xhr\n  };\n\n  if (\"json\" in options && options.json !== false) {\n    isJson = true;\n    headers[\"accept\"] || headers[\"Accept\"] || (headers[\"Accept\"] = \"application/json\"); //Don't override existing accept header declared by user\n\n    if (method !== \"GET\" && method !== \"HEAD\") {\n      headers[\"content-type\"] || headers[\"Content-Type\"] || (headers[\"Content-Type\"] = \"application/json\"); //Don't override existing accept header declared by user\n\n      body = (0, _stringify2.default)(options.json === true ? body : options.json);\n    }\n  }\n\n  xhr.onreadystatechange = readystatechange;\n  xhr.onload = loadFunc;\n  xhr.onerror = errorFunc; // IE9 must have onprogress be set to a unique function.\n\n  xhr.onprogress = function () {// IE must die\n  };\n\n  xhr.onabort = function () {\n    aborted = true;\n  };\n\n  xhr.ontimeout = errorFunc;\n  xhr.open(method, uri, !sync, options.username, options.password); //has to be after open\n\n  if (!sync) {\n    xhr.withCredentials = !!options.withCredentials;\n  } // Cannot set timeout with sync request\n  // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly\n  // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent\n\n\n  if (!sync && options.timeout > 0) {\n    timeoutTimer = setTimeout(function () {\n      if (aborted) return;\n      aborted = true; //IE9 may still call readystatechange\n\n      xhr.abort(\"timeout\");\n      var e = new Error(\"XMLHttpRequest timeout\");\n      e.code = \"ETIMEDOUT\";\n      errorFunc(e);\n    }, options.timeout);\n  }\n\n  if (xhr.setRequestHeader) {\n    for (key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  } else if (options.headers && !isEmpty(options.headers)) {\n    throw new Error(\"Headers cannot be set on an XDomainRequest object\");\n  }\n\n  if (\"responseType\" in options) {\n    xhr.responseType = options.responseType;\n  }\n\n  if (\"beforeSend\" in options && typeof options.beforeSend === \"function\") {\n    options.beforeSend(xhr);\n  } // Microsoft Edge browser sends \"undefined\" when send is called with undefined value.\n  // XMLHttpRequest spec says to pass null as body to indicate no body\n  // See https://github.com/naugtur/xhr/issues/100.\n\n\n  xhr.send(body || null);\n  return xhr;\n}\n\nfunction getXml(xhr) {\n  if (xhr.responseType === \"document\") {\n    return xhr.responseXML;\n  }\n\n  var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === \"parsererror\";\n\n  if (xhr.responseType === \"\" && !firefoxBugTakenEffect) {\n    return xhr.responseXML;\n  }\n\n  return null;\n}\n\nfunction noop() {}","map":{"version":3,"sources":["xhr.js"],"names":["window","require","isFunction","parseHeaders","xtend","module","createXHR","forEachArray","method","options","initParams","_createXHR","i","array","iterator","obj","params","callback","uri","called","xhr","setTimeout","body","getXml","JSON","clearTimeout","evt","status","response","err","getBody","statusCode","headers","url","rawRequest","sync","isJson","failureResponse","aborted","timeoutTimer","e","errorFunc","isEmpty","firefoxBugTakenEffect"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n// Need to fork xhr to support environments with full object freezing; namely,\n// SalesForce's Aura and Locker environment.\n\n// See https://github.com/naugtur/xhr for license information\n\n// Maintain the original code style of https://github.com/naugtur/xhr since\n// we're trying to diverge as little as possible.\n/* eslint-disable */\n\n\"use strict\";\nvar window = require(\"global/window\")\nvar isFunction = require(\"is-function\")\nvar parseHeaders = require(\"parse-headers\")\nvar xtend = require(\"xtend\")\n\nmodule.exports = createXHR\ncreateXHR.XMLHttpRequest = window.XMLHttpRequest || noop\ncreateXHR.XDomainRequest = \"withCredentials\" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest\n\nforEachArray([\"get\", \"put\", \"post\", \"patch\", \"head\", \"delete\"], function(method) {\n    createXHR[method === \"delete\" ? \"del\" : method] = function(uri, options, callback) {\n        options = initParams(uri, options, callback)\n        options.method = method.toUpperCase()\n        return _createXHR(options)\n    }\n})\n\nfunction forEachArray(array, iterator) {\n    for (var i = 0; i < array.length; i+= 1) {\n        iterator(array[i])\n    }\n}\n\nfunction isEmpty(obj){\n    for(var i in obj){\n        if(obj.hasOwnProperty(i)) return false\n    }\n    return true\n}\n\nfunction initParams(uri, options, callback) {\n    var params = uri\n\n    if (isFunction(options)) {\n        callback = options\n        if (typeof uri === \"string\") {\n            params = {uri:uri}\n        }\n    } else {\n        params = xtend(options, {uri: uri})\n    }\n\n    params.callback = callback\n    return params\n}\n\nfunction createXHR(uri, options, callback) {\n    options = initParams(uri, options, callback)\n    return _createXHR(options)\n}\n\nfunction _createXHR(options) {\n    if(typeof options.callback === \"undefined\"){\n        throw new Error(\"callback argument missing\")\n    }\n\n    var called = false\n    var callback = function cbOnce(err, response, body){\n        if(!called){\n            called = true\n            options.callback(err, response, body)\n        }\n    }\n\n    function readystatechange() {\n        if (xhr.readyState === 4) {\n            setTimeout(loadFunc, 0)\n        }\n    }\n\n    function getBody() {\n        // Chrome with requestType=blob throws errors arround when even testing access to responseText\n        var body = undefined\n\n        if (xhr.response) {\n            body = xhr.response\n        } else {\n            body = xhr.responseText || getXml(xhr)\n        }\n\n        if (isJson) {\n            try {\n                body = JSON.parse(body)\n            } catch (e) {}\n        }\n\n        return body\n    }\n\n    function errorFunc(evt) {\n        clearTimeout(timeoutTimer)\n        if(!(evt instanceof Error)){\n            evt = new Error(\"\" + (evt || \"Unknown XMLHttpRequest Error\") )\n        }\n        evt.statusCode = 0\n        return callback(evt, failureResponse)\n    }\n\n    // will load the data & process the response in a special response object\n    function loadFunc() {\n        if (aborted) return\n        var status\n        clearTimeout(timeoutTimer)\n        if(options.useXDR && xhr.status===undefined) {\n            //IE8 CORS GET successful response doesn't have a status field, but body is fine\n            status = 200\n        } else {\n            status = (xhr.status === 1223 ? 204 : xhr.status)\n        }\n        var response = failureResponse\n        var err = null\n\n        if (status !== 0){\n            response = {\n                body: getBody(),\n                statusCode: status,\n                method: method,\n                headers: {},\n                url: uri,\n                rawRequest: xhr\n            }\n            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE\n                response.headers = parseHeaders(xhr.getAllResponseHeaders())\n            }\n        } else {\n            err = new Error(\"Internal XMLHttpRequest Error\")\n        }\n        return callback(err, response, response.body)\n    }\n\n    var xhr = options.xhr || null\n\n    if (!xhr) {\n        if (options.cors || options.useXDR) {\n            xhr = new createXHR.XDomainRequest()\n        }else{\n            xhr = new createXHR.XMLHttpRequest()\n        }\n    }\n\n    var key\n    var aborted\n    var uri = options.uri || options.url\n    var method = options.method || \"GET\"\n    var body = options.body || options.data\n    var headers = options.headers || {}\n    var sync = !!options.sync\n    var isJson = false\n    var timeoutTimer\n    var failureResponse = {\n        body: undefined,\n        headers: {},\n        statusCode: 0,\n        method: method,\n        url: uri,\n        rawRequest: xhr\n    }\n\n    if (\"json\" in options && options.json !== false) {\n        isJson = true\n        headers[\"accept\"] || headers[\"Accept\"] || (headers[\"Accept\"] = \"application/json\") //Don't override existing accept header declared by user\n        if (method !== \"GET\" && method !== \"HEAD\") {\n            headers[\"content-type\"] || headers[\"Content-Type\"] || (headers[\"Content-Type\"] = \"application/json\") //Don't override existing accept header declared by user\n            body = JSON.stringify(options.json === true ? body : options.json)\n        }\n    }\n\n    xhr.onreadystatechange = readystatechange\n    xhr.onload = loadFunc\n    xhr.onerror = errorFunc\n    // IE9 must have onprogress be set to a unique function.\n    xhr.onprogress = function () {\n        // IE must die\n    }\n    xhr.onabort = function(){\n        aborted = true;\n    }\n    xhr.ontimeout = errorFunc\n    xhr.open(method, uri, !sync, options.username, options.password)\n    //has to be after open\n    if(!sync) {\n        xhr.withCredentials = !!options.withCredentials\n    }\n    // Cannot set timeout with sync request\n    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly\n    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent\n    if (!sync && options.timeout > 0 ) {\n        timeoutTimer = setTimeout(function(){\n            if (aborted) return\n            aborted = true//IE9 may still call readystatechange\n            xhr.abort(\"timeout\")\n            var e = new Error(\"XMLHttpRequest timeout\")\n            e.code = \"ETIMEDOUT\"\n            errorFunc(e)\n        }, options.timeout )\n    }\n\n    if (xhr.setRequestHeader) {\n        for(key in headers){\n            if(headers.hasOwnProperty(key)){\n                xhr.setRequestHeader(key, headers[key])\n            }\n        }\n    } else if (options.headers && !isEmpty(options.headers)) {\n        throw new Error(\"Headers cannot be set on an XDomainRequest object\")\n    }\n\n    if (\"responseType\" in options) {\n        xhr.responseType = options.responseType\n    }\n\n    if (\"beforeSend\" in options &&\n        typeof options.beforeSend === \"function\"\n    ) {\n        options.beforeSend(xhr)\n    }\n\n    // Microsoft Edge browser sends \"undefined\" when send is called with undefined value.\n    // XMLHttpRequest spec says to pass null as body to indicate no body\n    // See https://github.com/naugtur/xhr/issues/100.\n    xhr.send(body || null)\n\n    return xhr\n\n\n}\n\nfunction getXml(xhr) {\n    if (xhr.responseType === \"document\") {\n        return xhr.responseXML\n    }\n    var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === \"parsererror\"\n    if (xhr.responseType === \"\" && !firefoxBugTakenEffect) {\n        return xhr.responseXML\n    }\n\n    return null\n}\n\nfunction noop() {}\n"]},"metadata":{},"sourceType":"script"}