{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _webexCore = require('@webex/webex-core');\n/**\n * @typedef {Object} WebhookObject\n * @property {string} id - (server generated) Unique identifier for the webhook\n * @property {string} resource - The resource type for the webhook\n * @property {string} event - The event type for the webhook\n * @property {string} filter - The filter that defines the webhook scope\n * @property {string} targetUrl - The URL that receives POST requests for each event\n * @property {string} name - A user-friendly name for this webhook\n * @property {string} created - (server generated) The date and time that the webhook was created\n */\n\n/**\n * Webhooks allow your app to be notified via HTTP when a specific event\n * occurs on Webex. For example, your app can register a webhook to be\n * notified when a new message is posted into a specific room.\n * @class\n */\n\n\nvar Webhooks = _webexCore.WebexPlugin.extend({\n  /**\n   * Posts a webhook.\n   * @instance\n   * @memberof Webhooks\n   * @param {WebhookObject} webhook\n   * @returns {Promise<Webhook>}\n   * @example\n   * webex.rooms.create({title: 'Create Webhook Example'})\n   *   .then(function(room) {\n   *     return webex.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(webhook) {\n   *     var assert = require('assert');\n   *     assert(webhook.id);\n   *     assert(webhook.resource);\n   *     assert(webhook.event);\n   *     assert(webhook.filter);\n   *     assert(webhook.targetUrl);\n   *     assert(webhook.name);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create: function create(webhook) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'webhooks',\n      body: webhook\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Shows details for a webhook.\n   * @instance\n   * @memberof Webhooks\n   * @param {Webhook|string} webhook\n   * @returns {Promise<Webhook>}\n   * @example\n   * var webhook;\n   * webex.rooms.create({title: 'Get Webhook Example'})\n   *   .then(function(room) {\n   *     return webex.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(w) {\n   *     webhook = w;\n   *     return webex.webhooks.get(webhook.id);\n   *   })\n   *   .then(function(webhook2) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(webhook2, webhook);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get: function get(webhook) {\n    var id = webhook.id || webhook;\n    return this.request({\n      service: 'hydra',\n      resource: 'webhooks/' + id\n    }).then(function (res) {\n      return res.body.items || res.body;\n    });\n  },\n\n  /**\n   * Lists all webhooks.\n   * @instance\n   * @memberof Webhooks\n   * @param {Object} options\n   * @param {integer} options.max Limit the maximum number of webhooks in the response.\n   * @returns {Promise<Array<Webhook>>}\n   * @example\n   * var room, webhook;\n   * webex.rooms.create({title: 'List Webhooks Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(w) {\n   *     webhook = w;\n   *     return webex.webhooks.list();\n   *   })\n   *   .then(function(webhooks) {\n   *     var assert = require('assert');\n   *     assert.equal(webhooks.items.filter(function(w) {\n   *       return w.id === webhook.id;\n   *     }).length, 1);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list: function list(options) {\n    var _this = this;\n\n    return this.request({\n      service: 'hydra',\n      resource: 'webhooks/',\n      qs: options\n    }).then(function (res) {\n      return new _webexCore.Page(res, _this.webex);\n    });\n  },\n\n  /**\n   * Delete a webhook.\n   * @instance\n   * @memberof Webhooks\n   * @param {Webhook|string} webhook\n   * @returns {Promise}\n   * @example\n   * var room, webhook;\n   * webex.rooms.create({title: 'Remove Webhook Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(w) {\n   *     webhook = w;\n   *     return webex.webhooks.remove(webhook);\n   *   })\n   *   .then(function() {\n   *     return webex.webhooks.list();\n   *   })\n   *   .then(function(webhooks) {\n   *     var assert = require('assert');\n   *     assert.equal(webhooks.items.filter(function(w) {\n   *       return w.id === webhook.id;\n   *     }).length, 0);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove: function remove(webhook) {\n    var id = webhook.id || webhook;\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: 'webhooks/' + id\n    }).then(function (res) {\n      // Firefox has some issues with 204s and/or DELETE. This should move to\n      // http-core\n      if (res.statusCode === 204) {\n        return undefined;\n      }\n\n      return res.body;\n    });\n  },\n\n  /**\n   * Update a webhook.\n   * @instance\n   * @memberof Webhooks\n   * @param {Webhook} webhook\n   * @returns {Promise<Webhook>}\n   * @example\n   * var webhook;\n   * webex.rooms.create({title: 'Webhook Example'})\n   *   .then(function(room) {\n   *     return webex.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(w) {\n   *     webhook = w;\n   *     webhook.targetUrl = 'https://example.com/webhook/newtarget';\n   *     return webex.webhooks.update(webhook);\n   *   })\n   *   .then(function() {\n   *     return webex.webhooks.get(webhook);\n   *   })\n   *   .then(function(webhook) {\n   *     var assert = require('assert');\n   *     assert.equal(webhook.targetUrl, 'https://example.com/webhook/newtarget');\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  update: function update(webhook) {\n    var id = webhook.id;\n    return this.request({\n      method: 'PUT',\n      service: 'hydra',\n      resource: 'webhooks/' + id,\n      body: webhook\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n  version: '1.80.172'\n});\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nexports.default = Webhooks;","map":{"version":3,"sources":["webhooks.js"],"names":["Webhooks","create","method","service","resource","body","webhook","res","get","id","list","qs","options","Page","remove","update"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin, Page} from '@webex/webex-core';\n\n/**\n * @typedef {Object} WebhookObject\n * @property {string} id - (server generated) Unique identifier for the webhook\n * @property {string} resource - The resource type for the webhook\n * @property {string} event - The event type for the webhook\n * @property {string} filter - The filter that defines the webhook scope\n * @property {string} targetUrl - The URL that receives POST requests for each event\n * @property {string} name - A user-friendly name for this webhook\n * @property {string} created - (server generated) The date and time that the webhook was created\n */\n\n/**\n * Webhooks allow your app to be notified via HTTP when a specific event\n * occurs on Webex. For example, your app can register a webhook to be\n * notified when a new message is posted into a specific room.\n * @class\n */\nconst Webhooks = WebexPlugin.extend({\n  /**\n   * Posts a webhook.\n   * @instance\n   * @memberof Webhooks\n   * @param {WebhookObject} webhook\n   * @returns {Promise<Webhook>}\n   * @example\n   * webex.rooms.create({title: 'Create Webhook Example'})\n   *   .then(function(room) {\n   *     return webex.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(webhook) {\n   *     var assert = require('assert');\n   *     assert(webhook.id);\n   *     assert(webhook.resource);\n   *     assert(webhook.event);\n   *     assert(webhook.filter);\n   *     assert(webhook.targetUrl);\n   *     assert(webhook.name);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(webhook) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'webhooks',\n      body: webhook\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Shows details for a webhook.\n   * @instance\n   * @memberof Webhooks\n   * @param {Webhook|string} webhook\n   * @returns {Promise<Webhook>}\n   * @example\n   * var webhook;\n   * webex.rooms.create({title: 'Get Webhook Example'})\n   *   .then(function(room) {\n   *     return webex.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(w) {\n   *     webhook = w;\n   *     return webex.webhooks.get(webhook.id);\n   *   })\n   *   .then(function(webhook2) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(webhook2, webhook);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(webhook) {\n    const id = webhook.id || webhook;\n\n    return this.request({\n      service: 'hydra',\n      resource: `webhooks/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Lists all webhooks.\n   * @instance\n   * @memberof Webhooks\n   * @param {Object} options\n   * @param {integer} options.max Limit the maximum number of webhooks in the response.\n   * @returns {Promise<Array<Webhook>>}\n   * @example\n   * var room, webhook;\n   * webex.rooms.create({title: 'List Webhooks Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(w) {\n   *     webhook = w;\n   *     return webex.webhooks.list();\n   *   })\n   *   .then(function(webhooks) {\n   *     var assert = require('assert');\n   *     assert.equal(webhooks.items.filter(function(w) {\n   *       return w.id === webhook.id;\n   *     }).length, 1);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'webhooks/',\n      qs: options\n    })\n      .then((res) => new Page(res, this.webex));\n  },\n\n  /**\n   * Delete a webhook.\n   * @instance\n   * @memberof Webhooks\n   * @param {Webhook|string} webhook\n   * @returns {Promise}\n   * @example\n   * var room, webhook;\n   * webex.rooms.create({title: 'Remove Webhook Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(w) {\n   *     webhook = w;\n   *     return webex.webhooks.remove(webhook);\n   *   })\n   *   .then(function() {\n   *     return webex.webhooks.list();\n   *   })\n   *   .then(function(webhooks) {\n   *     var assert = require('assert');\n   *     assert.equal(webhooks.items.filter(function(w) {\n   *       return w.id === webhook.id;\n   *     }).length, 0);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(webhook) {\n    const id = webhook.id || webhook;\n\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: `webhooks/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n\n        return res.body;\n      });\n  },\n\n  /**\n   * Update a webhook.\n   * @instance\n   * @memberof Webhooks\n   * @param {Webhook} webhook\n   * @returns {Promise<Webhook>}\n   * @example\n   * var webhook;\n   * webex.rooms.create({title: 'Webhook Example'})\n   *   .then(function(room) {\n   *     return webex.webhooks.create({\n   *       resource: 'messages',\n   *       event: 'created',\n   *       filter: 'roomId=' + room.id,\n   *       targetUrl: 'https://example.com/webhook',\n   *       name: 'Test Webhook'\n   *     });\n   *   })\n   *   .then(function(w) {\n   *     webhook = w;\n   *     webhook.targetUrl = 'https://example.com/webhook/newtarget';\n   *     return webex.webhooks.update(webhook);\n   *   })\n   *   .then(function() {\n   *     return webex.webhooks.get(webhook);\n   *   })\n   *   .then(function(webhook) {\n   *     var assert = require('assert');\n   *     assert.equal(webhook.targetUrl, 'https://example.com/webhook/newtarget');\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  update(webhook) {\n    const {id} = webhook;\n\n    return this.request({\n      method: 'PUT',\n      service: 'hydra',\n      resource: `webhooks/${id}`,\n      body: webhook\n    })\n      .then((res) => res.body);\n  }\n});\n\nexport default Webhooks;\n"]},"metadata":{},"sourceType":"script"}