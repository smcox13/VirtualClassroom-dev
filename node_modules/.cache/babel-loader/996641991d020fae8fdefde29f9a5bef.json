{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _apply = require('babel-runtime/core-js/reflect/apply');\n\nvar _apply2 = _interopRequireDefault(_apply);\n\nvar _cloneDeep2 = require('lodash/cloneDeep');\n\nvar _cloneDeep3 = _interopRequireDefault(_cloneDeep2);\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _common = require('@webex/common');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar debug = require('debug')('attachmentActions');\n/**\n * @typedef {Object} AttachmentActionObject\n * @property {string} id - (server generated) Unique identifier for the attachment action\n * @property {string} messageId - The ID of the message in which attachment action is to be performed\n * @property {string} type - The type of attachment action eg., submit\n * @property {Object} inputs - The inputs for form fields in attachment message\n * @property {string} personId - (server generated) The ID for the author of the attachment action\n * @property {string} roomId - (server generated) The ID for the room of the message\n * @property {isoDate} created - (server generated) The date and time that the message was created\n */\n\n/**\n * AttachmentActions are events that communicate information when a user clicks on an\n * Action.Submit button in a card displayed in Webex Teams\n * Information conveyed in an AttachmentAction includes details about the user that\n * clicked the button along with any card specific inputs. See the\n * {@link https://developer.webex.com/docs/api/v1/attachment-actions|Attachments Actions API Documentation}\n * for more details\n * @class\n */\n\n\nvar AttachmentActions = _webexCore.WebexPlugin.extend({\n  /**\n   * Initializer used to generate AttachmentActions\n   * as a plugin wrapped around the provided arguments.\n   * @private\n   * @see WebexPlugin.initialize\n   * @param  {...any} args\n   * @returns {undefined}\n   */\n  initialize: function initialize() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    (0, _apply2.default)(_webexCore.WebexPlugin.prototype.initialize, this, args);\n  },\n\n  /**\n   * Register to listen for incoming attachmentAction events\n   * This is an alternate approach to registering for attachmentAction webhooks.\n   * The events passed to any registered handlers will be similar to the webhook JSON,\n   * but will omit webhook specific fields such as name, secret, url, etc.\n   * The attachmentActions.listen() event objects can also include additional fields not\n   * available in the webhook's JSON payload, specifically: `inputs`.\n   * To utilize the `listen()` method, the authorization token used\n   * will need to have `spark:all` and `spark:kms` scopes enabled.\n   * Note that by configuring your application to enable or disable `spark:all`\n   * via its configuration page will also enable or disable `spark:kms`.\n   * See the <a href=\"https://js.samples.s4d.io/browser-socket/\">Sample App</a>\n   * for more details.\n   * @instance\n   * @memberof Messages\n   * @returns {Promise}\n   * @example\n   * webex.attachmentActions.listen()\n   *   .then(() => {\n   *     console.log('listening to attachmentActions events');\n   *     webex.attachmentActions.on('created', (event) => console.log(`Got an attachmentActions:created event:\\n${event}`));\n   *   })\n   *   .catch((e) => console.error(`Unable to register for attachmentAction events: ${e}`));\n   * // Some app logic...\n   * // WHen it is time to cleanup\n   * webex.attachmentActions.stopListening();\n   * webex.attachmentActions.off('created');\n   */\n  listen: function listen() {\n    var _this = this; // Create a common envelope that we will wrap all events in\n\n\n    return (0, _common.createEventEnvelope)(this.webex, _common.SDK_EVENT.EXTERNAL.RESOURCE.ATTACHMENT_ACTIONS).then(function (envelope) {\n      _this.eventEnvelope = envelope; // Register to listen to events\n\n      return _this.webex.internal.mercury.connect().then(function () {\n        _this.listenTo(_this.webex.internal.mercury, _common.SDK_EVENT.INTERNAL.TEAMS_ACTIVITY, function (event) {\n          return _this.onWebexApiEvent(event);\n        });\n      });\n    });\n  },\n\n  /**\n     * Post a new attachment action for a message with attachment.\n     * @instance\n     * @memberof AttachmentActions\n     * @param {AttachmentActionObject} attachmentAction\n     * @returns {Promise<AttachmentActionObject>}\n     * @example\n     * webex.rooms.create({title: 'Create Message with card Example'})\n     *   .then(function(room) {\n     *     return webex.messages.create({\n     *       text: 'Howdy!',\n     *       roomId: room.id,\n     *       attachments:[ {\n     *          contentType: 'application/vnd.microsoft.card.adaptive',\n     *         content: {\n     *           type: 'AdaptiveCard',\n     *           version: '1.0',\n     *           body: [\n     *            {\n     *             type: 'TextBlock',\n     *             text: '',\n     *             size: 'large'\n     *             },\n     *           {\n     *             type: 'TextBlock',\n     *             text: 'Adaptive Cards',\n     *             separation: 'none'\n     *           }\n     *           {\n     *           type: 'Input.Date',\n     *           id: 'dueDate'\n     *           }\n     *       ],\n     *     actions: [\n     *         {\n     *             type: 'Action.Submit',\n     *             title: 'Due Date'\n     *         }\n     *     ]\n     *   }\n     *  }]\n     *     });\n     *   })\n     *   .then(function(message) {\n     *    return webex.attachmentActions.create({\n     *      type: 'submit',\n     *      messageId: message.id,\n     *      inputs:{\n     *        dueDate: '26/06/1995'\n     *      }\n     *    })\n     *    .then(function(attachmentAction)){\n     *      var assert = require('assert');\n     *      assert(attachmentAction.id);\n     *      assert(attachmentAction.type);\n     *      assert(attachmentAction.personId);\n     *      assert(attachmentAction.inputs);\n     *      assert(attachmentAction.messageId);\n     *      assert(attachmentAction.roomId);\n     *      assert(attachmentAction.created);\n     *      return 'success';\n     *     }\n     *   });\n     *   // => success\n     */\n  create: function create(attachmentAction) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'attachment/actions',\n      body: attachmentAction\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Returns a single attachment action.\n   * @instance\n   * @memberof AttachmentActions\n   * @param {string} attachmentAction\n   * @returns {Promise<AttachmentActionObject>}\n   * @example\n   * var attachmentAction;\n   * webex.rooms.create({title: 'Get Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id,\n   *       attachments:[ {\n   *          contentType: 'application/vnd.microsoft.card.adaptive',\n   *         content: {\n   *           type: 'AdaptiveCard',\n   *           version: '1.0',\n   *           body: [\n   *            {\n   *             type: 'TextBlock',\n   *             text: '',\n   *             size: 'large'\n   *             },\n   *           {\n   *             type: 'TextBlock',\n   *             text: 'Adaptive Cards',\n   *             separation: 'none'\n   *           },\n   *           {\n   *           type: 'Input.Date',\n   *           id: 'dueDate'\n   *           }\n   *       ],\n   *     actions: [\n   *         {\n   *             type: 'Action.Submit',\n   *             title: 'Due Date'\n   *         }\n   *     ]\n   *   }\n   *  }]\n   *     });\n   *   })\n   *   .then(function(message) {\n   *     return webex.attachmentActions.create({\n   *      type: 'submit',\n   *      messageId: message.id,\n   *      inputs:{\n   *        dueDate: '26/06/1995'\n   *      });\n   *   })\n   *   .then(function(attachmentAction) {\n   *     return webex.attachmentActions.get(attachmentAction.id)\n   *   })\n   *    .then(function(attachmentAction){\n   *        var assert = require('assert');\n   *        assert.deepEqual(attachmentAction, attachmentAction);\n   *        return 'success';\n   *      })\n   *   // => success\n   */\n  get: function get(attachmentAction) {\n    var id = attachmentAction.id || attachmentAction;\n    return this.request({\n      service: 'hydra',\n      resource: 'attachment/actions/' + id\n    }).then(function (res) {\n      return res.body.items || res.body;\n    });\n  },\n\n  /**\n   * This function is called when an internal mercury events fires,\n   * if the user registered for these events with the listen() function.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof AttachmentAction\n   * @param {Object} event\n   * @returns {void}\n   */\n  onWebexApiEvent: function onWebexApiEvent(event) {\n    var activity = event.data.activity;\n    /* eslint-disable no-case-declarations */\n\n    switch (activity.verb) {\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.CARD_ACTION:\n        var createdEvent = this.getattachmentActionEvent(activity, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n\n        if (createdEvent) {\n          debug('attachmentAction \"created\" payload:             ' + (0, _stringify2.default)(createdEvent));\n          this.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, createdEvent);\n        }\n\n        break;\n\n      default:\n        {\n          break;\n        }\n    }\n  },\n\n  /**\n   * Constructs the data object for an event on the attachmentAction resource,\n   * adhering to Hydra's Webehook data structure messages.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof AttachmentAction\n   * @param {Object} activity from mercury\n   * @param {Object} event type of \"webhook\" event\n   * @returns {Object} constructed event\n   */\n  getattachmentActionEvent: function getattachmentActionEvent(activity, event) {\n    try {\n      var sdkEvent = (0, _cloneDeep3.default)(this.eventEnvelope);\n      sdkEvent.event = event;\n      sdkEvent.data.created = activity.published;\n      sdkEvent.actorId = (0, _common.constructHydraId)(_common.hydraTypes.PEOPLE, activity.actor.entryUUID);\n      sdkEvent.data.roomId = (0, _common.constructHydraId)(_common.hydraTypes.ROOM, activity.target.id);\n      sdkEvent.data.messageId = (0, _common.constructHydraId)(_common.hydraTypes.MESSAGE, activity.parent.id);\n      sdkEvent.data.personId = (0, _common.constructHydraId)(_common.hydraTypes.PEOPLE, activity.actor.entryUUID); // Seems like it would be nice to have this, but its not in the hydra webhook\n      // sdkEvent.data.personEmail =\n      //   activity.actor.emailAddress || activity.actor.entryEmail;\n\n      sdkEvent.data.id = (0, _common.constructHydraId)(_common.hydraTypes.ATTACHMENT_ACTION, activity.id);\n\n      if (activity.object.inputs) {\n        sdkEvent.data.inputs = activity.object.inputs;\n      }\n\n      sdkEvent.data.type = activity.object.objectType;\n      return sdkEvent;\n    } catch (e) {\n      this.webex.logger.error('Unable to generate SDK event from mercury \\'socket activity for attachmentAction:' + event + ' event: ' + e.message);\n      return null;\n    }\n  },\n  version: '1.80.172'\n});\n\nexports.default = AttachmentActions;","map":{"version":3,"sources":["attachmentActions.js"],"names":["debug","require","AttachmentActions","initialize","args","WebexPlugin","listen","SDK_EVENT","create","method","service","resource","body","attachmentAction","res","get","id","onWebexApiEvent","activity","event","createdEvent","getattachmentActionEvent","sdkEvent","hydraTypes","e"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {\n  WebexPlugin\n} from '@webex/webex-core';\nimport {\n  SDK_EVENT,\n  createEventEnvelope,\n  constructHydraId,\n  hydraTypes\n} from '@webex/common';\nimport {cloneDeep} from 'lodash';\n\nconst debug = require('debug')('attachmentActions');\n\n\n/**\n * @typedef {Object} AttachmentActionObject\n * @property {string} id - (server generated) Unique identifier for the attachment action\n * @property {string} messageId - The ID of the message in which attachment action is to be performed\n * @property {string} type - The type of attachment action eg., submit\n * @property {Object} inputs - The inputs for form fields in attachment message\n * @property {string} personId - (server generated) The ID for the author of the attachment action\n * @property {string} roomId - (server generated) The ID for the room of the message\n * @property {isoDate} created - (server generated) The date and time that the message was created\n */\n\n/**\n * AttachmentActions are events that communicate information when a user clicks on an\n * Action.Submit button in a card displayed in Webex Teams\n * Information conveyed in an AttachmentAction includes details about the user that\n * clicked the button along with any card specific inputs. See the\n * {@link https://developer.webex.com/docs/api/v1/attachment-actions|Attachments Actions API Documentation}\n * for more details\n * @class\n */\nconst AttachmentActions = WebexPlugin.extend({\n  /**\n   * Initializer used to generate AttachmentActions\n   * as a plugin wrapped around the provided arguments.\n   * @private\n   * @see WebexPlugin.initialize\n   * @param  {...any} args\n   * @returns {undefined}\n   */\n  initialize(...args) {\n    Reflect.apply(WebexPlugin.prototype.initialize, this, args);\n  },\n\n  /**\n   * Register to listen for incoming attachmentAction events\n   * This is an alternate approach to registering for attachmentAction webhooks.\n   * The events passed to any registered handlers will be similar to the webhook JSON,\n   * but will omit webhook specific fields such as name, secret, url, etc.\n   * The attachmentActions.listen() event objects can also include additional fields not\n   * available in the webhook's JSON payload, specifically: `inputs`.\n   * To utilize the `listen()` method, the authorization token used\n   * will need to have `spark:all` and `spark:kms` scopes enabled.\n   * Note that by configuring your application to enable or disable `spark:all`\n   * via its configuration page will also enable or disable `spark:kms`.\n   * See the <a href=\"https://js.samples.s4d.io/browser-socket/\">Sample App</a>\n   * for more details.\n   * @instance\n   * @memberof Messages\n   * @returns {Promise}\n   * @example\n   * webex.attachmentActions.listen()\n   *   .then(() => {\n   *     console.log('listening to attachmentActions events');\n   *     webex.attachmentActions.on('created', (event) => console.log(`Got an attachmentActions:created event:\\n${event}`));\n   *   })\n   *   .catch((e) => console.error(`Unable to register for attachmentAction events: ${e}`));\n   * // Some app logic...\n   * // WHen it is time to cleanup\n   * webex.attachmentActions.stopListening();\n   * webex.attachmentActions.off('created');\n   */\n  listen() {\n    // Create a common envelope that we will wrap all events in\n    return createEventEnvelope(this.webex,\n      SDK_EVENT.EXTERNAL.RESOURCE.ATTACHMENT_ACTIONS)\n      .then((envelope) => {\n        this.eventEnvelope = envelope;\n\n        // Register to listen to events\n        return this.webex.internal.mercury.connect().then(() => {\n          this.listenTo(this.webex.internal.mercury,\n            SDK_EVENT.INTERNAL.TEAMS_ACTIVITY,\n            (event) => this.onWebexApiEvent(event));\n        });\n      });\n  },\n\n  /**\n     * Post a new attachment action for a message with attachment.\n     * @instance\n     * @memberof AttachmentActions\n     * @param {AttachmentActionObject} attachmentAction\n     * @returns {Promise<AttachmentActionObject>}\n     * @example\n     * webex.rooms.create({title: 'Create Message with card Example'})\n     *   .then(function(room) {\n     *     return webex.messages.create({\n     *       text: 'Howdy!',\n     *       roomId: room.id,\n     *       attachments:[ {\n     *          contentType: 'application/vnd.microsoft.card.adaptive',\n     *         content: {\n     *           type: 'AdaptiveCard',\n     *           version: '1.0',\n     *           body: [\n     *            {\n     *             type: 'TextBlock',\n     *             text: '',\n     *             size: 'large'\n     *             },\n     *           {\n     *             type: 'TextBlock',\n     *             text: 'Adaptive Cards',\n     *             separation: 'none'\n     *           }\n     *           {\n     *           type: 'Input.Date',\n     *           id: 'dueDate'\n     *           }\n     *       ],\n     *     actions: [\n     *         {\n     *             type: 'Action.Submit',\n     *             title: 'Due Date'\n     *         }\n     *     ]\n     *   }\n     *  }]\n     *     });\n     *   })\n     *   .then(function(message) {\n     *    return webex.attachmentActions.create({\n     *      type: 'submit',\n     *      messageId: message.id,\n     *      inputs:{\n     *        dueDate: '26/06/1995'\n     *      }\n     *    })\n     *    .then(function(attachmentAction)){\n     *      var assert = require('assert');\n     *      assert(attachmentAction.id);\n     *      assert(attachmentAction.type);\n     *      assert(attachmentAction.personId);\n     *      assert(attachmentAction.inputs);\n     *      assert(attachmentAction.messageId);\n     *      assert(attachmentAction.roomId);\n     *      assert(attachmentAction.created);\n     *      return 'success';\n     *     }\n     *   });\n     *   // => success\n     */\n  create(attachmentAction) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'attachment/actions',\n      body: attachmentAction\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single attachment action.\n   * @instance\n   * @memberof AttachmentActions\n   * @param {string} attachmentAction\n   * @returns {Promise<AttachmentActionObject>}\n   * @example\n   * var attachmentAction;\n   * webex.rooms.create({title: 'Get Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id,\n   *       attachments:[ {\n   *          contentType: 'application/vnd.microsoft.card.adaptive',\n   *         content: {\n   *           type: 'AdaptiveCard',\n   *           version: '1.0',\n   *           body: [\n   *            {\n   *             type: 'TextBlock',\n   *             text: '',\n   *             size: 'large'\n   *             },\n   *           {\n   *             type: 'TextBlock',\n   *             text: 'Adaptive Cards',\n   *             separation: 'none'\n   *           },\n   *           {\n   *           type: 'Input.Date',\n   *           id: 'dueDate'\n   *           }\n   *       ],\n   *     actions: [\n   *         {\n   *             type: 'Action.Submit',\n   *             title: 'Due Date'\n   *         }\n   *     ]\n   *   }\n   *  }]\n   *     });\n   *   })\n   *   .then(function(message) {\n   *     return webex.attachmentActions.create({\n   *      type: 'submit',\n   *      messageId: message.id,\n   *      inputs:{\n   *        dueDate: '26/06/1995'\n   *      });\n   *   })\n   *   .then(function(attachmentAction) {\n   *     return webex.attachmentActions.get(attachmentAction.id)\n   *   })\n   *    .then(function(attachmentAction){\n   *        var assert = require('assert');\n   *        assert.deepEqual(attachmentAction, attachmentAction);\n   *        return 'success';\n   *      })\n   *   // => success\n   */\n  get(attachmentAction) {\n    const id = attachmentAction.id || attachmentAction;\n\n    return this.request({\n      service: 'hydra',\n      resource: `attachment/actions/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * This function is called when an internal mercury events fires,\n   * if the user registered for these events with the listen() function.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof AttachmentAction\n   * @param {Object} event\n   * @returns {void}\n   */\n  onWebexApiEvent(event) {\n    const {activity} = event.data;\n\n    /* eslint-disable no-case-declarations */\n    switch (activity.verb) {\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.CARD_ACTION:\n        const createdEvent =\n          this.getattachmentActionEvent(activity,\n            SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n\n        if (createdEvent) {\n          debug(`attachmentAction \"created\" payload: \\\n            ${JSON.stringify(createdEvent)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, createdEvent);\n        }\n        break;\n\n      default: {\n        break;\n      }\n    }\n  },\n\n  /**\n   * Constructs the data object for an event on the attachmentAction resource,\n   * adhering to Hydra's Webehook data structure messages.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof AttachmentAction\n   * @param {Object} activity from mercury\n   * @param {Object} event type of \"webhook\" event\n   * @returns {Object} constructed event\n   */\n  getattachmentActionEvent(activity, event) {\n    try {\n      const sdkEvent = cloneDeep(this.eventEnvelope);\n\n      sdkEvent.event = event;\n      sdkEvent.data.created = activity.published;\n      sdkEvent.actorId =\n        constructHydraId(hydraTypes.PEOPLE, activity.actor.entryUUID);\n      sdkEvent.data.roomId =\n        constructHydraId(hydraTypes.ROOM, activity.target.id);\n      sdkEvent.data.messageId =\n        constructHydraId(hydraTypes.MESSAGE, activity.parent.id);\n      sdkEvent.data.personId =\n        constructHydraId(hydraTypes.PEOPLE, activity.actor.entryUUID);\n      // Seems like it would be nice to have this, but its not in the hydra webhook\n      // sdkEvent.data.personEmail =\n      //   activity.actor.emailAddress || activity.actor.entryEmail;\n\n      sdkEvent.data.id =\n        constructHydraId(hydraTypes.ATTACHMENT_ACTION, activity.id);\n      if (activity.object.inputs) {\n        sdkEvent.data.inputs = activity.object.inputs;\n      }\n      sdkEvent.data.type = activity.object.objectType;\n\n      return sdkEvent;\n    }\n    catch (e) {\n      this.webex.logger.error(`Unable to generate SDK event from mercury \\\n'socket activity for attachmentAction:${event} event: ${e.message}`);\n\n      return null;\n    }\n  }\n\n});\n\nexport default AttachmentActions;\n"]},"metadata":{},"sourceType":"script"}