{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _map = require('babel-runtime/core-js/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _errors = require('./errors');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Binds a namespace\n * @param {string} namespace\n * @param {Object} options\n * @param {Object} options.data\n * @private\n * @returns {Promise<Object>}\n */\n\n\nfunction _bind(namespace) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options = options || {};\n\n  if (!namespace) {\n    return _promise2.default.reject(new Error('`namespace` is required'));\n  }\n\n  if (!options.logger) {\n    return _promise2.default.reject(new Error('`options.logger` is required'));\n  }\n\n  var _options = options,\n      logger = _options.logger;\n  var map = new _map2.default([['@', {}]]);\n\n  if (options.data) {\n    (0, _keys2.default)(options.data).forEach(function (key) {\n      map.set(key, options.data[key]);\n    });\n  }\n\n  logger.debug('memory-store-adapter: returning binding');\n  return _promise2.default.resolve({\n    clear: function clear() {\n      logger.debug('memory-store-adapter: clearing the binding');\n      return _promise2.default.resolve(map.clear());\n    },\n    del: function del(key) {\n      logger.debug('memory-store-adapter: deleting `' + key + '`');\n      return _promise2.default.resolve(map.delete(key));\n    },\n    get: function get(key) {\n      logger.debug('memory-store-adapter: reading `' + key + '`');\n      var res = map.get(key);\n\n      if (typeof res === 'undefined') {\n        return _promise2.default.reject(new _errors.NotFoundError());\n      }\n\n      return _promise2.default.resolve(res);\n    },\n    put: function put(key, value) {\n      logger.debug('memory-store-adapter: writing `' + key + '`');\n      return _promise2.default.resolve(map.set(key, value));\n    }\n  });\n}\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nexports.default = {\n  bind: _bind,\n  preload: function preload(data) {\n    return {\n      bind: function bind(namespace) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        if (data[namespace]) {\n          options.data = data[namespace];\n        }\n\n        return _bind(namespace, options);\n      }\n    };\n  }\n};","map":{"version":3,"sources":["memory-store-adapter.js"],"names":["options","logger","map","clear","del","get","res","NotFoundError","put","bind","preload","data","_bind"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {NotFoundError} from './errors';\n\n/**\n * Binds a namespace\n * @param {string} namespace\n * @param {Object} options\n * @param {Object} options.data\n * @private\n * @returns {Promise<Object>}\n */\nfunction _bind(namespace, options = {}) {\n  options = options || {};\n  if (!namespace) {\n    return Promise.reject(new Error('`namespace` is required'));\n  }\n\n  if (!options.logger) {\n    return Promise.reject(new Error('`options.logger` is required'));\n  }\n\n  const {logger} = options;\n\n  const map = new Map([['@', {}]]);\n\n  if (options.data) {\n    Object.keys(options.data).forEach((key) => {\n      map.set(key, options.data[key]);\n    });\n  }\n\n  logger.debug('memory-store-adapter: returning binding');\n\n  return Promise.resolve({\n    clear() {\n      logger.debug('memory-store-adapter: clearing the binding');\n\n      return Promise.resolve(map.clear());\n    },\n    del(key) {\n      logger.debug(`memory-store-adapter: deleting \\`${key}\\``);\n\n      return Promise.resolve(map.delete(key));\n    },\n    get(key) {\n      logger.debug(`memory-store-adapter: reading \\`${key}\\``);\n      const res = map.get(key);\n\n      if (typeof res === 'undefined') {\n        return Promise.reject(new NotFoundError());\n      }\n\n      return Promise.resolve(res);\n    },\n    put(key, value) {\n      logger.debug(`memory-store-adapter: writing \\`${key}\\``);\n\n      return Promise.resolve(map.set(key, value));\n    }\n  });\n}\n\nexport default {\n  bind: _bind,\n  preload(data) {\n    return {\n      bind(namespace, options = {}) {\n        if (data[namespace]) {\n          options.data = data[namespace];\n        }\n\n        return _bind(namespace, options);\n      }\n    };\n  }\n};\n"]},"metadata":{},"sourceType":"script"}