{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _has2 = require('lodash/has');\n\nvar _has3 = _interopRequireDefault(_has2);\n\nvar _search = require('./search');\n\nObject.defineProperty(exports, 'default', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_search).default;\n  }\n});\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _search2 = _interopRequireDefault(_search);\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nrequire('@webex/internal-plugin-conversation');\n\nrequire('@webex/internal-plugin-encryption');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n(0, _webexCore.registerInternalPlugin)('search', _search2.default, {\n  config: _config2.default,\n  payloadTransformer: {\n    predicates: [{\n      name: 'encryptSearchQuery',\n      direction: 'outbound',\n      test: function test(ctx, options) {\n        if (!(0, _has3.default)(options, 'body.query')) {\n          return _promise2.default.resolve(false);\n        }\n\n        if (!(0, _has3.default)(options, 'body.searchEncryptionKeyUrl')) {\n          return _promise2.default.resolve(false);\n        }\n\n        if (options.service === 'argonaut') {\n          return _promise2.default.resolve(true);\n        }\n\n        if (options.url) {\n          var service = ctx.webex.internal.services.getServiceFromUrl(options.url);\n          return _promise2.default.resolve(service && service.name === 'argonaut');\n        }\n\n        return _promise2.default.resolve(false);\n      },\n      extract: function extract(options) {\n        return _promise2.default.resolve(options.body);\n      }\n    }, {\n      name: 'transformObjectArray',\n      direction: 'inbound',\n      test: function test(ctx, response) {\n        return _promise2.default.resolve((0, _has3.default)(response, 'body.activities.items[0].objectType')).then(function (res) {\n          if (!res) {\n            return _promise2.default.resolve(false);\n          }\n\n          if (response.options.service === 'argonaut') {\n            return _promise2.default.resolve(true);\n          }\n\n          if (response.options.url) {\n            var service = ctx.webex.internal.services.getServiceFromUrl(response.options.url);\n            return _promise2.default.resolve(service && service.name === 'argonaut');\n          }\n\n          return _promise2.default.resolve(false);\n        });\n      },\n      extract: function extract(response) {\n        return _promise2.default.resolve(response.body.activities.items);\n      }\n    }],\n    transforms: [{\n      name: 'encryptSearchQuery',\n      direction: 'outbound',\n      fn: function fn(ctx, object) {\n        return ctx.webex.internal.encryption.encryptText(object.searchEncryptionKeyUrl, object.query).then(function (q) {\n          object.query = q;\n        });\n      }\n    }]\n  }\n});\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */","map":{"version":3,"sources":["index.js"],"names":["Search","config","payloadTransformer","predicates","name","direction","test","options","service","ctx","extract","response","transforms","fn","object","default"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {registerInternalPlugin} from '@webex/webex-core';\nimport {has} from 'lodash';\n\nimport Search from './search';\nimport config from './config';\n\nimport '@webex/internal-plugin-conversation';\nimport '@webex/internal-plugin-encryption';\n\nregisterInternalPlugin('search', Search, {\n  config,\n  payloadTransformer: {\n    predicates: [\n      {\n        name: 'encryptSearchQuery',\n        direction: 'outbound',\n        test(ctx, options) {\n          if (!has(options, 'body.query')) {\n            return Promise.resolve(false);\n          }\n\n          if (!has(options, 'body.searchEncryptionKeyUrl')) {\n            return Promise.resolve(false);\n          }\n\n          if (options.service === 'argonaut') {\n            return Promise.resolve(true);\n          }\n\n          if (options.url) {\n            const service = ctx.webex.internal.services.getServiceFromUrl(options.url);\n\n            return Promise.resolve(service && service.name === 'argonaut');\n          }\n\n          return Promise.resolve(false);\n        },\n        extract(options) {\n          return Promise.resolve(options.body);\n        }\n      },\n      {\n        name: 'transformObjectArray',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(has(response, 'body.activities.items[0].objectType'))\n            .then((res) => {\n              if (!res) {\n                return Promise.resolve(false);\n              }\n\n              if (response.options.service === 'argonaut') {\n                return Promise.resolve(true);\n              }\n\n              if (response.options.url) {\n                const service = ctx.webex.internal.services.getServiceFromUrl(response.options.url);\n\n                return Promise.resolve(service && service.name === 'argonaut');\n              }\n\n              return Promise.resolve(false);\n            });\n        },\n        extract(response) {\n          return Promise.resolve(response.body.activities.items);\n        }\n      }\n    ],\n    transforms: [\n      {\n        name: 'encryptSearchQuery',\n        direction: 'outbound',\n        fn(ctx, object) {\n          return ctx.webex.internal.encryption.encryptText(object.searchEncryptionKeyUrl, object.query)\n            .then((q) => {\n              object.query = q;\n            });\n        }\n      }\n    ]\n  }\n});\n\nexport {default} from './search';\n"]},"metadata":{},"sourceType":"script"}