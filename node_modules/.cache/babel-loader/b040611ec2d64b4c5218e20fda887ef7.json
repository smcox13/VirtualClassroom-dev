{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _ampersandState = require('ampersand-state');\n\nvar _ampersandState2 = _interopRequireDefault(_ampersandState);\n\nvar _util = require('util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * WebexInternalCore is an extra layer of nesting to make it blatantly clear that\n * private plugins are, in fact, private.\n * @class\n */\n\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar WebexInternalCore = _ampersandState2.default.extend({\n  derived: {\n    ready: {\n      deps: [],\n      fn: function fn() {\n        var _this = this;\n\n        return (0, _keys2.default)(this._children).reduce(function (ready, name) {\n          return ready && _this[name] && _this[name].ready !== false;\n        }, true);\n      }\n    }\n  },\n\n  /**\n   * @instance\n   * @memberof WebexPlugin\n   * @param {number} depth\n   * @private\n   * @returns {Object}\n   */\n  inspect: function inspect(depth) {\n    return _util2.default.inspect(this.serialize({\n      props: true,\n      session: true,\n      derived: true\n    }), {\n      depth: depth\n    });\n  }\n});\n\nexports.default = WebexInternalCore;","map":{"version":3,"sources":["webex-internal-core.js"],"names":["WebexInternalCore","derived","ready","deps","fn","inspect","props","session","depth"],"mappings":";;;;;;;;;;AAIA,IAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;;;;;;;;AAEA;;;;;;AAPA;;;;;AAYA,IAAMA,iBAAAA,GAAoB,gBAAA,CAAA,OAAA,CAAA,MAAA,CAAgB;AACxCC,EAAAA,OAAAA,EAAS;AACPC,IAAAA,KAAAA,EAAO;AACLC,MAAAA,IAAAA,EADK,EAAA;AAELC,MAAAA,EAFK,EAAA,SAAA,EAAA,GAEA;AAAA,YAAA,KAAA,GAAA,IAAA;;AACH,eAAO,CAAA,GAAA,MAAA,CAAA,OAAA,EAAY,KAAZ,SAAA,EAAA,MAAA,CAAmC,UAAA,KAAA,EAAA,IAAA,EAAA;AAAA,iBAAiBF,KAAAA,IAAS,KAAA,CAATA,IAAS,CAATA,IAAuB,KAAA,CAAA,IAAA,CAAA,CAAA,KAAA,KAAxC,KAAA;AAAnC,SAAA,EAAP,IAAO,CAAP;AACD;AAJI;AADA,GAD+B;;AAUxC;;;;;;;AAOAG,EAAAA,OAjBwC,EAAA,SAAA,OAAA,CAAA,KAAA,EAiBzB;AACb,WAAO,MAAA,CAAA,OAAA,CAAA,OAAA,CAAa,KAAA,SAAA,CAAe;AACjCC,MAAAA,KAAAA,EADiC,IAAA;AAEjCC,MAAAA,OAAAA,EAFiC,IAAA;AAGjCN,MAAAA,OAAAA,EAAS;AAHwB,KAAf,CAAb,EAIH;AAACO,MAAAA,KAAAA,EAJL;AAII,KAJG,CAAP;AAKD;AAvBuC,CAAhB,CAA1B;;kBA0BeR,iB","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport AmpState from 'ampersand-state';\nimport util from 'util';\n\n/**\n * WebexInternalCore is an extra layer of nesting to make it blatantly clear that\n * private plugins are, in fact, private.\n * @class\n */\nconst WebexInternalCore = AmpState.extend({\n  derived: {\n    ready: {\n      deps: [],\n      fn() {\n        return Object.keys(this._children).reduce((ready, name) => ready && this[name] && this[name].ready !== false, true);\n      }\n    }\n  },\n\n  /**\n   * @instance\n   * @memberof WebexPlugin\n   * @param {number} depth\n   * @private\n   * @returns {Object}\n   */\n  inspect(depth) {\n    return util.inspect(this.serialize({\n      props: true,\n      session: true,\n      derived: true\n    }), {depth});\n  }\n});\n\nexport default WebexInternalCore;\n"]},"metadata":{},"sourceType":"script"}