{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport SafeBag from \"./SafeBag.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC7292\r\n */\n\nexport default class SafeContents {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for SafeContents class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Array.<SafeBag>}\r\n     * @desc safeBags\r\n     */\n    this.safeBags = getParametersValue(parameters, \"safeBags\", SafeContents.defaultValues(\"safeBags\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"safeBags\":\n        return [];\n\n      default:\n        throw new Error(`Invalid member name for SafeContents class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"safeBags\":\n        return memberValue.length === 0;\n\n      default:\n        throw new Error(`Invalid member name for SafeContents class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * SafeContents ::= SEQUENCE OF SafeBag\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [safeBags]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Repeated({\n        name: names.safeBags || \"\",\n        value: SafeBag.schema()\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"safeBags\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, SafeContents.schema({\n      names: {\n        safeBags: \"safeBags\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for SafeContents\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.safeBags = Array.from(asn1.result.safeBags, element => new SafeBag({\n      schema: element\n    })); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: Array.from(this.safeBags, element => element.toSchema())\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    return {\n      safeBags: Array.from(this.safeBags, element => element.toJSON())\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/SafeContents.js"],"names":["asn1js","getParametersValue","clearProps","SafeBag","SafeContents","constructor","parameters","safeBags","defaultValues","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","names","Sequence","name","blockName","value","Repeated","asn1","compareSchema","verified","Array","from","result","element","toSchema","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport SafeBag from \"./SafeBag.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class SafeContents\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SafeContents class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<SafeBag>}\r\n\t\t * @desc safeBags\r\n\t\t */\r\n\t\tthis.safeBags = getParametersValue(parameters, \"safeBags\", SafeContents.defaultValues(\"safeBags\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"safeBags\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SafeContents class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"safeBags\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SafeContents class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SafeContents ::= SEQUENCE OF SafeBag\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [safeBags]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.safeBags || \"\"),\r\n\t\t\t\t\tvalue: SafeBag.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"safeBags\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSafeContents.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tsafeBags: \"safeBags\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SafeContents\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.safeBags = Array.from(asn1.result.safeBags, element => new SafeBag({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.safeBags, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tsafeBags: Array.from(this.safeBags, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}