{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _deleteProperty = require('babel-runtime/core-js/reflect/delete-property');\n\nvar _deleteProperty2 = _interopRequireDefault(_deleteProperty);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _set2 = require('lodash/set');\n\nvar _set3 = _interopRequireDefault(_set2);\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _camelCase2 = require('lodash/camelCase');\n\nvar _camelCase3 = _interopRequireDefault(_camelCase2);\n\nvar _dec, _dec2, _desc, _value, _obj;\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar _url = require('url');\n\nvar _url2 = _interopRequireDefault(_url);\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _common = require('@webex/common');\n\nvar _backoff = require('backoff');\n\nvar _backoff2 = _interopRequireDefault(_backoff);\n\nvar _socket = require('./socket');\n\nvar _socket2 = _interopRequireDefault(_socket);\n\nvar _errors = require('./errors');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n\nvar normalReconnectReasons = ['idle', 'done (forced)', 'pong not received', 'pong mismatch'];\n\nvar Mercury = _webexCore.WebexPlugin.extend((_dec = (0, _common.deprecated)('Mercury#listen(): Use Mercury#connect() instead'), _dec2 = (0, _common.deprecated)('Mercury#stopListening(): Use Mercury#disconnect() instead'), (_obj = {\n  namespace: 'Mercury',\n  session: {\n    connected: {\n      default: false,\n      type: 'boolean'\n    },\n    connecting: {\n      default: false,\n      type: 'boolean'\n    },\n    socket: 'object',\n    localClusterServiceUrls: 'object'\n  },\n  derived: {\n    listening: {\n      deps: ['connected'],\n      fn: function fn() {\n        return this.connected;\n      }\n    }\n  },\n  connect: function connect(webSocketUrl) {\n    var _this = this;\n\n    if (this.connected) {\n      this.logger.info('mercury: already connected, will not connect again');\n      return _promise2.default.resolve();\n    }\n\n    this.connecting = true;\n    return _promise2.default.resolve(this.webex.internal.device.registered || this.webex.internal.device.register()).then(function () {\n      _this.logger.info('mercury: connecting');\n\n      return _this._connectWithBackoff(webSocketUrl);\n    });\n  },\n  disconnect: function disconnect() {\n    var _this2 = this;\n\n    return new _promise2.default(function (resolve) {\n      if (_this2.backoffCall) {\n        _this2.logger.info('mercury: aborting connection');\n\n        _this2.backoffCall.abort();\n      }\n\n      if (_this2.socket) {\n        _this2.socket.removeAllListeners('message');\n\n        _this2.once('offline', resolve);\n\n        _this2.socket.close();\n\n        return;\n      }\n\n      resolve();\n    });\n  },\n  listen: function listen() {\n    /* eslint no-invalid-this: [0] */\n    return this.connect();\n  },\n  stopListening: function stopListening() {\n    /* eslint no-invalid-this: [0] */\n    return this.disconnect();\n  },\n  processRegistrationStatusEvent: function processRegistrationStatusEvent(message) {\n    this.localClusterServiceUrls = message.localClusterServiceUrls;\n  },\n  _applyOverrides: function _applyOverrides(event) {\n    if (!event || !event.headers) {\n      return;\n    }\n\n    var headerKeys = (0, _keys2.default)(event.headers);\n    headerKeys.forEach(function (keyPath) {\n      (0, _set3.default)(event, keyPath, event.headers[keyPath]);\n    });\n  },\n  _prepareUrl: function _prepareUrl(webSocketUrl) {\n    var _this3 = this;\n\n    if (!webSocketUrl) {\n      webSocketUrl = this.webex.internal.device.webSocketUrl;\n    }\n\n    return this.webex.internal.feature.getFeature('developer', 'web-high-availability').then(function (haMessagingEnabled) {\n      if (haMessagingEnabled) {\n        return _this3.webex.internal.services.convertUrlToPriorityHostUrl(webSocketUrl);\n      }\n\n      return webSocketUrl;\n    }).then(function (wsUrl) {\n      webSocketUrl = wsUrl;\n    }).then(function () {\n      return _this3.webex.internal.feature.getFeature('developer', 'web-shared-mercury');\n    }).then(function (webSharedMercury) {\n      webSocketUrl = _url2.default.parse(webSocketUrl, true);\n      (0, _assign2.default)(webSocketUrl.query, {\n        outboundWireFormat: 'text',\n        bufferStates: true,\n        aliasHttpStatus: true\n      });\n\n      if (webSharedMercury) {\n        (0, _assign2.default)(webSocketUrl.query, {\n          mercuryRegistrationStatus: true,\n          isRegistrationRefreshEnabled: true\n        });\n        (0, _deleteProperty2.default)(webSocketUrl.query, 'bufferStates');\n      }\n\n      if ((0, _get3.default)(_this3, 'webex.config.device.ephemeral', false)) {\n        webSocketUrl.query.multipleConnections = true;\n      }\n\n      return _url2.default.format(webSocketUrl);\n    });\n  },\n  _attemptConnection: function _attemptConnection(socketUrl, callback) {\n    var _this4 = this;\n\n    var socket = new _socket2.default();\n    var attemptWSUrl = void 0;\n    socket.on('close', function () {\n      return _this4._onclose.apply(_this4, arguments);\n    });\n    socket.on('message', function () {\n      return _this4._onmessage.apply(_this4, arguments);\n    });\n    socket.on('sequence-mismatch', function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _this4._emit.apply(_this4, ['sequence-mismatch'].concat(args));\n    });\n\n    _promise2.default.all([this._prepareUrl(socketUrl), this.webex.credentials.getUserToken()]).then(function (_ref) {\n      var _ref2 = (0, _slicedToArray3.default)(_ref, 2),\n          webSocketUrl = _ref2[0],\n          token = _ref2[1];\n\n      if (!_this4.backoffCall) {\n        var msg = 'mercury: prevent socket open when backoffCall no longer defined';\n\n        _this4.logger.info(msg);\n\n        return _promise2.default.reject(new Error(msg));\n      }\n\n      attemptWSUrl = webSocketUrl;\n      var options = {\n        forceCloseDelay: _this4.config.forceCloseDelay,\n        pingInterval: _this4.config.pingInterval,\n        pongTimeout: _this4.config.pongTimeout,\n        token: token.toString(),\n        trackingId: _this4.webex.sessionId + '_' + Date.now(),\n        logger: _this4.logger\n      }; // if the consumer has supplied request options use them\n\n      if (_this4.webex.config.defaultMercuryOptions) {\n        _this4.logger.info('mercury: setting custom options');\n\n        options = (0, _extends3.default)({}, options, _this4.webex.config.defaultMercuryOptions);\n      } // Set the socket before opening it. This allows a disconnect() to close\n      // the socket if it is in the process of being opened.\n\n\n      _this4.socket = socket;\n      return socket.open(webSocketUrl, options);\n    }).then(function () {\n      _this4.webex.internal.metrics.submitClientMetrics('web-ha-mercury', {\n        fields: {\n          success: true\n        },\n        tags: {\n          action: 'connected',\n          url: attemptWSUrl\n        }\n      });\n\n      callback();\n      return _this4.webex.internal.feature.getFeature('developer', 'web-high-availability').then(function (haMessagingEnabled) {\n        if (haMessagingEnabled) {\n          return _this4.webex.internal.device.refresh();\n        }\n\n        return _promise2.default.resolve();\n      });\n    }).catch(function (reason) {\n      // Suppress connection errors that appear to be network related. This\n      // may end up suppressing metrics during outages, but we might not care\n      // (especially since many of our outages happen in a way that client\n      // metrics can't be trusted).\n      if (reason.code !== 1006 && _this4.backoffCall && _this4.backoffCall.getNumRetries() > 0) {\n        _this4._emit('connection_failed', reason, {\n          retries: _this4.backoffCall.getNumRetries()\n        });\n      }\n\n      _this4.logger.info('mercury: connection attempt failed', reason); // UnknownResponse is produced by IE for any 4XXX; treated it like a bad\n      // web socket url and let WDM handle the token checking\n\n\n      if (reason instanceof _errors.UnknownResponse) {\n        _this4.logger.info('mercury: received unknown response code, refreshing device registration');\n\n        return _this4.webex.internal.device.refresh().then(function () {\n          return callback(reason);\n        });\n      } // NotAuthorized implies expired token\n\n\n      if (reason instanceof _errors.NotAuthorized) {\n        _this4.logger.info('mercury: received authorization error, reauthorizing');\n\n        return _this4.webex.credentials.refresh({\n          force: true\n        }).then(function () {\n          return callback(reason);\n        });\n      } // // NotFound implies expired web socket url\n      // else if (reason instanceof NotFound) {\n      //   this.logger.info(`mercury: received not found error, refreshing device registration`);\n      //   return this.webex.internal.device.refresh()\n      //     .then(() => callback(reason));\n      // }\n      // BadRequest implies current credentials are for a Service Account\n      // Forbidden implies current user is not entitle for Webex\n\n\n      if (reason instanceof _errors.BadRequest || reason instanceof _errors.Forbidden) {\n        _this4.logger.warn('mercury: received unrecoverable response from mercury');\n\n        _this4.backoffCall.abort();\n\n        return callback(reason);\n      }\n\n      if (reason instanceof _errors.ConnectionError) {\n        return _this4.webex.internal.feature.getFeature('developer', 'web-high-availability').then(function (haMessagingEnabled) {\n          if (haMessagingEnabled) {\n            _this4.logger.info('mercury: received a generic connection error, will try to connect to another datacenter');\n\n            _this4.webex.internal.metrics.submitClientMetrics('web-ha-mercury', {\n              fields: {\n                success: false\n              },\n              tags: {\n                action: 'failed',\n                error: reason.message,\n                url: attemptWSUrl\n              }\n            });\n\n            return _this4.webex.internal.services.markFailedUrl(attemptWSUrl);\n          }\n\n          return null;\n        }).then(function () {\n          return callback(reason);\n        });\n      }\n\n      return callback(reason);\n    }).catch(function (reason) {\n      _this4.logger.error('mercury: failed to handle connection failure', reason);\n\n      callback(reason);\n    });\n  },\n  _connectWithBackoff: function _connectWithBackoff(webSocketUrl) {\n    var _this5 = this;\n\n    return new _promise2.default(function (resolve, reject) {\n      // eslint gets confused about whether or not call is actually used\n      // eslint-disable-next-line prefer-const\n      var call = void 0;\n\n      var onComplete = function onComplete(err) {\n        _this5.connecting = false;\n        _this5.backoffCall = undefined;\n\n        if (err) {\n          _this5.logger.info('mercury: failed to connect after ' + call.getNumRetries() + ' retries; log statement about next retry was inaccurate; ' + err);\n\n          return reject(err);\n        }\n\n        _this5.connected = true;\n\n        _this5._emit('online');\n\n        return resolve();\n      }; // eslint-disable-next-line prefer-reflect\n\n\n      call = _backoff2.default.call(function (callback) {\n        _this5.logger.info('mercury: executing connection attempt ' + call.getNumRetries());\n\n        _this5._attemptConnection(webSocketUrl, callback);\n      }, onComplete);\n      call.setStrategy(new _backoff2.default.ExponentialStrategy({\n        initialDelay: _this5.config.backoffTimeReset,\n        maxDelay: _this5.config.backoffTimeMax\n      }));\n\n      if (_this5.config.maxRetries) {\n        call.failAfter(_this5.config.maxRetries);\n      }\n\n      call.on('abort', function () {\n        _this5.logger.info('mercury: connection aborted');\n\n        reject(new Error('Mercury Connection Aborted'));\n      });\n      call.on('callback', function (err) {\n        if (err) {\n          var number = call.getNumRetries();\n          var delay = Math.min(call.strategy_.nextBackoffDelay_, _this5.config.backoffTimeMax);\n\n          _this5.logger.info('mercury: failed to connect; attempting retry ' + (number + 1) + ' in ' + delay + ' ms');\n          /* istanbul ignore if */\n\n\n          if (process.env.NODE_ENV === 'development') {\n            _this5.logger.debug('mercury: ', err, err.stack);\n          }\n\n          return;\n        }\n\n        _this5.logger.info('mercury: connected');\n      });\n      call.start();\n      _this5.backoffCall = call;\n    });\n  },\n  _emit: function _emit() {\n    try {\n      this.trigger.apply(this, arguments);\n    } catch (error) {\n      this.logger.error('mercury: error occurred in event handler', error);\n    }\n  },\n  _getEventHandlers: function _getEventHandlers(eventType) {\n    var _eventType$split = eventType.split('.'),\n        _eventType$split2 = (0, _slicedToArray3.default)(_eventType$split, 2),\n        namespace = _eventType$split2[0],\n        name = _eventType$split2[1];\n\n    var handlers = [];\n\n    if (!this.webex[namespace] && !this.webex.internal[namespace]) {\n      return handlers;\n    }\n\n    var handlerName = (0, _camelCase3.default)('process_' + name + '_event');\n\n    if ((this.webex[namespace] || this.webex.internal[namespace])[handlerName]) {\n      handlers.push({\n        name: handlerName,\n        namespace: namespace\n      });\n    }\n\n    return handlers;\n  },\n  _onclose: function _onclose(event) {\n    // I don't see any way to avoid the complexity or statement count in here.\n\n    /* eslint complexity: [0] */\n    try {\n      var reason = event.reason && event.reason.toLowerCase();\n      var socketUrl = this.socket.url;\n      this.socket.removeAllListeners();\n      this.unset('socket');\n      this.connected = false;\n\n      this._emit('offline', event);\n\n      switch (event.code) {\n        case 1003:\n          // metric: disconnect\n          this.logger.info('mercury: Mercury service rejected last message; will not reconnect: ' + event.reason);\n\n          this._emit('offline.permanent', event);\n\n          break;\n\n        case 4000:\n          // metric: disconnect\n          this.logger.info('mercury: socket replaced; will not reconnect');\n\n          this._emit('offline.replaced', event);\n\n          break;\n\n        case 1001:\n        case 1005:\n        case 1006:\n        case 1011:\n          this.logger.info('mercury: socket disconnected; reconnecting');\n\n          this._emit('offline.transient', event);\n\n          this._reconnect(socketUrl); // metric: disconnect\n          // if (code == 1011 && reason !== ping error) metric: unexpected disconnect\n\n\n          break;\n\n        case 1000:\n          if (normalReconnectReasons.includes(reason)) {\n            this.logger.info('mercury: socket disconnected; reconnecting');\n\n            this._emit('offline.transient', event);\n\n            this._reconnect(socketUrl); // metric: disconnect\n            // if (reason === done forced) metric: force closure\n\n          } else {\n            this.logger.info('mercury: socket disconnected; will not reconnect');\n\n            this._emit('offline.permanent', event);\n          }\n\n          break;\n\n        default:\n          this.logger.info('mercury: socket disconnected unexpectedly; will not reconnect'); // unexpected disconnect\n\n          this._emit('offline.permanent', event);\n\n      }\n    } catch (error) {\n      this.logger.error('mercury: error occurred in close handler', error);\n    }\n  },\n  _onmessage: function _onmessage(event) {\n    var _this6 = this;\n\n    var envelope = event.data;\n\n    if (process.env.ENABLE_MERCURY_LOGGING) {\n      this.logger.debug('mercury: message envelope: ', envelope);\n    }\n\n    var data = envelope.data;\n\n    this._applyOverrides(data);\n\n    return this._getEventHandlers(data.eventType).reduce(function (promise, handler) {\n      return promise.then(function () {\n        var namespace = handler.namespace,\n            name = handler.name;\n        return new _promise2.default(function (resolve) {\n          return resolve((_this6.webex[namespace] || _this6.webex.internal[namespace])[name](data));\n        }).catch(function (reason) {\n          return _this6.logger.error('mercury: error occurred in autowired event handler for ' + data.eventType, reason);\n        });\n      });\n    }, _promise2.default.resolve()).then(function () {\n      _this6._emit('event', event.data);\n\n      var _data$eventType$split = data.eventType.split('.'),\n          _data$eventType$split2 = (0, _slicedToArray3.default)(_data$eventType$split, 1),\n          namespace = _data$eventType$split2[0];\n\n      if (namespace === data.eventType) {\n        _this6._emit('event:' + namespace, envelope);\n      } else {\n        _this6._emit('event:' + namespace, envelope);\n\n        _this6._emit('event:' + data.eventType, envelope);\n      }\n    }).catch(function (reason) {\n      _this6.logger.error('mercury: error occurred processing socket message', reason);\n    });\n  },\n  _reconnect: function _reconnect(webSocketUrl) {\n    this.logger.info('mercury: reconnecting');\n    return this.connect(webSocketUrl);\n  },\n  version: '1.80.172'\n}, (_applyDecoratedDescriptor(_obj, 'connect', [_common.oneFlight], (0, _getOwnPropertyDescriptor2.default)(_obj, 'connect'), _obj), _applyDecoratedDescriptor(_obj, 'disconnect', [_common.oneFlight], (0, _getOwnPropertyDescriptor2.default)(_obj, 'disconnect'), _obj), _applyDecoratedDescriptor(_obj, 'listen', [_dec], (0, _getOwnPropertyDescriptor2.default)(_obj, 'listen'), _obj), _applyDecoratedDescriptor(_obj, 'stopListening', [_dec2], (0, _getOwnPropertyDescriptor2.default)(_obj, 'stopListening'), _obj)), _obj)));\n\nexports.default = Mercury;","map":{"version":3,"sources":["mercury.js"],"names":["normalReconnectReasons","Mercury","namespace","session","connected","default","type","connecting","socket","localClusterServiceUrls","derived","listening","deps","fn","oneFlight","connect","disconnect","resolve","listen","stopListening","processRegistrationStatusEvent","message","_applyOverrides","event","headerKeys","_prepareUrl","webSocketUrl","url","outboundWireFormat","bufferStates","aliasHttpStatus","mercuryRegistrationStatus","isRegistrationRefreshEnabled","_attemptConnection","Socket","attemptWSUrl","args","token","msg","options","forceCloseDelay","pingInterval","pongTimeout","trackingId","Date","logger","fields","success","tags","action","callback","reason","retries","UnknownResponse","NotAuthorized","force","BadRequest","Forbidden","ConnectionError","error","_connectWithBackoff","call","onComplete","reject","backoff","initialDelay","maxDelay","backoffTimeMax","number","delay","Math","process","err","_emit","_getEventHandlers","name","eventType","handlers","handlerName","_onclose","socketUrl","_onmessage","envelope","data","handler","_reconnect"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAIA,IAAA,IAAA,GAAA,OAAA,CAAA,KAAA,CAAA;;;;AAEA,IAAA,UAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAMA,sBAAAA,GAAyB,CAAA,MAAA,EAAA,eAAA,EAAA,mBAAA,EAA/B,eAA+B,CAA/B;;AAOA,IAAMC,OAAAA,GAAU,UAAA,CAAA,WAAA,CAAA,MAAA,EAAA,IAAA,GA+Db,CAAA,GAAA,OAAA,CAAA,UAAA,EA/Da,iDA+Db,CA/Da,EAAA,KAAA,GAqEb,CAAA,GAAA,OAAA,CAAA,UAAA,EArEa,2DAqEb,CArEa,GAAA,IAAA,GAAmB;AACjCC,EAAAA,SAAAA,EADiC,SAAA;AAGjCC,EAAAA,OAAAA,EAAS;AACPC,IAAAA,SAAAA,EAAW;AACTC,MAAAA,OAAAA,EADS,KAAA;AAETC,MAAAA,IAAAA,EAAM;AAFG,KADJ;AAKPC,IAAAA,UAAAA,EAAY;AACVF,MAAAA,OAAAA,EADU,KAAA;AAEVC,MAAAA,IAAAA,EAAM;AAFI,KALL;AASPE,IAAAA,MAAAA,EATO,QAAA;AAUPC,IAAAA,uBAAAA,EAAyB;AAVlB,GAHwB;AAgBjCC,EAAAA,OAAAA,EAAS;AACPC,IAAAA,SAAAA,EAAW;AACTC,MAAAA,IAAAA,EAAM,CADG,WACH,CADG;AAETC,MAAAA,EAFS,EAAA,SAAA,EAAA,GAEJ;AACH,eAAO,KAAP,SAAA;AACD;AAJQ;AADJ,GAhBwB;AA0BjCE,EAAAA,OA1BiC,EAAA,SAAA,OAAA,CAAA,YAAA,EA0BX;AAAA,QAAA,KAAA,GAAA,IAAA;;AACpB,QAAI,KAAJ,SAAA,EAAoB;AAClB,WAAA,MAAA,CAAA,IAAA,CAAA,oDAAA;AAEA,aAAO,SAAA,CAAA,OAAA,CAAP,OAAO,EAAP;AACD;;AAED,SAAA,UAAA,GAAA,IAAA;AAEA,WAAO,SAAA,CAAA,OAAA,CAAA,OAAA,CAAgB,KAAA,KAAA,CAAA,QAAA,CAAA,MAAA,CAAA,UAAA,IAAyC,KAAA,KAAA,CAAA,QAAA,CAAA,MAAA,CAAzD,QAAyD,EAAzD,EAAA,IAAA,CACC,YAAM;AACV,MAAA,KAAA,CAAA,MAAA,CAAA,IAAA,CAAA,qBAAA;;AAEA,aAAO,KAAA,CAAA,mBAAA,CAAP,YAAO,CAAP;AAJJ,KAAO,CAAP;AAnC+B,GAAA;AA4CjCC,EAAAA,UA5CiC,EAAA,SAAA,UAAA,GA4CpB;AAAA,QAAA,MAAA,GAAA,IAAA;;AACX,WAAO,IAAA,SAAA,CAAA,OAAA,CAAY,UAAA,OAAA,EAAa;AAC9B,UAAI,MAAA,CAAJ,WAAA,EAAsB;AACpB,QAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,8BAAA;;AACA,QAAA,MAAA,CAAA,WAAA,CAAA,KAAA;AACD;;AAED,UAAI,MAAA,CAAJ,MAAA,EAAiB;AACf,QAAA,MAAA,CAAA,MAAA,CAAA,kBAAA,CAAA,SAAA;;AACA,QAAA,MAAA,CAAA,IAAA,CAAA,SAAA,EAAA,OAAA;;AACA,QAAA,MAAA,CAAA,MAAA,CAAA,KAAA;;AAEA;AACD;;AAEDC,MAAAA,OAAAA;AAdF,KAAO,CAAP;AA7C+B,GAAA;AAgEjCC,EAAAA,MAhEiC,EAAA,SAAA,MAAA,GAgExB;AACP;AACA,WAAO,KAAP,OAAO,EAAP;AAlE+B,GAAA;AAsEjCC,EAAAA,aAtEiC,EAAA,SAAA,aAAA,GAsEjB;AACd;AACA,WAAO,KAAP,UAAO,EAAP;AAxE+B,GAAA;AA2EjCC,EAAAA,8BA3EiC,EAAA,SAAA,8BAAA,CAAA,OAAA,EA2EO;AACtC,SAAA,uBAAA,GAA+BC,OAAAA,CAA/B,uBAAA;AA5E+B,GAAA;AA+EjCC,EAAAA,eA/EiC,EAAA,SAAA,eAAA,CAAA,KAAA,EA+EV;AACrB,QAAI,CAAA,KAAA,IAAU,CAACC,KAAAA,CAAf,OAAA,EAA8B;AAC5B;AACD;;AACD,QAAMC,UAAAA,GAAa,CAAA,GAAA,MAAA,CAAA,OAAA,EAAYD,KAAAA,CAA/B,OAAmB,CAAnB;AAEAC,IAAAA,UAAAA,CAAAA,OAAAA,CAAmB,UAAA,OAAA,EAAa;AAC9B,OAAA,GAAA,KAAA,CAAA,OAAA,EAAA,KAAA,EAAA,OAAA,EAAoBD,KAAAA,CAAAA,OAAAA,CAApB,OAAoBA,CAApB;AADFC,KAAAA;AArF+B,GAAA;AA0FjCC,EAAAA,WA1FiC,EAAA,SAAA,WAAA,CAAA,YAAA,EA0FP;AAAA,QAAA,MAAA,GAAA,IAAA;;AACxB,QAAI,CAAJ,YAAA,EAAmB;AACjBC,MAAAA,YAAAA,GAAe,KAAA,KAAA,CAAA,QAAA,CAAA,MAAA,CAAfA,YAAAA;AACD;;AAED,WAAO,KAAA,KAAA,CAAA,QAAA,CAAA,OAAA,CAAA,UAAA,CAAA,WAAA,EAAA,uBAAA,EAAA,IAAA,CACC,UAAA,kBAAA,EAAwB;AAC5B,UAAA,kBAAA,EAAwB;AACtB,eAAO,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,QAAA,CAAA,2BAAA,CAAP,YAAO,CAAP;AACD;;AAED,aAAA,YAAA;AANG,KAAA,EAAA,IAAA,CAQC,UAAA,KAAA,EAAW;AACfA,MAAAA,YAAAA,GAAAA,KAAAA;AATG,KAAA,EAAA,IAAA,CAWC,YAAA;AAAA,aAAM,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,OAAA,CAAA,UAAA,CAAA,WAAA,EAAN,oBAAM,CAAN;AAXD,KAAA,EAAA,IAAA,CAYC,UAAA,gBAAA,EAAsB;AAC1BA,MAAAA,YAAAA,GAAeC,KAAAA,CAAAA,OAAAA,CAAAA,KAAAA,CAAAA,YAAAA,EAAfD,IAAeC,CAAfD;AACA,OAAA,GAAA,QAAA,CAAA,OAAA,EAAcA,YAAAA,CAAd,KAAA,EAAkC;AAChCE,QAAAA,kBAAAA,EADgC,MAAA;AAEhCC,QAAAA,YAAAA,EAFgC,IAAA;AAGhCC,QAAAA,eAAAA,EAAiB;AAHe,OAAlC;;AAMA,UAAA,gBAAA,EAAsB;AACpB,SAAA,GAAA,QAAA,CAAA,OAAA,EAAcJ,YAAAA,CAAd,KAAA,EAAkC;AAChCK,UAAAA,yBAAAA,EADgC,IAAA;AAEhCC,UAAAA,4BAAAA,EAA8B;AAFE,SAAlC;AAIA,SAAA,GAAA,gBAAA,CAAA,OAAA,EAAuBN,YAAAA,CAAvB,KAAA,EAAA,cAAA;AACD;;AAED,UAAI,CAAA,GAAA,KAAA,CAAA,OAAA,EAAA,MAAA,EAAA,+BAAA,EAAJ,KAAI,CAAJ,EAAuD;AACrDA,QAAAA,YAAAA,CAAAA,KAAAA,CAAAA,mBAAAA,GAAAA,IAAAA;AACD;;AAED,aAAOC,KAAAA,CAAAA,OAAAA,CAAAA,MAAAA,CAAP,YAAOA,CAAP;AAhCJ,KAAO,CAAP;AA/F+B,GAAA;AAmIjCM,EAAAA,kBAnIiC,EAAA,SAAA,kBAAA,CAAA,SAAA,EAAA,QAAA,EAmIO;AAAA,QAAA,MAAA,GAAA,IAAA;;AACtC,QAAMzB,MAAAA,GAAS,IAAI0B,QAAAA,CAAnB,OAAe,EAAf;AACA,QAAIC,YAAAA,GAAAA,KAAJ,CAAA;AAEA3B,IAAAA,MAAAA,CAAAA,EAAAA,CAAAA,OAAAA,EAAmB,YAAA;AAAA,aAAa,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,MAAA,EAAb,SAAa,CAAb;AAAnBA,KAAAA;AACAA,IAAAA,MAAAA,CAAAA,EAAAA,CAAAA,SAAAA,EAAqB,YAAA;AAAA,aAAa,MAAA,CAAA,UAAA,CAAA,KAAA,CAAA,MAAA,EAAb,SAAa,CAAb;AAArBA,KAAAA;AACAA,IAAAA,MAAAA,CAAAA,EAAAA,CAAAA,mBAAAA,EAA+B,YAAA;AAAA,WAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAI4B,IAAJ,GAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAAIA,QAAAA,IAAJ,CAAA,IAAA,CAAIA,GAAJ,SAAA,CAAA,IAAA,CAAIA;AAAJ;;AAAA,aAAa,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,MAAA,EAAA,CAAA,mBAAA,EAAA,MAAA,CAAb,IAAa,CAAA,CAAb;AAA/B5B,KAAAA;;AAEA,IAAA,SAAA,CAAA,OAAA,CAAA,GAAA,CAAY,CAAC,KAAA,WAAA,CAAD,SAAC,CAAD,EAA8B,KAAA,KAAA,CAAA,WAAA,CAA1C,YAA0C,EAA9B,CAAZ,EAAA,IAAA,CACQ,UAAA,IAAA,EAA2B;AAAA,UAAA,KAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA;AAAA,UAAzBkB,YAAyB,GAAA,KAAA,CAAA,CAAA,CAAA;AAAA,UAAXW,KAAW,GAAA,KAAA,CAAA,CAAA,CAAA;;AAC/B,UAAI,CAAC,MAAA,CAAL,WAAA,EAAuB;AACrB,YAAMC,GAAAA,GAAN,iEAAA;;AAEA,QAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,GAAA;;AAEA,eAAO,SAAA,CAAA,OAAA,CAAA,MAAA,CAAe,IAAA,KAAA,CAAtB,GAAsB,CAAf,CAAP;AACD;;AAEDH,MAAAA,YAAAA,GAAAA,YAAAA;AAEA,UAAII,OAAAA,GAAU;AACZC,QAAAA,eAAAA,EAAiB,MAAA,CAAA,MAAA,CADL,eAAA;AAEZC,QAAAA,YAAAA,EAAc,MAAA,CAAA,MAAA,CAFF,YAAA;AAGZC,QAAAA,WAAAA,EAAa,MAAA,CAAA,MAAA,CAHD,WAAA;AAIZL,QAAAA,KAAAA,EAAOA,KAAAA,CAJK,QAILA,EAJK;AAKZM,QAAAA,UAAAA,EAAe,MAAA,CAAA,KAAA,CAAfA,SAAe,GAAfA,GAAe,GAAwBC,IAAAA,CAL3B,GAK2BA,EAL3B;AAMZC,QAAAA,MAAAA,EAAQ,MAAA,CAAKA;AAND,OAAd,CAX+B,CAoB/B;;AACA,UAAI,MAAA,CAAA,KAAA,CAAA,MAAA,CAAJ,qBAAA,EAA6C;AAC3C,QAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,iCAAA;;AACAN,QAAAA,OAAAA,GAAAA,CAAAA,GAAAA,SAAAA,CAAAA,OAAAA,EAAAA,EAAAA,EAAAA,OAAAA,EAA0B,MAAA,CAAA,KAAA,CAAA,MAAA,CAA1BA,qBAAAA,CAAAA;AACD,OAxB8B,CA0B/B;AACA;;;AACA,MAAA,MAAA,CAAA,MAAA,GAAA,MAAA;AAEA,aAAO/B,MAAAA,CAAAA,IAAAA,CAAAA,YAAAA,EAAP,OAAOA,CAAP;AA/BJ,KAAA,EAAA,IAAA,CAiCQ,YAAM;AACV,MAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,gBAAA,EAAkE;AAChEsC,QAAAA,MAAAA,EAAQ;AACNC,UAAAA,OAAAA,EAAS;AADH,SADwD;AAIhEC,QAAAA,IAAAA,EAAM;AACJC,UAAAA,MAAAA,EADI,WAAA;AAEJtB,UAAAA,GAAAA,EAAKQ;AAFD;AAJ0D,OAAlE;;AASAe,MAAAA,QAAAA;AAEA,aAAO,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,OAAA,CAAA,UAAA,CAAA,WAAA,EAAA,uBAAA,EAAA,IAAA,CACC,UAAA,kBAAA,EAAwB;AAC5B,YAAA,kBAAA,EAAwB;AACtB,iBAAO,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,MAAA,CAAP,OAAO,EAAP;AACD;;AAED,eAAO,SAAA,CAAA,OAAA,CAAP,OAAO,EAAP;AANJ,OAAO,CAAP;AA7CJ,KAAA,EAAA,KAAA,CAsDS,UAAA,MAAA,EAAY;AACjB;AACA;AACA;AACA;AACA,UAAIC,MAAAA,CAAAA,IAAAA,KAAAA,IAAAA,IAAwB,MAAA,CAAxBA,WAAAA,IAA4C,MAAA,CAAA,WAAA,CAAA,aAAA,KAAhD,CAAA,EAAsF;AACpF,QAAA,MAAA,CAAA,KAAA,CAAA,mBAAA,EAAA,MAAA,EAAwC;AAACC,UAAAA,OAAAA,EAAS,MAAA,CAAA,WAAA,CAAlD,aAAkD;AAAV,SAAxC;AACD;;AACD,MAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,oCAAA,EAAA,MAAA,EARiB,CASjB;AACA;;;AACA,UAAID,MAAAA,YAAkBE,OAAAA,CAAtB,eAAA,EAAuC;AACrC,QAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,yEAAA;;AAEA,eAAO,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,MAAA,CAAA,OAAA,GAAA,IAAA,CACC,YAAA;AAAA,iBAAMH,QAAAA,CAAN,MAAMA,CAAN;AADR,SAAO,CAAP;AAED,OAhBgB,CAiBjB;;;AACA,UAAIC,MAAAA,YAAkBG,OAAAA,CAAtB,aAAA,EAAqC;AACnC,QAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,sDAAA;;AAEA,eAAO,MAAA,CAAA,KAAA,CAAA,WAAA,CAAA,OAAA,CAA+B;AAACC,UAAAA,KAAAA,EAAhC;AAA+B,SAA/B,EAAA,IAAA,CACC,YAAA;AAAA,iBAAML,QAAAA,CAAN,MAAMA,CAAN;AADR,SAAO,CAAP;AAED,OAvBgB,CAwBjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAIC,MAAAA,YAAkBK,OAAAA,CAAlBL,UAAAA,IAAgCA,MAAAA,YAAkBM,OAAAA,CAAtD,SAAA,EAAiE;AAC/D,QAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,uDAAA;;AACA,QAAA,MAAA,CAAA,WAAA,CAAA,KAAA;;AAEA,eAAOP,QAAAA,CAAP,MAAOA,CAAP;AACD;;AACD,UAAIC,MAAAA,YAAkBO,OAAAA,CAAtB,eAAA,EAAuC;AACrC,eAAO,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,OAAA,CAAA,UAAA,CAAA,WAAA,EAAA,uBAAA,EAAA,IAAA,CACC,UAAA,kBAAA,EAAwB;AAC5B,cAAA,kBAAA,EAAwB;AACtB,YAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,yFAAA;;AACA,YAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,gBAAA,EAAkE;AAChEZ,cAAAA,MAAAA,EAAQ;AACNC,gBAAAA,OAAAA,EAAS;AADH,eADwD;AAIhEC,cAAAA,IAAAA,EAAM;AACJC,gBAAAA,MAAAA,EADI,QAAA;AAEJU,gBAAAA,KAAAA,EAAOR,MAAAA,CAFH,OAAA;AAGJxB,gBAAAA,GAAAA,EAAKQ;AAHD;AAJ0D,aAAlE;;AAWA,mBAAO,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,QAAA,CAAA,aAAA,CAAP,YAAO,CAAP;AACD;;AAED,iBAAA,IAAA;AAlBG,SAAA,EAAA,IAAA,CAoBC,YAAA;AAAA,iBAAMe,QAAAA,CAAN,MAAMA,CAAN;AApBR,SAAO,CAAP;AAqBD;;AAED,aAAOA,QAAAA,CAAP,MAAOA,CAAP;AApHJ,KAAA,EAAA,KAAA,CAsHS,UAAA,MAAA,EAAY;AACjB,MAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,8CAAA,EAAA,MAAA;;AACAA,MAAAA,QAAAA,CAAAA,MAAAA,CAAAA;AAxHJ,KAAA;AA3I+B,GAAA;AAuQjCU,EAAAA,mBAvQiC,EAAA,SAAA,mBAAA,CAAA,YAAA,EAuQC;AAAA,QAAA,MAAA,GAAA,IAAA;;AAChC,WAAO,IAAA,SAAA,CAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACtC;AACA;AACA,UAAIC,IAAAA,GAAAA,KAAJ,CAAA;;AACA,UAAMC,UAAAA,GAAa,SAAbA,UAAa,CAAA,GAAA,EAAS;AAC1B,QAAA,MAAA,CAAA,UAAA,GAAA,KAAA;AAEA,QAAA,MAAA,CAAA,WAAA,GAAA,SAAA;;AACA,YAAA,GAAA,EAAS;AACP,UAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,sCAAqDD,IAAAA,CAArD,aAAqDA,EAArD,GAAA,2DAAA,GAAA,GAAA;;AAEA,iBAAOE,MAAAA,CAAP,GAAOA,CAAP;AACD;;AACD,QAAA,MAAA,CAAA,SAAA,GAAA,IAAA;;AACA,QAAA,MAAA,CAAA,KAAA,CAAA,QAAA;;AAEA,eAAO9C,OAAP,EAAA;AAZF,OAAA,CAJsC,CAmBtC;;;AACA4C,MAAAA,IAAAA,GAAO,SAAA,CAAA,OAAA,CAAA,IAAA,CAAa,UAAA,QAAA,EAAc;AAChC,QAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,2CAA0DA,IAAAA,CAA1D,aAA0DA,EAA1D;;AACA,QAAA,MAAA,CAAA,kBAAA,CAAA,YAAA,EAAA,QAAA;AAFK,OAAA,EAAPA,UAAO,CAAPA;AAKAA,MAAAA,IAAAA,CAAAA,WAAAA,CAAiB,IAAIG,SAAAA,CAAAA,OAAAA,CAAJ,mBAAA,CAAgC;AAC/CC,QAAAA,YAAAA,EAAc,MAAA,CAAA,MAAA,CADiC,gBAAA;AAE/CC,QAAAA,QAAAA,EAAU,MAAA,CAAA,MAAA,CAAYC;AAFyB,OAAhC,CAAjBN;;AAKA,UAAI,MAAA,CAAA,MAAA,CAAJ,UAAA,EAA4B;AAC1BA,QAAAA,IAAAA,CAAAA,SAAAA,CAAe,MAAA,CAAA,MAAA,CAAfA,UAAAA;AACD;;AAEDA,MAAAA,IAAAA,CAAAA,EAAAA,CAAAA,OAAAA,EAAiB,YAAM;AACrB,QAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,6BAAA;;AACAE,QAAAA,MAAAA,CAAO,IAAA,KAAA,CAAPA,4BAAO,CAAPA,CAAAA;AAFFF,OAAAA;AAKAA,MAAAA,IAAAA,CAAAA,EAAAA,CAAAA,UAAAA,EAAoB,UAAA,GAAA,EAAS;AAC3B,YAAA,GAAA,EAAS;AACP,cAAMO,MAAAA,GAASP,IAAAA,CAAf,aAAeA,EAAf;AACA,cAAMQ,KAAAA,GAAQC,IAAAA,CAAAA,GAAAA,CAAST,IAAAA,CAAAA,SAAAA,CAATS,iBAAAA,EAA2C,MAAA,CAAA,MAAA,CAAzD,cAAcA,CAAd;;AAEA,UAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,mDAAiEF,MAAAA,GAAjE,CAAA,IAAA,MAAA,GAAA,KAAA,GAAA,KAAA;AACA;;;AACA,cAAIG,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,aAAA,EAA4C;AAC1C,YAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,WAAA,EAAA,GAAA,EAAoCC,GAAAA,CAApC,KAAA;AACD;;AAED;AACD;;AACD,QAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,oBAAA;AAbFX,OAAAA;AAgBAA,MAAAA,IAAAA,CAAAA,KAAAA;AAEA,MAAA,MAAA,CAAA,WAAA,GAAA,IAAA;AAzDF,KAAO,CAAP;AAxQ+B,GAAA;AAqUjCY,EAAAA,KArUiC,EAAA,SAAA,KAAA,GAqUlB;AACb,QAAI;AACF,WAAA,OAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA;AADF,KAAA,CAGA,OAAA,KAAA,EAAc;AACZ,WAAA,MAAA,CAAA,KAAA,CAAA,0CAAA,EAAA,KAAA;AACD;AA3U8B,GAAA;AA8UjCC,EAAAA,iBA9UiC,EAAA,SAAA,iBAAA,CAAA,SAAA,EA8UJ;AAAA,QAAA,gBAAA,GACDE,SAAAA,CAAAA,KAAAA,CADC,GACDA,CADC;AAAA,QAAA,iBAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,gBAAA,EAAA,CAAA,CAAA;AAAA,QACpB1E,SADoB,GAAA,iBAAA,CAAA,CAAA,CAAA;AAAA,QACTyE,IADS,GAAA,iBAAA,CAAA,CAAA,CAAA;;AAE3B,QAAME,QAAAA,GAAN,EAAA;;AAEA,QAAI,CAAC,KAAA,KAAA,CAAD,SAAC,CAAD,IAA0B,CAAC,KAAA,KAAA,CAAA,QAAA,CAA/B,SAA+B,CAA/B,EAA+D;AAC7D,aAAA,QAAA;AACD;;AAED,QAAMC,WAAAA,GAAc,CAAA,GAAA,WAAA,CAAA,OAAA,EAAA,aAAA,IAAA,GAApB,QAAoB,CAApB;;AAEA,QAAI,CAAC,KAAA,KAAA,CAAA,SAAA,KAAyB,KAAA,KAAA,CAAA,QAAA,CAA1B,SAA0B,CAA1B,EAAJ,WAAI,CAAJ,EAA4E;AAC1ED,MAAAA,QAAAA,CAAAA,IAAAA,CAAc;AACZF,QAAAA,IAAAA,EADY,WAAA;AAEZzE,QAAAA,SAAAA,EAAAA;AAFY,OAAd2E;AAID;;AAED,WAAA,QAAA;AA/V+B,GAAA;AAkWjCE,EAAAA,QAlWiC,EAAA,SAAA,QAAA,CAAA,KAAA,EAkWjB;AACd;;AACA;AAEA,QAAI;AACF,UAAM5B,MAAAA,GAAS5B,KAAAA,CAAAA,MAAAA,IAAgBA,KAAAA,CAAAA,MAAAA,CAA/B,WAA+BA,EAA/B;AACA,UAAMyD,SAAAA,GAAY,KAAA,MAAA,CAAlB,GAAA;AAEA,WAAA,MAAA,CAAA,kBAAA;AACA,WAAA,KAAA,CAAA,QAAA;AACA,WAAA,SAAA,GAAA,KAAA;;AACA,WAAA,KAAA,CAAA,SAAA,EAAA,KAAA;;AAEA,cAAQzD,KAAAA,CAAR,IAAA;AACE,aAAA,IAAA;AACA;AACE,eAAA,MAAA,CAAA,IAAA,CAAA,yEAAwFA,KAAAA,CAAxF,MAAA;;AACA,eAAA,KAAA,CAAA,mBAAA,EAAA,KAAA;;AACA;;AACF,aAAA,IAAA;AACE;AACA,eAAA,MAAA,CAAA,IAAA,CAAA,8CAAA;;AACA,eAAA,KAAA,CAAA,kBAAA,EAAA,KAAA;;AACA;;AACF,aAAA,IAAA;AACA,aAAA,IAAA;AACA,aAAA,IAAA;AACA,aAAA,IAAA;AACE,eAAA,MAAA,CAAA,IAAA,CAAA,4CAAA;;AACA,eAAA,KAAA,CAAA,mBAAA,EAAA,KAAA;;AACA,eAAA,UAAA,CAAA,SAAA,EAHF,CAIE;AACA;;;AACA;;AACF,aAAA,IAAA;AACE,cAAIvB,sBAAAA,CAAAA,QAAAA,CAAJ,MAAIA,CAAJ,EAA6C;AAC3C,iBAAA,MAAA,CAAA,IAAA,CAAA,4CAAA;;AACA,iBAAA,KAAA,CAAA,mBAAA,EAAA,KAAA;;AACA,iBAAA,UAAA,CAAA,SAAA,EAH2C,CAI3C;AACA;;AALF,WAAA,MAOK;AACH,iBAAA,MAAA,CAAA,IAAA,CAAA,kDAAA;;AACA,iBAAA,KAAA,CAAA,mBAAA,EAAA,KAAA;AACD;;AACD;;AACF;AACE,eAAA,MAAA,CAAA,IAAA,CAAA,+DAAA,EADF,CAEE;;AACA,eAAA,KAAA,CAAA,mBAAA,EAAA,KAAA;;AArCJ;AATF,KAAA,CAiDA,OAAA,KAAA,EAAc;AACZ,WAAA,MAAA,CAAA,KAAA,CAAA,0CAAA,EAAA,KAAA;AACD;AAzZ8B,GAAA;AA4ZjCiF,EAAAA,UA5ZiC,EAAA,SAAA,UAAA,CAAA,KAAA,EA4Zf;AAAA,QAAA,MAAA,GAAA,IAAA;;AAChB,QAAMC,QAAAA,GAAW3D,KAAAA,CAAjB,IAAA;;AAEA,QAAIgD,OAAAA,CAAAA,GAAAA,CAAJ,sBAAA,EAAwC;AACtC,WAAA,MAAA,CAAA,KAAA,CAAA,6BAAA,EAAA,QAAA;AACD;;AALe,QAOTY,IAPS,GAODD,QAPC,CAAA,IAAA;;AAShB,SAAA,eAAA,CAAA,IAAA;;AAEA,WAAO,KAAA,iBAAA,CAAuBC,IAAAA,CAAvB,SAAA,EAAA,MAAA,CACG,UAAA,OAAA,EAAA,OAAA,EAAA;AAAA,aAAsB,OAAA,CAAA,IAAA,CAAa,YAAM;AAAA,YACxCjF,SADwC,GACrBkF,OADqB,CAAA,SAAA;AAAA,YAC7BT,IAD6B,GACrBS,OADqB,CAAA,IAAA;AAG/C,eAAO,IAAA,SAAA,CAAA,OAAA,CAAY,UAAA,OAAA,EAAA;AAAA,iBAAanE,OAAAA,CAAQ,CAAC,MAAA,CAAA,KAAA,CAAA,SAAA,KAAyB,MAAA,CAAA,KAAA,CAAA,QAAA,CAA1B,SAA0B,CAA1B,EAAA,IAAA,EAArB,IAAqB,CAARA,CAAb;AAAZ,SAAA,EAAA,KAAA,CACE,UAAA,MAAA,EAAA;AAAA,iBAAY,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,4DAA4EkE,IAAAA,CAA5E,SAAA,EAAZ,MAAY,CAAZ;AADT,SAAO,CAAP;AAHM,OAAsB,CAAtB;AADH,KAAA,EAMD,SAAA,CAAA,OAAA,CANC,OAMD,EANC,EAAA,IAAA,CAOC,YAAM;AACV,MAAA,MAAA,CAAA,KAAA,CAAA,OAAA,EAAoB5D,KAAAA,CAApB,IAAA;;AADU,UAAA,qBAAA,GAEU4D,IAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAFV,GAEUA,CAFV;AAAA,UAAA,sBAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,qBAAA,EAAA,CAAA,CAAA;AAAA,UAEHjF,SAFG,GAAA,sBAAA,CAAA,CAAA,CAAA;;AAIV,UAAIA,SAAAA,KAAciF,IAAAA,CAAlB,SAAA,EAAkC;AAChC,QAAA,MAAA,CAAA,KAAA,CAAA,WAAA,SAAA,EAAA,QAAA;AADF,OAAA,MAGK;AACH,QAAA,MAAA,CAAA,KAAA,CAAA,WAAA,SAAA,EAAA,QAAA;;AACA,QAAA,MAAA,CAAA,KAAA,CAAA,WAAoBA,IAAAA,CAApB,SAAA,EAAA,QAAA;AACD;AAjBE,KAAA,EAAA,KAAA,CAmBE,UAAA,MAAA,EAAY;AACjB,MAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,mDAAA,EAAA,MAAA;AApBJ,KAAO,CAAP;AAva+B,GAAA;AA+bjCE,EAAAA,UA/biC,EAAA,SAAA,UAAA,CAAA,YAAA,EA+bR;AACvB,SAAA,MAAA,CAAA,IAAA,CAAA,uBAAA;AAEA,WAAO,KAAA,OAAA,CAAP,YAAO,CAAP;AAlc+B,GAAA;AAAA,EAAA,OAAA,EAAA;AAAA,CAAnB,GAAA,yBAAA,CAAA,IAAA,EAAA,SAAA,EAAA,CAyBbvE,OAAAA,CAzBa,SAAA,CAAA,EAAA,CAAA,GAAA,0BAAA,CAAA,OAAA,EAAA,IAAA,EAAA,SAAA,CAAA,EAAA,IAAA,CAAA,EAAA,yBAAA,CAAA,IAAA,EAAA,YAAA,EAAA,CA2CbA,OAAAA,CA3Ca,SAAA,CAAA,EAAA,CAAA,GAAA,0BAAA,CAAA,OAAA,EAAA,IAAA,EAAA,YAAA,CAAA,EAAA,IAAA,CAAA,EAAA,yBAAA,CAAA,IAAA,EAAA,QAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,GAAA,0BAAA,CAAA,OAAA,EAAA,IAAA,EAAA,QAAA,CAAA,EAAA,IAAA,CAAA,EAAA,yBAAA,CAAA,IAAA,EAAA,eAAA,EAAA,CAAA,KAAA,CAAA,EAAA,CAAA,GAAA,0BAAA,CAAA,OAAA,EAAA,IAAA,EAAA,eAAA,CAAA,EAAA,IAAA,CAAA,GAAhB,IAAgB,CAAA,EAAhB;;kBAsceb,O","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport url from 'url';\n\nimport {WebexPlugin} from '@webex/webex-core';\nimport {deprecated, oneFlight} from '@webex/common';\nimport {camelCase, get, set} from 'lodash';\nimport backoff from 'backoff';\n\nimport Socket from './socket';\nimport {\n  BadRequest,\n  Forbidden,\n  NotAuthorized,\n  UnknownResponse,\n  ConnectionError\n  // NotFound\n} from './errors';\n\nconst normalReconnectReasons = [\n  'idle',\n  'done (forced)',\n  'pong not received',\n  'pong mismatch'\n];\n\nconst Mercury = WebexPlugin.extend({\n  namespace: 'Mercury',\n\n  session: {\n    connected: {\n      default: false,\n      type: 'boolean'\n    },\n    connecting: {\n      default: false,\n      type: 'boolean'\n    },\n    socket: 'object',\n    localClusterServiceUrls: 'object'\n  },\n\n  derived: {\n    listening: {\n      deps: ['connected'],\n      fn() {\n        return this.connected;\n      }\n    }\n  },\n\n  @oneFlight\n  connect(webSocketUrl) {\n    if (this.connected) {\n      this.logger.info('mercury: already connected, will not connect again');\n\n      return Promise.resolve();\n    }\n\n    this.connecting = true;\n\n    return Promise.resolve(this.webex.internal.device.registered || this.webex.internal.device.register())\n      .then(() => {\n        this.logger.info('mercury: connecting');\n\n        return this._connectWithBackoff(webSocketUrl);\n      });\n  },\n\n  @oneFlight\n  disconnect() {\n    return new Promise((resolve) => {\n      if (this.backoffCall) {\n        this.logger.info('mercury: aborting connection');\n        this.backoffCall.abort();\n      }\n\n      if (this.socket) {\n        this.socket.removeAllListeners('message');\n        this.once('offline', resolve);\n        this.socket.close();\n\n        return;\n      }\n\n      resolve();\n    });\n  },\n\n  @deprecated('Mercury#listen(): Use Mercury#connect() instead')\n  listen() {\n    /* eslint no-invalid-this: [0] */\n    return this.connect();\n  },\n\n  @deprecated('Mercury#stopListening(): Use Mercury#disconnect() instead')\n  stopListening() {\n    /* eslint no-invalid-this: [0] */\n    return this.disconnect();\n  },\n\n  processRegistrationStatusEvent(message) {\n    this.localClusterServiceUrls = message.localClusterServiceUrls;\n  },\n\n  _applyOverrides(event) {\n    if (!event || !event.headers) {\n      return;\n    }\n    const headerKeys = Object.keys(event.headers);\n\n    headerKeys.forEach((keyPath) => {\n      set(event, keyPath, event.headers[keyPath]);\n    });\n  },\n\n  _prepareUrl(webSocketUrl) {\n    if (!webSocketUrl) {\n      webSocketUrl = this.webex.internal.device.webSocketUrl;\n    }\n\n    return this.webex.internal.feature.getFeature('developer', 'web-high-availability')\n      .then((haMessagingEnabled) => {\n        if (haMessagingEnabled) {\n          return this.webex.internal.services.convertUrlToPriorityHostUrl(webSocketUrl);\n        }\n\n        return webSocketUrl;\n      })\n      .then((wsUrl) => {\n        webSocketUrl = wsUrl;\n      })\n      .then(() => this.webex.internal.feature.getFeature('developer', 'web-shared-mercury'))\n      .then((webSharedMercury) => {\n        webSocketUrl = url.parse(webSocketUrl, true);\n        Object.assign(webSocketUrl.query, {\n          outboundWireFormat: 'text',\n          bufferStates: true,\n          aliasHttpStatus: true\n        });\n\n        if (webSharedMercury) {\n          Object.assign(webSocketUrl.query, {\n            mercuryRegistrationStatus: true,\n            isRegistrationRefreshEnabled: true\n          });\n          Reflect.deleteProperty(webSocketUrl.query, 'bufferStates');\n        }\n\n        if (get(this, 'webex.config.device.ephemeral', false)) {\n          webSocketUrl.query.multipleConnections = true;\n        }\n\n        return url.format(webSocketUrl);\n      });\n  },\n\n  _attemptConnection(socketUrl, callback) {\n    const socket = new Socket();\n    let attemptWSUrl;\n\n    socket.on('close', (...args) => this._onclose(...args));\n    socket.on('message', (...args) => this._onmessage(...args));\n    socket.on('sequence-mismatch', (...args) => this._emit('sequence-mismatch', ...args));\n\n    Promise.all([this._prepareUrl(socketUrl), this.webex.credentials.getUserToken()])\n      .then(([webSocketUrl, token]) => {\n        if (!this.backoffCall) {\n          const msg = 'mercury: prevent socket open when backoffCall no longer defined';\n\n          this.logger.info(msg);\n\n          return Promise.reject(new Error(msg));\n        }\n\n        attemptWSUrl = webSocketUrl;\n\n        let options = {\n          forceCloseDelay: this.config.forceCloseDelay,\n          pingInterval: this.config.pingInterval,\n          pongTimeout: this.config.pongTimeout,\n          token: token.toString(),\n          trackingId: `${this.webex.sessionId}_${Date.now()}`,\n          logger: this.logger\n        };\n\n        // if the consumer has supplied request options use them\n        if (this.webex.config.defaultMercuryOptions) {\n          this.logger.info('mercury: setting custom options');\n          options = {...options, ...this.webex.config.defaultMercuryOptions};\n        }\n\n        // Set the socket before opening it. This allows a disconnect() to close\n        // the socket if it is in the process of being opened.\n        this.socket = socket;\n\n        return socket.open(webSocketUrl, options);\n      })\n      .then(() => {\n        this.webex.internal.metrics.submitClientMetrics('web-ha-mercury', {\n          fields: {\n            success: true\n          },\n          tags: {\n            action: 'connected',\n            url: attemptWSUrl\n          }\n        });\n        callback();\n\n        return this.webex.internal.feature.getFeature('developer', 'web-high-availability')\n          .then((haMessagingEnabled) => {\n            if (haMessagingEnabled) {\n              return this.webex.internal.device.refresh();\n            }\n\n            return Promise.resolve();\n          });\n      })\n      .catch((reason) => {\n        // Suppress connection errors that appear to be network related. This\n        // may end up suppressing metrics during outages, but we might not care\n        // (especially since many of our outages happen in a way that client\n        // metrics can't be trusted).\n        if (reason.code !== 1006 && this.backoffCall && this.backoffCall.getNumRetries() > 0) {\n          this._emit('connection_failed', reason, {retries: this.backoffCall.getNumRetries()});\n        }\n        this.logger.info('mercury: connection attempt failed', reason);\n        // UnknownResponse is produced by IE for any 4XXX; treated it like a bad\n        // web socket url and let WDM handle the token checking\n        if (reason instanceof UnknownResponse) {\n          this.logger.info('mercury: received unknown response code, refreshing device registration');\n\n          return this.webex.internal.device.refresh()\n            .then(() => callback(reason));\n        }\n        // NotAuthorized implies expired token\n        if (reason instanceof NotAuthorized) {\n          this.logger.info('mercury: received authorization error, reauthorizing');\n\n          return this.webex.credentials.refresh({force: true})\n            .then(() => callback(reason));\n        }\n        // // NotFound implies expired web socket url\n        // else if (reason instanceof NotFound) {\n        //   this.logger.info(`mercury: received not found error, refreshing device registration`);\n        //   return this.webex.internal.device.refresh()\n        //     .then(() => callback(reason));\n        // }\n        // BadRequest implies current credentials are for a Service Account\n        // Forbidden implies current user is not entitle for Webex\n        if (reason instanceof BadRequest || reason instanceof Forbidden) {\n          this.logger.warn('mercury: received unrecoverable response from mercury');\n          this.backoffCall.abort();\n\n          return callback(reason);\n        }\n        if (reason instanceof ConnectionError) {\n          return this.webex.internal.feature.getFeature('developer', 'web-high-availability')\n            .then((haMessagingEnabled) => {\n              if (haMessagingEnabled) {\n                this.logger.info('mercury: received a generic connection error, will try to connect to another datacenter');\n                this.webex.internal.metrics.submitClientMetrics('web-ha-mercury', {\n                  fields: {\n                    success: false\n                  },\n                  tags: {\n                    action: 'failed',\n                    error: reason.message,\n                    url: attemptWSUrl\n                  }\n                });\n\n                return this.webex.internal.services.markFailedUrl(attemptWSUrl);\n              }\n\n              return null;\n            })\n            .then(() => callback(reason));\n        }\n\n        return callback(reason);\n      })\n      .catch((reason) => {\n        this.logger.error('mercury: failed to handle connection failure', reason);\n        callback(reason);\n      });\n  },\n\n  _connectWithBackoff(webSocketUrl) {\n    return new Promise((resolve, reject) => {\n      // eslint gets confused about whether or not call is actually used\n      // eslint-disable-next-line prefer-const\n      let call;\n      const onComplete = (err) => {\n        this.connecting = false;\n\n        this.backoffCall = undefined;\n        if (err) {\n          this.logger.info(`mercury: failed to connect after ${call.getNumRetries()} retries; log statement about next retry was inaccurate; ${err}`);\n\n          return reject(err);\n        }\n        this.connected = true;\n        this._emit('online');\n\n        return resolve();\n      };\n\n      // eslint-disable-next-line prefer-reflect\n      call = backoff.call((callback) => {\n        this.logger.info(`mercury: executing connection attempt ${call.getNumRetries()}`);\n        this._attemptConnection(webSocketUrl, callback);\n      }, onComplete);\n\n      call.setStrategy(new backoff.ExponentialStrategy({\n        initialDelay: this.config.backoffTimeReset,\n        maxDelay: this.config.backoffTimeMax\n      }));\n\n      if (this.config.maxRetries) {\n        call.failAfter(this.config.maxRetries);\n      }\n\n      call.on('abort', () => {\n        this.logger.info('mercury: connection aborted');\n        reject(new Error('Mercury Connection Aborted'));\n      });\n\n      call.on('callback', (err) => {\n        if (err) {\n          const number = call.getNumRetries();\n          const delay = Math.min(call.strategy_.nextBackoffDelay_, this.config.backoffTimeMax);\n\n          this.logger.info(`mercury: failed to connect; attempting retry ${number + 1} in ${delay} ms`);\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV === 'development') {\n            this.logger.debug('mercury: ', err, err.stack);\n          }\n\n          return;\n        }\n        this.logger.info('mercury: connected');\n      });\n\n      call.start();\n\n      this.backoffCall = call;\n    });\n  },\n\n  _emit(...args) {\n    try {\n      this.trigger(...args);\n    }\n    catch (error) {\n      this.logger.error('mercury: error occurred in event handler', error);\n    }\n  },\n\n  _getEventHandlers(eventType) {\n    const [namespace, name] = eventType.split('.');\n    const handlers = [];\n\n    if (!this.webex[namespace] && !this.webex.internal[namespace]) {\n      return handlers;\n    }\n\n    const handlerName = camelCase(`process_${name}_event`);\n\n    if ((this.webex[namespace] || this.webex.internal[namespace])[handlerName]) {\n      handlers.push({\n        name: handlerName,\n        namespace\n      });\n    }\n\n    return handlers;\n  },\n\n  _onclose(event) {\n    // I don't see any way to avoid the complexity or statement count in here.\n    /* eslint complexity: [0] */\n\n    try {\n      const reason = event.reason && event.reason.toLowerCase();\n      const socketUrl = this.socket.url;\n\n      this.socket.removeAllListeners();\n      this.unset('socket');\n      this.connected = false;\n      this._emit('offline', event);\n\n      switch (event.code) {\n        case 1003:\n        // metric: disconnect\n          this.logger.info(`mercury: Mercury service rejected last message; will not reconnect: ${event.reason}`);\n          this._emit('offline.permanent', event);\n          break;\n        case 4000:\n          // metric: disconnect\n          this.logger.info('mercury: socket replaced; will not reconnect');\n          this._emit('offline.replaced', event);\n          break;\n        case 1001:\n        case 1005:\n        case 1006:\n        case 1011:\n          this.logger.info('mercury: socket disconnected; reconnecting');\n          this._emit('offline.transient', event);\n          this._reconnect(socketUrl);\n          // metric: disconnect\n          // if (code == 1011 && reason !== ping error) metric: unexpected disconnect\n          break;\n        case 1000:\n          if (normalReconnectReasons.includes(reason)) {\n            this.logger.info('mercury: socket disconnected; reconnecting');\n            this._emit('offline.transient', event);\n            this._reconnect(socketUrl);\n            // metric: disconnect\n            // if (reason === done forced) metric: force closure\n          }\n          else {\n            this.logger.info('mercury: socket disconnected; will not reconnect');\n            this._emit('offline.permanent', event);\n          }\n          break;\n        default:\n          this.logger.info('mercury: socket disconnected unexpectedly; will not reconnect');\n          // unexpected disconnect\n          this._emit('offline.permanent', event);\n      }\n    }\n    catch (error) {\n      this.logger.error('mercury: error occurred in close handler', error);\n    }\n  },\n\n  _onmessage(event) {\n    const envelope = event.data;\n\n    if (process.env.ENABLE_MERCURY_LOGGING) {\n      this.logger.debug('mercury: message envelope: ', envelope);\n    }\n\n    const {data} = envelope;\n\n    this._applyOverrides(data);\n\n    return this._getEventHandlers(data.eventType)\n      .reduce((promise, handler) => promise.then(() => {\n        const {namespace, name} = handler;\n\n        return new Promise((resolve) => resolve((this.webex[namespace] || this.webex.internal[namespace])[name](data)))\n          .catch((reason) => this.logger.error(`mercury: error occurred in autowired event handler for ${data.eventType}`, reason));\n      }), Promise.resolve())\n      .then(() => {\n        this._emit('event', event.data);\n        const [namespace] = data.eventType.split('.');\n\n        if (namespace === data.eventType) {\n          this._emit(`event:${namespace}`, envelope);\n        }\n        else {\n          this._emit(`event:${namespace}`, envelope);\n          this._emit(`event:${data.eventType}`, envelope);\n        }\n      })\n      .catch((reason) => {\n        this.logger.error('mercury: error occurred processing socket message', reason);\n      });\n  },\n\n  _reconnect(webSocketUrl) {\n    this.logger.info('mercury: reconnecting');\n\n    return this.connect(webSocketUrl);\n  }\n});\n\nexport default Mercury;\n"]},"metadata":{},"sourceType":"script"}