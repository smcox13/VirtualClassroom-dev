{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _webexCore = require('@webex/webex-core');\n\nvar _constants = require('../constants');\n\nvar _parameter = require('../common/errors/parameter');\n\nvar _parameter2 = _interopRequireDefault(_parameter);\n\nvar _util = require('./util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @class MeetingInfoRequest\n */\n\n\nvar PersonalMeetingRoomRequest = function (_StatelessWebexPlugin) {\n  (0, _inherits3.default)(PersonalMeetingRoomRequest, _StatelessWebexPlugin);\n\n  function PersonalMeetingRoomRequest() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, PersonalMeetingRoomRequest);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = PersonalMeetingRoomRequest.__proto__ || (0, _getPrototypeOf2.default)(PersonalMeetingRoomRequest)).call.apply(_ref, [this].concat(args))), _this), _this.namespace = _constants.MEETINGS, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  (0, _createClass3.default)(PersonalMeetingRoomRequest, [{\n    key: 'claimPmr',\n\n    /**\n     *\n     * @param {Object} options with format of {userId, passcode, meetingAddress, preferred}\n     * @returns {Promise} returns a promise that resolves/rejects the result of the request\n     * @memberof PersonalMeetingRoomRequest\n     */\n    value: function claimPmr(options) {\n      if (!options || !options.userId || !options.passcode || !options.meetingAddress || !options.preferred) {\n        throw new _parameter2.default('Claiming a PMR should be done with userId, passcode, preferred, and meetingAddress in options.');\n      }\n\n      var validPin = _util2.default.getClaimPmrPin(options.passcode);\n\n      if (!validPin) {\n        return _promise2.default.reject(new _parameter2.default('The host pin provided was of an invalid format'));\n      }\n\n      var validLink = _util2.default.getClaimPmrLink(options.meetingAddress);\n\n      if (!validLink) {\n        return _promise2.default.reject(new _parameter2.default('The PMR link provided was of an invalid format'));\n      }\n\n      var request = _util2.default.getClaimedRequestParams(validLink, validPin, options);\n\n      return this.request(request);\n    }\n  }]);\n  return PersonalMeetingRoomRequest;\n}(_webexCore.StatelessWebexPlugin);\n\nexports.default = PersonalMeetingRoomRequest;","map":{"version":3,"sources":["request.js"],"names":["PersonalMeetingRoomRequest","StatelessWebexPlugin","namespace","MEETINGS","options","ParameterError","validPin","PersonalMeetingRoomUtil","validLink","request"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,IAAA,UAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;;;AAEA,IAAA,KAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;;;;;;;;AAGA;;;;;IAGqBA,0B;;;;;;;;;;;;;;oPACnBE,S,GAAYC,UAAAA,CAAAA,Q;;;;;;AAEZ;;;;;;6BAMSC,O,EAAS;AAChB,UAAI,CAAA,OAAA,IAAY,CAACA,OAAAA,CAAb,MAAA,IAA+B,CAACA,OAAAA,CAAhC,QAAA,IAAoD,CAACA,OAAAA,CAArD,cAAA,IAA+E,CAACA,OAAAA,CAApF,SAAA,EAAuG;AACrG,cAAM,IAAIC,WAAAA,CAAJ,OAAA,CAAN,gGAAM,CAAN;AACD;;AACD,UAAMC,QAAAA,GAAWC,MAAAA,CAAAA,OAAAA,CAAAA,cAAAA,CAAuCH,OAAAA,CAAxD,QAAiBG,CAAjB;;AAEA,UAAI,CAAJ,QAAA,EAAe;AACb,eAAO,SAAA,CAAA,OAAA,CAAA,MAAA,CAAe,IAAIF,WAAAA,CAAJ,OAAA,CAAtB,gDAAsB,CAAf,CAAP;AACD;;AACD,UAAMG,SAAAA,GAAYD,MAAAA,CAAAA,OAAAA,CAAAA,eAAAA,CAAwCH,OAAAA,CAA1D,cAAkBG,CAAlB;;AAEA,UAAI,CAAJ,SAAA,EAAgB;AACd,eAAO,SAAA,CAAA,OAAA,CAAA,MAAA,CAAe,IAAIF,WAAAA,CAAJ,OAAA,CAAtB,gDAAsB,CAAf,CAAP;AACD;;AACD,UAAMI,OAAAA,GAAUF,MAAAA,CAAAA,OAAAA,CAAAA,uBAAAA,CAAAA,SAAAA,EAAAA,QAAAA,EAAhB,OAAgBA,CAAhB;;AAEA,aAAO,KAAA,OAAA,CAAP,OAAO,CAAP;AACD;;;EA1BqDN,UAAAA,CAAAA,oB;;kBAAnCD,0B","sourcesContent":["import {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport {MEETINGS} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\nimport PersonalMeetingRoomUtil from './util';\n\n\n/**\n * @class MeetingInfoRequest\n */\nexport default class PersonalMeetingRoomRequest extends StatelessWebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n   *\n   * @param {Object} options with format of {userId, passcode, meetingAddress, preferred}\n   * @returns {Promise} returns a promise that resolves/rejects the result of the request\n   * @memberof PersonalMeetingRoomRequest\n   */\n  claimPmr(options) {\n    if (!options || !options.userId || !options.passcode || !options.meetingAddress || !options.preferred) {\n      throw new ParameterError('Claiming a PMR should be done with userId, passcode, preferred, and meetingAddress in options.');\n    }\n    const validPin = PersonalMeetingRoomUtil.getClaimPmrPin(options.passcode);\n\n    if (!validPin) {\n      return Promise.reject(new ParameterError('The host pin provided was of an invalid format'));\n    }\n    const validLink = PersonalMeetingRoomUtil.getClaimPmrLink(options.meetingAddress);\n\n    if (!validLink) {\n      return Promise.reject(new ParameterError('The PMR link provided was of an invalid format'));\n    }\n    const request = PersonalMeetingRoomUtil.getClaimedRequestParams(validLink, validPin, options);\n\n    return this.request(request);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}