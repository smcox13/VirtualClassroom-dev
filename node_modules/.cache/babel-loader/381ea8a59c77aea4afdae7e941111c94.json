{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC3161\r\n */\n\nexport default class PKIStatusInfo {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for PKIStatusInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc status\r\n     */\n    this.status = getParametersValue(parameters, \"status\", PKIStatusInfo.defaultValues(\"status\"));\n    if (\"statusStrings\" in parameters)\n      /**\r\n       * @type {Array.<Utf8String>}\r\n       * @desc statusStrings\r\n       */\n      this.statusStrings = getParametersValue(parameters, \"statusStrings\", PKIStatusInfo.defaultValues(\"statusStrings\"));\n    if (\"failInfo\" in parameters)\n      /**\r\n       * @type {BitString}\r\n       * @desc failInfo\r\n       */\n      this.failInfo = getParametersValue(parameters, \"failInfo\", PKIStatusInfo.defaultValues(\"failInfo\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"status\":\n        return 2;\n\n      case \"statusStrings\":\n        return [];\n\n      case \"failInfo\":\n        return new asn1js.BitString();\n\n      default:\n        throw new Error(`Invalid member name for PKIStatusInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Compare values with default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   * @param {*} memberValue Value to compare with default value\r\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"status\":\n        return memberValue === PKIStatusInfo.defaultValues(memberName);\n\n      case \"statusStrings\":\n        return memberValue.length === 0;\n\n      case \"failInfo\":\n        return memberValue.isEqual(PKIStatusInfo.defaultValues(memberName));\n\n      default:\n        throw new Error(`Invalid member name for PKIStatusInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\r\n   * Return value of pre-defined ASN.1 schema for current class\r\n   *\r\n   * ASN.1 schema:\r\n   * ```asn1\r\n   * PKIStatusInfo ::= SEQUENCE {\r\n   *    status        PKIStatus,\r\n   *    statusString  PKIFreeText     OPTIONAL,\r\n   *    failInfo      PKIFailureInfo  OPTIONAL  }\r\n   * ```\r\n   *\r\n   * @param {Object} parameters Input parameters for the schema\r\n   * @returns {Object} asn1js schema object\r\n   */\n\n\n  static schema(parameters = {}) {\n    /**\r\n     * @type {Object}\r\n     * @property {string} [blockName]\r\n     * @property {string} [status]\r\n     * @property {string} [statusStrings]\r\n     * @property {string} [failInfo]\r\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Integer({\n        name: names.status || \"\"\n      }), new asn1js.Sequence({\n        optional: true,\n        value: [new asn1js.Repeated({\n          name: names.statusStrings || \"\",\n          value: new asn1js.Utf8String()\n        })]\n      }), new asn1js.BitString({\n        name: names.failInfo || \"\",\n        optional: true\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\r\n   * Convert parsed asn1js object into current class\r\n   * @param {!Object} schema\r\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"status\", \"statusStrings\", \"failInfo\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, PKIStatusInfo.schema({\n      names: {\n        status: \"status\",\n        statusStrings: \"statusStrings\",\n        failInfo: \"failInfo\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PKIStatusInfo\"); //endregion\n    //region Get internal properties from parsed schema\n\n    const _status = asn1.result.status;\n    if (_status.valueBlock.isHexOnly === true || _status.valueBlock.valueDec < 0 || _status.valueBlock.valueDec > 5) throw new Error(\"PKIStatusInfo \\\"status\\\" has invalid value\");\n    this.status = _status.valueBlock.valueDec;\n    if (\"statusStrings\" in asn1.result) this.statusStrings = asn1.result.statusStrings;\n    if (\"failInfo\" in asn1.result) this.failInfo = asn1.result.failInfo; //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convert current object to asn1js object and set correct values\r\n   * @returns {Object} asn1js object\r\n   */\n\n\n  toSchema() {\n    //region Create array of output sequence\n    const outputArray = [];\n    outputArray.push(new asn1js.Integer({\n      value: this.status\n    }));\n\n    if (\"statusStrings\" in this) {\n      outputArray.push(new asn1js.Sequence({\n        optional: true,\n        value: this.statusStrings\n      }));\n    }\n\n    if (\"failInfo\" in this) outputArray.push(this.failInfo); //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Convertion for the class to JSON object\r\n   * @returns {Object}\r\n   */\n\n\n  toJSON() {\n    const _object = {\n      status: this.status\n    };\n    if (\"statusStrings\" in this) _object.statusStrings = Array.from(this.statusStrings, element => element.toJSON());\n    if (\"failInfo\" in this) _object.failInfo = this.failInfo.toJSON();\n    return _object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["/Users/pratison/Work/Cisco/Education/React/education-webex/node_modules/pkijs/src/PKIStatusInfo.js"],"names":["asn1js","getParametersValue","clearProps","PKIStatusInfo","constructor","parameters","status","defaultValues","statusStrings","failInfo","fromSchema","schema","memberName","BitString","Error","compareWithDefault","memberValue","length","isEqual","names","Sequence","name","blockName","value","Integer","optional","Repeated","Utf8String","asn1","compareSchema","verified","_status","result","valueBlock","isHexOnly","valueDec","toSchema","outputArray","push","toJSON","_object","Array","from","element"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class PKIStatusInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PKIStatusInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc status\r\n\t\t */\r\n\t\tthis.status = getParametersValue(parameters, \"status\", PKIStatusInfo.defaultValues(\"status\"));\r\n\r\n\t\tif(\"statusStrings\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Utf8String>}\r\n\t\t\t * @desc statusStrings\r\n\t\t\t */\r\n\t\t\tthis.statusStrings = getParametersValue(parameters, \"statusStrings\", PKIStatusInfo.defaultValues(\"statusStrings\"));\r\n\r\n\t\tif(\"failInfo\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {BitString}\r\n\t\t\t * @desc failInfo\r\n\t\t\t */\r\n\t\t\tthis.failInfo = getParametersValue(parameters, \"failInfo\", PKIStatusInfo.defaultValues(\"failInfo\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn 2;\r\n\t\t\tcase \"statusStrings\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"failInfo\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKIStatusInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn (memberValue === PKIStatusInfo.defaultValues(memberName));\r\n\t\t\tcase \"statusStrings\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"failInfo\":\r\n\t\t\t\treturn (memberValue.isEqual(PKIStatusInfo.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKIStatusInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PKIStatusInfo ::= SEQUENCE {\r\n\t *    status        PKIStatus,\r\n\t *    statusString  PKIFreeText     OPTIONAL,\r\n\t *    failInfo      PKIFailureInfo  OPTIONAL  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [status]\r\n\t\t * @property {string} [statusStrings]\r\n\t\t * @property {string} [failInfo]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.status || \"\") }),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.statusStrings || \"\"),\r\n\t\t\t\t\t\t\tvalue: new asn1js.Utf8String()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({\r\n\t\t\t\t\tname: (names.failInfo || \"\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"status\",\r\n\t\t\t\"statusStrings\",\r\n\t\t\t\"failInfo\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPKIStatusInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tstatus: \"status\",\r\n\t\t\t\t\tstatusStrings: \"statusStrings\",\r\n\t\t\t\t\tfailInfo: \"failInfo\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PKIStatusInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tconst _status = asn1.result.status;\r\n\r\n\t\tif((_status.valueBlock.isHexOnly === true) ||\r\n\t\t\t(_status.valueBlock.valueDec < 0) ||\r\n\t\t\t(_status.valueBlock.valueDec > 5))\r\n\t\t\tthrow new Error(\"PKIStatusInfo \\\"status\\\" has invalid value\");\r\n\r\n\t\tthis.status = _status.valueBlock.valueDec;\r\n\r\n\t\tif(\"statusStrings\" in asn1.result)\r\n\t\t\tthis.statusStrings = asn1.result.statusStrings;\r\n\t\tif(\"failInfo\" in asn1.result)\r\n\t\t\tthis.failInfo = asn1.result.failInfo;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array of output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.status }));\r\n\r\n\t\tif(\"statusStrings\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tvalue: this.statusStrings\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"failInfo\" in this)\r\n\t\t\toutputArray.push(this.failInfo);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tstatus: this.status\r\n\t\t};\r\n\r\n\t\tif(\"statusStrings\" in this)\r\n\t\t\t_object.statusStrings = Array.from(this.statusStrings, element => element.toJSON());\r\n\r\n\t\tif(\"failInfo\" in this)\r\n\t\t\t_object.failInfo = this.failInfo.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}