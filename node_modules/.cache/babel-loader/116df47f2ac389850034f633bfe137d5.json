{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _javascriptStateMachine = require('javascript-state-machine');\n\nvar _javascriptStateMachine2 = _interopRequireDefault(_javascriptStateMachine);\n\nvar _history = require('javascript-state-machine/lib/history');\n\nvar _history2 = _interopRequireDefault(_history);\n\nvar _loggerProxy = require('../common/logs/logger-proxy');\n\nvar _loggerProxy2 = _interopRequireDefault(_loggerProxy);\n\nvar _media = require('../media');\n\nvar _media2 = _interopRequireDefault(_media);\n\nvar _util = require('../meeting/util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _constants = require('../constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar handleTransition = function handleTransition(audio) {\n  if (audio.mute && audio.self) {\n    return _constants.MEETING_AUDIO_STATE_MACHINE.STATES.MUTE_SELF;\n  }\n\n  if (!audio.mute && audio.self) {\n    return _constants.MEETING_AUDIO_STATE_MACHINE.STATES.UNMUTE_SELF;\n  }\n\n  return null;\n};\n\nvar doToggle = function doToggle(transition, audio, meeting) {\n  _media2.default.setLocalTrack(audio.mute, meeting.mediaProperties.audioTrack);\n\n  var meetingVideo = meeting.video;\n  var videoMuted = meetingVideo ? meetingVideo.muted : true;\n  return _util2.default.remoteUpdateAudioVideo(audio.mute, videoMuted, meeting).then(function () {\n    _loggerProxy2.default.logger.log('AudioStateMachine->onAfterToggle#' + transition.event + ' fired! State changed from \\'' + transition.from + '\\' to \\'' + transition.to + '\\' with transition \\'' + transition.transition + '\\'\\'.');\n  }).catch(function (remoteUpdateError) {\n    _loggerProxy2.default.logger.log('AudioStateMachine->onBeforeToggle#' + transition.event + ' fired! State failed to change with transition \\'' + transition.transition + '\\'\\'. After local audio toggle failed, resetting remote also failed, meeting audio in bad state with error: ' + remoteUpdateError + '.');\n\n    return _promise2.default.reject(remoteUpdateError);\n  });\n};\n\nvar AudioStateMachine = {\n  /**\n   *\n   * @param {Object} mediaDirection An object that contains whether we send audio/video/screen streams\n   * @param {Meeting} meeting the meeting instance we are using for this state machine\n   * @returns {StateMachine} returns a StateMachine instance\n   */\n  create: function create(mediaDirection, meeting) {\n    if (!mediaDirection.sendAudio) {\n      return null;\n    }\n\n    return new _javascriptStateMachine2.default({\n      transitions: [{\n        name: _constants.MEETING_AUDIO_STATE_MACHINE.TRANSITIONS.TOGGLE,\n        from: '*',\n\n        /**\n         *\n         * @param {Object} audio The audio options\n         * @param {Boolean} audio.mute Whether to mute the meeting or not\n         * @param {Boolean} audio.self Whether the was muted by the end user\n         * @param {Boolean} audio.remote Whether the meeting was muted by the server\n         * @returns {String} returns a new value to set the state to\n         */\n        to: function to(audio) {\n          return handleTransition(audio) || this.state;\n        }\n      }],\n      data: {\n        muted: false,\n        self: true\n      },\n      methods: {\n        /**\n         * Convenience method to return whether the call is muted or not\n         * @returns {Boolen} whether the audio is muted or not\n         */\n        isMuted: function isMuted() {\n          return this.muted;\n        },\n\n        /**\n         * Convenience method to expose this.self\n         * @returns {Boolen} this.self\n         */\n        isSelf: function isSelf() {\n          return this.self;\n        },\n\n        /**\n         *\n         * @param {Object} audio the audio state to change\n         * @returns {null}\n         */\n        setData: function setData(audio) {\n          this.muted = audio.mute;\n          this.self = audio.self;\n        },\n\n        /**\n         * Method that gets fired before the toggle state change.\n         * If this fails, return false will cancel the transition and the state will remain unchanged\n         * @param {Object} transition the StateMachine transition object\n         * @param {Object} audio Audio options\n         * @returns {Object} this.data which contains {muted, self}\n         */\n        onBeforeToggle: function onBeforeToggle(transition, audio) {\n          var _this = this;\n\n          if (transition.from !== transition.to) {\n            return doToggle(transition, audio, meeting).then(function () {\n              return _promise2.default.resolve(_this.data);\n            });\n          }\n\n          return _promise2.default.resolve(this.data);\n        },\n\n        /**\n         *\n         * @param {Object} transition StateMachine transition\n         * @param {Object} audio audio options\n         * @returns {Object} this.data which contains {muted, self}\n         */\n        onAfterToggle: function onAfterToggle(transition, audio) {\n          this.setData(audio);\n          return _promise2.default.resolve(this.data);\n        },\n        plugins: [new _history2.default({\n          max: 5\n        })]\n      }\n    });\n  }\n};\nexports.default = AudioStateMachine;","map":{"version":3,"sources":["audio.js"],"names":["handleTransition","audio","MEETING_AUDIO_STATE_MACHINE","doToggle","Media","meeting","meetingVideo","videoMuted","LoggerProxy","transition","AudioStateMachine","create","mediaDirection","StateMachine","transitions","name","from","to","data","muted","self","methods","isMuted","isSelf","setData","onBeforeToggle","onAfterToggle","plugins","StateMachineHistory","max"],"mappings":"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","sourcesContent":["import StateMachine from 'javascript-state-machine';\nimport StateMachineHistory from 'javascript-state-machine/lib/history';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport Media from '../media';\nimport MeetingUtil from '../meeting/util';\nimport {MEETING_AUDIO_STATE_MACHINE} from '../constants';\n\nconst handleTransition = (audio) => {\n  if (audio.mute && audio.self) {\n    return MEETING_AUDIO_STATE_MACHINE.STATES.MUTE_SELF;\n  }\n  if (!audio.mute && audio.self) {\n    return MEETING_AUDIO_STATE_MACHINE.STATES.UNMUTE_SELF;\n  }\n\n  return null;\n};\n\nconst doToggle = (transition, audio, meeting) => {\n  Media.setLocalTrack(audio.mute, meeting.mediaProperties.audioTrack);\n  const meetingVideo = meeting.video;\n  const videoMuted = meetingVideo ? meetingVideo.muted : true;\n\n  return MeetingUtil.remoteUpdateAudioVideo(audio.mute, videoMuted, meeting)\n    .then(() => {\n      LoggerProxy.logger.log(\n        `AudioStateMachine->onAfterToggle#${transition.event} fired! State changed from '${transition.from}' to '${\n          transition.to\n        }' with transition '${transition.transition}''.`\n      );\n    })\n    .catch((remoteUpdateError) => {\n      LoggerProxy.logger.log(\n        `AudioStateMachine->onBeforeToggle#${transition.event} fired! State failed to change with transition '${\n          transition.transition\n        }''. After local audio toggle failed, resetting remote also failed, meeting audio in bad state with error: ${remoteUpdateError}.`\n      );\n\n      return Promise.reject(remoteUpdateError);\n    });\n};\n\nconst AudioStateMachine = {\n  /**\n   *\n   * @param {Object} mediaDirection An object that contains whether we send audio/video/screen streams\n   * @param {Meeting} meeting the meeting instance we are using for this state machine\n   * @returns {StateMachine} returns a StateMachine instance\n   */\n  create(mediaDirection, meeting) {\n    if (!mediaDirection.sendAudio) {\n      return null;\n    }\n\n    return new StateMachine({\n      transitions: [\n        {\n          name: MEETING_AUDIO_STATE_MACHINE.TRANSITIONS.TOGGLE,\n          from: '*',\n          /**\n           *\n           * @param {Object} audio The audio options\n           * @param {Boolean} audio.mute Whether to mute the meeting or not\n           * @param {Boolean} audio.self Whether the was muted by the end user\n           * @param {Boolean} audio.remote Whether the meeting was muted by the server\n           * @returns {String} returns a new value to set the state to\n           */\n          to(audio) {\n            return handleTransition(audio) || this.state;\n          }\n        }\n      ],\n      data: {\n        muted: false,\n        self: true\n      },\n      methods: {\n        /**\n         * Convenience method to return whether the call is muted or not\n         * @returns {Boolen} whether the audio is muted or not\n         */\n        isMuted() {\n          return this.muted;\n        },\n\n        /**\n         * Convenience method to expose this.self\n         * @returns {Boolen} this.self\n         */\n        isSelf() {\n          return this.self;\n        },\n\n        /**\n         *\n         * @param {Object} audio the audio state to change\n         * @returns {null}\n         */\n        setData(audio) {\n          this.muted = audio.mute;\n          this.self = audio.self;\n        },\n\n        /**\n         * Method that gets fired before the toggle state change.\n         * If this fails, return false will cancel the transition and the state will remain unchanged\n         * @param {Object} transition the StateMachine transition object\n         * @param {Object} audio Audio options\n         * @returns {Object} this.data which contains {muted, self}\n         */\n        onBeforeToggle(transition, audio) {\n          if (transition.from !== transition.to) {\n            return doToggle(transition, audio, meeting)\n              .then(() => Promise.resolve(this.data));\n          }\n\n          return Promise.resolve(this.data);\n        },\n\n        /**\n         *\n         * @param {Object} transition StateMachine transition\n         * @param {Object} audio audio options\n         * @returns {Object} this.data which contains {muted, self}\n         */\n        onAfterToggle(transition, audio) {\n          this.setData(audio);\n\n          return Promise.resolve(this.data);\n        },\n        plugins: [new StateMachineHistory({max: 5})]\n      }\n    });\n  }\n};\n\nexport default AudioStateMachine;\n"]},"metadata":{},"sourceType":"script"}