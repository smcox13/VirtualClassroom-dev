{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _bowser = require('bowser');\n\nvar _bowser2 = _interopRequireDefault(_bowser);\n\nvar _loggerProxy = require('../common/logs/logger-proxy');\n\nvar _loggerProxy2 = _interopRequireDefault(_loggerProxy);\n\nvar _constants = require('../constants');\n\nvar _peerConnectionManager = require('../peer-connection-manager');\n\nvar _peerConnectionManager2 = _interopRequireDefault(_peerConnectionManager);\n\nvar _reconnection = require('../common/errors/reconnection');\n\nvar _reconnection2 = _interopRequireDefault(_reconnection);\n\nvar _media = require('../common/errors/media');\n\nvar _media2 = _interopRequireDefault(_media);\n\nvar _config = require('../config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * MediaDirection\n * @typedef {Object} MediaDirection\n * @property {boolean} sendAudio\n * @property {boolean} receiveAudio\n * @property {boolean} sendVideo\n * @property {boolean} receiveVideo\n * @property {boolean} sendShare\n * @property {boolean} receiveShare\n */\n\n/**\n * SendOptions\n * @typedef {Object} SendOptions\n * @property sendAudio\n * @property sendVideo\n * @property sendShare\n * @property {Object} sharePreferences\n */\n\n/**\n *\n * @public\n * @export\n * Mimic browser APIs as \"the ultimate browser\".\n * Handles the quirks of each browser.\n * Extends and enhances adapter.js, i.e., the \"media\" file from the web client.\n */\n\n\nvar Media = {};\n/**\n * @param {boolean} enabled\n * @param {MediaStreamTrack} track\n * @returns {Boolean}\n * @public\n */\n\n/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* globals navigator */\n\nMedia.setLocalTrack = function (enabled, track) {\n  if (track) {\n    track.enabled = !enabled;\n    return true;\n  }\n\n  return false;\n};\n/**\n * @param {RTCPeerConnection} peerConnection\n * @param {String} meetingId\n * @returns {Promise}\n */\n\n\nMedia.reconnectMedia = function (peerConnection, meetingId) {\n  if (peerConnection.connectionState === _constants.PEER_CONNECTION_STATE.CLOSED || peerConnection.connectionState === _constants.PEER_CONNECTION_STATE.FAILED) {\n    return _promise2.default.reject(new _reconnection2.default('Reinitiate peerconnection'));\n  }\n\n  return _peerConnectionManager2.default.createOffer(peerConnection, meetingId);\n};\n/**\n * format the media array for send\n * @param {String} mediaId\n * @param {Boolean} audioMuted\n * @param {Boolean} videoMuted\n * @returns {Array} medias\n */\n\n\nMedia.generateLocalMedias = function (mediaId, audioMuted, videoMuted) {\n  if (mediaId) {\n    return [{\n      localSdp: (0, _stringify2.default)({\n        audioMuted: audioMuted,\n        videoMuted: videoMuted\n      }),\n      mediaId: mediaId\n    }];\n  }\n\n  return [];\n};\n/**\n * make a browser call to get the media\n * @param {SendOptions} options\n * @returns {Promise}\n */\n\n\nMedia.getLocalMedia = function (options) {\n  var sendAudio = options.sendAudio,\n      sendVideo = options.sendVideo,\n      sendShare = options.sendShare,\n      sharePreferences = options.sharePreferences;\n\n  if (sendAudio || sendVideo) {\n    return Media.getMedia(sendAudio, sendVideo);\n  }\n\n  if (sendShare) {\n    return Media.getDisplayMedia({\n      sendAudio: false,\n      sendShare: true,\n      sharePreferences: sharePreferences\n    });\n  }\n\n  return _promise2.default.resolve(undefined);\n};\n/**\n * Returns the direction and tracks\n * @param {string} trackType type of track (audio/video)\n * @param {object}  track  tracks passed\n * @param {boolean} receiveTracks do you want to receive tracks from the remote side\n * @returns {Object} returns direction tracks to be added in transceiver\n */\n\n\nMedia.checkTracks = function (trackType, track, receiveTracks) {\n  var getDirection = function getDirection(sendTracks, receiveTracks) {\n    if (sendTracks && receiveTracks) {\n      return 'sendrecv';\n    }\n\n    if (sendTracks && !receiveTracks) {\n      return 'sendonly';\n    }\n\n    if (!sendTracks && receiveTracks) {\n      return 'recvonly';\n    }\n\n    if (sendTracks && receiveTracks) {\n      return 'inactive';\n    }\n\n    return 'inactive';\n  };\n\n  if (track) {\n    return {\n      track: track,\n      direction: getDirection(!!track, receiveTracks)\n    };\n  }\n\n  return {\n    track: trackType,\n    direction: getDirection(!!track, receiveTracks)\n  };\n};\n/**\n * creates peerconnection and attaches streams\n * @param {MediaDirection} mediaProperties\n * @param {Object} meetingId call flow id\n * @returns {Array} [peerConnection, ]\n */\n\n\nMedia.attachMedia = function (mediaProperties, meetingId) {\n  var mediaDirection = mediaProperties.mediaDirection,\n      audioTrack = mediaProperties.audioTrack,\n      videoTrack = mediaProperties.videoTrack,\n      shareTrack = mediaProperties.shareTrack,\n      peerConnection = mediaProperties.peerConnection;\n  var result = null; // Add Transceiver for audio\n\n  result = Media.checkTracks('audio', mediaDirection.sendAudio && audioTrack, mediaDirection.receiveAudio);\n  peerConnection.audioTransceiver = peerConnection.addTransceiver(result.track, {\n    direction: result.direction\n  }); // Add Transceiver for video\n\n  result = Media.checkTracks('video', mediaDirection.sendVideo && videoTrack, mediaDirection.receiveVideo);\n  peerConnection.videoTransceiver = peerConnection.addTransceiver(result.track, {\n    direction: result.direction\n  }); // Add Transceiver for share\n\n  result = Media.checkTracks('video', mediaDirection.sendShare && shareTrack, mediaDirection.receiveShare);\n  peerConnection.shareTransceiver = peerConnection.addTransceiver(result.track, {\n    direction: result.direction\n  });\n\n  peerConnection.onnegotiationneeded = function (event) {\n    _loggerProxy2.default.logger.info('Media->attachMedia/onnegotiationneeded#PeerConnection: ' + event);\n  };\n\n  return _peerConnectionManager2.default.createOffer(peerConnection, meetingId);\n};\n/**\n * updates all the media streams and creates a new media offer\n * @param {MediaDirection} mediaProperties\n * @param {String} meetingId\n * @returns {Promise}\n */\n\n\nMedia.updateMedia = function (mediaProperties, meetingId) {\n  var mediaDirection = mediaProperties.mediaDirection,\n      audioTrack = mediaProperties.audioTrack,\n      videoTrack = mediaProperties.videoTrack,\n      shareTrack = mediaProperties.shareTrack,\n      peerConnection = mediaProperties.peerConnection; // update audio transceiver\n\n  Media.setTrackOnTransceiver(peerConnection.audioTransceiver, {\n    type: 'audio',\n    track: audioTrack,\n    sendTrack: mediaDirection.sendAudio && audioTrack,\n    receiveTrack: mediaDirection.receiveAudio\n  }); // update video transceiver\n\n  Media.setTrackOnTransceiver(peerConnection.videoTransceiver, {\n    type: 'video',\n    track: videoTrack,\n    sendTrack: mediaDirection.sendVideo && videoTrack,\n    receiveTrack: mediaDirection.receiveVideo\n  }); // update content transceiver\n\n  Media.setTrackOnTransceiver(peerConnection.shareTransceiver, {\n    type: 'video',\n    track: shareTrack,\n    sendTrack: mediaDirection.sendShare && shareTrack,\n    receiveTrack: mediaDirection.receiveShare\n  });\n\n  peerConnection.onnegotiationneeded = function (event) {\n    _loggerProxy2.default.logger.info('Media->attachMedia/onnegotiationneeded#PeerConnection: ' + event);\n  };\n\n  return _peerConnectionManager2.default.createOffer(peerConnection, meetingId);\n};\n/**\n * @param {RTCRtpTransceiver} transceiver\n * @param {Object} options\n * @param {MediaStreamTrack} options.track\n * @returns {undefined}\n */\n\n\nMedia.setTrackOnTransceiver = function (transceiver, options) {\n  var type = options.type,\n      track = options.track,\n      sendTrack = options.sendTrack,\n      receiveTrack = options.receiveTrack;\n\n  try {\n    var result = Media.checkTracks(type, sendTrack && track, receiveTrack);\n    transceiver.direction = result.direction;\n\n    if (options.track) {\n      transceiver.sender.replaceTrack(track);\n    }\n  } catch (e) {\n    throw e;\n  }\n};\n/**\n * creates a new offer\n * @param {String} meetingId\n * @param {RTCPeerConnection} peerConnection\n * @param {RTCRtpTransceiver} transceiver\n * @param {Object} options see #Media.setTrackOnTransceiver\n * @returns {Promise}\n */\n\n\nMedia.updateTransceiver = function (meetingId, peerConnection, transceiver, options) {\n  Media.setTrackOnTransceiver(transceiver, options);\n  return _peerConnectionManager2.default.createOffer(peerConnection, meetingId);\n};\n/**\n * generates share streams\n * @param {object} options parameter\n * @param {Object} options.sendAudio sendAudio: {Boolean} sendAudio constraints\n * @param {Object} options.sendShare sendShare: {Boolean} sendShare constraints\n * @param {Object} options.sharePreferences sharePreferences: {Object} Share constraints and share constraints\n * @returns {Object} {streams}\n */\n\n\nMedia.getDisplayMedia = function (options) {\n  var shareConstraints = options.sharePreferences && options.sharePreferences.shareConstraints || {\n    cursor: 'always',\n    frameRate: options.sharePreferences && options.sharePreferences.highFrameRate ? _config2.default.meetings.videoShareFrameRate : _config2.default.meetings.screenFrameRate,\n    aspectRatio: _config2.default.meetings.aspectRatio,\n    width: options.sharePreferences && options.sharePreferences.highFrameRate ? _config2.default.meetings.resolution.idealWidth : _config2.default.meetings.screenResolution.idealWidth,\n    height: options.sharePreferences && options.sharePreferences.highFrameRate ? _config2.default.meetings.resolution.idealHeight : _config2.default.meetings.screenResolution.idealHeight\n  }; // chrome and webkit based browsers (edge, safari) automatically adjust everything\n  // and we have noticed higher quality with those browser types\n  // firefox specifically has some issues with resolution and frame rate decision making\n  // so we are making it optional and configurable (with defaults) for firefox\n  // to have higher quality, and for developers to control the values\n  // eventually we may have to add the same functionality to chrome, OR conversely, get to with firefox\n\n  if (_bowser2.default.name.toLowerCase() === 'firefox') {\n    var mediaConfig = {\n      audio: options.sendAudio,\n      video: options.sendShare\n    };\n    return navigator.mediaDevices.getDisplayMedia({\n      audio: options.sendAudio,\n      video: mediaConfig\n    }).then(function (stream) {\n      if (options.sendShare && stream.getVideoTracks().length > 0) {\n        // Firefox has a bug with the spec where changing in the height and width only happens\n        // after we get the inital tracks\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1321221\n        stream.getVideoTracks()[0].applyConstraints(shareConstraints);\n      }\n\n      return stream;\n    });\n  }\n\n  return navigator.mediaDevices.getDisplayMedia({\n    audio: options.sendAudio,\n    video: options.sendShare ? shareConstraints : false\n  });\n};\n/**\n * generates audio and video using constraints (often called after getSupportedDevices)\n * @param {Object} audio audio: {Boolean} gum constraints\n * @param {Object} video video: {Boolean} gum constraints\n * @returns {Object} {streams}\n */\n\n\nMedia.getMedia = function (audio, video) {\n  var defaultWidth = {\n    ideal: _config2.default.meetings.resolution.idealWidth,\n    max: _config2.default.meetings.resolution.maxWidth\n  };\n  var defaultHeight = {\n    ideal: _config2.default.meetings.resolution.idealHeight,\n    max: _config2.default.meetings.resolution.maxHeight\n  };\n  var mediaConfig = {\n    audio: audio,\n    video: video ? {\n      deviceId: video.deviceId ? video.deviceId : undefined,\n      width: video.width ? video.width : defaultWidth,\n      height: video.height ? video.height : defaultHeight\n    } : false,\n    fake: process.env.NODE_ENV === 'test' // Special case to get fake media for Firefox browser for testing\n\n  };\n  return new _promise2.default(function (resolve, reject) {\n    navigator.mediaDevices.getUserMedia(mediaConfig).then(function (stream) {\n      resolve(stream);\n    }).catch(function (err) {\n      reject(new _media2.default('Local Get User Media failed', {\n        name: err.name,\n        localMediaFailed: true,\n        cameraFailed: err === mediaConfig.permissionDenied\n      }));\n    });\n  });\n};\n/**\n * Checks if the machine has at least one audio or video device (Dont use this for screen share)\n * @param {object} [options]\n * {\n *    sendAudio: true/false,\n *    sendVideo: true/false\n * }\n * @returns {Object} {\n *    sendAudio: true/false,\n *    sendVideo: true/false\n *}\n */\n\n\nMedia.getSupportedDevice = function (_ref) {\n  var sendAudio = _ref.sendAudio,\n      sendVideo = _ref.sendVideo;\n  return _promise2.default.resolve().then(function () {\n    if (!navigator.mediaDevices || navigator.mediaDevices.enumerateDevices === undefined) {\n      return {\n        sendAudio: true,\n        sendVideo: true\n      };\n    }\n\n    return navigator.mediaDevices.enumerateDevices().then(function (devices) {\n      var supported = {\n        audio: devices.filter(function (device) {\n          return device.kind === _constants.AUDIO_INPUT;\n        }).length > 0,\n        video: devices.filter(function (device) {\n          return device.kind === _constants.VIDEO_INPUT;\n        }).length > 0\n      };\n      return {\n        sendAudio: supported.audio && sendAudio || true,\n        sendVideo: supported.video && sendVideo || true\n      };\n    });\n  });\n};\n/**\n * proxy to browser navigator.mediaDevices.enumerateDevices()\n * @returns {Promise}\n */\n\n\nMedia.getDevices = function () {\n  if (navigator && navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n    return navigator.mediaDevices.enumerateDevices();\n  }\n\n  return _promise2.default.reject(new _media2.default('enumerateDevices not supported.'));\n};\n/**\n *\n * Toggle a specific stream\n * noop as of now, does nothing\n * @returns {null}\n */\n\n\nMedia.toggleStream = function () {};\n/**\n * Stop input stream\n * @param {MediaTrack} track A media stream\n * @returns {null}\n */\n\n\nMedia.stopTracks = function (track) {\n  if (!track) {\n    return _promise2.default.resolve();\n  }\n\n  return _promise2.default.resolve().then(function () {\n    if (track && track.stop) {\n      try {\n        track.stop();\n      } catch (e) {\n        _loggerProxy2.default.logger.error('media/index->stopTracks#Unable to stop the track with state ' + track.readyState + ', error: ' + e);\n      }\n    }\n  });\n};\n/**\n *\n * Stop input stream\n * @param {Stream} stream A media stream\n * @returns {null}\n */\n\n\nMedia.stopStream = function (stream) {\n  if (!stream) {\n    return _promise2.default.resolve();\n  }\n  /*\n   * To release local media\n   * 1) Chrome requires all tracks to be stopped (stream.stop got deprecated)\n   * 2) Firefox requires the stream to be stopped\n   */\n\n\n  return _promise2.default.resolve().then(function () {\n    if (stream.getTracks) {\n      stream.getTracks().forEach(function (track) {\n        track.stop();\n      });\n    } else if (stream.stop) {\n      stream.stop();\n    }\n  });\n};\n/**\n * generates streams for audio video and share\n * @param {object} mediaSetting parameter\n * @param {Object} mediaSetting.sendAudio sendAudio: {Boolean} sendAudio constraints\n * @param {Object} mediaSetting.sendVideo sendVideo: {Boolean} sendVideo constraints\n * @param {Object} mediaSetting.sendShare sendShare: {Boolean} sendShare constraints\n * @param {Object} audioVideo parameter\n * @param {Object} audioVideo.audio {deviceId: {String}}\n * @param {Object} audioVideo.video {deviceId: {String}}\n * @param {Object} sharePreferences parameter\n * @param {Object} sharePreferences.shareConstraints parameter\n * @param {Boolean} sharePreferences.highFrameRate parameter\n * @returns {Array} [localStream, shareStream]\n */\n\n\nMedia.getUserMedia = function (mediaSetting, audioVideo, sharePreferences) {\n  return Media.getLocalMedia({\n    sendAudio: mediaSetting.sendAudio ? audioVideo.audio || mediaSetting.sendAudio : false,\n    sendVideo: mediaSetting.sendVideo ? audioVideo.video || mediaSetting.sendVideo : false\n  }).then(function (localStream) {\n    return Media.getLocalMedia({\n      sendShare: mediaSetting.sendShare,\n      sharePreferences: sharePreferences\n    }).then(function (shareStream) {\n      return [localStream, shareStream];\n    });\n  });\n};\n\nexports.default = Media;","map":{"version":3,"sources":["index.js"],"names":["Media","track","peerConnection","PEER_CONNECTION_STATE","ReconnectionError","PeerConnectionManager","localSdp","audioMuted","videoMuted","mediaId","sendAudio","sendVideo","sendShare","sharePreferences","options","getDirection","sendTracks","direction","mediaDirection","audioTrack","videoTrack","shareTrack","mediaProperties","result","LoggerProxy","type","sendTrack","receiveTrack","receiveAudio","receiveVideo","receiveShare","transceiver","shareConstraints","cursor","frameRate","config","aspectRatio","width","height","idealHeight","bowser","mediaConfig","audio","video","stream","navigator","defaultWidth","ideal","max","defaultHeight","deviceId","fake","process","resolve","reject","MediaError","name","err","localMediaFailed","cameraFailed","permissionDenied","supported","device","AUDIO_INPUT","VIDEO_INPUT","mediaSetting","audioVideo"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n/* globals navigator */\nimport bowser from 'bowser';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {\n  AUDIO_INPUT,\n  VIDEO_INPUT,\n  PEER_CONNECTION_STATE\n} from '../constants';\nimport PeerConnectionManager from '../peer-connection-manager';\nimport ReconnectionError from '../common/errors/reconnection';\nimport MediaError from '../common/errors/media';\nimport config from '../config';\n\n\n/**\n * MediaDirection\n * @typedef {Object} MediaDirection\n * @property {boolean} sendAudio\n * @property {boolean} receiveAudio\n * @property {boolean} sendVideo\n * @property {boolean} receiveVideo\n * @property {boolean} sendShare\n * @property {boolean} receiveShare\n */\n\n/**\n * SendOptions\n * @typedef {Object} SendOptions\n * @property sendAudio\n * @property sendVideo\n * @property sendShare\n * @property {Object} sharePreferences\n */\n/**\n *\n * @public\n * @export\n * Mimic browser APIs as \"the ultimate browser\".\n * Handles the quirks of each browser.\n * Extends and enhances adapter.js, i.e., the \"media\" file from the web client.\n */\nconst Media = {};\n\n/**\n * @param {boolean} enabled\n * @param {MediaStreamTrack} track\n * @returns {Boolean}\n * @public\n */\nMedia.setLocalTrack = (enabled, track) => {\n  if (track) {\n    track.enabled = !enabled;\n\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * @param {RTCPeerConnection} peerConnection\n * @param {String} meetingId\n * @returns {Promise}\n */\nMedia.reconnectMedia = (peerConnection, meetingId) => {\n  if (peerConnection.connectionState === PEER_CONNECTION_STATE.CLOSED ||\n    peerConnection.connectionState === PEER_CONNECTION_STATE.FAILED) {\n    return Promise.reject(new ReconnectionError('Reinitiate peerconnection'));\n  }\n\n  return PeerConnectionManager.createOffer(peerConnection, meetingId);\n};\n\n/**\n * format the media array for send\n * @param {String} mediaId\n * @param {Boolean} audioMuted\n * @param {Boolean} videoMuted\n * @returns {Array} medias\n */\nMedia.generateLocalMedias = (mediaId, audioMuted, videoMuted) => {\n  if (mediaId) {\n    return [\n      {\n        localSdp: JSON.stringify({\n          audioMuted,\n          videoMuted\n        }),\n        mediaId\n      }\n    ];\n  }\n\n  return [];\n};\n\n/**\n * make a browser call to get the media\n * @param {SendOptions} options\n * @returns {Promise}\n */\nMedia.getLocalMedia = (options) => {\n  const {\n    sendAudio, sendVideo, sendShare, sharePreferences\n  } = options;\n\n  if (sendAudio || sendVideo) {\n    return Media.getMedia(sendAudio, sendVideo);\n  }\n\n  if (sendShare) {\n    return Media.getDisplayMedia(\n      {\n        sendAudio: false,\n        sendShare: true,\n        sharePreferences\n      }\n    );\n  }\n\n  return Promise.resolve(undefined);\n};\n/**\n * Returns the direction and tracks\n * @param {string} trackType type of track (audio/video)\n * @param {object}  track  tracks passed\n * @param {boolean} receiveTracks do you want to receive tracks from the remote side\n * @returns {Object} returns direction tracks to be added in transceiver\n */\nMedia.checkTracks = (trackType, track, receiveTracks) => {\n  const getDirection = (sendTracks, receiveTracks) => {\n    if (sendTracks && receiveTracks) {\n      return 'sendrecv';\n    } if (sendTracks && !receiveTracks) {\n      return 'sendonly';\n    } if (!sendTracks && receiveTracks) {\n      return 'recvonly';\n    } if (sendTracks && receiveTracks) {\n      return 'inactive';\n    }\n\n    return 'inactive';\n  };\n\n  if (track) {\n    return {track, direction: getDirection(!!track, receiveTracks)};\n  }\n\n  return {track: trackType, direction: getDirection(!!track, receiveTracks)};\n};\n/**\n * creates peerconnection and attaches streams\n * @param {MediaDirection} mediaProperties\n * @param {Object} meetingId call flow id\n * @returns {Array} [peerConnection, ]\n */\nMedia.attachMedia = (mediaProperties, meetingId) => {\n  const {\n    mediaDirection, audioTrack, videoTrack, shareTrack, peerConnection\n  } = mediaProperties;\n\n  let result = null;\n\n  // Add Transceiver for audio\n  result = Media.checkTracks('audio', mediaDirection.sendAudio && audioTrack, mediaDirection.receiveAudio);\n  peerConnection.audioTransceiver = peerConnection.addTransceiver(result.track, {direction: result.direction});\n\n  // Add Transceiver for video\n  result = Media.checkTracks('video', mediaDirection.sendVideo && videoTrack, mediaDirection.receiveVideo);\n  peerConnection.videoTransceiver = peerConnection.addTransceiver(result.track, {direction: result.direction});\n\n  // Add Transceiver for share\n  result = Media.checkTracks('video', mediaDirection.sendShare && shareTrack, mediaDirection.receiveShare);\n  peerConnection.shareTransceiver = peerConnection.addTransceiver(result.track, {direction: result.direction});\n\n  peerConnection.onnegotiationneeded = (event) => {\n    LoggerProxy.logger.info(`Media->attachMedia/onnegotiationneeded#PeerConnection: ${event}`);\n  };\n\n  return PeerConnectionManager.createOffer(peerConnection, meetingId);\n};\n\n/**\n * updates all the media streams and creates a new media offer\n * @param {MediaDirection} mediaProperties\n * @param {String} meetingId\n * @returns {Promise}\n */\nMedia.updateMedia = (mediaProperties, meetingId) => {\n  const {\n    mediaDirection, audioTrack, videoTrack, shareTrack, peerConnection\n  } = mediaProperties;\n\n  // update audio transceiver\n  Media.setTrackOnTransceiver(peerConnection.audioTransceiver, {\n    type: 'audio',\n    track: audioTrack,\n    sendTrack: mediaDirection.sendAudio && audioTrack,\n    receiveTrack: mediaDirection.receiveAudio\n  });\n\n  // update video transceiver\n  Media.setTrackOnTransceiver(peerConnection.videoTransceiver, {\n    type: 'video',\n    track: videoTrack,\n    sendTrack: mediaDirection.sendVideo && videoTrack,\n    receiveTrack: mediaDirection.receiveVideo\n  });\n\n  // update content transceiver\n  Media.setTrackOnTransceiver(peerConnection.shareTransceiver, {\n    type: 'video',\n    track: shareTrack,\n    sendTrack: mediaDirection.sendShare && shareTrack,\n    receiveTrack: mediaDirection.receiveShare\n  });\n  peerConnection.onnegotiationneeded = (event) => {\n    LoggerProxy.logger.info(`Media->attachMedia/onnegotiationneeded#PeerConnection: ${event}`);\n  };\n\n  return PeerConnectionManager.createOffer(peerConnection, meetingId);\n};\n\n/**\n * @param {RTCRtpTransceiver} transceiver\n * @param {Object} options\n * @param {MediaStreamTrack} options.track\n * @returns {undefined}\n */\nMedia.setTrackOnTransceiver = (transceiver, options) => {\n  const {\n    type, track, sendTrack, receiveTrack\n  } = options;\n\n  try {\n    const result = Media.checkTracks(type, sendTrack && track, receiveTrack);\n\n    transceiver.direction = result.direction;\n    if (options.track) {\n      transceiver.sender.replaceTrack(track);\n    }\n  }\n  catch (e) {\n    throw e;\n  }\n};\n\n/**\n * creates a new offer\n * @param {String} meetingId\n * @param {RTCPeerConnection} peerConnection\n * @param {RTCRtpTransceiver} transceiver\n * @param {Object} options see #Media.setTrackOnTransceiver\n * @returns {Promise}\n */\nMedia.updateTransceiver = (meetingId, peerConnection, transceiver, options) => {\n  Media.setTrackOnTransceiver(transceiver, options);\n\n  return PeerConnectionManager.createOffer(peerConnection, meetingId);\n};\n\n/**\n * generates share streams\n * @param {object} options parameter\n * @param {Object} options.sendAudio sendAudio: {Boolean} sendAudio constraints\n * @param {Object} options.sendShare sendShare: {Boolean} sendShare constraints\n * @param {Object} options.sharePreferences sharePreferences: {Object} Share constraints and share constraints\n * @returns {Object} {streams}\n */\nMedia.getDisplayMedia = (options) => {\n  const shareConstraints = options.sharePreferences && options.sharePreferences.shareConstraints || {\n    cursor: 'always',\n    frameRate: options.sharePreferences && options.sharePreferences.highFrameRate ? config.meetings.videoShareFrameRate : config.meetings.screenFrameRate,\n    aspectRatio: config.meetings.aspectRatio,\n    width: options.sharePreferences && options.sharePreferences.highFrameRate ? config.meetings.resolution.idealWidth : config.meetings.screenResolution.idealWidth,\n    height: options.sharePreferences && options.sharePreferences.highFrameRate ? config.meetings.resolution.idealHeight : config.meetings.screenResolution.idealHeight\n  };\n  // chrome and webkit based browsers (edge, safari) automatically adjust everything\n  // and we have noticed higher quality with those browser types\n  // firefox specifically has some issues with resolution and frame rate decision making\n  // so we are making it optional and configurable (with defaults) for firefox\n  // to have higher quality, and for developers to control the values\n  // eventually we may have to add the same functionality to chrome, OR conversely, get to with firefox\n\n\n  if (bowser.name.toLowerCase() === 'firefox') {\n    const mediaConfig = {\n      audio: options.sendAudio,\n      video: options.sendShare\n    };\n\n\n    return navigator.mediaDevices.getDisplayMedia({audio: options.sendAudio, video: mediaConfig})\n      .then((stream) => {\n        if (options.sendShare && stream.getVideoTracks().length > 0) {\n          // Firefox has a bug with the spec where changing in the height and width only happens\n          // after we get the inital tracks\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=1321221\n          stream.getVideoTracks()[0].applyConstraints(shareConstraints);\n        }\n\n\n        return stream;\n      });\n  }\n\n  return navigator.mediaDevices.getDisplayMedia({audio: options.sendAudio, video: options.sendShare ? shareConstraints : false});\n};\n\n/**\n * generates audio and video using constraints (often called after getSupportedDevices)\n * @param {Object} audio audio: {Boolean} gum constraints\n * @param {Object} video video: {Boolean} gum constraints\n * @returns {Object} {streams}\n */\nMedia.getMedia = (audio, video) => {\n  const defaultWidth = {ideal: config.meetings.resolution.idealWidth, max: config.meetings.resolution.maxWidth};\n  const defaultHeight = {ideal: config.meetings.resolution.idealHeight, max: config.meetings.resolution.maxHeight};\n  const mediaConfig = {\n    audio,\n    video: video ? {\n      deviceId: video.deviceId ? video.deviceId : undefined,\n      width: video.width ? video.width : defaultWidth,\n      height: video.height ? video.height : defaultHeight\n    } : false,\n    fake: process.env.NODE_ENV === 'test' // Special case to get fake media for Firefox browser for testing\n  };\n\n  return new Promise((resolve, reject) => {\n    navigator.mediaDevices\n      .getUserMedia(mediaConfig)\n      .then((stream) => {\n        resolve(stream);\n      })\n      .catch((err) => {\n        reject(\n          new MediaError('Local Get User Media failed', {\n            name: err.name,\n            localMediaFailed: true,\n            cameraFailed: err === mediaConfig.permissionDenied\n          })\n        );\n      });\n  });\n};\n\n/**\n * Checks if the machine has at least one audio or video device (Dont use this for screen share)\n * @param {object} [options]\n * {\n *    sendAudio: true/false,\n *    sendVideo: true/false\n * }\n * @returns {Object} {\n *    sendAudio: true/false,\n *    sendVideo: true/false\n *}\n */\nMedia.getSupportedDevice = ({sendAudio, sendVideo}) =>\n  Promise.resolve().then(() => {\n    if (!navigator.mediaDevices || navigator.mediaDevices.enumerateDevices === undefined) {\n      return {\n        sendAudio: true,\n        sendVideo: true\n      };\n    }\n\n    return navigator.mediaDevices.enumerateDevices().then((devices) => {\n      const supported = {\n        audio: devices.filter((device) => device.kind === AUDIO_INPUT).length > 0,\n        video: devices.filter((device) => device.kind === VIDEO_INPUT).length > 0\n      };\n\n      return {\n        sendAudio: (supported.audio && sendAudio) || true,\n        sendVideo: (supported.video && sendVideo) || true\n      };\n    });\n  });\n\n/**\n * proxy to browser navigator.mediaDevices.enumerateDevices()\n * @returns {Promise}\n */\nMedia.getDevices = () => {\n  if (navigator && navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n    return navigator.mediaDevices.enumerateDevices();\n  }\n\n  return Promise.reject(new MediaError('enumerateDevices not supported.'));\n};\n\n/**\n *\n * Toggle a specific stream\n * noop as of now, does nothing\n * @returns {null}\n */\nMedia.toggleStream = () => {};\n\n/**\n * Stop input stream\n * @param {MediaTrack} track A media stream\n * @returns {null}\n */\nMedia.stopTracks = (track) => {\n  if (!track) {\n    return Promise.resolve();\n  }\n\n  return Promise.resolve().then(() => {\n    if (track && track.stop) {\n      try {\n        track.stop();\n      }\n      catch (e) {\n        LoggerProxy.logger.error(`media/index->stopTracks#Unable to stop the track with state ${track.readyState}, error: ${e}`);\n      }\n    }\n  });\n};\n\n/**\n *\n * Stop input stream\n * @param {Stream} stream A media stream\n * @returns {null}\n */\nMedia.stopStream = (stream) => {\n  if (!stream) {\n    return Promise.resolve();\n  }\n\n  /*\n   * To release local media\n   * 1) Chrome requires all tracks to be stopped (stream.stop got deprecated)\n   * 2) Firefox requires the stream to be stopped\n   */\n  return Promise.resolve().then(() => {\n    if (stream.getTracks) {\n      stream.getTracks().forEach((track) => {\n        track.stop();\n      });\n    }\n    else if (stream.stop) {\n      stream.stop();\n    }\n  });\n};\n\n/**\n * generates streams for audio video and share\n * @param {object} mediaSetting parameter\n * @param {Object} mediaSetting.sendAudio sendAudio: {Boolean} sendAudio constraints\n * @param {Object} mediaSetting.sendVideo sendVideo: {Boolean} sendVideo constraints\n * @param {Object} mediaSetting.sendShare sendShare: {Boolean} sendShare constraints\n * @param {Object} audioVideo parameter\n * @param {Object} audioVideo.audio {deviceId: {String}}\n * @param {Object} audioVideo.video {deviceId: {String}}\n * @param {Object} sharePreferences parameter\n * @param {Object} sharePreferences.shareConstraints parameter\n * @param {Boolean} sharePreferences.highFrameRate parameter\n * @returns {Array} [localStream, shareStream]\n */\nMedia.getUserMedia = (mediaSetting, audioVideo, sharePreferences) => Media.getLocalMedia({\n  sendAudio: mediaSetting.sendAudio ? audioVideo.audio || mediaSetting.sendAudio : false,\n  sendVideo: mediaSetting.sendVideo ? audioVideo.video || mediaSetting.sendVideo : false\n}).then((localStream) => Media.getLocalMedia({\n  sendShare: mediaSetting.sendShare,\n  sharePreferences\n}).then((shareStream) => [localStream, shareStream]));\n\nexport default Media;\n"]},"metadata":{},"sourceType":"script"}