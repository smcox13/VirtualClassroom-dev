// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tests for <ProgressBar /> should match SnapShot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ProgressBar
    color=""
    displayFormat="fraction"
    dynamic={false}
    label="test"
    max={100}
    min={0}
    type="determinate"
    value={50}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="progressbar-info"
        >
          <span
            className="progressbar-label"
          >
            test
          </span>
          <span
            className="progressbar-progress"
          >
            50 / 100
          </span>
        </div>,
        <div
          className="progress "
        >
          <span
            aria-labelledby="progressbar"
            aria-valuemax={100}
            aria-valuemin={0}
            aria-valuenow={50}
            aria-valuetext="50%"
            className="meter"
            role="progressbar"
            style={
              Object {
                "width": "50%",
              }
            }
          />
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "0",
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <span
              className="progressbar-label"
            >
              test
            </span>,
            <span
              className="progressbar-progress"
            >
              50 / 100
            </span>,
          ],
          "className": "progressbar-info",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "test",
              "className": "progressbar-label",
            },
            "ref": null,
            "rendered": "test",
            "type": "span",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "50 / 100",
              "className": "progressbar-progress",
            },
            "ref": null,
            "rendered": "50 / 100",
            "type": "span",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": "1",
        "nodeType": "host",
        "props": Object {
          "children": <span
            aria-labelledby="progressbar"
            aria-valuemax={100}
            aria-valuemin={0}
            aria-valuenow={50}
            aria-valuetext="50%"
            className="meter"
            role="progressbar"
            style={
              Object {
                "width": "50%",
              }
            }
          />,
          "className": "progress ",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "aria-labelledby": "progressbar",
            "aria-valuemax": 100,
            "aria-valuemin": 0,
            "aria-valuenow": 50,
            "aria-valuetext": "50%",
            "className": "meter",
            "role": "progressbar",
            "style": Object {
              "width": "50%",
            },
          },
          "ref": null,
          "rendered": null,
          "type": "span",
        },
        "type": "div",
      },
    ],
    "type": "span",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="progressbar-info"
          >
            <span
              className="progressbar-label"
            >
              test
            </span>
            <span
              className="progressbar-progress"
            >
              50 / 100
            </span>
          </div>,
          <div
            className="progress "
          >
            <span
              aria-labelledby="progressbar"
              aria-valuemax={100}
              aria-valuemin={0}
              aria-valuenow={50}
              aria-valuetext="50%"
              className="meter"
              role="progressbar"
              style={
                Object {
                  "width": "50%",
                }
              }
            />
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "0",
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <span
                className="progressbar-label"
              >
                test
              </span>,
              <span
                className="progressbar-progress"
              >
                50 / 100
              </span>,
            ],
            "className": "progressbar-info",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "test",
                "className": "progressbar-label",
              },
              "ref": null,
              "rendered": "test",
              "type": "span",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "50 / 100",
                "className": "progressbar-progress",
              },
              "ref": null,
              "rendered": "50 / 100",
              "type": "span",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": "1",
          "nodeType": "host",
          "props": Object {
            "children": <span
              aria-labelledby="progressbar"
              aria-valuemax={100}
              aria-valuemin={0}
              aria-valuenow={50}
              aria-valuetext="50%"
              className="meter"
              role="progressbar"
              style={
                Object {
                  "width": "50%",
                }
              }
            />,
            "className": "progress ",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "aria-labelledby": "progressbar",
              "aria-valuemax": 100,
              "aria-valuemin": 0,
              "aria-valuenow": 50,
              "aria-valuetext": "50%",
              "className": "meter",
              "role": "progressbar",
              "style": Object {
                "width": "50%",
              },
            },
            "ref": null,
            "rendered": null,
            "type": "span",
          },
          "type": "div",
        },
      ],
      "type": "span",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;
