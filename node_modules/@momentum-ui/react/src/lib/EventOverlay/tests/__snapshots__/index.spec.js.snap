// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tests for <EventOverlay /> should match text SnapShot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <EventOverlay
    absoluteParentID={null}
    allowClickAway={true}
    anchorNode={<div />}
    boundingParentID={null}
    checkOverflow={false}
    className=""
    close={null}
    direction="bottom-left"
    focusLockProps={null}
    isContained=""
    isDynamic={false}
    isOpen={false}
    maxHeight={null}
    maxWidth={null}
    portalNode={null}
    scrollParentID={null}
    shouldLockFocus={false}
    showArrow={false}
    style={null}
    targetOffset={
      Object {
        "horizontal": 0,
        "vertical": 0,
      }
    }
    transformParentID={null}
  >
    <span>
      Test
    </span>
  </EventOverlay>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): false,
  Symbol(enzyme.__nodes__): Array [
    false,
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
