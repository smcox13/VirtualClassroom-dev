function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var handlebars = require("handlebars");

var path = require("path");

var fs = require('fs-extra');

function generateFileFromTemplate(_x, _x2, _x3, _x4) {
  return _generateFileFromTemplate.apply(this, arguments);
}

function _generateFileFromTemplate() {
  _generateFileFromTemplate = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(dest, fileName, data, template) {
    var source, compile, finalFile;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return fs.readFile(template, "utf8");

          case 2:
            source = _context.sent;
            compile = handlebars.compile(source);
            finalFile = path.join(dest, fileName);
            _context.next = 7;
            return fs.writeFile(finalFile, compile(data));

          case 7:
            console.warn(finalFile + " written!");

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _generateFileFromTemplate.apply(this, arguments);
}

module.exports = generateFileFromTemplate;