function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var fs = require('fs-extra');

var glob = require('fast-glob');

var jsonfile = require('jsonfile');

var path = require('path');

var dataToJSON = require('./dataToJSON');

var parseComments = require('./parseComments');

var parseExamples = require('./parseExamples');

var createComponentsData =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(filesToBeParsed, outputDirectory, baseDataJSON, writeCombinedJSON) {
    var files, parsedBlocks, _iterator, _isArray, _i, _ref2, file, fileBlocks, filePath, pathArray, library, fileContents, combinedJSON;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            files = glob.sync(filesToBeParsed);
            parsedBlocks = [];
            _iterator = files, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();

          case 4:
            if (!_isArray) {
              _context.next = 10;
              break;
            }

            if (!(_i >= _iterator.length)) {
              _context.next = 7;
              break;
            }

            return _context.abrupt("break", 37);

          case 7:
            _ref2 = _iterator[_i++];
            _context.next = 14;
            break;

          case 10:
            _i = _iterator.next();

            if (!_i.done) {
              _context.next = 13;
              break;
            }

            return _context.abrupt("break", 37);

          case 13:
            _ref2 = _i.value;

          case 14:
            file = _ref2;
            fileBlocks = void 0;
            filePath = path.parse(file);
            pathArray = filePath.dir.split('/');
            library = getLibraryName(file);
            fileContents = fs.readFileSync(file);

            if (!library) {
              _context.next = 35;
              break;
            }

            if (!(pathArray.slice().pop() === 'tests' || pathArray.indexOf('utils') >= 0)) {
              _context.next = 25;
              break;
            }

            fileBlocks = null;
            _context.next = 34;
            break;

          case 25:
            if (!(pathArray.slice().pop() === 'examples')) {
              _context.next = 31;
              break;
            }

            _context.next = 28;
            return parseExamples(library, file, fileContents);

          case 28:
            fileBlocks = _context.sent;
            _context.next = 34;
            break;

          case 31:
            _context.next = 33;
            return parseComments(library, file, fileContents);

          case 33:
            fileBlocks = _context.sent;

          case 34:
            parsedBlocks = fileBlocks ? [].concat(parsedBlocks, [fileBlocks]) : parsedBlocks;

          case 35:
            _context.next = 4;
            break;

          case 37:
            _context.next = 39;
            return dataToJSON(baseDataJSON, parsedBlocks);

          case 39:
            combinedJSON = _context.sent;
            _context.next = 42;
            return splitDataJSONIntoFiles(combinedJSON, outputDirectory, writeCombinedJSON);

          case 42:
            _context.next = 47;
            break;

          case 44:
            _context.prev = 44;
            _context.t0 = _context["catch"](0);
            throw new Error(console.error(_context.t0));

          case 47:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 44]]);
  }));

  return function createComponentsData(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

var getLibraryName = function getLibraryName(filePath) {
  switch (true) {
    case filePath.includes('core'):
      return 'core';

    case filePath.includes('react'):
      return 'react';

    case filePath.includes('angularjs'):
      return 'angularjs';

    case filePath.includes('angular'):
      return 'angular';

    default:
      return null;
  }
};

var splitDataJSONIntoFiles =
/*#__PURE__*/
function () {
  var _ref3 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(componentsJSON, outputDirectory, writeCombinedJSON) {
    var _iterator2, _isArray2, _i2, _ref4, component, fileName;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            fs.mkdirpSync(outputDirectory);
            _iterator2 = componentsJSON, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();

          case 3:
            if (!_isArray2) {
              _context2.next = 9;
              break;
            }

            if (!(_i2 >= _iterator2.length)) {
              _context2.next = 6;
              break;
            }

            return _context2.abrupt("break", 19);

          case 6:
            _ref4 = _iterator2[_i2++];
            _context2.next = 13;
            break;

          case 9:
            _i2 = _iterator2.next();

            if (!_i2.done) {
              _context2.next = 12;
              break;
            }

            return _context2.abrupt("break", 19);

          case 12:
            _ref4 = _i2.value;

          case 13:
            component = _ref4;
            fileName = outputDirectory + "/" + component.name + ".json";
            jsonfile.writeFileSync(fileName, component);
            console.info(outputDirectory + "/" + component.name + ".json created.");

          case 17:
            _context2.next = 3;
            break;

          case 19:
            if (writeCombinedJSON) {
              jsonfile.writeFileSync(outputDirectory + "/combined.json", componentsJSON);
              console.info(outputDirectory + "/combined.json created.");
            }

            _context2.next = 25;
            break;

          case 22:
            _context2.prev = 22;
            _context2.t0 = _context2["catch"](0);
            throw new Error(console.error(_context2.t0));

          case 25:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[0, 22]]);
  }));

  return function splitDataJSONIntoFiles(_x5, _x6, _x7) {
    return _ref3.apply(this, arguments);
  };
}();

module.exports = createComponentsData;