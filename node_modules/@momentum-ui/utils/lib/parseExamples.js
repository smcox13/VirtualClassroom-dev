function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var htmlEntities = require('./htmlEntities');

var kebabCase = require('lodash/kebabCase');

var path = require('path');

var parseExamples =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(library, file, fileContents) {
    var _ref2, filePath, exampleString, escapedExampleString, pathArray, component, sectionWithoutComponentName, unformattedSection, section, exampleBlock;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            filePath = path.parse(file);

            if (!(filePath.name === 'index' || filePath.name === 'examples.module')) {
              _context.next = 4;
              break;
            }

            return _context.abrupt("return");

          case 4:
            exampleString = fileContents.toString('utf8');
            escapedExampleString = htmlEntities(fileContents.toString('utf8'));
            pathArray = filePath.dir.split('/');
            component = kebabCase(pathArray[pathArray.indexOf('examples') - 1]);
            sectionWithoutComponentName = !filePath.name.startsWith(component + "-") ? filePath.name : filePath.name.split(component + "-").pop();
            unformattedSection = sectionWithoutComponentName.indexOf('.') < 0 ? sectionWithoutComponentName : sectionWithoutComponentName.substr(0, sectionWithoutComponentName.indexOf('.'));
            section = kebabCase(unformattedSection);
            exampleBlock = [(_ref2 = {
              component: component,
              section: section
            }, _ref2[library] = {
              example: exampleString,
              escaped: escapedExampleString
            }, _ref2)];
            return _context.abrupt("return", exampleBlock);

          case 15:
            _context.prev = 15;
            _context.t0 = _context["catch"](0);
            throw new Error(console.error(file, _context.t0));

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 15]]);
  }));

  return function parseExamples(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = parseExamples;