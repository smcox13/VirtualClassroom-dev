var startsWith = require('lodash/startsWith');

var trimStart = require('lodash/trimStart');

var find = require('lodash/find');

var isEmpty = require('lodash/isEmpty');

var colorTokens = require('@momentum-ui/core/tokens/colors.json').colors;

var legacyColors = require('@momentum-ui/core/tokens/legacyColors.json');

var getColorValue = function getColorValue(color, colorFormat) {
  var colorName = convertScssVariableToName(color);
  var colorObject = getColorObject(colorName);
  var colorValue = getColorValueFromToken(colorObject, colorFormat);
  return colorValue;
};

var convertScssVariableToName = function convertScssVariableToName(color) {
  switch (true) {
    case startsWith(color, '$md-'):
      return trimStart(color, '$md-');

    case startsWith(color, '$'):
      return trimStart(color, '$');

    case startsWith(color, 'md-'):
      return trimStart(color, 'md-');

    default:
      return color;
  }
};

var getColorObject = function getColorObject(colorName) {
  var colorObject = getColorObjectFromTokens(colorName);

  if (isEmpty(colorObject)) {
    return getColorObjectFromTokens(getNewColorName(colorName));
  }

  return colorObject;
};

var getColorObjectFromTokens = function getColorObjectFromTokens(colorName) {
  return colorTokens.reduce(function (agg, ele) {
    var colorObject = find(ele.variations, {
      name: colorName
    });
    return colorObject ? colorObject : agg;
  }, {});
};

var getNewColorName = function getNewColorName(colorName) {
  var color = {
    oldName: colorName,
    newName: legacyColors[colorName]
  };

  if (!color.newName) {
    consoleHandler('color-error', color);
    return 'black-100';
  }

  consoleHandler('new-colors-warn', color);
  return color.newName;
};

var getColorValueFromToken = function getColorValueFromToken(colorObject, colorFormat) {
  switch (colorFormat) {
    case 'hex':
      return colorObject.hex;

    case 'rgb':
      return "rgb(" + colorObject.rgb.r + ", " + colorObject.rgb.g + ", " + colorObject.rgb.b + ")";

    default:
      return "rgba(" + colorObject.rgba.r + ", " + colorObject.rgba.g + ", " + colorObject.rgba.b + ", " + colorObject.rgba.a + ")";
  }
};

var consoleHandler = function consoleHandler(message, data) {
  /* eslint-disable no-console */
  switch (message) {
    case 'new-colors-warn':
      console.warn("[@momentum-ui] Design system colors update: " + data.oldName + " is now " + data.newName + ". Refer to https://momentum.design/styles/color/style");
      break;

    case 'color-error':
      console.warn("[@momentum-ui] " + data.oldName + " does not exist in the design system," + " please use a color name from https://momentum.design/styles/color/style");
      break;
  }
  /* eslint-enable no-console */

};

module.exports = getColorValue;