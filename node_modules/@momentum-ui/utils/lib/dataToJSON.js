function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var findIndex = require('lodash/findIndex');

var set = require('lodash/set');

var get = require('lodash/get');

var remove = require('lodash/remove');

var isEmpty = require('lodash/isEmpty');

var dataJSON = [];

var getComponentIndex = function getComponentIndex(name) {
  return findIndex(dataJSON, {
    name: name
  });
};

var getComponentID = function getComponentID(baseJSON, name) {
  var componentIndex = findIndex(baseJSON, {
    name: name
  });
  if (componentIndex < 0) return;
  return baseJSON[componentIndex].id;
};

var addOrUpdateComponent =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(block, index) {
    var newComponent, updatedComponent;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;

            if (index < 0) {
              newComponent = {
                name: block.component,
                id: block.id,
                description: block.description,
                sections: [],
                props: {}
              };
              dataJSON = [newComponent].concat(dataJSON);
            } else {
              updatedComponent = dataJSON[index];
              set(updatedComponent, 'name', block.component);
              set(updatedComponent, 'description', block.description);
              dataJSON[index] = updatedComponent;
            }

            _context.next = 7;
            break;

          case 4:
            _context.prev = 4;
            _context.t0 = _context["catch"](0);
            throw new Error(console.error("Error in addOrUpdateComponent with " + block.component, _context.t0));

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 4]]);
  }));

  return function addOrUpdateComponent(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var getSectionIndex = function getSectionIndex(name, componentIndex) {
  var componentSections = get(dataJSON[componentIndex], 'sections');
  return findIndex(componentSections, {
    name: name
  });
};

var verifySection =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(block, componentName) {
    var componentIndex, sectionIndex;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;

            if (block.section) {
              _context2.next = 3;
              break;
            }

            return _context2.abrupt("return", dataJSON);

          case 3:
            _context2.next = 5;
            return getComponentIndex(componentName);

          case 5:
            componentIndex = _context2.sent;
            _context2.next = 8;
            return getSectionIndex(block.section, componentIndex);

          case 8:
            sectionIndex = _context2.sent;
            _context2.next = 11;
            return addOrUpdateSection(block, componentIndex, sectionIndex);

          case 11:
            _context2.next = 16;
            break;

          case 13:
            _context2.prev = 13;
            _context2.t0 = _context2["catch"](0);
            throw new Error(console.error("Error in verifySection with " + block.component + " " + block.section, _context2.t0));

          case 16:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[0, 13]]);
  }));

  return function verifySection(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

var addOrUpdateSection =
/*#__PURE__*/
function () {
  var _ref3 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3(block, componentIndex, sectionIndex) {
    var section;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;
            section = sectionIndex > -1 ? dataJSON[componentIndex].sections[sectionIndex] : {
              name: block.section,
              variations: {}
            };
            if (!section.variations) section.variations = {};
            section.variations.core = block.core ? block.core : section.variations.core;
            section.variations.react = block.js ? block.js : block.react ? block.react : section.variations.react;
            section.variations.angular = block.angular ? block.angular : section.variations.angular;
            section.variations.scss = block.scss ? block.scss : section.variations.scss;
            section.hidecode = block.hidecode ? block.hidecode : section.hidecode;

            if (!(sectionIndex > -1)) {
              _context3.next = 12;
              break;
            }

            return _context3.abrupt("return", dataJSON[componentIndex].sections[sectionIndex] = section);

          case 12:
            return _context3.abrupt("return", dataJSON[componentIndex].sections.push(section));

          case 13:
            _context3.next = 18;
            break;

          case 15:
            _context3.prev = 15;
            _context3.t0 = _context3["catch"](0);
            throw new Error(console.error("Error in addOrUpdateSection with " + block.component + " " + block.section, _context3.t0));

          case 18:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[0, 15]]);
  }));

  return function addOrUpdateSection(_x5, _x6, _x7) {
    return _ref3.apply(this, arguments);
  };
}();

var getPropIndex = function getPropIndex(props, name) {
  return findIndex(props, {
    name: name
  });
};

var verifyProps =
/*#__PURE__*/
function () {
  var _ref4 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee4(block, componentName) {
    var componentIndex;
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.prev = 0;

            if (block.prop) {
              _context4.next = 3;
              break;
            }

            return _context4.abrupt("return", dataJSON);

          case 3:
            _context4.next = 5;
            return getComponentIndex(componentName);

          case 5:
            componentIndex = _context4.sent;
            addOrUpdateProps(block, componentIndex);
            _context4.next = 12;
            break;

          case 9:
            _context4.prev = 9;
            _context4.t0 = _context4["catch"](0);
            throw new Error(console.error("Error in verifyProps with " + componentName + " " + block.section, _context4.t0));

          case 12:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, null, [[0, 9]]);
  }));

  return function verifyProps(_x8, _x9) {
    return _ref4.apply(this, arguments);
  };
}();

var addOrUpdateProps =
/*#__PURE__*/
function () {
  var _ref5 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee5(block, componentIndex) {
    var prop, propLibrary, existingProps, propIndex;
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.prev = 0;
            prop = {
              name: block.prop.name,
              type: block.prop.type,
              description: block.prop.description,
              default: block.prop.default,
              required: block.prop.required
            };
            if (!dataJSON[componentIndex].props) dataJSON[componentIndex].props = {};
            propLibrary = block.prop.library;
            existingProps = dataJSON[componentIndex].props[propLibrary];
            propIndex = getPropIndex(existingProps, prop.name);

            if (existingProps) {
              _context5.next = 10;
              break;
            }

            return _context5.abrupt("return", dataJSON[componentIndex].props[propLibrary] = [prop]);

          case 10:
            if (!(propIndex < 0)) {
              _context5.next = 12;
              break;
            }

            return _context5.abrupt("return", dataJSON[componentIndex].props[propLibrary].push(prop));

          case 12:
            console.info("Replacing existing prop " + prop.name + " in " + propLibrary + " props of " + dataJSON[componentIndex].name + " component.");
            return _context5.abrupt("return", dataJSON[componentIndex].props[propLibrary][propIndex] = prop);

          case 16:
            _context5.prev = 16;
            _context5.t0 = _context5["catch"](0);
            throw new Error(console.error("Error in addOrUpdateProps with " + block.component + " " + block.prop.name, _context5.t0));

          case 19:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, null, [[0, 16]]);
  }));

  return function addOrUpdateProps(_x10, _x11) {
    return _ref5.apply(this, arguments);
  };
}();

var removeEmptyComponents =
/*#__PURE__*/
function () {
  var _ref6 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee6(dataJSON) {
    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            return _context6.abrupt("return", remove(dataJSON, function (component) {
              return isEmpty(component.sections) && isEmpty(component.props);
            }));

          case 1:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function removeEmptyComponents(_x12) {
    return _ref6.apply(this, arguments);
  };
}();

var dataToJSON =
/*#__PURE__*/
function () {
  var _ref7 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee7(baseJSON, blocksArray) {
    var _iterator, _isArray, _i, _ref8, blocks, _iterator2, _isArray2, _i2, _ref9, block, componentName, componentID, newBlock;

    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            dataJSON = baseJSON;
            _context7.prev = 1;
            _iterator = blocksArray, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();

          case 3:
            if (!_isArray) {
              _context7.next = 9;
              break;
            }

            if (!(_i >= _iterator.length)) {
              _context7.next = 6;
              break;
            }

            return _context7.abrupt("break", 42);

          case 6:
            _ref8 = _iterator[_i++];
            _context7.next = 13;
            break;

          case 9:
            _i = _iterator.next();

            if (!_i.done) {
              _context7.next = 12;
              break;
            }

            return _context7.abrupt("break", 42);

          case 12:
            _ref8 = _i.value;

          case 13:
            blocks = _ref8;

            if (!blocks[0].component) {
              _context7.next = 40;
              break;
            }

            _iterator2 = blocks, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();

          case 16:
            if (!_isArray2) {
              _context7.next = 22;
              break;
            }

            if (!(_i2 >= _iterator2.length)) {
              _context7.next = 19;
              break;
            }

            return _context7.abrupt("break", 40);

          case 19:
            _ref9 = _iterator2[_i2++];
            _context7.next = 26;
            break;

          case 22:
            _i2 = _iterator2.next();

            if (!_i2.done) {
              _context7.next = 25;
              break;
            }

            return _context7.abrupt("break", 40);

          case 25:
            _ref9 = _i2.value;

          case 26:
            block = _ref9;
            componentName = blocks[0].component;
            _context7.next = 30;
            return getComponentID(baseJSON, componentName);

          case 30:
            componentID = _context7.sent;
            newBlock = _objectSpread({
              component: componentName,
              id: componentID
            }, block);
            _context7.next = 34;
            return addOrUpdateComponent(newBlock, getComponentIndex(componentName));

          case 34:
            _context7.next = 36;
            return verifySection(newBlock, componentName);

          case 36:
            _context7.next = 38;
            return verifyProps(newBlock, componentName);

          case 38:
            _context7.next = 16;
            break;

          case 40:
            _context7.next = 3;
            break;

          case 42:
            _context7.next = 44;
            return removeEmptyComponents(dataJSON);

          case 44:
            return _context7.abrupt("return", dataJSON);

          case 47:
            _context7.prev = 47;
            _context7.t0 = _context7["catch"](1);
            throw new Error(console.error("Error in dataToJSON with " + dataJSON.component, _context7.t0));

          case 50:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, null, [[1, 47]]);
  }));

  return function dataToJSON(_x13, _x14) {
    return _ref7.apply(this, arguments);
  };
}();

module.exports = dataToJSON;